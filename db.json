{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Asp-Net-Core-Cookies和Session.md","hash":"4af26fe19e90f7939b1dc6c501e20b8b89762bd2","modified":1617074656035},{"_id":"source/_posts/Asp-Net-Core-REST-API基础.md","hash":"b6e70777d44936eef7fcdf285dc936f96e33b438","modified":1617074656035},{"_id":"source/_posts/Asp-Net-Core-Response快取.md","hash":"a9286b503a019915a1b3573c3b9d169935286b0a","modified":1617074656035},{"_id":"source/_posts/Asp-Net-Core-SignalR.md","hash":"66ddee8c60f028285f63c68b1d3b627aefff8dcf","modified":1617074656036},{"_id":"source/_posts/Asp-Net-Core-Url 重写.md","hash":"40b6d1ec621b220d4cb76765f5f9a68bbabb455e","modified":1617074656036},{"_id":"source/_posts/Asp-Net-Core-Web-API的先进架构.md","hash":"f7fe1934ae77fd7d5c1af9095282e8b1582219d4","modified":1617074656037},{"_id":"source/_posts/Asp-Net-Core-WebSocket.md","hash":"7099605e26b9534d5b26f5fd94d628df9a0c15d2","modified":1617074656037},{"_id":"source/_posts/Asp-Net-Core-中间件.md","hash":"e77f609f74eb747a23d9c17f12834dfc619a26f9","modified":1617074656038},{"_id":"source/_posts/Asp-Net-Core-压缩封包.md","hash":"51f19b514e0850db7e8db5119f1ce8aca3ad5d50","modified":1617074656038},{"_id":"source/_posts/Asp-Net-Core-异常处理.md","hash":"0cba64f19848b1d32371f9c670d4081f32cc2bd4","modified":1617074656038},{"_id":"source/_posts/Asp-Net-Core-模型绑定.md","hash":"cc5a3e03b6b1e3f04e1894589a0903a7ea2fad85","modified":1617074656039},{"_id":"source/_posts/Asp-Net-Core-过滤器.md","hash":"6a9f73c250f156b97188c92c635523536aecce26","modified":1617074656039},{"_id":"source/_posts/Asp-Net-Core中使用Session.md","hash":"c3f9ff5bed48cb7eb2fa97b22538b6c1e1040970","modified":1617074656039},{"_id":"source/_posts/CSharp-7.0-核心技术指南摘录(一).md","hash":"db9036d5c0f3b3430f69e38416bd9237534ec498","modified":1617074656040},{"_id":"source/_posts/CSharp-7.0-核心技术指南摘录(三).md","hash":"810dae7c6888185dc221184c32c7ad931da55489","modified":1617074656040},{"_id":"source/_posts/CSharp-7.0-核心技术指南摘录(二).md","hash":"0ffaedc43e2ff7637b485e7f127990fcf95db000","modified":1617074656041},{"_id":"source/_posts/CSharp-7.0-核心技术指南摘录(五) .md","hash":"047a8295c58b1accd85852ce22a2873439c92f41","modified":1617074656041},{"_id":"source/_posts/CSharp-7.0-核心技术指南摘录(四).md","hash":"738407c2e3da553bac3128e4133fbc98d572d7bd","modified":1617074656042},{"_id":"source/_posts/CSharp-Aes加密.md","hash":"6c7e7cf258c2f33715f71ceb9903881272f4cd4e","modified":1617074656042},{"_id":"source/_posts/CSharp-利用委托解决跨线程操作控件产生的问题.md","hash":"0489142d3b21db6860125f19bd06f2106aa8e736","modified":1617074656043},{"_id":"source/_posts/CSharp-Math类.md","hash":"d59810fb91eb243287b21ecb3e8e185d0931b2fd","modified":1617074656042},{"_id":"source/_posts/CSharp-发送邮件.md","hash":"23446bbf9da82b43abb9984c3bf76a59d832f2e6","modified":1617074656043},{"_id":"source/_posts/CSharp-在Winform中使用Sqlite.md","hash":"435f465c5a3bd8ba6993f16d5a47a35699f6ce5f","modified":1617074656043},{"_id":"source/_posts/CSharp-字符串处理.md","hash":"16863fe9517a9784eac4dfa4871199c2a6899914","modified":1617074656044},{"_id":"source/_posts/CSharp-常用关键字和基础类.md","hash":"fa2435e9ff864b24085e9df94ce4e19e42dbba83","modified":1617074656044},{"_id":"source/_posts/CSharp-通过表达式树复制对象.md","hash":"ed02c3838a7a12db2926799e6f3fcdbad3df3a8f","modified":1617074656045},{"_id":"source/_posts/EF-Core实现DB-First和Code-First.md","hash":"2d610b6715ac99ed06bc28b94afa13c34902fc68","modified":1617074656045},{"_id":"source/_posts/Net-Core-MVC-三层架构框架.md","hash":"b02cbfdd3206f785819b5d956856daf6897ba1cf","modified":1617074656046},{"_id":"source/_posts/IdentityServer4-ClientCredential模式.md","hash":"cef7448201cdca078ec1a1b5cb924c466647fff4","modified":1617074656046},{"_id":"source/_posts/Net-Core-Ocelot.md","hash":"c37254f3726f59d03f6ce4d0c55242aa642ff18d","modified":1617074656047},{"_id":"source/_posts/Net-Core-RSA-RSA2算法.md","hash":"5248e78eede129cdd662a68622f8683ffb2de4bf","modified":1617074656047},{"_id":"source/_posts/Net-Core-从零开始搭建框架(一).md","hash":"778d68c39cfb619df1bd512f1f19cd0f975dbb7e","modified":1617074656048},{"_id":"source/_posts/Net-Core-使用swagger进行API接口文档管理.md","hash":"aa5ab7ec75bd7abbabb12110c8f91bd2d5ac5963","modified":1617074656048},{"_id":"source/_posts/Net-Core-使用日志NLog.md","hash":"acbb9312b949169dbdd05c8af12513bc305c962d","modified":1617074656049},{"_id":"source/_posts/Net-Core-修改IOC为Autofac.md","hash":"15801370cd819eb836641dcc13c18cc7ad0042c0","modified":1617074656049},{"_id":"source/_posts/Net-Core-单例模式.md","hash":"a3a9ff1ab518f76bcd69b312c2b8df0ee0b9d4dc","modified":1617074656050},{"_id":"source/_posts/Net-Core-抽象工厂模式.md","hash":"c41123699908e773892e0f266b93d5ca675bdc05","modified":1617074656050},{"_id":"source/_posts/Net-Core-简单工厂和工厂方法模式.md","hash":"77e7625b9ba74c38b70a5c69b37bd3d31559a8ba","modified":1617074656050},{"_id":"source/_posts/Net-Core-装饰模式.md","hash":"e8ff53cc15c7a0a22f2bbaace97697b04a815a3b","modified":1617074656051},{"_id":"source/_posts/Net-Core-观察者模式.md","hash":"878ae99a04e9b6a1dc27a0eb8a374acceb0c8e44","modified":1617074656051},{"_id":"source/_posts/Net-Core-配置与自动更新.md","hash":"b1b3d029abe083676e5e8fe9b809dbc94daa4047","modified":1617074656052},{"_id":"source/_posts/Net-Linq.md","hash":"2929a386216e86e17a7b1ecab95ce78ace5886c3","modified":1617074656052},{"_id":"source/_posts/Net-Log4net封装.md","hash":"36b67cf1977ab701fa72c7af2edcba2503fa975c","modified":1617074656053},{"_id":"source/_posts/Net-MVC-三层架构框架.md","hash":"e88c5bcaba0fc10952847103eb1a5e033b427ab0","modified":1617074656053},{"_id":"source/_posts/WPF基础学习-一.md","hash":"23f33947fe5c847f2169cc7b3548e502bfeb86a9","modified":1617074656054},{"_id":"source/_posts/Net-爬虫封装.md","hash":"5966ddf9ad4b1118f6de5552f225996938078e04","modified":1617074656054},{"_id":"source/_posts/Wcf创建http和Webservice接口.md","hash":"41735ad25dfeeb104b6eba8fe453009715ad1eac","modified":1617074656055},{"_id":"source/_posts/万万没想到-用理工科思维理解世界.md","hash":"0590c2e132b69b1d6c7f2dc3c72c8c37dc53992e","modified":1617074656056},{"_id":"source/_posts/WPF基础学习-二.md","hash":"384f53b16014417e4a941fd855d228dc041086cf","modified":1617074656055},{"_id":"source/_posts/亲密关系-通往灵魂的桥梁-无拘无束的关系.md","hash":"853e7d3951f4ecda8d0b85e8aedd8dd28225772e","modified":1617074656056},{"_id":"source/_posts/人性的弱点-如何赢得友谊并影响他人(二).md","hash":"f9ce430e1f5be011c73000081c96def3a1dccf21","modified":1617074656057},{"_id":"source/_posts/使用WebApiClient请求和管理Restful-Api.md","hash":"eec54e9f5bd244c34f888cfa93491e3824b4fd94","modified":1617074656057},{"_id":"source/_posts/人性的弱点-如何赢得友谊并影响他人.md","hash":"fd55726df51077144bad2e4a4290c31c31e229f5","modified":1617074656057},{"_id":"source/_posts/值类型与引用类型.md","hash":"f1d383f766d63adfc20ae41c861bfd9082792efd","modified":1617074656058},{"_id":"source/_posts/关于Winform窗体的快速复制.md","hash":"3351b1a553da2c93b1d5a854cd0b4152cf755e87","modified":1617074656058},{"_id":"source/_posts/关于毕业设计的整理.md","hash":"5182ea8dbbb983b1621ebe5b184282c3e2513bfa","modified":1617074656059},{"_id":"source/_posts/关于选择聚会地点的软件.md","hash":"0d2d17f1926b3bc67fd303ce561b87b9e331fd46","modified":1617074656059},{"_id":"source/_posts/去当你想当的任何人吧-寻找自我的魔法.md","hash":"315a66ef2cd5e9b823f8cfe5c1c957c7c30c5915","modified":1617074656060},{"_id":"source/_posts/夏洛特烦恼观影随想.md","hash":"c2203c1a4ca7e6513d94a7196ba8af23e8e84178","modified":1617074656060},{"_id":"source/_posts/小猫的胡言乱语.md","hash":"4baa137a6cb2b4c4ca547e3f468c4e9f175929c4","modified":1617074656061},{"_id":"source/_posts/多种仓储模式.md","hash":"3c059f419e023a7ba2e97ba1543e2cd02b9b0be4","modified":1617074656061},{"_id":"source/_posts/微服务-Consul学习(二).md","hash":"0db89c6b88cb5fedd57ed5f235b72f1b3b145bea","modified":1617074656061},{"_id":"source/_posts/微服务-Consul学习.md","hash":"cdc99b0baae482595ffa0ad54fa82a33443d9d4a","modified":1617074656062},{"_id":"source/_posts/掌握习惯-原子习惯-细微改变带来巨大成就的实证法则-二.md","hash":"ec819754d67725e00730416a4618531149c433b3","modified":1617074656063},{"_id":"source/_posts/智识分子-做个复杂的现代人.md","hash":"2a0237da807f6ad10d1ca45178e6ccb1a4f71698","modified":1617074656064},{"_id":"source/_posts/掌握习惯-原子习惯-细微改变带来巨大成就的实证法则.md","hash":"a834d0cc86f9b5637fa50619de31475381282ca2","modified":1617074656063},{"_id":"source/_posts/杂事随想.md","hash":"c39b267deeb34356bd7cd2a0d8cf665c334c50d6","modified":1617074656064},{"_id":"source/_posts/直觉泵-关于意义和内容思考工具(三).md","hash":"0db6831c03faa5d3d8f781f36b9e5ea56608d93d","modified":1617074656065},{"_id":"source/_posts/直觉泵-关于意义和内容思考工具(二).md","hash":"a89e9f2cebf7bac3ce041d5fab452aab03fd12f6","modified":1617074656065},{"_id":"source/_posts/直觉泵-关于意义和内容思考工具.md","hash":"15f2b25113ff73f23474aae66bb21bedc62c6dac","modified":1617074656066},{"_id":"source/_posts/直觉泵-关于计算机的思考工具.md","hash":"4a048feeed3d775bd94cdda6adf6c57bf2658f7f","modified":1617074656066},{"_id":"source/_posts/直觉泵-通用思考工具.md","hash":"c1226d51117df1e33fc692b3cfa76a406c6dfe6f","modified":1617074656067},{"_id":"source/_posts/直觉泵-通用思考工具(二).md","hash":"3e7f7c148779c89e4a5cb2588186f3db466b1ea1","modified":1617074656067},{"_id":"source/_posts/罗辑思维.md","hash":"e017097c306fe312fd3281e73f183ceeeac7bbc9","modified":1617074656068},{"_id":"source/_posts/聚会随想.md","hash":"42b12dc0be55737c1f79fca123993bc4c0cc5b79","modified":1617074656068},{"_id":"source/_posts/类型基础.md","hash":"37551a22ef6cf66974226fbe70e4f03ee54a0ce0","modified":1617074656067},{"_id":"source/_posts/贫血模型和充血模型.md","hash":"a4dfdd15dfdd04212fa5acaa3e8ca3cb624bf9e7","modified":1617074656069},{"_id":"source/_posts/随笔-近期反思.md","hash":"f60f5a7f7bab489d2979cdba75ff9d9aa91b6ada","modified":1617074656070},{"_id":"source/_posts/随笔-断舍离.md","hash":"a2b26fbc5be42846e10cc30a81cb8668e57e5090","modified":1617074656069},{"_id":"source/_posts/高手-精英的见识和我们的时代.md","hash":"a0ada5ffab1a384eef78f957ee641e7aad66a804","modified":1617074656070},{"_id":"source/about/index.md","hash":"976eb17d4890ad0c6e0136790cee326313cb1ddb","modified":1617074656071},{"_id":"source/tags/index.md","hash":"9b61d0777a4d3e20bb05a3400fab7bd5e73e2c2c","modified":1617074656072},{"_id":"source/categories/index.md","hash":"bc431fa6ceb3da0ad10a3f7071a01cbfa2b1dc4b","modified":1617074656071},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1617076216852},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1617076216853},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1617076216853},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1617076216861},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1617076216860},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1617076216861},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1617076216862},{"_id":"themes/next/_config.yml","hash":"c31a626ea72088405b6a8aeaf192bb2275184dc8","modified":1617076832901},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1617076216863},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1617076216874},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1617076216862},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1617076216915},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1617076216854},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1617076216857},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1617076216855},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1617076216857},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1617076216858},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1617076216858},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1617076216858},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1617076216859},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1617076216859},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1617076216860},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1617076216860},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1617076216875},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1617076216875},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1617076216876},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1617076216876},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1617076216876},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1617076216877},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1617076216877},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1617076216878},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1617076216878},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1617076216878},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1617076216879},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1617076216879},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1617076216879},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1617076216880},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1617076216880},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1617076216881},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1617076216881},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1617076216881},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1617076216882},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1617076216882},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1617076216882},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1617076216883},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1617076216883},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1617076216913},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1617076216914},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1617076216914},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1617076216914},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1617076216915},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1617076216915},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1617076216926},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1617076216864},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1617076216864},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1617076216865},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1617076216865},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1617076216866},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1617076216866},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1617076216866},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1617076216867},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1617076216867},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1617076216855},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1617076216856},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1617076216856},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1617076216856},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1617076216884},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1617076216884},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1617076216885},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1617076216897},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1617076216897},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1617076216900},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1617076216898},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1617076216900},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1617076216886},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1617076216887},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1617076216891},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1617076216892},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1617076216896},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1617076216903},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1617076216906},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1617076216908},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1617076216908},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1617076216917},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1617076216923},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1617076216923},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1617076216924},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1617076216924},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1617076216924},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1617076216925},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1617076216925},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1617076216926},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1617076216926},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1617076216927},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1617076216927},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1617076216928},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1617076216928},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1617076216928},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1617076216929},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1617076216929},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1617076216930},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1617076216930},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1617076216930},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1617076216931},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1617076216959},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1617076216971},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1617076216970},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1617076216971},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1617076216972},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1617076216971},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1617076216972},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1617076216973},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1617076216973},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1617076216974},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1617076216974},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1617076216975},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1617076216975},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1617076216975},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1617076216976},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1617076216976},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1617076216977},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1617076216977},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1617076216978},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1617076216978},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1617076216980},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1617076216981},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1617076216868},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1617076216868},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1617076216868},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1617076216869},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1617076216870},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1617076216870},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1617076216871},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1617076216871},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1617076216872},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1617076216872},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1617076216873},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1617076216873},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1617076216874},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1617076216898},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1617076216898},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1617076216900},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1617076216899},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1617076216899},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1617076216887},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1617076216888},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1617076216889},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1617076216889},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1617076216889},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1617076216890},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1617076216890},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1617076216891},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1617076216892},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1617076216893},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1617076216893},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1617076216893},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1617076216894},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1617076216894},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1617076216895},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1617076216895},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1617076216895},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1617076216896},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1617076216901},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1617076216901},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1617076216902},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1617076216902},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1617076216903},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1617076216904},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1617076216904},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1617076216905},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1617076216905},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1617076216905},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1617076216906},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1617076216906},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1617076216907},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1617076216907},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1617076216908},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1617076216909},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1617076216909},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1617076216910},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1617076216913},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1617076216912},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1617076216910},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1617076216911},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1617076216911},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1617076216912},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1617076216912},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1617076216918},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1617076216918},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1617076216918},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1617076216920},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1617076216920},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1617076216920},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1617076216921},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1617076216921},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1617076216922},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1617076216922},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1617076216922},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1617076216968},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1617076216968},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1617076216969},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1617076216969},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1617076216970},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1617076216979},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1617076216979},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1617076216985},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1617076216985},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1617076216932},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1617076216932},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1617076216933},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1617076216940},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1617076216946},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1617076216946},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1617076216952},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1617076216951},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1617076216952},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1617076216955},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1617076216955},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1617076216955},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1617076216959},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1617076216956},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1617076216960},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1617076216962},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1617076216963},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1617076216964},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1617076216963},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1617076216965},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1617076216965},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1617076216960},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1617076216961},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1617076216961},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1617076216962},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1617076216962},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1617076216965},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1617076216966},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1617076216966},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1617076216967},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1617076216967},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1617076216967},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1617076216982},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1617076216983},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1617076216933},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1617076216933},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1617076216934},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1617076216934},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1617076216935},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1617076216935},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1617076216935},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1617076216936},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1617076216937},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1617076216937},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1617076216937},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1617076216938},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1617076216938},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1617076216938},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1617076216939},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1617076216939},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1617076216939},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1617076216940},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1617076216941},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1617076216941},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1617076216941},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1617076216942},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1617076216942},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1617076216943},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1617076216943},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1617076216944},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1617076216944},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1617076216944},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1617076216945},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1617076216945},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1617076216946},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1617076216947},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1617076216948},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1617076216948},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1617076216947},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1617076216949},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1617076216949},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1617076216949},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1617076216950},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1617076216950},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1617076216951},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1617076216953},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1617076216953},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1617076216954},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1617076216954},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1617076216956},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1617076216957},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1617076216958},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1617076216957},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1617076216958},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1617076216958},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1617076216958},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1617076216983},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1617076216984}],"Category":[{"name":".Net Core","_id":"ckmvhvwz00004vcua5pmu673a"},{"name":"C#","_id":"ckmvhvwzi0015vcuahwsk471p"},{"name":".Net","_id":"ckmvhvx0d003svcua8sjw0k0l"},{"name":"读书笔记","_id":"ckmvhvx0k004dvcuabf6y8zzr"},{"name":"API","_id":"ckmvhvx0u0056vcuaaxtl9w9x"},{"name":"随笔","_id":"ckmvhvx0x005evcua7jde0vl6"},{"name":"微服务","_id":"ckmvhvx12005svcua2hcf05nz"},{"name":"架构","_id":"ckmvhvx1f006xvcua78ebduy0"}],"Data":[],"Page":[{"title":"about","date":"2018-03-07T16:02:39.000Z","_content":"\n#### 陈家辉的个人简历\n\n.Net 开发工程师\n\n##### 基本资料\n\n姓  名：陈家辉 工作经验：1.5 年 联系邮箱：1120873075@qq.com 联系电话：136-5041-5452\n\n##### 专业技能\n\n熟练掌握 ASP.NET 开发并可以使用 .Net Core 进行跨平台开发、熟练使用 MVC 框架、熟悉 Spring.Net, Log4.Net 等框架、熟悉 Web API、WCF 技术，能独立开发基于 Asp.Net Core 的 B/S 系统。\n熟练掌握 Winform 桌面程序开发、能独立开发 Windows PC 端应用，并使用 DevExpress 进行开发。\n熟悉 SQL 语言，熟练使用 SQL Server、Oracle 数据库，掌握数据库设计流程；\n熟练使用 HTML、CSS、JavaScript 技术以及 JQuery、Bootstrap、Vue.JS、JQuery EasyUI 等框架进行网页设计；\n有微服务架构相应的技能基础。\n\n##### 项目经验\n\n###### 高铁快运信息管理系统（2019/12--至今）\n\n项目介绍\n本项目主要分为十大模块(权限管理、基础资料、账单管理、运单管理、物料管理、报价管理、客服管理、订单管理)。本系统主要是为了给高铁快运的快递业务提供更为方便快捷的服务。\n\n技术选型\nC#、Winform、DevExpress.\n\n职责领域\n本人负责全部模块的开发。\n\n###### 永利八达通TMS系统（2019/08--至今）\n\n项目介绍\n本项目主要分为十大模块(权限管理、基础资料、业务配置、运单管理、物料管理、报价管理、操作管理、财务管理、客服管理、项目管理)。本系统主要是为了给永利八达通公司的TMS业务提供更为方便快捷的服务，使得每一票运单的轨迹和操作日志，当前所在节点都清晰可见，同时对于报价的灵活配置也使得公司切换报价时不会出现手忙脚乱的情况。\n\n技术选型\nC#、Winform、DevExpress.\n\n职责领域\n本人主要负责其中的业务配置、物料管理、报价管理以及部分的运单管理。\n\n###### 黑猫快递管理系统（2019/02--2019/05）\n\n项目介绍\n本项目主要分为六大模块(权限管理、基础资料、账单管理、运单管理、客服管理、报价管理)。本系统主要是为了给黑猫快递公司的快递业务提供更为方便快捷的服务.\n\n技术选型\nC#、Winform、DevExpress.\n\n职责领域\n本人负责除账单模块外的全部模块的开发。\n\n###### 河北报业快递管理系统（2018/09--2018/12）\n\n项目介绍\n本项目主要分为六大模块(权限管理、基础资料、落地配、运单管理、供货商、报价管理)。本系统主要是为了给河北报业公司的落地配和快递业务提供更为方便快捷的服务，使得运单数据导入系统后可以自动进行配送站的匹配,简便了操作人员的操作。\n\n技术选型\nC#、Winform、DevExpress.\n\n职责领域\n本人负责全部模块的开发。\n\n###### 酒店订餐管理系统（2016/10--2016/11）\n\n项目介绍\n可以对酒店内的所有菜名以及相对应的菜号进行查询；可以对订餐的客户进行记录，并能查询、修改、删除和结算总额；可以对每日的营业额进行结算，以及统计利润总额。本人担当该项目的主要编程人员同时负责核心代码 。\n\n第一阶段（2016/03--2016/5）\n开发环境\nWindows 10、PhpStorm、Mysql、Github\n\n技术选型\nPHP、Mycncart、HTML5、jQuery、Ajax、BootStrap、Node.js\n\n阶段简介\n这个阶段主要是为了能够尽快完成酒店方面提出的需求以便投入使用，选用了PHP的Mycncart框架作为项目的整体解决方案。项目从2016年9月提出，10月收到酒店订餐管理系统的设计图，11月完成系统的大部分功能，目前运行良好。\n\n第二阶段（2016/11--2016/11）\n\n阶段简介\n由于第一阶段有部分功能由于时间过于紧张尚未实现，再加上酒店在系统投入使用后,对系统有了新的需求。于是在原来的基础上加上了后台新消息的通知和声音提示，和相应的邮件推送的功能。\n\n##### 工作经历\n\n2018/08 -- 至今    深圳市智腾达软件技术有限公司\n2017/02 -- 2017/11 广东中拓信息技术有限公司\n2013/09 -- 2018/07 广东医科大学学生\n\n##### 自我评价\n\n热爱编程\n能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。\n出色的自学能力\n专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。\n\n##### 想做的事儿\n\n深入研究 C# 底层原理，阅读 C# 源码；随时了解计算机前沿技术，扎根开源社区，贡献开源项目；\n在学习的同时勤写博客记录分享所得所思.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-03-08 00:02:39\n---\n\n#### 陈家辉的个人简历\n\n.Net 开发工程师\n\n##### 基本资料\n\n姓  名：陈家辉 工作经验：1.5 年 联系邮箱：1120873075@qq.com 联系电话：136-5041-5452\n\n##### 专业技能\n\n熟练掌握 ASP.NET 开发并可以使用 .Net Core 进行跨平台开发、熟练使用 MVC 框架、熟悉 Spring.Net, Log4.Net 等框架、熟悉 Web API、WCF 技术，能独立开发基于 Asp.Net Core 的 B/S 系统。\n熟练掌握 Winform 桌面程序开发、能独立开发 Windows PC 端应用，并使用 DevExpress 进行开发。\n熟悉 SQL 语言，熟练使用 SQL Server、Oracle 数据库，掌握数据库设计流程；\n熟练使用 HTML、CSS、JavaScript 技术以及 JQuery、Bootstrap、Vue.JS、JQuery EasyUI 等框架进行网页设计；\n有微服务架构相应的技能基础。\n\n##### 项目经验\n\n###### 高铁快运信息管理系统（2019/12--至今）\n\n项目介绍\n本项目主要分为十大模块(权限管理、基础资料、账单管理、运单管理、物料管理、报价管理、客服管理、订单管理)。本系统主要是为了给高铁快运的快递业务提供更为方便快捷的服务。\n\n技术选型\nC#、Winform、DevExpress.\n\n职责领域\n本人负责全部模块的开发。\n\n###### 永利八达通TMS系统（2019/08--至今）\n\n项目介绍\n本项目主要分为十大模块(权限管理、基础资料、业务配置、运单管理、物料管理、报价管理、操作管理、财务管理、客服管理、项目管理)。本系统主要是为了给永利八达通公司的TMS业务提供更为方便快捷的服务，使得每一票运单的轨迹和操作日志，当前所在节点都清晰可见，同时对于报价的灵活配置也使得公司切换报价时不会出现手忙脚乱的情况。\n\n技术选型\nC#、Winform、DevExpress.\n\n职责领域\n本人主要负责其中的业务配置、物料管理、报价管理以及部分的运单管理。\n\n###### 黑猫快递管理系统（2019/02--2019/05）\n\n项目介绍\n本项目主要分为六大模块(权限管理、基础资料、账单管理、运单管理、客服管理、报价管理)。本系统主要是为了给黑猫快递公司的快递业务提供更为方便快捷的服务.\n\n技术选型\nC#、Winform、DevExpress.\n\n职责领域\n本人负责除账单模块外的全部模块的开发。\n\n###### 河北报业快递管理系统（2018/09--2018/12）\n\n项目介绍\n本项目主要分为六大模块(权限管理、基础资料、落地配、运单管理、供货商、报价管理)。本系统主要是为了给河北报业公司的落地配和快递业务提供更为方便快捷的服务，使得运单数据导入系统后可以自动进行配送站的匹配,简便了操作人员的操作。\n\n技术选型\nC#、Winform、DevExpress.\n\n职责领域\n本人负责全部模块的开发。\n\n###### 酒店订餐管理系统（2016/10--2016/11）\n\n项目介绍\n可以对酒店内的所有菜名以及相对应的菜号进行查询；可以对订餐的客户进行记录，并能查询、修改、删除和结算总额；可以对每日的营业额进行结算，以及统计利润总额。本人担当该项目的主要编程人员同时负责核心代码 。\n\n第一阶段（2016/03--2016/5）\n开发环境\nWindows 10、PhpStorm、Mysql、Github\n\n技术选型\nPHP、Mycncart、HTML5、jQuery、Ajax、BootStrap、Node.js\n\n阶段简介\n这个阶段主要是为了能够尽快完成酒店方面提出的需求以便投入使用，选用了PHP的Mycncart框架作为项目的整体解决方案。项目从2016年9月提出，10月收到酒店订餐管理系统的设计图，11月完成系统的大部分功能，目前运行良好。\n\n第二阶段（2016/11--2016/11）\n\n阶段简介\n由于第一阶段有部分功能由于时间过于紧张尚未实现，再加上酒店在系统投入使用后,对系统有了新的需求。于是在原来的基础上加上了后台新消息的通知和声音提示，和相应的邮件推送的功能。\n\n##### 工作经历\n\n2018/08 -- 至今    深圳市智腾达软件技术有限公司\n2017/02 -- 2017/11 广东中拓信息技术有限公司\n2013/09 -- 2018/07 广东医科大学学生\n\n##### 自我评价\n\n热爱编程\n能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。\n出色的自学能力\n专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。\n\n##### 想做的事儿\n\n深入研究 C# 底层原理，阅读 C# 源码；随时了解计算机前沿技术，扎根开源社区，贡献开源项目；\n在学习的同时勤写博客记录分享所得所思.\n","updated":"2021-03-30T03:24:16.071Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckmvhvwyq0000vcua09al3k7h","content":"<h4 id=\"陈家辉的个人简历\"><a href=\"#陈家辉的个人简历\" class=\"headerlink\" title=\"陈家辉的个人简历\"></a>陈家辉的个人简历</h4><p>.Net 开发工程师</p>\n<h5 id=\"基本资料\"><a href=\"#基本资料\" class=\"headerlink\" title=\"基本资料\"></a>基本资料</h5><p>姓  名：陈家辉 工作经验：1.5 年 联系邮箱：<a href=\"mailto:&#x31;&#49;&#50;&#x30;&#x38;&#x37;&#51;&#48;&#x37;&#53;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;\">&#x31;&#49;&#50;&#x30;&#x38;&#x37;&#51;&#48;&#x37;&#53;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;</a> 联系电话：136-5041-5452</p>\n<h5 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h5><p>熟练掌握 ASP.NET 开发并可以使用 .Net Core 进行跨平台开发、熟练使用 MVC 框架、熟悉 Spring.Net, Log4.Net 等框架、熟悉 Web API、WCF 技术，能独立开发基于 Asp.Net Core 的 B/S 系统。<br>熟练掌握 Winform 桌面程序开发、能独立开发 Windows PC 端应用，并使用 DevExpress 进行开发。<br>熟悉 SQL 语言，熟练使用 SQL Server、Oracle 数据库，掌握数据库设计流程；<br>熟练使用 HTML、CSS、JavaScript 技术以及 JQuery、Bootstrap、Vue.JS、JQuery EasyUI 等框架进行网页设计；<br>有微服务架构相应的技能基础。</p>\n<h5 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h5><h6 id=\"高铁快运信息管理系统（2019-12–至今）\"><a href=\"#高铁快运信息管理系统（2019-12–至今）\" class=\"headerlink\" title=\"高铁快运信息管理系统（2019/12–至今）\"></a>高铁快运信息管理系统（2019/12–至今）</h6><p>项目介绍<br>本项目主要分为十大模块(权限管理、基础资料、账单管理、运单管理、物料管理、报价管理、客服管理、订单管理)。本系统主要是为了给高铁快运的快递业务提供更为方便快捷的服务。</p>\n<p>技术选型<br>C#、Winform、DevExpress.</p>\n<p>职责领域<br>本人负责全部模块的开发。</p>\n<h6 id=\"永利八达通TMS系统（2019-08–至今）\"><a href=\"#永利八达通TMS系统（2019-08–至今）\" class=\"headerlink\" title=\"永利八达通TMS系统（2019/08–至今）\"></a>永利八达通TMS系统（2019/08–至今）</h6><p>项目介绍<br>本项目主要分为十大模块(权限管理、基础资料、业务配置、运单管理、物料管理、报价管理、操作管理、财务管理、客服管理、项目管理)。本系统主要是为了给永利八达通公司的TMS业务提供更为方便快捷的服务，使得每一票运单的轨迹和操作日志，当前所在节点都清晰可见，同时对于报价的灵活配置也使得公司切换报价时不会出现手忙脚乱的情况。</p>\n<p>技术选型<br>C#、Winform、DevExpress.</p>\n<p>职责领域<br>本人主要负责其中的业务配置、物料管理、报价管理以及部分的运单管理。</p>\n<h6 id=\"黑猫快递管理系统（2019-02–2019-05）\"><a href=\"#黑猫快递管理系统（2019-02–2019-05）\" class=\"headerlink\" title=\"黑猫快递管理系统（2019/02–2019/05）\"></a>黑猫快递管理系统（2019/02–2019/05）</h6><p>项目介绍<br>本项目主要分为六大模块(权限管理、基础资料、账单管理、运单管理、客服管理、报价管理)。本系统主要是为了给黑猫快递公司的快递业务提供更为方便快捷的服务.</p>\n<p>技术选型<br>C#、Winform、DevExpress.</p>\n<p>职责领域<br>本人负责除账单模块外的全部模块的开发。</p>\n<h6 id=\"河北报业快递管理系统（2018-09–2018-12）\"><a href=\"#河北报业快递管理系统（2018-09–2018-12）\" class=\"headerlink\" title=\"河北报业快递管理系统（2018/09–2018/12）\"></a>河北报业快递管理系统（2018/09–2018/12）</h6><p>项目介绍<br>本项目主要分为六大模块(权限管理、基础资料、落地配、运单管理、供货商、报价管理)。本系统主要是为了给河北报业公司的落地配和快递业务提供更为方便快捷的服务，使得运单数据导入系统后可以自动进行配送站的匹配,简便了操作人员的操作。</p>\n<p>技术选型<br>C#、Winform、DevExpress.</p>\n<p>职责领域<br>本人负责全部模块的开发。</p>\n<h6 id=\"酒店订餐管理系统（2016-10–2016-11）\"><a href=\"#酒店订餐管理系统（2016-10–2016-11）\" class=\"headerlink\" title=\"酒店订餐管理系统（2016/10–2016/11）\"></a>酒店订餐管理系统（2016/10–2016/11）</h6><p>项目介绍<br>可以对酒店内的所有菜名以及相对应的菜号进行查询；可以对订餐的客户进行记录，并能查询、修改、删除和结算总额；可以对每日的营业额进行结算，以及统计利润总额。本人担当该项目的主要编程人员同时负责核心代码 。</p>\n<p>第一阶段（2016/03–2016/5）<br>开发环境<br>Windows 10、PhpStorm、Mysql、Github</p>\n<p>技术选型<br>PHP、Mycncart、HTML5、jQuery、Ajax、BootStrap、Node.js</p>\n<p>阶段简介<br>这个阶段主要是为了能够尽快完成酒店方面提出的需求以便投入使用，选用了PHP的Mycncart框架作为项目的整体解决方案。项目从2016年9月提出，10月收到酒店订餐管理系统的设计图，11月完成系统的大部分功能，目前运行良好。</p>\n<p>第二阶段（2016/11–2016/11）</p>\n<p>阶段简介<br>由于第一阶段有部分功能由于时间过于紧张尚未实现，再加上酒店在系统投入使用后,对系统有了新的需求。于是在原来的基础上加上了后台新消息的通知和声音提示，和相应的邮件推送的功能。</p>\n<h5 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h5><p>2018/08 – 至今    深圳市智腾达软件技术有限公司<br>2017/02 – 2017/11 广东中拓信息技术有限公司<br>2013/09 – 2018/07 广东医科大学学生</p>\n<h5 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h5><p>热爱编程<br>能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。<br>出色的自学能力<br>专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。</p>\n<h5 id=\"想做的事儿\"><a href=\"#想做的事儿\" class=\"headerlink\" title=\"想做的事儿\"></a>想做的事儿</h5><p>深入研究 C# 底层原理，阅读 C# 源码；随时了解计算机前沿技术，扎根开源社区，贡献开源项目；<br>在学习的同时勤写博客记录分享所得所思.</p>\n","site":{"data":{}},"length":1911,"excerpt":"","more":"<h4 id=\"陈家辉的个人简历\"><a href=\"#陈家辉的个人简历\" class=\"headerlink\" title=\"陈家辉的个人简历\"></a>陈家辉的个人简历</h4><p>.Net 开发工程师</p>\n<h5 id=\"基本资料\"><a href=\"#基本资料\" class=\"headerlink\" title=\"基本资料\"></a>基本资料</h5><p>姓  名：陈家辉 工作经验：1.5 年 联系邮箱：<a href=\"mailto:&#x31;&#49;&#50;&#x30;&#x38;&#x37;&#51;&#48;&#x37;&#53;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;\">&#x31;&#49;&#50;&#x30;&#x38;&#x37;&#51;&#48;&#x37;&#53;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;</a> 联系电话：136-5041-5452</p>\n<h5 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h5><p>熟练掌握 ASP.NET 开发并可以使用 .Net Core 进行跨平台开发、熟练使用 MVC 框架、熟悉 Spring.Net, Log4.Net 等框架、熟悉 Web API、WCF 技术，能独立开发基于 Asp.Net Core 的 B/S 系统。<br>熟练掌握 Winform 桌面程序开发、能独立开发 Windows PC 端应用，并使用 DevExpress 进行开发。<br>熟悉 SQL 语言，熟练使用 SQL Server、Oracle 数据库，掌握数据库设计流程；<br>熟练使用 HTML、CSS、JavaScript 技术以及 JQuery、Bootstrap、Vue.JS、JQuery EasyUI 等框架进行网页设计；<br>有微服务架构相应的技能基础。</p>\n<h5 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h5><h6 id=\"高铁快运信息管理系统（2019-12–至今）\"><a href=\"#高铁快运信息管理系统（2019-12–至今）\" class=\"headerlink\" title=\"高铁快运信息管理系统（2019/12–至今）\"></a>高铁快运信息管理系统（2019/12–至今）</h6><p>项目介绍<br>本项目主要分为十大模块(权限管理、基础资料、账单管理、运单管理、物料管理、报价管理、客服管理、订单管理)。本系统主要是为了给高铁快运的快递业务提供更为方便快捷的服务。</p>\n<p>技术选型<br>C#、Winform、DevExpress.</p>\n<p>职责领域<br>本人负责全部模块的开发。</p>\n<h6 id=\"永利八达通TMS系统（2019-08–至今）\"><a href=\"#永利八达通TMS系统（2019-08–至今）\" class=\"headerlink\" title=\"永利八达通TMS系统（2019/08–至今）\"></a>永利八达通TMS系统（2019/08–至今）</h6><p>项目介绍<br>本项目主要分为十大模块(权限管理、基础资料、业务配置、运单管理、物料管理、报价管理、操作管理、财务管理、客服管理、项目管理)。本系统主要是为了给永利八达通公司的TMS业务提供更为方便快捷的服务，使得每一票运单的轨迹和操作日志，当前所在节点都清晰可见，同时对于报价的灵活配置也使得公司切换报价时不会出现手忙脚乱的情况。</p>\n<p>技术选型<br>C#、Winform、DevExpress.</p>\n<p>职责领域<br>本人主要负责其中的业务配置、物料管理、报价管理以及部分的运单管理。</p>\n<h6 id=\"黑猫快递管理系统（2019-02–2019-05）\"><a href=\"#黑猫快递管理系统（2019-02–2019-05）\" class=\"headerlink\" title=\"黑猫快递管理系统（2019/02–2019/05）\"></a>黑猫快递管理系统（2019/02–2019/05）</h6><p>项目介绍<br>本项目主要分为六大模块(权限管理、基础资料、账单管理、运单管理、客服管理、报价管理)。本系统主要是为了给黑猫快递公司的快递业务提供更为方便快捷的服务.</p>\n<p>技术选型<br>C#、Winform、DevExpress.</p>\n<p>职责领域<br>本人负责除账单模块外的全部模块的开发。</p>\n<h6 id=\"河北报业快递管理系统（2018-09–2018-12）\"><a href=\"#河北报业快递管理系统（2018-09–2018-12）\" class=\"headerlink\" title=\"河北报业快递管理系统（2018/09–2018/12）\"></a>河北报业快递管理系统（2018/09–2018/12）</h6><p>项目介绍<br>本项目主要分为六大模块(权限管理、基础资料、落地配、运单管理、供货商、报价管理)。本系统主要是为了给河北报业公司的落地配和快递业务提供更为方便快捷的服务，使得运单数据导入系统后可以自动进行配送站的匹配,简便了操作人员的操作。</p>\n<p>技术选型<br>C#、Winform、DevExpress.</p>\n<p>职责领域<br>本人负责全部模块的开发。</p>\n<h6 id=\"酒店订餐管理系统（2016-10–2016-11）\"><a href=\"#酒店订餐管理系统（2016-10–2016-11）\" class=\"headerlink\" title=\"酒店订餐管理系统（2016/10–2016/11）\"></a>酒店订餐管理系统（2016/10–2016/11）</h6><p>项目介绍<br>可以对酒店内的所有菜名以及相对应的菜号进行查询；可以对订餐的客户进行记录，并能查询、修改、删除和结算总额；可以对每日的营业额进行结算，以及统计利润总额。本人担当该项目的主要编程人员同时负责核心代码 。</p>\n<p>第一阶段（2016/03–2016/5）<br>开发环境<br>Windows 10、PhpStorm、Mysql、Github</p>\n<p>技术选型<br>PHP、Mycncart、HTML5、jQuery、Ajax、BootStrap、Node.js</p>\n<p>阶段简介<br>这个阶段主要是为了能够尽快完成酒店方面提出的需求以便投入使用，选用了PHP的Mycncart框架作为项目的整体解决方案。项目从2016年9月提出，10月收到酒店订餐管理系统的设计图，11月完成系统的大部分功能，目前运行良好。</p>\n<p>第二阶段（2016/11–2016/11）</p>\n<p>阶段简介<br>由于第一阶段有部分功能由于时间过于紧张尚未实现，再加上酒店在系统投入使用后,对系统有了新的需求。于是在原来的基础上加上了后台新消息的通知和声音提示，和相应的邮件推送的功能。</p>\n<h5 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h5><p>2018/08 – 至今    深圳市智腾达软件技术有限公司<br>2017/02 – 2017/11 广东中拓信息技术有限公司<br>2013/09 – 2018/07 广东医科大学学生</p>\n<h5 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h5><p>热爱编程<br>能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。<br>出色的自学能力<br>专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。</p>\n<h5 id=\"想做的事儿\"><a href=\"#想做的事儿\" class=\"headerlink\" title=\"想做的事儿\"></a>想做的事儿</h5><p>深入研究 C# 底层原理，阅读 C# 源码；随时了解计算机前沿技术，扎根开源社区，贡献开源项目；<br>在学习的同时勤写博客记录分享所得所思.</p>\n"},{"title":"tags","date":"2018-03-05T18:18:58.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-03-06 02:18:58\ntype: \"tags\"\n---\n","updated":"2021-03-30T03:24:16.072Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckmvhvwyw0002vcuacyx6fsx2","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"categories","date":"2018-03-05T18:19:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-03-06 02:19:54\ntype: \"categories\"\n---\n","updated":"2021-03-30T03:24:16.071Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckmvhvwz10006vcuae0l3bb3z","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Asp.Net Core Cookies和Session","date":"2019-07-01T15:35:38.000Z","_content":"#### 概述\nHttp是没有记录状态的协定,但是可以通过Cookies将Request来源区分开来,并将部分数据暂存于Cookies和Session,是比较常见的用户数据暂存方式\n<!--more-->\n#### Cookies\nCookies是将用户数据存在Client的浏览器,每次Request都会把Cookies发送到Server.在Asp.Net Core中要使用Cookie,可以通过HttpContext.Request 及 HttpContext.Response存入和取出.\n\n*Startup.cs*\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Caty.Web\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            app.Run(async (context) =>\n            {\n                string message;\n                if (!context.Request.Cookies.TryGetValue(\"Caty\", out message))\n                {\n                    message = \"数据已存入cookies.\";\n                }\n                context.Response.Cookies.Append(\"Caty\", \"启用Cookies.\");\n                // 刪除Cookies数据\n                await context.Response.WriteAsync($\"{message}\");\n            });\n        }\n    }\n}\n```\n> 当Cookies存入的数据越多,封包就会越大,因为每个Request都会带着Cookies数据\n\n#### Session\nSession是通过Cookies内的唯一识别标识,把用户数据存入到Server端的数据库或NoSql.\nAsp.Net Core使用Session要先加入两个服务\n* Session 容器\n\n  Session可以存在不同的地方,通过DI 分布式缓存 ,让Session服务知道要将Session存入哪里.\n* Session 服务\n\n  在DI容器加入Session服务,并将Session的中间件加入管道.\n\n*Startup.cs*\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Caty.Web\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // 將 Session 存在 ASP.NET Core 記憶體中\n            services.AddDistributedMemoryCache();\n            services.AddSession();\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            // SessionMiddleware 加入 Pipeline\n            app.UseSession();\n\n            app.Run(async (context) =>\n            {\n                context.Session.SetString(\"Sample\", \"This is Session.\");\n                string message = context.Session.GetString(\"Sample\");\n                await context.Response.WriteAsync($\"{message}\");\n            });\n        }\n    }\n}\n```\n\n#### 数据模型\n要将Model存到Session中,需要自己进行序列化.如Json\n*SessionJson.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Newtonsoft.Json;\n\nnamespace Caty.Web\n{\n    public static class SessionJson\n    {\n        public static void SetObject<T>(this ISession session, string key, T value)\n        {\n            session.SetString(key, JsonConvert.SerializeObject(value));\n        }\n\n        public static T GetObject<T>(this ISession session, string key)\n        {\n            var value = session.GetString(key);\n            return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value);\n        }\n    }\n}\n```\n 调用\n```cs\nvar user = context.Session.GetObject<UserModel>(\"user\");\ncontext.Session.SetObject(\"user\", user);\n```\n\n#### 安全性\nSession数据都存在Server端看似安全,但如果封包被拦截,一样可以取到用户数据.\n\n##### 安全调整建议\n* SecurePolicy\n\n  限制只有在Https请求的情况下,才允许使用Session.在加密请求下,不容易被拦截.\n* IdleTimeOut\n\n  合理修改Session到期时间,默认是20分钟没有与Server通讯的Request就会将Session'修改为过去状态.\n* Name\n\n  修改默认的Session名称,避免暴露网站技术和Server信息.\n  *Startup.cs*\n  ```cs\n  public void ConfigureServices(IServiceCollection services)\n  {\n      services.AddDistributedMemoryCache();\n      service.AddSession(options = >\n      {\n          options.Cookie.SecurePolicy = CookieSecurePolicy.Always;\n          options.Cookie.Name = \"CatyWeb\";\n          options.IdTimeout = TimeSpan.FromMinutes(5);\n      });\n  }\n  ```\n\n#### 强类型\n因为Cookies和Session默认是通过字符串的方式来存取数据,弱类型可能会存在打错字的情况.\n\n*SessionWapper.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing MyWebsite.Extensions;\n\npublic interface ISessionWapper\n{\n    UserModel User { get; set; }\n}\n\npublic class SessionWapper : ISessionWapper\n{\n    private static readonly string _userKey = \"session.user\";\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public SessionWapper(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor = httpContextAccessor;\n    }\n\n    private ISession Session\n    {\n        get\n        {\n            return _httpContextAccessor.HttpContext.Session;\n        }\n    }\n\n    public UserModel User\n    {\n        get\n        {\n            return Session.GetObject<UserModel>(_userKey);\n        }\n        set\n        {\n            Session.SetObject(_userKey, value);\n        }\n    }\n}\n```\n在DI容器中加入IHttpContextAccessor和ISeesionWapper.\n\n*Startup.cs*\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n    services.AddSingleton<ISessionWapper, SessionWapper>();\n}\n```\nIHttpContextAccessor\n实现了 `IHttpContextAccessor`，让 `HttpContext` 可以注入給需要用到的物件使用。\n`IHttpContextAccessor` 是 `HttpContext` 实例的接口，用 **Singleton**的方式可以供其它物件使用。\n\n调用\n\n*HomeController.cs*\n```cs\nnamespace Caty.Wed.Controllers\n{\n    public class HomeController : Controller\n    {\n        private readonly ISessionWapper _sessionWapper;\n\n        public HomeController(ISessionWapper sessionWapper)\n        {\n            _sessionWapper = sessionWapper;\n        }\n\n        public IActionResult Index()\n        {\n            var user = _sessionWapper.User;\n            _sessionWapper.User = user;\n            return Ok(user);\n        }\n    }\n}\n```\n","source":"_posts/Asp-Net-Core-Cookies和Session.md","raw":"---\ntitle: Asp.Net Core Cookies和Session\ndate: 2019-07-01 23:35:38\ncategories: .Net Core\ntags:\n - .Net Core\n - Cookies\n - Session\n---\n#### 概述\nHttp是没有记录状态的协定,但是可以通过Cookies将Request来源区分开来,并将部分数据暂存于Cookies和Session,是比较常见的用户数据暂存方式\n<!--more-->\n#### Cookies\nCookies是将用户数据存在Client的浏览器,每次Request都会把Cookies发送到Server.在Asp.Net Core中要使用Cookie,可以通过HttpContext.Request 及 HttpContext.Response存入和取出.\n\n*Startup.cs*\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Caty.Web\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            app.Run(async (context) =>\n            {\n                string message;\n                if (!context.Request.Cookies.TryGetValue(\"Caty\", out message))\n                {\n                    message = \"数据已存入cookies.\";\n                }\n                context.Response.Cookies.Append(\"Caty\", \"启用Cookies.\");\n                // 刪除Cookies数据\n                await context.Response.WriteAsync($\"{message}\");\n            });\n        }\n    }\n}\n```\n> 当Cookies存入的数据越多,封包就会越大,因为每个Request都会带着Cookies数据\n\n#### Session\nSession是通过Cookies内的唯一识别标识,把用户数据存入到Server端的数据库或NoSql.\nAsp.Net Core使用Session要先加入两个服务\n* Session 容器\n\n  Session可以存在不同的地方,通过DI 分布式缓存 ,让Session服务知道要将Session存入哪里.\n* Session 服务\n\n  在DI容器加入Session服务,并将Session的中间件加入管道.\n\n*Startup.cs*\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Caty.Web\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // 將 Session 存在 ASP.NET Core 記憶體中\n            services.AddDistributedMemoryCache();\n            services.AddSession();\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            // SessionMiddleware 加入 Pipeline\n            app.UseSession();\n\n            app.Run(async (context) =>\n            {\n                context.Session.SetString(\"Sample\", \"This is Session.\");\n                string message = context.Session.GetString(\"Sample\");\n                await context.Response.WriteAsync($\"{message}\");\n            });\n        }\n    }\n}\n```\n\n#### 数据模型\n要将Model存到Session中,需要自己进行序列化.如Json\n*SessionJson.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Newtonsoft.Json;\n\nnamespace Caty.Web\n{\n    public static class SessionJson\n    {\n        public static void SetObject<T>(this ISession session, string key, T value)\n        {\n            session.SetString(key, JsonConvert.SerializeObject(value));\n        }\n\n        public static T GetObject<T>(this ISession session, string key)\n        {\n            var value = session.GetString(key);\n            return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value);\n        }\n    }\n}\n```\n 调用\n```cs\nvar user = context.Session.GetObject<UserModel>(\"user\");\ncontext.Session.SetObject(\"user\", user);\n```\n\n#### 安全性\nSession数据都存在Server端看似安全,但如果封包被拦截,一样可以取到用户数据.\n\n##### 安全调整建议\n* SecurePolicy\n\n  限制只有在Https请求的情况下,才允许使用Session.在加密请求下,不容易被拦截.\n* IdleTimeOut\n\n  合理修改Session到期时间,默认是20分钟没有与Server通讯的Request就会将Session'修改为过去状态.\n* Name\n\n  修改默认的Session名称,避免暴露网站技术和Server信息.\n  *Startup.cs*\n  ```cs\n  public void ConfigureServices(IServiceCollection services)\n  {\n      services.AddDistributedMemoryCache();\n      service.AddSession(options = >\n      {\n          options.Cookie.SecurePolicy = CookieSecurePolicy.Always;\n          options.Cookie.Name = \"CatyWeb\";\n          options.IdTimeout = TimeSpan.FromMinutes(5);\n      });\n  }\n  ```\n\n#### 强类型\n因为Cookies和Session默认是通过字符串的方式来存取数据,弱类型可能会存在打错字的情况.\n\n*SessionWapper.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing MyWebsite.Extensions;\n\npublic interface ISessionWapper\n{\n    UserModel User { get; set; }\n}\n\npublic class SessionWapper : ISessionWapper\n{\n    private static readonly string _userKey = \"session.user\";\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public SessionWapper(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor = httpContextAccessor;\n    }\n\n    private ISession Session\n    {\n        get\n        {\n            return _httpContextAccessor.HttpContext.Session;\n        }\n    }\n\n    public UserModel User\n    {\n        get\n        {\n            return Session.GetObject<UserModel>(_userKey);\n        }\n        set\n        {\n            Session.SetObject(_userKey, value);\n        }\n    }\n}\n```\n在DI容器中加入IHttpContextAccessor和ISeesionWapper.\n\n*Startup.cs*\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n    services.AddSingleton<ISessionWapper, SessionWapper>();\n}\n```\nIHttpContextAccessor\n实现了 `IHttpContextAccessor`，让 `HttpContext` 可以注入給需要用到的物件使用。\n`IHttpContextAccessor` 是 `HttpContext` 实例的接口，用 **Singleton**的方式可以供其它物件使用。\n\n调用\n\n*HomeController.cs*\n```cs\nnamespace Caty.Wed.Controllers\n{\n    public class HomeController : Controller\n    {\n        private readonly ISessionWapper _sessionWapper;\n\n        public HomeController(ISessionWapper sessionWapper)\n        {\n            _sessionWapper = sessionWapper;\n        }\n\n        public IActionResult Index()\n        {\n            var user = _sessionWapper.User;\n            _sessionWapper.User = user;\n            return Ok(user);\n        }\n    }\n}\n```\n","slug":"Asp-Net-Core-Cookies和Session","published":1,"updated":"2021-03-30T03:24:16.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwys0001vcua3oi6dw0v","content":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>Http是没有记录状态的协定,但是可以通过Cookies将Request来源区分开来,并将部分数据暂存于Cookies和Session,是比较常见的用户数据暂存方式</p>\n<span id=\"more\"></span>\n<h4 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h4><p>Cookies是将用户数据存在Client的浏览器,每次Request都会把Cookies发送到Server.在Asp.Net Core中要使用Cookie,可以通过HttpContext.Request 及 HttpContext.Response存入和取出.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            app.Run(<span class=\"keyword\">async</span> (context) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> message;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!context.Request.Cookies.TryGetValue(<span class=\"string\">&quot;Caty&quot;</span>, <span class=\"keyword\">out</span> message))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    message = <span class=\"string\">&quot;数据已存入cookies.&quot;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                context.Response.Cookies.Append(<span class=\"string\">&quot;Caty&quot;</span>, <span class=\"string\">&quot;启用Cookies.&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 刪除Cookies数据</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;message&#125;</span>&quot;</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当Cookies存入的数据越多,封包就会越大,因为每个Request都会带着Cookies数据</p>\n</blockquote>\n<h4 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h4><p>Session是通过Cookies内的唯一识别标识,把用户数据存入到Server端的数据库或NoSql.<br>Asp.Net Core使用Session要先加入两个服务</p>\n<ul>\n<li><p>Session 容器</p>\n<p>Session可以存在不同的地方,通过DI 分布式缓存 ,让Session服务知道要将Session存入哪里.</p>\n</li>\n<li><p>Session 服务</p>\n<p>在DI容器加入Session服务,并将Session的中间件加入管道.</p>\n</li>\n</ul>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 將 Session 存在 ASP.NET Core 記憶體中</span></span><br><span class=\"line\">            services.AddDistributedMemoryCache();</span><br><span class=\"line\">            services.AddSession();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// SessionMiddleware 加入 Pipeline</span></span><br><span class=\"line\">            app.UseSession();</span><br><span class=\"line\"></span><br><span class=\"line\">            app.Run(<span class=\"keyword\">async</span> (context) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                context.Session.SetString(<span class=\"string\">&quot;Sample&quot;</span>, <span class=\"string\">&quot;This is Session.&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">string</span> message = context.Session.GetString(<span class=\"string\">&quot;Sample&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;message&#125;</span>&quot;</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h4><p>要将Model存到Session中,需要自己进行序列化.如Json<br><em>SessionJson.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Newtonsoft.Json;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionJson</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetObject</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"keyword\">this</span> ISession session, <span class=\"built_in\">string</span> key, T <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            session.SetString(key, JsonConvert.SerializeObject(<span class=\"keyword\">value</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T <span class=\"title\">GetObject</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"keyword\">this</span> ISession session, <span class=\"built_in\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = session.GetString(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"literal\">default</span>(T) : JsonConvert.DeserializeObject&lt;T&gt;(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 调用</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = context.Session.GetObject&lt;UserModel&gt;(<span class=\"string\">&quot;user&quot;</span>);</span><br><span class=\"line\">context.Session.SetObject(<span class=\"string\">&quot;user&quot;</span>, user);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p>Session数据都存在Server端看似安全,但如果封包被拦截,一样可以取到用户数据.</p>\n<h5 id=\"安全调整建议\"><a href=\"#安全调整建议\" class=\"headerlink\" title=\"安全调整建议\"></a>安全调整建议</h5><ul>\n<li><p>SecurePolicy</p>\n<p>限制只有在Https请求的情况下,才允许使用Session.在加密请求下,不容易被拦截.</p>\n</li>\n<li><p>IdleTimeOut</p>\n<p>合理修改Session到期时间,默认是20分钟没有与Server通讯的Request就会将Session’修改为过去状态.</p>\n</li>\n<li><p>Name</p>\n<p>修改默认的Session名称,避免暴露网站技术和Server信息.<br><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddDistributedMemoryCache();</span><br><span class=\"line\">    service.AddSession(options = &gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Cookie.SecurePolicy = CookieSecurePolicy.Always;</span><br><span class=\"line\">        options.Cookie.Name = <span class=\"string\">&quot;CatyWeb&quot;</span>;</span><br><span class=\"line\">        options.IdTimeout = TimeSpan.FromMinutes(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"强类型\"><a href=\"#强类型\" class=\"headerlink\" title=\"强类型\"></a>强类型</h4><p>因为Cookies和Session默认是通过字符串的方式来存取数据,弱类型可能会存在打错字的情况.</p>\n<p><em>SessionWapper.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> MyWebsite.Extensions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISessionWapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UserModel User &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionWapper</span> : <span class=\"title\">ISessionWapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _userKey = <span class=\"string\">&quot;session.user&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SessionWapper</span>(<span class=\"params\">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _httpContextAccessor = httpContextAccessor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISession Session</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _httpContextAccessor.HttpContext.Session;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserModel User</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Session.GetObject&lt;UserModel&gt;(_userKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Session.SetObject(_userKey, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在DI容器中加入IHttpContextAccessor和ISeesionWapper.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\">    services.AddSingleton&lt;ISessionWapper, SessionWapper&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>IHttpContextAccessor<br>实现了 <code>IHttpContextAccessor</code>，让 <code>HttpContext</code> 可以注入給需要用到的物件使用。<br><code>IHttpContextAccessor</code> 是 <code>HttpContext</code> 实例的接口，用 <strong>Singleton</strong>的方式可以供其它物件使用。</p>\n<p>调用</p>\n<p><em>HomeController.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Wed.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISessionWapper _sessionWapper;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span>(<span class=\"params\">ISessionWapper sessionWapper</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _sessionWapper = sessionWapper;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> user = _sessionWapper.User;</span><br><span class=\"line\">            _sessionWapper.User = user;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Ok(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":4583,"excerpt":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>Http是没有记录状态的协定,但是可以通过Cookies将Request来源区分开来,并将部分数据暂存于Cookies和Session,是比较常见的用户数据暂存方式</p>","more":"<h4 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h4><p>Cookies是将用户数据存在Client的浏览器,每次Request都会把Cookies发送到Server.在Asp.Net Core中要使用Cookie,可以通过HttpContext.Request 及 HttpContext.Response存入和取出.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            app.Run(<span class=\"keyword\">async</span> (context) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> message;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!context.Request.Cookies.TryGetValue(<span class=\"string\">&quot;Caty&quot;</span>, <span class=\"keyword\">out</span> message))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    message = <span class=\"string\">&quot;数据已存入cookies.&quot;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                context.Response.Cookies.Append(<span class=\"string\">&quot;Caty&quot;</span>, <span class=\"string\">&quot;启用Cookies.&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 刪除Cookies数据</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;message&#125;</span>&quot;</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当Cookies存入的数据越多,封包就会越大,因为每个Request都会带着Cookies数据</p>\n</blockquote>\n<h4 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h4><p>Session是通过Cookies内的唯一识别标识,把用户数据存入到Server端的数据库或NoSql.<br>Asp.Net Core使用Session要先加入两个服务</p>\n<ul>\n<li><p>Session 容器</p>\n<p>Session可以存在不同的地方,通过DI 分布式缓存 ,让Session服务知道要将Session存入哪里.</p>\n</li>\n<li><p>Session 服务</p>\n<p>在DI容器加入Session服务,并将Session的中间件加入管道.</p>\n</li>\n</ul>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 將 Session 存在 ASP.NET Core 記憶體中</span></span><br><span class=\"line\">            services.AddDistributedMemoryCache();</span><br><span class=\"line\">            services.AddSession();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// SessionMiddleware 加入 Pipeline</span></span><br><span class=\"line\">            app.UseSession();</span><br><span class=\"line\"></span><br><span class=\"line\">            app.Run(<span class=\"keyword\">async</span> (context) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                context.Session.SetString(<span class=\"string\">&quot;Sample&quot;</span>, <span class=\"string\">&quot;This is Session.&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">string</span> message = context.Session.GetString(<span class=\"string\">&quot;Sample&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;message&#125;</span>&quot;</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h4><p>要将Model存到Session中,需要自己进行序列化.如Json<br><em>SessionJson.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Newtonsoft.Json;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionJson</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetObject</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"keyword\">this</span> ISession session, <span class=\"built_in\">string</span> key, T <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            session.SetString(key, JsonConvert.SerializeObject(<span class=\"keyword\">value</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T <span class=\"title\">GetObject</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"keyword\">this</span> ISession session, <span class=\"built_in\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = session.GetString(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"literal\">default</span>(T) : JsonConvert.DeserializeObject&lt;T&gt;(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 调用</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = context.Session.GetObject&lt;UserModel&gt;(<span class=\"string\">&quot;user&quot;</span>);</span><br><span class=\"line\">context.Session.SetObject(<span class=\"string\">&quot;user&quot;</span>, user);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p>Session数据都存在Server端看似安全,但如果封包被拦截,一样可以取到用户数据.</p>\n<h5 id=\"安全调整建议\"><a href=\"#安全调整建议\" class=\"headerlink\" title=\"安全调整建议\"></a>安全调整建议</h5><ul>\n<li><p>SecurePolicy</p>\n<p>限制只有在Https请求的情况下,才允许使用Session.在加密请求下,不容易被拦截.</p>\n</li>\n<li><p>IdleTimeOut</p>\n<p>合理修改Session到期时间,默认是20分钟没有与Server通讯的Request就会将Session’修改为过去状态.</p>\n</li>\n<li><p>Name</p>\n<p>修改默认的Session名称,避免暴露网站技术和Server信息.<br><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddDistributedMemoryCache();</span><br><span class=\"line\">    service.AddSession(options = &gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Cookie.SecurePolicy = CookieSecurePolicy.Always;</span><br><span class=\"line\">        options.Cookie.Name = <span class=\"string\">&quot;CatyWeb&quot;</span>;</span><br><span class=\"line\">        options.IdTimeout = TimeSpan.FromMinutes(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"强类型\"><a href=\"#强类型\" class=\"headerlink\" title=\"强类型\"></a>强类型</h4><p>因为Cookies和Session默认是通过字符串的方式来存取数据,弱类型可能会存在打错字的情况.</p>\n<p><em>SessionWapper.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> MyWebsite.Extensions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISessionWapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UserModel User &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionWapper</span> : <span class=\"title\">ISessionWapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _userKey = <span class=\"string\">&quot;session.user&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SessionWapper</span>(<span class=\"params\">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _httpContextAccessor = httpContextAccessor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISession Session</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _httpContextAccessor.HttpContext.Session;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserModel User</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Session.GetObject&lt;UserModel&gt;(_userKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Session.SetObject(_userKey, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在DI容器中加入IHttpContextAccessor和ISeesionWapper.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\">    services.AddSingleton&lt;ISessionWapper, SessionWapper&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>IHttpContextAccessor<br>实现了 <code>IHttpContextAccessor</code>，让 <code>HttpContext</code> 可以注入給需要用到的物件使用。<br><code>IHttpContextAccessor</code> 是 <code>HttpContext</code> 实例的接口，用 <strong>Singleton</strong>的方式可以供其它物件使用。</p>\n<p>调用</p>\n<p><em>HomeController.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Wed.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISessionWapper _sessionWapper;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span>(<span class=\"params\">ISessionWapper sessionWapper</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _sessionWapper = sessionWapper;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> user = _sessionWapper.User;</span><br><span class=\"line\">            _sessionWapper.User = user;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Ok(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Asp.Net Core REST API基础","date":"2018-06-08T07:37:04.000Z","_content":"#### 前言\n前段时间,毕业设计用的是前后端分离的设计,后端就是基于Asp.Net Core开发的 REST API,借这个机会,顺路梳理一下关于REST API与Asp.Net Core建立REST API的基础知识\n<!--more-->\n#### REST 的定义\nREST 是 Representational State Transfer 的缩写. 它是一种架构的风格, 这种风格基于一套预定义的规则, 这些规则描述了网络资源是如何定义和寻址的.\n一个实现了REST这些规则的服务就叫做RESTful的服务.\n#### REST 的原则\nRESTful API 最关心的有这几方面: 性能, 可扩展性, 简洁性, 互操作性, 通讯可见性, 组件便携性和可靠性.\n这些方面被封装在REST的6个原则里, 它们是: \n1. 客户端-服务端约束: 客户端和服务端是分离的, 它们可以独自的进化.\n2. 无状态: 客户端和服务段的通信必须是无状态的, 状态应包含在请求里的. 也就是说请求里要包含服务端需要的所有的信息, 以便服务端可以理解请求并可以创造上下文.\n3. 分层系统: 就像其它的软件架构一样, REST也需要分层结构, 但是不允许某层直接访问不相邻的层. \n4. 统一接口: 这里分为4点, 他们是: 资源标识符(URI), 资源的操作(也就是方法Method, HTTP动词), 自描述的响应(可以认为是媒体类型Media-Type), 以及状态管理(超媒体作为应用状态的引擎 HATEOAS, Hypermedia as the Engine of Application State).\n5. 缓存: 缓存约束派生于无状态约束, 它要求从服务端返回的响应必须明确表明是可缓存的还是不可缓存的.\n6. 按需编码: 这允许客户端可以从服务端访问特定的资源而无须知晓如何处理它们. 服务端可以扩展或自定义客户端的功能.\n#### Asp.Net Core Action\n在Controller里面，可以使用public修饰符来定义Action，通常会带有参数，可以返回任何类型，但是大多数情况下应该返回IActionResult。Action的方法名要么是以HTTP的动词开头，要么是使用HTTP动词属性标签，包括：[HttpGet], [HttpPut], [HttpPost], [HttpDelete], [HttpHead], [HttpOptions], [HttpPatch].\n\nController基类提供了很多帮助方法，例如：Ok, NotFound, BadRequest等，它们分别对应HTTP的状态码 200, 404, 400；此外还有Redirect，LocalRedirect，RedirectToRoute，Json，File，Content等方法。\n\n路由属性标签可以标注在Controller或者Action方法上\n\n##### 实体绑定\n如果定义在路由里,Action可以自动映射,没有定义在路由里的,可以通过使用属性标签告诉Action从哪里获取参数,属性标签包含[FromBody],[FromForm],[FromHeader],[FromRoute],[FromServices]等\n```cs\nusing System;\nusing Microsoft.AspNetCore.Mvc;\nusing IRS.Model;\n\nnamespace IRS.Web.Controllers\n{\n    [Route(\"api/address\")]\n    public class AddressController : Controller\n    {\n        private ICategoryInfoService _categoryInfoService;\n        public AddressController(ICategoryInfoService categoryInfoService)\n        {\n            _categoryInfoService = categoryInfoService;\n        }\n        \n        [HttpGet]\n        public ActionResult GetAddressInfos()\n        {\n            var addresslist = _categoryInfoService.LoadEntities(c => c.CategoryInfoType == 1);\n            return Json(new\n            {\n                data = addresslist\n            });\n        }\n        \n        [HttpGet(\"{id}\")]\n        public ActionResult GetAddressInfo(int id)\n        {\n            var address = _categoryInfoService.LoadEntities(c => c.CategoryInfoId == id && c.CategoryInfoType == 1).FirstOrDefault();\n            return Json(new\n            {\n                data =address\n            });\n        }\n        \n        [HttpPost]\n        public ActionResult AddAddressInfo([FromBody] CategoryInfo categoryInfo)\n        {\n            var result = _categoryInfoService.AddEntity(categoryInfo);\n            return Json(new\n            {\n                status_code = 200\n            });\n        }\n    }\n}\n```\n\n##### 实体验证\nAsp.Net Core内置的实体验证是通过验证属性标签来实现的\n```cs\n public class CategoryInfo\n    {\n        [Required]\n        public int CategoryInfoId { get; set; }\n        [Required]\n        public int CategoryInfoType { get; set; }\n        [MinLength(3)]\n        public string CategoryInfoName { get; set; }\n        [Range(0,1)]\n        public int CategoryInfoEnable { get; set; }\n        public int CategoryInfoOrder { get; set; }\n        public int StartFlag { get; set; }\n        public int EndFlag { get; set; }\n    }\n```\n判断实体参数是否符合要求，可以检查ModelState.IsValid属性\n```cs\npublic IActionResult Post([FromBody] CategoryInfo category)\n{\n    if(ModelState.IsValid)\n    {\n        return Ok();\n    }\n    return BadRequest(ModelState);\n}\n```\n使用Display可以自定义属性的显式名称，在其它错误信息里可以使用{0}来引用该名称\n```cs\npublic class CategoryInfo\n    {\n        [Required]\n        public int CategoryInfoId { get; set; }\n        [Required]\n        public int CategoryInfoType { get; set; }\n        [Display(Name =\"分类名\"), Required, MaxLength(10, ErrorMessage=\"{0}的长度不可超过{1}\")]\n        public string CategoryInfoName { get; set; }\n        [Range(0,1)]\n        public int CategoryInfoEnable { get; set; }\n        public int CategoryInfoOrder { get; set; }\n        public int StartFlag { get; set; }\n        public int EndFlag { get; set; }\n    }\n```\n通过继承VaildationAttribute来创建自定义验证属性标签\n```cs\nusing System.ComponentModel.DataAnnotations;\n\nnamespace IRS.API.CustomValidations\n{\n    public class NameHasHyphenAttribute:ValidationAttribute\n    {\n        protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n        {\n            var str = value.ToString();\n            if(str.IndexOf(' ') == -1)\n            {\n                return new ValidationResult(\"名称必须包含-\");\n            }\n            return ValidationResult.Success;\n        }\n    }\n}\n```\n将标签放到CategoryInfoName属性上即可.\n\n未完待续....","source":"_posts/Asp-Net-Core-REST-API基础.md","raw":"---\ntitle: Asp.Net Core REST API基础\ndate: 2018-06-08 15:37:04\ncategories: .Net Core\ntags:\n - .Net Core\n - REST API\n---\n#### 前言\n前段时间,毕业设计用的是前后端分离的设计,后端就是基于Asp.Net Core开发的 REST API,借这个机会,顺路梳理一下关于REST API与Asp.Net Core建立REST API的基础知识\n<!--more-->\n#### REST 的定义\nREST 是 Representational State Transfer 的缩写. 它是一种架构的风格, 这种风格基于一套预定义的规则, 这些规则描述了网络资源是如何定义和寻址的.\n一个实现了REST这些规则的服务就叫做RESTful的服务.\n#### REST 的原则\nRESTful API 最关心的有这几方面: 性能, 可扩展性, 简洁性, 互操作性, 通讯可见性, 组件便携性和可靠性.\n这些方面被封装在REST的6个原则里, 它们是: \n1. 客户端-服务端约束: 客户端和服务端是分离的, 它们可以独自的进化.\n2. 无状态: 客户端和服务段的通信必须是无状态的, 状态应包含在请求里的. 也就是说请求里要包含服务端需要的所有的信息, 以便服务端可以理解请求并可以创造上下文.\n3. 分层系统: 就像其它的软件架构一样, REST也需要分层结构, 但是不允许某层直接访问不相邻的层. \n4. 统一接口: 这里分为4点, 他们是: 资源标识符(URI), 资源的操作(也就是方法Method, HTTP动词), 自描述的响应(可以认为是媒体类型Media-Type), 以及状态管理(超媒体作为应用状态的引擎 HATEOAS, Hypermedia as the Engine of Application State).\n5. 缓存: 缓存约束派生于无状态约束, 它要求从服务端返回的响应必须明确表明是可缓存的还是不可缓存的.\n6. 按需编码: 这允许客户端可以从服务端访问特定的资源而无须知晓如何处理它们. 服务端可以扩展或自定义客户端的功能.\n#### Asp.Net Core Action\n在Controller里面，可以使用public修饰符来定义Action，通常会带有参数，可以返回任何类型，但是大多数情况下应该返回IActionResult。Action的方法名要么是以HTTP的动词开头，要么是使用HTTP动词属性标签，包括：[HttpGet], [HttpPut], [HttpPost], [HttpDelete], [HttpHead], [HttpOptions], [HttpPatch].\n\nController基类提供了很多帮助方法，例如：Ok, NotFound, BadRequest等，它们分别对应HTTP的状态码 200, 404, 400；此外还有Redirect，LocalRedirect，RedirectToRoute，Json，File，Content等方法。\n\n路由属性标签可以标注在Controller或者Action方法上\n\n##### 实体绑定\n如果定义在路由里,Action可以自动映射,没有定义在路由里的,可以通过使用属性标签告诉Action从哪里获取参数,属性标签包含[FromBody],[FromForm],[FromHeader],[FromRoute],[FromServices]等\n```cs\nusing System;\nusing Microsoft.AspNetCore.Mvc;\nusing IRS.Model;\n\nnamespace IRS.Web.Controllers\n{\n    [Route(\"api/address\")]\n    public class AddressController : Controller\n    {\n        private ICategoryInfoService _categoryInfoService;\n        public AddressController(ICategoryInfoService categoryInfoService)\n        {\n            _categoryInfoService = categoryInfoService;\n        }\n        \n        [HttpGet]\n        public ActionResult GetAddressInfos()\n        {\n            var addresslist = _categoryInfoService.LoadEntities(c => c.CategoryInfoType == 1);\n            return Json(new\n            {\n                data = addresslist\n            });\n        }\n        \n        [HttpGet(\"{id}\")]\n        public ActionResult GetAddressInfo(int id)\n        {\n            var address = _categoryInfoService.LoadEntities(c => c.CategoryInfoId == id && c.CategoryInfoType == 1).FirstOrDefault();\n            return Json(new\n            {\n                data =address\n            });\n        }\n        \n        [HttpPost]\n        public ActionResult AddAddressInfo([FromBody] CategoryInfo categoryInfo)\n        {\n            var result = _categoryInfoService.AddEntity(categoryInfo);\n            return Json(new\n            {\n                status_code = 200\n            });\n        }\n    }\n}\n```\n\n##### 实体验证\nAsp.Net Core内置的实体验证是通过验证属性标签来实现的\n```cs\n public class CategoryInfo\n    {\n        [Required]\n        public int CategoryInfoId { get; set; }\n        [Required]\n        public int CategoryInfoType { get; set; }\n        [MinLength(3)]\n        public string CategoryInfoName { get; set; }\n        [Range(0,1)]\n        public int CategoryInfoEnable { get; set; }\n        public int CategoryInfoOrder { get; set; }\n        public int StartFlag { get; set; }\n        public int EndFlag { get; set; }\n    }\n```\n判断实体参数是否符合要求，可以检查ModelState.IsValid属性\n```cs\npublic IActionResult Post([FromBody] CategoryInfo category)\n{\n    if(ModelState.IsValid)\n    {\n        return Ok();\n    }\n    return BadRequest(ModelState);\n}\n```\n使用Display可以自定义属性的显式名称，在其它错误信息里可以使用{0}来引用该名称\n```cs\npublic class CategoryInfo\n    {\n        [Required]\n        public int CategoryInfoId { get; set; }\n        [Required]\n        public int CategoryInfoType { get; set; }\n        [Display(Name =\"分类名\"), Required, MaxLength(10, ErrorMessage=\"{0}的长度不可超过{1}\")]\n        public string CategoryInfoName { get; set; }\n        [Range(0,1)]\n        public int CategoryInfoEnable { get; set; }\n        public int CategoryInfoOrder { get; set; }\n        public int StartFlag { get; set; }\n        public int EndFlag { get; set; }\n    }\n```\n通过继承VaildationAttribute来创建自定义验证属性标签\n```cs\nusing System.ComponentModel.DataAnnotations;\n\nnamespace IRS.API.CustomValidations\n{\n    public class NameHasHyphenAttribute:ValidationAttribute\n    {\n        protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n        {\n            var str = value.ToString();\n            if(str.IndexOf(' ') == -1)\n            {\n                return new ValidationResult(\"名称必须包含-\");\n            }\n            return ValidationResult.Success;\n        }\n    }\n}\n```\n将标签放到CategoryInfoName属性上即可.\n\n未完待续....","slug":"Asp-Net-Core-REST-API基础","published":1,"updated":"2021-03-30T03:24:16.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwyy0003vcuacaarbpec","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>前段时间,毕业设计用的是前后端分离的设计,后端就是基于Asp.Net Core开发的 REST API,借这个机会,顺路梳理一下关于REST API与Asp.Net Core建立REST API的基础知识</p>\n<span id=\"more\"></span>\n<h4 id=\"REST-的定义\"><a href=\"#REST-的定义\" class=\"headerlink\" title=\"REST 的定义\"></a>REST 的定义</h4><p>REST 是 Representational State Transfer 的缩写. 它是一种架构的风格, 这种风格基于一套预定义的规则, 这些规则描述了网络资源是如何定义和寻址的.<br>一个实现了REST这些规则的服务就叫做RESTful的服务.</p>\n<h4 id=\"REST-的原则\"><a href=\"#REST-的原则\" class=\"headerlink\" title=\"REST 的原则\"></a>REST 的原则</h4><p>RESTful API 最关心的有这几方面: 性能, 可扩展性, 简洁性, 互操作性, 通讯可见性, 组件便携性和可靠性.<br>这些方面被封装在REST的6个原则里, 它们是: </p>\n<ol>\n<li>客户端-服务端约束: 客户端和服务端是分离的, 它们可以独自的进化.</li>\n<li>无状态: 客户端和服务段的通信必须是无状态的, 状态应包含在请求里的. 也就是说请求里要包含服务端需要的所有的信息, 以便服务端可以理解请求并可以创造上下文.</li>\n<li>分层系统: 就像其它的软件架构一样, REST也需要分层结构, 但是不允许某层直接访问不相邻的层. </li>\n<li>统一接口: 这里分为4点, 他们是: 资源标识符(URI), 资源的操作(也就是方法Method, HTTP动词), 自描述的响应(可以认为是媒体类型Media-Type), 以及状态管理(超媒体作为应用状态的引擎 HATEOAS, Hypermedia as the Engine of Application State).</li>\n<li>缓存: 缓存约束派生于无状态约束, 它要求从服务端返回的响应必须明确表明是可缓存的还是不可缓存的.</li>\n<li>按需编码: 这允许客户端可以从服务端访问特定的资源而无须知晓如何处理它们. 服务端可以扩展或自定义客户端的功能.<h4 id=\"Asp-Net-Core-Action\"><a href=\"#Asp-Net-Core-Action\" class=\"headerlink\" title=\"Asp.Net Core Action\"></a>Asp.Net Core Action</h4>在Controller里面，可以使用public修饰符来定义Action，通常会带有参数，可以返回任何类型，但是大多数情况下应该返回IActionResult。Action的方法名要么是以HTTP的动词开头，要么是使用HTTP动词属性标签，包括：[HttpGet], [HttpPut], [HttpPost], [HttpDelete], [HttpHead], [HttpOptions], [HttpPatch].</li>\n</ol>\n<p>Controller基类提供了很多帮助方法，例如：Ok, NotFound, BadRequest等，它们分别对应HTTP的状态码 200, 404, 400；此外还有Redirect，LocalRedirect，RedirectToRoute，Json，File，Content等方法。</p>\n<p>路由属性标签可以标注在Controller或者Action方法上</p>\n<h5 id=\"实体绑定\"><a href=\"#实体绑定\" class=\"headerlink\" title=\"实体绑定\"></a>实体绑定</h5><p>如果定义在路由里,Action可以自动映射,没有定义在路由里的,可以通过使用属性标签告诉Action从哪里获取参数,属性标签包含[FromBody],[FromForm],[FromHeader],[FromRoute],[FromServices]等</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> IRS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">IRS.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">&quot;api/address&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AddressController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> ICategoryInfoService _categoryInfoService;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AddressController</span>(<span class=\"params\">ICategoryInfoService categoryInfoService</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _categoryInfoService = categoryInfoService;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">GetAddressInfos</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> addresslist = _categoryInfoService.LoadEntities(c =&gt; c.CategoryInfoType == <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data = addresslist</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">GetAddressInfo</span>(<span class=\"params\"><span class=\"built_in\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> address = _categoryInfoService.LoadEntities(c =&gt; c.CategoryInfoId == id &amp;&amp; c.CategoryInfoType == <span class=\"number\">1</span>).FirstOrDefault();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data =address</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">AddAddressInfo</span>(<span class=\"params\">[FromBody] CategoryInfo categoryInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = _categoryInfoService.AddEntity(categoryInfo);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                status_code = <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实体验证\"><a href=\"#实体验证\" class=\"headerlink\" title=\"实体验证\"></a>实体验证</h5><p>Asp.Net Core内置的实体验证是通过验证属性标签来实现的</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CategoryInfo</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoType &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">MinLength(3)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CategoryInfoName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">Range(0,1)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoEnable &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoOrder &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> StartFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> EndFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>判断实体参数是否符合要求，可以检查ModelState.IsValid属性</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Post</span>(<span class=\"params\">[FromBody] CategoryInfo category</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ModelState.IsValid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BadRequest(ModelState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用Display可以自定义属性的显式名称，在其它错误信息里可以使用{0}来引用该名称</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CategoryInfo</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoType &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Display(Name =<span class=\"meta-string\">&quot;分类名&quot;</span>), Required, MaxLength(10, ErrorMessage=<span class=\"meta-string\">&quot;&#123;0&#125;的长度不可超过&#123;1&#125;&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CategoryInfoName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Range(0,1)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoEnable &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoOrder &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> StartFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> EndFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>通过继承VaildationAttribute来创建自定义验证属性标签</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel.DataAnnotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">IRS.API.CustomValidations</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">NameHasHyphenAttribute</span>:<span class=\"title\">ValidationAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> ValidationResult <span class=\"title\">IsValid</span>(<span class=\"params\"><span class=\"built_in\">object</span> <span class=\"keyword\">value</span>, ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> str = <span class=\"keyword\">value</span>.ToString();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str.IndexOf(<span class=\"string\">&#x27; &#x27;</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ValidationResult(<span class=\"string\">&quot;名称必须包含-&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ValidationResult.Success;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将标签放到CategoryInfoName属性上即可.</p>\n<p>未完待续….</p>\n","site":{"data":{}},"length":3933,"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>前段时间,毕业设计用的是前后端分离的设计,后端就是基于Asp.Net Core开发的 REST API,借这个机会,顺路梳理一下关于REST API与Asp.Net Core建立REST API的基础知识</p>","more":"<h4 id=\"REST-的定义\"><a href=\"#REST-的定义\" class=\"headerlink\" title=\"REST 的定义\"></a>REST 的定义</h4><p>REST 是 Representational State Transfer 的缩写. 它是一种架构的风格, 这种风格基于一套预定义的规则, 这些规则描述了网络资源是如何定义和寻址的.<br>一个实现了REST这些规则的服务就叫做RESTful的服务.</p>\n<h4 id=\"REST-的原则\"><a href=\"#REST-的原则\" class=\"headerlink\" title=\"REST 的原则\"></a>REST 的原则</h4><p>RESTful API 最关心的有这几方面: 性能, 可扩展性, 简洁性, 互操作性, 通讯可见性, 组件便携性和可靠性.<br>这些方面被封装在REST的6个原则里, 它们是: </p>\n<ol>\n<li>客户端-服务端约束: 客户端和服务端是分离的, 它们可以独自的进化.</li>\n<li>无状态: 客户端和服务段的通信必须是无状态的, 状态应包含在请求里的. 也就是说请求里要包含服务端需要的所有的信息, 以便服务端可以理解请求并可以创造上下文.</li>\n<li>分层系统: 就像其它的软件架构一样, REST也需要分层结构, 但是不允许某层直接访问不相邻的层. </li>\n<li>统一接口: 这里分为4点, 他们是: 资源标识符(URI), 资源的操作(也就是方法Method, HTTP动词), 自描述的响应(可以认为是媒体类型Media-Type), 以及状态管理(超媒体作为应用状态的引擎 HATEOAS, Hypermedia as the Engine of Application State).</li>\n<li>缓存: 缓存约束派生于无状态约束, 它要求从服务端返回的响应必须明确表明是可缓存的还是不可缓存的.</li>\n<li>按需编码: 这允许客户端可以从服务端访问特定的资源而无须知晓如何处理它们. 服务端可以扩展或自定义客户端的功能.<h4 id=\"Asp-Net-Core-Action\"><a href=\"#Asp-Net-Core-Action\" class=\"headerlink\" title=\"Asp.Net Core Action\"></a>Asp.Net Core Action</h4>在Controller里面，可以使用public修饰符来定义Action，通常会带有参数，可以返回任何类型，但是大多数情况下应该返回IActionResult。Action的方法名要么是以HTTP的动词开头，要么是使用HTTP动词属性标签，包括：[HttpGet], [HttpPut], [HttpPost], [HttpDelete], [HttpHead], [HttpOptions], [HttpPatch].</li>\n</ol>\n<p>Controller基类提供了很多帮助方法，例如：Ok, NotFound, BadRequest等，它们分别对应HTTP的状态码 200, 404, 400；此外还有Redirect，LocalRedirect，RedirectToRoute，Json，File，Content等方法。</p>\n<p>路由属性标签可以标注在Controller或者Action方法上</p>\n<h5 id=\"实体绑定\"><a href=\"#实体绑定\" class=\"headerlink\" title=\"实体绑定\"></a>实体绑定</h5><p>如果定义在路由里,Action可以自动映射,没有定义在路由里的,可以通过使用属性标签告诉Action从哪里获取参数,属性标签包含[FromBody],[FromForm],[FromHeader],[FromRoute],[FromServices]等</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> IRS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">IRS.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">&quot;api/address&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AddressController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> ICategoryInfoService _categoryInfoService;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AddressController</span>(<span class=\"params\">ICategoryInfoService categoryInfoService</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _categoryInfoService = categoryInfoService;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">GetAddressInfos</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> addresslist = _categoryInfoService.LoadEntities(c =&gt; c.CategoryInfoType == <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data = addresslist</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">GetAddressInfo</span>(<span class=\"params\"><span class=\"built_in\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> address = _categoryInfoService.LoadEntities(c =&gt; c.CategoryInfoId == id &amp;&amp; c.CategoryInfoType == <span class=\"number\">1</span>).FirstOrDefault();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data =address</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">AddAddressInfo</span>(<span class=\"params\">[FromBody] CategoryInfo categoryInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = _categoryInfoService.AddEntity(categoryInfo);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                status_code = <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实体验证\"><a href=\"#实体验证\" class=\"headerlink\" title=\"实体验证\"></a>实体验证</h5><p>Asp.Net Core内置的实体验证是通过验证属性标签来实现的</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CategoryInfo</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoType &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">MinLength(3)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CategoryInfoName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">Range(0,1)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoEnable &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoOrder &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> StartFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> EndFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>判断实体参数是否符合要求，可以检查ModelState.IsValid属性</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Post</span>(<span class=\"params\">[FromBody] CategoryInfo category</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ModelState.IsValid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BadRequest(ModelState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用Display可以自定义属性的显式名称，在其它错误信息里可以使用{0}来引用该名称</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CategoryInfo</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoType &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Display(Name =<span class=\"meta-string\">&quot;分类名&quot;</span>), Required, MaxLength(10, ErrorMessage=<span class=\"meta-string\">&quot;&#123;0&#125;的长度不可超过&#123;1&#125;&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CategoryInfoName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Range(0,1)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoEnable &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CategoryInfoOrder &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> StartFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> EndFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>通过继承VaildationAttribute来创建自定义验证属性标签</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel.DataAnnotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">IRS.API.CustomValidations</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">NameHasHyphenAttribute</span>:<span class=\"title\">ValidationAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> ValidationResult <span class=\"title\">IsValid</span>(<span class=\"params\"><span class=\"built_in\">object</span> <span class=\"keyword\">value</span>, ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> str = <span class=\"keyword\">value</span>.ToString();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str.IndexOf(<span class=\"string\">&#x27; &#x27;</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ValidationResult(<span class=\"string\">&quot;名称必须包含-&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ValidationResult.Success;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将标签放到CategoryInfoName属性上即可.</p>\n<p>未完待续….</p>"},{"title":"Asp.Net Core Response快取","date":"2019-08-10T07:00:47.000Z","_content":"#### .Net Core Response简介\n\n对Response回传的结果使用适当的快取机制,可以有助于性能提升,避免重复调用.\n\nAsp.Net Core Response 快取分两种\n\n* Client 端缓存\n\n* Server 端快取\n\nAsp.Net Core 可以通过ResponseCache设定Response的暂存方式,并设置到要使用Response快取的Controller或Action\n<!--more-->\n\n#### Client 端缓存\n\n通过HttpHeader的Cache-Control告知浏览器,将页面保存至浏览器缓存区.Client端缓存只要设置ResponseCache即可.\n\n##### Client 端缓存设置\n\n*HomeController.cs*\n\n```cs\npublic class HomeController : Controller\n{\n    [ResponseCache(Duration = 60, Location = ResponseCacheLocation.Client)]\n    public IActionResult Index()\n    {\n        return View();\n    }\n}\n```\n\n##### Client 端缓存参数\n\n* Duration\n\n  设置快取有效时间(单位是秒)\n\n* Location\n\n  设置快取方式,有三种选项\n\n  * ResponseCacheLocation.Any\n\n    可共用的缓存\n\n  * ResponseCacheLocation.Client\n\n    不可共用的缓存,根据使用者区分\n\n  * ResponseCacheLocation.None\n\n    不使用缓存功能\n\n* NoStore\n\n  不保存Response结果\n\n* VaryByHeader\n\n  设置区分缓存的HttpHeader\n\n* VaryByQueryKeys\n\n  设置区分缓存的Url Query String\n\n* CacheProfileName\n\n  可以在MVC Service设置好CacheProfile,然后在多个地方使用\n\n  *Startup.cs*\n\n  ```cs\n  public void ConfigureServices(IServiceCoolection services)\n  {\n      services.AddMvc(options =>\n      {\n          options.CacheProfiles.Add(\"Default\",\n          new CacheProfile()\n          {\n              Duration = 60,\n              Location = ResponseCacheLocation.Client\n          });\n      });\n  }\n  ```\n\n  在Controller和Action,直接通过\\[ResponseCache(CacheProfileName = \"Default\")\\]来设置.\n\n#### Server 端快取\n\nServer 端Response快取适用于常被请求的页面或Api,且数据是可共用的数据,即所有请求返回的数据都是相同的.当在请求相同页面时,会把上次的处理结果从Server的快取中回传给Client,省去后续的操作.\n\n* 第一次请求Action时,会经过根据后续步骤,获得返回值.\n\n* 第二次请求Action时,由于上次回传结果已经存在Server快取,直接从快取回传上次的结果,省去后续步骤.\n\nServer快取需要用到 Microsoft.AspNetCore.ResponseCaching 套件.\n\n如果要搭配Server 端Response快取,除了使用\\[ResponseCache\\]外,还需要在DI容器中注入ResponseCaching 服务以及注册ResponseCaching的中间件.\n\n##### Service 端快取设置\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCaching(options => \n        {\n            options.UseCaseSensitivePaths = false;\n            options.MaximumBodySize = 1024;\n            options.SizeLimit = 100 * 1024 * 1024;\n        });\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseResponseCaching();\n        app.UseMvcWithDefaultRoute();\n    }\n}\n```\n\n##### Service 端快取参数\n\n* UseCaseSensitivePaths\n\n  Url是否区分大小写为不同的Response快取,默认为true\n\n* MaximumBodySize\n\n  单个Response快取的大小限制(单位Bytes),默认64MB\n\n* SizeLimit\n\n  Response快取的总大小限制(单位Bytes),默认为100MB\n\n##### Service 端快取条件\n\n* 回传状态必须是Http Status 200(OK)\n\n* Request 的Http Methods 必须是Get或Head\n\n* 不能有其他的中间件在ResponseCaching中间件加工之前修改Response\n\n* Http Header 不能用 Authorization\n\n* Http Header 的CacheContro必须是public的\n\n* Http Header 不能用Set-Cookie\n\n* Http Header的Vary值不能为\\*\n\n* 不能使用IHttpSendFileFeature\n\n* 不能设置 no-store\n\n* 单一回传快取不能大于 MaximunBodySize\n\n* 总快取大小不能大于SizeLimit\n","source":"_posts/Asp-Net-Core-Response快取.md","raw":"---\ntitle: Asp.Net Core Response快取\ndate: 2019-08-10 15:00:47\ncategories: .Net Core\ntags:\n - .Net Core\n - Response\n---\n#### .Net Core Response简介\n\n对Response回传的结果使用适当的快取机制,可以有助于性能提升,避免重复调用.\n\nAsp.Net Core Response 快取分两种\n\n* Client 端缓存\n\n* Server 端快取\n\nAsp.Net Core 可以通过ResponseCache设定Response的暂存方式,并设置到要使用Response快取的Controller或Action\n<!--more-->\n\n#### Client 端缓存\n\n通过HttpHeader的Cache-Control告知浏览器,将页面保存至浏览器缓存区.Client端缓存只要设置ResponseCache即可.\n\n##### Client 端缓存设置\n\n*HomeController.cs*\n\n```cs\npublic class HomeController : Controller\n{\n    [ResponseCache(Duration = 60, Location = ResponseCacheLocation.Client)]\n    public IActionResult Index()\n    {\n        return View();\n    }\n}\n```\n\n##### Client 端缓存参数\n\n* Duration\n\n  设置快取有效时间(单位是秒)\n\n* Location\n\n  设置快取方式,有三种选项\n\n  * ResponseCacheLocation.Any\n\n    可共用的缓存\n\n  * ResponseCacheLocation.Client\n\n    不可共用的缓存,根据使用者区分\n\n  * ResponseCacheLocation.None\n\n    不使用缓存功能\n\n* NoStore\n\n  不保存Response结果\n\n* VaryByHeader\n\n  设置区分缓存的HttpHeader\n\n* VaryByQueryKeys\n\n  设置区分缓存的Url Query String\n\n* CacheProfileName\n\n  可以在MVC Service设置好CacheProfile,然后在多个地方使用\n\n  *Startup.cs*\n\n  ```cs\n  public void ConfigureServices(IServiceCoolection services)\n  {\n      services.AddMvc(options =>\n      {\n          options.CacheProfiles.Add(\"Default\",\n          new CacheProfile()\n          {\n              Duration = 60,\n              Location = ResponseCacheLocation.Client\n          });\n      });\n  }\n  ```\n\n  在Controller和Action,直接通过\\[ResponseCache(CacheProfileName = \"Default\")\\]来设置.\n\n#### Server 端快取\n\nServer 端Response快取适用于常被请求的页面或Api,且数据是可共用的数据,即所有请求返回的数据都是相同的.当在请求相同页面时,会把上次的处理结果从Server的快取中回传给Client,省去后续的操作.\n\n* 第一次请求Action时,会经过根据后续步骤,获得返回值.\n\n* 第二次请求Action时,由于上次回传结果已经存在Server快取,直接从快取回传上次的结果,省去后续步骤.\n\nServer快取需要用到 Microsoft.AspNetCore.ResponseCaching 套件.\n\n如果要搭配Server 端Response快取,除了使用\\[ResponseCache\\]外,还需要在DI容器中注入ResponseCaching 服务以及注册ResponseCaching的中间件.\n\n##### Service 端快取设置\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCaching(options => \n        {\n            options.UseCaseSensitivePaths = false;\n            options.MaximumBodySize = 1024;\n            options.SizeLimit = 100 * 1024 * 1024;\n        });\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseResponseCaching();\n        app.UseMvcWithDefaultRoute();\n    }\n}\n```\n\n##### Service 端快取参数\n\n* UseCaseSensitivePaths\n\n  Url是否区分大小写为不同的Response快取,默认为true\n\n* MaximumBodySize\n\n  单个Response快取的大小限制(单位Bytes),默认64MB\n\n* SizeLimit\n\n  Response快取的总大小限制(单位Bytes),默认为100MB\n\n##### Service 端快取条件\n\n* 回传状态必须是Http Status 200(OK)\n\n* Request 的Http Methods 必须是Get或Head\n\n* 不能有其他的中间件在ResponseCaching中间件加工之前修改Response\n\n* Http Header 不能用 Authorization\n\n* Http Header 的CacheContro必须是public的\n\n* Http Header 不能用Set-Cookie\n\n* Http Header的Vary值不能为\\*\n\n* 不能使用IHttpSendFileFeature\n\n* 不能设置 no-store\n\n* 单一回传快取不能大于 MaximunBodySize\n\n* 总快取大小不能大于SizeLimit\n","slug":"Asp-Net-Core-Response快取","published":1,"updated":"2021-03-30T03:24:16.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwz10007vcuadsqg6n70","content":"<h4 id=\"Net-Core-Response简介\"><a href=\"#Net-Core-Response简介\" class=\"headerlink\" title=\".Net Core Response简介\"></a>.Net Core Response简介</h4><p>对Response回传的结果使用适当的快取机制,可以有助于性能提升,避免重复调用.</p>\n<p>Asp.Net Core Response 快取分两种</p>\n<ul>\n<li><p>Client 端缓存</p>\n</li>\n<li><p>Server 端快取</p>\n</li>\n</ul>\n<p>Asp.Net Core 可以通过ResponseCache设定Response的暂存方式,并设置到要使用Response快取的Controller或Action</p>\n<span id=\"more\"></span>\n\n<h4 id=\"Client-端缓存\"><a href=\"#Client-端缓存\" class=\"headerlink\" title=\"Client 端缓存\"></a>Client 端缓存</h4><p>通过HttpHeader的Cache-Control告知浏览器,将页面保存至浏览器缓存区.Client端缓存只要设置ResponseCache即可.</p>\n<h5 id=\"Client-端缓存设置\"><a href=\"#Client-端缓存设置\" class=\"headerlink\" title=\"Client 端缓存设置\"></a>Client 端缓存设置</h5><p><em>HomeController.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">ResponseCache(Duration = 60, Location = ResponseCacheLocation.Client)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Client-端缓存参数\"><a href=\"#Client-端缓存参数\" class=\"headerlink\" title=\"Client 端缓存参数\"></a>Client 端缓存参数</h5><ul>\n<li><p>Duration</p>\n<p>设置快取有效时间(单位是秒)</p>\n</li>\n<li><p>Location</p>\n<p>设置快取方式,有三种选项</p>\n<ul>\n<li><p>ResponseCacheLocation.Any</p>\n<p>可共用的缓存</p>\n</li>\n<li><p>ResponseCacheLocation.Client</p>\n<p>不可共用的缓存,根据使用者区分</p>\n</li>\n<li><p>ResponseCacheLocation.None</p>\n<p>不使用缓存功能</p>\n</li>\n</ul>\n</li>\n<li><p>NoStore</p>\n<p>不保存Response结果</p>\n</li>\n<li><p>VaryByHeader</p>\n<p>设置区分缓存的HttpHeader</p>\n</li>\n<li><p>VaryByQueryKeys</p>\n<p>设置区分缓存的Url Query String</p>\n</li>\n<li><p>CacheProfileName</p>\n<p>可以在MVC Service设置好CacheProfile,然后在多个地方使用</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCoolection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.CacheProfiles.Add(<span class=\"string\">&quot;Default&quot;</span>,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CacheProfile()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Duration = <span class=\"number\">60</span>,</span><br><span class=\"line\">            Location = ResponseCacheLocation.Client</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Controller和Action,直接通过[ResponseCache(CacheProfileName = “Default”)]来设置.</p>\n</li>\n</ul>\n<h4 id=\"Server-端快取\"><a href=\"#Server-端快取\" class=\"headerlink\" title=\"Server 端快取\"></a>Server 端快取</h4><p>Server 端Response快取适用于常被请求的页面或Api,且数据是可共用的数据,即所有请求返回的数据都是相同的.当在请求相同页面时,会把上次的处理结果从Server的快取中回传给Client,省去后续的操作.</p>\n<ul>\n<li><p>第一次请求Action时,会经过根据后续步骤,获得返回值.</p>\n</li>\n<li><p>第二次请求Action时,由于上次回传结果已经存在Server快取,直接从快取回传上次的结果,省去后续步骤.</p>\n</li>\n</ul>\n<p>Server快取需要用到 Microsoft.AspNetCore.ResponseCaching 套件.</p>\n<p>如果要搭配Server 端Response快取,除了使用[ResponseCache]外,还需要在DI容器中注入ResponseCaching 服务以及注册ResponseCaching的中间件.</p>\n<h5 id=\"Service-端快取设置\"><a href=\"#Service-端快取设置\" class=\"headerlink\" title=\"Service 端快取设置\"></a>Service 端快取设置</h5><p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddResponseCaching(options =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.UseCaseSensitivePaths = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            options.MaximumBodySize = <span class=\"number\">1024</span>;</span><br><span class=\"line\">            options.SizeLimit = <span class=\"number\">100</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseResponseCaching();</span><br><span class=\"line\">        app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Service-端快取参数\"><a href=\"#Service-端快取参数\" class=\"headerlink\" title=\"Service 端快取参数\"></a>Service 端快取参数</h5><ul>\n<li><p>UseCaseSensitivePaths</p>\n<p>Url是否区分大小写为不同的Response快取,默认为true</p>\n</li>\n<li><p>MaximumBodySize</p>\n<p>单个Response快取的大小限制(单位Bytes),默认64MB</p>\n</li>\n<li><p>SizeLimit</p>\n<p>Response快取的总大小限制(单位Bytes),默认为100MB</p>\n</li>\n</ul>\n<h5 id=\"Service-端快取条件\"><a href=\"#Service-端快取条件\" class=\"headerlink\" title=\"Service 端快取条件\"></a>Service 端快取条件</h5><ul>\n<li><p>回传状态必须是Http Status 200(OK)</p>\n</li>\n<li><p>Request 的Http Methods 必须是Get或Head</p>\n</li>\n<li><p>不能有其他的中间件在ResponseCaching中间件加工之前修改Response</p>\n</li>\n<li><p>Http Header 不能用 Authorization</p>\n</li>\n<li><p>Http Header 的CacheContro必须是public的</p>\n</li>\n<li><p>Http Header 不能用Set-Cookie</p>\n</li>\n<li><p>Http Header的Vary值不能为*</p>\n</li>\n<li><p>不能使用IHttpSendFileFeature</p>\n</li>\n<li><p>不能设置 no-store</p>\n</li>\n<li><p>单一回传快取不能大于 MaximunBodySize</p>\n</li>\n<li><p>总快取大小不能大于SizeLimit</p>\n</li>\n</ul>\n","site":{"data":{}},"length":2309,"excerpt":"<h4 id=\"Net-Core-Response简介\"><a href=\"#Net-Core-Response简介\" class=\"headerlink\" title=\".Net Core Response简介\"></a>.Net Core Response简介</h4><p>对Response回传的结果使用适当的快取机制,可以有助于性能提升,避免重复调用.</p>\n<p>Asp.Net Core Response 快取分两种</p>\n<ul>\n<li><p>Client 端缓存</p>\n</li>\n<li><p>Server 端快取</p>\n</li>\n</ul>\n<p>Asp.Net Core 可以通过ResponseCache设定Response的暂存方式,并设置到要使用Response快取的Controller或Action</p>","more":"<h4 id=\"Client-端缓存\"><a href=\"#Client-端缓存\" class=\"headerlink\" title=\"Client 端缓存\"></a>Client 端缓存</h4><p>通过HttpHeader的Cache-Control告知浏览器,将页面保存至浏览器缓存区.Client端缓存只要设置ResponseCache即可.</p>\n<h5 id=\"Client-端缓存设置\"><a href=\"#Client-端缓存设置\" class=\"headerlink\" title=\"Client 端缓存设置\"></a>Client 端缓存设置</h5><p><em>HomeController.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">ResponseCache(Duration = 60, Location = ResponseCacheLocation.Client)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Client-端缓存参数\"><a href=\"#Client-端缓存参数\" class=\"headerlink\" title=\"Client 端缓存参数\"></a>Client 端缓存参数</h5><ul>\n<li><p>Duration</p>\n<p>设置快取有效时间(单位是秒)</p>\n</li>\n<li><p>Location</p>\n<p>设置快取方式,有三种选项</p>\n<ul>\n<li><p>ResponseCacheLocation.Any</p>\n<p>可共用的缓存</p>\n</li>\n<li><p>ResponseCacheLocation.Client</p>\n<p>不可共用的缓存,根据使用者区分</p>\n</li>\n<li><p>ResponseCacheLocation.None</p>\n<p>不使用缓存功能</p>\n</li>\n</ul>\n</li>\n<li><p>NoStore</p>\n<p>不保存Response结果</p>\n</li>\n<li><p>VaryByHeader</p>\n<p>设置区分缓存的HttpHeader</p>\n</li>\n<li><p>VaryByQueryKeys</p>\n<p>设置区分缓存的Url Query String</p>\n</li>\n<li><p>CacheProfileName</p>\n<p>可以在MVC Service设置好CacheProfile,然后在多个地方使用</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCoolection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.CacheProfiles.Add(<span class=\"string\">&quot;Default&quot;</span>,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CacheProfile()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Duration = <span class=\"number\">60</span>,</span><br><span class=\"line\">            Location = ResponseCacheLocation.Client</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Controller和Action,直接通过[ResponseCache(CacheProfileName = “Default”)]来设置.</p>\n</li>\n</ul>\n<h4 id=\"Server-端快取\"><a href=\"#Server-端快取\" class=\"headerlink\" title=\"Server 端快取\"></a>Server 端快取</h4><p>Server 端Response快取适用于常被请求的页面或Api,且数据是可共用的数据,即所有请求返回的数据都是相同的.当在请求相同页面时,会把上次的处理结果从Server的快取中回传给Client,省去后续的操作.</p>\n<ul>\n<li><p>第一次请求Action时,会经过根据后续步骤,获得返回值.</p>\n</li>\n<li><p>第二次请求Action时,由于上次回传结果已经存在Server快取,直接从快取回传上次的结果,省去后续步骤.</p>\n</li>\n</ul>\n<p>Server快取需要用到 Microsoft.AspNetCore.ResponseCaching 套件.</p>\n<p>如果要搭配Server 端Response快取,除了使用[ResponseCache]外,还需要在DI容器中注入ResponseCaching 服务以及注册ResponseCaching的中间件.</p>\n<h5 id=\"Service-端快取设置\"><a href=\"#Service-端快取设置\" class=\"headerlink\" title=\"Service 端快取设置\"></a>Service 端快取设置</h5><p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddResponseCaching(options =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.UseCaseSensitivePaths = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            options.MaximumBodySize = <span class=\"number\">1024</span>;</span><br><span class=\"line\">            options.SizeLimit = <span class=\"number\">100</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseResponseCaching();</span><br><span class=\"line\">        app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Service-端快取参数\"><a href=\"#Service-端快取参数\" class=\"headerlink\" title=\"Service 端快取参数\"></a>Service 端快取参数</h5><ul>\n<li><p>UseCaseSensitivePaths</p>\n<p>Url是否区分大小写为不同的Response快取,默认为true</p>\n</li>\n<li><p>MaximumBodySize</p>\n<p>单个Response快取的大小限制(单位Bytes),默认64MB</p>\n</li>\n<li><p>SizeLimit</p>\n<p>Response快取的总大小限制(单位Bytes),默认为100MB</p>\n</li>\n</ul>\n<h5 id=\"Service-端快取条件\"><a href=\"#Service-端快取条件\" class=\"headerlink\" title=\"Service 端快取条件\"></a>Service 端快取条件</h5><ul>\n<li><p>回传状态必须是Http Status 200(OK)</p>\n</li>\n<li><p>Request 的Http Methods 必须是Get或Head</p>\n</li>\n<li><p>不能有其他的中间件在ResponseCaching中间件加工之前修改Response</p>\n</li>\n<li><p>Http Header 不能用 Authorization</p>\n</li>\n<li><p>Http Header 的CacheContro必须是public的</p>\n</li>\n<li><p>Http Header 不能用Set-Cookie</p>\n</li>\n<li><p>Http Header的Vary值不能为*</p>\n</li>\n<li><p>不能使用IHttpSendFileFeature</p>\n</li>\n<li><p>不能设置 no-store</p>\n</li>\n<li><p>单一回传快取不能大于 MaximunBodySize</p>\n</li>\n<li><p>总快取大小不能大于SizeLimit</p>\n</li>\n</ul>"},{"title":"Asp.Net Core Url 重写","date":"2019-06-25T15:49:06.000Z","_content":"#### Url重写的引用\n* 需要引入nuget包 Microsoft.AspNetCore.Rewrite\n* 在Startup.cs 建立Url重写规则,并注册Url重写中间件\n  ```cs\n    public class  Startup\n    {\n        public void Configure(IApplicationBuilder app)\n        {\n            var rewrite = new RewriteOptions()\n                //Url重写\n                .AddRewrite(\"error.html\", \"home/error\", skipRemainingRules: true);\n                //Url重定向\n                .AddRedirect(\"main\", \"home/index\");\n            app.UseRewriter(rewrite);\n        }\n    }\n    ```\n<!--more-->\n#### Url重写\nUrl重写是属于Server端的转换事件,当Client端Request的时候,发现原地址被替换了,则自动回传新地址的内容.\n\n##### AddRewrite()方法\n有三个参数,当Url符合参数1时就将参数2路由的内容回传给Client,skipRemainingRules为true时,当找到匹配条件时,则不再继续往下寻找.参数1支持正则匹配.\n```cs\nAddRewrite(\"users?id=(\\w+)\", \"users/$1\", true);\n```\n#### Url重定向\nUrl重定向是属于Client的转换事件,当 Client 端 Request 來的時候，发现原地址被替换了，Server 會先回传給 Client 告知新地址，再由 Client 重新 Request 新地址.\n\n##### AddRedirect()方法\n有3个参数,当Url符合参数1时,会回传参数2的Url给Client,参数3用于指定回传的HTTP Stastus Code(301/302),不指定时默认为302,参数1支持正则匹配.\n```cs\nAddRedirect(\"api/(.*)/(.*)/(.*)\", \"api?p1=$1&p2=$2&p3=$3\", 301);\n```\n##### HTTP Status Code 301\n301是指该网址已经永久转移到另一个地方,常用于网站搬家和网站改版,新旧版本路径不相同,要重新对应的情况\n\n##### HTTP Status Code 302\n302是指该网站暂时被转移到另一个地方,常用于网站维护时.","source":"_posts/Asp-Net-Core-Url 重写.md","raw":"---\ntitle: Asp.Net Core Url 重写\ndate: 2019-06-25 23:49:06\ncategories: .Net Core\ntags:\n - .Net Core\n - Url 重写\n---\n#### Url重写的引用\n* 需要引入nuget包 Microsoft.AspNetCore.Rewrite\n* 在Startup.cs 建立Url重写规则,并注册Url重写中间件\n  ```cs\n    public class  Startup\n    {\n        public void Configure(IApplicationBuilder app)\n        {\n            var rewrite = new RewriteOptions()\n                //Url重写\n                .AddRewrite(\"error.html\", \"home/error\", skipRemainingRules: true);\n                //Url重定向\n                .AddRedirect(\"main\", \"home/index\");\n            app.UseRewriter(rewrite);\n        }\n    }\n    ```\n<!--more-->\n#### Url重写\nUrl重写是属于Server端的转换事件,当Client端Request的时候,发现原地址被替换了,则自动回传新地址的内容.\n\n##### AddRewrite()方法\n有三个参数,当Url符合参数1时就将参数2路由的内容回传给Client,skipRemainingRules为true时,当找到匹配条件时,则不再继续往下寻找.参数1支持正则匹配.\n```cs\nAddRewrite(\"users?id=(\\w+)\", \"users/$1\", true);\n```\n#### Url重定向\nUrl重定向是属于Client的转换事件,当 Client 端 Request 來的時候，发现原地址被替换了，Server 會先回传給 Client 告知新地址，再由 Client 重新 Request 新地址.\n\n##### AddRedirect()方法\n有3个参数,当Url符合参数1时,会回传参数2的Url给Client,参数3用于指定回传的HTTP Stastus Code(301/302),不指定时默认为302,参数1支持正则匹配.\n```cs\nAddRedirect(\"api/(.*)/(.*)/(.*)\", \"api?p1=$1&p2=$2&p3=$3\", 301);\n```\n##### HTTP Status Code 301\n301是指该网址已经永久转移到另一个地方,常用于网站搬家和网站改版,新旧版本路径不相同,要重新对应的情况\n\n##### HTTP Status Code 302\n302是指该网站暂时被转移到另一个地方,常用于网站维护时.","slug":"Asp-Net-Core-Url 重写","published":1,"updated":"2021-03-30T03:24:16.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwz20008vcua44vt7nue","content":"<h4 id=\"Url重写的引用\"><a href=\"#Url重写的引用\" class=\"headerlink\" title=\"Url重写的引用\"></a>Url重写的引用</h4><ul>\n<li>需要引入nuget包 Microsoft.AspNetCore.Rewrite</li>\n<li>在Startup.cs 建立Url重写规则,并注册Url重写中间件<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span>  <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rewrite = <span class=\"keyword\">new</span> RewriteOptions()</span><br><span class=\"line\">            <span class=\"comment\">//Url重写</span></span><br><span class=\"line\">            .AddRewrite(<span class=\"string\">&quot;error.html&quot;</span>, <span class=\"string\">&quot;home/error&quot;</span>, skipRemainingRules: <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//Url重定向</span></span><br><span class=\"line\">            .AddRedirect(<span class=\"string\">&quot;main&quot;</span>, <span class=\"string\">&quot;home/index&quot;</span>);</span><br><span class=\"line\">        app.UseRewriter(rewrite);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"Url重写\"><a href=\"#Url重写\" class=\"headerlink\" title=\"Url重写\"></a>Url重写</h4>Url重写是属于Server端的转换事件,当Client端Request的时候,发现原地址被替换了,则自动回传新地址的内容.</li>\n</ul>\n<h5 id=\"AddRewrite-方法\"><a href=\"#AddRewrite-方法\" class=\"headerlink\" title=\"AddRewrite()方法\"></a>AddRewrite()方法</h5><p>有三个参数,当Url符合参数1时就将参数2路由的内容回传给Client,skipRemainingRules为true时,当找到匹配条件时,则不再继续往下寻找.参数1支持正则匹配.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddRewrite(<span class=\"string\">&quot;users?id=(\\w+)&quot;</span>, <span class=\"string\">&quot;users/$1&quot;</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Url重定向\"><a href=\"#Url重定向\" class=\"headerlink\" title=\"Url重定向\"></a>Url重定向</h4><p>Url重定向是属于Client的转换事件,当 Client 端 Request 來的時候，发现原地址被替换了，Server 會先回传給 Client 告知新地址，再由 Client 重新 Request 新地址.</p>\n<h5 id=\"AddRedirect-方法\"><a href=\"#AddRedirect-方法\" class=\"headerlink\" title=\"AddRedirect()方法\"></a>AddRedirect()方法</h5><p>有3个参数,当Url符合参数1时,会回传参数2的Url给Client,参数3用于指定回传的HTTP Stastus Code(301/302),不指定时默认为302,参数1支持正则匹配.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddRedirect(<span class=\"string\">&quot;api/(.*)/(.*)/(.*)&quot;</span>, <span class=\"string\">&quot;api?p1=$1&amp;p2=$2&amp;p3=$3&quot;</span>, <span class=\"number\">301</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"HTTP-Status-Code-301\"><a href=\"#HTTP-Status-Code-301\" class=\"headerlink\" title=\"HTTP Status Code 301\"></a>HTTP Status Code 301</h5><p>301是指该网址已经永久转移到另一个地方,常用于网站搬家和网站改版,新旧版本路径不相同,要重新对应的情况</p>\n<h5 id=\"HTTP-Status-Code-302\"><a href=\"#HTTP-Status-Code-302\" class=\"headerlink\" title=\"HTTP Status Code 302\"></a>HTTP Status Code 302</h5><p>302是指该网站暂时被转移到另一个地方,常用于网站维护时.</p>\n","site":{"data":{}},"length":1035,"excerpt":"<h4 id=\"Url重写的引用\"><a href=\"#Url重写的引用\" class=\"headerlink\" title=\"Url重写的引用\"></a>Url重写的引用</h4><ul>\n<li>需要引入nuget包 Microsoft.AspNetCore.Rewrite</li>\n<li>在Startup.cs 建立Url重写规则,并注册Url重写中间件<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span>  <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rewrite = <span class=\"keyword\">new</span> RewriteOptions()</span><br><span class=\"line\">            <span class=\"comment\">//Url重写</span></span><br><span class=\"line\">            .AddRewrite(<span class=\"string\">&quot;error.html&quot;</span>, <span class=\"string\">&quot;home/error&quot;</span>, skipRemainingRules: <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//Url重定向</span></span><br><span class=\"line\">            .AddRedirect(<span class=\"string\">&quot;main&quot;</span>, <span class=\"string\">&quot;home/index&quot;</span>);</span><br><span class=\"line\">        app.UseRewriter(rewrite);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"Url重写\"><a href=\"#Url重写\" class=\"headerlink\" title=\"Url重写\"></a>Url重写</h4>Url重写是属于Server端的转换事件,当Client端Request的时候,发现原地址被替换了,则自动回传新地址的内容.</li>\n</ul>\n<h5 id=\"AddRewrite-方法\"><a href=\"#AddRewrite-方法\" class=\"headerlink\" title=\"AddRewrite()方法\"></a>AddRewrite()方法</h5><p>有三个参数,当Url符合参数1时就将参数2路由的内容回传给Client,skipRemainingRules为true时,当找到匹配条件时,则不再继续往下寻找.参数1支持正则匹配.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddRewrite(<span class=\"string\">&quot;users?id=(\\w+)&quot;</span>, <span class=\"string\">&quot;users/$1&quot;</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Url重定向\"><a href=\"#Url重定向\" class=\"headerlink\" title=\"Url重定向\"></a>Url重定向</h4><p>Url重定向是属于Client的转换事件,当 Client 端 Request 來的時候，发现原地址被替换了，Server 會先回传給 Client 告知新地址，再由 Client 重新 Request 新地址.</p>\n<h5 id=\"AddRedirect-方法\"><a href=\"#AddRedirect-方法\" class=\"headerlink\" title=\"AddRedirect()方法\"></a>AddRedirect()方法</h5><p>有3个参数,当Url符合参数1时,会回传参数2的Url给Client,参数3用于指定回传的HTTP Stastus Code(301/302),不指定时默认为302,参数1支持正则匹配.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddRedirect(<span class=\"string\">&quot;api/(.*)/(.*)/(.*)&quot;</span>, <span class=\"string\">&quot;api?p1=$1&amp;p2=$2&amp;p3=$3&quot;</span>, <span class=\"number\">301</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"HTTP-Status-Code-301\"><a href=\"#HTTP-Status-Code-301\" class=\"headerlink\" title=\"HTTP Status Code 301\"></a>HTTP Status Code 301</h5><p>301是指该网址已经永久转移到另一个地方,常用于网站搬家和网站改版,新旧版本路径不相同,要重新对应的情况</p>\n<h5 id=\"HTTP-Status-Code-302\"><a href=\"#HTTP-Status-Code-302\" class=\"headerlink\" title=\"HTTP Status Code 302\"></a>HTTP Status Code 302</h5><p>302是指该网站暂时被转移到另一个地方,常用于网站维护时.</p>"},{"title":"Asp.Net Core SignalR","date":"2019-07-29T13:55:26.000Z","_content":"SignalR 是一套能让Asp.Net Core 轻松实现与Client即时互动的套件.\n<!--more-->\n\n#### 引用\n\n在nuget中安装 Microsoft.AspNetCore.SignalR.Core\n\n#### 注册SignalR服务\n\n在Startup.CofigureServices 加入SignalR的服务,同时在Startup.Configure将SignalR加到管道中.\n\n*Startup.cs*\n\n```cs\nusing Microsoft.AspNetCore.SignalR;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace SignalRChat.Hubs\n{\n    public class ChatHub:Hub\n    {\n        private string Now => DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n        public override async Task OnConnectedAsync()\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", \"系统\",$\"[{Now}]{Context.ConnectionId} 加入\");\n        }\n        public override async Task OnDisconnectedAsync(Exception exception)\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", \"系统\", $\"[{Now}]{Context.ConnectionId} 离开\");\n        }\n\n        public async Task SendMessage(string user,string message)\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n        }\n    }\n}\n```\n\n#### SignalR Client\n\n##### 添加 SignalR 客户端库\n\n* 在“解决方案资源管理器”中，右键单击项目，然后选择“添加” > “客户端库”\n\n* 在“添加客户端库”对话框中，对于“提供程序”，选择“unpkg”\n\n* 对于“库”，输入 `@aspnet/signalr@1`，然后选择不是预览版的最新版本\n\n* 选择“选择特定文件”，展开“dist/browser”文件夹，然后选择“signalr.js”和“signalr.min.js”\n\n* 将“目标位置”设置为 wwwroot/lib/signalr/，然后选择“安装”\n\n*chat.js*\n\n```cs\n\"use strict\";\n\nvar connection = new signalR.HubConnectionBuilder().withUrl(\"/chatHub\").build();\n\n//Disable send button until connection is established\ndocument.getElementById(\"sendButton\").disabled = true;\n\nconnection.on(\"ReceiveMessage\", function (user, message) {\n    var msg = message.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    var encodedMsg = user + \" says \" + msg;\n    var li = document.createElement(\"li\");\n    li.textContent = encodedMsg;\n    document.getElementById(\"messagesList\").appendChild(li);\n});\n\nconnection.start().then(function(){\n    document.getElementById(\"sendButton\").disabled = false;\n}).catch(function (err) {\n    return console.error(err.toString());\n});\n\ndocument.getElementById(\"sendButton\").addEventListener(\"click\", function (event) {\n    var user = document.getElementById(\"userInput\").value;\n    var message = document.getElementById(\"messageInput\").value;\n    connection.invoke(\"SendMessage\", user, message).catch(function (err) {\n        return console.error(err.toString());\n    });\n    event.preventDefault();\n});\n```\n\n*Index.cshtml*\n\n```cs\n@page\n<div class=\"container\">\n    <div class=\"row\">&nbsp;</div>\n    <div class=\"row\">\n        <div class=\"col-6\">&nbsp;</div>\n        <div class=\"col-6\">\n            用户...<input type=\"text\" id=\"userInput\" />\n            <br />\n            消息...<input type=\"text\" id=\"messageInput\" />\n            <input type=\"button\" id=\"sendButton\" value=\"发送信息\" />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <hr />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-6\">&nbsp;</div>\n        <div class=\"col-6\">\n            <ul id=\"messagesList\"></ul>\n        </div>\n    </div>\n</div>\n\n<script src=\"~/lib/signalr/dist/browser/signalr.js\"></script>\n<script src=\"~/js/chat.js\"></script>\n```\n","source":"_posts/Asp-Net-Core-SignalR.md","raw":"---\ntitle: Asp.Net Core SignalR\ndate: 2019-07-29 21:55:26\ncategories: .Net Core\ntags:\n - .Net Core\n - SignalR\n---\nSignalR 是一套能让Asp.Net Core 轻松实现与Client即时互动的套件.\n<!--more-->\n\n#### 引用\n\n在nuget中安装 Microsoft.AspNetCore.SignalR.Core\n\n#### 注册SignalR服务\n\n在Startup.CofigureServices 加入SignalR的服务,同时在Startup.Configure将SignalR加到管道中.\n\n*Startup.cs*\n\n```cs\nusing Microsoft.AspNetCore.SignalR;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace SignalRChat.Hubs\n{\n    public class ChatHub:Hub\n    {\n        private string Now => DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n        public override async Task OnConnectedAsync()\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", \"系统\",$\"[{Now}]{Context.ConnectionId} 加入\");\n        }\n        public override async Task OnDisconnectedAsync(Exception exception)\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", \"系统\", $\"[{Now}]{Context.ConnectionId} 离开\");\n        }\n\n        public async Task SendMessage(string user,string message)\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n        }\n    }\n}\n```\n\n#### SignalR Client\n\n##### 添加 SignalR 客户端库\n\n* 在“解决方案资源管理器”中，右键单击项目，然后选择“添加” > “客户端库”\n\n* 在“添加客户端库”对话框中，对于“提供程序”，选择“unpkg”\n\n* 对于“库”，输入 `@aspnet/signalr@1`，然后选择不是预览版的最新版本\n\n* 选择“选择特定文件”，展开“dist/browser”文件夹，然后选择“signalr.js”和“signalr.min.js”\n\n* 将“目标位置”设置为 wwwroot/lib/signalr/，然后选择“安装”\n\n*chat.js*\n\n```cs\n\"use strict\";\n\nvar connection = new signalR.HubConnectionBuilder().withUrl(\"/chatHub\").build();\n\n//Disable send button until connection is established\ndocument.getElementById(\"sendButton\").disabled = true;\n\nconnection.on(\"ReceiveMessage\", function (user, message) {\n    var msg = message.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    var encodedMsg = user + \" says \" + msg;\n    var li = document.createElement(\"li\");\n    li.textContent = encodedMsg;\n    document.getElementById(\"messagesList\").appendChild(li);\n});\n\nconnection.start().then(function(){\n    document.getElementById(\"sendButton\").disabled = false;\n}).catch(function (err) {\n    return console.error(err.toString());\n});\n\ndocument.getElementById(\"sendButton\").addEventListener(\"click\", function (event) {\n    var user = document.getElementById(\"userInput\").value;\n    var message = document.getElementById(\"messageInput\").value;\n    connection.invoke(\"SendMessage\", user, message).catch(function (err) {\n        return console.error(err.toString());\n    });\n    event.preventDefault();\n});\n```\n\n*Index.cshtml*\n\n```cs\n@page\n<div class=\"container\">\n    <div class=\"row\">&nbsp;</div>\n    <div class=\"row\">\n        <div class=\"col-6\">&nbsp;</div>\n        <div class=\"col-6\">\n            用户...<input type=\"text\" id=\"userInput\" />\n            <br />\n            消息...<input type=\"text\" id=\"messageInput\" />\n            <input type=\"button\" id=\"sendButton\" value=\"发送信息\" />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <hr />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-6\">&nbsp;</div>\n        <div class=\"col-6\">\n            <ul id=\"messagesList\"></ul>\n        </div>\n    </div>\n</div>\n\n<script src=\"~/lib/signalr/dist/browser/signalr.js\"></script>\n<script src=\"~/js/chat.js\"></script>\n```\n","slug":"Asp-Net-Core-SignalR","published":1,"updated":"2021-03-30T03:24:16.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwz30009vcua2u3kgjug","content":"<p>SignalR 是一套能让Asp.Net Core 轻松实现与Client即时互动的套件.</p>\n<span id=\"more\"></span>\n\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p>在nuget中安装 Microsoft.AspNetCore.SignalR.Core</p>\n<h4 id=\"注册SignalR服务\"><a href=\"#注册SignalR服务\" class=\"headerlink\" title=\"注册SignalR服务\"></a>注册SignalR服务</h4><p>在Startup.CofigureServices 加入SignalR的服务,同时在Startup.Configure将SignalR加到管道中.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.SignalR;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SignalRChat.Hubs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChatHub</span>:<span class=\"title\">Hub</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> Now =&gt; DateTime.Now.ToString(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnConnectedAsync</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">&quot;ReceiveMessage&quot;</span>, <span class=\"string\">&quot;系统&quot;</span>,<span class=\"string\">$&quot;[<span class=\"subst\">&#123;Now&#125;</span>]<span class=\"subst\">&#123;Context.ConnectionId&#125;</span> 加入&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnDisconnectedAsync</span>(<span class=\"params\">Exception exception</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">&quot;ReceiveMessage&quot;</span>, <span class=\"string\">&quot;系统&quot;</span>, <span class=\"string\">$&quot;[<span class=\"subst\">&#123;Now&#125;</span>]<span class=\"subst\">&#123;Context.ConnectionId&#125;</span> 离开&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">SendMessage</span>(<span class=\"params\"><span class=\"built_in\">string</span> user,<span class=\"built_in\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">&quot;ReceiveMessage&quot;</span>, user, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SignalR-Client\"><a href=\"#SignalR-Client\" class=\"headerlink\" title=\"SignalR Client\"></a>SignalR Client</h4><h5 id=\"添加-SignalR-客户端库\"><a href=\"#添加-SignalR-客户端库\" class=\"headerlink\" title=\"添加 SignalR 客户端库\"></a>添加 SignalR 客户端库</h5><ul>\n<li><p>在“解决方案资源管理器”中，右键单击项目，然后选择“添加” &gt; “客户端库”</p>\n</li>\n<li><p>在“添加客户端库”对话框中，对于“提供程序”，选择“unpkg”</p>\n</li>\n<li><p>对于“库”，输入 <code>@aspnet/signalr@1</code>，然后选择不是预览版的最新版本</p>\n</li>\n<li><p>选择“选择特定文件”，展开“dist/browser”文件夹，然后选择“signalr.js”和“signalr.min.js”</p>\n</li>\n<li><p>将“目标位置”设置为 wwwroot/lib/signalr/，然后选择“安装”</p>\n</li>\n</ul>\n<p><em>chat.js</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> connection = <span class=\"keyword\">new</span> signalR.HubConnectionBuilder().withUrl(<span class=\"string\">&quot;/chatHub&quot;</span>).build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Disable send button until connection is established</span></span><br><span class=\"line\">document.getElementById(<span class=\"string\">&quot;sendButton&quot;</span>).disabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">connection.<span class=\"keyword\">on</span>(<span class=\"string\">&quot;ReceiveMessage&quot;</span>, function (user, message) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg = message.replace(/&amp;/g, <span class=\"string\">&quot;&amp;amp;&quot;</span>).replace(/&lt;/g, <span class=\"string\">&quot;&amp;lt;&quot;</span>).replace(/&gt;/g, <span class=\"string\">&quot;&amp;gt;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> encodedMsg = user + <span class=\"string\">&quot; says &quot;</span> + msg;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> li = document.createElement(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">    li.textContent = encodedMsg;</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">&quot;messagesList&quot;</span>).appendChild(li);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">connection.start().then(function()&#123;</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">&quot;sendButton&quot;</span>).disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> console.error(err.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(<span class=\"string\">&quot;sendButton&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, function (<span class=\"keyword\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = document.getElementById(<span class=\"string\">&quot;userInput&quot;</span>).<span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = document.getElementById(<span class=\"string\">&quot;messageInput&quot;</span>).<span class=\"keyword\">value</span>;</span><br><span class=\"line\">    connection.invoke(<span class=\"string\">&quot;SendMessage&quot;</span>, user, message).catch(function (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> console.error(err.toString());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">event</span>.preventDefault();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>Index.cshtml</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@page</span><br><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;col-6&quot;</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;col-6&quot;</span>&gt;</span><br><span class=\"line\">            用户...&lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;userInput&quot;</span> /&gt;</span><br><span class=\"line\">            &lt;br /&gt;</span><br><span class=\"line\">            消息...&lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;messageInput&quot;</span> /&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;button&quot;</span> id=<span class=\"string\">&quot;sendButton&quot;</span> <span class=\"keyword\">value</span>=<span class=\"string\">&quot;发送信息&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;col-12&quot;</span>&gt;</span><br><span class=\"line\">            &lt;hr /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;col-6&quot;</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;col-6&quot;</span>&gt;</span><br><span class=\"line\">            &lt;ul id=<span class=\"string\">&quot;messagesList&quot;</span>&gt;&lt;/ul&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;~/lib/signalr/dist/browser/signalr.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;~/js/chat.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":3406,"excerpt":"<p>SignalR 是一套能让Asp.Net Core 轻松实现与Client即时互动的套件.</p>","more":"<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p>在nuget中安装 Microsoft.AspNetCore.SignalR.Core</p>\n<h4 id=\"注册SignalR服务\"><a href=\"#注册SignalR服务\" class=\"headerlink\" title=\"注册SignalR服务\"></a>注册SignalR服务</h4><p>在Startup.CofigureServices 加入SignalR的服务,同时在Startup.Configure将SignalR加到管道中.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.SignalR;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SignalRChat.Hubs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChatHub</span>:<span class=\"title\">Hub</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> Now =&gt; DateTime.Now.ToString(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnConnectedAsync</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">&quot;ReceiveMessage&quot;</span>, <span class=\"string\">&quot;系统&quot;</span>,<span class=\"string\">$&quot;[<span class=\"subst\">&#123;Now&#125;</span>]<span class=\"subst\">&#123;Context.ConnectionId&#125;</span> 加入&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnDisconnectedAsync</span>(<span class=\"params\">Exception exception</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">&quot;ReceiveMessage&quot;</span>, <span class=\"string\">&quot;系统&quot;</span>, <span class=\"string\">$&quot;[<span class=\"subst\">&#123;Now&#125;</span>]<span class=\"subst\">&#123;Context.ConnectionId&#125;</span> 离开&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">SendMessage</span>(<span class=\"params\"><span class=\"built_in\">string</span> user,<span class=\"built_in\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">&quot;ReceiveMessage&quot;</span>, user, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SignalR-Client\"><a href=\"#SignalR-Client\" class=\"headerlink\" title=\"SignalR Client\"></a>SignalR Client</h4><h5 id=\"添加-SignalR-客户端库\"><a href=\"#添加-SignalR-客户端库\" class=\"headerlink\" title=\"添加 SignalR 客户端库\"></a>添加 SignalR 客户端库</h5><ul>\n<li><p>在“解决方案资源管理器”中，右键单击项目，然后选择“添加” &gt; “客户端库”</p>\n</li>\n<li><p>在“添加客户端库”对话框中，对于“提供程序”，选择“unpkg”</p>\n</li>\n<li><p>对于“库”，输入 <code>@aspnet/signalr@1</code>，然后选择不是预览版的最新版本</p>\n</li>\n<li><p>选择“选择特定文件”，展开“dist/browser”文件夹，然后选择“signalr.js”和“signalr.min.js”</p>\n</li>\n<li><p>将“目标位置”设置为 wwwroot/lib/signalr/，然后选择“安装”</p>\n</li>\n</ul>\n<p><em>chat.js</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> connection = <span class=\"keyword\">new</span> signalR.HubConnectionBuilder().withUrl(<span class=\"string\">&quot;/chatHub&quot;</span>).build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Disable send button until connection is established</span></span><br><span class=\"line\">document.getElementById(<span class=\"string\">&quot;sendButton&quot;</span>).disabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">connection.<span class=\"keyword\">on</span>(<span class=\"string\">&quot;ReceiveMessage&quot;</span>, function (user, message) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg = message.replace(/&amp;/g, <span class=\"string\">&quot;&amp;amp;&quot;</span>).replace(/&lt;/g, <span class=\"string\">&quot;&amp;lt;&quot;</span>).replace(/&gt;/g, <span class=\"string\">&quot;&amp;gt;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> encodedMsg = user + <span class=\"string\">&quot; says &quot;</span> + msg;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> li = document.createElement(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">    li.textContent = encodedMsg;</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">&quot;messagesList&quot;</span>).appendChild(li);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">connection.start().then(function()&#123;</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">&quot;sendButton&quot;</span>).disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;).catch(function (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> console.error(err.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(<span class=\"string\">&quot;sendButton&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, function (<span class=\"keyword\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = document.getElementById(<span class=\"string\">&quot;userInput&quot;</span>).<span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = document.getElementById(<span class=\"string\">&quot;messageInput&quot;</span>).<span class=\"keyword\">value</span>;</span><br><span class=\"line\">    connection.invoke(<span class=\"string\">&quot;SendMessage&quot;</span>, user, message).catch(function (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> console.error(err.toString());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">event</span>.preventDefault();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>Index.cshtml</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@page</span><br><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;col-6&quot;</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;col-6&quot;</span>&gt;</span><br><span class=\"line\">            用户...&lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;userInput&quot;</span> /&gt;</span><br><span class=\"line\">            &lt;br /&gt;</span><br><span class=\"line\">            消息...&lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;messageInput&quot;</span> /&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;button&quot;</span> id=<span class=\"string\">&quot;sendButton&quot;</span> <span class=\"keyword\">value</span>=<span class=\"string\">&quot;发送信息&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;col-12&quot;</span>&gt;</span><br><span class=\"line\">            &lt;hr /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;col-6&quot;</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;col-6&quot;</span>&gt;</span><br><span class=\"line\">            &lt;ul id=<span class=\"string\">&quot;messagesList&quot;</span>&gt;&lt;/ul&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;~/lib/signalr/dist/browser/signalr.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;~/js/chat.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"Asp.Net Core Web API的先进架构","date":"2018-06-21T15:58:04.000Z","_content":"##### 架构分层\n端口和适配器模式(又称六角形架构)可以解决业务逻辑与其他依赖项(如数据访问或API框架)耦合过于紧密的问题。使用此模式将允许您的API解决方案具有清晰的边界、具有单一职责的良好命名的对象，最终使其更容易开发和维护。架构分为API层,Domain层和Data层\n<!--more-->\n##### Domain层\n领域层具有以下功能:\n* 定义将在整个解决方案中使用的实体对象。这些模型将表示数据层的数据模型（DataModel）\n* 定义视图模型（ViewModel），将由API层针对HTTP请求和响应作为单个对象或对象集来使用\n* 定义接口，我们的数据层可以通过这些接口实现数据访问逻辑\n* 实现将包含从API层调用的方法的Supervisor。每个方法都代表一个API调用，并将数据从注入的数据层转换为视图模型以返回\n示例如下\n```cs\n// Album.cs\npublic sealed class Album\n{\n    public int AlbumId { get; set; }\n    public string Title { get; set; }\n    public int ArtistId { get; set; }\n        \n    public ICollection<Track> Tracks { get; set; } = new HashSet<Track>();\n    public Artist Artist { get; set; }\n}\n// AlbumViewModel.cs\npublic class AlbumViewModel\n{\n    public int AlbumId { get; set; }\n    public string Title { get; set; }\n    public int ArtistId { get; set; }\n    public string ArtistName { get; set; }\n\n    public ArtistViewModel Artist { get; set; }\n    public IList<TrackViewModel> Tracks { get; set; }\n}\n// IAlbumRepository.cs\npublic interface IAlbumRepository : IDisposable\n{\n    Task<List<Album>> GetAllAsync(CancellationToken ct = default(CancellationToken));\n    Task<Album> GetByIdAsync(int id, CancellationToken ct = default(CancellationToken));\n    Task<List<Album>> GetByArtistIdAsync(int id, CancellationToken ct = default(CancellationToken));\n    Task<Album> AddAsync(Album newAlbum, CancellationToken ct = default(CancellationToken));\n    Task<bool> UpdateAsync(Album album, CancellationToken ct = default(CancellationToken));\n    Task<bool> DeleteAsync(int id, CancellationToken ct = default(CancellationToken));\n}\n// Supervisor.cs\npublic async Task<AlbumViewModel> GetAlbumByIdAsync(int id, CancellationToken ct = default(CancellationToken))\n{\n    var albumViewModel = AlbumCoverter.Convert(await _albumRepository.GetByIdAsync(id, ct));\n    albumViewModel.Artist = await GetArtistByIdAsync(albumViewModel.ArtistId, ct);\n    albumViewModel.Tracks = await GetTrackByAlbumIdAsync(albumViewModel.AlbumId, ct);\n    albumViewModel.ArtistName = albumViewModel.Artist.Name;\n    return albumViewModel;\n}\n\n```\n\n##### Data层\n数据层的关键是使用领域层中开发的接口实现每个实体存储库。以领域层的专辑存储库为例，它就是实现了IAlbumRepository接口。每个存储库都将注入DBContext，允许使用实体框架核心访问SQL数据库\n```cs\npublic class AlbumRepository : IAlbumRepository\n{\n    private readonly ChinookContext _context;\n\n    public AlbumRepository(ChinookContext context)\n    {\n        _context = context;\n    }\n\n    private async Task<bool> AlbumExists(int id, CancellationToken ct = default(CancellationToken))\n    {\nreturn await GetByIdAsync(id, ct) != null;\n    }\n\n    public void Dispose()\n    {\n        _context.Dispose();\n    }\n\n    public async Task<List<Album>> GetAllAsync(CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.ToListAsync(ct);\n    }\n\n    public async Task<Album> GetByIdAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.FindAsync(id);\n    }\n\n    public async Task<Album> AddAsync(Album newAlbum, CancellationToken ct = default(CancellationToken))\n    {\n        _context.Album.Add(newAlbum);\n        await _context.SaveChangesAsync(ct);\n        return newAlbum;\n    }\n\n    public async Task<bool> UpdateAsync(Album album, CancellationToken ct = default(CancellationToken))\n    {\n        if (!await AlbumExists(album.AlbumId, ct))\n            return false;\n        _context.Album.Update(album);\n\n        _context.Update(album);\n        await _context.SaveChangesAsync(ct);\n        return true;\n    }\n\n    public async Task<bool> DeleteAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        if (!await AlbumExists(id, ct))\n \t     return false;\n        var toRemove = _context.Album.Find(id);\n        _context.Album.Remove(toRemove);\n        await _context.SaveChangesAsync(ct);\n        return true;\n    }\n\n    public async Task<List<Album>> GetByArtistIdAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.Where(a => a.ArtistId == id).ToListAsync(ct);\n    }\n}\n```\n\n##### API层\n这一层包含Web API端点逻辑的代码，包括控制器。这个解决方案的API项目将有一个单独的职责，那就是处理web服务器接收到的HTTP请求并返回HTTP响应，无论成功还是失败。在这个项目中，将会有非常少的业务逻辑。我们将处理在领域或数据项目中发生的异常和错误，以有效地与API的使用者进行通信。此通信将使用HTTP响应代码和在HTTP响应报文中返回的任何数据。\n```cs\n[Route(\"api/[controller]\")]\npublic class AlbumController : Controller\n{\n    private readonly ISupervisor _Supervisor;\n\n    public AlbumController(ISupervisor Supervisor)\n    {\n        _Supervisor = Supervisor;\n    }\n\n    [HttpGet]\n    [Produces(typeof(List<AlbumViewModel>))]\n    public async Task<IActionResult> Get(CancellationToken ct = default(CancellationToken))\n    {\n        try\n        {\n            return new ObjectResult(await _Supervisor.GetAllAlbumAsync(ct));\n        }\n        catch (Exception ex)\n        {\n            return StatusCode(500, ex);\n        }\n    } \n\n    ...\n}\n```","source":"_posts/Asp-Net-Core-Web-API的先进架构.md","raw":"---\ntitle: Asp.Net Core Web API的先进架构\ndate: 2018-06-21 23:58:04\ncategories: .Net Core\ntags:\n - .Net Core\n - Web API\n---\n##### 架构分层\n端口和适配器模式(又称六角形架构)可以解决业务逻辑与其他依赖项(如数据访问或API框架)耦合过于紧密的问题。使用此模式将允许您的API解决方案具有清晰的边界、具有单一职责的良好命名的对象，最终使其更容易开发和维护。架构分为API层,Domain层和Data层\n<!--more-->\n##### Domain层\n领域层具有以下功能:\n* 定义将在整个解决方案中使用的实体对象。这些模型将表示数据层的数据模型（DataModel）\n* 定义视图模型（ViewModel），将由API层针对HTTP请求和响应作为单个对象或对象集来使用\n* 定义接口，我们的数据层可以通过这些接口实现数据访问逻辑\n* 实现将包含从API层调用的方法的Supervisor。每个方法都代表一个API调用，并将数据从注入的数据层转换为视图模型以返回\n示例如下\n```cs\n// Album.cs\npublic sealed class Album\n{\n    public int AlbumId { get; set; }\n    public string Title { get; set; }\n    public int ArtistId { get; set; }\n        \n    public ICollection<Track> Tracks { get; set; } = new HashSet<Track>();\n    public Artist Artist { get; set; }\n}\n// AlbumViewModel.cs\npublic class AlbumViewModel\n{\n    public int AlbumId { get; set; }\n    public string Title { get; set; }\n    public int ArtistId { get; set; }\n    public string ArtistName { get; set; }\n\n    public ArtistViewModel Artist { get; set; }\n    public IList<TrackViewModel> Tracks { get; set; }\n}\n// IAlbumRepository.cs\npublic interface IAlbumRepository : IDisposable\n{\n    Task<List<Album>> GetAllAsync(CancellationToken ct = default(CancellationToken));\n    Task<Album> GetByIdAsync(int id, CancellationToken ct = default(CancellationToken));\n    Task<List<Album>> GetByArtistIdAsync(int id, CancellationToken ct = default(CancellationToken));\n    Task<Album> AddAsync(Album newAlbum, CancellationToken ct = default(CancellationToken));\n    Task<bool> UpdateAsync(Album album, CancellationToken ct = default(CancellationToken));\n    Task<bool> DeleteAsync(int id, CancellationToken ct = default(CancellationToken));\n}\n// Supervisor.cs\npublic async Task<AlbumViewModel> GetAlbumByIdAsync(int id, CancellationToken ct = default(CancellationToken))\n{\n    var albumViewModel = AlbumCoverter.Convert(await _albumRepository.GetByIdAsync(id, ct));\n    albumViewModel.Artist = await GetArtistByIdAsync(albumViewModel.ArtistId, ct);\n    albumViewModel.Tracks = await GetTrackByAlbumIdAsync(albumViewModel.AlbumId, ct);\n    albumViewModel.ArtistName = albumViewModel.Artist.Name;\n    return albumViewModel;\n}\n\n```\n\n##### Data层\n数据层的关键是使用领域层中开发的接口实现每个实体存储库。以领域层的专辑存储库为例，它就是实现了IAlbumRepository接口。每个存储库都将注入DBContext，允许使用实体框架核心访问SQL数据库\n```cs\npublic class AlbumRepository : IAlbumRepository\n{\n    private readonly ChinookContext _context;\n\n    public AlbumRepository(ChinookContext context)\n    {\n        _context = context;\n    }\n\n    private async Task<bool> AlbumExists(int id, CancellationToken ct = default(CancellationToken))\n    {\nreturn await GetByIdAsync(id, ct) != null;\n    }\n\n    public void Dispose()\n    {\n        _context.Dispose();\n    }\n\n    public async Task<List<Album>> GetAllAsync(CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.ToListAsync(ct);\n    }\n\n    public async Task<Album> GetByIdAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.FindAsync(id);\n    }\n\n    public async Task<Album> AddAsync(Album newAlbum, CancellationToken ct = default(CancellationToken))\n    {\n        _context.Album.Add(newAlbum);\n        await _context.SaveChangesAsync(ct);\n        return newAlbum;\n    }\n\n    public async Task<bool> UpdateAsync(Album album, CancellationToken ct = default(CancellationToken))\n    {\n        if (!await AlbumExists(album.AlbumId, ct))\n            return false;\n        _context.Album.Update(album);\n\n        _context.Update(album);\n        await _context.SaveChangesAsync(ct);\n        return true;\n    }\n\n    public async Task<bool> DeleteAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        if (!await AlbumExists(id, ct))\n \t     return false;\n        var toRemove = _context.Album.Find(id);\n        _context.Album.Remove(toRemove);\n        await _context.SaveChangesAsync(ct);\n        return true;\n    }\n\n    public async Task<List<Album>> GetByArtistIdAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.Where(a => a.ArtistId == id).ToListAsync(ct);\n    }\n}\n```\n\n##### API层\n这一层包含Web API端点逻辑的代码，包括控制器。这个解决方案的API项目将有一个单独的职责，那就是处理web服务器接收到的HTTP请求并返回HTTP响应，无论成功还是失败。在这个项目中，将会有非常少的业务逻辑。我们将处理在领域或数据项目中发生的异常和错误，以有效地与API的使用者进行通信。此通信将使用HTTP响应代码和在HTTP响应报文中返回的任何数据。\n```cs\n[Route(\"api/[controller]\")]\npublic class AlbumController : Controller\n{\n    private readonly ISupervisor _Supervisor;\n\n    public AlbumController(ISupervisor Supervisor)\n    {\n        _Supervisor = Supervisor;\n    }\n\n    [HttpGet]\n    [Produces(typeof(List<AlbumViewModel>))]\n    public async Task<IActionResult> Get(CancellationToken ct = default(CancellationToken))\n    {\n        try\n        {\n            return new ObjectResult(await _Supervisor.GetAllAlbumAsync(ct));\n        }\n        catch (Exception ex)\n        {\n            return StatusCode(500, ex);\n        }\n    } \n\n    ...\n}\n```","slug":"Asp-Net-Core-Web-API的先进架构","published":1,"updated":"2021-03-30T03:24:16.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwz5000cvcua0q58ca9h","content":"<h5 id=\"架构分层\"><a href=\"#架构分层\" class=\"headerlink\" title=\"架构分层\"></a>架构分层</h5><p>端口和适配器模式(又称六角形架构)可以解决业务逻辑与其他依赖项(如数据访问或API框架)耦合过于紧密的问题。使用此模式将允许您的API解决方案具有清晰的边界、具有单一职责的良好命名的对象，最终使其更容易开发和维护。架构分为API层,Domain层和Data层</p>\n<span id=\"more\"></span>\n<h5 id=\"Domain层\"><a href=\"#Domain层\" class=\"headerlink\" title=\"Domain层\"></a>Domain层</h5><p>领域层具有以下功能:</p>\n<ul>\n<li>定义将在整个解决方案中使用的实体对象。这些模型将表示数据层的数据模型（DataModel）</li>\n<li>定义视图模型（ViewModel），将由API层针对HTTP请求和响应作为单个对象或对象集来使用</li>\n<li>定义接口，我们的数据层可以通过这些接口实现数据访问逻辑</li>\n<li>实现将包含从API层调用的方法的Supervisor。每个方法都代表一个API调用，并将数据从注入的数据层转换为视图模型以返回<br>示例如下<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Album.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Album</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> AlbumId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ArtistId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ICollection</span>&lt;<span class=\"title\">Track</span>&gt; Tracks</span> &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"keyword\">new</span> HashSet&lt;Track&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Artist Artist &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// AlbumViewModel.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumViewModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> AlbumId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ArtistId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ArtistName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArtistViewModel Artist &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IList&lt;TrackViewModel&gt; Tracks &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// IAlbumRepository.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IAlbumRepository</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Task&lt;List&lt;Album&gt;&gt; GetAllAsync(CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken));</span><br><span class=\"line\">    <span class=\"function\">Task&lt;Album&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    Task&lt;List&lt;Album&gt;&gt; GetByArtistIdAsync(<span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken));</span><br><span class=\"line\">    <span class=\"function\">Task&lt;Album&gt; <span class=\"title\">AddAsync</span>(<span class=\"params\">Album newAlbum, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    <span class=\"function\">Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">UpdateAsync</span>(<span class=\"params\">Album album, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    <span class=\"function\">Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">DeleteAsync</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Supervisor.cs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;AlbumViewModel&gt; <span class=\"title\">GetAlbumByIdAsync</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> albumViewModel = AlbumCoverter.Convert(<span class=\"keyword\">await</span> _albumRepository.GetByIdAsync(id, ct));</span><br><span class=\"line\">    albumViewModel.Artist = <span class=\"keyword\">await</span> GetArtistByIdAsync(albumViewModel.ArtistId, ct);</span><br><span class=\"line\">    albumViewModel.Tracks = <span class=\"keyword\">await</span> GetTrackByAlbumIdAsync(albumViewModel.AlbumId, ct);</span><br><span class=\"line\">    albumViewModel.ArtistName = albumViewModel.Artist.Name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> albumViewModel;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"Data层\"><a href=\"#Data层\" class=\"headerlink\" title=\"Data层\"></a>Data层</h5><p>数据层的关键是使用领域层中开发的接口实现每个实体存储库。以领域层的专辑存储库为例，它就是实现了IAlbumRepository接口。每个存储库都将注入DBContext，允许使用实体框架核心访问SQL数据库</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumRepository</span> : <span class=\"title\">IAlbumRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ChinookContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumRepository</span>(<span class=\"params\">ChinookContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">AlbumExists</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">await</span> GetByIdAsync(id, ct) != <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;List&lt;Album&gt;&gt; GetAllAsync(CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;Album&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.FindAsync(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;Album&gt; <span class=\"title\">AddAsync</span>(<span class=\"params\">Album newAlbum, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Album.Add(newAlbum);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newAlbum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">UpdateAsync</span>(<span class=\"params\">Album album, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">await</span> AlbumExists(album.AlbumId, ct))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        _context.Album.Update(album);</span><br><span class=\"line\"></span><br><span class=\"line\">        _context.Update(album);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">DeleteAsync</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">await</span> AlbumExists(id, ct))</span><br><span class=\"line\"> \t     <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> toRemove = _context.Album.Find(id);</span><br><span class=\"line\">        _context.Album.Remove(toRemove);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;List&lt;Album&gt;&gt; GetByArtistIdAsync(<span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.Where(a =&gt; a.ArtistId == id).ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"API层\"><a href=\"#API层\" class=\"headerlink\" title=\"API层\"></a>API层</h5><p>这一层包含Web API端点逻辑的代码，包括控制器。这个解决方案的API项目将有一个单独的职责，那就是处理web服务器接收到的HTTP请求并返回HTTP响应，无论成功还是失败。在这个项目中，将会有非常少的业务逻辑。我们将处理在领域或数据项目中发生的异常和错误，以有效地与API的使用者进行通信。此通信将使用HTTP响应代码和在HTTP响应报文中返回的任何数据。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"meta-string\">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISupervisor _Supervisor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumController</span>(<span class=\"params\">ISupervisor Supervisor</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _Supervisor = Supervisor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    [<span class=\"meta\">Produces(typeof(List&lt;AlbumViewModel&gt;))</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">Get</span>(<span class=\"params\">CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ObjectResult(<span class=\"keyword\">await</span> _Supervisor.GetAllAlbumAsync(ct));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> StatusCode(<span class=\"number\">500</span>, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":4546,"excerpt":"<h5 id=\"架构分层\"><a href=\"#架构分层\" class=\"headerlink\" title=\"架构分层\"></a>架构分层</h5><p>端口和适配器模式(又称六角形架构)可以解决业务逻辑与其他依赖项(如数据访问或API框架)耦合过于紧密的问题。使用此模式将允许您的API解决方案具有清晰的边界、具有单一职责的良好命名的对象，最终使其更容易开发和维护。架构分为API层,Domain层和Data层</p>","more":"<h5 id=\"Domain层\"><a href=\"#Domain层\" class=\"headerlink\" title=\"Domain层\"></a>Domain层</h5><p>领域层具有以下功能:</p>\n<ul>\n<li>定义将在整个解决方案中使用的实体对象。这些模型将表示数据层的数据模型（DataModel）</li>\n<li>定义视图模型（ViewModel），将由API层针对HTTP请求和响应作为单个对象或对象集来使用</li>\n<li>定义接口，我们的数据层可以通过这些接口实现数据访问逻辑</li>\n<li>实现将包含从API层调用的方法的Supervisor。每个方法都代表一个API调用，并将数据从注入的数据层转换为视图模型以返回<br>示例如下<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Album.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Album</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> AlbumId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ArtistId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ICollection</span>&lt;<span class=\"title\">Track</span>&gt; Tracks</span> &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"keyword\">new</span> HashSet&lt;Track&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Artist Artist &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// AlbumViewModel.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumViewModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> AlbumId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ArtistId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ArtistName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArtistViewModel Artist &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IList&lt;TrackViewModel&gt; Tracks &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// IAlbumRepository.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IAlbumRepository</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Task&lt;List&lt;Album&gt;&gt; GetAllAsync(CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken));</span><br><span class=\"line\">    <span class=\"function\">Task&lt;Album&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    Task&lt;List&lt;Album&gt;&gt; GetByArtistIdAsync(<span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken));</span><br><span class=\"line\">    <span class=\"function\">Task&lt;Album&gt; <span class=\"title\">AddAsync</span>(<span class=\"params\">Album newAlbum, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    <span class=\"function\">Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">UpdateAsync</span>(<span class=\"params\">Album album, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    <span class=\"function\">Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">DeleteAsync</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Supervisor.cs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;AlbumViewModel&gt; <span class=\"title\">GetAlbumByIdAsync</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> albumViewModel = AlbumCoverter.Convert(<span class=\"keyword\">await</span> _albumRepository.GetByIdAsync(id, ct));</span><br><span class=\"line\">    albumViewModel.Artist = <span class=\"keyword\">await</span> GetArtistByIdAsync(albumViewModel.ArtistId, ct);</span><br><span class=\"line\">    albumViewModel.Tracks = <span class=\"keyword\">await</span> GetTrackByAlbumIdAsync(albumViewModel.AlbumId, ct);</span><br><span class=\"line\">    albumViewModel.ArtistName = albumViewModel.Artist.Name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> albumViewModel;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"Data层\"><a href=\"#Data层\" class=\"headerlink\" title=\"Data层\"></a>Data层</h5><p>数据层的关键是使用领域层中开发的接口实现每个实体存储库。以领域层的专辑存储库为例，它就是实现了IAlbumRepository接口。每个存储库都将注入DBContext，允许使用实体框架核心访问SQL数据库</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumRepository</span> : <span class=\"title\">IAlbumRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ChinookContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumRepository</span>(<span class=\"params\">ChinookContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">AlbumExists</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">await</span> GetByIdAsync(id, ct) != <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;List&lt;Album&gt;&gt; GetAllAsync(CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;Album&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.FindAsync(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;Album&gt; <span class=\"title\">AddAsync</span>(<span class=\"params\">Album newAlbum, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Album.Add(newAlbum);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newAlbum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">UpdateAsync</span>(<span class=\"params\">Album album, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">await</span> AlbumExists(album.AlbumId, ct))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        _context.Album.Update(album);</span><br><span class=\"line\"></span><br><span class=\"line\">        _context.Update(album);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">DeleteAsync</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">await</span> AlbumExists(id, ct))</span><br><span class=\"line\"> \t     <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> toRemove = _context.Album.Find(id);</span><br><span class=\"line\">        _context.Album.Remove(toRemove);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;List&lt;Album&gt;&gt; GetByArtistIdAsync(<span class=\"built_in\">int</span> id, CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.Where(a =&gt; a.ArtistId == id).ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"API层\"><a href=\"#API层\" class=\"headerlink\" title=\"API层\"></a>API层</h5><p>这一层包含Web API端点逻辑的代码，包括控制器。这个解决方案的API项目将有一个单独的职责，那就是处理web服务器接收到的HTTP请求并返回HTTP响应，无论成功还是失败。在这个项目中，将会有非常少的业务逻辑。我们将处理在领域或数据项目中发生的异常和错误，以有效地与API的使用者进行通信。此通信将使用HTTP响应代码和在HTTP响应报文中返回的任何数据。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"meta-string\">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISupervisor _Supervisor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumController</span>(<span class=\"params\">ISupervisor Supervisor</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _Supervisor = Supervisor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    [<span class=\"meta\">Produces(typeof(List&lt;AlbumViewModel&gt;))</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">Get</span>(<span class=\"params\">CancellationToken ct = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ObjectResult(<span class=\"keyword\">await</span> _Supervisor.GetAllAlbumAsync(ct));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> StatusCode(<span class=\"number\">500</span>, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Asp.Net Core WebSocket","date":"2018-03-20T13:26:28.000Z","_content":"##### WebSocket是什么\nWebSocket 是一种在单个TCP连接上进行全双工通讯的协议,是建立在TCP上,且独立的协议.在WebSocket API中,浏览器和服务器只需要完成一次握手,两者之间就可以进行持久性的连接,并进行双向数据传输.\n为了建立WebSocket连接,浏览器通过Http1.1协议的101StatusCode进行握手\n<!--more-->\n##### 在Asp.Net Core中使用WebSocket\n```cs\n// Configure function\n/// Summary\n//这里主要是监听WebSocket的请求,然后Invoke Echo 方法进行相关操作.比如,它接收到浏览器请求发来WebSocket的Close命令了.那么在Echo方法直接进行相关的操作\n/// Summary\napp.Use(async (context, next) => \n{\n    if(context.Request.Path == \"/ws\")\n    {\n        if(context.WebSockets.IsWebSocketRequest)\n        {\n            WebSocket webSocket = await context.WebSockets.AcceptAsync();\n            await Echo(context, WebSocket);\n        }\n        else\n        {\n            context.Response.StatusCode = 400;\n        }\n    }\n});\n\n// Echo function\nprivate async Task Echo(HttpContext context, WebSocket webSocket)\n{\n    var buffer = new byte[1024 * 4];\n\n    WebSocketReceiveResult result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n    while(!result.CloseStatus.HasValue)\n    {\n        await webSocket.SendAsync(new ArraySegment<byte>(buffer, 0, result.Count), result.MessageType, result.EndOfMessage, CancellationToken.None);\n\n        result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n    }\n    await webSocket.CloseAsync(result.CloseStatus.Value, result.CloseStatusDescription, CancellationTaken.None);\n}\n\n// 修改Echo方法中Send方法的buffer修改,设定想要的回馈\nvar abuffer = Encoding.ASCII.GetBytes(\"Hola, This is robert from cnblogs\");\nawait webSocket.SendAsync(new ArraySegment<byte>(abuffer, 0, abuffer.Length), result.MessageType, result.EndOfMessage, CancellationToken.None);\nresult = await webSocket.ReceiveAsync(new ArraySegment<byte>(abuffer), CancellationToken.None);\n```\n","source":"_posts/Asp-Net-Core-WebSocket.md","raw":"---\ntitle: Asp.Net Core WebSocket\ndate: 2018-03-20 21:26:28\ncategories: .Net Core\ntags:\n - .Net Core\n - WebSocket\n---\n##### WebSocket是什么\nWebSocket 是一种在单个TCP连接上进行全双工通讯的协议,是建立在TCP上,且独立的协议.在WebSocket API中,浏览器和服务器只需要完成一次握手,两者之间就可以进行持久性的连接,并进行双向数据传输.\n为了建立WebSocket连接,浏览器通过Http1.1协议的101StatusCode进行握手\n<!--more-->\n##### 在Asp.Net Core中使用WebSocket\n```cs\n// Configure function\n/// Summary\n//这里主要是监听WebSocket的请求,然后Invoke Echo 方法进行相关操作.比如,它接收到浏览器请求发来WebSocket的Close命令了.那么在Echo方法直接进行相关的操作\n/// Summary\napp.Use(async (context, next) => \n{\n    if(context.Request.Path == \"/ws\")\n    {\n        if(context.WebSockets.IsWebSocketRequest)\n        {\n            WebSocket webSocket = await context.WebSockets.AcceptAsync();\n            await Echo(context, WebSocket);\n        }\n        else\n        {\n            context.Response.StatusCode = 400;\n        }\n    }\n});\n\n// Echo function\nprivate async Task Echo(HttpContext context, WebSocket webSocket)\n{\n    var buffer = new byte[1024 * 4];\n\n    WebSocketReceiveResult result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n    while(!result.CloseStatus.HasValue)\n    {\n        await webSocket.SendAsync(new ArraySegment<byte>(buffer, 0, result.Count), result.MessageType, result.EndOfMessage, CancellationToken.None);\n\n        result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n    }\n    await webSocket.CloseAsync(result.CloseStatus.Value, result.CloseStatusDescription, CancellationTaken.None);\n}\n\n// 修改Echo方法中Send方法的buffer修改,设定想要的回馈\nvar abuffer = Encoding.ASCII.GetBytes(\"Hola, This is robert from cnblogs\");\nawait webSocket.SendAsync(new ArraySegment<byte>(abuffer, 0, abuffer.Length), result.MessageType, result.EndOfMessage, CancellationToken.None);\nresult = await webSocket.ReceiveAsync(new ArraySegment<byte>(abuffer), CancellationToken.None);\n```\n","slug":"Asp-Net-Core-WebSocket","published":1,"updated":"2021-03-30T03:24:16.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwz6000dvcuag8gygu6q","content":"<h5 id=\"WebSocket是什么\"><a href=\"#WebSocket是什么\" class=\"headerlink\" title=\"WebSocket是什么\"></a>WebSocket是什么</h5><p>WebSocket 是一种在单个TCP连接上进行全双工通讯的协议,是建立在TCP上,且独立的协议.在WebSocket API中,浏览器和服务器只需要完成一次握手,两者之间就可以进行持久性的连接,并进行双向数据传输.<br>为了建立WebSocket连接,浏览器通过Http1.1协议的101StatusCode进行握手</p>\n<span id=\"more\"></span>\n<h5 id=\"在Asp-Net-Core中使用WebSocket\"><a href=\"#在Asp-Net-Core中使用WebSocket\" class=\"headerlink\" title=\"在Asp.Net Core中使用WebSocket\"></a>在Asp.Net Core中使用WebSocket</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Configure function</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Summary</span></span><br><span class=\"line\"><span class=\"comment\">//这里主要是监听WebSocket的请求,然后Invoke Echo 方法进行相关操作.比如,它接收到浏览器请求发来WebSocket的Close命令了.那么在Echo方法直接进行相关的操作</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Summary</span></span><br><span class=\"line\">app.Use(<span class=\"keyword\">async</span> (context, next) =&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(context.Request.Path == <span class=\"string\">&quot;/ws&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(context.WebSockets.IsWebSocketRequest)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            WebSocket webSocket = <span class=\"keyword\">await</span> context.WebSockets.AcceptAsync();</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Echo(context, WebSocket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Response.StatusCode = <span class=\"number\">400</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Echo function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Echo</span>(<span class=\"params\">HttpContext context, WebSocket webSocket</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    WebSocketReceiveResult result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"built_in\">byte</span>&gt;(buffer), CancellationToken.None);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!result.CloseStatus.HasValue)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> webSocket.SendAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"built_in\">byte</span>&gt;(buffer, <span class=\"number\">0</span>, result.Count), result.MessageType, result.EndOfMessage, CancellationToken.None);</span><br><span class=\"line\"></span><br><span class=\"line\">        result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"built_in\">byte</span>&gt;(buffer), CancellationToken.None);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> webSocket.CloseAsync(result.CloseStatus.Value, result.CloseStatusDescription, CancellationTaken.None);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改Echo方法中Send方法的buffer修改,设定想要的回馈</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> abuffer = Encoding.ASCII.GetBytes(<span class=\"string\">&quot;Hola, This is robert from cnblogs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">await</span> webSocket.SendAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"built_in\">byte</span>&gt;(abuffer, <span class=\"number\">0</span>, abuffer.Length), result.MessageType, result.EndOfMessage, CancellationToken.None);</span><br><span class=\"line\">result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"built_in\">byte</span>&gt;(abuffer), CancellationToken.None);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":1641,"excerpt":"<h5 id=\"WebSocket是什么\"><a href=\"#WebSocket是什么\" class=\"headerlink\" title=\"WebSocket是什么\"></a>WebSocket是什么</h5><p>WebSocket 是一种在单个TCP连接上进行全双工通讯的协议,是建立在TCP上,且独立的协议.在WebSocket API中,浏览器和服务器只需要完成一次握手,两者之间就可以进行持久性的连接,并进行双向数据传输.<br>为了建立WebSocket连接,浏览器通过Http1.1协议的101StatusCode进行握手</p>","more":"<h5 id=\"在Asp-Net-Core中使用WebSocket\"><a href=\"#在Asp-Net-Core中使用WebSocket\" class=\"headerlink\" title=\"在Asp.Net Core中使用WebSocket\"></a>在Asp.Net Core中使用WebSocket</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Configure function</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Summary</span></span><br><span class=\"line\"><span class=\"comment\">//这里主要是监听WebSocket的请求,然后Invoke Echo 方法进行相关操作.比如,它接收到浏览器请求发来WebSocket的Close命令了.那么在Echo方法直接进行相关的操作</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Summary</span></span><br><span class=\"line\">app.Use(<span class=\"keyword\">async</span> (context, next) =&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(context.Request.Path == <span class=\"string\">&quot;/ws&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(context.WebSockets.IsWebSocketRequest)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            WebSocket webSocket = <span class=\"keyword\">await</span> context.WebSockets.AcceptAsync();</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Echo(context, WebSocket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Response.StatusCode = <span class=\"number\">400</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Echo function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Echo</span>(<span class=\"params\">HttpContext context, WebSocket webSocket</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    WebSocketReceiveResult result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"built_in\">byte</span>&gt;(buffer), CancellationToken.None);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!result.CloseStatus.HasValue)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> webSocket.SendAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"built_in\">byte</span>&gt;(buffer, <span class=\"number\">0</span>, result.Count), result.MessageType, result.EndOfMessage, CancellationToken.None);</span><br><span class=\"line\"></span><br><span class=\"line\">        result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"built_in\">byte</span>&gt;(buffer), CancellationToken.None);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> webSocket.CloseAsync(result.CloseStatus.Value, result.CloseStatusDescription, CancellationTaken.None);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改Echo方法中Send方法的buffer修改,设定想要的回馈</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> abuffer = Encoding.ASCII.GetBytes(<span class=\"string\">&quot;Hola, This is robert from cnblogs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">await</span> webSocket.SendAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"built_in\">byte</span>&gt;(abuffer, <span class=\"number\">0</span>, abuffer.Length), result.MessageType, result.EndOfMessage, CancellationToken.None);</span><br><span class=\"line\">result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"built_in\">byte</span>&gt;(abuffer), CancellationToken.None);</span><br></pre></td></tr></table></figure>"},{"title":"Asp.Net Core 中间件","date":"2019-06-25T15:39:29.000Z","_content":"#### 定义\n\n.Net Core 里面的中间件串联在一起组成了管道,所有的 Request 及 Response都会经过管道.\n<!--more-->\n#### 建立中间件\n\n*FirstMiddleware.cs*\n\n```cs\npublic class TestMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public TestMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        await context.Response.WriteAsync($\"TestMiddleware 进入. \\r\\n\");\n\n        await _next(context);\n\n        await context.Response.WriteAsync($\"TestMiddleware 退出. \\r\\n\");\n    }\n}\n```\n\n#### 全局注册\n\n在Startup.Configue中注册,则全部的Request都会通过该中间件.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseMiddleware<TestMiddleware>();\n    }\n}\n```\n\n#### 区域注册\n\n中间件也可以仅在特定的控制器和请求上注册.\n\n*ValueController.cs*\n\n```cs\n[MiddlewareFilter(typeof(TestMiddleware))]\npublic class ValueController : Controller\n{\n    [MiddlewareFilter(typeof(TestMiddleware))]\n    public IActionResult Index()\n    {\n        // ...\n    }\n}\n```\n\n#### 扩展方法注册\n\n大部分的中间件都会用一个静态方法来进行注册.\n\n*CustomMiddlewareExtensions.cs*\n\n```cs\npublic static class CustomMiddlewareExtensions\n{\n    public static IApplicationBuilder UseTestMiddleware(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<TestMiddleware>();\n    }\n}\n```\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseTestMiddleware();\n    }\n}\n```\n","source":"_posts/Asp-Net-Core-中间件.md","raw":"---\ntitle: Asp.Net Core 中间件\ndate: 2019-06-25 23:39:29\ncategories: .Net Core\ntags:\n - .Net Core\n - Middleware\n---\n#### 定义\n\n.Net Core 里面的中间件串联在一起组成了管道,所有的 Request 及 Response都会经过管道.\n<!--more-->\n#### 建立中间件\n\n*FirstMiddleware.cs*\n\n```cs\npublic class TestMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public TestMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        await context.Response.WriteAsync($\"TestMiddleware 进入. \\r\\n\");\n\n        await _next(context);\n\n        await context.Response.WriteAsync($\"TestMiddleware 退出. \\r\\n\");\n    }\n}\n```\n\n#### 全局注册\n\n在Startup.Configue中注册,则全部的Request都会通过该中间件.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseMiddleware<TestMiddleware>();\n    }\n}\n```\n\n#### 区域注册\n\n中间件也可以仅在特定的控制器和请求上注册.\n\n*ValueController.cs*\n\n```cs\n[MiddlewareFilter(typeof(TestMiddleware))]\npublic class ValueController : Controller\n{\n    [MiddlewareFilter(typeof(TestMiddleware))]\n    public IActionResult Index()\n    {\n        // ...\n    }\n}\n```\n\n#### 扩展方法注册\n\n大部分的中间件都会用一个静态方法来进行注册.\n\n*CustomMiddlewareExtensions.cs*\n\n```cs\npublic static class CustomMiddlewareExtensions\n{\n    public static IApplicationBuilder UseTestMiddleware(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<TestMiddleware>();\n    }\n}\n```\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseTestMiddleware();\n    }\n}\n```\n","slug":"Asp-Net-Core-中间件","published":1,"updated":"2021-03-30T03:24:16.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwz8000hvcuaevmuglt8","content":"<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>.Net Core 里面的中间件串联在一起组成了管道,所有的 Request 及 Response都会经过管道.</p>\n<span id=\"more\"></span>\n<h4 id=\"建立中间件\"><a href=\"#建立中间件\" class=\"headerlink\" title=\"建立中间件\"></a>建立中间件</h4><p><em>FirstMiddleware.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$&quot;TestMiddleware 进入. \\r\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _next(context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$&quot;TestMiddleware 退出. \\r\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h4><p>在Startup.Configue中注册,则全部的Request都会通过该中间件.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseMiddleware&lt;TestMiddleware&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区域注册\"><a href=\"#区域注册\" class=\"headerlink\" title=\"区域注册\"></a>区域注册</h4><p>中间件也可以仅在特定的控制器和请求上注册.</p>\n<p><em>ValueController.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">MiddlewareFilter(typeof(TestMiddleware))</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValueController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">MiddlewareFilter(typeof(TestMiddleware))</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展方法注册\"><a href=\"#扩展方法注册\" class=\"headerlink\" title=\"扩展方法注册\"></a>扩展方法注册</h4><p>大部分的中间件都会用一个静态方法来进行注册.</p>\n<p><em>CustomMiddlewareExtensions.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomMiddlewareExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">UseTestMiddleware</span>(<span class=\"params\"><span class=\"keyword\">this</span> IApplicationBuilder builder</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.UseMiddleware&lt;TestMiddleware&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseTestMiddleware();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":1257,"excerpt":"<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>.Net Core 里面的中间件串联在一起组成了管道,所有的 Request 及 Response都会经过管道.</p>","more":"<h4 id=\"建立中间件\"><a href=\"#建立中间件\" class=\"headerlink\" title=\"建立中间件\"></a>建立中间件</h4><p><em>FirstMiddleware.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$&quot;TestMiddleware 进入. \\r\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _next(context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$&quot;TestMiddleware 退出. \\r\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h4><p>在Startup.Configue中注册,则全部的Request都会通过该中间件.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseMiddleware&lt;TestMiddleware&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区域注册\"><a href=\"#区域注册\" class=\"headerlink\" title=\"区域注册\"></a>区域注册</h4><p>中间件也可以仅在特定的控制器和请求上注册.</p>\n<p><em>ValueController.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">MiddlewareFilter(typeof(TestMiddleware))</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValueController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">MiddlewareFilter(typeof(TestMiddleware))</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展方法注册\"><a href=\"#扩展方法注册\" class=\"headerlink\" title=\"扩展方法注册\"></a>扩展方法注册</h4><p>大部分的中间件都会用一个静态方法来进行注册.</p>\n<p><em>CustomMiddlewareExtensions.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomMiddlewareExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">UseTestMiddleware</span>(<span class=\"params\"><span class=\"keyword\">this</span> IApplicationBuilder builder</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.UseMiddleware&lt;TestMiddleware&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseTestMiddleware();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Asp.Net Core 压缩封包","date":"2019-08-10T07:04:49.000Z","_content":"#### 简介\n\nAsp.Net Core 不会自动把所有封包进行压缩,要对Response的内容进行压缩,可以使用ResponseCompression套件提供的压缩方式\n<!--more-->\n\n#### 启用封包压缩\n\n在Startup.ConfigureServices 加入封包压缩的服务以及Startup.Configure 注册封包压缩的中间件.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression();\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseResponseCompression();\n        app.UseStaticFiles();\n        app.UseMvcWithDefaultRoute();\n    }\n}\n```\n\n> ps:默认的压缩方式是Gzip\n\n#### ResponseCompressionOptions\n\n可以通过ResponseCompressionOptions调整要被压缩的MimeTypes以及压缩的方法等.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression(options =>\n        {\n            options.EnableForHttps = true;\n            options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(new[]\n            {\n                \"image/png\"\n            });\n        });\n        services.Configure<GzipCompressionProviderOptions>(options =>\n        {\n            options.Level = System.IO.Compression.CompressionLevel.Optimal;\n        });\n        services.AddMvc();\n    }\n}\n```\n\n* EnableForHttps\n\n  是否要对Https的封包进行压缩.默认为false\n\n* MimeType\n\n  设置要进行压缩的MimeTypes.默认的有text/plain, text/css, application/javascript, text/html, application/xml, text/xml, application/json, text/json.\n\n* GzipCompressionProviderOptions\n\n  设定Gzip的压缩方式,默认为CompressionLevelFastest 快速压缩.\n\n> 压缩的好处是Response的封包变小,节省流量,但会消耗Cpu效能\n\n##### 自定义压缩\n\n某些情况可能会需要自定义封包的压缩方式,例如Server to Server的Api对接,双方使用约定好的压缩方式.\n\n可以继承ICompressionProvider,实例化自定义的压缩方法.并通过HttpHeader的Accept-Encoding指定压缩方式.再将自定义的压缩方法加入到ResponseCompressionOptions.Providers.\n\n*CustomCompressionProvider.cs*\n\n```cs\npublic class CustomCompressionProvider:ICompressionProvider\n{\n    public string EncodingName => \"customcompression\";\n    public bool SupportsFlush => true;\n\n    public Stream CreateStream(Stream outputStream)\n    {\n        return outputStream;\n    }\n}\n```\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression(options =>\n        {\n            options.Providers.Add<CustomCompressionProvider>();\n        });\n        services.AddMvc();\n    }\n}\n```\n\n当Http Header的Accept-Encoding = customcompression 就会使用CustomCompressionProvider压缩封包.","source":"_posts/Asp-Net-Core-压缩封包.md","raw":"---\ntitle: Asp.Net Core 压缩封包\ndate: 2019-08-10 15:04:49\ncategories: .Net Core\ntags:\n - .Net Core\n - Gzip\n---\n#### 简介\n\nAsp.Net Core 不会自动把所有封包进行压缩,要对Response的内容进行压缩,可以使用ResponseCompression套件提供的压缩方式\n<!--more-->\n\n#### 启用封包压缩\n\n在Startup.ConfigureServices 加入封包压缩的服务以及Startup.Configure 注册封包压缩的中间件.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression();\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseResponseCompression();\n        app.UseStaticFiles();\n        app.UseMvcWithDefaultRoute();\n    }\n}\n```\n\n> ps:默认的压缩方式是Gzip\n\n#### ResponseCompressionOptions\n\n可以通过ResponseCompressionOptions调整要被压缩的MimeTypes以及压缩的方法等.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression(options =>\n        {\n            options.EnableForHttps = true;\n            options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(new[]\n            {\n                \"image/png\"\n            });\n        });\n        services.Configure<GzipCompressionProviderOptions>(options =>\n        {\n            options.Level = System.IO.Compression.CompressionLevel.Optimal;\n        });\n        services.AddMvc();\n    }\n}\n```\n\n* EnableForHttps\n\n  是否要对Https的封包进行压缩.默认为false\n\n* MimeType\n\n  设置要进行压缩的MimeTypes.默认的有text/plain, text/css, application/javascript, text/html, application/xml, text/xml, application/json, text/json.\n\n* GzipCompressionProviderOptions\n\n  设定Gzip的压缩方式,默认为CompressionLevelFastest 快速压缩.\n\n> 压缩的好处是Response的封包变小,节省流量,但会消耗Cpu效能\n\n##### 自定义压缩\n\n某些情况可能会需要自定义封包的压缩方式,例如Server to Server的Api对接,双方使用约定好的压缩方式.\n\n可以继承ICompressionProvider,实例化自定义的压缩方法.并通过HttpHeader的Accept-Encoding指定压缩方式.再将自定义的压缩方法加入到ResponseCompressionOptions.Providers.\n\n*CustomCompressionProvider.cs*\n\n```cs\npublic class CustomCompressionProvider:ICompressionProvider\n{\n    public string EncodingName => \"customcompression\";\n    public bool SupportsFlush => true;\n\n    public Stream CreateStream(Stream outputStream)\n    {\n        return outputStream;\n    }\n}\n```\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression(options =>\n        {\n            options.Providers.Add<CustomCompressionProvider>();\n        });\n        services.AddMvc();\n    }\n}\n```\n\n当Http Header的Accept-Encoding = customcompression 就会使用CustomCompressionProvider压缩封包.","slug":"Asp-Net-Core-压缩封包","published":1,"updated":"2021-03-30T03:24:16.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwz9000jvcua7wb1424c","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Asp.Net Core 不会自动把所有封包进行压缩,要对Response的内容进行压缩,可以使用ResponseCompression套件提供的压缩方式</p>\n<span id=\"more\"></span>\n\n<h4 id=\"启用封包压缩\"><a href=\"#启用封包压缩\" class=\"headerlink\" title=\"启用封包压缩\"></a>启用封包压缩</h4><p>在Startup.ConfigureServices 加入封包压缩的服务以及Startup.Configure 注册封包压缩的中间件.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddResponseCompression();</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseResponseCompression();</span><br><span class=\"line\">        app.UseStaticFiles();</span><br><span class=\"line\">        app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ps:默认的压缩方式是Gzip</p>\n</blockquote>\n<h4 id=\"ResponseCompressionOptions\"><a href=\"#ResponseCompressionOptions\" class=\"headerlink\" title=\"ResponseCompressionOptions\"></a>ResponseCompressionOptions</h4><p>可以通过ResponseCompressionOptions调整要被压缩的MimeTypes以及压缩的方法等.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddResponseCompression(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.EnableForHttps = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(<span class=\"keyword\">new</span>[]</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.Configure&lt;GzipCompressionProviderOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.Level = System.IO.Compression.CompressionLevel.Optimal;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>EnableForHttps</p>\n<p>是否要对Https的封包进行压缩.默认为false</p>\n</li>\n<li><p>MimeType</p>\n<p>设置要进行压缩的MimeTypes.默认的有text/plain, text/css, application/javascript, text/html, application/xml, text/xml, application/json, text/json.</p>\n</li>\n<li><p>GzipCompressionProviderOptions</p>\n<p>设定Gzip的压缩方式,默认为CompressionLevelFastest 快速压缩.</p>\n</li>\n</ul>\n<blockquote>\n<p>压缩的好处是Response的封包变小,节省流量,但会消耗Cpu效能</p>\n</blockquote>\n<h5 id=\"自定义压缩\"><a href=\"#自定义压缩\" class=\"headerlink\" title=\"自定义压缩\"></a>自定义压缩</h5><p>某些情况可能会需要自定义封包的压缩方式,例如Server to Server的Api对接,双方使用约定好的压缩方式.</p>\n<p>可以继承ICompressionProvider,实例化自定义的压缩方法.并通过HttpHeader的Accept-Encoding指定压缩方式.再将自定义的压缩方法加入到ResponseCompressionOptions.Providers.</p>\n<p><em>CustomCompressionProvider.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomCompressionProvider</span>:<span class=\"title\">ICompressionProvider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> EncodingName =&gt; <span class=\"string\">&quot;customcompression&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> SupportsFlush =&gt; <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Stream <span class=\"title\">CreateStream</span>(<span class=\"params\">Stream outputStream</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> outputStream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddResponseCompression(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.Providers.Add&lt;CustomCompressionProvider&gt;();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当Http Header的Accept-Encoding = customcompression 就会使用CustomCompressionProvider压缩封包.</p>\n","site":{"data":{}},"length":2117,"excerpt":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Asp.Net Core 不会自动把所有封包进行压缩,要对Response的内容进行压缩,可以使用ResponseCompression套件提供的压缩方式</p>","more":"<h4 id=\"启用封包压缩\"><a href=\"#启用封包压缩\" class=\"headerlink\" title=\"启用封包压缩\"></a>启用封包压缩</h4><p>在Startup.ConfigureServices 加入封包压缩的服务以及Startup.Configure 注册封包压缩的中间件.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddResponseCompression();</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseResponseCompression();</span><br><span class=\"line\">        app.UseStaticFiles();</span><br><span class=\"line\">        app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ps:默认的压缩方式是Gzip</p>\n</blockquote>\n<h4 id=\"ResponseCompressionOptions\"><a href=\"#ResponseCompressionOptions\" class=\"headerlink\" title=\"ResponseCompressionOptions\"></a>ResponseCompressionOptions</h4><p>可以通过ResponseCompressionOptions调整要被压缩的MimeTypes以及压缩的方法等.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddResponseCompression(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.EnableForHttps = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(<span class=\"keyword\">new</span>[]</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.Configure&lt;GzipCompressionProviderOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.Level = System.IO.Compression.CompressionLevel.Optimal;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>EnableForHttps</p>\n<p>是否要对Https的封包进行压缩.默认为false</p>\n</li>\n<li><p>MimeType</p>\n<p>设置要进行压缩的MimeTypes.默认的有text/plain, text/css, application/javascript, text/html, application/xml, text/xml, application/json, text/json.</p>\n</li>\n<li><p>GzipCompressionProviderOptions</p>\n<p>设定Gzip的压缩方式,默认为CompressionLevelFastest 快速压缩.</p>\n</li>\n</ul>\n<blockquote>\n<p>压缩的好处是Response的封包变小,节省流量,但会消耗Cpu效能</p>\n</blockquote>\n<h5 id=\"自定义压缩\"><a href=\"#自定义压缩\" class=\"headerlink\" title=\"自定义压缩\"></a>自定义压缩</h5><p>某些情况可能会需要自定义封包的压缩方式,例如Server to Server的Api对接,双方使用约定好的压缩方式.</p>\n<p>可以继承ICompressionProvider,实例化自定义的压缩方法.并通过HttpHeader的Accept-Encoding指定压缩方式.再将自定义的压缩方法加入到ResponseCompressionOptions.Providers.</p>\n<p><em>CustomCompressionProvider.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomCompressionProvider</span>:<span class=\"title\">ICompressionProvider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> EncodingName =&gt; <span class=\"string\">&quot;customcompression&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> SupportsFlush =&gt; <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Stream <span class=\"title\">CreateStream</span>(<span class=\"params\">Stream outputStream</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> outputStream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddResponseCompression(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.Providers.Add&lt;CustomCompressionProvider&gt;();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当Http Header的Accept-Encoding = customcompression 就会使用CustomCompressionProvider压缩封包.</p>"},{"title":"Asp.Net Core 异常处理","date":"2019-07-13T14:34:02.000Z","_content":"异常处理在程序开发中也是一个比较重要的事,一方面可以避免暴露不该暴露的东西,另一方面也在出现问题时,可以及时的定位到异常发生的位置.\n<!--more-->\n\n#### Exception Filter\n\nException Filter 只能够捕捉到Action和Action Filter 所发出的Exception.其他类型的Filter或Middleware产生的Exception,无法通过Exception Filter 拦截.并不太适合用来做全站通用的Exception Handler.\n\n*ExceptionFilter.cs*\n\n```cs\npublic class ExceptionFilter : IAsyncExceptionFilter\n{\n    public Task OnExceptionAsync(ExceptionContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name 出现异常,异常信息:{context.Exception.Message}}\");\n        return Task.CompletedTask;\n    }\n}\n```\n\n*Starpup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config => \n        {\n            config.Filters.Add(new ExceptionFilter());\n        });\n    }\n}\n```\n\n> PS:如果只是注册了一个Exception Filter,那么Filter注册的前后顺序并不重要.只有同类型的Filter才会关系到注册的先后顺序.\n\n#### Exception Middleware\n\nMiddleware 注册的层级可以在Filter的外层,也就是全部的Filter都会经过Middleware.那么只需要在Exception Middleware注册在所有Middleware的最外层,就可以捕捉到全站的异常.\n\n*ExceptionMiddleware.cs*\n\n```cs\npublic class ExceptionMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public ExceptionMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            await context.Response.WriteAsync($\"{GetType().Name} 出现异常,异常消息:{ex.Message}\");\n        }\n    }\n}\n```\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseMiddleware<ExceptionMiddleware>();\n    }\n}\n```\n\n> PS:Middleware的注册顺序很关键,越先注册会在越外层.ExceptionMiddleware注册在越外层,捕捉的范围就越大.\n\n#### Exception Handler\n\nAsp.Net Core有提供Exception Handler 的管道,可以直接调用UseExceptionHandler指定错误页面.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseExceptionHandler(\"/error\")\n    }\n}\n```\n\nExceptionHandlerOptions\n\nUseExceptionHandler 除了可以指派错误页面外,也可以自己实现错误发生触发的事件.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseExceptionHandler(new ExceptionHandlerOptions()\n        {\n            ExceptionHandler = async context =>\n            {\n                bool isApi = Regex.IsMatch(context.Request.Path.Value,\"^/api/\",RegexOptions.IgnoreCase);\n                if(isApi)\n                {\n                    context.Response.ContentType = \"application/json\";\n                    var json = @\"{ \"\"Message\"\":\"\"Internal Server Error\"\"}\";\n                    await context.Response.WriteAsync(json);\n                    return;\n                }\n                context.Response.Redirect(\"/error\");\n            }\n        });\n    }\n}\n```\n\n上面特別对 API 的错误进行了处理，当请求 `http://localhost:5000/api/*` 发生错误时，会回传 JSON 格式的错误。而且把 请求MVC发生的错误 ，改用转址的方式转到 `http://localhost:5000/error`\n\n#### UseDeveloperExceptionPage\n\nUseDeveloperExceptionPage 是Asp.Net Core提供的错误信息页面服务.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n    {\n        // 在开发阶段调用Asp.Net Core提供的错误信息页面\n        if(env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/error\");\n        }\n    }\n}\n```\n","source":"_posts/Asp-Net-Core-异常处理.md","raw":"---\ntitle: Asp.Net Core 异常处理\ndate: 2019-07-13 22:34:02\ncategories: .Net Core\ntags:\n - .Net Core\n - Exception\n---\n异常处理在程序开发中也是一个比较重要的事,一方面可以避免暴露不该暴露的东西,另一方面也在出现问题时,可以及时的定位到异常发生的位置.\n<!--more-->\n\n#### Exception Filter\n\nException Filter 只能够捕捉到Action和Action Filter 所发出的Exception.其他类型的Filter或Middleware产生的Exception,无法通过Exception Filter 拦截.并不太适合用来做全站通用的Exception Handler.\n\n*ExceptionFilter.cs*\n\n```cs\npublic class ExceptionFilter : IAsyncExceptionFilter\n{\n    public Task OnExceptionAsync(ExceptionContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name 出现异常,异常信息:{context.Exception.Message}}\");\n        return Task.CompletedTask;\n    }\n}\n```\n\n*Starpup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config => \n        {\n            config.Filters.Add(new ExceptionFilter());\n        });\n    }\n}\n```\n\n> PS:如果只是注册了一个Exception Filter,那么Filter注册的前后顺序并不重要.只有同类型的Filter才会关系到注册的先后顺序.\n\n#### Exception Middleware\n\nMiddleware 注册的层级可以在Filter的外层,也就是全部的Filter都会经过Middleware.那么只需要在Exception Middleware注册在所有Middleware的最外层,就可以捕捉到全站的异常.\n\n*ExceptionMiddleware.cs*\n\n```cs\npublic class ExceptionMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public ExceptionMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            await context.Response.WriteAsync($\"{GetType().Name} 出现异常,异常消息:{ex.Message}\");\n        }\n    }\n}\n```\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseMiddleware<ExceptionMiddleware>();\n    }\n}\n```\n\n> PS:Middleware的注册顺序很关键,越先注册会在越外层.ExceptionMiddleware注册在越外层,捕捉的范围就越大.\n\n#### Exception Handler\n\nAsp.Net Core有提供Exception Handler 的管道,可以直接调用UseExceptionHandler指定错误页面.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseExceptionHandler(\"/error\")\n    }\n}\n```\n\nExceptionHandlerOptions\n\nUseExceptionHandler 除了可以指派错误页面外,也可以自己实现错误发生触发的事件.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseExceptionHandler(new ExceptionHandlerOptions()\n        {\n            ExceptionHandler = async context =>\n            {\n                bool isApi = Regex.IsMatch(context.Request.Path.Value,\"^/api/\",RegexOptions.IgnoreCase);\n                if(isApi)\n                {\n                    context.Response.ContentType = \"application/json\";\n                    var json = @\"{ \"\"Message\"\":\"\"Internal Server Error\"\"}\";\n                    await context.Response.WriteAsync(json);\n                    return;\n                }\n                context.Response.Redirect(\"/error\");\n            }\n        });\n    }\n}\n```\n\n上面特別对 API 的错误进行了处理，当请求 `http://localhost:5000/api/*` 发生错误时，会回传 JSON 格式的错误。而且把 请求MVC发生的错误 ，改用转址的方式转到 `http://localhost:5000/error`\n\n#### UseDeveloperExceptionPage\n\nUseDeveloperExceptionPage 是Asp.Net Core提供的错误信息页面服务.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n    {\n        // 在开发阶段调用Asp.Net Core提供的错误信息页面\n        if(env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/error\");\n        }\n    }\n}\n```\n","slug":"Asp-Net-Core-异常处理","published":1,"updated":"2021-03-30T03:24:16.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzb000mvcua49egdi8y","content":"<p>异常处理在程序开发中也是一个比较重要的事,一方面可以避免暴露不该暴露的东西,另一方面也在出现问题时,可以及时的定位到异常发生的位置.</p>\n<span id=\"more\"></span>\n\n<h4 id=\"Exception-Filter\"><a href=\"#Exception-Filter\" class=\"headerlink\" title=\"Exception Filter\"></a>Exception Filter</h4><p>Exception Filter 只能够捕捉到Action和Action Filter 所发出的Exception.其他类型的Filter或Middleware产生的Exception,无法通过Exception Filter 拦截.并不太适合用来做全站通用的Exception Handler.</p>\n<p><em>ExceptionFilter.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExceptionFilter</span> : <span class=\"title\">IAsyncExceptionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">OnExceptionAsync</span>(<span class=\"params\">ExceptionContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name 出现异常,异常信息:&#123;context.Exception.Message&#125;</span>&#125;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Task.CompletedTask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Starpup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ExceptionFilter());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS:如果只是注册了一个Exception Filter,那么Filter注册的前后顺序并不重要.只有同类型的Filter才会关系到注册的先后顺序.</p>\n</blockquote>\n<h4 id=\"Exception-Middleware\"><a href=\"#Exception-Middleware\" class=\"headerlink\" title=\"Exception Middleware\"></a>Exception Middleware</h4><p>Middleware 注册的层级可以在Filter的外层,也就是全部的Filter都会经过Middleware.那么只需要在Exception Middleware注册在所有Middleware的最外层,就可以捕捉到全站的异常.</p>\n<p><em>ExceptionMiddleware.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExceptionMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExceptionMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _next(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 出现异常,异常消息:<span class=\"subst\">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseMiddleware&lt;ExceptionMiddleware&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS:Middleware的注册顺序很关键,越先注册会在越外层.ExceptionMiddleware注册在越外层,捕捉的范围就越大.</p>\n</blockquote>\n<h4 id=\"Exception-Handler\"><a href=\"#Exception-Handler\" class=\"headerlink\" title=\"Exception Handler\"></a>Exception Handler</h4><p>Asp.Net Core有提供Exception Handler 的管道,可以直接调用UseExceptionHandler指定错误页面.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"string\">&quot;/error&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ExceptionHandlerOptions</p>\n<p>UseExceptionHandler 除了可以指派错误页面外,也可以自己实现错误发生触发的事件.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"keyword\">new</span> ExceptionHandlerOptions()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExceptionHandler = <span class=\"keyword\">async</span> context =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">bool</span> isApi = Regex.IsMatch(context.Request.Path.Value,<span class=\"string\">&quot;^/api/&quot;</span>,RegexOptions.IgnoreCase);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isApi)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    context.Response.ContentType = <span class=\"string\">&quot;application/json&quot;</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> json = <span class=\"string\">@&quot;&#123; &quot;&quot;Message&quot;&quot;:&quot;&quot;Internal Server Error&quot;&quot;&#125;&quot;</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> context.Response.WriteAsync(json);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                context.Response.Redirect(<span class=\"string\">&quot;/error&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面特別对 API 的错误进行了处理，当请求 <code>http://localhost:5000/api/*</code> 发生错误时，会回传 JSON 格式的错误。而且把 请求MVC发生的错误 ，改用转址的方式转到 <code>http://localhost:5000/error</code></p>\n<h4 id=\"UseDeveloperExceptionPage\"><a href=\"#UseDeveloperExceptionPage\" class=\"headerlink\" title=\"UseDeveloperExceptionPage\"></a>UseDeveloperExceptionPage</h4><p>UseDeveloperExceptionPage 是Asp.Net Core提供的错误信息页面服务.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在开发阶段调用Asp.Net Core提供的错误信息页面</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseExceptionHandler(<span class=\"string\">&quot;/error&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":2968,"excerpt":"<p>异常处理在程序开发中也是一个比较重要的事,一方面可以避免暴露不该暴露的东西,另一方面也在出现问题时,可以及时的定位到异常发生的位置.</p>","more":"<h4 id=\"Exception-Filter\"><a href=\"#Exception-Filter\" class=\"headerlink\" title=\"Exception Filter\"></a>Exception Filter</h4><p>Exception Filter 只能够捕捉到Action和Action Filter 所发出的Exception.其他类型的Filter或Middleware产生的Exception,无法通过Exception Filter 拦截.并不太适合用来做全站通用的Exception Handler.</p>\n<p><em>ExceptionFilter.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExceptionFilter</span> : <span class=\"title\">IAsyncExceptionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">OnExceptionAsync</span>(<span class=\"params\">ExceptionContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name 出现异常,异常信息:&#123;context.Exception.Message&#125;</span>&#125;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Task.CompletedTask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Starpup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ExceptionFilter());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS:如果只是注册了一个Exception Filter,那么Filter注册的前后顺序并不重要.只有同类型的Filter才会关系到注册的先后顺序.</p>\n</blockquote>\n<h4 id=\"Exception-Middleware\"><a href=\"#Exception-Middleware\" class=\"headerlink\" title=\"Exception Middleware\"></a>Exception Middleware</h4><p>Middleware 注册的层级可以在Filter的外层,也就是全部的Filter都会经过Middleware.那么只需要在Exception Middleware注册在所有Middleware的最外层,就可以捕捉到全站的异常.</p>\n<p><em>ExceptionMiddleware.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExceptionMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExceptionMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _next(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 出现异常,异常消息:<span class=\"subst\">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseMiddleware&lt;ExceptionMiddleware&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS:Middleware的注册顺序很关键,越先注册会在越外层.ExceptionMiddleware注册在越外层,捕捉的范围就越大.</p>\n</blockquote>\n<h4 id=\"Exception-Handler\"><a href=\"#Exception-Handler\" class=\"headerlink\" title=\"Exception Handler\"></a>Exception Handler</h4><p>Asp.Net Core有提供Exception Handler 的管道,可以直接调用UseExceptionHandler指定错误页面.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"string\">&quot;/error&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ExceptionHandlerOptions</p>\n<p>UseExceptionHandler 除了可以指派错误页面外,也可以自己实现错误发生触发的事件.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"keyword\">new</span> ExceptionHandlerOptions()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExceptionHandler = <span class=\"keyword\">async</span> context =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">bool</span> isApi = Regex.IsMatch(context.Request.Path.Value,<span class=\"string\">&quot;^/api/&quot;</span>,RegexOptions.IgnoreCase);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isApi)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    context.Response.ContentType = <span class=\"string\">&quot;application/json&quot;</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> json = <span class=\"string\">@&quot;&#123; &quot;&quot;Message&quot;&quot;:&quot;&quot;Internal Server Error&quot;&quot;&#125;&quot;</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> context.Response.WriteAsync(json);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                context.Response.Redirect(<span class=\"string\">&quot;/error&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面特別对 API 的错误进行了处理，当请求 <code>http://localhost:5000/api/*</code> 发生错误时，会回传 JSON 格式的错误。而且把 请求MVC发生的错误 ，改用转址的方式转到 <code>http://localhost:5000/error</code></p>\n<h4 id=\"UseDeveloperExceptionPage\"><a href=\"#UseDeveloperExceptionPage\" class=\"headerlink\" title=\"UseDeveloperExceptionPage\"></a>UseDeveloperExceptionPage</h4><p>UseDeveloperExceptionPage 是Asp.Net Core提供的错误信息页面服务.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在开发阶段调用Asp.Net Core提供的错误信息页面</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseExceptionHandler(<span class=\"string\">&quot;/error&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Asp.Net Core 模型绑定","date":"2019-06-26T15:46:33.000Z","_content":"#### 概述\nASP.NET Core MVC 的模型绑定会把Http Request 中的数据，以映射的方式对应到相应的参数中去.\n<!--more-->\n#### 模型绑定\n要接收Client传来的数据,可以通过Action的参数接收,如下:\n```cs\nusing Microsft.AspNetCore,Mvc;\n\nnamespace Caty.Web.Controllers\n{\n    public class LoginController : Controller\n    {\n        public IActionResult Index(string username, string password)\n        {\n            return Content($\"username:{username},password:{password}\");\n        }\n    }\n}\n```\n其中username和password就是从Http Requset的数据被绑定的模型参数.\n\n默认的模型绑定会从Http Requset的三个地方取值(优先级由上到下)\n* Form\n\n  通过Http Post的Form取值\n\n* Route\n\n  通过MVC Route URL取值,如: http://localhost:5002/User/caty, 取的值就是caty.\n\n* Query\n\n  通过URL Query参数取值,如: http://localhost:5002/User?username=caty\n\n如果三者都传入,取值的优先顺序为Form>Route>Query\n\n#### 绑定属性\n除了上面提到的三个默认的绑定来源外,还可以通过模型绑定属性从Http Request的其他地方中绑定参数,有以下6个类别:\n\n* \\[FromHeader\\]\n\n  从Http Header取值\n\n* \\[FromForm\\]\n\n  通过Http Post的Form取值\n\n* \\[FromRoute\\]\n\n  通过MVC Route URL取值\n\n* \\[FromQuery\\]\n\n  通过URL Query参数取值\n\n* \\[FromBody\\]\n\n  从Http Body取值,通常用于取Json,Xml.\n\n  Asp.Net Core Mvc默认的序列化是使用Json,如果要使用Xml来进行模型绑定,需要在MVC服务中加入XmlSerializerFormatters.\n\n  *Startup.cs*\n\n  ```cs\n  public void ConfigureServices(IServiceCollection services)\n  {\n      services.AddMvc()\n              .AddXmlSerializerFormatters();\n  }\n  ```\n\n* \\[FromServices\\]\n\n  这不是从Http Requset取值,而是从DI容器取值.DI默认是构造器注入,但Controller可能会因为每个Action用到不一样的Service导致参数过多,所以也可以在Action注入Service.\n\n#### 例子\n\n```cs\npublic class UserController:Controller\n{\n    public IActionResult HeaderSample([FromHeader]string header)\n    {\n        return Content($\"header:{header}\");\n    }\n    public IActionResult FormSample([FromForm]string form)\n    {\n        return Content($\"form:{form}\");\n    }\n    public IActionResult IdSample([FromRoute]string id)\n    {\n        return Content($\"id:{id}\");\n    }\n    public IActionResult QuerySample([FromQuery]string query)\n    {\n        return Content($\"query:{query}\");\n    }\n    public IActionResult DISample([FromServices] ILogger<UserController> logger)\n    {\n        return Content($\"logger is null:{logger == null}\");\n    }\n    public IActionResult BodySample([FromBody]UserModel user)\n    {\n        return Ok(model);\n    }\n}\n\npublic class UserModel\n{\n    public string Code { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n```\n\n#### 模型验证\n\n模型绑定也可以验证模型,需要在模型的属性上面带上 ValidationAttributes.\n\n*UserModel.cs*\n\n```cs\npublic class UserModel\n{\n    [Required]\n    public string Code { get; set; }\n\n    [RegularExpression(@\"\\w+\")]\n    [StringLength(20, MinimumLength = 4)]\n    public string Name { get; set; }\n\n    [EmailAddress]\n    public string Email { get; set; }\n}\n```\n\n*UserController.cs*\n\n```cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace MyWebsite.Controllers\n{\n    public class UserController : Controller\n    {\n        public IActionResult BodySample([FromBody]UserModel model)\n        {\n            if (ModelState.IsValid)\n            {\n                return Ok(model);\n            }\n            return BadRequest(ModelState);\n        }\n    }\n}\n```\n\n#### 自定义模型验证\n\n*UserModel.cs*\n\n```cs\npublic class UserModel\n{\n    [Required]\n    public string Code { get; set; }\n\n    [RegularExpression(@\"\\w+\")]\n    [StringLength(20, MinimumLength = 4)]\n    public string Name { get; set; }\n\n    [EmailAddress]\n    public string Email { get; set; }\n\n    [AgeCheck(18,100)]\n    public DataTime BirthDate { get; set; }\n}\n```\n\n*AgeCheckAttribute.cs*\n\n```cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Caty.Web.Attributes\n{\n    public class AgeCheckAttribute : ValidationAttribute\n    {\n        public int MinimumAge { get; private set; }\n        public int MaximumAge { get; private set; }\n\n        public AgeCheckAttribute(int minimumAge, int maximumAge)\n        {\n            MinimumAge = minimumAge;\n            MaximumAge = maximumAge;\n        }\n\n        protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n        {\n            var date = Convert.ToDateTime(value);\n\n            if (date.AddYears(MinimumAge) > DateTime.Today\n                || date.AddYears(MaximumAge) < DateTime.Today)\n            {\n                return new ValidationResult(GetErrorMessage(validationContext));\n            }\n\n            return ValidationResult.Success;\n        }\n\n        private string GetErrorMessage(ValidationContext validationContext)\n        {\n            // 有带 ErrorMessage 的話优先使用\n            // [AgeCheck(18, 100, ErrorMessage=\"xxx\")] \n            if (!string.IsNullOrEmpty(this.ErrorMessage))\n            {\n                return this.ErrorMessage;\n            }\n\n            // 自定义错误信息\n            return $\"{validationContext.DisplayName} can't be in future\";\n        }\n    }\n}\n```","source":"_posts/Asp-Net-Core-模型绑定.md","raw":"---\ntitle: Asp.Net Core 模型绑定\ndate: 2019-06-26 23:46:33\ncategories: .Net Core\ntags:\n - .Net Core\n - Model\n---\n#### 概述\nASP.NET Core MVC 的模型绑定会把Http Request 中的数据，以映射的方式对应到相应的参数中去.\n<!--more-->\n#### 模型绑定\n要接收Client传来的数据,可以通过Action的参数接收,如下:\n```cs\nusing Microsft.AspNetCore,Mvc;\n\nnamespace Caty.Web.Controllers\n{\n    public class LoginController : Controller\n    {\n        public IActionResult Index(string username, string password)\n        {\n            return Content($\"username:{username},password:{password}\");\n        }\n    }\n}\n```\n其中username和password就是从Http Requset的数据被绑定的模型参数.\n\n默认的模型绑定会从Http Requset的三个地方取值(优先级由上到下)\n* Form\n\n  通过Http Post的Form取值\n\n* Route\n\n  通过MVC Route URL取值,如: http://localhost:5002/User/caty, 取的值就是caty.\n\n* Query\n\n  通过URL Query参数取值,如: http://localhost:5002/User?username=caty\n\n如果三者都传入,取值的优先顺序为Form>Route>Query\n\n#### 绑定属性\n除了上面提到的三个默认的绑定来源外,还可以通过模型绑定属性从Http Request的其他地方中绑定参数,有以下6个类别:\n\n* \\[FromHeader\\]\n\n  从Http Header取值\n\n* \\[FromForm\\]\n\n  通过Http Post的Form取值\n\n* \\[FromRoute\\]\n\n  通过MVC Route URL取值\n\n* \\[FromQuery\\]\n\n  通过URL Query参数取值\n\n* \\[FromBody\\]\n\n  从Http Body取值,通常用于取Json,Xml.\n\n  Asp.Net Core Mvc默认的序列化是使用Json,如果要使用Xml来进行模型绑定,需要在MVC服务中加入XmlSerializerFormatters.\n\n  *Startup.cs*\n\n  ```cs\n  public void ConfigureServices(IServiceCollection services)\n  {\n      services.AddMvc()\n              .AddXmlSerializerFormatters();\n  }\n  ```\n\n* \\[FromServices\\]\n\n  这不是从Http Requset取值,而是从DI容器取值.DI默认是构造器注入,但Controller可能会因为每个Action用到不一样的Service导致参数过多,所以也可以在Action注入Service.\n\n#### 例子\n\n```cs\npublic class UserController:Controller\n{\n    public IActionResult HeaderSample([FromHeader]string header)\n    {\n        return Content($\"header:{header}\");\n    }\n    public IActionResult FormSample([FromForm]string form)\n    {\n        return Content($\"form:{form}\");\n    }\n    public IActionResult IdSample([FromRoute]string id)\n    {\n        return Content($\"id:{id}\");\n    }\n    public IActionResult QuerySample([FromQuery]string query)\n    {\n        return Content($\"query:{query}\");\n    }\n    public IActionResult DISample([FromServices] ILogger<UserController> logger)\n    {\n        return Content($\"logger is null:{logger == null}\");\n    }\n    public IActionResult BodySample([FromBody]UserModel user)\n    {\n        return Ok(model);\n    }\n}\n\npublic class UserModel\n{\n    public string Code { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n```\n\n#### 模型验证\n\n模型绑定也可以验证模型,需要在模型的属性上面带上 ValidationAttributes.\n\n*UserModel.cs*\n\n```cs\npublic class UserModel\n{\n    [Required]\n    public string Code { get; set; }\n\n    [RegularExpression(@\"\\w+\")]\n    [StringLength(20, MinimumLength = 4)]\n    public string Name { get; set; }\n\n    [EmailAddress]\n    public string Email { get; set; }\n}\n```\n\n*UserController.cs*\n\n```cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace MyWebsite.Controllers\n{\n    public class UserController : Controller\n    {\n        public IActionResult BodySample([FromBody]UserModel model)\n        {\n            if (ModelState.IsValid)\n            {\n                return Ok(model);\n            }\n            return BadRequest(ModelState);\n        }\n    }\n}\n```\n\n#### 自定义模型验证\n\n*UserModel.cs*\n\n```cs\npublic class UserModel\n{\n    [Required]\n    public string Code { get; set; }\n\n    [RegularExpression(@\"\\w+\")]\n    [StringLength(20, MinimumLength = 4)]\n    public string Name { get; set; }\n\n    [EmailAddress]\n    public string Email { get; set; }\n\n    [AgeCheck(18,100)]\n    public DataTime BirthDate { get; set; }\n}\n```\n\n*AgeCheckAttribute.cs*\n\n```cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Caty.Web.Attributes\n{\n    public class AgeCheckAttribute : ValidationAttribute\n    {\n        public int MinimumAge { get; private set; }\n        public int MaximumAge { get; private set; }\n\n        public AgeCheckAttribute(int minimumAge, int maximumAge)\n        {\n            MinimumAge = minimumAge;\n            MaximumAge = maximumAge;\n        }\n\n        protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n        {\n            var date = Convert.ToDateTime(value);\n\n            if (date.AddYears(MinimumAge) > DateTime.Today\n                || date.AddYears(MaximumAge) < DateTime.Today)\n            {\n                return new ValidationResult(GetErrorMessage(validationContext));\n            }\n\n            return ValidationResult.Success;\n        }\n\n        private string GetErrorMessage(ValidationContext validationContext)\n        {\n            // 有带 ErrorMessage 的話优先使用\n            // [AgeCheck(18, 100, ErrorMessage=\"xxx\")] \n            if (!string.IsNullOrEmpty(this.ErrorMessage))\n            {\n                return this.ErrorMessage;\n            }\n\n            // 自定义错误信息\n            return $\"{validationContext.DisplayName} can't be in future\";\n        }\n    }\n}\n```","slug":"Asp-Net-Core-模型绑定","published":1,"updated":"2021-03-30T03:24:16.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzc000pvcua1f8c8fvs","content":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>ASP.NET Core MVC 的模型绑定会把Http Request 中的数据，以映射的方式对应到相应的参数中去.</p>\n<span id=\"more\"></span>\n<h4 id=\"模型绑定\"><a href=\"#模型绑定\" class=\"headerlink\" title=\"模型绑定\"></a>模型绑定</h4><p>要接收Client传来的数据,可以通过Action的参数接收,如下:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsft.AspNetCore,Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"><span class=\"built_in\">string</span> username, <span class=\"built_in\">string</span> password</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;username:<span class=\"subst\">&#123;username&#125;</span>,password:<span class=\"subst\">&#123;password&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中username和password就是从Http Requset的数据被绑定的模型参数.</p>\n<p>默认的模型绑定会从Http Requset的三个地方取值(优先级由上到下)</p>\n<ul>\n<li><p>Form</p>\n<p>通过Http Post的Form取值</p>\n</li>\n<li><p>Route</p>\n<p>通过MVC Route URL取值,如: <a href=\"http://localhost:5002/User/caty\">http://localhost:5002/User/caty</a>, 取的值就是caty.</p>\n</li>\n<li><p>Query</p>\n<p>通过URL Query参数取值,如: <a href=\"http://localhost:5002/User?username=caty\">http://localhost:5002/User?username=caty</a></p>\n</li>\n</ul>\n<p>如果三者都传入,取值的优先顺序为Form&gt;Route&gt;Query</p>\n<h4 id=\"绑定属性\"><a href=\"#绑定属性\" class=\"headerlink\" title=\"绑定属性\"></a>绑定属性</h4><p>除了上面提到的三个默认的绑定来源外,还可以通过模型绑定属性从Http Request的其他地方中绑定参数,有以下6个类别:</p>\n<ul>\n<li><p>[FromHeader]</p>\n<p>从Http Header取值</p>\n</li>\n<li><p>[FromForm]</p>\n<p>通过Http Post的Form取值</p>\n</li>\n<li><p>[FromRoute]</p>\n<p>通过MVC Route URL取值</p>\n</li>\n<li><p>[FromQuery]</p>\n<p>通过URL Query参数取值</p>\n</li>\n<li><p>[FromBody]</p>\n<p>从Http Body取值,通常用于取Json,Xml.</p>\n<p>Asp.Net Core Mvc默认的序列化是使用Json,如果要使用Xml来进行模型绑定,需要在MVC服务中加入XmlSerializerFormatters.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc()</span><br><span class=\"line\">            .AddXmlSerializerFormatters();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>[FromServices]</p>\n<p>这不是从Http Requset取值,而是从DI容器取值.DI默认是构造器注入,但Controller可能会因为每个Action用到不一样的Service导致参数过多,所以也可以在Action注入Service.</p>\n</li>\n</ul>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span>:<span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">HeaderSample</span>(<span class=\"params\">[FromHeader]<span class=\"built_in\">string</span> header</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;header:<span class=\"subst\">&#123;header&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">FormSample</span>(<span class=\"params\">[FromForm]<span class=\"built_in\">string</span> form</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;form:<span class=\"subst\">&#123;form&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">IdSample</span>(<span class=\"params\">[FromRoute]<span class=\"built_in\">string</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;id:<span class=\"subst\">&#123;id&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">QuerySample</span>(<span class=\"params\">[FromQuery]<span class=\"built_in\">string</span> query</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;query:<span class=\"subst\">&#123;query&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">DISample</span>(<span class=\"params\">[FromServices] ILogger&lt;UserController&gt; logger</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;logger is null:<span class=\"subst\">&#123;logger == <span class=\"literal\">null</span>&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">BodySample</span>(<span class=\"params\">[FromBody]UserModel user</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(model);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模型验证\"><a href=\"#模型验证\" class=\"headerlink\" title=\"模型验证\"></a>模型验证</h4><p>模型绑定也可以验证模型,需要在模型的属性上面带上 ValidationAttributes.</p>\n<p><em>UserModel.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">RegularExpression(@<span class=\"meta-string\">&quot;\\w+&quot;</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">StringLength(20, MinimumLength = 4)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">EmailAddress</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>UserController.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">MyWebsite.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">BodySample</span>(<span class=\"params\">[FromBody]UserModel model</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ModelState.IsValid)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Ok(model);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> BadRequest(ModelState);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义模型验证\"><a href=\"#自定义模型验证\" class=\"headerlink\" title=\"自定义模型验证\"></a>自定义模型验证</h4><p><em>UserModel.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">RegularExpression(@<span class=\"meta-string\">&quot;\\w+&quot;</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">StringLength(20, MinimumLength = 4)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">EmailAddress</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">AgeCheck(18,100)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataTime BirthDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>AgeCheckAttribute.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel.DataAnnotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Attributes</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AgeCheckAttribute</span> : <span class=\"title\">ValidationAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> MinimumAge &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> MaximumAge &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AgeCheckAttribute</span>(<span class=\"params\"><span class=\"built_in\">int</span> minimumAge, <span class=\"built_in\">int</span> maximumAge</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            MinimumAge = minimumAge;</span><br><span class=\"line\">            MaximumAge = maximumAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> ValidationResult <span class=\"title\">IsValid</span>(<span class=\"params\"><span class=\"built_in\">object</span> <span class=\"keyword\">value</span>, ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> date = Convert.ToDateTime(<span class=\"keyword\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (date.AddYears(MinimumAge) &gt; DateTime.Today</span><br><span class=\"line\">                || date.AddYears(MaximumAge) &lt; DateTime.Today)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ValidationResult(GetErrorMessage(validationContext));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ValidationResult.Success;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"title\">GetErrorMessage</span>(<span class=\"params\">ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 有带 ErrorMessage 的話优先使用</span></span><br><span class=\"line\">            <span class=\"comment\">// [AgeCheck(18, 100, ErrorMessage=&quot;xxx&quot;)] </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(<span class=\"keyword\">this</span>.ErrorMessage))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ErrorMessage;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 自定义错误信息</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;validationContext.DisplayName&#125;</span> can&#x27;t be in future&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":4183,"excerpt":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>ASP.NET Core MVC 的模型绑定会把Http Request 中的数据，以映射的方式对应到相应的参数中去.</p>","more":"<h4 id=\"模型绑定\"><a href=\"#模型绑定\" class=\"headerlink\" title=\"模型绑定\"></a>模型绑定</h4><p>要接收Client传来的数据,可以通过Action的参数接收,如下:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsft.AspNetCore,Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"><span class=\"built_in\">string</span> username, <span class=\"built_in\">string</span> password</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;username:<span class=\"subst\">&#123;username&#125;</span>,password:<span class=\"subst\">&#123;password&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中username和password就是从Http Requset的数据被绑定的模型参数.</p>\n<p>默认的模型绑定会从Http Requset的三个地方取值(优先级由上到下)</p>\n<ul>\n<li><p>Form</p>\n<p>通过Http Post的Form取值</p>\n</li>\n<li><p>Route</p>\n<p>通过MVC Route URL取值,如: <a href=\"http://localhost:5002/User/caty\">http://localhost:5002/User/caty</a>, 取的值就是caty.</p>\n</li>\n<li><p>Query</p>\n<p>通过URL Query参数取值,如: <a href=\"http://localhost:5002/User?username=caty\">http://localhost:5002/User?username=caty</a></p>\n</li>\n</ul>\n<p>如果三者都传入,取值的优先顺序为Form&gt;Route&gt;Query</p>\n<h4 id=\"绑定属性\"><a href=\"#绑定属性\" class=\"headerlink\" title=\"绑定属性\"></a>绑定属性</h4><p>除了上面提到的三个默认的绑定来源外,还可以通过模型绑定属性从Http Request的其他地方中绑定参数,有以下6个类别:</p>\n<ul>\n<li><p>[FromHeader]</p>\n<p>从Http Header取值</p>\n</li>\n<li><p>[FromForm]</p>\n<p>通过Http Post的Form取值</p>\n</li>\n<li><p>[FromRoute]</p>\n<p>通过MVC Route URL取值</p>\n</li>\n<li><p>[FromQuery]</p>\n<p>通过URL Query参数取值</p>\n</li>\n<li><p>[FromBody]</p>\n<p>从Http Body取值,通常用于取Json,Xml.</p>\n<p>Asp.Net Core Mvc默认的序列化是使用Json,如果要使用Xml来进行模型绑定,需要在MVC服务中加入XmlSerializerFormatters.</p>\n<p><em>Startup.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc()</span><br><span class=\"line\">            .AddXmlSerializerFormatters();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>[FromServices]</p>\n<p>这不是从Http Requset取值,而是从DI容器取值.DI默认是构造器注入,但Controller可能会因为每个Action用到不一样的Service导致参数过多,所以也可以在Action注入Service.</p>\n</li>\n</ul>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span>:<span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">HeaderSample</span>(<span class=\"params\">[FromHeader]<span class=\"built_in\">string</span> header</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;header:<span class=\"subst\">&#123;header&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">FormSample</span>(<span class=\"params\">[FromForm]<span class=\"built_in\">string</span> form</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;form:<span class=\"subst\">&#123;form&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">IdSample</span>(<span class=\"params\">[FromRoute]<span class=\"built_in\">string</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;id:<span class=\"subst\">&#123;id&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">QuerySample</span>(<span class=\"params\">[FromQuery]<span class=\"built_in\">string</span> query</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;query:<span class=\"subst\">&#123;query&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">DISample</span>(<span class=\"params\">[FromServices] ILogger&lt;UserController&gt; logger</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$&quot;logger is null:<span class=\"subst\">&#123;logger == <span class=\"literal\">null</span>&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">BodySample</span>(<span class=\"params\">[FromBody]UserModel user</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(model);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模型验证\"><a href=\"#模型验证\" class=\"headerlink\" title=\"模型验证\"></a>模型验证</h4><p>模型绑定也可以验证模型,需要在模型的属性上面带上 ValidationAttributes.</p>\n<p><em>UserModel.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">RegularExpression(@<span class=\"meta-string\">&quot;\\w+&quot;</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">StringLength(20, MinimumLength = 4)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">EmailAddress</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>UserController.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">MyWebsite.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">BodySample</span>(<span class=\"params\">[FromBody]UserModel model</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ModelState.IsValid)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Ok(model);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> BadRequest(ModelState);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义模型验证\"><a href=\"#自定义模型验证\" class=\"headerlink\" title=\"自定义模型验证\"></a>自定义模型验证</h4><p><em>UserModel.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">RegularExpression(@<span class=\"meta-string\">&quot;\\w+&quot;</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">StringLength(20, MinimumLength = 4)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">EmailAddress</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">AgeCheck(18,100)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataTime BirthDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>AgeCheckAttribute.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel.DataAnnotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Attributes</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AgeCheckAttribute</span> : <span class=\"title\">ValidationAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> MinimumAge &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> MaximumAge &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AgeCheckAttribute</span>(<span class=\"params\"><span class=\"built_in\">int</span> minimumAge, <span class=\"built_in\">int</span> maximumAge</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            MinimumAge = minimumAge;</span><br><span class=\"line\">            MaximumAge = maximumAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> ValidationResult <span class=\"title\">IsValid</span>(<span class=\"params\"><span class=\"built_in\">object</span> <span class=\"keyword\">value</span>, ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> date = Convert.ToDateTime(<span class=\"keyword\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (date.AddYears(MinimumAge) &gt; DateTime.Today</span><br><span class=\"line\">                || date.AddYears(MaximumAge) &lt; DateTime.Today)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ValidationResult(GetErrorMessage(validationContext));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ValidationResult.Success;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"title\">GetErrorMessage</span>(<span class=\"params\">ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 有带 ErrorMessage 的話优先使用</span></span><br><span class=\"line\">            <span class=\"comment\">// [AgeCheck(18, 100, ErrorMessage=&quot;xxx&quot;)] </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(<span class=\"keyword\">this</span>.ErrorMessage))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ErrorMessage;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 自定义错误信息</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;validationContext.DisplayName&#125;</span> can&#x27;t be in future&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Asp.Net Core 过滤器","date":"2019-07-03T15:52:10.000Z","_content":"#### Filter 简介\nFilter的作用是在Action执行前或执行后做一些加工处理.跟中间件类似,但执行的顺序略有不同.把Filter用好了,可以减少代码量和提高执行效率.\n<!--more-->\n##### Filter 分类\n* Authorization Filter\n\n  优先级最高,常用于验证请求是否合法,不合格则跳过后续处理\n\n* Resource Filter\n\n  第二优先级,在授权之后,模型绑定之前执行,常用于需要对模型加工处理.\n\n* Action Filter\n\n  与Resource Filter类似,但不经过模型绑定\n\n* Exception Filter\n\n  异常处理的Filter\n\n* Result Filter\n\n  在Action完成后,最后会经过的Filter.\n\n##### Filter 运作方式\n\n每一个Request都会先经过已注册的中间件才会执行过滤器.\n\n顺序一般为:Request -> 中间件 -> Authorization Filters -> Resource Filters -> 模型绑定 -> Action Filters -> Action -> Action Filters -> Result Filters -> Resource Filters -> 中间件 -> Response\n\n#### 创建Filter\n\n*Authorization Filter.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace Caty.Web.Filters\n{\n    public class AuthorizationFilter : IAuthorizationFilter, IAsyncAuthorizationFilter\n    {\n        // 同步\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n        // 异步\n        public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n        {\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n    }\n}\n```\n*Resource Filter.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace Caty.Web.Filters\n{\n    public class ResourceFilter : IResourceFilter,IAsyncResourceFilter\n    {\n        // 同步\n        public void OnResourceExecuting(ResourceExecutingFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n\n        public void OnResourceExecuted(ResourceExecutedFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 退出.\\r\\n\");\n        }\n        // 异步\n        public async Task OnResourceExecutionAsync(AuthorizationFilterContext context)\n        {\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n            await next();\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 退出.\\r\\n\");\n        }\n    }\n}\n```\nAction Filter, Result Filter,Exception Filter 与 Resource Filter 类似,只是分别继承了不同的接口,\n* Action Filter 同步继承 IActionFilter,异步继承IAsyncActionFilter;\n* Result Filter 同步继承IResultFilter,异步继承IAsyncResultFilter;\n* Exception Filter 同步继承IExceptionFilter ,异步继承IAsyncExceptionFilter.\n\n#### 注册 Filter\n\n有两种注册方式,一种是全局注册,另一种是用\\[Attribute\\]来区域注册,只用于特定的控制器或接口.\n\n##### 全局注册\n\nStartup.cs\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config => \n        {\n            config.Filters.Add(new ResultFilter());\n            config.Filters.Add(new ExceptionFilter());\n            config.Filters.Add(new ResourceFilter());\n        });\n    }\n}\n```\n\n##### 区域注册\n\n在控制器或者接口上面加上\\[TypeFilter(type)\\]就可以区域注册Filter.\n\n```cs\nnamespace Caty.Web.Controllers\n{\n    [TypeFilter(typeof(AuthorizationFilter))]\n    public class HomeController : Controller\n    {\n        [TypeFilter(typeof(ActionFilter))]\n        public void Index()\n        {\n            Response.WriteAsync(\"Hello World! \\r\\n\");\n        }\n        \n        [TypeFilter(typeof(ActionFilter))]\n        public void Error()\n        {\n            throw new System.Exception(\"Error\");\n        }\n    }\n}\n```\n\n如果Filter继承Attribute,则可以用\\[Attribute\\]进行Filter的注册.\n\n```cs\npublic class AuthorizationFilter : Attribute, IAuthorizationFilter\n{\n    // ...\n}\npublic class ActionFilter : Attribute, IActionFilter\n{\n    // ...\n}\n```\n\n```cs\nnamespace Caty.Web.Controllers\n{\n    [AuthorizationFilter]\n    public class HomeController : Controller\n    {\n        [ActionFilter]\n        public void Index()\n        {\n            Response.WriteAsync(\"Hello World! \\r\\n\");\n        }\n        \n        [ActionFilter]\n        public void Error()\n        {\n            throw new System.Exception(\"Error\");\n        }\n    }\n}\n```\n\n#### 执行顺序\n\n预设注册同类型的Filter是以先进后出的方式处理封包,注册层级也会影响执行顺序.\n\nGlobal->Controller->Action\n\n也可以通过实现IOrderFilter修改执行顺序.\n\n```cs\npublic class ActionFilter : Attribute, IActionFilter, IOrderedFilter\n{\n    public string Name { get; set; }\n\n    public int Order { get; set; } = 0;\n\n    public void OnActionExecuting(ActionExecutingContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name}({Name}) 进入. \\r\\n\");\n    }\n    public void OnActionExecuted(ActionExecutedContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name}({Name}) 退出. \\r\\n\");\n    }\n}\n```\n\n在注册Filter时带上Order,数值越小优先级越高.\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config =>\n        {\n            config.Filters.Add(new ActionFilter() { Name = \"Global\", Order = 3 });\n        });\n    }\n}\n```\n","source":"_posts/Asp-Net-Core-过滤器.md","raw":"---\ntitle: Asp.Net Core 过滤器\ndate: 2019-07-03 23:52:10\ncategories: .Net Core\ntags:\n - .Net Core\n - Filter\n---\n#### Filter 简介\nFilter的作用是在Action执行前或执行后做一些加工处理.跟中间件类似,但执行的顺序略有不同.把Filter用好了,可以减少代码量和提高执行效率.\n<!--more-->\n##### Filter 分类\n* Authorization Filter\n\n  优先级最高,常用于验证请求是否合法,不合格则跳过后续处理\n\n* Resource Filter\n\n  第二优先级,在授权之后,模型绑定之前执行,常用于需要对模型加工处理.\n\n* Action Filter\n\n  与Resource Filter类似,但不经过模型绑定\n\n* Exception Filter\n\n  异常处理的Filter\n\n* Result Filter\n\n  在Action完成后,最后会经过的Filter.\n\n##### Filter 运作方式\n\n每一个Request都会先经过已注册的中间件才会执行过滤器.\n\n顺序一般为:Request -> 中间件 -> Authorization Filters -> Resource Filters -> 模型绑定 -> Action Filters -> Action -> Action Filters -> Result Filters -> Resource Filters -> 中间件 -> Response\n\n#### 创建Filter\n\n*Authorization Filter.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace Caty.Web.Filters\n{\n    public class AuthorizationFilter : IAuthorizationFilter, IAsyncAuthorizationFilter\n    {\n        // 同步\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n        // 异步\n        public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n        {\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n    }\n}\n```\n*Resource Filter.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace Caty.Web.Filters\n{\n    public class ResourceFilter : IResourceFilter,IAsyncResourceFilter\n    {\n        // 同步\n        public void OnResourceExecuting(ResourceExecutingFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n\n        public void OnResourceExecuted(ResourceExecutedFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 退出.\\r\\n\");\n        }\n        // 异步\n        public async Task OnResourceExecutionAsync(AuthorizationFilterContext context)\n        {\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n            await next();\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 退出.\\r\\n\");\n        }\n    }\n}\n```\nAction Filter, Result Filter,Exception Filter 与 Resource Filter 类似,只是分别继承了不同的接口,\n* Action Filter 同步继承 IActionFilter,异步继承IAsyncActionFilter;\n* Result Filter 同步继承IResultFilter,异步继承IAsyncResultFilter;\n* Exception Filter 同步继承IExceptionFilter ,异步继承IAsyncExceptionFilter.\n\n#### 注册 Filter\n\n有两种注册方式,一种是全局注册,另一种是用\\[Attribute\\]来区域注册,只用于特定的控制器或接口.\n\n##### 全局注册\n\nStartup.cs\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config => \n        {\n            config.Filters.Add(new ResultFilter());\n            config.Filters.Add(new ExceptionFilter());\n            config.Filters.Add(new ResourceFilter());\n        });\n    }\n}\n```\n\n##### 区域注册\n\n在控制器或者接口上面加上\\[TypeFilter(type)\\]就可以区域注册Filter.\n\n```cs\nnamespace Caty.Web.Controllers\n{\n    [TypeFilter(typeof(AuthorizationFilter))]\n    public class HomeController : Controller\n    {\n        [TypeFilter(typeof(ActionFilter))]\n        public void Index()\n        {\n            Response.WriteAsync(\"Hello World! \\r\\n\");\n        }\n        \n        [TypeFilter(typeof(ActionFilter))]\n        public void Error()\n        {\n            throw new System.Exception(\"Error\");\n        }\n    }\n}\n```\n\n如果Filter继承Attribute,则可以用\\[Attribute\\]进行Filter的注册.\n\n```cs\npublic class AuthorizationFilter : Attribute, IAuthorizationFilter\n{\n    // ...\n}\npublic class ActionFilter : Attribute, IActionFilter\n{\n    // ...\n}\n```\n\n```cs\nnamespace Caty.Web.Controllers\n{\n    [AuthorizationFilter]\n    public class HomeController : Controller\n    {\n        [ActionFilter]\n        public void Index()\n        {\n            Response.WriteAsync(\"Hello World! \\r\\n\");\n        }\n        \n        [ActionFilter]\n        public void Error()\n        {\n            throw new System.Exception(\"Error\");\n        }\n    }\n}\n```\n\n#### 执行顺序\n\n预设注册同类型的Filter是以先进后出的方式处理封包,注册层级也会影响执行顺序.\n\nGlobal->Controller->Action\n\n也可以通过实现IOrderFilter修改执行顺序.\n\n```cs\npublic class ActionFilter : Attribute, IActionFilter, IOrderedFilter\n{\n    public string Name { get; set; }\n\n    public int Order { get; set; } = 0;\n\n    public void OnActionExecuting(ActionExecutingContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name}({Name}) 进入. \\r\\n\");\n    }\n    public void OnActionExecuted(ActionExecutedContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name}({Name}) 退出. \\r\\n\");\n    }\n}\n```\n\n在注册Filter时带上Order,数值越小优先级越高.\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config =>\n        {\n            config.Filters.Add(new ActionFilter() { Name = \"Global\", Order = 3 });\n        });\n    }\n}\n```\n","slug":"Asp-Net-Core-过滤器","published":1,"updated":"2021-03-30T03:24:16.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzd000tvcuafeqn2vu8","content":"<h4 id=\"Filter-简介\"><a href=\"#Filter-简介\" class=\"headerlink\" title=\"Filter 简介\"></a>Filter 简介</h4><p>Filter的作用是在Action执行前或执行后做一些加工处理.跟中间件类似,但执行的顺序略有不同.把Filter用好了,可以减少代码量和提高执行效率.</p>\n<span id=\"more\"></span>\n<h5 id=\"Filter-分类\"><a href=\"#Filter-分类\" class=\"headerlink\" title=\"Filter 分类\"></a>Filter 分类</h5><ul>\n<li><p>Authorization Filter</p>\n<p>优先级最高,常用于验证请求是否合法,不合格则跳过后续处理</p>\n</li>\n<li><p>Resource Filter</p>\n<p>第二优先级,在授权之后,模型绑定之前执行,常用于需要对模型加工处理.</p>\n</li>\n<li><p>Action Filter</p>\n<p>与Resource Filter类似,但不经过模型绑定</p>\n</li>\n<li><p>Exception Filter</p>\n<p>异常处理的Filter</p>\n</li>\n<li><p>Result Filter</p>\n<p>在Action完成后,最后会经过的Filter.</p>\n</li>\n</ul>\n<h5 id=\"Filter-运作方式\"><a href=\"#Filter-运作方式\" class=\"headerlink\" title=\"Filter 运作方式\"></a>Filter 运作方式</h5><p>每一个Request都会先经过已注册的中间件才会执行过滤器.</p>\n<p>顺序一般为:Request -&gt; 中间件 -&gt; Authorization Filters -&gt; Resource Filters -&gt; 模型绑定 -&gt; Action Filters -&gt; Action -&gt; Action Filters -&gt; Result Filters -&gt; Resource Filters -&gt; 中间件 -&gt; Response</p>\n<h4 id=\"创建Filter\"><a href=\"#创建Filter\" class=\"headerlink\" title=\"创建Filter\"></a>创建Filter</h4><p><em>Authorization Filter.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Filters</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuthorizationFilter</span> : <span class=\"title\">IAuthorizationFilter</span>, <span class=\"title\">IAsyncAuthorizationFilter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnAuthorization</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnAuthorizationAsync</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>Resource Filter.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Filters</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ResourceFilter</span> : <span class=\"title\">IResourceFilter</span>,<span class=\"title\">IAsyncResourceFilter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResourceExecuting</span>(<span class=\"params\">ResourceExecutingFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResourceExecuted</span>(<span class=\"params\">ResourceExecutedFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 退出.\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnResourceExecutionAsync</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 退出.\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Action Filter, Result Filter,Exception Filter 与 Resource Filter 类似,只是分别继承了不同的接口,</p>\n<ul>\n<li>Action Filter 同步继承 IActionFilter,异步继承IAsyncActionFilter;</li>\n<li>Result Filter 同步继承IResultFilter,异步继承IAsyncResultFilter;</li>\n<li>Exception Filter 同步继承IExceptionFilter ,异步继承IAsyncExceptionFilter.</li>\n</ul>\n<h4 id=\"注册-Filter\"><a href=\"#注册-Filter\" class=\"headerlink\" title=\"注册 Filter\"></a>注册 Filter</h4><p>有两种注册方式,一种是全局注册,另一种是用[Attribute]来区域注册,只用于特定的控制器或接口.</p>\n<h5 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h5><p>Startup.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ResultFilter());</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ExceptionFilter());</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ResourceFilter());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"区域注册\"><a href=\"#区域注册\" class=\"headerlink\" title=\"区域注册\"></a>区域注册</h5><p>在控制器或者接口上面加上[TypeFilter(type)]就可以区域注册Filter.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">TypeFilter(typeof(AuthorizationFilter))</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">TypeFilter(typeof(ActionFilter))</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Response.WriteAsync(<span class=\"string\">&quot;Hello World! \\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">TypeFilter(typeof(ActionFilter))</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Error</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.Exception(<span class=\"string\">&quot;Error&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果Filter继承Attribute,则可以用[Attribute]进行Filter的注册.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuthorizationFilter</span> : <span class=\"title\">Attribute</span>, <span class=\"title\">IAuthorizationFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ActionFilter</span> : <span class=\"title\">Attribute</span>, <span class=\"title\">IActionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">AuthorizationFilter</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">ActionFilter</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Response.WriteAsync(<span class=\"string\">&quot;Hello World! \\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">ActionFilter</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Error</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.Exception(<span class=\"string\">&quot;Error&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h4><p>预设注册同类型的Filter是以先进后出的方式处理封包,注册层级也会影响执行顺序.</p>\n<p>Global-&gt;Controller-&gt;Action</p>\n<p>也可以通过实现IOrderFilter修改执行顺序.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ActionFilter</span> : <span class=\"title\">Attribute</span>, <span class=\"title\">IActionFilter</span>, <span class=\"title\">IOrderedFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Order &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span>(<span class=\"subst\">&#123;Name&#125;</span>) 进入. \\r\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span>(<span class=\"subst\">&#123;Name&#125;</span>) 退出. \\r\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在注册Filter时带上Order,数值越小优先级越高.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ActionFilter() &#123; Name = <span class=\"string\">&quot;Global&quot;</span>, Order = <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":4372,"excerpt":"<h4 id=\"Filter-简介\"><a href=\"#Filter-简介\" class=\"headerlink\" title=\"Filter 简介\"></a>Filter 简介</h4><p>Filter的作用是在Action执行前或执行后做一些加工处理.跟中间件类似,但执行的顺序略有不同.把Filter用好了,可以减少代码量和提高执行效率.</p>","more":"<h5 id=\"Filter-分类\"><a href=\"#Filter-分类\" class=\"headerlink\" title=\"Filter 分类\"></a>Filter 分类</h5><ul>\n<li><p>Authorization Filter</p>\n<p>优先级最高,常用于验证请求是否合法,不合格则跳过后续处理</p>\n</li>\n<li><p>Resource Filter</p>\n<p>第二优先级,在授权之后,模型绑定之前执行,常用于需要对模型加工处理.</p>\n</li>\n<li><p>Action Filter</p>\n<p>与Resource Filter类似,但不经过模型绑定</p>\n</li>\n<li><p>Exception Filter</p>\n<p>异常处理的Filter</p>\n</li>\n<li><p>Result Filter</p>\n<p>在Action完成后,最后会经过的Filter.</p>\n</li>\n</ul>\n<h5 id=\"Filter-运作方式\"><a href=\"#Filter-运作方式\" class=\"headerlink\" title=\"Filter 运作方式\"></a>Filter 运作方式</h5><p>每一个Request都会先经过已注册的中间件才会执行过滤器.</p>\n<p>顺序一般为:Request -&gt; 中间件 -&gt; Authorization Filters -&gt; Resource Filters -&gt; 模型绑定 -&gt; Action Filters -&gt; Action -&gt; Action Filters -&gt; Result Filters -&gt; Resource Filters -&gt; 中间件 -&gt; Response</p>\n<h4 id=\"创建Filter\"><a href=\"#创建Filter\" class=\"headerlink\" title=\"创建Filter\"></a>创建Filter</h4><p><em>Authorization Filter.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Filters</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuthorizationFilter</span> : <span class=\"title\">IAuthorizationFilter</span>, <span class=\"title\">IAsyncAuthorizationFilter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnAuthorization</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnAuthorizationAsync</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>Resource Filter.cs</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Filters</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ResourceFilter</span> : <span class=\"title\">IResourceFilter</span>,<span class=\"title\">IAsyncResourceFilter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResourceExecuting</span>(<span class=\"params\">ResourceExecutingFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResourceExecuted</span>(<span class=\"params\">ResourceExecutedFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 退出.\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnResourceExecutionAsync</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span> 退出.\\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Action Filter, Result Filter,Exception Filter 与 Resource Filter 类似,只是分别继承了不同的接口,</p>\n<ul>\n<li>Action Filter 同步继承 IActionFilter,异步继承IAsyncActionFilter;</li>\n<li>Result Filter 同步继承IResultFilter,异步继承IAsyncResultFilter;</li>\n<li>Exception Filter 同步继承IExceptionFilter ,异步继承IAsyncExceptionFilter.</li>\n</ul>\n<h4 id=\"注册-Filter\"><a href=\"#注册-Filter\" class=\"headerlink\" title=\"注册 Filter\"></a>注册 Filter</h4><p>有两种注册方式,一种是全局注册,另一种是用[Attribute]来区域注册,只用于特定的控制器或接口.</p>\n<h5 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h5><p>Startup.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ResultFilter());</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ExceptionFilter());</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ResourceFilter());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"区域注册\"><a href=\"#区域注册\" class=\"headerlink\" title=\"区域注册\"></a>区域注册</h5><p>在控制器或者接口上面加上[TypeFilter(type)]就可以区域注册Filter.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">TypeFilter(typeof(AuthorizationFilter))</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">TypeFilter(typeof(ActionFilter))</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Response.WriteAsync(<span class=\"string\">&quot;Hello World! \\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">TypeFilter(typeof(ActionFilter))</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Error</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.Exception(<span class=\"string\">&quot;Error&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果Filter继承Attribute,则可以用[Attribute]进行Filter的注册.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuthorizationFilter</span> : <span class=\"title\">Attribute</span>, <span class=\"title\">IAuthorizationFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ActionFilter</span> : <span class=\"title\">Attribute</span>, <span class=\"title\">IActionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">AuthorizationFilter</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">ActionFilter</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Response.WriteAsync(<span class=\"string\">&quot;Hello World! \\r\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">ActionFilter</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Error</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.Exception(<span class=\"string\">&quot;Error&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h4><p>预设注册同类型的Filter是以先进后出的方式处理封包,注册层级也会影响执行顺序.</p>\n<p>Global-&gt;Controller-&gt;Action</p>\n<p>也可以通过实现IOrderFilter修改执行顺序.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ActionFilter</span> : <span class=\"title\">Attribute</span>, <span class=\"title\">IActionFilter</span>, <span class=\"title\">IOrderedFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Order &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span>(<span class=\"subst\">&#123;Name&#125;</span>) 进入. \\r\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;<span class=\"subst\">&#123;GetType().Name&#125;</span>(<span class=\"subst\">&#123;Name&#125;</span>) 退出. \\r\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在注册Filter时带上Order,数值越小优先级越高.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ActionFilter() &#123; Name = <span class=\"string\">&quot;Global&quot;</span>, Order = <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Asp.Net Core中使用Session","date":"2018-03-10T16:18:04.000Z","_content":"##### 添加Session\n在你的项目上基于NuGet添加：Microsoft.AspNetCore.Session。\n<!--more-->\n\n##### 修改Startup.cs\n在startup.cs找到方法ConfigureServices(IServiceCollection services) 注入Session(这个地方是Asp.net Core pipeline):services.AddSession();\n\n接下来我们要告诉Asp.net Core使用内存存储Session数据，在Configure(IApplicationBuilder app,...)中添加代码:app.UseSession();\n\n##### Session\n1. 在MVC Controller里使用HttpContext.Session\n```cs\nusing Microsoft.AspNetCore.Http;\n\npublic class HomeController:Controller\n{\n    public IActionResult Index()\n    {\n        HttpContext.Session.SetString(\"code\",\"123456\");\n        return View();  \n    }\n\n    public IActionResult About()\n    {\n        ViewBag.Code=HttpContext.Session.GetString(\"code\");\n        return View();\n    }\n}\n```\n\n2. 如果不是在Controller里，你可以注入IHttpContextAccessor\n```cs\npublic class SomeOtherClass\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n    private ISession _session=> _httpContextAccessor.HttpContext.Session;\n\n    public SomeOtherClass(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor=httpContextAccessor;\n    }\n\n    public void Set()\n    {\n        _session.SetString(\"code\",\"123456\");\n    }\n    \n    public void Get()\n    {\n        string code = _session.GetString(\"code\");\n    }\n}\n```\n\n##### 存储复杂对象\n存储对象时把对象序列化成一个json字符串存储。\n```cs\npublic static class SessionExtensions\n{\n    public static void SetObjectAsJson(this ISession session, string key, object value)\n    {\n        session.SetString(key, JsonConvert.SerializeObject(value));\n    }\n\n    public static T GetObjectFromJson<T>(this ISession session, string key)\n    {\n        var value = session.GetString(key);\n\n        return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value);\n    }\n}\n```\n\n```cs\nvar myComplexObject = new MyClass();\nHttpContext.Session.SetObjectAsJson(\"Test\", myComplexObject);\n\nvar myComplexObject = HttpContext.Session.GetObjectFromJson<MyClass>(\"Test\");\n```\n\n##### 使用SQL Server或Redis存储\n1、SQL Server\n\n添加引用  \"Microsoft.Extensions.Caching.SqlServer\": \"1.0.0\"\n\n注入：\n```cs\n// Microsoft SQL Server implementation of IDistributedCache.\n// Note that this would require setting up the session state database.\nservices.AddSqlServerCache(o =>\n{\n    o.ConnectionString = \"Server=.;Database=ASPNET5SessionState;Trusted_Connection=True;\";\n    o.SchemaName = \"dbo\";\n    o.TableName = \"Sessions\";\n});\n```\n\n2、Redis\n\n添加引用   \"Microsoft.Extensions.Caching.Redis\": \"1.0.0\"\n\n注入：\n```cs\n// Redis implementation of IDistributedCache.\n// This will override any previously registered IDistributedCache service.\nservices.AddSingleton<IDistributedCache, RedisCache>();\n```","source":"_posts/Asp-Net-Core中使用Session.md","raw":"---\ntitle: Asp.Net Core中使用Session\ndate: 2018-03-11 00:18:04\ncategories: .Net Core\ntags:\n - .Net Core\n - Session\n---\n##### 添加Session\n在你的项目上基于NuGet添加：Microsoft.AspNetCore.Session。\n<!--more-->\n\n##### 修改Startup.cs\n在startup.cs找到方法ConfigureServices(IServiceCollection services) 注入Session(这个地方是Asp.net Core pipeline):services.AddSession();\n\n接下来我们要告诉Asp.net Core使用内存存储Session数据，在Configure(IApplicationBuilder app,...)中添加代码:app.UseSession();\n\n##### Session\n1. 在MVC Controller里使用HttpContext.Session\n```cs\nusing Microsoft.AspNetCore.Http;\n\npublic class HomeController:Controller\n{\n    public IActionResult Index()\n    {\n        HttpContext.Session.SetString(\"code\",\"123456\");\n        return View();  \n    }\n\n    public IActionResult About()\n    {\n        ViewBag.Code=HttpContext.Session.GetString(\"code\");\n        return View();\n    }\n}\n```\n\n2. 如果不是在Controller里，你可以注入IHttpContextAccessor\n```cs\npublic class SomeOtherClass\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n    private ISession _session=> _httpContextAccessor.HttpContext.Session;\n\n    public SomeOtherClass(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor=httpContextAccessor;\n    }\n\n    public void Set()\n    {\n        _session.SetString(\"code\",\"123456\");\n    }\n    \n    public void Get()\n    {\n        string code = _session.GetString(\"code\");\n    }\n}\n```\n\n##### 存储复杂对象\n存储对象时把对象序列化成一个json字符串存储。\n```cs\npublic static class SessionExtensions\n{\n    public static void SetObjectAsJson(this ISession session, string key, object value)\n    {\n        session.SetString(key, JsonConvert.SerializeObject(value));\n    }\n\n    public static T GetObjectFromJson<T>(this ISession session, string key)\n    {\n        var value = session.GetString(key);\n\n        return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value);\n    }\n}\n```\n\n```cs\nvar myComplexObject = new MyClass();\nHttpContext.Session.SetObjectAsJson(\"Test\", myComplexObject);\n\nvar myComplexObject = HttpContext.Session.GetObjectFromJson<MyClass>(\"Test\");\n```\n\n##### 使用SQL Server或Redis存储\n1、SQL Server\n\n添加引用  \"Microsoft.Extensions.Caching.SqlServer\": \"1.0.0\"\n\n注入：\n```cs\n// Microsoft SQL Server implementation of IDistributedCache.\n// Note that this would require setting up the session state database.\nservices.AddSqlServerCache(o =>\n{\n    o.ConnectionString = \"Server=.;Database=ASPNET5SessionState;Trusted_Connection=True;\";\n    o.SchemaName = \"dbo\";\n    o.TableName = \"Sessions\";\n});\n```\n\n2、Redis\n\n添加引用   \"Microsoft.Extensions.Caching.Redis\": \"1.0.0\"\n\n注入：\n```cs\n// Redis implementation of IDistributedCache.\n// This will override any previously registered IDistributedCache service.\nservices.AddSingleton<IDistributedCache, RedisCache>();\n```","slug":"Asp-Net-Core中使用Session","published":1,"updated":"2021-03-30T03:24:16.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwze000wvcuacw3te98p","content":"<h5 id=\"添加Session\"><a href=\"#添加Session\" class=\"headerlink\" title=\"添加Session\"></a>添加Session</h5><p>在你的项目上基于NuGet添加：Microsoft.AspNetCore.Session。</p>\n<span id=\"more\"></span>\n\n<h5 id=\"修改Startup-cs\"><a href=\"#修改Startup-cs\" class=\"headerlink\" title=\"修改Startup.cs\"></a>修改Startup.cs</h5><p>在startup.cs找到方法ConfigureServices(IServiceCollection services) 注入Session(这个地方是Asp.net Core pipeline):services.AddSession();</p>\n<p>接下来我们要告诉Asp.net Core使用内存存储Session数据，在Configure(IApplicationBuilder app,…)中添加代码:app.UseSession();</p>\n<h5 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h5><ol>\n<li><p>在MVC Controller里使用HttpContext.Session</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span>:<span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        HttpContext.Session.SetString(<span class=\"string\">&quot;code&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">About</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ViewBag.Code=HttpContext.Session.GetString(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>如果不是在Controller里，你可以注入IHttpContextAccessor</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SomeOtherClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISession _session=&gt; _httpContextAccessor.HttpContext.Session;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SomeOtherClass</span>(<span class=\"params\">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _httpContextAccessor=httpContextAccessor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Set</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _session.SetString(<span class=\"string\">&quot;code&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> code = _session.GetString(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"存储复杂对象\"><a href=\"#存储复杂对象\" class=\"headerlink\" title=\"存储复杂对象\"></a>存储复杂对象</h5><p>存储对象时把对象序列化成一个json字符串存储。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetObjectAsJson</span>(<span class=\"params\"><span class=\"keyword\">this</span> ISession session, <span class=\"built_in\">string</span> key, <span class=\"built_in\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        session.SetString(key, JsonConvert.SerializeObject(<span class=\"keyword\">value</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T <span class=\"title\">GetObjectFromJson</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"keyword\">this</span> ISession session, <span class=\"built_in\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = session.GetString(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"literal\">default</span>(T) : JsonConvert.DeserializeObject&lt;T&gt;(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myComplexObject = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">HttpContext.Session.SetObjectAsJson(<span class=\"string\">&quot;Test&quot;</span>, myComplexObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myComplexObject = HttpContext.Session.GetObjectFromJson&lt;MyClass&gt;(<span class=\"string\">&quot;Test&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用SQL-Server或Redis存储\"><a href=\"#使用SQL-Server或Redis存储\" class=\"headerlink\" title=\"使用SQL Server或Redis存储\"></a>使用SQL Server或Redis存储</h5><p>1、SQL Server</p>\n<p>添加引用  “Microsoft.Extensions.Caching.SqlServer”: “1.0.0”</p>\n<p>注入：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Microsoft SQL Server implementation of IDistributedCache.</span></span><br><span class=\"line\"><span class=\"comment\">// Note that this would require setting up the session state database.</span></span><br><span class=\"line\">services.AddSqlServerCache(o =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    o.ConnectionString = <span class=\"string\">&quot;Server=.;Database=ASPNET5SessionState;Trusted_Connection=True;&quot;</span>;</span><br><span class=\"line\">    o.SchemaName = <span class=\"string\">&quot;dbo&quot;</span>;</span><br><span class=\"line\">    o.TableName = <span class=\"string\">&quot;Sessions&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>2、Redis</p>\n<p>添加引用   “Microsoft.Extensions.Caching.Redis”: “1.0.0”</p>\n<p>注入：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Redis implementation of IDistributedCache.</span></span><br><span class=\"line\"><span class=\"comment\">// This will override any previously registered IDistributedCache service.</span></span><br><span class=\"line\">services.AddSingleton&lt;IDistributedCache, RedisCache&gt;();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2421,"excerpt":"<h5 id=\"添加Session\"><a href=\"#添加Session\" class=\"headerlink\" title=\"添加Session\"></a>添加Session</h5><p>在你的项目上基于NuGet添加：Microsoft.AspNetCore.Session。</p>","more":"<h5 id=\"修改Startup-cs\"><a href=\"#修改Startup-cs\" class=\"headerlink\" title=\"修改Startup.cs\"></a>修改Startup.cs</h5><p>在startup.cs找到方法ConfigureServices(IServiceCollection services) 注入Session(这个地方是Asp.net Core pipeline):services.AddSession();</p>\n<p>接下来我们要告诉Asp.net Core使用内存存储Session数据，在Configure(IApplicationBuilder app,…)中添加代码:app.UseSession();</p>\n<h5 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h5><ol>\n<li><p>在MVC Controller里使用HttpContext.Session</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span>:<span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        HttpContext.Session.SetString(<span class=\"string\">&quot;code&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">About</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ViewBag.Code=HttpContext.Session.GetString(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>如果不是在Controller里，你可以注入IHttpContextAccessor</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SomeOtherClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISession _session=&gt; _httpContextAccessor.HttpContext.Session;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SomeOtherClass</span>(<span class=\"params\">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _httpContextAccessor=httpContextAccessor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Set</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _session.SetString(<span class=\"string\">&quot;code&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> code = _session.GetString(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"存储复杂对象\"><a href=\"#存储复杂对象\" class=\"headerlink\" title=\"存储复杂对象\"></a>存储复杂对象</h5><p>存储对象时把对象序列化成一个json字符串存储。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetObjectAsJson</span>(<span class=\"params\"><span class=\"keyword\">this</span> ISession session, <span class=\"built_in\">string</span> key, <span class=\"built_in\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        session.SetString(key, JsonConvert.SerializeObject(<span class=\"keyword\">value</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T <span class=\"title\">GetObjectFromJson</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"keyword\">this</span> ISession session, <span class=\"built_in\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = session.GetString(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"literal\">default</span>(T) : JsonConvert.DeserializeObject&lt;T&gt;(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myComplexObject = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">HttpContext.Session.SetObjectAsJson(<span class=\"string\">&quot;Test&quot;</span>, myComplexObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myComplexObject = HttpContext.Session.GetObjectFromJson&lt;MyClass&gt;(<span class=\"string\">&quot;Test&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用SQL-Server或Redis存储\"><a href=\"#使用SQL-Server或Redis存储\" class=\"headerlink\" title=\"使用SQL Server或Redis存储\"></a>使用SQL Server或Redis存储</h5><p>1、SQL Server</p>\n<p>添加引用  “Microsoft.Extensions.Caching.SqlServer”: “1.0.0”</p>\n<p>注入：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Microsoft SQL Server implementation of IDistributedCache.</span></span><br><span class=\"line\"><span class=\"comment\">// Note that this would require setting up the session state database.</span></span><br><span class=\"line\">services.AddSqlServerCache(o =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    o.ConnectionString = <span class=\"string\">&quot;Server=.;Database=ASPNET5SessionState;Trusted_Connection=True;&quot;</span>;</span><br><span class=\"line\">    o.SchemaName = <span class=\"string\">&quot;dbo&quot;</span>;</span><br><span class=\"line\">    o.TableName = <span class=\"string\">&quot;Sessions&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>2、Redis</p>\n<p>添加引用   “Microsoft.Extensions.Caching.Redis”: “1.0.0”</p>\n<p>注入：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Redis implementation of IDistributedCache.</span></span><br><span class=\"line\"><span class=\"comment\">// This will override any previously registered IDistributedCache service.</span></span><br><span class=\"line\">services.AddSingleton&lt;IDistributedCache, RedisCache&gt;();</span><br></pre></td></tr></table></figure>"},{"title":"C# 7.0 核心技术指南摘录(一)","date":"2019-08-15T14:56:12.000Z","_content":"### C# 7.0 新特性\n\n1. 数字字面量的改进\n    C# 7 中,数字字面量可以使用下划线来改善可读性,它们称为数字分隔符而被编译器忽略.\n\n    ```cs\n        int Max = 1_000_000;\n    ```\n    <!--more-->\n\n2. 输出变量及参数忽略\n    C# 7 中,调用含有out参数的方法将更加容易.首先,可以非常自然地声明输出变量.\n\n    ```cs\n    bool successful = int.TryParse(\"123\",out int result);\n    Console.WriteLine(result);\n    ```\n\n    当调用含有多个out参数的方法时,可以使用下划线字符忽略你并不关心的参数.\n\n    ```cs\n    SomBigMethod(out _, out _, out int x, out _, out _);\n    Console.WriteLine(x);\n    ```\n\n3. 模式\n    is 运算符也可以自然地引入变量了,称为模式变量.\n\n    ```cs\n    void Foo(object o)\n    {\n        if(x is string s)\n        {\n            Console.WriteLine(s.Lenght);\n        }\n    }\n    ```\n\n    switch 语句同样支持模式,因此我们不仅可以选择常量还可以选择类型;可以使用 when 子句来指定一个判断条件;或是直接选择 null;\n\n    ```cs\n    switch(x)\n    {\n        case int i:\n            Console.WriteLine(\"It's an int!\");\n            break;\n        case string s:\n            Console.WriteLine(s.Length);\n            break;\n        case bool b when b == true:\n            Console.WriteLine(\"True\");\n            break;\n        case null:\n            Console.WriteLine(\"Nothing\");\n            break;\n    }\n    ```\n\n4. 局部方法\n    局部方法是声明在其他函数内部的方法\n\n    ```cs\n    void WriteCubs()\n    {\n        Console.WriteLine(Cube(3));\n        Console.WriteLine(Cube(4));\n        Console.WriteLine(Cube(5));\n\n        int Cube(int value) => value * value * value;\n    }\n    ```\n\n    局部方法仅仅在其包含函数内可见,它们可以像 Lambda 表达式那样捕获局部变量.\n\n5. 更多的表达式体成员\n    C# 6 引入了以 \"胖箭头\" 语法表示的表达式体的方法、只读属性、运算符以及索引器.而 C# 7 更将其扩展到了构造函数、读/写属性和终结器中.\n\n    ```cs\n    public class Person\n    {\n        string name;\n        public Person(string name) => Name = name;\n        public string Name\n        {\n            get => name;\n            set => name = value ?? \"\";\n        }\n\n        ~Person() => Console.WriteLine(\"finalize\");\n    }\n    ```\n\n6. 解构器\n    C# 7 引入了解构器模式,构造器一般接受一系列值(作为参数)并将其赋值给字段,而解构器则正相反,它将字段反向赋值给变量.以下示例为Person类书写了一个解构器(不包含异常处理)\n\n    ```cs\n    public void Deconstruct(out string firstName, out string lastName)\n    {\n        int spacePos = name.IndexOf(' ');\n        firstName = name.Substring(0,spacePos);\n        lastName = name.Substring(spacePos + 1);\n    }\n    ```\n\n    解构器以特定的语法进行调用\n\n    ```cs\n    var joe = new Person(\"Joe Bolgs\");\n    var (first, last) = joe;\n    Console.WriteLine(first);\n    Console.WriteLine(last);\n    ```\n\n7. 元组\n    也许对于 C# 7 来说最值得一提的改进当属显式的元组(tuple)支持\n    元组提供了一种存储一系列相关值的简单方式\n\n    ```cs\n    var bob = (\"Bob\", 23);\n    Console.WriteLine(bob.Item1);\n    Console.WriteLine(bob.Item2);\n    ```\n\n    C# 的新元组实质上时使用System.ValueTuple<...> 泛型结构的语法糖.多亏了编译器的\"魔力\",我们还可以对元组的元素进行命名\n\n    ```cs\n    var tuple = (Name:\"Bob\" , Age:23);\n    Console.WriteLine(tuple.Name);\n    Console.WriteLine(tuple.Age);\n    ```\n\n    有了元组,函数也不必通过一系列 out 参数来返回多个值了\n\n    ```cs\n    static (int row, int column) GetFilePosition() => (3,10);\n\n    static void Main()\n    {\n        var pos = GetFilePosition();\n        Console.WriteLine(pos.row);\n        Console.WriteLine(pos.column);\n    }\n    ```\n\n    元组隐式地支持解构模式,因此很容易解构为若干独立的变量.因此,上述 Main 方法中的 GetFilePosition 返回的元组将存储于两个局部变量 row 和 column 中\n\n    ```cs\n    static void Main()\n    {\n        (row, column) = GetFilePosition();\n        Console.WriteLine(row);\n        Console.WriteLine(column);\n    }\n    ```\n\n8. throw 表达式\n    在 C# 7 之前,throw 一直是一个语句.现在,它也可以作为表达式出现在表达式体函数中\n\n    ```cs\n    public string Foo() => throw new NotImplementedException();\n    ```\n\n    throw 表达式也可以出现在三无判断运算符中\n\n    ```cs\n    string Capitalize(string value) => value == null ? throw new ArgumentException(\"value\") : value == \"\" ? \"\" : char.ToUpper(value[0]) + value.Substring(1);\n    ```\n","source":"_posts/CSharp-7.0-核心技术指南摘录(一).md","raw":"---\ntitle: 'C# 7.0 核心技术指南摘录(一)'\ndate: 2019-08-15 22:56:12\ncategories: C#\ntags:\n - C#\n - 摘录\n---\n### C# 7.0 新特性\n\n1. 数字字面量的改进\n    C# 7 中,数字字面量可以使用下划线来改善可读性,它们称为数字分隔符而被编译器忽略.\n\n    ```cs\n        int Max = 1_000_000;\n    ```\n    <!--more-->\n\n2. 输出变量及参数忽略\n    C# 7 中,调用含有out参数的方法将更加容易.首先,可以非常自然地声明输出变量.\n\n    ```cs\n    bool successful = int.TryParse(\"123\",out int result);\n    Console.WriteLine(result);\n    ```\n\n    当调用含有多个out参数的方法时,可以使用下划线字符忽略你并不关心的参数.\n\n    ```cs\n    SomBigMethod(out _, out _, out int x, out _, out _);\n    Console.WriteLine(x);\n    ```\n\n3. 模式\n    is 运算符也可以自然地引入变量了,称为模式变量.\n\n    ```cs\n    void Foo(object o)\n    {\n        if(x is string s)\n        {\n            Console.WriteLine(s.Lenght);\n        }\n    }\n    ```\n\n    switch 语句同样支持模式,因此我们不仅可以选择常量还可以选择类型;可以使用 when 子句来指定一个判断条件;或是直接选择 null;\n\n    ```cs\n    switch(x)\n    {\n        case int i:\n            Console.WriteLine(\"It's an int!\");\n            break;\n        case string s:\n            Console.WriteLine(s.Length);\n            break;\n        case bool b when b == true:\n            Console.WriteLine(\"True\");\n            break;\n        case null:\n            Console.WriteLine(\"Nothing\");\n            break;\n    }\n    ```\n\n4. 局部方法\n    局部方法是声明在其他函数内部的方法\n\n    ```cs\n    void WriteCubs()\n    {\n        Console.WriteLine(Cube(3));\n        Console.WriteLine(Cube(4));\n        Console.WriteLine(Cube(5));\n\n        int Cube(int value) => value * value * value;\n    }\n    ```\n\n    局部方法仅仅在其包含函数内可见,它们可以像 Lambda 表达式那样捕获局部变量.\n\n5. 更多的表达式体成员\n    C# 6 引入了以 \"胖箭头\" 语法表示的表达式体的方法、只读属性、运算符以及索引器.而 C# 7 更将其扩展到了构造函数、读/写属性和终结器中.\n\n    ```cs\n    public class Person\n    {\n        string name;\n        public Person(string name) => Name = name;\n        public string Name\n        {\n            get => name;\n            set => name = value ?? \"\";\n        }\n\n        ~Person() => Console.WriteLine(\"finalize\");\n    }\n    ```\n\n6. 解构器\n    C# 7 引入了解构器模式,构造器一般接受一系列值(作为参数)并将其赋值给字段,而解构器则正相反,它将字段反向赋值给变量.以下示例为Person类书写了一个解构器(不包含异常处理)\n\n    ```cs\n    public void Deconstruct(out string firstName, out string lastName)\n    {\n        int spacePos = name.IndexOf(' ');\n        firstName = name.Substring(0,spacePos);\n        lastName = name.Substring(spacePos + 1);\n    }\n    ```\n\n    解构器以特定的语法进行调用\n\n    ```cs\n    var joe = new Person(\"Joe Bolgs\");\n    var (first, last) = joe;\n    Console.WriteLine(first);\n    Console.WriteLine(last);\n    ```\n\n7. 元组\n    也许对于 C# 7 来说最值得一提的改进当属显式的元组(tuple)支持\n    元组提供了一种存储一系列相关值的简单方式\n\n    ```cs\n    var bob = (\"Bob\", 23);\n    Console.WriteLine(bob.Item1);\n    Console.WriteLine(bob.Item2);\n    ```\n\n    C# 的新元组实质上时使用System.ValueTuple<...> 泛型结构的语法糖.多亏了编译器的\"魔力\",我们还可以对元组的元素进行命名\n\n    ```cs\n    var tuple = (Name:\"Bob\" , Age:23);\n    Console.WriteLine(tuple.Name);\n    Console.WriteLine(tuple.Age);\n    ```\n\n    有了元组,函数也不必通过一系列 out 参数来返回多个值了\n\n    ```cs\n    static (int row, int column) GetFilePosition() => (3,10);\n\n    static void Main()\n    {\n        var pos = GetFilePosition();\n        Console.WriteLine(pos.row);\n        Console.WriteLine(pos.column);\n    }\n    ```\n\n    元组隐式地支持解构模式,因此很容易解构为若干独立的变量.因此,上述 Main 方法中的 GetFilePosition 返回的元组将存储于两个局部变量 row 和 column 中\n\n    ```cs\n    static void Main()\n    {\n        (row, column) = GetFilePosition();\n        Console.WriteLine(row);\n        Console.WriteLine(column);\n    }\n    ```\n\n8. throw 表达式\n    在 C# 7 之前,throw 一直是一个语句.现在,它也可以作为表达式出现在表达式体函数中\n\n    ```cs\n    public string Foo() => throw new NotImplementedException();\n    ```\n\n    throw 表达式也可以出现在三无判断运算符中\n\n    ```cs\n    string Capitalize(string value) => value == null ? throw new ArgumentException(\"value\") : value == \"\" ? \"\" : char.ToUpper(value[0]) + value.Substring(1);\n    ```\n","slug":"CSharp-7.0-核心技术指南摘录(一)","published":1,"updated":"2021-03-30T03:24:16.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzf000zvcuabaja5swd","content":"<h3 id=\"C-7-0-新特性\"><a href=\"#C-7-0-新特性\" class=\"headerlink\" title=\"C# 7.0 新特性\"></a>C# 7.0 新特性</h3><ol>\n<li><p>数字字面量的改进<br> C# 7 中,数字字面量可以使用下划线来改善可读性,它们称为数字分隔符而被编译器忽略.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> Max = <span class=\"number\">1</span>_000_000;</span><br></pre></td></tr></table></figure>\n <span id=\"more\"></span></li>\n<li><p>输出变量及参数忽略<br> C# 7 中,调用含有out参数的方法将更加容易.首先,可以非常自然地声明输出变量.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> successful = <span class=\"built_in\">int</span>.TryParse(<span class=\"string\">&quot;123&quot;</span>,<span class=\"keyword\">out</span> <span class=\"built_in\">int</span> result);</span><br><span class=\"line\">Console.WriteLine(result);</span><br></pre></td></tr></table></figure>\n\n<p> 当调用含有多个out参数的方法时,可以使用下划线字符忽略你并不关心的参数.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SomBigMethod(<span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> x, <span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> _);</span><br><span class=\"line\">Console.WriteLine(x);</span><br></pre></td></tr></table></figure></li>\n<li><p>模式<br> is 运算符也可以自然地引入变量了,称为模式变量.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span>(<span class=\"params\"><span class=\"built_in\">object</span> o</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x <span class=\"keyword\">is</span> <span class=\"built_in\">string</span> s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(s.Lenght);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> switch 语句同样支持模式,因此我们不仅可以选择常量还可以选择类型;可以使用 when 子句来指定一个判断条件;或是直接选择 null;</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"built_in\">int</span> i:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;It&#x27;s an int!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"built_in\">string</span> s:</span><br><span class=\"line\">        Console.WriteLine(s.Length);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"built_in\">bool</span> b <span class=\"keyword\">when</span> b == <span class=\"literal\">true</span>:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;True&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">null</span>:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Nothing&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>局部方法<br> 局部方法是声明在其他函数内部的方法</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">WriteCubs</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">3</span>));</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">4</span>));</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Cube</span>(<span class=\"params\"><span class=\"built_in\">int</span> <span class=\"keyword\">value</span></span>)</span> =&gt; <span class=\"keyword\">value</span> * <span class=\"keyword\">value</span> * <span class=\"keyword\">value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 局部方法仅仅在其包含函数内可见,它们可以像 Lambda 表达式那样捕获局部变量.</p>\n</li>\n<li><p>更多的表达式体成员<br> C# 6 引入了以 “胖箭头” 语法表示的表达式体的方法、只读属性、运算符以及索引器.而 C# 7 更将其扩展到了构造函数、读/写属性和终结器中.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span> =&gt; Name = name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; name;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; name = <span class=\"keyword\">value</span> ?? <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Person() =&gt; Console.WriteLine(<span class=\"string\">&quot;finalize&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>解构器<br> C# 7 引入了解构器模式,构造器一般接受一系列值(作为参数)并将其赋值给字段,而解构器则正相反,它将字段反向赋值给变量.以下示例为Person类书写了一个解构器(不包含异常处理)</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"built_in\">string</span> firstName, <span class=\"keyword\">out</span> <span class=\"built_in\">string</span> lastName</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> spacePos = name.IndexOf(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">    firstName = name.Substring(<span class=\"number\">0</span>,spacePos);</span><br><span class=\"line\">    lastName = name.Substring(spacePos + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 解构器以特定的语法进行调用</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> joe = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Joe Bolgs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> (first, last) = joe;</span><br><span class=\"line\">Console.WriteLine(first);</span><br><span class=\"line\">Console.WriteLine(last);</span><br></pre></td></tr></table></figure></li>\n<li><p>元组<br> 也许对于 C# 7 来说最值得一提的改进当属显式的元组(tuple)支持<br> 元组提供了一种存储一系列相关值的简单方式</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bob = (<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">Console.WriteLine(bob.Item1);</span><br><span class=\"line\">Console.WriteLine(bob.Item2);</span><br></pre></td></tr></table></figure>\n\n<p> C# 的新元组实质上时使用System.ValueTuple&lt;…&gt; 泛型结构的语法糖.多亏了编译器的”魔力”,我们还可以对元组的元素进行命名</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tuple = (Name:<span class=\"string\">&quot;Bob&quot;</span> , Age:<span class=\"number\">23</span>);</span><br><span class=\"line\">Console.WriteLine(tuple.Name);</span><br><span class=\"line\">Console.WriteLine(tuple.Age);</span><br></pre></td></tr></table></figure>\n\n<p> 有了元组,函数也不必通过一系列 out 参数来返回多个值了</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> (<span class=\"built_in\">int</span> row, <span class=\"built_in\">int</span> column) GetFilePosition() =&gt; (<span class=\"number\">3</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = GetFilePosition();</span><br><span class=\"line\">    Console.WriteLine(pos.row);</span><br><span class=\"line\">    Console.WriteLine(pos.column);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 元组隐式地支持解构模式,因此很容易解构为若干独立的变量.因此,上述 Main 方法中的 GetFilePosition 返回的元组将存储于两个局部变量 row 和 column 中</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    (row, column) = GetFilePosition();</span><br><span class=\"line\">    Console.WriteLine(row);</span><br><span class=\"line\">    Console.WriteLine(column);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>throw 表达式<br> 在 C# 7 之前,throw 一直是一个语句.现在,它也可以作为表达式出现在表达式体函数中</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span> =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException();</span><br></pre></td></tr></table></figure>\n\n<p> throw 表达式也可以出现在三无判断运算符中</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">Capitalize</span>(<span class=\"params\"><span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span> =&gt; <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">&quot;value&quot;</span>) : <span class=\"keyword\">value</span> == <span class=\"string\">&quot;&quot;</span> ? <span class=\"string\">&quot;&quot;</span> : <span class=\"built_in\">char</span>.ToUpper(<span class=\"keyword\">value</span>[<span class=\"number\">0</span>]) + <span class=\"keyword\">value</span>.Substring(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":2687,"excerpt":"<h3 id=\"C-7-0-新特性\"><a href=\"#C-7-0-新特性\" class=\"headerlink\" title=\"C# 7.0 新特性\"></a>C# 7.0 新特性</h3><ol>\n<li><p>数字字面量的改进<br> C# 7 中,数字字面量可以使用下划线来改善可读性,它们称为数字分隔符而被编译器忽略.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> Max = <span class=\"number\">1</span>_000_000;</span><br></pre></td></tr></table></figure>","more":"</li>\n<li><p>输出变量及参数忽略<br> C# 7 中,调用含有out参数的方法将更加容易.首先,可以非常自然地声明输出变量.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> successful = <span class=\"built_in\">int</span>.TryParse(<span class=\"string\">&quot;123&quot;</span>,<span class=\"keyword\">out</span> <span class=\"built_in\">int</span> result);</span><br><span class=\"line\">Console.WriteLine(result);</span><br></pre></td></tr></table></figure>\n\n<p> 当调用含有多个out参数的方法时,可以使用下划线字符忽略你并不关心的参数.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SomBigMethod(<span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> x, <span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> _);</span><br><span class=\"line\">Console.WriteLine(x);</span><br></pre></td></tr></table></figure></li>\n<li><p>模式<br> is 运算符也可以自然地引入变量了,称为模式变量.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span>(<span class=\"params\"><span class=\"built_in\">object</span> o</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x <span class=\"keyword\">is</span> <span class=\"built_in\">string</span> s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(s.Lenght);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> switch 语句同样支持模式,因此我们不仅可以选择常量还可以选择类型;可以使用 when 子句来指定一个判断条件;或是直接选择 null;</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"built_in\">int</span> i:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;It&#x27;s an int!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"built_in\">string</span> s:</span><br><span class=\"line\">        Console.WriteLine(s.Length);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"built_in\">bool</span> b <span class=\"keyword\">when</span> b == <span class=\"literal\">true</span>:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;True&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">null</span>:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Nothing&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>局部方法<br> 局部方法是声明在其他函数内部的方法</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">WriteCubs</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">3</span>));</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">4</span>));</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Cube</span>(<span class=\"params\"><span class=\"built_in\">int</span> <span class=\"keyword\">value</span></span>)</span> =&gt; <span class=\"keyword\">value</span> * <span class=\"keyword\">value</span> * <span class=\"keyword\">value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 局部方法仅仅在其包含函数内可见,它们可以像 Lambda 表达式那样捕获局部变量.</p>\n</li>\n<li><p>更多的表达式体成员<br> C# 6 引入了以 “胖箭头” 语法表示的表达式体的方法、只读属性、运算符以及索引器.而 C# 7 更将其扩展到了构造函数、读/写属性和终结器中.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span> =&gt; Name = name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; name;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; name = <span class=\"keyword\">value</span> ?? <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Person() =&gt; Console.WriteLine(<span class=\"string\">&quot;finalize&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>解构器<br> C# 7 引入了解构器模式,构造器一般接受一系列值(作为参数)并将其赋值给字段,而解构器则正相反,它将字段反向赋值给变量.以下示例为Person类书写了一个解构器(不包含异常处理)</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"built_in\">string</span> firstName, <span class=\"keyword\">out</span> <span class=\"built_in\">string</span> lastName</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> spacePos = name.IndexOf(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">    firstName = name.Substring(<span class=\"number\">0</span>,spacePos);</span><br><span class=\"line\">    lastName = name.Substring(spacePos + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 解构器以特定的语法进行调用</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> joe = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Joe Bolgs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> (first, last) = joe;</span><br><span class=\"line\">Console.WriteLine(first);</span><br><span class=\"line\">Console.WriteLine(last);</span><br></pre></td></tr></table></figure></li>\n<li><p>元组<br> 也许对于 C# 7 来说最值得一提的改进当属显式的元组(tuple)支持<br> 元组提供了一种存储一系列相关值的简单方式</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bob = (<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">Console.WriteLine(bob.Item1);</span><br><span class=\"line\">Console.WriteLine(bob.Item2);</span><br></pre></td></tr></table></figure>\n\n<p> C# 的新元组实质上时使用System.ValueTuple&lt;…&gt; 泛型结构的语法糖.多亏了编译器的”魔力”,我们还可以对元组的元素进行命名</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tuple = (Name:<span class=\"string\">&quot;Bob&quot;</span> , Age:<span class=\"number\">23</span>);</span><br><span class=\"line\">Console.WriteLine(tuple.Name);</span><br><span class=\"line\">Console.WriteLine(tuple.Age);</span><br></pre></td></tr></table></figure>\n\n<p> 有了元组,函数也不必通过一系列 out 参数来返回多个值了</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> (<span class=\"built_in\">int</span> row, <span class=\"built_in\">int</span> column) GetFilePosition() =&gt; (<span class=\"number\">3</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = GetFilePosition();</span><br><span class=\"line\">    Console.WriteLine(pos.row);</span><br><span class=\"line\">    Console.WriteLine(pos.column);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 元组隐式地支持解构模式,因此很容易解构为若干独立的变量.因此,上述 Main 方法中的 GetFilePosition 返回的元组将存储于两个局部变量 row 和 column 中</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    (row, column) = GetFilePosition();</span><br><span class=\"line\">    Console.WriteLine(row);</span><br><span class=\"line\">    Console.WriteLine(column);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>throw 表达式<br> 在 C# 7 之前,throw 一直是一个语句.现在,它也可以作为表达式出现在表达式体函数中</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span> =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException();</span><br></pre></td></tr></table></figure>\n\n<p> throw 表达式也可以出现在三无判断运算符中</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">Capitalize</span>(<span class=\"params\"><span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span> =&gt; <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">&quot;value&quot;</span>) : <span class=\"keyword\">value</span> == <span class=\"string\">&quot;&quot;</span> ? <span class=\"string\">&quot;&quot;</span> : <span class=\"built_in\">char</span>.ToUpper(<span class=\"keyword\">value</span>[<span class=\"number\">0</span>]) + <span class=\"keyword\">value</span>.Substring(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"CSharp 7.0 核心技术指南摘录(三)","date":"2019-08-19T15:14:58.000Z","_content":"### 解构器\n\n一个解构器就像构造器的反过程:构造器使用若干值作为参数,并且将它们赋值给字段;而解构器则相反将字段反向赋值给若干变量\n<!--more-->\n解构方法的名字必须为Deconstruct,并且拥有一个或多个out参数\n\n```cs\nclass Rectangle\n{\n    public readonly float Width, Height;\n\n    public Rectangle(float width, float height)\n    {\n        Width = width;\n        Height = height;\n    }\n\n    public void Deconstruct(out float width, out float height)\n    {\n        width = Width;\n        height = Height;\n    }\n}\n```\n\n调用解造器,语法如下\n\n```cs\nvar rect = new Rectangle(3 , 4);\n(float width, float height) = rect;\n```\n\n等价于\n\n```cs\nfloat width, height;\nrect.Deconstruct(out width, out height);\n// rect.Deconstruct(out var width, out var height);\n```\n\n解构调用允许隐式类型推断,可简写为\n\n```cs\n(var width, var height) = rect;\n// var (width, height) = rect;\n```\n\n如果解构中的变量已经定义过了,那么可以忽略类型声明\n\n```cs\nfloat width, height;\n(width, height) = rect;\n```\n\n### 委托\n\n委托是一种知道如何调用方法的对象\n委托类型定义了一个委托实例可以调用的方法,具体来说,它定义了方法的返回类型和参数类型.\n\n```cs\ndelegate int Transformer(int x);\nclasee Test\n{\n    static void Main()\n    {\n        Transformer t = Square;\n        // Transformer t = new Transformer(Square);\n        int result = t(3);\n        // int result = t.Invoke(3);\n        Console.WriteLine(result);\n    }\n    static int Square(int x) => x * x;\n}\n```\n\n委托实例字面上是调用者的代理:调用者调用委托,而委托调用目标方法.这种间接调用方式可以将调用者和目标方法解耦.\n\n#### 用委托书写插件方法\n\n委托变量可以在运行时指定一个目标方法,这个特性可用于编写插件方法,下面的例子中有一个名为Transform的公共方法,它对整数数组的每一个元素进行变换.Transfornm方法接受一个委托参数并以此为插件方法执行变换操作\n\n```cs\npublic delegate int Transformer (int x);\n\nclass Util\n{\n    public static void Transform(int[] values, Transformer t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t(values[i]);\n        }\n    }\n}\n\nclass Test\n{\n    static void Main()\n    {\n        int[] values = {1, 2, 3};\n        Util.Transform(values, Square);\n        foreach( int i in values)\n        {\n            Console.WriteLine(i+\" \");\n        }\n    }\n\n    static int Square(int x) => x * x;\n}\n```\n\n#### 多播委托\n\n所有的委托实例都拥有多播能力,这意味着一个委托实例可以引用一个目标方法,也可以引用一组目标方法.委托可以使用 + 和 += 联结多个委托实例, - 和 -= 会从左侧委托操作数上将右侧委托数删除.\n委托是不可变的,因此调用 += 和 -= 的实质是创建一个新的委托实例,并把它赋值给已有变量.\n若方法的执行时间很长,且该方法定时调用一个委托像调用者报告进程的执行情况.例如,在以下代码中,HardWord 方法通过调用 ProgressReporter 委托参数报告执行进度\n\n```cs\npublic delegate void PeogressReporter (int percentComplete);\n\npublic class Util\n{\n    public static void HardWork (ProgressReporter p)\n    {\n        for(int i = 0; i < 10; i++)\n        {\n            p(i * 10);\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n}\n```\n\n为了监视进度,在Main方法中创建了一个多播委托实例p,这样就可以通过两个独立的方法监视执行进度\n\n```cs\nclass Test\n{\n    static void Main()\n    {\n        ProgressReporter p = WriteProgressToConsole;\n        p += WriteProgressToFile;\n        Util.HardWork(p);\n    }\n\n    static void WriteProgressToConsole(int percentComplete) => Console.WriteLine(percentComplete);\n\n    static void WriteProgressToFile(int percentComplete) => System.IO.File.WriteAllText(\"process.txt\", percentComplete.ToString());\n}\n```\n\n#### 实例目标方法和静态目标方法\n\n将一个实例方法赋值给委托对象时,后者不但要维护方法的引用,还需要维护方法所属的实例的引用.System.Delegate 类的 Target 属性代表这个实例(如果委托引用的是一个静态方法,则该属性值为null).\n\n```cs\npublic delegate void ProgressReporter (int percentComplete);\n\nclass T\n{\n    static void Main()\n    {\n        X x = new X();\n        ProgressReporter p = x.InstanceProgress;\n        p(99);\n        Console.WriteLine(p.Target = x);\n        Console.WriteLine(p.Method);\n    }\n}\n\nclass X\n{\n    public void InstanceProgress(int percentComplete) => Console.WriteLine(percentComplete);\n}\n```\n\n#### 泛型委托类型\n\n委托类型可以包含泛型类型参数.\n\n```cs\npublic class Util\n{\n    public static void Transform<T> (T[] values, Transformer<T> t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t(values[i]);\n        }\n    }\n}\n\nclass Test\n{\n    static void Main()\n    {\n        int[] values = {1, 2, 3};\n        Util.Transform(values, Square);\n        foreach(int i in values)\n        {\n            Console.WriteLine(i + \" \");\n        }\n    }\n\n    static int Square(int x) => x * x;\n}\n```\n\n#### Func 和 Action 委托\n\n有了泛型委托,我们就可以定义出一些非常通用的小型委托类型,它们可以具有任意的返回类型和(合理的)任意数目的参数.它们就是定义在 System 命名空间下的 Func 和 Action 委托\n\n```cs\ndelegate TResult Func <out TResult> ();\ndelegate TResult Func <in T, out TResult> (T arg);\ndelegate TResult Func <in T1, in T2, out TResult> (T1 arg1, T2 arg2);\n....\n\ndelegate void Action ();\ndelegate void Action <in T> (T arg);\ndelegate void Action <in T1, in T2> (T1 arg1, T2 arg2);\n...\n\n```\n\n#### 委托和接口\n\n能用委托解决的问题,都可以用接口解决\n\n```cs\npublic interface ITransformer\n{\n    int Transform (int x);\n}\n\npublic class Util\n{\n    public static void TransformAll (int[] values, ITransformer t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t.Transform(values[i]);\n        }\n    }\n}\n\nclass Squarer : ITransformer\n{\n    public int Transform (int x) => x * x;\n}\n\nstatic void Main()\n{\n    int[] values = { 1, 2, 3};\n    Util.TransforAll(values, new Squarer());\n    foreach(int i in values)\n    {\n        Console.WriteLine(i + \" \");\n    }\n}\n```\n\n如果以下一个或多个条件成立,委托可能是比接口更好的选择\n\n* 接口内仅定义了一个方法\n* 需要多播能力\n* 订阅者需要多次实现接口\n\n#### 委托的兼容性\n\n##### 类型的兼容性\n\n即使签名相似,委托类型也互不兼容\n\n```cs\ndelegate void D1();\ndelegate void D2();\n\nD1 d1 = Method;\nD2 d2 = d1;     //Compile-time error\n```\n\n但是允许下面的写法\n\n```cs\nD2 d2 = new D2 (d1);\n```\n\n如果委托实例指向相同的目标方法,则认为它们是相等的\n如果多播委托按照相同的顺序引用相同的方法,则认为它们是相等的\n\n##### 参数的兼容性\n\n当调用方法时,可以给方法的参数提供更加特定的变量类型,这是正常的多态行为.基于同样的原因,委托也可以有比它目标方法参数类型更加具体的参数类型,这称为逆变.\n\n```cs\ndelegate void StringAction (string s);\n\nclass Test\n{\n    static void Main()\n    {\n        StringAction sa = new StringAction(ActOnObject);\n        sa(\"hello\");\n    }\n\n    static void ActOnObject (object o) => Console.WriteLine(o);\n}\n```\n\n##### 返回类型的兼容性\n\n调用方法时可能得到比请求类型更加特定的返回值类型,这也是正常的多态行为.基于同样的原因,委托的目标方法可能返回比委托声明的返回值类型更加特定的返回值类型,这称为协变.\n\n```cs\ndelegate object ObjectRetriever();\n\nclass Test\n{\n    static void Main()\n    {\n        ObjectRetriever o = new ObjectRetriver (RetrieveString);\n        object result = o();\n        Console.WriteLine(result);\n    }\n\n    static string RetrieveString() => \"hello\";\n}\n```\n\n##### 泛型委托类型的参数协变\n\n如果我们要定义一个泛型委托类型,那么最好参考如下的准则\n\n* 将只用于返回值类型的类型参数标记为协变(out)\n* 将只用于参数的任意类型标记为逆变(in)\n\n这样可以依照类型的继承关系自然地进行类型转换.\n\n```cs\ndelegate TResult Func<out TResult>();\nFunc<string> x = ...;\nFunc<object> y = x;\n\ndelegate void Action<in T> (T arg);\nAction<object> x = ...;\nAction<string> y = x;\n```\n","source":"_posts/CSharp-7.0-核心技术指南摘录(三).md","raw":"---\ntitle: CSharp 7.0 核心技术指南摘录(三)\ndate: 2019-08-19 23:14:58\ncategories: C#\ntags:\n - C#\n - 摘录\n - 解构器\n - 委托\n---\n### 解构器\n\n一个解构器就像构造器的反过程:构造器使用若干值作为参数,并且将它们赋值给字段;而解构器则相反将字段反向赋值给若干变量\n<!--more-->\n解构方法的名字必须为Deconstruct,并且拥有一个或多个out参数\n\n```cs\nclass Rectangle\n{\n    public readonly float Width, Height;\n\n    public Rectangle(float width, float height)\n    {\n        Width = width;\n        Height = height;\n    }\n\n    public void Deconstruct(out float width, out float height)\n    {\n        width = Width;\n        height = Height;\n    }\n}\n```\n\n调用解造器,语法如下\n\n```cs\nvar rect = new Rectangle(3 , 4);\n(float width, float height) = rect;\n```\n\n等价于\n\n```cs\nfloat width, height;\nrect.Deconstruct(out width, out height);\n// rect.Deconstruct(out var width, out var height);\n```\n\n解构调用允许隐式类型推断,可简写为\n\n```cs\n(var width, var height) = rect;\n// var (width, height) = rect;\n```\n\n如果解构中的变量已经定义过了,那么可以忽略类型声明\n\n```cs\nfloat width, height;\n(width, height) = rect;\n```\n\n### 委托\n\n委托是一种知道如何调用方法的对象\n委托类型定义了一个委托实例可以调用的方法,具体来说,它定义了方法的返回类型和参数类型.\n\n```cs\ndelegate int Transformer(int x);\nclasee Test\n{\n    static void Main()\n    {\n        Transformer t = Square;\n        // Transformer t = new Transformer(Square);\n        int result = t(3);\n        // int result = t.Invoke(3);\n        Console.WriteLine(result);\n    }\n    static int Square(int x) => x * x;\n}\n```\n\n委托实例字面上是调用者的代理:调用者调用委托,而委托调用目标方法.这种间接调用方式可以将调用者和目标方法解耦.\n\n#### 用委托书写插件方法\n\n委托变量可以在运行时指定一个目标方法,这个特性可用于编写插件方法,下面的例子中有一个名为Transform的公共方法,它对整数数组的每一个元素进行变换.Transfornm方法接受一个委托参数并以此为插件方法执行变换操作\n\n```cs\npublic delegate int Transformer (int x);\n\nclass Util\n{\n    public static void Transform(int[] values, Transformer t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t(values[i]);\n        }\n    }\n}\n\nclass Test\n{\n    static void Main()\n    {\n        int[] values = {1, 2, 3};\n        Util.Transform(values, Square);\n        foreach( int i in values)\n        {\n            Console.WriteLine(i+\" \");\n        }\n    }\n\n    static int Square(int x) => x * x;\n}\n```\n\n#### 多播委托\n\n所有的委托实例都拥有多播能力,这意味着一个委托实例可以引用一个目标方法,也可以引用一组目标方法.委托可以使用 + 和 += 联结多个委托实例, - 和 -= 会从左侧委托操作数上将右侧委托数删除.\n委托是不可变的,因此调用 += 和 -= 的实质是创建一个新的委托实例,并把它赋值给已有变量.\n若方法的执行时间很长,且该方法定时调用一个委托像调用者报告进程的执行情况.例如,在以下代码中,HardWord 方法通过调用 ProgressReporter 委托参数报告执行进度\n\n```cs\npublic delegate void PeogressReporter (int percentComplete);\n\npublic class Util\n{\n    public static void HardWork (ProgressReporter p)\n    {\n        for(int i = 0; i < 10; i++)\n        {\n            p(i * 10);\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n}\n```\n\n为了监视进度,在Main方法中创建了一个多播委托实例p,这样就可以通过两个独立的方法监视执行进度\n\n```cs\nclass Test\n{\n    static void Main()\n    {\n        ProgressReporter p = WriteProgressToConsole;\n        p += WriteProgressToFile;\n        Util.HardWork(p);\n    }\n\n    static void WriteProgressToConsole(int percentComplete) => Console.WriteLine(percentComplete);\n\n    static void WriteProgressToFile(int percentComplete) => System.IO.File.WriteAllText(\"process.txt\", percentComplete.ToString());\n}\n```\n\n#### 实例目标方法和静态目标方法\n\n将一个实例方法赋值给委托对象时,后者不但要维护方法的引用,还需要维护方法所属的实例的引用.System.Delegate 类的 Target 属性代表这个实例(如果委托引用的是一个静态方法,则该属性值为null).\n\n```cs\npublic delegate void ProgressReporter (int percentComplete);\n\nclass T\n{\n    static void Main()\n    {\n        X x = new X();\n        ProgressReporter p = x.InstanceProgress;\n        p(99);\n        Console.WriteLine(p.Target = x);\n        Console.WriteLine(p.Method);\n    }\n}\n\nclass X\n{\n    public void InstanceProgress(int percentComplete) => Console.WriteLine(percentComplete);\n}\n```\n\n#### 泛型委托类型\n\n委托类型可以包含泛型类型参数.\n\n```cs\npublic class Util\n{\n    public static void Transform<T> (T[] values, Transformer<T> t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t(values[i]);\n        }\n    }\n}\n\nclass Test\n{\n    static void Main()\n    {\n        int[] values = {1, 2, 3};\n        Util.Transform(values, Square);\n        foreach(int i in values)\n        {\n            Console.WriteLine(i + \" \");\n        }\n    }\n\n    static int Square(int x) => x * x;\n}\n```\n\n#### Func 和 Action 委托\n\n有了泛型委托,我们就可以定义出一些非常通用的小型委托类型,它们可以具有任意的返回类型和(合理的)任意数目的参数.它们就是定义在 System 命名空间下的 Func 和 Action 委托\n\n```cs\ndelegate TResult Func <out TResult> ();\ndelegate TResult Func <in T, out TResult> (T arg);\ndelegate TResult Func <in T1, in T2, out TResult> (T1 arg1, T2 arg2);\n....\n\ndelegate void Action ();\ndelegate void Action <in T> (T arg);\ndelegate void Action <in T1, in T2> (T1 arg1, T2 arg2);\n...\n\n```\n\n#### 委托和接口\n\n能用委托解决的问题,都可以用接口解决\n\n```cs\npublic interface ITransformer\n{\n    int Transform (int x);\n}\n\npublic class Util\n{\n    public static void TransformAll (int[] values, ITransformer t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t.Transform(values[i]);\n        }\n    }\n}\n\nclass Squarer : ITransformer\n{\n    public int Transform (int x) => x * x;\n}\n\nstatic void Main()\n{\n    int[] values = { 1, 2, 3};\n    Util.TransforAll(values, new Squarer());\n    foreach(int i in values)\n    {\n        Console.WriteLine(i + \" \");\n    }\n}\n```\n\n如果以下一个或多个条件成立,委托可能是比接口更好的选择\n\n* 接口内仅定义了一个方法\n* 需要多播能力\n* 订阅者需要多次实现接口\n\n#### 委托的兼容性\n\n##### 类型的兼容性\n\n即使签名相似,委托类型也互不兼容\n\n```cs\ndelegate void D1();\ndelegate void D2();\n\nD1 d1 = Method;\nD2 d2 = d1;     //Compile-time error\n```\n\n但是允许下面的写法\n\n```cs\nD2 d2 = new D2 (d1);\n```\n\n如果委托实例指向相同的目标方法,则认为它们是相等的\n如果多播委托按照相同的顺序引用相同的方法,则认为它们是相等的\n\n##### 参数的兼容性\n\n当调用方法时,可以给方法的参数提供更加特定的变量类型,这是正常的多态行为.基于同样的原因,委托也可以有比它目标方法参数类型更加具体的参数类型,这称为逆变.\n\n```cs\ndelegate void StringAction (string s);\n\nclass Test\n{\n    static void Main()\n    {\n        StringAction sa = new StringAction(ActOnObject);\n        sa(\"hello\");\n    }\n\n    static void ActOnObject (object o) => Console.WriteLine(o);\n}\n```\n\n##### 返回类型的兼容性\n\n调用方法时可能得到比请求类型更加特定的返回值类型,这也是正常的多态行为.基于同样的原因,委托的目标方法可能返回比委托声明的返回值类型更加特定的返回值类型,这称为协变.\n\n```cs\ndelegate object ObjectRetriever();\n\nclass Test\n{\n    static void Main()\n    {\n        ObjectRetriever o = new ObjectRetriver (RetrieveString);\n        object result = o();\n        Console.WriteLine(result);\n    }\n\n    static string RetrieveString() => \"hello\";\n}\n```\n\n##### 泛型委托类型的参数协变\n\n如果我们要定义一个泛型委托类型,那么最好参考如下的准则\n\n* 将只用于返回值类型的类型参数标记为协变(out)\n* 将只用于参数的任意类型标记为逆变(in)\n\n这样可以依照类型的继承关系自然地进行类型转换.\n\n```cs\ndelegate TResult Func<out TResult>();\nFunc<string> x = ...;\nFunc<object> y = x;\n\ndelegate void Action<in T> (T arg);\nAction<object> x = ...;\nAction<string> y = x;\n```\n","slug":"CSharp-7.0-核心技术指南摘录(三)","published":1,"updated":"2021-03-30T03:24:16.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzg0012vcuafvjvdrqn","content":"<h3 id=\"解构器\"><a href=\"#解构器\" class=\"headerlink\" title=\"解构器\"></a>解构器</h3><p>一个解构器就像构造器的反过程:构造器使用若干值作为参数,并且将它们赋值给字段;而解构器则相反将字段反向赋值给若干变量</p>\n<span id=\"more\"></span>\n<p>解构方法的名字必须为Deconstruct,并且拥有一个或多个out参数</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">float</span> Width, Height;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span>(<span class=\"params\"><span class=\"built_in\">float</span> width, <span class=\"built_in\">float</span> height</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Width = width;</span><br><span class=\"line\">        Height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"built_in\">float</span> width, <span class=\"keyword\">out</span> <span class=\"built_in\">float</span> height</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        width = Width;</span><br><span class=\"line\">        height = Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用解造器,语法如下</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">3</span> , <span class=\"number\">4</span>);</span><br><span class=\"line\">(<span class=\"built_in\">float</span> width, <span class=\"built_in\">float</span> height) = rect;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span> width, height;</span><br><span class=\"line\">rect.Deconstruct(<span class=\"keyword\">out</span> width, <span class=\"keyword\">out</span> height);</span><br><span class=\"line\"><span class=\"comment\">// rect.Deconstruct(out var width, out var height);</span></span><br></pre></td></tr></table></figure>\n\n<p>解构调用允许隐式类型推断,可简写为</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">var</span> width, <span class=\"keyword\">var</span> height) = rect;</span><br><span class=\"line\"><span class=\"comment\">// var (width, height) = rect;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果解构中的变量已经定义过了,那么可以忽略类型声明</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span> width, height;</span><br><span class=\"line\">(width, height) = rect;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h3><p>委托是一种知道如何调用方法的对象<br>委托类型定义了一个委托实例可以调用的方法,具体来说,它定义了方法的返回类型和参数类型.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"built_in\">int</span> <span class=\"title\">Transformer</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span>;</span><br><span class=\"line\">clasee Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Transformer t = Square;</span><br><span class=\"line\">        <span class=\"comment\">// Transformer t = new Transformer(Square);</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> result = t(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"comment\">// int result = t.Invoke(3);</span></span><br><span class=\"line\">        Console.WriteLine(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span> =&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>委托实例字面上是调用者的代理:调用者调用委托,而委托调用目标方法.这种间接调用方式可以将调用者和目标方法解耦.</p>\n<h4 id=\"用委托书写插件方法\"><a href=\"#用委托书写插件方法\" class=\"headerlink\" title=\"用委托书写插件方法\"></a>用委托书写插件方法</h4><p>委托变量可以在运行时指定一个目标方法,这个特性可用于编写插件方法,下面的例子中有一个名为Transform的公共方法,它对整数数组的每一个元素进行变换.Transfornm方法接受一个委托参数并以此为插件方法执行变换操作</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">int</span> <span class=\"title\">Transformer</span> (<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Transform</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] values, Transformer t</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] values = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        Util.Transform(values, Square);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>( <span class=\"built_in\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(i+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span> =&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多播委托\"><a href=\"#多播委托\" class=\"headerlink\" title=\"多播委托\"></a>多播委托</h4><p>所有的委托实例都拥有多播能力,这意味着一个委托实例可以引用一个目标方法,也可以引用一组目标方法.委托可以使用 + 和 += 联结多个委托实例, - 和 -= 会从左侧委托操作数上将右侧委托数删除.<br>委托是不可变的,因此调用 += 和 -= 的实质是创建一个新的委托实例,并把它赋值给已有变量.<br>若方法的执行时间很长,且该方法定时调用一个委托像调用者报告进程的执行情况.例如,在以下代码中,HardWord 方法通过调用 ProgressReporter 委托参数报告执行进度</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">PeogressReporter</span> (<span class=\"params\"><span class=\"built_in\">int</span> percentComplete</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">HardWork</span> (<span class=\"params\">ProgressReporter p</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p(i * <span class=\"number\">10</span>);</span><br><span class=\"line\">            System.Threading.Thread.Sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了监视进度,在Main方法中创建了一个多播委托实例p,这样就可以通过两个独立的方法监视执行进度</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ProgressReporter p = WriteProgressToConsole;</span><br><span class=\"line\">        p += WriteProgressToFile;</span><br><span class=\"line\">        Util.HardWork(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteProgressToConsole</span>(<span class=\"params\"><span class=\"built_in\">int</span> percentComplete</span>)</span> =&gt; Console.WriteLine(percentComplete);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteProgressToFile</span>(<span class=\"params\"><span class=\"built_in\">int</span> percentComplete</span>)</span> =&gt; System.IO.File.WriteAllText(<span class=\"string\">&quot;process.txt&quot;</span>, percentComplete.ToString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实例目标方法和静态目标方法\"><a href=\"#实例目标方法和静态目标方法\" class=\"headerlink\" title=\"实例目标方法和静态目标方法\"></a>实例目标方法和静态目标方法</h4><p>将一个实例方法赋值给委托对象时,后者不但要维护方法的引用,还需要维护方法所属的实例的引用.System.Delegate 类的 Target 属性代表这个实例(如果委托引用的是一个静态方法,则该属性值为null).</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">ProgressReporter</span> (<span class=\"params\"><span class=\"built_in\">int</span> percentComplete</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">T</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        X x = <span class=\"keyword\">new</span> X();</span><br><span class=\"line\">        ProgressReporter p = x.InstanceProgress;</span><br><span class=\"line\">        p(<span class=\"number\">99</span>);</span><br><span class=\"line\">        Console.WriteLine(p.Target = x);</span><br><span class=\"line\">        Console.WriteLine(p.Method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">X</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InstanceProgress</span>(<span class=\"params\"><span class=\"built_in\">int</span> percentComplete</span>)</span> =&gt; Console.WriteLine(percentComplete);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"泛型委托类型\"><a href=\"#泛型委托类型\" class=\"headerlink\" title=\"泛型委托类型\"></a>泛型委托类型</h4><p>委托类型可以包含泛型类型参数.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Transform</span>&lt;<span class=\"title\">T</span>&gt; (<span class=\"params\">T[] values, Transformer&lt;T&gt; t</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] values = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        Util.Transform(values, Square);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"built_in\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span> =&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Func-和-Action-委托\"><a href=\"#Func-和-Action-委托\" class=\"headerlink\" title=\"Func 和 Action 委托\"></a>Func 和 Action 委托</h4><p>有了泛型委托,我们就可以定义出一些非常通用的小型委托类型,它们可以具有任意的返回类型和(合理的)任意数目的参数.它们就是定义在 System 命名空间下的 Func 和 Action 委托</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> TResult <span class=\"title\">Func</span> &lt;<span class=\"keyword\">out</span> TResult&gt; (<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> TResult <span class=\"title\">Func</span> &lt;<span class=\"keyword\">in</span> T, <span class=\"keyword\">out</span> TResult&gt; (<span class=\"params\">T arg</span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> TResult <span class=\"title\">Func</span> &lt;<span class=\"keyword\">in</span> T1, <span class=\"keyword\">in</span> T2, <span class=\"keyword\">out</span> TResult&gt; (<span class=\"params\">T1 arg1, T2 arg2</span>)</span>;</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span> (<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span> &lt;<span class=\"keyword\">in</span> T&gt; (<span class=\"params\">T arg</span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span> &lt;<span class=\"keyword\">in</span> T1, <span class=\"keyword\">in</span> T2&gt; (<span class=\"params\">T1 arg1, T2 arg2</span>)</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"委托和接口\"><a href=\"#委托和接口\" class=\"headerlink\" title=\"委托和接口\"></a>委托和接口</h4><p>能用委托解决的问题,都可以用接口解决</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ITransformer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Transform</span> (<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TransformAll</span> (<span class=\"params\"><span class=\"built_in\">int</span>[] values, ITransformer t</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t.Transform(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Squarer</span> : <span class=\"title\">ITransformer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Transform</span> (<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span> =&gt; x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span>[] values = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    Util.TransforAll(values, <span class=\"keyword\">new</span> Squarer());</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(<span class=\"built_in\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果以下一个或多个条件成立,委托可能是比接口更好的选择</p>\n<ul>\n<li>接口内仅定义了一个方法</li>\n<li>需要多播能力</li>\n<li>订阅者需要多次实现接口</li>\n</ul>\n<h4 id=\"委托的兼容性\"><a href=\"#委托的兼容性\" class=\"headerlink\" title=\"委托的兼容性\"></a>委托的兼容性</h4><h5 id=\"类型的兼容性\"><a href=\"#类型的兼容性\" class=\"headerlink\" title=\"类型的兼容性\"></a>类型的兼容性</h5><p>即使签名相似,委托类型也互不兼容</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">D1</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">D2</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">D1 d1 = Method;</span><br><span class=\"line\">D2 d2 = d1;     <span class=\"comment\">//Compile-time error</span></span><br></pre></td></tr></table></figure>\n\n<p>但是允许下面的写法</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D2 d2 = <span class=\"keyword\">new</span> D2 (d1);</span><br></pre></td></tr></table></figure>\n\n<p>如果委托实例指向相同的目标方法,则认为它们是相等的<br>如果多播委托按照相同的顺序引用相同的方法,则认为它们是相等的</p>\n<h5 id=\"参数的兼容性\"><a href=\"#参数的兼容性\" class=\"headerlink\" title=\"参数的兼容性\"></a>参数的兼容性</h5><p>当调用方法时,可以给方法的参数提供更加特定的变量类型,这是正常的多态行为.基于同样的原因,委托也可以有比它目标方法参数类型更加具体的参数类型,这称为逆变.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">StringAction</span> (<span class=\"params\"><span class=\"built_in\">string</span> s</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        StringAction sa = <span class=\"keyword\">new</span> StringAction(ActOnObject);</span><br><span class=\"line\">        sa(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ActOnObject</span> (<span class=\"params\"><span class=\"built_in\">object</span> o</span>)</span> =&gt; Console.WriteLine(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"返回类型的兼容性\"><a href=\"#返回类型的兼容性\" class=\"headerlink\" title=\"返回类型的兼容性\"></a>返回类型的兼容性</h5><p>调用方法时可能得到比请求类型更加特定的返回值类型,这也是正常的多态行为.基于同样的原因,委托的目标方法可能返回比委托声明的返回值类型更加特定的返回值类型,这称为协变.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"built_in\">object</span> <span class=\"title\">ObjectRetriever</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ObjectRetriever o = <span class=\"keyword\">new</span> ObjectRetriver (RetrieveString);</span><br><span class=\"line\">        <span class=\"built_in\">object</span> result = o();</span><br><span class=\"line\">        Console.WriteLine(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">RetrieveString</span>(<span class=\"params\"></span>)</span> =&gt; <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"泛型委托类型的参数协变\"><a href=\"#泛型委托类型的参数协变\" class=\"headerlink\" title=\"泛型委托类型的参数协变\"></a>泛型委托类型的参数协变</h5><p>如果我们要定义一个泛型委托类型,那么最好参考如下的准则</p>\n<ul>\n<li>将只用于返回值类型的类型参数标记为协变(out)</li>\n<li>将只用于参数的任意类型标记为逆变(in)</li>\n</ul>\n<p>这样可以依照类型的继承关系自然地进行类型转换.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> TResult <span class=\"title\">Func</span>&lt;<span class=\"keyword\">out</span> <span class=\"title\">TResult</span>&gt;(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">Func&lt;<span class=\"built_in\">string</span>&gt; x = ...;</span><br><span class=\"line\">Func&lt;<span class=\"built_in\">object</span>&gt; y = x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>&lt;<span class=\"keyword\">in</span> <span class=\"title\">T</span>&gt; (<span class=\"params\">T arg</span>)</span>;</span><br><span class=\"line\">Action&lt;<span class=\"built_in\">object</span>&gt; x = ...;</span><br><span class=\"line\">Action&lt;<span class=\"built_in\">string</span>&gt; y = x;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":5434,"excerpt":"<h3 id=\"解构器\"><a href=\"#解构器\" class=\"headerlink\" title=\"解构器\"></a>解构器</h3><p>一个解构器就像构造器的反过程:构造器使用若干值作为参数,并且将它们赋值给字段;而解构器则相反将字段反向赋值给若干变量</p>","more":"<p>解构方法的名字必须为Deconstruct,并且拥有一个或多个out参数</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">float</span> Width, Height;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span>(<span class=\"params\"><span class=\"built_in\">float</span> width, <span class=\"built_in\">float</span> height</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Width = width;</span><br><span class=\"line\">        Height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"built_in\">float</span> width, <span class=\"keyword\">out</span> <span class=\"built_in\">float</span> height</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        width = Width;</span><br><span class=\"line\">        height = Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用解造器,语法如下</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">3</span> , <span class=\"number\">4</span>);</span><br><span class=\"line\">(<span class=\"built_in\">float</span> width, <span class=\"built_in\">float</span> height) = rect;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span> width, height;</span><br><span class=\"line\">rect.Deconstruct(<span class=\"keyword\">out</span> width, <span class=\"keyword\">out</span> height);</span><br><span class=\"line\"><span class=\"comment\">// rect.Deconstruct(out var width, out var height);</span></span><br></pre></td></tr></table></figure>\n\n<p>解构调用允许隐式类型推断,可简写为</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">var</span> width, <span class=\"keyword\">var</span> height) = rect;</span><br><span class=\"line\"><span class=\"comment\">// var (width, height) = rect;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果解构中的变量已经定义过了,那么可以忽略类型声明</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span> width, height;</span><br><span class=\"line\">(width, height) = rect;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h3><p>委托是一种知道如何调用方法的对象<br>委托类型定义了一个委托实例可以调用的方法,具体来说,它定义了方法的返回类型和参数类型.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"built_in\">int</span> <span class=\"title\">Transformer</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span>;</span><br><span class=\"line\">clasee Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Transformer t = Square;</span><br><span class=\"line\">        <span class=\"comment\">// Transformer t = new Transformer(Square);</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> result = t(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"comment\">// int result = t.Invoke(3);</span></span><br><span class=\"line\">        Console.WriteLine(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span> =&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>委托实例字面上是调用者的代理:调用者调用委托,而委托调用目标方法.这种间接调用方式可以将调用者和目标方法解耦.</p>\n<h4 id=\"用委托书写插件方法\"><a href=\"#用委托书写插件方法\" class=\"headerlink\" title=\"用委托书写插件方法\"></a>用委托书写插件方法</h4><p>委托变量可以在运行时指定一个目标方法,这个特性可用于编写插件方法,下面的例子中有一个名为Transform的公共方法,它对整数数组的每一个元素进行变换.Transfornm方法接受一个委托参数并以此为插件方法执行变换操作</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">int</span> <span class=\"title\">Transformer</span> (<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Transform</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] values, Transformer t</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] values = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        Util.Transform(values, Square);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>( <span class=\"built_in\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(i+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span> =&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多播委托\"><a href=\"#多播委托\" class=\"headerlink\" title=\"多播委托\"></a>多播委托</h4><p>所有的委托实例都拥有多播能力,这意味着一个委托实例可以引用一个目标方法,也可以引用一组目标方法.委托可以使用 + 和 += 联结多个委托实例, - 和 -= 会从左侧委托操作数上将右侧委托数删除.<br>委托是不可变的,因此调用 += 和 -= 的实质是创建一个新的委托实例,并把它赋值给已有变量.<br>若方法的执行时间很长,且该方法定时调用一个委托像调用者报告进程的执行情况.例如,在以下代码中,HardWord 方法通过调用 ProgressReporter 委托参数报告执行进度</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">PeogressReporter</span> (<span class=\"params\"><span class=\"built_in\">int</span> percentComplete</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">HardWork</span> (<span class=\"params\">ProgressReporter p</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p(i * <span class=\"number\">10</span>);</span><br><span class=\"line\">            System.Threading.Thread.Sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了监视进度,在Main方法中创建了一个多播委托实例p,这样就可以通过两个独立的方法监视执行进度</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ProgressReporter p = WriteProgressToConsole;</span><br><span class=\"line\">        p += WriteProgressToFile;</span><br><span class=\"line\">        Util.HardWork(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteProgressToConsole</span>(<span class=\"params\"><span class=\"built_in\">int</span> percentComplete</span>)</span> =&gt; Console.WriteLine(percentComplete);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteProgressToFile</span>(<span class=\"params\"><span class=\"built_in\">int</span> percentComplete</span>)</span> =&gt; System.IO.File.WriteAllText(<span class=\"string\">&quot;process.txt&quot;</span>, percentComplete.ToString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实例目标方法和静态目标方法\"><a href=\"#实例目标方法和静态目标方法\" class=\"headerlink\" title=\"实例目标方法和静态目标方法\"></a>实例目标方法和静态目标方法</h4><p>将一个实例方法赋值给委托对象时,后者不但要维护方法的引用,还需要维护方法所属的实例的引用.System.Delegate 类的 Target 属性代表这个实例(如果委托引用的是一个静态方法,则该属性值为null).</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">ProgressReporter</span> (<span class=\"params\"><span class=\"built_in\">int</span> percentComplete</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">T</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        X x = <span class=\"keyword\">new</span> X();</span><br><span class=\"line\">        ProgressReporter p = x.InstanceProgress;</span><br><span class=\"line\">        p(<span class=\"number\">99</span>);</span><br><span class=\"line\">        Console.WriteLine(p.Target = x);</span><br><span class=\"line\">        Console.WriteLine(p.Method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">X</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InstanceProgress</span>(<span class=\"params\"><span class=\"built_in\">int</span> percentComplete</span>)</span> =&gt; Console.WriteLine(percentComplete);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"泛型委托类型\"><a href=\"#泛型委托类型\" class=\"headerlink\" title=\"泛型委托类型\"></a>泛型委托类型</h4><p>委托类型可以包含泛型类型参数.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Transform</span>&lt;<span class=\"title\">T</span>&gt; (<span class=\"params\">T[] values, Transformer&lt;T&gt; t</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] values = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        Util.Transform(values, Square);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"built_in\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span> =&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Func-和-Action-委托\"><a href=\"#Func-和-Action-委托\" class=\"headerlink\" title=\"Func 和 Action 委托\"></a>Func 和 Action 委托</h4><p>有了泛型委托,我们就可以定义出一些非常通用的小型委托类型,它们可以具有任意的返回类型和(合理的)任意数目的参数.它们就是定义在 System 命名空间下的 Func 和 Action 委托</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> TResult <span class=\"title\">Func</span> &lt;<span class=\"keyword\">out</span> TResult&gt; (<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> TResult <span class=\"title\">Func</span> &lt;<span class=\"keyword\">in</span> T, <span class=\"keyword\">out</span> TResult&gt; (<span class=\"params\">T arg</span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> TResult <span class=\"title\">Func</span> &lt;<span class=\"keyword\">in</span> T1, <span class=\"keyword\">in</span> T2, <span class=\"keyword\">out</span> TResult&gt; (<span class=\"params\">T1 arg1, T2 arg2</span>)</span>;</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span> (<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span> &lt;<span class=\"keyword\">in</span> T&gt; (<span class=\"params\">T arg</span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span> &lt;<span class=\"keyword\">in</span> T1, <span class=\"keyword\">in</span> T2&gt; (<span class=\"params\">T1 arg1, T2 arg2</span>)</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"委托和接口\"><a href=\"#委托和接口\" class=\"headerlink\" title=\"委托和接口\"></a>委托和接口</h4><p>能用委托解决的问题,都可以用接口解决</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ITransformer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Transform</span> (<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TransformAll</span> (<span class=\"params\"><span class=\"built_in\">int</span>[] values, ITransformer t</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t.Transform(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Squarer</span> : <span class=\"title\">ITransformer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Transform</span> (<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span> =&gt; x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span>[] values = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    Util.TransforAll(values, <span class=\"keyword\">new</span> Squarer());</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(<span class=\"built_in\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果以下一个或多个条件成立,委托可能是比接口更好的选择</p>\n<ul>\n<li>接口内仅定义了一个方法</li>\n<li>需要多播能力</li>\n<li>订阅者需要多次实现接口</li>\n</ul>\n<h4 id=\"委托的兼容性\"><a href=\"#委托的兼容性\" class=\"headerlink\" title=\"委托的兼容性\"></a>委托的兼容性</h4><h5 id=\"类型的兼容性\"><a href=\"#类型的兼容性\" class=\"headerlink\" title=\"类型的兼容性\"></a>类型的兼容性</h5><p>即使签名相似,委托类型也互不兼容</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">D1</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">D2</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">D1 d1 = Method;</span><br><span class=\"line\">D2 d2 = d1;     <span class=\"comment\">//Compile-time error</span></span><br></pre></td></tr></table></figure>\n\n<p>但是允许下面的写法</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D2 d2 = <span class=\"keyword\">new</span> D2 (d1);</span><br></pre></td></tr></table></figure>\n\n<p>如果委托实例指向相同的目标方法,则认为它们是相等的<br>如果多播委托按照相同的顺序引用相同的方法,则认为它们是相等的</p>\n<h5 id=\"参数的兼容性\"><a href=\"#参数的兼容性\" class=\"headerlink\" title=\"参数的兼容性\"></a>参数的兼容性</h5><p>当调用方法时,可以给方法的参数提供更加特定的变量类型,这是正常的多态行为.基于同样的原因,委托也可以有比它目标方法参数类型更加具体的参数类型,这称为逆变.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">StringAction</span> (<span class=\"params\"><span class=\"built_in\">string</span> s</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        StringAction sa = <span class=\"keyword\">new</span> StringAction(ActOnObject);</span><br><span class=\"line\">        sa(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ActOnObject</span> (<span class=\"params\"><span class=\"built_in\">object</span> o</span>)</span> =&gt; Console.WriteLine(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"返回类型的兼容性\"><a href=\"#返回类型的兼容性\" class=\"headerlink\" title=\"返回类型的兼容性\"></a>返回类型的兼容性</h5><p>调用方法时可能得到比请求类型更加特定的返回值类型,这也是正常的多态行为.基于同样的原因,委托的目标方法可能返回比委托声明的返回值类型更加特定的返回值类型,这称为协变.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"built_in\">object</span> <span class=\"title\">ObjectRetriever</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ObjectRetriever o = <span class=\"keyword\">new</span> ObjectRetriver (RetrieveString);</span><br><span class=\"line\">        <span class=\"built_in\">object</span> result = o();</span><br><span class=\"line\">        Console.WriteLine(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">RetrieveString</span>(<span class=\"params\"></span>)</span> =&gt; <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"泛型委托类型的参数协变\"><a href=\"#泛型委托类型的参数协变\" class=\"headerlink\" title=\"泛型委托类型的参数协变\"></a>泛型委托类型的参数协变</h5><p>如果我们要定义一个泛型委托类型,那么最好参考如下的准则</p>\n<ul>\n<li>将只用于返回值类型的类型参数标记为协变(out)</li>\n<li>将只用于参数的任意类型标记为逆变(in)</li>\n</ul>\n<p>这样可以依照类型的继承关系自然地进行类型转换.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> TResult <span class=\"title\">Func</span>&lt;<span class=\"keyword\">out</span> <span class=\"title\">TResult</span>&gt;(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">Func&lt;<span class=\"built_in\">string</span>&gt; x = ...;</span><br><span class=\"line\">Func&lt;<span class=\"built_in\">object</span>&gt; y = x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>&lt;<span class=\"keyword\">in</span> <span class=\"title\">T</span>&gt; (<span class=\"params\">T arg</span>)</span>;</span><br><span class=\"line\">Action&lt;<span class=\"built_in\">object</span>&gt; x = ...;</span><br><span class=\"line\">Action&lt;<span class=\"built_in\">string</span>&gt; y = x;</span><br></pre></td></tr></table></figure>"},{"title":"C# 7.0 核心技术指南摘录(二)","date":"2019-08-16T14:05:55.000Z","_content":"### C# 6.0 新特性\n\n1. null 条件运算符\n    可以避免在调用方法或访问类型的成员之前显式地编写用于null判断的语句.在以下示例中,result将会为null而不会抛出 NullReferenceException.\n\n    ```cs\n    StringBuilder sb = null;\n    string result = sb?.ToString();\n    ```\n    <!--more-->\n2. 表达式体函数\n    可以以 Lambda 表达式的形式书写仅仅包含一个表达式的方法、属性、运算符以及索引器,使得代码更加简短.\n\n    ```cs\n    public int TimesTwo(int x) => x*2;\n    public string SomeProperty => \"Property value\";\n    ```\n\n3. 属性初始化器\n    可以对自动属性进行初始赋值.\n\n    ```cs\n    public DataTime TimeCreated { get; set; } = DateTime.Now;\n    public DateTime TimeEnd { get; } = DateTime.Now;\n    ```\n\n4. 索引初始化器\n    可以一次性初始化具有索引器的任何类型.\n\n    ```cs\n    var dict = new Dictionary<int,string>()\n    {\n        [3] = \"three\",\n        [10] = \"ten\"\n    };\n    ```\n\n5. 字符串插值\n    用更加简单的方式替代了string.Format\n\n    ```cs\n    string s = $\"It is {DateTime.Now.DayOfWeek} today\";\n    ```\n\n6. 异常过滤器\n    可以在 catch 块上再添加一个条件\n\n    ```cs\n    string html;\n    try\n    {\n        html = new WebClient().DownloadString(\"http://asef\");\n    }\n    catch(WebException ex) when (ex.Status == WedExceptionStatus.Timeout)\n    {\n        ...\n    }\n    ```\n\n7. using static\n    using static 指令可以引入一个类型的所有静态成员,这样就可以不用书写;类型而直接使用这些成员\n\n    ```cs\n    using static System.Console;\n\n    WriteLine(\"Hello world\");\n    ```\n\n8. nameof\n    nameof 运算符返回变量、类型或者其他符号的名称\n\n    ```cs\n    int capacity = 123;\n    string x = nameof(capacity);\n    string y = nameof(Uri.Host);\n    ```\n\n9. 可以在 catch 和 finally 块中使用 await.\n\n### C# 5.0 新特性\n\nC# 5.0 最大的新特性就是通过两个关键字, async 和 await 支持异步功能.异步功能支持异步延续,从而简化响应式和线程安全的富客户端应用程序的编写.它还有利于编写高并发和高效的 I/O 密集型应用程序,而不需要为每一个操作绑定一个线程资源\n\n#### C# 4.0 新特性\n\n1. 动态绑定\n    将绑定过程(解析类型与成员的过程)从编译时推迟到运行时.这种方法适用于一些需要避免使用复杂反射代码的场合.动态绑定还适合于实现动态语言以及 COM 组件的互操作\n\n2. 可选参数和命名参数\n    可选参数允许函数指定参数的默认值,这样调用者就可以省略一些参数,而命名参数则允许调用者按名字而非按位置指定参数\n\n3. 用泛型接口和委托实现类型变化\n    类型变化规则在 C# 4.0 进行了一定程度的放宽,因此泛型接口和泛型委托类型参数可以标记为协变或逆变,从而支持更加自然的类型转换.\n\n4. 改进 COM 互操作性\n    参数可以通过引用传递,并无须使用 ref 关键字(特别适用于与可选参数一同使用)\n    包含 COM 互操作类型的程序集可以链接而无须引用.链接的互操作类型支持类型相等转换,无须使用主互操作程序集,并且解决了版本控制和部署的难题\n    链接的互操作类型中的函数若返回 COM 变体类型,则会映射为 dynamic 而不是 object ,因此无须进行强制类型转换.\n\n### C# 3.0 新特性\n\n1. LINQ\n    LINQ 令 C# 程序可以直接编写查询并以静态方式检查其正确性,它可以查询本地集合(如列表或XML文档),也可以查询远程数据源(如数据库).\n\n2. 隐式类型局部变量\n    隐式类型局部变量允许在声明语句中省略变量类型,然后由编辑器推断其类型.这样可以简化代码并支持匿名类型.匿名类型是一些即时创建的类,它们常用于生成 LINQ 查询的最终输出结果.数组也可以隐式类型话.\n\n3. 对象初始化器\n    允许在调用构造器之后以内联的方式设置属性,从而简化对象的构造过程.对象初始化器不仅支持命名类型也支持匿名类型.\n\n4. Lambda 表达式\n    由编译器即时创建的微型函数,适用于创建\"流畅的\" LINQ 查询\n\n5. 扩展方法\n    可以在不修改类型定义的情况下使用新的方法扩展先用类型,使静态方法变得像实例方法一样.LINQ表达式的查询符就是使用扩展方法实现的.\n\n6. 查询表达式\n    提供了编写 LINQ 查询的更高级语法,大大简化了具有多个序列或范围变量的 LINQ 查询的编写过程\n\n7. 表达式树\n    是赋值给一种特殊类型 Expression<TDelegate> 的 Lambda 表达式的 DOM 模型.表达式树使 LINQ 查询能够远程执行,因为它们可以在运行时进行转换和翻译\n\n8. 自动化属性\n    自动化属性对在 get/set 中对私有字段直接读写的属性进行了简化,并将字段的读写逻辑交给编译器自动生成\n\n9. 分部方法\n    分部方法可以令自动生成的分部类自定义需要手动实现的钩子函数,而该函数可以在没有使用的情况下\"消失\"\n","source":"_posts/CSharp-7.0-核心技术指南摘录(二).md","raw":"---\ntitle: 'C# 7.0 核心技术指南摘录(二)'\ndate: 2019-08-16 22:05:55\ncategories: C#\ntags:\n - C#\n - 摘录\n---\n### C# 6.0 新特性\n\n1. null 条件运算符\n    可以避免在调用方法或访问类型的成员之前显式地编写用于null判断的语句.在以下示例中,result将会为null而不会抛出 NullReferenceException.\n\n    ```cs\n    StringBuilder sb = null;\n    string result = sb?.ToString();\n    ```\n    <!--more-->\n2. 表达式体函数\n    可以以 Lambda 表达式的形式书写仅仅包含一个表达式的方法、属性、运算符以及索引器,使得代码更加简短.\n\n    ```cs\n    public int TimesTwo(int x) => x*2;\n    public string SomeProperty => \"Property value\";\n    ```\n\n3. 属性初始化器\n    可以对自动属性进行初始赋值.\n\n    ```cs\n    public DataTime TimeCreated { get; set; } = DateTime.Now;\n    public DateTime TimeEnd { get; } = DateTime.Now;\n    ```\n\n4. 索引初始化器\n    可以一次性初始化具有索引器的任何类型.\n\n    ```cs\n    var dict = new Dictionary<int,string>()\n    {\n        [3] = \"three\",\n        [10] = \"ten\"\n    };\n    ```\n\n5. 字符串插值\n    用更加简单的方式替代了string.Format\n\n    ```cs\n    string s = $\"It is {DateTime.Now.DayOfWeek} today\";\n    ```\n\n6. 异常过滤器\n    可以在 catch 块上再添加一个条件\n\n    ```cs\n    string html;\n    try\n    {\n        html = new WebClient().DownloadString(\"http://asef\");\n    }\n    catch(WebException ex) when (ex.Status == WedExceptionStatus.Timeout)\n    {\n        ...\n    }\n    ```\n\n7. using static\n    using static 指令可以引入一个类型的所有静态成员,这样就可以不用书写;类型而直接使用这些成员\n\n    ```cs\n    using static System.Console;\n\n    WriteLine(\"Hello world\");\n    ```\n\n8. nameof\n    nameof 运算符返回变量、类型或者其他符号的名称\n\n    ```cs\n    int capacity = 123;\n    string x = nameof(capacity);\n    string y = nameof(Uri.Host);\n    ```\n\n9. 可以在 catch 和 finally 块中使用 await.\n\n### C# 5.0 新特性\n\nC# 5.0 最大的新特性就是通过两个关键字, async 和 await 支持异步功能.异步功能支持异步延续,从而简化响应式和线程安全的富客户端应用程序的编写.它还有利于编写高并发和高效的 I/O 密集型应用程序,而不需要为每一个操作绑定一个线程资源\n\n#### C# 4.0 新特性\n\n1. 动态绑定\n    将绑定过程(解析类型与成员的过程)从编译时推迟到运行时.这种方法适用于一些需要避免使用复杂反射代码的场合.动态绑定还适合于实现动态语言以及 COM 组件的互操作\n\n2. 可选参数和命名参数\n    可选参数允许函数指定参数的默认值,这样调用者就可以省略一些参数,而命名参数则允许调用者按名字而非按位置指定参数\n\n3. 用泛型接口和委托实现类型变化\n    类型变化规则在 C# 4.0 进行了一定程度的放宽,因此泛型接口和泛型委托类型参数可以标记为协变或逆变,从而支持更加自然的类型转换.\n\n4. 改进 COM 互操作性\n    参数可以通过引用传递,并无须使用 ref 关键字(特别适用于与可选参数一同使用)\n    包含 COM 互操作类型的程序集可以链接而无须引用.链接的互操作类型支持类型相等转换,无须使用主互操作程序集,并且解决了版本控制和部署的难题\n    链接的互操作类型中的函数若返回 COM 变体类型,则会映射为 dynamic 而不是 object ,因此无须进行强制类型转换.\n\n### C# 3.0 新特性\n\n1. LINQ\n    LINQ 令 C# 程序可以直接编写查询并以静态方式检查其正确性,它可以查询本地集合(如列表或XML文档),也可以查询远程数据源(如数据库).\n\n2. 隐式类型局部变量\n    隐式类型局部变量允许在声明语句中省略变量类型,然后由编辑器推断其类型.这样可以简化代码并支持匿名类型.匿名类型是一些即时创建的类,它们常用于生成 LINQ 查询的最终输出结果.数组也可以隐式类型话.\n\n3. 对象初始化器\n    允许在调用构造器之后以内联的方式设置属性,从而简化对象的构造过程.对象初始化器不仅支持命名类型也支持匿名类型.\n\n4. Lambda 表达式\n    由编译器即时创建的微型函数,适用于创建\"流畅的\" LINQ 查询\n\n5. 扩展方法\n    可以在不修改类型定义的情况下使用新的方法扩展先用类型,使静态方法变得像实例方法一样.LINQ表达式的查询符就是使用扩展方法实现的.\n\n6. 查询表达式\n    提供了编写 LINQ 查询的更高级语法,大大简化了具有多个序列或范围变量的 LINQ 查询的编写过程\n\n7. 表达式树\n    是赋值给一种特殊类型 Expression<TDelegate> 的 Lambda 表达式的 DOM 模型.表达式树使 LINQ 查询能够远程执行,因为它们可以在运行时进行转换和翻译\n\n8. 自动化属性\n    自动化属性对在 get/set 中对私有字段直接读写的属性进行了简化,并将字段的读写逻辑交给编译器自动生成\n\n9. 分部方法\n    分部方法可以令自动生成的分部类自定义需要手动实现的钩子函数,而该函数可以在没有使用的情况下\"消失\"\n","slug":"CSharp-7.0-核心技术指南摘录(二)","published":1,"updated":"2021-03-30T03:24:16.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzk0017vcua1pov8a5j","content":"<h3 id=\"C-6-0-新特性\"><a href=\"#C-6-0-新特性\" class=\"headerlink\" title=\"C# 6.0 新特性\"></a>C# 6.0 新特性</h3><ol>\n<li><p>null 条件运算符<br> 可以避免在调用方法或访问类型的成员之前显式地编写用于null判断的语句.在以下示例中,result将会为null而不会抛出 NullReferenceException.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> result = sb?.ToString();</span><br></pre></td></tr></table></figure>\n <span id=\"more\"></span></li>\n<li><p>表达式体函数<br> 可以以 Lambda 表达式的形式书写仅仅包含一个表达式的方法、属性、运算符以及索引器,使得代码更加简短.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">TimesTwo</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span> =&gt; x*<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> SomeProperty =&gt; <span class=\"string\">&quot;Property value&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>属性初始化器<br> 可以对自动属性进行初始赋值.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> DataTime TimeCreated &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = DateTime.Now;</span><br><span class=\"line\"><span class=\"keyword\">public</span> DateTime TimeEnd &#123; <span class=\"keyword\">get</span>; &#125; = DateTime.Now;</span><br></pre></td></tr></table></figure></li>\n<li><p>索引初始化器<br> 可以一次性初始化具有索引器的任何类型.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dict = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">3</span>] = <span class=\"string\">&quot;three&quot;</span>,</span><br><span class=\"line\">    [<span class=\"meta\">10</span>] = <span class=\"string\">&quot;ten&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>字符串插值<br> 用更加简单的方式替代了string.Format</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">$&quot;It is <span class=\"subst\">&#123;DateTime.Now.DayOfWeek&#125;</span> today&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>异常过滤器<br> 可以在 catch 块上再添加一个条件</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> html;</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    html = <span class=\"keyword\">new</span> WebClient().DownloadString(<span class=\"string\">&quot;http://asef&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch(WebException ex) <span class=\"keyword\">when</span> (ex.Status == WedExceptionStatus.Timeout)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>using static<br> using static 指令可以引入一个类型的所有静态成员,这样就可以不用书写;类型而直接使用这些成员</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.Console;</span><br><span class=\"line\"></span><br><span class=\"line\">WriteLine(<span class=\"string\">&quot;Hello world&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>nameof<br> nameof 运算符返回变量、类型或者其他符号的名称</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> capacity = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> x = <span class=\"keyword\">nameof</span>(capacity);</span><br><span class=\"line\"><span class=\"built_in\">string</span> y = <span class=\"keyword\">nameof</span>(Uri.Host);</span><br></pre></td></tr></table></figure></li>\n<li><p>可以在 catch 和 finally 块中使用 await.</p>\n</li>\n</ol>\n<h3 id=\"C-5-0-新特性\"><a href=\"#C-5-0-新特性\" class=\"headerlink\" title=\"C# 5.0 新特性\"></a>C# 5.0 新特性</h3><p>C# 5.0 最大的新特性就是通过两个关键字, async 和 await 支持异步功能.异步功能支持异步延续,从而简化响应式和线程安全的富客户端应用程序的编写.它还有利于编写高并发和高效的 I/O 密集型应用程序,而不需要为每一个操作绑定一个线程资源</p>\n<h4 id=\"C-4-0-新特性\"><a href=\"#C-4-0-新特性\" class=\"headerlink\" title=\"C# 4.0 新特性\"></a>C# 4.0 新特性</h4><ol>\n<li><p>动态绑定<br> 将绑定过程(解析类型与成员的过程)从编译时推迟到运行时.这种方法适用于一些需要避免使用复杂反射代码的场合.动态绑定还适合于实现动态语言以及 COM 组件的互操作</p>\n</li>\n<li><p>可选参数和命名参数<br> 可选参数允许函数指定参数的默认值,这样调用者就可以省略一些参数,而命名参数则允许调用者按名字而非按位置指定参数</p>\n</li>\n<li><p>用泛型接口和委托实现类型变化<br> 类型变化规则在 C# 4.0 进行了一定程度的放宽,因此泛型接口和泛型委托类型参数可以标记为协变或逆变,从而支持更加自然的类型转换.</p>\n</li>\n<li><p>改进 COM 互操作性<br> 参数可以通过引用传递,并无须使用 ref 关键字(特别适用于与可选参数一同使用)<br> 包含 COM 互操作类型的程序集可以链接而无须引用.链接的互操作类型支持类型相等转换,无须使用主互操作程序集,并且解决了版本控制和部署的难题<br> 链接的互操作类型中的函数若返回 COM 变体类型,则会映射为 dynamic 而不是 object ,因此无须进行强制类型转换.</p>\n</li>\n</ol>\n<h3 id=\"C-3-0-新特性\"><a href=\"#C-3-0-新特性\" class=\"headerlink\" title=\"C# 3.0 新特性\"></a>C# 3.0 新特性</h3><ol>\n<li><p>LINQ<br> LINQ 令 C# 程序可以直接编写查询并以静态方式检查其正确性,它可以查询本地集合(如列表或XML文档),也可以查询远程数据源(如数据库).</p>\n</li>\n<li><p>隐式类型局部变量<br> 隐式类型局部变量允许在声明语句中省略变量类型,然后由编辑器推断其类型.这样可以简化代码并支持匿名类型.匿名类型是一些即时创建的类,它们常用于生成 LINQ 查询的最终输出结果.数组也可以隐式类型话.</p>\n</li>\n<li><p>对象初始化器<br> 允许在调用构造器之后以内联的方式设置属性,从而简化对象的构造过程.对象初始化器不仅支持命名类型也支持匿名类型.</p>\n</li>\n<li><p>Lambda 表达式<br> 由编译器即时创建的微型函数,适用于创建”流畅的” LINQ 查询</p>\n</li>\n<li><p>扩展方法<br> 可以在不修改类型定义的情况下使用新的方法扩展先用类型,使静态方法变得像实例方法一样.LINQ表达式的查询符就是使用扩展方法实现的.</p>\n</li>\n<li><p>查询表达式<br> 提供了编写 LINQ 查询的更高级语法,大大简化了具有多个序列或范围变量的 LINQ 查询的编写过程</p>\n</li>\n<li><p>表达式树<br> 是赋值给一种特殊类型 Expression<TDelegate> 的 Lambda 表达式的 DOM 模型.表达式树使 LINQ 查询能够远程执行,因为它们可以在运行时进行转换和翻译</p>\n</li>\n<li><p>自动化属性<br> 自动化属性对在 get/set 中对私有字段直接读写的属性进行了简化,并将字段的读写逻辑交给编译器自动生成</p>\n</li>\n<li><p>分部方法<br> 分部方法可以令自动生成的分部类自定义需要手动实现的钩子函数,而该函数可以在没有使用的情况下”消失”</p>\n</li>\n</ol>\n","site":{"data":{}},"length":2217,"excerpt":"<h3 id=\"C-6-0-新特性\"><a href=\"#C-6-0-新特性\" class=\"headerlink\" title=\"C# 6.0 新特性\"></a>C# 6.0 新特性</h3><ol>\n<li><p>null 条件运算符<br> 可以避免在调用方法或访问类型的成员之前显式地编写用于null判断的语句.在以下示例中,result将会为null而不会抛出 NullReferenceException.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> result = sb?.ToString();</span><br></pre></td></tr></table></figure>","more":"</li>\n<li><p>表达式体函数<br> 可以以 Lambda 表达式的形式书写仅仅包含一个表达式的方法、属性、运算符以及索引器,使得代码更加简短.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">TimesTwo</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span> =&gt; x*<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> SomeProperty =&gt; <span class=\"string\">&quot;Property value&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>属性初始化器<br> 可以对自动属性进行初始赋值.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> DataTime TimeCreated &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = DateTime.Now;</span><br><span class=\"line\"><span class=\"keyword\">public</span> DateTime TimeEnd &#123; <span class=\"keyword\">get</span>; &#125; = DateTime.Now;</span><br></pre></td></tr></table></figure></li>\n<li><p>索引初始化器<br> 可以一次性初始化具有索引器的任何类型.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dict = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">string</span>&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">3</span>] = <span class=\"string\">&quot;three&quot;</span>,</span><br><span class=\"line\">    [<span class=\"meta\">10</span>] = <span class=\"string\">&quot;ten&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>字符串插值<br> 用更加简单的方式替代了string.Format</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">$&quot;It is <span class=\"subst\">&#123;DateTime.Now.DayOfWeek&#125;</span> today&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>异常过滤器<br> 可以在 catch 块上再添加一个条件</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> html;</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    html = <span class=\"keyword\">new</span> WebClient().DownloadString(<span class=\"string\">&quot;http://asef&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch(WebException ex) <span class=\"keyword\">when</span> (ex.Status == WedExceptionStatus.Timeout)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>using static<br> using static 指令可以引入一个类型的所有静态成员,这样就可以不用书写;类型而直接使用这些成员</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.Console;</span><br><span class=\"line\"></span><br><span class=\"line\">WriteLine(<span class=\"string\">&quot;Hello world&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>nameof<br> nameof 运算符返回变量、类型或者其他符号的名称</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> capacity = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> x = <span class=\"keyword\">nameof</span>(capacity);</span><br><span class=\"line\"><span class=\"built_in\">string</span> y = <span class=\"keyword\">nameof</span>(Uri.Host);</span><br></pre></td></tr></table></figure></li>\n<li><p>可以在 catch 和 finally 块中使用 await.</p>\n</li>\n</ol>\n<h3 id=\"C-5-0-新特性\"><a href=\"#C-5-0-新特性\" class=\"headerlink\" title=\"C# 5.0 新特性\"></a>C# 5.0 新特性</h3><p>C# 5.0 最大的新特性就是通过两个关键字, async 和 await 支持异步功能.异步功能支持异步延续,从而简化响应式和线程安全的富客户端应用程序的编写.它还有利于编写高并发和高效的 I/O 密集型应用程序,而不需要为每一个操作绑定一个线程资源</p>\n<h4 id=\"C-4-0-新特性\"><a href=\"#C-4-0-新特性\" class=\"headerlink\" title=\"C# 4.0 新特性\"></a>C# 4.0 新特性</h4><ol>\n<li><p>动态绑定<br> 将绑定过程(解析类型与成员的过程)从编译时推迟到运行时.这种方法适用于一些需要避免使用复杂反射代码的场合.动态绑定还适合于实现动态语言以及 COM 组件的互操作</p>\n</li>\n<li><p>可选参数和命名参数<br> 可选参数允许函数指定参数的默认值,这样调用者就可以省略一些参数,而命名参数则允许调用者按名字而非按位置指定参数</p>\n</li>\n<li><p>用泛型接口和委托实现类型变化<br> 类型变化规则在 C# 4.0 进行了一定程度的放宽,因此泛型接口和泛型委托类型参数可以标记为协变或逆变,从而支持更加自然的类型转换.</p>\n</li>\n<li><p>改进 COM 互操作性<br> 参数可以通过引用传递,并无须使用 ref 关键字(特别适用于与可选参数一同使用)<br> 包含 COM 互操作类型的程序集可以链接而无须引用.链接的互操作类型支持类型相等转换,无须使用主互操作程序集,并且解决了版本控制和部署的难题<br> 链接的互操作类型中的函数若返回 COM 变体类型,则会映射为 dynamic 而不是 object ,因此无须进行强制类型转换.</p>\n</li>\n</ol>\n<h3 id=\"C-3-0-新特性\"><a href=\"#C-3-0-新特性\" class=\"headerlink\" title=\"C# 3.0 新特性\"></a>C# 3.0 新特性</h3><ol>\n<li><p>LINQ<br> LINQ 令 C# 程序可以直接编写查询并以静态方式检查其正确性,它可以查询本地集合(如列表或XML文档),也可以查询远程数据源(如数据库).</p>\n</li>\n<li><p>隐式类型局部变量<br> 隐式类型局部变量允许在声明语句中省略变量类型,然后由编辑器推断其类型.这样可以简化代码并支持匿名类型.匿名类型是一些即时创建的类,它们常用于生成 LINQ 查询的最终输出结果.数组也可以隐式类型话.</p>\n</li>\n<li><p>对象初始化器<br> 允许在调用构造器之后以内联的方式设置属性,从而简化对象的构造过程.对象初始化器不仅支持命名类型也支持匿名类型.</p>\n</li>\n<li><p>Lambda 表达式<br> 由编译器即时创建的微型函数,适用于创建”流畅的” LINQ 查询</p>\n</li>\n<li><p>扩展方法<br> 可以在不修改类型定义的情况下使用新的方法扩展先用类型,使静态方法变得像实例方法一样.LINQ表达式的查询符就是使用扩展方法实现的.</p>\n</li>\n<li><p>查询表达式<br> 提供了编写 LINQ 查询的更高级语法,大大简化了具有多个序列或范围变量的 LINQ 查询的编写过程</p>\n</li>\n<li><p>表达式树<br> 是赋值给一种特殊类型 Expression<TDelegate> 的 Lambda 表达式的 DOM 模型.表达式树使 LINQ 查询能够远程执行,因为它们可以在运行时进行转换和翻译</p>\n</li>\n<li><p>自动化属性<br> 自动化属性对在 get/set 中对私有字段直接读写的属性进行了简化,并将字段的读写逻辑交给编译器自动生成</p>\n</li>\n<li><p>分部方法<br> 分部方法可以令自动生成的分部类自定义需要手动实现的钩子函数,而该函数可以在没有使用的情况下”消失”</p>\n</li>\n</ol>"},{"title":"CSharp 7.0 核心技术指南摘录(五)","date":"2019-09-01T15:14:58.000Z","_content":"### 字符分类静态方法\n\n静态方法 | 包含的方法 | 包含的 Unicode 分类\n:- | :- | :-\nIsLetter | A-Z,a-z和其他字母字符 | UpperCaseLetter, LowerCaseLetter, TitleCseLetter, ModifierLetter, OtherLetter\nIsUpper | 大写字母| UpperCaseLetter\nIsLower | 小写字母| LowerCaseLetter\nIsDigit | 0-9和其他字母表中的数字| DecimalDigitNumber\nIsLetterOrDigit | 字母和数字| (IsLetter, IsDigit)\nIsNumber | 所有数字以及 Unicode 分数和罗马数字符号| DecimalDigitNumber, LetterNumber, OtherNumber\nIsSeparator | 空格与所有 Unicode 分隔符| LineSeparator, ParagraphSeparator\nIsEhiteSpace | 所有的分隔符,以及 \\n, \\r, \\t, \\f和 \\v| LineSeparator, ParagraphSeparator\nIsPunctuation | 西方和其他字母表中的标点符号| DashPunctuation, ConnectorPunctuation, InitialQuotePunctuation, FinalQuotePunctuation\nIsSymbol | 大部分其他的可打印符号| MathSymbol, ModifierSymbol, OtherSymbol\nIsControl | 值小于 0x20 的不可打印的控制字符.例如 \\r, \\n, \\t, \\0 和 0x7F 与 0x9A 之间字符| (无)\n\n<!--more-->\n\n### 数值转换总结\n\n任务 | 函数 | 示例\n:- | :- | :-\n解析十进制数字 | Parse, TryParse | double i = double.Parse(\"3.5\");\n解析二进制,八进制,十六进制数字 | Convert.To('数字') | int i= Convert.ToInt32(\"1E\", 16);\n按十六进制格式化 | ToString('数字') | string hex = 45.ToString(\"X\");\n无损数值转换 | 隐式转换 | int i = 32; double d = i;\n截断式数值转换 | 显式转换 | double d = 23.5; int i = (int)d;\n舍入式数值转换 | Convert.To()数字 | double d = 23.5; int i = Convert.ToInt32(d);\n\n### 静态 Math 类的方法\n\n类别 | 方法\n:- | :-\n舍入 | Round, Truncate, Floor, Ceiling\n最大值/最小值 | Max, Min\n绝对值和符号 | Abs, Sign\n平方根 | Sqrt\n幂运算 | Pow, Exp\n对数运算 |Log, Log10\n三角函数 | Sin, Cos, Tan, Sinh, Cosh, Tanh, Asin, Acos, Atan\n\n### 线程\n\n* 调用Thread的Join方法可以等待线程结束，Thread.Sleep方法将当前线程的执行暂停指定的时间;在等待线程Sleep或者Join的过程中,线程是阻塞(blocked)的.\n* Thread.Sleep(0)将会导致线程立即放弃自己的时间片,自觉地将CPU交于其他的线程.Thread.Yield()执行相同的操作,但是它仅仅会将资源交给同一个处理器上运行的线程.\n* Sleep(0)和Yield在高级性能调优方面非常有用.同时它还是一种很好的诊断工具.可用于帮助开发者发现与线程安全相关的问题;如果在代码的任意位置插入Thread.Yield()导致程序失败,则代码一定是存在缺陷的.\n* 一般情况下,显式创建的线程称为前台线程.只要有一个前台线程还在运行,应用程序就仍然保持运行状态.而后台线程则不然.当所有前台线程结束时,应用程序就会停止,且所有运行的后台线程也会随之终止.可以使用线程的IsBackground属性来查询或修改线程的前后台状态.\n* 如果想要在工作线程上更新UI,就必须将请求发送给UI线程,这种技术叫封迭.实现这个操作的底层方式有:\n    1. 在WPF中,调用元素上的Dispatcher对象的BeginInoke或Invoke方法.\n    2. 在UWP应用中.可以调用Dispatcher对象的RunAsync或Invoke方法.\n    3. 在Windows Forms应用中,调用控件的BeginInvoke或Invoke方法.\n","source":"_posts/CSharp-7.0-核心技术指南摘录(五) .md","raw":"---\ntitle: CSharp 7.0 核心技术指南摘录(五)\ndate: 2019-09-01 23:14:58\ncategories: C#\ntags:\n - C#\n - 摘录\n---\n### 字符分类静态方法\n\n静态方法 | 包含的方法 | 包含的 Unicode 分类\n:- | :- | :-\nIsLetter | A-Z,a-z和其他字母字符 | UpperCaseLetter, LowerCaseLetter, TitleCseLetter, ModifierLetter, OtherLetter\nIsUpper | 大写字母| UpperCaseLetter\nIsLower | 小写字母| LowerCaseLetter\nIsDigit | 0-9和其他字母表中的数字| DecimalDigitNumber\nIsLetterOrDigit | 字母和数字| (IsLetter, IsDigit)\nIsNumber | 所有数字以及 Unicode 分数和罗马数字符号| DecimalDigitNumber, LetterNumber, OtherNumber\nIsSeparator | 空格与所有 Unicode 分隔符| LineSeparator, ParagraphSeparator\nIsEhiteSpace | 所有的分隔符,以及 \\n, \\r, \\t, \\f和 \\v| LineSeparator, ParagraphSeparator\nIsPunctuation | 西方和其他字母表中的标点符号| DashPunctuation, ConnectorPunctuation, InitialQuotePunctuation, FinalQuotePunctuation\nIsSymbol | 大部分其他的可打印符号| MathSymbol, ModifierSymbol, OtherSymbol\nIsControl | 值小于 0x20 的不可打印的控制字符.例如 \\r, \\n, \\t, \\0 和 0x7F 与 0x9A 之间字符| (无)\n\n<!--more-->\n\n### 数值转换总结\n\n任务 | 函数 | 示例\n:- | :- | :-\n解析十进制数字 | Parse, TryParse | double i = double.Parse(\"3.5\");\n解析二进制,八进制,十六进制数字 | Convert.To('数字') | int i= Convert.ToInt32(\"1E\", 16);\n按十六进制格式化 | ToString('数字') | string hex = 45.ToString(\"X\");\n无损数值转换 | 隐式转换 | int i = 32; double d = i;\n截断式数值转换 | 显式转换 | double d = 23.5; int i = (int)d;\n舍入式数值转换 | Convert.To()数字 | double d = 23.5; int i = Convert.ToInt32(d);\n\n### 静态 Math 类的方法\n\n类别 | 方法\n:- | :-\n舍入 | Round, Truncate, Floor, Ceiling\n最大值/最小值 | Max, Min\n绝对值和符号 | Abs, Sign\n平方根 | Sqrt\n幂运算 | Pow, Exp\n对数运算 |Log, Log10\n三角函数 | Sin, Cos, Tan, Sinh, Cosh, Tanh, Asin, Acos, Atan\n\n### 线程\n\n* 调用Thread的Join方法可以等待线程结束，Thread.Sleep方法将当前线程的执行暂停指定的时间;在等待线程Sleep或者Join的过程中,线程是阻塞(blocked)的.\n* Thread.Sleep(0)将会导致线程立即放弃自己的时间片,自觉地将CPU交于其他的线程.Thread.Yield()执行相同的操作,但是它仅仅会将资源交给同一个处理器上运行的线程.\n* Sleep(0)和Yield在高级性能调优方面非常有用.同时它还是一种很好的诊断工具.可用于帮助开发者发现与线程安全相关的问题;如果在代码的任意位置插入Thread.Yield()导致程序失败,则代码一定是存在缺陷的.\n* 一般情况下,显式创建的线程称为前台线程.只要有一个前台线程还在运行,应用程序就仍然保持运行状态.而后台线程则不然.当所有前台线程结束时,应用程序就会停止,且所有运行的后台线程也会随之终止.可以使用线程的IsBackground属性来查询或修改线程的前后台状态.\n* 如果想要在工作线程上更新UI,就必须将请求发送给UI线程,这种技术叫封迭.实现这个操作的底层方式有:\n    1. 在WPF中,调用元素上的Dispatcher对象的BeginInoke或Invoke方法.\n    2. 在UWP应用中.可以调用Dispatcher对象的RunAsync或Invoke方法.\n    3. 在Windows Forms应用中,调用控件的BeginInvoke或Invoke方法.\n","slug":"CSharp-7.0-核心技术指南摘录(五) ","published":1,"updated":"2021-03-30T03:24:16.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzm001avcua6sbw9bji","content":"<h3 id=\"字符分类静态方法\"><a href=\"#字符分类静态方法\" class=\"headerlink\" title=\"字符分类静态方法\"></a>字符分类静态方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">静态方法</th>\n<th align=\"left\">包含的方法</th>\n<th align=\"left\">包含的 Unicode 分类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">IsLetter</td>\n<td align=\"left\">A-Z,a-z和其他字母字符</td>\n<td align=\"left\">UpperCaseLetter, LowerCaseLetter, TitleCseLetter, ModifierLetter, OtherLetter</td>\n</tr>\n<tr>\n<td align=\"left\">IsUpper</td>\n<td align=\"left\">大写字母</td>\n<td align=\"left\">UpperCaseLetter</td>\n</tr>\n<tr>\n<td align=\"left\">IsLower</td>\n<td align=\"left\">小写字母</td>\n<td align=\"left\">LowerCaseLetter</td>\n</tr>\n<tr>\n<td align=\"left\">IsDigit</td>\n<td align=\"left\">0-9和其他字母表中的数字</td>\n<td align=\"left\">DecimalDigitNumber</td>\n</tr>\n<tr>\n<td align=\"left\">IsLetterOrDigit</td>\n<td align=\"left\">字母和数字</td>\n<td align=\"left\">(IsLetter, IsDigit)</td>\n</tr>\n<tr>\n<td align=\"left\">IsNumber</td>\n<td align=\"left\">所有数字以及 Unicode 分数和罗马数字符号</td>\n<td align=\"left\">DecimalDigitNumber, LetterNumber, OtherNumber</td>\n</tr>\n<tr>\n<td align=\"left\">IsSeparator</td>\n<td align=\"left\">空格与所有 Unicode 分隔符</td>\n<td align=\"left\">LineSeparator, ParagraphSeparator</td>\n</tr>\n<tr>\n<td align=\"left\">IsEhiteSpace</td>\n<td align=\"left\">所有的分隔符,以及 \\n, \\r, \\t, \\f和 \\v</td>\n<td align=\"left\">LineSeparator, ParagraphSeparator</td>\n</tr>\n<tr>\n<td align=\"left\">IsPunctuation</td>\n<td align=\"left\">西方和其他字母表中的标点符号</td>\n<td align=\"left\">DashPunctuation, ConnectorPunctuation, InitialQuotePunctuation, FinalQuotePunctuation</td>\n</tr>\n<tr>\n<td align=\"left\">IsSymbol</td>\n<td align=\"left\">大部分其他的可打印符号</td>\n<td align=\"left\">MathSymbol, ModifierSymbol, OtherSymbol</td>\n</tr>\n<tr>\n<td align=\"left\">IsControl</td>\n<td align=\"left\">值小于 0x20 的不可打印的控制字符.例如 \\r, \\n, \\t, \\0 和 0x7F 与 0x9A 之间字符</td>\n<td align=\"left\">(无)</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<h3 id=\"数值转换总结\"><a href=\"#数值转换总结\" class=\"headerlink\" title=\"数值转换总结\"></a>数值转换总结</h3><table>\n<thead>\n<tr>\n<th align=\"left\">任务</th>\n<th align=\"left\">函数</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">解析十进制数字</td>\n<td align=\"left\">Parse, TryParse</td>\n<td align=\"left\">double i = double.Parse(“3.5”);</td>\n</tr>\n<tr>\n<td align=\"left\">解析二进制,八进制,十六进制数字</td>\n<td align=\"left\">Convert.To(‘数字’)</td>\n<td align=\"left\">int i= Convert.ToInt32(“1E”, 16);</td>\n</tr>\n<tr>\n<td align=\"left\">按十六进制格式化</td>\n<td align=\"left\">ToString(‘数字’)</td>\n<td align=\"left\">string hex = 45.ToString(“X”);</td>\n</tr>\n<tr>\n<td align=\"left\">无损数值转换</td>\n<td align=\"left\">隐式转换</td>\n<td align=\"left\">int i = 32; double d = i;</td>\n</tr>\n<tr>\n<td align=\"left\">截断式数值转换</td>\n<td align=\"left\">显式转换</td>\n<td align=\"left\">double d = 23.5; int i = (int)d;</td>\n</tr>\n<tr>\n<td align=\"left\">舍入式数值转换</td>\n<td align=\"left\">Convert.To()数字</td>\n<td align=\"left\">double d = 23.5; int i = Convert.ToInt32(d);</td>\n</tr>\n</tbody></table>\n<h3 id=\"静态-Math-类的方法\"><a href=\"#静态-Math-类的方法\" class=\"headerlink\" title=\"静态 Math 类的方法\"></a>静态 Math 类的方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">类别</th>\n<th align=\"left\">方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">舍入</td>\n<td align=\"left\">Round, Truncate, Floor, Ceiling</td>\n</tr>\n<tr>\n<td align=\"left\">最大值/最小值</td>\n<td align=\"left\">Max, Min</td>\n</tr>\n<tr>\n<td align=\"left\">绝对值和符号</td>\n<td align=\"left\">Abs, Sign</td>\n</tr>\n<tr>\n<td align=\"left\">平方根</td>\n<td align=\"left\">Sqrt</td>\n</tr>\n<tr>\n<td align=\"left\">幂运算</td>\n<td align=\"left\">Pow, Exp</td>\n</tr>\n<tr>\n<td align=\"left\">对数运算</td>\n<td align=\"left\">Log, Log10</td>\n</tr>\n<tr>\n<td align=\"left\">三角函数</td>\n<td align=\"left\">Sin, Cos, Tan, Sinh, Cosh, Tanh, Asin, Acos, Atan</td>\n</tr>\n</tbody></table>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><ul>\n<li>调用Thread的Join方法可以等待线程结束，Thread.Sleep方法将当前线程的执行暂停指定的时间;在等待线程Sleep或者Join的过程中,线程是阻塞(blocked)的.</li>\n<li>Thread.Sleep(0)将会导致线程立即放弃自己的时间片,自觉地将CPU交于其他的线程.Thread.Yield()执行相同的操作,但是它仅仅会将资源交给同一个处理器上运行的线程.</li>\n<li>Sleep(0)和Yield在高级性能调优方面非常有用.同时它还是一种很好的诊断工具.可用于帮助开发者发现与线程安全相关的问题;如果在代码的任意位置插入Thread.Yield()导致程序失败,则代码一定是存在缺陷的.</li>\n<li>一般情况下,显式创建的线程称为前台线程.只要有一个前台线程还在运行,应用程序就仍然保持运行状态.而后台线程则不然.当所有前台线程结束时,应用程序就会停止,且所有运行的后台线程也会随之终止.可以使用线程的IsBackground属性来查询或修改线程的前后台状态.</li>\n<li>如果想要在工作线程上更新UI,就必须将请求发送给UI线程,这种技术叫封迭.实现这个操作的底层方式有:<ol>\n<li>在WPF中,调用元素上的Dispatcher对象的BeginInoke或Invoke方法.</li>\n<li>在UWP应用中.可以调用Dispatcher对象的RunAsync或Invoke方法.</li>\n<li>在Windows Forms应用中,调用控件的BeginInvoke或Invoke方法.</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"length":1719,"excerpt":"<h3 id=\"字符分类静态方法\"><a href=\"#字符分类静态方法\" class=\"headerlink\" title=\"字符分类静态方法\"></a>字符分类静态方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">静态方法</th>\n<th align=\"left\">包含的方法</th>\n<th align=\"left\">包含的 Unicode 分类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">IsLetter</td>\n<td align=\"left\">A-Z,a-z和其他字母字符</td>\n<td align=\"left\">UpperCaseLetter, LowerCaseLetter, TitleCseLetter, ModifierLetter, OtherLetter</td>\n</tr>\n<tr>\n<td align=\"left\">IsUpper</td>\n<td align=\"left\">大写字母</td>\n<td align=\"left\">UpperCaseLetter</td>\n</tr>\n<tr>\n<td align=\"left\">IsLower</td>\n<td align=\"left\">小写字母</td>\n<td align=\"left\">LowerCaseLetter</td>\n</tr>\n<tr>\n<td align=\"left\">IsDigit</td>\n<td align=\"left\">0-9和其他字母表中的数字</td>\n<td align=\"left\">DecimalDigitNumber</td>\n</tr>\n<tr>\n<td align=\"left\">IsLetterOrDigit</td>\n<td align=\"left\">字母和数字</td>\n<td align=\"left\">(IsLetter, IsDigit)</td>\n</tr>\n<tr>\n<td align=\"left\">IsNumber</td>\n<td align=\"left\">所有数字以及 Unicode 分数和罗马数字符号</td>\n<td align=\"left\">DecimalDigitNumber, LetterNumber, OtherNumber</td>\n</tr>\n<tr>\n<td align=\"left\">IsSeparator</td>\n<td align=\"left\">空格与所有 Unicode 分隔符</td>\n<td align=\"left\">LineSeparator, ParagraphSeparator</td>\n</tr>\n<tr>\n<td align=\"left\">IsEhiteSpace</td>\n<td align=\"left\">所有的分隔符,以及 \\n, \\r, \\t, \\f和 \\v</td>\n<td align=\"left\">LineSeparator, ParagraphSeparator</td>\n</tr>\n<tr>\n<td align=\"left\">IsPunctuation</td>\n<td align=\"left\">西方和其他字母表中的标点符号</td>\n<td align=\"left\">DashPunctuation, ConnectorPunctuation, InitialQuotePunctuation, FinalQuotePunctuation</td>\n</tr>\n<tr>\n<td align=\"left\">IsSymbol</td>\n<td align=\"left\">大部分其他的可打印符号</td>\n<td align=\"left\">MathSymbol, ModifierSymbol, OtherSymbol</td>\n</tr>\n<tr>\n<td align=\"left\">IsControl</td>\n<td align=\"left\">值小于 0x20 的不可打印的控制字符.例如 \\r, \\n, \\t, \\0 和 0x7F 与 0x9A 之间字符</td>\n<td align=\"left\">(无)</td>\n</tr>\n</tbody></table>","more":"<h3 id=\"数值转换总结\"><a href=\"#数值转换总结\" class=\"headerlink\" title=\"数值转换总结\"></a>数值转换总结</h3><table>\n<thead>\n<tr>\n<th align=\"left\">任务</th>\n<th align=\"left\">函数</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">解析十进制数字</td>\n<td align=\"left\">Parse, TryParse</td>\n<td align=\"left\">double i = double.Parse(“3.5”);</td>\n</tr>\n<tr>\n<td align=\"left\">解析二进制,八进制,十六进制数字</td>\n<td align=\"left\">Convert.To(‘数字’)</td>\n<td align=\"left\">int i= Convert.ToInt32(“1E”, 16);</td>\n</tr>\n<tr>\n<td align=\"left\">按十六进制格式化</td>\n<td align=\"left\">ToString(‘数字’)</td>\n<td align=\"left\">string hex = 45.ToString(“X”);</td>\n</tr>\n<tr>\n<td align=\"left\">无损数值转换</td>\n<td align=\"left\">隐式转换</td>\n<td align=\"left\">int i = 32; double d = i;</td>\n</tr>\n<tr>\n<td align=\"left\">截断式数值转换</td>\n<td align=\"left\">显式转换</td>\n<td align=\"left\">double d = 23.5; int i = (int)d;</td>\n</tr>\n<tr>\n<td align=\"left\">舍入式数值转换</td>\n<td align=\"left\">Convert.To()数字</td>\n<td align=\"left\">double d = 23.5; int i = Convert.ToInt32(d);</td>\n</tr>\n</tbody></table>\n<h3 id=\"静态-Math-类的方法\"><a href=\"#静态-Math-类的方法\" class=\"headerlink\" title=\"静态 Math 类的方法\"></a>静态 Math 类的方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">类别</th>\n<th align=\"left\">方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">舍入</td>\n<td align=\"left\">Round, Truncate, Floor, Ceiling</td>\n</tr>\n<tr>\n<td align=\"left\">最大值/最小值</td>\n<td align=\"left\">Max, Min</td>\n</tr>\n<tr>\n<td align=\"left\">绝对值和符号</td>\n<td align=\"left\">Abs, Sign</td>\n</tr>\n<tr>\n<td align=\"left\">平方根</td>\n<td align=\"left\">Sqrt</td>\n</tr>\n<tr>\n<td align=\"left\">幂运算</td>\n<td align=\"left\">Pow, Exp</td>\n</tr>\n<tr>\n<td align=\"left\">对数运算</td>\n<td align=\"left\">Log, Log10</td>\n</tr>\n<tr>\n<td align=\"left\">三角函数</td>\n<td align=\"left\">Sin, Cos, Tan, Sinh, Cosh, Tanh, Asin, Acos, Atan</td>\n</tr>\n</tbody></table>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><ul>\n<li>调用Thread的Join方法可以等待线程结束，Thread.Sleep方法将当前线程的执行暂停指定的时间;在等待线程Sleep或者Join的过程中,线程是阻塞(blocked)的.</li>\n<li>Thread.Sleep(0)将会导致线程立即放弃自己的时间片,自觉地将CPU交于其他的线程.Thread.Yield()执行相同的操作,但是它仅仅会将资源交给同一个处理器上运行的线程.</li>\n<li>Sleep(0)和Yield在高级性能调优方面非常有用.同时它还是一种很好的诊断工具.可用于帮助开发者发现与线程安全相关的问题;如果在代码的任意位置插入Thread.Yield()导致程序失败,则代码一定是存在缺陷的.</li>\n<li>一般情况下,显式创建的线程称为前台线程.只要有一个前台线程还在运行,应用程序就仍然保持运行状态.而后台线程则不然.当所有前台线程结束时,应用程序就会停止,且所有运行的后台线程也会随之终止.可以使用线程的IsBackground属性来查询或修改线程的前后台状态.</li>\n<li>如果想要在工作线程上更新UI,就必须将请求发送给UI线程,这种技术叫封迭.实现这个操作的底层方式有:<ol>\n<li>在WPF中,调用元素上的Dispatcher对象的BeginInoke或Invoke方法.</li>\n<li>在UWP应用中.可以调用Dispatcher对象的RunAsync或Invoke方法.</li>\n<li>在Windows Forms应用中,调用控件的BeginInvoke或Invoke方法.</li>\n</ol>\n</li>\n</ul>"},{"title":"CSharp 7.0 核心技术指南摘录(四)","date":"2019-08-26T15:14:58.000Z","_content":"### 常用的异常类型\n\n以下所列出的异常类型在 CLR 和 .NET Framework 中广泛使用,可以在程序中抛出这些异常或将其作为基类型来派生自定义的异常类型\n\n* System.ArgumentException\n\n    当使用不恰当的函数参数调用函数时抛出.这通常表明应用程序有缺陷\n\n* System.ArgumentNullException\n\n    ArgumentException 的子类.它在函数的参数(意外的)为null时抛出\n\n* System.ArgumentOutOfRangeException\n\n    ArgumentException 的子类.当(通常是数字)参数太大或者太小的时候抛出.例如:当向只能接受正数的函数传递负数时抛出.\n\n* System.InvalidOperationException\n\n    当不论参数值如何,对象的状态无法使方法成功执行的时候抛出.例如:读取未打开的文件或在列表对象已修改的情况下用枚举器访问其下一个元素.\n\n* System.NotSupportedException\n\n    该异常抛出表示不支持特定的功能.例如:在一个 IsReadOnly 为 true 的集合上调用 Add 方法.\n\n* System.NotImplementedException\n\n    表示特定的函数还没有实现\n\n* System.ObjectDisposedException\n\n    当函数调用的对象已被销毁时抛出\n\n* NullReferenceException\n\n    当一个对象的值为null而访问其成员时抛出\n<!--more-->\n\n### 运算符函数\n\n运算符是通过声明运算符函数进行重载的.运算符函数具有以下规则\n\n* 函数名为 operator 关键字跟上运算符符号\n\n* 运算符函数必须是 static 和 public 的\n\n* 运算符函数的参数即操作数\n\n* 运算符函数的返回类型表示表达式的结果\n\n* 运算符函数电费操作数中至少有一个类型和声明运算符函数的类型是一致的\n\n在以下例子中,我们用名为 Note 的结构体表示音符,并重载其 + 运算符\n\n```cs\npublic struct Note\n{\n    int value;\n    public Note (int semitonesFromA)\n    {\n        value = semitonesFromA;\n    }\n    public static Note operator + (Note x, int semitones)\n    {\n        return new Note(x.value + semitones);\n    }\n    // public static Note operator + (Note x, int semitones) => new Note (x.value + semitones);\n}\n```\n\n这个重载令 Note 可以和 int 相加\n\n```cs\nNote B = new Note(2);\nNote CSharp = B + 2;\n```\n\n重载运算符会自动支持相应的复合赋值运算符.在上例中,因为我们重载了 + 号,所以自然就可以使用 += 了\n\n```cs\nCSharp += 2;\n```\n\n### 重载等号和比较运算符\n\n通常在我们使用结构体(或类,但不常见)时需要重载等号和比较运算符.重载等号和比较运算符有一些特殊的规则和要求,总结如下:\n\n* 成对重载: C# 编译器要求逻辑上成对的运算符必须同时定义.这些运算符包括(==,!=),(<,>)和(<=,>=)\n\n* Equals 和 GetHashCode: 在大多数情况下,如果重载了(==)和(!=)运算符,则通常也需要重载 object 中定义的 Equals 和 GetHashCode 方法.使之具有合理的行为.如果没有按要求重载,则 C# 编译器会发出警告\n\n* IComparable 和 IComparable< T >: 如果重载了(<,>) 和 (<=,>=) 运算符,那么还应当实现 IComparable 和 IComparable< T > 接口\n\n### 自定义隐式和自定义显式\n\n隐式和显式转换也是可以重载的运算符.这些转换经过重载后,一般能使强相关的类型(例如数字)之间的转换变得更加简明自然.\n\n如果要在弱相关的类型之间进行转换,则更适合采用以下方式\n\n* 编写一个以转换类型为参数的构造器\n\n* 编写(静态的)ToXXX 和 FromXXX 方法进行类型转换\n\n在以下例子中,我们定义了 Note 类型和 double 之类的转换规则\n\n```cs\npublic static implicit operator double (Note x) => 440 * Math.Pow(2, (double) x.value / 12);\n\npublic static explicit operator Note(double x) => new Note((int) (0.5 + 12 * Math.Log(x/440) / Math.Log(2)));\n\nNote n = (Note) 554.37;\ndouble x = n;\n```\n\n> PS: as 和 is 运算符会忽略自定义转换\n\n### 重载 true 和 false\n\ntrue 和 false 运算符只会在那些本身有布尔语义但无法转换为 bool 的类型中重载.例如,一个类型实现了三个状态逻辑,通过重载 true 和 false 运算符,这个类型就可以无缝地和以下条件语句以及运算符一起使用了: if, do, while, for, &&, || 和 ?:.System.Data.SqlTypes.SqlBoolean 结构体就提供了这个功能.\n\n```cs\nSqlBoolean a = SqlBoolean.Null;\nif(a)\n{\n    Console.WriteLine(\"True\");\n} \nelse if (!a)\n{\n    Console.WriteLine(\"False\");\n}\nelse\n{\n    Console.WriteLine(\"Null\");\n}\n// 输出为Null\n```\n\n下面代码重新实现了 SqlBoolean 中关于 true 和 false运算符的一部分代码\n\n```cs\npublic struct SqlBoolean\n{\n    public static bool operator true (SqlBoolean x) => x.m_value == True.m_value;\n    public static bool operator false (SqlBoolean x) => x.m_value == False.m_value;\n\n    public static SqlBoolean operator ! (SqlBoolean x)\n    {\n        if(x.m_value == Null.m_value) return Null;\n        if(x.m_value == False.m_value) return True;\n        return False;\n    }\n\n    public static readonly SqlBoolean Null = new SqlBoolean(0);\n    public static readonly SqlBoolean False = new SqlBoolean(1);\n    public static readonly SqlBoolean True = new SqlBoolean(2);\n\n    private SqlBoolean (byte value)\n    {\n        m_value = value;\n    }\n    private byte m_value;\n}\n```\n","source":"_posts/CSharp-7.0-核心技术指南摘录(四).md","raw":"---\ntitle: CSharp 7.0 核心技术指南摘录(四)\ndate: 2019-08-26 23:14:58\ncategories: C#\ntags:\n - C#\n - 摘录\n - 异常类型\n - 重载运算符\n---\n### 常用的异常类型\n\n以下所列出的异常类型在 CLR 和 .NET Framework 中广泛使用,可以在程序中抛出这些异常或将其作为基类型来派生自定义的异常类型\n\n* System.ArgumentException\n\n    当使用不恰当的函数参数调用函数时抛出.这通常表明应用程序有缺陷\n\n* System.ArgumentNullException\n\n    ArgumentException 的子类.它在函数的参数(意外的)为null时抛出\n\n* System.ArgumentOutOfRangeException\n\n    ArgumentException 的子类.当(通常是数字)参数太大或者太小的时候抛出.例如:当向只能接受正数的函数传递负数时抛出.\n\n* System.InvalidOperationException\n\n    当不论参数值如何,对象的状态无法使方法成功执行的时候抛出.例如:读取未打开的文件或在列表对象已修改的情况下用枚举器访问其下一个元素.\n\n* System.NotSupportedException\n\n    该异常抛出表示不支持特定的功能.例如:在一个 IsReadOnly 为 true 的集合上调用 Add 方法.\n\n* System.NotImplementedException\n\n    表示特定的函数还没有实现\n\n* System.ObjectDisposedException\n\n    当函数调用的对象已被销毁时抛出\n\n* NullReferenceException\n\n    当一个对象的值为null而访问其成员时抛出\n<!--more-->\n\n### 运算符函数\n\n运算符是通过声明运算符函数进行重载的.运算符函数具有以下规则\n\n* 函数名为 operator 关键字跟上运算符符号\n\n* 运算符函数必须是 static 和 public 的\n\n* 运算符函数的参数即操作数\n\n* 运算符函数的返回类型表示表达式的结果\n\n* 运算符函数电费操作数中至少有一个类型和声明运算符函数的类型是一致的\n\n在以下例子中,我们用名为 Note 的结构体表示音符,并重载其 + 运算符\n\n```cs\npublic struct Note\n{\n    int value;\n    public Note (int semitonesFromA)\n    {\n        value = semitonesFromA;\n    }\n    public static Note operator + (Note x, int semitones)\n    {\n        return new Note(x.value + semitones);\n    }\n    // public static Note operator + (Note x, int semitones) => new Note (x.value + semitones);\n}\n```\n\n这个重载令 Note 可以和 int 相加\n\n```cs\nNote B = new Note(2);\nNote CSharp = B + 2;\n```\n\n重载运算符会自动支持相应的复合赋值运算符.在上例中,因为我们重载了 + 号,所以自然就可以使用 += 了\n\n```cs\nCSharp += 2;\n```\n\n### 重载等号和比较运算符\n\n通常在我们使用结构体(或类,但不常见)时需要重载等号和比较运算符.重载等号和比较运算符有一些特殊的规则和要求,总结如下:\n\n* 成对重载: C# 编译器要求逻辑上成对的运算符必须同时定义.这些运算符包括(==,!=),(<,>)和(<=,>=)\n\n* Equals 和 GetHashCode: 在大多数情况下,如果重载了(==)和(!=)运算符,则通常也需要重载 object 中定义的 Equals 和 GetHashCode 方法.使之具有合理的行为.如果没有按要求重载,则 C# 编译器会发出警告\n\n* IComparable 和 IComparable< T >: 如果重载了(<,>) 和 (<=,>=) 运算符,那么还应当实现 IComparable 和 IComparable< T > 接口\n\n### 自定义隐式和自定义显式\n\n隐式和显式转换也是可以重载的运算符.这些转换经过重载后,一般能使强相关的类型(例如数字)之间的转换变得更加简明自然.\n\n如果要在弱相关的类型之间进行转换,则更适合采用以下方式\n\n* 编写一个以转换类型为参数的构造器\n\n* 编写(静态的)ToXXX 和 FromXXX 方法进行类型转换\n\n在以下例子中,我们定义了 Note 类型和 double 之类的转换规则\n\n```cs\npublic static implicit operator double (Note x) => 440 * Math.Pow(2, (double) x.value / 12);\n\npublic static explicit operator Note(double x) => new Note((int) (0.5 + 12 * Math.Log(x/440) / Math.Log(2)));\n\nNote n = (Note) 554.37;\ndouble x = n;\n```\n\n> PS: as 和 is 运算符会忽略自定义转换\n\n### 重载 true 和 false\n\ntrue 和 false 运算符只会在那些本身有布尔语义但无法转换为 bool 的类型中重载.例如,一个类型实现了三个状态逻辑,通过重载 true 和 false 运算符,这个类型就可以无缝地和以下条件语句以及运算符一起使用了: if, do, while, for, &&, || 和 ?:.System.Data.SqlTypes.SqlBoolean 结构体就提供了这个功能.\n\n```cs\nSqlBoolean a = SqlBoolean.Null;\nif(a)\n{\n    Console.WriteLine(\"True\");\n} \nelse if (!a)\n{\n    Console.WriteLine(\"False\");\n}\nelse\n{\n    Console.WriteLine(\"Null\");\n}\n// 输出为Null\n```\n\n下面代码重新实现了 SqlBoolean 中关于 true 和 false运算符的一部分代码\n\n```cs\npublic struct SqlBoolean\n{\n    public static bool operator true (SqlBoolean x) => x.m_value == True.m_value;\n    public static bool operator false (SqlBoolean x) => x.m_value == False.m_value;\n\n    public static SqlBoolean operator ! (SqlBoolean x)\n    {\n        if(x.m_value == Null.m_value) return Null;\n        if(x.m_value == False.m_value) return True;\n        return False;\n    }\n\n    public static readonly SqlBoolean Null = new SqlBoolean(0);\n    public static readonly SqlBoolean False = new SqlBoolean(1);\n    public static readonly SqlBoolean True = new SqlBoolean(2);\n\n    private SqlBoolean (byte value)\n    {\n        m_value = value;\n    }\n    private byte m_value;\n}\n```\n","slug":"CSharp-7.0-核心技术指南摘录(四)","published":1,"updated":"2021-03-30T03:24:16.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzm001dvcua0uhn3ai4","content":"<h3 id=\"常用的异常类型\"><a href=\"#常用的异常类型\" class=\"headerlink\" title=\"常用的异常类型\"></a>常用的异常类型</h3><p>以下所列出的异常类型在 CLR 和 .NET Framework 中广泛使用,可以在程序中抛出这些异常或将其作为基类型来派生自定义的异常类型</p>\n<ul>\n<li><p>System.ArgumentException</p>\n<p>  当使用不恰当的函数参数调用函数时抛出.这通常表明应用程序有缺陷</p>\n</li>\n<li><p>System.ArgumentNullException</p>\n<p>  ArgumentException 的子类.它在函数的参数(意外的)为null时抛出</p>\n</li>\n<li><p>System.ArgumentOutOfRangeException</p>\n<p>  ArgumentException 的子类.当(通常是数字)参数太大或者太小的时候抛出.例如:当向只能接受正数的函数传递负数时抛出.</p>\n</li>\n<li><p>System.InvalidOperationException</p>\n<p>  当不论参数值如何,对象的状态无法使方法成功执行的时候抛出.例如:读取未打开的文件或在列表对象已修改的情况下用枚举器访问其下一个元素.</p>\n</li>\n<li><p>System.NotSupportedException</p>\n<p>  该异常抛出表示不支持特定的功能.例如:在一个 IsReadOnly 为 true 的集合上调用 Add 方法.</p>\n</li>\n<li><p>System.NotImplementedException</p>\n<p>  表示特定的函数还没有实现</p>\n</li>\n<li><p>System.ObjectDisposedException</p>\n<p>  当函数调用的对象已被销毁时抛出</p>\n</li>\n<li><p>NullReferenceException</p>\n<p>  当一个对象的值为null而访问其成员时抛出</p>\n<span id=\"more\"></span></li>\n</ul>\n<h3 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h3><p>运算符是通过声明运算符函数进行重载的.运算符函数具有以下规则</p>\n<ul>\n<li><p>函数名为 operator 关键字跟上运算符符号</p>\n</li>\n<li><p>运算符函数必须是 static 和 public 的</p>\n</li>\n<li><p>运算符函数的参数即操作数</p>\n</li>\n<li><p>运算符函数的返回类型表示表达式的结果</p>\n</li>\n<li><p>运算符函数电费操作数中至少有一个类型和声明运算符函数的类型是一致的</p>\n</li>\n</ul>\n<p>在以下例子中,我们用名为 Note 的结构体表示音符,并重载其 + 运算符</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> Note</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Note</span> (<span class=\"params\"><span class=\"built_in\">int</span> semitonesFromA</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">value</span> = semitonesFromA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Note <span class=\"keyword\">operator</span> + (Note x, <span class=\"built_in\">int</span> semitones)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Note(x.<span class=\"keyword\">value</span> + semitones);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// public static Note operator + (Note x, int semitones) =&gt; new Note (x.value + semitones);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个重载令 Note 可以和 int 相加</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Note B = <span class=\"keyword\">new</span> Note(<span class=\"number\">2</span>);</span><br><span class=\"line\">Note CSharp = B + <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>重载运算符会自动支持相应的复合赋值运算符.在上例中,因为我们重载了 + 号,所以自然就可以使用 += 了</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSharp += <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重载等号和比较运算符\"><a href=\"#重载等号和比较运算符\" class=\"headerlink\" title=\"重载等号和比较运算符\"></a>重载等号和比较运算符</h3><p>通常在我们使用结构体(或类,但不常见)时需要重载等号和比较运算符.重载等号和比较运算符有一些特殊的规则和要求,总结如下:</p>\n<ul>\n<li><p>成对重载: C# 编译器要求逻辑上成对的运算符必须同时定义.这些运算符包括(==,!=),(&lt;,&gt;)和(&lt;=,&gt;=)</p>\n</li>\n<li><p>Equals 和 GetHashCode: 在大多数情况下,如果重载了(==)和(!=)运算符,则通常也需要重载 object 中定义的 Equals 和 GetHashCode 方法.使之具有合理的行为.如果没有按要求重载,则 C# 编译器会发出警告</p>\n</li>\n<li><p>IComparable 和 IComparable&lt; T &gt;: 如果重载了(&lt;,&gt;) 和 (&lt;=,&gt;=) 运算符,那么还应当实现 IComparable 和 IComparable&lt; T &gt; 接口</p>\n</li>\n</ul>\n<h3 id=\"自定义隐式和自定义显式\"><a href=\"#自定义隐式和自定义显式\" class=\"headerlink\" title=\"自定义隐式和自定义显式\"></a>自定义隐式和自定义显式</h3><p>隐式和显式转换也是可以重载的运算符.这些转换经过重载后,一般能使强相关的类型(例如数字)之间的转换变得更加简明自然.</p>\n<p>如果要在弱相关的类型之间进行转换,则更适合采用以下方式</p>\n<ul>\n<li><p>编写一个以转换类型为参数的构造器</p>\n</li>\n<li><p>编写(静态的)ToXXX 和 FromXXX 方法进行类型转换</p>\n</li>\n</ul>\n<p>在以下例子中,我们定义了 Note 类型和 double 之类的转换规则</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">implicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">double</span> (<span class=\"params\">Note x</span>)</span> =&gt; <span class=\"number\">440</span> * Math.Pow(<span class=\"number\">2</span>, (<span class=\"built_in\">double</span>) x.<span class=\"keyword\">value</span> / <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">Note</span>(<span class=\"params\"><span class=\"built_in\">double</span> x</span>)</span> =&gt; <span class=\"keyword\">new</span> Note((<span class=\"built_in\">int</span>) (<span class=\"number\">0.5</span> + <span class=\"number\">12</span> * Math.Log(x/<span class=\"number\">440</span>) / Math.Log(<span class=\"number\">2</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">Note n = (Note) <span class=\"number\">554.37</span>;</span><br><span class=\"line\"><span class=\"built_in\">double</span> x = n;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS: as 和 is 运算符会忽略自定义转换</p>\n</blockquote>\n<h3 id=\"重载-true-和-false\"><a href=\"#重载-true-和-false\" class=\"headerlink\" title=\"重载 true 和 false\"></a>重载 true 和 false</h3><p>true 和 false 运算符只会在那些本身有布尔语义但无法转换为 bool 的类型中重载.例如,一个类型实现了三个状态逻辑,通过重载 true 和 false 运算符,这个类型就可以无缝地和以下条件语句以及运算符一起使用了: if, do, while, for, &amp;&amp;, || 和 ?:.System.Data.SqlTypes.SqlBoolean 结构体就提供了这个功能.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SqlBoolean a = SqlBoolean.Null;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;True&quot;</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;False&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Null&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出为Null</span></span><br></pre></td></tr></table></figure>\n\n<p>下面代码重新实现了 SqlBoolean 中关于 true 和 false运算符的一部分代码</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> SqlBoolean</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> <span class=\"title\">true</span> (<span class=\"params\">SqlBoolean x</span>)</span> =&gt; x.m_value == True.m_value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> <span class=\"title\">false</span> (<span class=\"params\">SqlBoolean x</span>)</span> =&gt; x.m_value == False.m_value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SqlBoolean <span class=\"keyword\">operator</span> ! (SqlBoolean x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x.m_value == Null.m_value) <span class=\"keyword\">return</span> Null;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x.m_value == False.m_value) <span class=\"keyword\">return</span> True;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> False;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean Null = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean False = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean True = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SqlBoolean</span> (<span class=\"params\"><span class=\"built_in\">byte</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        m_value = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">byte</span> m_value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":2975,"excerpt":"<h3 id=\"常用的异常类型\"><a href=\"#常用的异常类型\" class=\"headerlink\" title=\"常用的异常类型\"></a>常用的异常类型</h3><p>以下所列出的异常类型在 CLR 和 .NET Framework 中广泛使用,可以在程序中抛出这些异常或将其作为基类型来派生自定义的异常类型</p>\n<ul>\n<li><p>System.ArgumentException</p>\n<p>  当使用不恰当的函数参数调用函数时抛出.这通常表明应用程序有缺陷</p>\n</li>\n<li><p>System.ArgumentNullException</p>\n<p>  ArgumentException 的子类.它在函数的参数(意外的)为null时抛出</p>\n</li>\n<li><p>System.ArgumentOutOfRangeException</p>\n<p>  ArgumentException 的子类.当(通常是数字)参数太大或者太小的时候抛出.例如:当向只能接受正数的函数传递负数时抛出.</p>\n</li>\n<li><p>System.InvalidOperationException</p>\n<p>  当不论参数值如何,对象的状态无法使方法成功执行的时候抛出.例如:读取未打开的文件或在列表对象已修改的情况下用枚举器访问其下一个元素.</p>\n</li>\n<li><p>System.NotSupportedException</p>\n<p>  该异常抛出表示不支持特定的功能.例如:在一个 IsReadOnly 为 true 的集合上调用 Add 方法.</p>\n</li>\n<li><p>System.NotImplementedException</p>\n<p>  表示特定的函数还没有实现</p>\n</li>\n<li><p>System.ObjectDisposedException</p>\n<p>  当函数调用的对象已被销毁时抛出</p>\n</li>\n<li><p>NullReferenceException</p>\n<p>  当一个对象的值为null而访问其成员时抛出</p>","more":"</li>\n</ul>\n<h3 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h3><p>运算符是通过声明运算符函数进行重载的.运算符函数具有以下规则</p>\n<ul>\n<li><p>函数名为 operator 关键字跟上运算符符号</p>\n</li>\n<li><p>运算符函数必须是 static 和 public 的</p>\n</li>\n<li><p>运算符函数的参数即操作数</p>\n</li>\n<li><p>运算符函数的返回类型表示表达式的结果</p>\n</li>\n<li><p>运算符函数电费操作数中至少有一个类型和声明运算符函数的类型是一致的</p>\n</li>\n</ul>\n<p>在以下例子中,我们用名为 Note 的结构体表示音符,并重载其 + 运算符</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> Note</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Note</span> (<span class=\"params\"><span class=\"built_in\">int</span> semitonesFromA</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">value</span> = semitonesFromA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Note <span class=\"keyword\">operator</span> + (Note x, <span class=\"built_in\">int</span> semitones)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Note(x.<span class=\"keyword\">value</span> + semitones);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// public static Note operator + (Note x, int semitones) =&gt; new Note (x.value + semitones);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个重载令 Note 可以和 int 相加</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Note B = <span class=\"keyword\">new</span> Note(<span class=\"number\">2</span>);</span><br><span class=\"line\">Note CSharp = B + <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>重载运算符会自动支持相应的复合赋值运算符.在上例中,因为我们重载了 + 号,所以自然就可以使用 += 了</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSharp += <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重载等号和比较运算符\"><a href=\"#重载等号和比较运算符\" class=\"headerlink\" title=\"重载等号和比较运算符\"></a>重载等号和比较运算符</h3><p>通常在我们使用结构体(或类,但不常见)时需要重载等号和比较运算符.重载等号和比较运算符有一些特殊的规则和要求,总结如下:</p>\n<ul>\n<li><p>成对重载: C# 编译器要求逻辑上成对的运算符必须同时定义.这些运算符包括(==,!=),(&lt;,&gt;)和(&lt;=,&gt;=)</p>\n</li>\n<li><p>Equals 和 GetHashCode: 在大多数情况下,如果重载了(==)和(!=)运算符,则通常也需要重载 object 中定义的 Equals 和 GetHashCode 方法.使之具有合理的行为.如果没有按要求重载,则 C# 编译器会发出警告</p>\n</li>\n<li><p>IComparable 和 IComparable&lt; T &gt;: 如果重载了(&lt;,&gt;) 和 (&lt;=,&gt;=) 运算符,那么还应当实现 IComparable 和 IComparable&lt; T &gt; 接口</p>\n</li>\n</ul>\n<h3 id=\"自定义隐式和自定义显式\"><a href=\"#自定义隐式和自定义显式\" class=\"headerlink\" title=\"自定义隐式和自定义显式\"></a>自定义隐式和自定义显式</h3><p>隐式和显式转换也是可以重载的运算符.这些转换经过重载后,一般能使强相关的类型(例如数字)之间的转换变得更加简明自然.</p>\n<p>如果要在弱相关的类型之间进行转换,则更适合采用以下方式</p>\n<ul>\n<li><p>编写一个以转换类型为参数的构造器</p>\n</li>\n<li><p>编写(静态的)ToXXX 和 FromXXX 方法进行类型转换</p>\n</li>\n</ul>\n<p>在以下例子中,我们定义了 Note 类型和 double 之类的转换规则</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">implicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">double</span> (<span class=\"params\">Note x</span>)</span> =&gt; <span class=\"number\">440</span> * Math.Pow(<span class=\"number\">2</span>, (<span class=\"built_in\">double</span>) x.<span class=\"keyword\">value</span> / <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">Note</span>(<span class=\"params\"><span class=\"built_in\">double</span> x</span>)</span> =&gt; <span class=\"keyword\">new</span> Note((<span class=\"built_in\">int</span>) (<span class=\"number\">0.5</span> + <span class=\"number\">12</span> * Math.Log(x/<span class=\"number\">440</span>) / Math.Log(<span class=\"number\">2</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">Note n = (Note) <span class=\"number\">554.37</span>;</span><br><span class=\"line\"><span class=\"built_in\">double</span> x = n;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS: as 和 is 运算符会忽略自定义转换</p>\n</blockquote>\n<h3 id=\"重载-true-和-false\"><a href=\"#重载-true-和-false\" class=\"headerlink\" title=\"重载 true 和 false\"></a>重载 true 和 false</h3><p>true 和 false 运算符只会在那些本身有布尔语义但无法转换为 bool 的类型中重载.例如,一个类型实现了三个状态逻辑,通过重载 true 和 false 运算符,这个类型就可以无缝地和以下条件语句以及运算符一起使用了: if, do, while, for, &amp;&amp;, || 和 ?:.System.Data.SqlTypes.SqlBoolean 结构体就提供了这个功能.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SqlBoolean a = SqlBoolean.Null;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;True&quot;</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;False&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Null&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出为Null</span></span><br></pre></td></tr></table></figure>\n\n<p>下面代码重新实现了 SqlBoolean 中关于 true 和 false运算符的一部分代码</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> SqlBoolean</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> <span class=\"title\">true</span> (<span class=\"params\">SqlBoolean x</span>)</span> =&gt; x.m_value == True.m_value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> <span class=\"title\">false</span> (<span class=\"params\">SqlBoolean x</span>)</span> =&gt; x.m_value == False.m_value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SqlBoolean <span class=\"keyword\">operator</span> ! (SqlBoolean x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x.m_value == Null.m_value) <span class=\"keyword\">return</span> Null;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x.m_value == False.m_value) <span class=\"keyword\">return</span> True;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> False;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean Null = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean False = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean True = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SqlBoolean</span> (<span class=\"params\"><span class=\"built_in\">byte</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        m_value = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">byte</span> m_value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CSharp-Aes加密","date":"2019-05-27T13:55:14.000Z","_content":"#### 起源\n最近负责的一个项目,对接的东西刚好有需要用到AES加密,就顺便学习记录一下\n<!--more-->\n#### Aes是什么\n在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准,是对称密钥加密中最流行的算法之一\n\n#### Aes加密\n```cs\n/// <summary>\n/// Aes加密 \n/// </summary>\n/// <param name=\"text\">明文</param>\n/// <param name=\"password\">密钥</param>\n/// <param name=\"iv\">偏移量</param>\n/// <returns>密文</returns>\npublic static string AesEncrypt(string text, string password, string iv)\n{\n\n    byte[] pwdBytes = Encoding.UTF8.GetBytes(password);\n    byte[] keyBytes = new byte[16];\n    int len = pwdBytes.Length;\n    if (len > keyBytes.Length)\n        len = keyBytes.Length;\n    Array.Copy(pwdBytes, keyBytes, len);\n    RijndaelManaged rhinelandCipher = new RijndaelManaged()\n    {\n        Mode = CipherMode.CBC,\n        Padding = PaddingMode.Zeros,\n        KeySize = 128,\n        BlockSize = 128,\n        Key = keyBytes,\n        IV = Encoding.UTF8.GetBytes(iv)\n    };\n\n    ICryptoTransform transform = rhinelandCipher.CreateEncryptor();\n    byte[] plainText = Encoding.UTF8.GetBytes(text);\n    byte[] cipherBytes = transform.TransformFinalBlock(plainText, 0, plainText.Length);\n\n    return Convert.ToBase64String(cipherBytes);\n\n}\n```\n\n#### Aes解密\n```cs\n/// <summary>\n/// Aes解密\n/// </summary>\n/// <param name=\"text\">密文</param>\n/// <param name=\"password\">密钥</param>\n/// <param name=\"iv\">偏移量</param>\n/// <returns>明文</returns>\npublic static string AesDecrypt(string text, string password, string iv)\n{\n    byte[] encryptedData = Convert.FromBase64String(text);\n    byte[] pwdBytes = Encoding.UTF8.GetBytes(password);\n    byte[] keyBytes = new byte[16];\n    int len = pwdBytes.Length;\n    if (len > keyBytes.Length) \n        len = keyBytes.Length;\n    Array.Copy(pwdBytes, keyBytes, len);\n    RijndaelManaged rhinelandCipher = new RijndaelManaged()\n    {\n        Mode = CipherMode.CBC,\n        Padding = PaddingMode.Zeros,\n        KeySize = 128,\n        BlockSize = 128,\n        Key = keyBytes,\n        IV = Encoding.UTF8.GetBytes(iv)\n    };\n\n    ICryptoTransform transform = rhinelandCipher.CreateDecryptor();\n    byte[] plainText = transform.TransformFinalBlock(encryptedData, 0, encryptedData.Length);\n    return Encoding.UTF8.GetString(plainText);\n}\n```\n\n#### 调用\n```cs\nstatic void Main(string[] args)\n{\n    //密钥\n    string password = \"1234567890123456\";\n    //加密初始化向量\n    string iv = \"1234567887654321\";\n    string message = AesEncrypt(\"abcdefghigklmnopqrstuvwxyz0123456789\", password, iv);\n    Console.WriteLine(message);\n    message = AesDecrypt(\"S8AclhU3eZDc0zV+upMD1dnm3ZwhoH+lNIA4U6+6O1w8QFy55oYo3fwgYUQdNNn0\", password, iv);\n    Console.WriteLine(message);\n}\n```\n","source":"_posts/CSharp-Aes加密.md","raw":"---\ntitle: CSharp-Aes加密\ndate: 2019-05-27 21:55:14\ncategories: C# \ntags: \n - 加密\n - C#\n---\n#### 起源\n最近负责的一个项目,对接的东西刚好有需要用到AES加密,就顺便学习记录一下\n<!--more-->\n#### Aes是什么\n在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准,是对称密钥加密中最流行的算法之一\n\n#### Aes加密\n```cs\n/// <summary>\n/// Aes加密 \n/// </summary>\n/// <param name=\"text\">明文</param>\n/// <param name=\"password\">密钥</param>\n/// <param name=\"iv\">偏移量</param>\n/// <returns>密文</returns>\npublic static string AesEncrypt(string text, string password, string iv)\n{\n\n    byte[] pwdBytes = Encoding.UTF8.GetBytes(password);\n    byte[] keyBytes = new byte[16];\n    int len = pwdBytes.Length;\n    if (len > keyBytes.Length)\n        len = keyBytes.Length;\n    Array.Copy(pwdBytes, keyBytes, len);\n    RijndaelManaged rhinelandCipher = new RijndaelManaged()\n    {\n        Mode = CipherMode.CBC,\n        Padding = PaddingMode.Zeros,\n        KeySize = 128,\n        BlockSize = 128,\n        Key = keyBytes,\n        IV = Encoding.UTF8.GetBytes(iv)\n    };\n\n    ICryptoTransform transform = rhinelandCipher.CreateEncryptor();\n    byte[] plainText = Encoding.UTF8.GetBytes(text);\n    byte[] cipherBytes = transform.TransformFinalBlock(plainText, 0, plainText.Length);\n\n    return Convert.ToBase64String(cipherBytes);\n\n}\n```\n\n#### Aes解密\n```cs\n/// <summary>\n/// Aes解密\n/// </summary>\n/// <param name=\"text\">密文</param>\n/// <param name=\"password\">密钥</param>\n/// <param name=\"iv\">偏移量</param>\n/// <returns>明文</returns>\npublic static string AesDecrypt(string text, string password, string iv)\n{\n    byte[] encryptedData = Convert.FromBase64String(text);\n    byte[] pwdBytes = Encoding.UTF8.GetBytes(password);\n    byte[] keyBytes = new byte[16];\n    int len = pwdBytes.Length;\n    if (len > keyBytes.Length) \n        len = keyBytes.Length;\n    Array.Copy(pwdBytes, keyBytes, len);\n    RijndaelManaged rhinelandCipher = new RijndaelManaged()\n    {\n        Mode = CipherMode.CBC,\n        Padding = PaddingMode.Zeros,\n        KeySize = 128,\n        BlockSize = 128,\n        Key = keyBytes,\n        IV = Encoding.UTF8.GetBytes(iv)\n    };\n\n    ICryptoTransform transform = rhinelandCipher.CreateDecryptor();\n    byte[] plainText = transform.TransformFinalBlock(encryptedData, 0, encryptedData.Length);\n    return Encoding.UTF8.GetString(plainText);\n}\n```\n\n#### 调用\n```cs\nstatic void Main(string[] args)\n{\n    //密钥\n    string password = \"1234567890123456\";\n    //加密初始化向量\n    string iv = \"1234567887654321\";\n    string message = AesEncrypt(\"abcdefghigklmnopqrstuvwxyz0123456789\", password, iv);\n    Console.WriteLine(message);\n    message = AesDecrypt(\"S8AclhU3eZDc0zV+upMD1dnm3ZwhoH+lNIA4U6+6O1w8QFy55oYo3fwgYUQdNNn0\", password, iv);\n    Console.WriteLine(message);\n}\n```\n","slug":"CSharp-Aes加密","published":1,"updated":"2021-03-30T03:24:16.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzo001ivcua6cx4ht5l","content":"<h4 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h4><p>最近负责的一个项目,对接的东西刚好有需要用到AES加密,就顺便学习记录一下</p>\n<span id=\"more\"></span>\n<h4 id=\"Aes是什么\"><a href=\"#Aes是什么\" class=\"headerlink\" title=\"Aes是什么\"></a>Aes是什么</h4><p>在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准,是对称密钥加密中最流行的算法之一</p>\n<h4 id=\"Aes加密\"><a href=\"#Aes加密\" class=\"headerlink\" title=\"Aes加密\"></a>Aes加密</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Aes加密 </span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;text&quot;&gt;</span>明文<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;password&quot;&gt;</span>密钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;iv&quot;&gt;</span>偏移量<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>密文<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">AesEncrypt</span>(<span class=\"params\"><span class=\"built_in\">string</span> text, <span class=\"built_in\">string</span> password, <span class=\"built_in\">string</span> iv</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] pwdBytes = Encoding.UTF8.GetBytes(password);</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] keyBytes = <span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\">    <span class=\"built_in\">int</span> len = pwdBytes.Length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; keyBytes.Length)</span><br><span class=\"line\">        len = keyBytes.Length;</span><br><span class=\"line\">    Array.Copy(pwdBytes, keyBytes, len);</span><br><span class=\"line\">    RijndaelManaged rhinelandCipher = <span class=\"keyword\">new</span> RijndaelManaged()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Mode = CipherMode.CBC,</span><br><span class=\"line\">        Padding = PaddingMode.Zeros,</span><br><span class=\"line\">        KeySize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        BlockSize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        Key = keyBytes,</span><br><span class=\"line\">        IV = Encoding.UTF8.GetBytes(iv)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ICryptoTransform transform = rhinelandCipher.CreateEncryptor();</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] plainText = Encoding.UTF8.GetBytes(text);</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] cipherBytes = transform.TransformFinalBlock(plainText, <span class=\"number\">0</span>, plainText.Length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Convert.ToBase64String(cipherBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Aes解密\"><a href=\"#Aes解密\" class=\"headerlink\" title=\"Aes解密\"></a>Aes解密</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Aes解密</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;text&quot;&gt;</span>密文<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;password&quot;&gt;</span>密钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;iv&quot;&gt;</span>偏移量<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>明文<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">AesDecrypt</span>(<span class=\"params\"><span class=\"built_in\">string</span> text, <span class=\"built_in\">string</span> password, <span class=\"built_in\">string</span> iv</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] encryptedData = Convert.FromBase64String(text);</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] pwdBytes = Encoding.UTF8.GetBytes(password);</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] keyBytes = <span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\">    <span class=\"built_in\">int</span> len = pwdBytes.Length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; keyBytes.Length) </span><br><span class=\"line\">        len = keyBytes.Length;</span><br><span class=\"line\">    Array.Copy(pwdBytes, keyBytes, len);</span><br><span class=\"line\">    RijndaelManaged rhinelandCipher = <span class=\"keyword\">new</span> RijndaelManaged()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Mode = CipherMode.CBC,</span><br><span class=\"line\">        Padding = PaddingMode.Zeros,</span><br><span class=\"line\">        KeySize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        BlockSize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        Key = keyBytes,</span><br><span class=\"line\">        IV = Encoding.UTF8.GetBytes(iv)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ICryptoTransform transform = rhinelandCipher.CreateDecryptor();</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] plainText = transform.TransformFinalBlock(encryptedData, <span class=\"number\">0</span>, encryptedData.Length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Encoding.UTF8.GetString(plainText);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//密钥</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> password = <span class=\"string\">&quot;1234567890123456&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//加密初始化向量</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> iv = <span class=\"string\">&quot;1234567887654321&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> message = AesEncrypt(<span class=\"string\">&quot;abcdefghigklmnopqrstuvwxyz0123456789&quot;</span>, password, iv);</span><br><span class=\"line\">    Console.WriteLine(message);</span><br><span class=\"line\">    message = AesDecrypt(<span class=\"string\">&quot;S8AclhU3eZDc0zV+upMD1dnm3ZwhoH+lNIA4U6+6O1w8QFy55oYo3fwgYUQdNNn0&quot;</span>, password, iv);</span><br><span class=\"line\">    Console.WriteLine(message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":2428,"excerpt":"<h4 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h4><p>最近负责的一个项目,对接的东西刚好有需要用到AES加密,就顺便学习记录一下</p>","more":"<h4 id=\"Aes是什么\"><a href=\"#Aes是什么\" class=\"headerlink\" title=\"Aes是什么\"></a>Aes是什么</h4><p>在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准,是对称密钥加密中最流行的算法之一</p>\n<h4 id=\"Aes加密\"><a href=\"#Aes加密\" class=\"headerlink\" title=\"Aes加密\"></a>Aes加密</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Aes加密 </span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;text&quot;&gt;</span>明文<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;password&quot;&gt;</span>密钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;iv&quot;&gt;</span>偏移量<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>密文<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">AesEncrypt</span>(<span class=\"params\"><span class=\"built_in\">string</span> text, <span class=\"built_in\">string</span> password, <span class=\"built_in\">string</span> iv</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] pwdBytes = Encoding.UTF8.GetBytes(password);</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] keyBytes = <span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\">    <span class=\"built_in\">int</span> len = pwdBytes.Length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; keyBytes.Length)</span><br><span class=\"line\">        len = keyBytes.Length;</span><br><span class=\"line\">    Array.Copy(pwdBytes, keyBytes, len);</span><br><span class=\"line\">    RijndaelManaged rhinelandCipher = <span class=\"keyword\">new</span> RijndaelManaged()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Mode = CipherMode.CBC,</span><br><span class=\"line\">        Padding = PaddingMode.Zeros,</span><br><span class=\"line\">        KeySize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        BlockSize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        Key = keyBytes,</span><br><span class=\"line\">        IV = Encoding.UTF8.GetBytes(iv)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ICryptoTransform transform = rhinelandCipher.CreateEncryptor();</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] plainText = Encoding.UTF8.GetBytes(text);</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] cipherBytes = transform.TransformFinalBlock(plainText, <span class=\"number\">0</span>, plainText.Length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Convert.ToBase64String(cipherBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Aes解密\"><a href=\"#Aes解密\" class=\"headerlink\" title=\"Aes解密\"></a>Aes解密</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Aes解密</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;text&quot;&gt;</span>密文<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;password&quot;&gt;</span>密钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;iv&quot;&gt;</span>偏移量<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>明文<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">AesDecrypt</span>(<span class=\"params\"><span class=\"built_in\">string</span> text, <span class=\"built_in\">string</span> password, <span class=\"built_in\">string</span> iv</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] encryptedData = Convert.FromBase64String(text);</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] pwdBytes = Encoding.UTF8.GetBytes(password);</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] keyBytes = <span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\">    <span class=\"built_in\">int</span> len = pwdBytes.Length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; keyBytes.Length) </span><br><span class=\"line\">        len = keyBytes.Length;</span><br><span class=\"line\">    Array.Copy(pwdBytes, keyBytes, len);</span><br><span class=\"line\">    RijndaelManaged rhinelandCipher = <span class=\"keyword\">new</span> RijndaelManaged()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Mode = CipherMode.CBC,</span><br><span class=\"line\">        Padding = PaddingMode.Zeros,</span><br><span class=\"line\">        KeySize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        BlockSize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        Key = keyBytes,</span><br><span class=\"line\">        IV = Encoding.UTF8.GetBytes(iv)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ICryptoTransform transform = rhinelandCipher.CreateDecryptor();</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] plainText = transform.TransformFinalBlock(encryptedData, <span class=\"number\">0</span>, encryptedData.Length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Encoding.UTF8.GetString(plainText);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//密钥</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> password = <span class=\"string\">&quot;1234567890123456&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//加密初始化向量</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> iv = <span class=\"string\">&quot;1234567887654321&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> message = AesEncrypt(<span class=\"string\">&quot;abcdefghigklmnopqrstuvwxyz0123456789&quot;</span>, password, iv);</span><br><span class=\"line\">    Console.WriteLine(message);</span><br><span class=\"line\">    message = AesDecrypt(<span class=\"string\">&quot;S8AclhU3eZDc0zV+upMD1dnm3ZwhoH+lNIA4U6+6O1w8QFy55oYo3fwgYUQdNNn0&quot;</span>, password, iv);</span><br><span class=\"line\">    Console.WriteLine(message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CSharp-利用委托解决跨线程操作控件产生的问题","date":"2018-03-14T14:47:19.000Z","_content":"```cs\nprivate delegate void AddVirus(string name);  \n//声明一个委托。当然AddVirus是什么都可以，自己取。括号内的参数也根据实际情况自己决定  \nvoid SearchVirus(string path)  \n{  \n    if (VirusList.InvokeRequired)//判断VirusList这个控件是不是该线程创建的，如果为true则不是  \n    {  \n    AddVirus add = new AddVirus(SearchVirus);//实例化委托  \n    VirusList.Invoke(add, path);//重新调用  \n    }  \n    else  \n    {  \n    VirusList.Items.Add(filename);//如果VirusList是该线程创建的，则执行添加操作  \n    }  \n}  \n```\n","source":"_posts/CSharp-利用委托解决跨线程操作控件产生的问题.md","raw":"---\ntitle: CSharp-利用委托解决跨线程操作控件产生的问题\ndate: 2018-03-14 22:47:19\ncategories: C# \ntags: \n - 委托\n - winform\n - C#\n---\n```cs\nprivate delegate void AddVirus(string name);  \n//声明一个委托。当然AddVirus是什么都可以，自己取。括号内的参数也根据实际情况自己决定  \nvoid SearchVirus(string path)  \n{  \n    if (VirusList.InvokeRequired)//判断VirusList这个控件是不是该线程创建的，如果为true则不是  \n    {  \n    AddVirus add = new AddVirus(SearchVirus);//实例化委托  \n    VirusList.Invoke(add, path);//重新调用  \n    }  \n    else  \n    {  \n    VirusList.Items.Add(filename);//如果VirusList是该线程创建的，则执行添加操作  \n    }  \n}  \n```\n","slug":"CSharp-利用委托解决跨线程操作控件产生的问题","published":1,"updated":"2021-03-30T03:24:16.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzp001lvcuabudtgq5t","content":"<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">AddVirus</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>;  </span><br><span class=\"line\"><span class=\"comment\">//声明一个委托。当然AddVirus是什么都可以，自己取。括号内的参数也根据实际情况自己决定  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SearchVirus</span>(<span class=\"params\"><span class=\"built_in\">string</span> path</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VirusList.InvokeRequired)<span class=\"comment\">//判断VirusList这个控件是不是该线程创建的，如果为true则不是  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    AddVirus <span class=\"keyword\">add</span> = <span class=\"keyword\">new</span> AddVirus(SearchVirus);<span class=\"comment\">//实例化委托  </span></span><br><span class=\"line\">    VirusList.Invoke(<span class=\"keyword\">add</span>, path);<span class=\"comment\">//重新调用  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    VirusList.Items.Add(filename);<span class=\"comment\">//如果VirusList是该线程创建的，则执行添加操作  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":373,"excerpt":"","more":"<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">AddVirus</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>;  </span><br><span class=\"line\"><span class=\"comment\">//声明一个委托。当然AddVirus是什么都可以，自己取。括号内的参数也根据实际情况自己决定  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SearchVirus</span>(<span class=\"params\"><span class=\"built_in\">string</span> path</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VirusList.InvokeRequired)<span class=\"comment\">//判断VirusList这个控件是不是该线程创建的，如果为true则不是  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    AddVirus <span class=\"keyword\">add</span> = <span class=\"keyword\">new</span> AddVirus(SearchVirus);<span class=\"comment\">//实例化委托  </span></span><br><span class=\"line\">    VirusList.Invoke(<span class=\"keyword\">add</span>, path);<span class=\"comment\">//重新调用  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    VirusList.Items.Add(filename);<span class=\"comment\">//如果VirusList是该线程创建的，则执行添加操作  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n"},{"title":"CSharp-Math类","date":"2019-04-02T14:27:45.000Z","_content":"### Math类\n#### Abs方法\n用于返回指定数字的绝对值\n```csharp\nint a = -957;\nint b  = Math.Abs(a);\n```\n<!--more-->\n#### Acos方法\n用于返回余弦值为指定数字的角度\n```cs\ndouble d = 0.5;\ndouble m = Math.Acos(d);\n```\n#### Asin方法\n用于返回正弦值的指定数字的角度\n```cs\ndouble d = 0.75;\ndouble m  = Math.Asin(d);\n```\n#### Atan方法\n用于返回正切值的指定数字的角度\n```cs\ndouble d = 0.75;\ndouble m  = Math.Atan(d);\n```\n#### Pow方法\n用于返回指定数字的指定次幂\n```cs\ndouble d = Match.Pow(2,3);//表示2的3次幂\n```\n#### Round方法\n用于将值舍入到最接近的整数或指定的小数位数\n```cs\n//将小数值舍入最接近的整数\ndouble d = Math.Round(2.44);//decimal/double\n//将小数值舍入到指定精度\nd = Math.Round(2.44,2);//decimal/double,int\n//将小数值舍入最接近的整数\nd = Math.Round(2.44,MidpointRounding.ToEven);//ToEven 舍入最接近的偶数;AwayFromZero 舍入绝对值较小的值\nd = Math.Round(2.44,2,MidpointRounding.ToEven);\n```","source":"_posts/CSharp-Math类.md","raw":"---\ntitle: 'CSharp-Math类'\ndate: 2019-04-02 22:27:45\ncategories: C# \ntags: \n - 基础\n - C#\n---\n### Math类\n#### Abs方法\n用于返回指定数字的绝对值\n```csharp\nint a = -957;\nint b  = Math.Abs(a);\n```\n<!--more-->\n#### Acos方法\n用于返回余弦值为指定数字的角度\n```cs\ndouble d = 0.5;\ndouble m = Math.Acos(d);\n```\n#### Asin方法\n用于返回正弦值的指定数字的角度\n```cs\ndouble d = 0.75;\ndouble m  = Math.Asin(d);\n```\n#### Atan方法\n用于返回正切值的指定数字的角度\n```cs\ndouble d = 0.75;\ndouble m  = Math.Atan(d);\n```\n#### Pow方法\n用于返回指定数字的指定次幂\n```cs\ndouble d = Match.Pow(2,3);//表示2的3次幂\n```\n#### Round方法\n用于将值舍入到最接近的整数或指定的小数位数\n```cs\n//将小数值舍入最接近的整数\ndouble d = Math.Round(2.44);//decimal/double\n//将小数值舍入到指定精度\nd = Math.Round(2.44,2);//decimal/double,int\n//将小数值舍入最接近的整数\nd = Math.Round(2.44,MidpointRounding.ToEven);//ToEven 舍入最接近的偶数;AwayFromZero 舍入绝对值较小的值\nd = Math.Round(2.44,2,MidpointRounding.ToEven);\n```","slug":"CSharp-Math类","published":1,"updated":"2021-03-30T03:24:16.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzr001pvcuafnr1fuy4","content":"<h3 id=\"Math类\"><a href=\"#Math类\" class=\"headerlink\" title=\"Math类\"></a>Math类</h3><h4 id=\"Abs方法\"><a href=\"#Abs方法\" class=\"headerlink\" title=\"Abs方法\"></a>Abs方法</h4><p>用于返回指定数字的绝对值</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> a = <span class=\"number\">-957</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> b  = Math.Abs(a);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"Acos方法\"><a href=\"#Acos方法\" class=\"headerlink\" title=\"Acos方法\"></a>Acos方法</h4><p>用于返回余弦值为指定数字的角度</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"><span class=\"built_in\">double</span> m = Math.Acos(d);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Asin方法\"><a href=\"#Asin方法\" class=\"headerlink\" title=\"Asin方法\"></a>Asin方法</h4><p>用于返回正弦值的指定数字的角度</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d = <span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"built_in\">double</span> m  = Math.Asin(d);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Atan方法\"><a href=\"#Atan方法\" class=\"headerlink\" title=\"Atan方法\"></a>Atan方法</h4><p>用于返回正切值的指定数字的角度</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d = <span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"built_in\">double</span> m  = Math.Atan(d);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Pow方法\"><a href=\"#Pow方法\" class=\"headerlink\" title=\"Pow方法\"></a>Pow方法</h4><p>用于返回指定数字的指定次幂</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d = Match.Pow(<span class=\"number\">2</span>,<span class=\"number\">3</span>);<span class=\"comment\">//表示2的3次幂</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Round方法\"><a href=\"#Round方法\" class=\"headerlink\" title=\"Round方法\"></a>Round方法</h4><p>用于将值舍入到最接近的整数或指定的小数位数</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将小数值舍入最接近的整数</span></span><br><span class=\"line\"><span class=\"built_in\">double</span> d = Math.Round(<span class=\"number\">2.44</span>);<span class=\"comment\">//decimal/double</span></span><br><span class=\"line\"><span class=\"comment\">//将小数值舍入到指定精度</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,<span class=\"number\">2</span>);<span class=\"comment\">//decimal/double,int</span></span><br><span class=\"line\"><span class=\"comment\">//将小数值舍入最接近的整数</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,MidpointRounding.ToEven);<span class=\"comment\">//ToEven 舍入最接近的偶数;AwayFromZero 舍入绝对值较小的值</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,<span class=\"number\">2</span>,MidpointRounding.ToEven);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":556,"excerpt":"<h3 id=\"Math类\"><a href=\"#Math类\" class=\"headerlink\" title=\"Math类\"></a>Math类</h3><h4 id=\"Abs方法\"><a href=\"#Abs方法\" class=\"headerlink\" title=\"Abs方法\"></a>Abs方法</h4><p>用于返回指定数字的绝对值</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> a = <span class=\"number\">-957</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> b  = Math.Abs(a);</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"Acos方法\"><a href=\"#Acos方法\" class=\"headerlink\" title=\"Acos方法\"></a>Acos方法</h4><p>用于返回余弦值为指定数字的角度</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"><span class=\"built_in\">double</span> m = Math.Acos(d);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Asin方法\"><a href=\"#Asin方法\" class=\"headerlink\" title=\"Asin方法\"></a>Asin方法</h4><p>用于返回正弦值的指定数字的角度</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d = <span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"built_in\">double</span> m  = Math.Asin(d);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Atan方法\"><a href=\"#Atan方法\" class=\"headerlink\" title=\"Atan方法\"></a>Atan方法</h4><p>用于返回正切值的指定数字的角度</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d = <span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"built_in\">double</span> m  = Math.Atan(d);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Pow方法\"><a href=\"#Pow方法\" class=\"headerlink\" title=\"Pow方法\"></a>Pow方法</h4><p>用于返回指定数字的指定次幂</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d = Match.Pow(<span class=\"number\">2</span>,<span class=\"number\">3</span>);<span class=\"comment\">//表示2的3次幂</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Round方法\"><a href=\"#Round方法\" class=\"headerlink\" title=\"Round方法\"></a>Round方法</h4><p>用于将值舍入到最接近的整数或指定的小数位数</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将小数值舍入最接近的整数</span></span><br><span class=\"line\"><span class=\"built_in\">double</span> d = Math.Round(<span class=\"number\">2.44</span>);<span class=\"comment\">//decimal/double</span></span><br><span class=\"line\"><span class=\"comment\">//将小数值舍入到指定精度</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,<span class=\"number\">2</span>);<span class=\"comment\">//decimal/double,int</span></span><br><span class=\"line\"><span class=\"comment\">//将小数值舍入最接近的整数</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,MidpointRounding.ToEven);<span class=\"comment\">//ToEven 舍入最接近的偶数;AwayFromZero 舍入绝对值较小的值</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,<span class=\"number\">2</span>,MidpointRounding.ToEven);</span><br></pre></td></tr></table></figure>"},{"title":"CSharp-发送邮件","date":"2019-05-29T16:08:16.000Z","_content":"#### 起源\n最近负责的一个项目,客户提了一个需求,自动导出输出,按格式生成xls,并将xls文件当成附件发送邮件,就此,研究了一下C#怎么发送邮件.\n<!--more-->\n\n#### MailHelper.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Mail;\nusing System.Text;\n\nnamespace FrmSendMail\n{\n    class MailHelper\n    {\n\n        /// 正则表达式检测Email格式\n        /// </summary>\n        /// <param name=\"Email\"></param>\n        /// <returns></returns>\n        public static bool CheckEmail(string Email)\n        {\n            bool Flag = false;\n            string str = \"([a-zA-Z0-9_\\\\.\\\\-])+\\\\@(([a-zA-Z0-9\\\\-])+\\\\.)+([a-zA-Z0-9]{2,5})+\";\n            string[] result = GetPathPoint(Email, str);\n            if (result != null)\n            {\n                Flag = result.Contains(Email) ? true : Flag;\n            }\n\n            return Flag;\n        }\n\n        /// <summary>\n        /// 获取正则表达式匹配结果集\n        /// </summary>\n        /// <param name=\"value\">字符串</param>\n        /// <param name=\"regx\">正则表达式</param>\n        /// <returns></returns>\n        public static string[] GetPathPoint(string value, string regx)\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                return null;\n            bool isMatch = System.Text.RegularExpressions.Regex.IsMatch(value, regx);\n            if (!isMatch)\n                return null;\n            System.Text.RegularExpressions.MatchCollection matchCol = System.Text.RegularExpressions.Regex.Matches(value, regx);\n            string[] result = new string[matchCol.Count];\n            if (matchCol.Count > 0)\n            {\n                for (int i = 0; i < matchCol.Count; i++)\n                {\n                    result[i] = matchCol[i].Value;\n                }\n            }\n            return result;\n        }\n\n        /// <summary>\n        /// 设置邮件信息\n        /// </summary>\n        /// <param name=\"strToAddress\">收件人地址,多个用;分隔</param>\n        /// <param name=\"strCcAddress\">抄送人地址,多个用;分隔</param>\n        /// <param name=\"strSendAddress\">发件人地址</param>\n        /// <param name=\"strSendName\">发件人姓名</param>\n        /// <param name=\"strSubject\">邮件主题</param>\n        /// <param name=\"strBody\">邮件内容</param>\n        /// <param name=\"strFilePath\">邮件附件(绝对路径)</param>\n        /// <returns></returns>\n        public static MailMessage SetMailInfo(string strToAddress, string strCcAddress, string strSendAddress, string strSendName, string strSubject, string strBody, string strFilePath)\n        {\n            MailMessage msg = new System.Net.Mail.MailMessage();\n            //收件人邮箱\n            string[] toToAddressStrings = strToAddress.Split(\";\");\n            foreach (var str in toToAddressStrings)\n            {\n                if (CheckEmail(str))\n                {\n                    msg.To.Add(str);\n                }\n            }\n            //抄送人邮箱\n            string[] toCcAddressStrings = strCcAddress.Split(\";\");\n            foreach (var str in toCcAddressStrings)\n            {\n                if (CheckEmail(str))\n                {\n                    msg.CC.Add(str);\n                }\n            }\n            //发件人信息(地址,姓名,(编码))\n            msg.From = new MailAddress(strSendAddress, strSendName, Encoding.UTF8);\n            //邮件标题\n            msg.Subject = strSubject;\n            //邮件标题编码 \n            msg.SubjectEncoding = Encoding.UTF8;\n            //邮件内容   \n            msg.Body = strBody;\n            //邮件内容编码   \n            msg.BodyEncoding = Encoding.UTF8;\n            //邮件附件,第二个参数表示附件的文件类型，可以不用指定\n            if (!string.IsNullOrWhiteSpace(strFilePath))\n            {\n                msg.Attachments.Add(new Attachment(strFilePath, System.Net.Mime.MediaTypeNames.Application.Rtf));\n            }\n\n            //是否是HTML邮件   \n            msg.IsBodyHtml = false;\n            msg.Priority = MailPriority.High;//邮件优先级   \n            return msg;\n        }\n\n        /// <summary>\n        /// localhost 发送邮件(需要在本地搭建SMTP服务器)\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <returns></returns>\n        public static string SendMailLocalhost(MailMessage msg)\n        {\n            SmtpClient client = new SmtpClient();\n            client.Host = \"localhost\";\n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);  \n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n\n        /// <summary>\n        /// SMTP发送邮件\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"strSendAddress\"></param>\n        /// <param name=\"strSmtp\"></param>\n        /// <returns></returns>\n        public static string SendMailUseSmtp(MailMessage msg, string strSendAddress, string strSmtp)\n        {\n            SmtpClient client = new SmtpClient();\n            //邮箱和SMTP授权码\n            client.Credentials = new System.Net.NetworkCredential(strSendAddress, strSmtp);\n            client.Host = \"smtp.qq.com\";\n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);\n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (System.Net.Mail.SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n\n        /// <summary>\n        /// SSL-SMTP发送邮件\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"strSendAddress\"></param>\n        /// <param name=\"strSmtp\"></param>\n        /// <returns></returns>\n        public static string SendMailUseSslSmtp(MailMessage msg,string strSendAddress,string strSmtp)\n        {\n            SmtpClient client = new SmtpClient();\n            //GMail邮箱和SMTP授权码\n            client.Credentials = new System.Net.NetworkCredential(strSendAddress, strSmtp);\n            client.Port = 587;//Gmail使用的端口   \n            client.Host = \"smtp.qq.com\";\n            client.EnableSsl = true;//经过ssl加密   \n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);\n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (System.Net.Mail.SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n    }\n}\n```\n\n#### 调用\n```cs\nusing System;\nusing System.Net.Mail;\n\nnamespace FrmSendMail\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            MailMessage mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"localhost\",\n                \"localhost测试\", \"内容测试\", \"\");\n            string msg = MailHelper.SendMailLocalhost(mailInfo);\n            Console.WriteLine(msg);\n            mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"SMTP\",\n                \"SMTP测试\", \"内容测试\", \"\");\n            msg = MailHelper.SendMailUseSmtp(mailInfo, \"c@qq.com\", \"授权码\");\n            Console.WriteLine(msg);\n            mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"SSL-SMTP\",\n                \"SSL-SMTP测试\", \"内容测试\", \"\");\n            msg = MailHelper.SendMailUseSslSmtp(mailInfo, \"c@qq.com\", \"授权码\");\n            Console.WriteLine(msg);\n        }\n\n    }\n}\n```","source":"_posts/CSharp-发送邮件.md","raw":"---\ntitle: CSharp-发送邮件\ndate: 2019-05-30 00:08:16\ncategories: C# \ntags: \n - 邮件\n - C#\n---\n#### 起源\n最近负责的一个项目,客户提了一个需求,自动导出输出,按格式生成xls,并将xls文件当成附件发送邮件,就此,研究了一下C#怎么发送邮件.\n<!--more-->\n\n#### MailHelper.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Mail;\nusing System.Text;\n\nnamespace FrmSendMail\n{\n    class MailHelper\n    {\n\n        /// 正则表达式检测Email格式\n        /// </summary>\n        /// <param name=\"Email\"></param>\n        /// <returns></returns>\n        public static bool CheckEmail(string Email)\n        {\n            bool Flag = false;\n            string str = \"([a-zA-Z0-9_\\\\.\\\\-])+\\\\@(([a-zA-Z0-9\\\\-])+\\\\.)+([a-zA-Z0-9]{2,5})+\";\n            string[] result = GetPathPoint(Email, str);\n            if (result != null)\n            {\n                Flag = result.Contains(Email) ? true : Flag;\n            }\n\n            return Flag;\n        }\n\n        /// <summary>\n        /// 获取正则表达式匹配结果集\n        /// </summary>\n        /// <param name=\"value\">字符串</param>\n        /// <param name=\"regx\">正则表达式</param>\n        /// <returns></returns>\n        public static string[] GetPathPoint(string value, string regx)\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                return null;\n            bool isMatch = System.Text.RegularExpressions.Regex.IsMatch(value, regx);\n            if (!isMatch)\n                return null;\n            System.Text.RegularExpressions.MatchCollection matchCol = System.Text.RegularExpressions.Regex.Matches(value, regx);\n            string[] result = new string[matchCol.Count];\n            if (matchCol.Count > 0)\n            {\n                for (int i = 0; i < matchCol.Count; i++)\n                {\n                    result[i] = matchCol[i].Value;\n                }\n            }\n            return result;\n        }\n\n        /// <summary>\n        /// 设置邮件信息\n        /// </summary>\n        /// <param name=\"strToAddress\">收件人地址,多个用;分隔</param>\n        /// <param name=\"strCcAddress\">抄送人地址,多个用;分隔</param>\n        /// <param name=\"strSendAddress\">发件人地址</param>\n        /// <param name=\"strSendName\">发件人姓名</param>\n        /// <param name=\"strSubject\">邮件主题</param>\n        /// <param name=\"strBody\">邮件内容</param>\n        /// <param name=\"strFilePath\">邮件附件(绝对路径)</param>\n        /// <returns></returns>\n        public static MailMessage SetMailInfo(string strToAddress, string strCcAddress, string strSendAddress, string strSendName, string strSubject, string strBody, string strFilePath)\n        {\n            MailMessage msg = new System.Net.Mail.MailMessage();\n            //收件人邮箱\n            string[] toToAddressStrings = strToAddress.Split(\";\");\n            foreach (var str in toToAddressStrings)\n            {\n                if (CheckEmail(str))\n                {\n                    msg.To.Add(str);\n                }\n            }\n            //抄送人邮箱\n            string[] toCcAddressStrings = strCcAddress.Split(\";\");\n            foreach (var str in toCcAddressStrings)\n            {\n                if (CheckEmail(str))\n                {\n                    msg.CC.Add(str);\n                }\n            }\n            //发件人信息(地址,姓名,(编码))\n            msg.From = new MailAddress(strSendAddress, strSendName, Encoding.UTF8);\n            //邮件标题\n            msg.Subject = strSubject;\n            //邮件标题编码 \n            msg.SubjectEncoding = Encoding.UTF8;\n            //邮件内容   \n            msg.Body = strBody;\n            //邮件内容编码   \n            msg.BodyEncoding = Encoding.UTF8;\n            //邮件附件,第二个参数表示附件的文件类型，可以不用指定\n            if (!string.IsNullOrWhiteSpace(strFilePath))\n            {\n                msg.Attachments.Add(new Attachment(strFilePath, System.Net.Mime.MediaTypeNames.Application.Rtf));\n            }\n\n            //是否是HTML邮件   \n            msg.IsBodyHtml = false;\n            msg.Priority = MailPriority.High;//邮件优先级   \n            return msg;\n        }\n\n        /// <summary>\n        /// localhost 发送邮件(需要在本地搭建SMTP服务器)\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <returns></returns>\n        public static string SendMailLocalhost(MailMessage msg)\n        {\n            SmtpClient client = new SmtpClient();\n            client.Host = \"localhost\";\n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);  \n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n\n        /// <summary>\n        /// SMTP发送邮件\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"strSendAddress\"></param>\n        /// <param name=\"strSmtp\"></param>\n        /// <returns></returns>\n        public static string SendMailUseSmtp(MailMessage msg, string strSendAddress, string strSmtp)\n        {\n            SmtpClient client = new SmtpClient();\n            //邮箱和SMTP授权码\n            client.Credentials = new System.Net.NetworkCredential(strSendAddress, strSmtp);\n            client.Host = \"smtp.qq.com\";\n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);\n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (System.Net.Mail.SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n\n        /// <summary>\n        /// SSL-SMTP发送邮件\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"strSendAddress\"></param>\n        /// <param name=\"strSmtp\"></param>\n        /// <returns></returns>\n        public static string SendMailUseSslSmtp(MailMessage msg,string strSendAddress,string strSmtp)\n        {\n            SmtpClient client = new SmtpClient();\n            //GMail邮箱和SMTP授权码\n            client.Credentials = new System.Net.NetworkCredential(strSendAddress, strSmtp);\n            client.Port = 587;//Gmail使用的端口   \n            client.Host = \"smtp.qq.com\";\n            client.EnableSsl = true;//经过ssl加密   \n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);\n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (System.Net.Mail.SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n    }\n}\n```\n\n#### 调用\n```cs\nusing System;\nusing System.Net.Mail;\n\nnamespace FrmSendMail\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            MailMessage mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"localhost\",\n                \"localhost测试\", \"内容测试\", \"\");\n            string msg = MailHelper.SendMailLocalhost(mailInfo);\n            Console.WriteLine(msg);\n            mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"SMTP\",\n                \"SMTP测试\", \"内容测试\", \"\");\n            msg = MailHelper.SendMailUseSmtp(mailInfo, \"c@qq.com\", \"授权码\");\n            Console.WriteLine(msg);\n            mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"SSL-SMTP\",\n                \"SSL-SMTP测试\", \"内容测试\", \"\");\n            msg = MailHelper.SendMailUseSslSmtp(mailInfo, \"c@qq.com\", \"授权码\");\n            Console.WriteLine(msg);\n        }\n\n    }\n}\n```","slug":"CSharp-发送邮件","published":1,"updated":"2021-03-30T03:24:16.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzs001svcuaee4khqai","content":"<h4 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h4><p>最近负责的一个项目,客户提了一个需求,自动导出输出,按格式生成xls,并将xls文件当成附件发送邮件,就此,研究了一下C#怎么发送邮件.</p>\n<span id=\"more\"></span>\n\n<h4 id=\"MailHelper-cs\"><a href=\"#MailHelper-cs\" class=\"headerlink\" title=\"MailHelper.cs\"></a>MailHelper.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Mail;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FrmSendMail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">MailHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 正则表达式检测Email格式</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;Email&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">CheckEmail</span>(<span class=\"params\"><span class=\"built_in\">string</span> Email</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">bool</span> Flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> str = <span class=\"string\">&quot;([a-zA-Z0-9_\\\\.\\\\-])+\\\\@(([a-zA-Z0-9\\\\-])+\\\\.)+([a-zA-Z0-9]&#123;2,5&#125;)+&quot;</span>;</span><br><span class=\"line\">            <span class=\"built_in\">string</span>[] result = GetPathPoint(Email, str);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Flag = result.Contains(Email) ? <span class=\"literal\">true</span> : Flag;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Flag;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取正则表达式匹配结果集</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;value&quot;&gt;</span>字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;regx&quot;&gt;</span>正则表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span>[] <span class=\"title\">GetPathPoint</span>(<span class=\"params\"><span class=\"built_in\">string</span> <span class=\"keyword\">value</span>, <span class=\"built_in\">string</span> regx</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrWhiteSpace(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"built_in\">bool</span> isMatch = System.Text.RegularExpressions.Regex.IsMatch(<span class=\"keyword\">value</span>, regx);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isMatch)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            System.Text.RegularExpressions.MatchCollection matchCol = System.Text.RegularExpressions.Regex.Matches(<span class=\"keyword\">value</span>, regx);</span><br><span class=\"line\">            <span class=\"built_in\">string</span>[] result = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[matchCol.Count];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matchCol.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; matchCol.Count; i++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    result[i] = matchCol[i].Value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 设置邮件信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strToAddress&quot;&gt;</span>收件人地址,多个用;分隔<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strCcAddress&quot;&gt;</span>抄送人地址,多个用;分隔<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSendAddress&quot;&gt;</span>发件人地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSendName&quot;&gt;</span>发件人姓名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSubject&quot;&gt;</span>邮件主题<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strBody&quot;&gt;</span>邮件内容<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strFilePath&quot;&gt;</span>邮件附件(绝对路径)<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MailMessage <span class=\"title\">SetMailInfo</span>(<span class=\"params\"><span class=\"built_in\">string</span> strToAddress, <span class=\"built_in\">string</span> strCcAddress, <span class=\"built_in\">string</span> strSendAddress, <span class=\"built_in\">string</span> strSendName, <span class=\"built_in\">string</span> strSubject, <span class=\"built_in\">string</span> strBody, <span class=\"built_in\">string</span> strFilePath</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            MailMessage msg = <span class=\"keyword\">new</span> System.Net.Mail.MailMessage();</span><br><span class=\"line\">            <span class=\"comment\">//收件人邮箱</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span>[] toToAddressStrings = strToAddress.Split(<span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> str <span class=\"keyword\">in</span> toToAddressStrings)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (CheckEmail(str))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    msg.To.Add(str);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//抄送人邮箱</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span>[] toCcAddressStrings = strCcAddress.Split(<span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> str <span class=\"keyword\">in</span> toCcAddressStrings)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (CheckEmail(str))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    msg.CC.Add(str);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//发件人信息(地址,姓名,(编码))</span></span><br><span class=\"line\">            msg.From = <span class=\"keyword\">new</span> MailAddress(strSendAddress, strSendName, Encoding.UTF8);</span><br><span class=\"line\">            <span class=\"comment\">//邮件标题</span></span><br><span class=\"line\">            msg.Subject = strSubject;</span><br><span class=\"line\">            <span class=\"comment\">//邮件标题编码 </span></span><br><span class=\"line\">            msg.SubjectEncoding = Encoding.UTF8;</span><br><span class=\"line\">            <span class=\"comment\">//邮件内容   </span></span><br><span class=\"line\">            msg.Body = strBody;</span><br><span class=\"line\">            <span class=\"comment\">//邮件内容编码   </span></span><br><span class=\"line\">            msg.BodyEncoding = Encoding.UTF8;</span><br><span class=\"line\">            <span class=\"comment\">//邮件附件,第二个参数表示附件的文件类型，可以不用指定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrWhiteSpace(strFilePath))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                msg.Attachments.Add(<span class=\"keyword\">new</span> Attachment(strFilePath, System.Net.Mime.MediaTypeNames.Application.Rtf));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//是否是HTML邮件   </span></span><br><span class=\"line\">            msg.IsBodyHtml = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            msg.Priority = MailPriority.High;<span class=\"comment\">//邮件优先级   </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> localhost 发送邮件(需要在本地搭建SMTP服务器)</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">SendMailLocalhost</span>(<span class=\"params\">MailMessage msg</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            client.Host = <span class=\"string\">&quot;localhost&quot;</span>;</span><br><span class=\"line\">            <span class=\"built_in\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);  </span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送成功&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送邮件出错&quot;</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SMTP发送邮件</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSendAddress&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSmtp&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">SendMailUseSmtp</span>(<span class=\"params\">MailMessage msg, <span class=\"built_in\">string</span> strSendAddress, <span class=\"built_in\">string</span> strSmtp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            <span class=\"comment\">//邮箱和SMTP授权码</span></span><br><span class=\"line\">            client.Credentials = <span class=\"keyword\">new</span> System.Net.NetworkCredential(strSendAddress, strSmtp);</span><br><span class=\"line\">            client.Host = <span class=\"string\">&quot;smtp.qq.com&quot;</span>;</span><br><span class=\"line\">            <span class=\"built_in\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);</span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送成功&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (System.Net.Mail.SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送邮件出错&quot;</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SSL-SMTP发送邮件</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSendAddress&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSmtp&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">SendMailUseSslSmtp</span>(<span class=\"params\">MailMessage msg,<span class=\"built_in\">string</span> strSendAddress,<span class=\"built_in\">string</span> strSmtp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            <span class=\"comment\">//GMail邮箱和SMTP授权码</span></span><br><span class=\"line\">            client.Credentials = <span class=\"keyword\">new</span> System.Net.NetworkCredential(strSendAddress, strSmtp);</span><br><span class=\"line\">            client.Port = <span class=\"number\">587</span>;<span class=\"comment\">//Gmail使用的端口   </span></span><br><span class=\"line\">            client.Host = <span class=\"string\">&quot;smtp.qq.com&quot;</span>;</span><br><span class=\"line\">            client.EnableSsl = <span class=\"literal\">true</span>;<span class=\"comment\">//经过ssl加密   </span></span><br><span class=\"line\">            <span class=\"built_in\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);</span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送成功&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (System.Net.Mail.SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送邮件出错&quot;</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Mail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FrmSendMail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            MailMessage mailInfo = MailHelper.SetMailInfo(<span class=\"string\">&quot;a@qq.com&quot;</span>, <span class=\"string\">&quot;b@qq.com&quot;</span>, <span class=\"string\">&quot;c@qq.com&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;localhost测试&quot;</span>, <span class=\"string\">&quot;内容测试&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">string</span> msg = MailHelper.SendMailLocalhost(mailInfo);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">            mailInfo = MailHelper.SetMailInfo(<span class=\"string\">&quot;a@qq.com&quot;</span>, <span class=\"string\">&quot;b@qq.com&quot;</span>, <span class=\"string\">&quot;c@qq.com&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;SMTP&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;SMTP测试&quot;</span>, <span class=\"string\">&quot;内容测试&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            msg = MailHelper.SendMailUseSmtp(mailInfo, <span class=\"string\">&quot;c@qq.com&quot;</span>, <span class=\"string\">&quot;授权码&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">            mailInfo = MailHelper.SetMailInfo(<span class=\"string\">&quot;a@qq.com&quot;</span>, <span class=\"string\">&quot;b@qq.com&quot;</span>, <span class=\"string\">&quot;c@qq.com&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;SSL-SMTP&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;SSL-SMTP测试&quot;</span>, <span class=\"string\">&quot;内容测试&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            msg = MailHelper.SendMailUseSslSmtp(mailInfo, <span class=\"string\">&quot;c@qq.com&quot;</span>, <span class=\"string\">&quot;授权码&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":6305,"excerpt":"<h4 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h4><p>最近负责的一个项目,客户提了一个需求,自动导出输出,按格式生成xls,并将xls文件当成附件发送邮件,就此,研究了一下C#怎么发送邮件.</p>","more":"<h4 id=\"MailHelper-cs\"><a href=\"#MailHelper-cs\" class=\"headerlink\" title=\"MailHelper.cs\"></a>MailHelper.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Mail;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FrmSendMail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">MailHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 正则表达式检测Email格式</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;Email&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">CheckEmail</span>(<span class=\"params\"><span class=\"built_in\">string</span> Email</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">bool</span> Flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> str = <span class=\"string\">&quot;([a-zA-Z0-9_\\\\.\\\\-])+\\\\@(([a-zA-Z0-9\\\\-])+\\\\.)+([a-zA-Z0-9]&#123;2,5&#125;)+&quot;</span>;</span><br><span class=\"line\">            <span class=\"built_in\">string</span>[] result = GetPathPoint(Email, str);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Flag = result.Contains(Email) ? <span class=\"literal\">true</span> : Flag;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Flag;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取正则表达式匹配结果集</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;value&quot;&gt;</span>字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;regx&quot;&gt;</span>正则表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span>[] <span class=\"title\">GetPathPoint</span>(<span class=\"params\"><span class=\"built_in\">string</span> <span class=\"keyword\">value</span>, <span class=\"built_in\">string</span> regx</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrWhiteSpace(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"built_in\">bool</span> isMatch = System.Text.RegularExpressions.Regex.IsMatch(<span class=\"keyword\">value</span>, regx);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isMatch)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            System.Text.RegularExpressions.MatchCollection matchCol = System.Text.RegularExpressions.Regex.Matches(<span class=\"keyword\">value</span>, regx);</span><br><span class=\"line\">            <span class=\"built_in\">string</span>[] result = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[matchCol.Count];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matchCol.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; matchCol.Count; i++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    result[i] = matchCol[i].Value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 设置邮件信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strToAddress&quot;&gt;</span>收件人地址,多个用;分隔<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strCcAddress&quot;&gt;</span>抄送人地址,多个用;分隔<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSendAddress&quot;&gt;</span>发件人地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSendName&quot;&gt;</span>发件人姓名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSubject&quot;&gt;</span>邮件主题<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strBody&quot;&gt;</span>邮件内容<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strFilePath&quot;&gt;</span>邮件附件(绝对路径)<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MailMessage <span class=\"title\">SetMailInfo</span>(<span class=\"params\"><span class=\"built_in\">string</span> strToAddress, <span class=\"built_in\">string</span> strCcAddress, <span class=\"built_in\">string</span> strSendAddress, <span class=\"built_in\">string</span> strSendName, <span class=\"built_in\">string</span> strSubject, <span class=\"built_in\">string</span> strBody, <span class=\"built_in\">string</span> strFilePath</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            MailMessage msg = <span class=\"keyword\">new</span> System.Net.Mail.MailMessage();</span><br><span class=\"line\">            <span class=\"comment\">//收件人邮箱</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span>[] toToAddressStrings = strToAddress.Split(<span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> str <span class=\"keyword\">in</span> toToAddressStrings)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (CheckEmail(str))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    msg.To.Add(str);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//抄送人邮箱</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span>[] toCcAddressStrings = strCcAddress.Split(<span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> str <span class=\"keyword\">in</span> toCcAddressStrings)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (CheckEmail(str))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    msg.CC.Add(str);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//发件人信息(地址,姓名,(编码))</span></span><br><span class=\"line\">            msg.From = <span class=\"keyword\">new</span> MailAddress(strSendAddress, strSendName, Encoding.UTF8);</span><br><span class=\"line\">            <span class=\"comment\">//邮件标题</span></span><br><span class=\"line\">            msg.Subject = strSubject;</span><br><span class=\"line\">            <span class=\"comment\">//邮件标题编码 </span></span><br><span class=\"line\">            msg.SubjectEncoding = Encoding.UTF8;</span><br><span class=\"line\">            <span class=\"comment\">//邮件内容   </span></span><br><span class=\"line\">            msg.Body = strBody;</span><br><span class=\"line\">            <span class=\"comment\">//邮件内容编码   </span></span><br><span class=\"line\">            msg.BodyEncoding = Encoding.UTF8;</span><br><span class=\"line\">            <span class=\"comment\">//邮件附件,第二个参数表示附件的文件类型，可以不用指定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrWhiteSpace(strFilePath))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                msg.Attachments.Add(<span class=\"keyword\">new</span> Attachment(strFilePath, System.Net.Mime.MediaTypeNames.Application.Rtf));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//是否是HTML邮件   </span></span><br><span class=\"line\">            msg.IsBodyHtml = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            msg.Priority = MailPriority.High;<span class=\"comment\">//邮件优先级   </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> localhost 发送邮件(需要在本地搭建SMTP服务器)</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">SendMailLocalhost</span>(<span class=\"params\">MailMessage msg</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            client.Host = <span class=\"string\">&quot;localhost&quot;</span>;</span><br><span class=\"line\">            <span class=\"built_in\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);  </span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送成功&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送邮件出错&quot;</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SMTP发送邮件</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSendAddress&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSmtp&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">SendMailUseSmtp</span>(<span class=\"params\">MailMessage msg, <span class=\"built_in\">string</span> strSendAddress, <span class=\"built_in\">string</span> strSmtp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            <span class=\"comment\">//邮箱和SMTP授权码</span></span><br><span class=\"line\">            client.Credentials = <span class=\"keyword\">new</span> System.Net.NetworkCredential(strSendAddress, strSmtp);</span><br><span class=\"line\">            client.Host = <span class=\"string\">&quot;smtp.qq.com&quot;</span>;</span><br><span class=\"line\">            <span class=\"built_in\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);</span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送成功&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (System.Net.Mail.SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送邮件出错&quot;</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SSL-SMTP发送邮件</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSendAddress&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;strSmtp&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">SendMailUseSslSmtp</span>(<span class=\"params\">MailMessage msg,<span class=\"built_in\">string</span> strSendAddress,<span class=\"built_in\">string</span> strSmtp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            <span class=\"comment\">//GMail邮箱和SMTP授权码</span></span><br><span class=\"line\">            client.Credentials = <span class=\"keyword\">new</span> System.Net.NetworkCredential(strSendAddress, strSmtp);</span><br><span class=\"line\">            client.Port = <span class=\"number\">587</span>;<span class=\"comment\">//Gmail使用的端口   </span></span><br><span class=\"line\">            client.Host = <span class=\"string\">&quot;smtp.qq.com&quot;</span>;</span><br><span class=\"line\">            client.EnableSsl = <span class=\"literal\">true</span>;<span class=\"comment\">//经过ssl加密   </span></span><br><span class=\"line\">            <span class=\"built_in\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);</span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送成功&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (System.Net.Mail.SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;发送邮件出错&quot;</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Mail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FrmSendMail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            MailMessage mailInfo = MailHelper.SetMailInfo(<span class=\"string\">&quot;a@qq.com&quot;</span>, <span class=\"string\">&quot;b@qq.com&quot;</span>, <span class=\"string\">&quot;c@qq.com&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;localhost测试&quot;</span>, <span class=\"string\">&quot;内容测试&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">string</span> msg = MailHelper.SendMailLocalhost(mailInfo);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">            mailInfo = MailHelper.SetMailInfo(<span class=\"string\">&quot;a@qq.com&quot;</span>, <span class=\"string\">&quot;b@qq.com&quot;</span>, <span class=\"string\">&quot;c@qq.com&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;SMTP&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;SMTP测试&quot;</span>, <span class=\"string\">&quot;内容测试&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            msg = MailHelper.SendMailUseSmtp(mailInfo, <span class=\"string\">&quot;c@qq.com&quot;</span>, <span class=\"string\">&quot;授权码&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">            mailInfo = MailHelper.SetMailInfo(<span class=\"string\">&quot;a@qq.com&quot;</span>, <span class=\"string\">&quot;b@qq.com&quot;</span>, <span class=\"string\">&quot;c@qq.com&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;SSL-SMTP&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;SSL-SMTP测试&quot;</span>, <span class=\"string\">&quot;内容测试&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            msg = MailHelper.SendMailUseSslSmtp(mailInfo, <span class=\"string\">&quot;c@qq.com&quot;</span>, <span class=\"string\">&quot;授权码&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CSharp-在Winform中使用Sqlite","date":"2018-12-11T14:48:20.000Z","_content":"近期了解了一下Sqlite数据库,便想把之前写的一个爬虫项目的数据库里添加Sqlite支持,一开始想着用EF去完成的,后面尝试过后,发现EF用起来并不是那么方便,就改成用Sqlite的ORM框架,这里采用的是sqlite-net-pcl,nuget查找sqlite-net-pcl并选择即可.\n<!--more-->\n##### 定义实体类\n```cs\npublic class Book\n{\n    [PrimaryKey, AutoIncrement]\n    public int BookId { get; set; }\n    public string BookName { get; set; }\n    public string BookLink { get; set; }\n    public string DownloadLink { get; set; }\n}\n```\n##### 定义数据库连接\n```cs\npublic class BookSqliteDb : SQLiteConnection\n{\n    //定义属性，便于外部访问数据表\n    public TableQuery<Book> Books { get { return this.Table<Book>(); } }\n\n    public BookSqliteDb(string dbPath) : base(dbPath)\n    {\n        //创建数据表\n        CreateTable<Book>();\n    }\n}\n```\n##### 调用\n```cs\n//定义Sqlite文件路径\nprivate string dbPath = $\"{Environment.CurrentDirectory}\\\\Kindle.db\";\n\n//增加\nList<Book> books = new List<Book>()\n{\n    new Book() { BookId = \"1\", BookName = \"将夜\", BookLink = \"www.baidu.com\", DownloadLink = \"www.baidu.com\" }\n};\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    int count = Kindledb.InsertAll(books);\n}\n\n//修改\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    var book = Kindledb.Books.FirstOrDefault(x => x.BookName == \"将夜\");\n    if (book != null)\n    {\n        book.BookLink = \"\";\n        int count = Kindledb.Update(book);\n    }\n}\n\n//删除\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    int count = Kindledb.Books.Delete(x => x.BookName == \"将夜\");\n}\n\n//查询\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    var books = Kindledb.Books.Where(x => x.BookName == \"将夜\").OrderByDescending(x => x.BookId).ToList();\n    string str = $\"{DateTime.Now}, 查到{books.Count}条记录\";\n}\n```","source":"_posts/CSharp-在Winform中使用Sqlite.md","raw":"---\ntitle: 'CSharp-在Winform中使用Sqlite'\ndate: 2018-12-11 22:48:20\ncategories: C# \ntags: \n - Sqlite\n - C#\n---\n近期了解了一下Sqlite数据库,便想把之前写的一个爬虫项目的数据库里添加Sqlite支持,一开始想着用EF去完成的,后面尝试过后,发现EF用起来并不是那么方便,就改成用Sqlite的ORM框架,这里采用的是sqlite-net-pcl,nuget查找sqlite-net-pcl并选择即可.\n<!--more-->\n##### 定义实体类\n```cs\npublic class Book\n{\n    [PrimaryKey, AutoIncrement]\n    public int BookId { get; set; }\n    public string BookName { get; set; }\n    public string BookLink { get; set; }\n    public string DownloadLink { get; set; }\n}\n```\n##### 定义数据库连接\n```cs\npublic class BookSqliteDb : SQLiteConnection\n{\n    //定义属性，便于外部访问数据表\n    public TableQuery<Book> Books { get { return this.Table<Book>(); } }\n\n    public BookSqliteDb(string dbPath) : base(dbPath)\n    {\n        //创建数据表\n        CreateTable<Book>();\n    }\n}\n```\n##### 调用\n```cs\n//定义Sqlite文件路径\nprivate string dbPath = $\"{Environment.CurrentDirectory}\\\\Kindle.db\";\n\n//增加\nList<Book> books = new List<Book>()\n{\n    new Book() { BookId = \"1\", BookName = \"将夜\", BookLink = \"www.baidu.com\", DownloadLink = \"www.baidu.com\" }\n};\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    int count = Kindledb.InsertAll(books);\n}\n\n//修改\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    var book = Kindledb.Books.FirstOrDefault(x => x.BookName == \"将夜\");\n    if (book != null)\n    {\n        book.BookLink = \"\";\n        int count = Kindledb.Update(book);\n    }\n}\n\n//删除\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    int count = Kindledb.Books.Delete(x => x.BookName == \"将夜\");\n}\n\n//查询\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    var books = Kindledb.Books.Where(x => x.BookName == \"将夜\").OrderByDescending(x => x.BookId).ToList();\n    string str = $\"{DateTime.Now}, 查到{books.Count}条记录\";\n}\n```","slug":"CSharp-在Winform中使用Sqlite","published":1,"updated":"2021-03-30T03:24:16.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzt001wvcua3lmi256p","content":"<p>近期了解了一下Sqlite数据库,便想把之前写的一个爬虫项目的数据库里添加Sqlite支持,一开始想着用EF去完成的,后面尝试过后,发现EF用起来并不是那么方便,就改成用Sqlite的ORM框架,这里采用的是sqlite-net-pcl,nuget查找sqlite-net-pcl并选择即可.</p>\n<span id=\"more\"></span>\n<h5 id=\"定义实体类\"><a href=\"#定义实体类\" class=\"headerlink\" title=\"定义实体类\"></a>定义实体类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Book</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">PrimaryKey, AutoIncrement</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> BookId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> BookName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> BookLink &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DownloadLink &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"定义数据库连接\"><a href=\"#定义数据库连接\" class=\"headerlink\" title=\"定义数据库连接\"></a>定义数据库连接</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BookSqliteDb</span> : <span class=\"title\">SQLiteConnection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义属性，便于外部访问数据表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TableQuery</span>&lt;<span class=\"title\">Book</span>&gt; Books</span> &#123; <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Table&lt;Book&gt;(); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookSqliteDb</span>(<span class=\"params\"><span class=\"built_in\">string</span> dbPath</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbPath</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建数据表</span></span><br><span class=\"line\">        CreateTable&lt;Book&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Sqlite文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> dbPath = <span class=\"string\">$&quot;<span class=\"subst\">&#123;Environment.CurrentDirectory&#125;</span>\\\\Kindle.db&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//增加</span></span><br><span class=\"line\">List&lt;Book&gt; books = <span class=\"keyword\">new</span> List&lt;Book&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Book() &#123; BookId = <span class=\"string\">&quot;1&quot;</span>, BookName = <span class=\"string\">&quot;将夜&quot;</span>, BookLink = <span class=\"string\">&quot;www.baidu.com&quot;</span>, DownloadLink = <span class=\"string\">&quot;www.baidu.com&quot;</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> count = Kindledb.InsertAll(books);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> book = Kindledb.Books.FirstOrDefault(x =&gt; x.BookName == <span class=\"string\">&quot;将夜&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (book != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        book.BookLink = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> count = Kindledb.Update(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> count = Kindledb.Books.Delete(x =&gt; x.BookName == <span class=\"string\">&quot;将夜&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> books = Kindledb.Books.Where(x =&gt; x.BookName == <span class=\"string\">&quot;将夜&quot;</span>).OrderByDescending(x =&gt; x.BookId).ToList();</span><br><span class=\"line\">    <span class=\"built_in\">string</span> str = <span class=\"string\">$&quot;<span class=\"subst\">&#123;DateTime.Now&#125;</span>, 查到<span class=\"subst\">&#123;books.Count&#125;</span>条记录&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1671,"excerpt":"<p>近期了解了一下Sqlite数据库,便想把之前写的一个爬虫项目的数据库里添加Sqlite支持,一开始想着用EF去完成的,后面尝试过后,发现EF用起来并不是那么方便,就改成用Sqlite的ORM框架,这里采用的是sqlite-net-pcl,nuget查找sqlite-net-pcl并选择即可.</p>","more":"<h5 id=\"定义实体类\"><a href=\"#定义实体类\" class=\"headerlink\" title=\"定义实体类\"></a>定义实体类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Book</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">PrimaryKey, AutoIncrement</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> BookId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> BookName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> BookLink &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DownloadLink &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"定义数据库连接\"><a href=\"#定义数据库连接\" class=\"headerlink\" title=\"定义数据库连接\"></a>定义数据库连接</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BookSqliteDb</span> : <span class=\"title\">SQLiteConnection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义属性，便于外部访问数据表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TableQuery</span>&lt;<span class=\"title\">Book</span>&gt; Books</span> &#123; <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Table&lt;Book&gt;(); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookSqliteDb</span>(<span class=\"params\"><span class=\"built_in\">string</span> dbPath</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbPath</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建数据表</span></span><br><span class=\"line\">        CreateTable&lt;Book&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Sqlite文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> dbPath = <span class=\"string\">$&quot;<span class=\"subst\">&#123;Environment.CurrentDirectory&#125;</span>\\\\Kindle.db&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//增加</span></span><br><span class=\"line\">List&lt;Book&gt; books = <span class=\"keyword\">new</span> List&lt;Book&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Book() &#123; BookId = <span class=\"string\">&quot;1&quot;</span>, BookName = <span class=\"string\">&quot;将夜&quot;</span>, BookLink = <span class=\"string\">&quot;www.baidu.com&quot;</span>, DownloadLink = <span class=\"string\">&quot;www.baidu.com&quot;</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> count = Kindledb.InsertAll(books);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> book = Kindledb.Books.FirstOrDefault(x =&gt; x.BookName == <span class=\"string\">&quot;将夜&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (book != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        book.BookLink = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> count = Kindledb.Update(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> count = Kindledb.Books.Delete(x =&gt; x.BookName == <span class=\"string\">&quot;将夜&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> books = Kindledb.Books.Where(x =&gt; x.BookName == <span class=\"string\">&quot;将夜&quot;</span>).OrderByDescending(x =&gt; x.BookId).ToList();</span><br><span class=\"line\">    <span class=\"built_in\">string</span> str = <span class=\"string\">$&quot;<span class=\"subst\">&#123;DateTime.Now&#125;</span>, 查到<span class=\"subst\">&#123;books.Count&#125;</span>条记录&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CSharp-字符串处理","date":"2019-04-03T14:59:11.000Z","_content":"### 字符串处理\n#### AddDays方法\n用于将指定的天数加到指定实例的值上\n```cs\n//DateTime结构的AddDays方法\nDateTime dt = DateTine.Now;\nDateTime result = dt.AddDays(30);\n//Calender类的AddDays方法\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nDataTime dtresult = cal.AddDays(dt, 10);\n```\n<!--more-->\n#### Compare方法\n用于全面比较两个字符串对象\n* Compare方法各个参数说明\n    | 参数 | 描述 |\n    | :------: | :------: |\n    | strA和strB | 待比较的两个字符串 |\n    | ignorCase | 指定是否忽略大小写 |\n    | indexA和indexB | 需要比较两个字符串中的子串时,indexA和indexB为strA和strB中子字符串的起始位置 |\n    | length | 待比较字符串的最大长度 |\n    | culture | 字符串的区域信息 |\n* Compare返回值说明\n    | 参数条件 | 返回值 |\n    | :------: | :------: |\n    | strA大于strB | 负整数 |\n    | strA小于strB | 正整数 |\n    | strA等于strB | 0 |\n* 示例\n    ```cs\n    int i = String.Compare(\"A\",\"B\");\n    ```\n#### CompareTo方法\n用于将当前字符串对象与另一个字符串对象做比较\n```cs\nString StrA = \"Caty\"\nint result = StrA.CompareTo(\"chchaty\");\n```\n#### DateDiff方法\n用于获取日期时间的间隔数\n* 参数说明\n    | 参数 | 描述 |\n    | :------: | :------: |\n    | Interval | DateInterval枚举值或String表达式,表示要用做Date1和Date2之差的单位的时间间隔 |\n    | Date1 | 要用于计算的第1个日期/时间 |\n    | Date2 | 要用于计算的第2个日期/时间 |\n    | DayOfWeek | 用于指定一周的第一天,默认星期天 |\n    | WeekOfYear | 用于指定一年的第一周,默认一月一号 |\n    | 返回值 | 返回一个Long值,用于指定两个Date值之间的时间间隔数 |\n* 示例\n    ```cs\n    DateTime dt = DateTine.Now;\n    DateTime result = dt.AddDays(30);\n    long dat = DateAndTime.DateDiff(\"s\", dt, result, FirstDayOfWeek.Sunday, FirstWeekOfYear.FirstFourDays);\n    ```\n#### Equals方法\n用于确定两个String对象是否具有相同的值\n * StringComparison枚举值说明\n    | 枚举值 | 描述 |\n    | :------: | :------: |\n    | CurrentCulture | 使用区域敏感排序规则和当前区域比较字符串 |\n    | CurrentCultureIgnoreCase | 使用区域敏感排序规则和当前区域比较字符串,忽略大小写 |\n    | InvariantCulture | 使用区域敏感排序规则和固定区域比较字符串 |\n    | InvariantCultureIgnoreCase | 使用区域敏感排序规则和固定区域比较字符串,忽略大小写 |\n    | Ordinal | 使用序号排序规则比较字符串 |\n    | OrdinalIgnoreCase | 使用序号排序规则比较字符串,忽略大小写 |\n * 示例\n    ```cs\n    bool result = string.Equals(\"hello\",\"HELLO\",StringComparison.OrdinalIgnoreCase);\n    string a = \"Caty\"\n    bool result = a.Equals(\"caty\");\n    ```\n#### Format方法\n将指定的String中的格式项替换为指定的Object实例的值的文本等效项\n```cs\nstring str = string.Format(\"{0}\",\"Caty\");\nobject[] obj = new object[] { \"C#\", \".Net\"};\nstring str = string.Format(Culture.CurrentCulture, \"$123456\", obj);\n```\n#### GetDayOfWeek方法\n用于返回指定DateTime中的日期是星期几\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nstring str = cal.GetDayOfWeek(dt);\n```\n#### GetMonth方法\n用于返回指定日期中的月份\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetMonth(dt);\n```\n#### GetYear方法\n用于返回指定日期中的年份\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetYear(dt);\n```\n#### GetMonthsInYear方法\n用于返回指定年份中的月数\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetMonthsInYear(cal.GetYear(dt));\n```\n#### GetText方法\n用于检索文本数据\n * TextDataFormat的枚举值说明\n    | 枚举值 | 描述 |\n    | :------: | :------: |\n    | Text | 指定标准的ANSI文本格式 |\n    | UnicodeText | 指定标准的Windows Unicode文本格式 |\n    | Rtf | 指定有RTF数据组成的文本 |\n    | Html | 指定有HTML数据组成的文本 |\n    | CommaSeparatedValue | 指定以逗号分隔值的格式 |\n * 示例\n    ```cs\n    string str = Clipboard.GetText();\n    ```\n#### IndexOf方法\n用于确定指定字符串在字符串中的索引\n```cs\nstring str = \"caty\"\nint a = str.IndexOf('c');\nint b = str.IndexOf(\"at\",1,2);//从第二个字符开始搜索,,搜索两个字符数\n```\n#### IsLeapYear方法\n用于判断年份是否为闰年\n```cs\nint resullt = DateTime.IsLeapYear(2014);\n```\n#### IsMatch方法\n用于验证输入字符是否与正则表达式相匹配\n```cs\nstring str = \"caty\";\nbool result = Regex.IsMatch(str,@\"^.{8,}$\");\n```\n#### IsUpper方法\n用于判断指定字符串中指定位置的字符是否大写\n```cs\nbool result = char.IsUpper(\"Caty\",0);\n```\n#### Join方法\n用于在指定String数组的每个元素之间串联指定的分隔符String,从而产生单个串联的字符串\n```cs\nstring [] arr = new string[5] { \"1\", \"2\", \"3\", \"4\",\" 5\" };\nstring result = String.Join(\",\",arr);\n```\n#### LastIndexOf方法\n用于确定指定字符在字符串中最后一次出现的索引位置\n```cs\nstring str = \"ChCaty\";\nint result = str.LastIndexOf(\"C\");\n```\n","source":"_posts/CSharp-字符串处理.md","raw":"---\ntitle: CSharp-字符串处理\ndate: 2019-04-03 22:59:11\ncategories: C# \ntags: \n - 基础\n - C#\n---\n### 字符串处理\n#### AddDays方法\n用于将指定的天数加到指定实例的值上\n```cs\n//DateTime结构的AddDays方法\nDateTime dt = DateTine.Now;\nDateTime result = dt.AddDays(30);\n//Calender类的AddDays方法\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nDataTime dtresult = cal.AddDays(dt, 10);\n```\n<!--more-->\n#### Compare方法\n用于全面比较两个字符串对象\n* Compare方法各个参数说明\n    | 参数 | 描述 |\n    | :------: | :------: |\n    | strA和strB | 待比较的两个字符串 |\n    | ignorCase | 指定是否忽略大小写 |\n    | indexA和indexB | 需要比较两个字符串中的子串时,indexA和indexB为strA和strB中子字符串的起始位置 |\n    | length | 待比较字符串的最大长度 |\n    | culture | 字符串的区域信息 |\n* Compare返回值说明\n    | 参数条件 | 返回值 |\n    | :------: | :------: |\n    | strA大于strB | 负整数 |\n    | strA小于strB | 正整数 |\n    | strA等于strB | 0 |\n* 示例\n    ```cs\n    int i = String.Compare(\"A\",\"B\");\n    ```\n#### CompareTo方法\n用于将当前字符串对象与另一个字符串对象做比较\n```cs\nString StrA = \"Caty\"\nint result = StrA.CompareTo(\"chchaty\");\n```\n#### DateDiff方法\n用于获取日期时间的间隔数\n* 参数说明\n    | 参数 | 描述 |\n    | :------: | :------: |\n    | Interval | DateInterval枚举值或String表达式,表示要用做Date1和Date2之差的单位的时间间隔 |\n    | Date1 | 要用于计算的第1个日期/时间 |\n    | Date2 | 要用于计算的第2个日期/时间 |\n    | DayOfWeek | 用于指定一周的第一天,默认星期天 |\n    | WeekOfYear | 用于指定一年的第一周,默认一月一号 |\n    | 返回值 | 返回一个Long值,用于指定两个Date值之间的时间间隔数 |\n* 示例\n    ```cs\n    DateTime dt = DateTine.Now;\n    DateTime result = dt.AddDays(30);\n    long dat = DateAndTime.DateDiff(\"s\", dt, result, FirstDayOfWeek.Sunday, FirstWeekOfYear.FirstFourDays);\n    ```\n#### Equals方法\n用于确定两个String对象是否具有相同的值\n * StringComparison枚举值说明\n    | 枚举值 | 描述 |\n    | :------: | :------: |\n    | CurrentCulture | 使用区域敏感排序规则和当前区域比较字符串 |\n    | CurrentCultureIgnoreCase | 使用区域敏感排序规则和当前区域比较字符串,忽略大小写 |\n    | InvariantCulture | 使用区域敏感排序规则和固定区域比较字符串 |\n    | InvariantCultureIgnoreCase | 使用区域敏感排序规则和固定区域比较字符串,忽略大小写 |\n    | Ordinal | 使用序号排序规则比较字符串 |\n    | OrdinalIgnoreCase | 使用序号排序规则比较字符串,忽略大小写 |\n * 示例\n    ```cs\n    bool result = string.Equals(\"hello\",\"HELLO\",StringComparison.OrdinalIgnoreCase);\n    string a = \"Caty\"\n    bool result = a.Equals(\"caty\");\n    ```\n#### Format方法\n将指定的String中的格式项替换为指定的Object实例的值的文本等效项\n```cs\nstring str = string.Format(\"{0}\",\"Caty\");\nobject[] obj = new object[] { \"C#\", \".Net\"};\nstring str = string.Format(Culture.CurrentCulture, \"$123456\", obj);\n```\n#### GetDayOfWeek方法\n用于返回指定DateTime中的日期是星期几\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nstring str = cal.GetDayOfWeek(dt);\n```\n#### GetMonth方法\n用于返回指定日期中的月份\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetMonth(dt);\n```\n#### GetYear方法\n用于返回指定日期中的年份\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetYear(dt);\n```\n#### GetMonthsInYear方法\n用于返回指定年份中的月数\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetMonthsInYear(cal.GetYear(dt));\n```\n#### GetText方法\n用于检索文本数据\n * TextDataFormat的枚举值说明\n    | 枚举值 | 描述 |\n    | :------: | :------: |\n    | Text | 指定标准的ANSI文本格式 |\n    | UnicodeText | 指定标准的Windows Unicode文本格式 |\n    | Rtf | 指定有RTF数据组成的文本 |\n    | Html | 指定有HTML数据组成的文本 |\n    | CommaSeparatedValue | 指定以逗号分隔值的格式 |\n * 示例\n    ```cs\n    string str = Clipboard.GetText();\n    ```\n#### IndexOf方法\n用于确定指定字符串在字符串中的索引\n```cs\nstring str = \"caty\"\nint a = str.IndexOf('c');\nint b = str.IndexOf(\"at\",1,2);//从第二个字符开始搜索,,搜索两个字符数\n```\n#### IsLeapYear方法\n用于判断年份是否为闰年\n```cs\nint resullt = DateTime.IsLeapYear(2014);\n```\n#### IsMatch方法\n用于验证输入字符是否与正则表达式相匹配\n```cs\nstring str = \"caty\";\nbool result = Regex.IsMatch(str,@\"^.{8,}$\");\n```\n#### IsUpper方法\n用于判断指定字符串中指定位置的字符是否大写\n```cs\nbool result = char.IsUpper(\"Caty\",0);\n```\n#### Join方法\n用于在指定String数组的每个元素之间串联指定的分隔符String,从而产生单个串联的字符串\n```cs\nstring [] arr = new string[5] { \"1\", \"2\", \"3\", \"4\",\" 5\" };\nstring result = String.Join(\",\",arr);\n```\n#### LastIndexOf方法\n用于确定指定字符在字符串中最后一次出现的索引位置\n```cs\nstring str = \"ChCaty\";\nint result = str.LastIndexOf(\"C\");\n```\n","slug":"CSharp-字符串处理","published":1,"updated":"2021-03-30T03:24:16.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzv001zvcuaawjj9jsr","content":"<h3 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h3><h4 id=\"AddDays方法\"><a href=\"#AddDays方法\" class=\"headerlink\" title=\"AddDays方法\"></a>AddDays方法</h4><p>用于将指定的天数加到指定实例的值上</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DateTime结构的AddDays方法</span></span><br><span class=\"line\">DateTime dt = DateTine.Now;</span><br><span class=\"line\">DateTime result = dt.AddDays(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"comment\">//Calender类的AddDays方法</span></span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\">DataTime dtresult = cal.AddDays(dt, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"Compare方法\"><a href=\"#Compare方法\" class=\"headerlink\" title=\"Compare方法\"></a>Compare方法</h4><p>用于全面比较两个字符串对象</p>\n<ul>\n<li>Compare方法各个参数说明<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">strA和strB</td>\n<td align=\"center\">待比较的两个字符串</td>\n</tr>\n<tr>\n<td align=\"center\">ignorCase</td>\n<td align=\"center\">指定是否忽略大小写</td>\n</tr>\n<tr>\n<td align=\"center\">indexA和indexB</td>\n<td align=\"center\">需要比较两个字符串中的子串时,indexA和indexB为strA和strB中子字符串的起始位置</td>\n</tr>\n<tr>\n<td align=\"center\">length</td>\n<td align=\"center\">待比较字符串的最大长度</td>\n</tr>\n<tr>\n<td align=\"center\">culture</td>\n<td align=\"center\">字符串的区域信息</td>\n</tr>\n</tbody></table>\n</li>\n<li>Compare返回值说明<table>\n<thead>\n<tr>\n<th align=\"center\">参数条件</th>\n<th align=\"center\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">strA大于strB</td>\n<td align=\"center\">负整数</td>\n</tr>\n<tr>\n<td align=\"center\">strA小于strB</td>\n<td align=\"center\">正整数</td>\n</tr>\n<tr>\n<td align=\"center\">strA等于strB</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n</li>\n<li>示例  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> i = String.Compare(<span class=\"string\">&quot;A&quot;</span>,<span class=\"string\">&quot;B&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"CompareTo方法\"><a href=\"#CompareTo方法\" class=\"headerlink\" title=\"CompareTo方法\"></a>CompareTo方法</h4>用于将当前字符串对象与另一个字符串对象做比较<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String StrA = <span class=\"string\">&quot;Caty&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> result = StrA.CompareTo(<span class=\"string\">&quot;chchaty&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"DateDiff方法\"><a href=\"#DateDiff方法\" class=\"headerlink\" title=\"DateDiff方法\"></a>DateDiff方法</h4>用于获取日期时间的间隔数</li>\n<li>参数说明<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Interval</td>\n<td align=\"center\">DateInterval枚举值或String表达式,表示要用做Date1和Date2之差的单位的时间间隔</td>\n</tr>\n<tr>\n<td align=\"center\">Date1</td>\n<td align=\"center\">要用于计算的第1个日期/时间</td>\n</tr>\n<tr>\n<td align=\"center\">Date2</td>\n<td align=\"center\">要用于计算的第2个日期/时间</td>\n</tr>\n<tr>\n<td align=\"center\">DayOfWeek</td>\n<td align=\"center\">用于指定一周的第一天,默认星期天</td>\n</tr>\n<tr>\n<td align=\"center\">WeekOfYear</td>\n<td align=\"center\">用于指定一年的第一周,默认一月一号</td>\n</tr>\n<tr>\n<td align=\"center\">返回值</td>\n<td align=\"center\">返回一个Long值,用于指定两个Date值之间的时间间隔数</td>\n</tr>\n</tbody></table>\n</li>\n<li>示例  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = DateTine.Now;</span><br><span class=\"line\">DateTime result = dt.AddDays(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"built_in\">long</span> dat = DateAndTime.DateDiff(<span class=\"string\">&quot;s&quot;</span>, dt, result, FirstDayOfWeek.Sunday, FirstWeekOfYear.FirstFourDays);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Equals方法\"><a href=\"#Equals方法\" class=\"headerlink\" title=\"Equals方法\"></a>Equals方法</h4>用于确定两个String对象是否具有相同的值</li>\n<li>StringComparison枚举值说明<table>\n<thead>\n<tr>\n<th align=\"center\">枚举值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CurrentCulture</td>\n<td align=\"center\">使用区域敏感排序规则和当前区域比较字符串</td>\n</tr>\n<tr>\n<td align=\"center\">CurrentCultureIgnoreCase</td>\n<td align=\"center\">使用区域敏感排序规则和当前区域比较字符串,忽略大小写</td>\n</tr>\n<tr>\n<td align=\"center\">InvariantCulture</td>\n<td align=\"center\">使用区域敏感排序规则和固定区域比较字符串</td>\n</tr>\n<tr>\n<td align=\"center\">InvariantCultureIgnoreCase</td>\n<td align=\"center\">使用区域敏感排序规则和固定区域比较字符串,忽略大小写</td>\n</tr>\n<tr>\n<td align=\"center\">Ordinal</td>\n<td align=\"center\">使用序号排序规则比较字符串</td>\n</tr>\n<tr>\n<td align=\"center\">OrdinalIgnoreCase</td>\n<td align=\"center\">使用序号排序规则比较字符串,忽略大小写</td>\n</tr>\n</tbody></table>\n</li>\n<li>示例 <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> result = <span class=\"built_in\">string</span>.Equals(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;HELLO&quot;</span>,StringComparison.OrdinalIgnoreCase);</span><br><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;Caty&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> result = a.Equals(<span class=\"string\">&quot;caty&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Format方法\"><a href=\"#Format方法\" class=\"headerlink\" title=\"Format方法\"></a>Format方法</h4>将指定的String中的格式项替换为指定的Object实例的值的文本等效项<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"built_in\">string</span>.Format(<span class=\"string\">&quot;&#123;0&#125;&quot;</span>,<span class=\"string\">&quot;Caty&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">object</span>[] obj = <span class=\"keyword\">new</span> <span class=\"built_in\">object</span>[] &#123; <span class=\"string\">&quot;C#&quot;</span>, <span class=\"string\">&quot;.Net&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"built_in\">string</span>.Format(Culture.CurrentCulture, <span class=\"string\">&quot;$123456&quot;</span>, obj);</span><br></pre></td></tr></table></figure>\n<h4 id=\"GetDayOfWeek方法\"><a href=\"#GetDayOfWeek方法\" class=\"headerlink\" title=\"GetDayOfWeek方法\"></a>GetDayOfWeek方法</h4>用于返回指定DateTime中的日期是星期几<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"built_in\">string</span> str = cal.GetDayOfWeek(dt);</span><br></pre></td></tr></table></figure>\n<h4 id=\"GetMonth方法\"><a href=\"#GetMonth方法\" class=\"headerlink\" title=\"GetMonth方法\"></a>GetMonth方法</h4>用于返回指定日期中的月份<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i = cal.GetMonth(dt);</span><br></pre></td></tr></table></figure>\n<h4 id=\"GetYear方法\"><a href=\"#GetYear方法\" class=\"headerlink\" title=\"GetYear方法\"></a>GetYear方法</h4>用于返回指定日期中的年份<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i = cal.GetYear(dt);</span><br></pre></td></tr></table></figure>\n<h4 id=\"GetMonthsInYear方法\"><a href=\"#GetMonthsInYear方法\" class=\"headerlink\" title=\"GetMonthsInYear方法\"></a>GetMonthsInYear方法</h4>用于返回指定年份中的月数<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i = cal.GetMonthsInYear(cal.GetYear(dt));</span><br></pre></td></tr></table></figure>\n<h4 id=\"GetText方法\"><a href=\"#GetText方法\" class=\"headerlink\" title=\"GetText方法\"></a>GetText方法</h4>用于检索文本数据</li>\n<li>TextDataFormat的枚举值说明<table>\n<thead>\n<tr>\n<th align=\"center\">枚举值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Text</td>\n<td align=\"center\">指定标准的ANSI文本格式</td>\n</tr>\n<tr>\n<td align=\"center\">UnicodeText</td>\n<td align=\"center\">指定标准的Windows Unicode文本格式</td>\n</tr>\n<tr>\n<td align=\"center\">Rtf</td>\n<td align=\"center\">指定有RTF数据组成的文本</td>\n</tr>\n<tr>\n<td align=\"center\">Html</td>\n<td align=\"center\">指定有HTML数据组成的文本</td>\n</tr>\n<tr>\n<td align=\"center\">CommaSeparatedValue</td>\n<td align=\"center\">指定以逗号分隔值的格式</td>\n</tr>\n</tbody></table>\n</li>\n<li>示例 <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str = Clipboard.GetText();</span><br></pre></td></tr></table></figure>\n<h4 id=\"IndexOf方法\"><a href=\"#IndexOf方法\" class=\"headerlink\" title=\"IndexOf方法\"></a>IndexOf方法</h4>用于确定指定字符串在字符串中的索引<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">&quot;caty&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> a = str.IndexOf(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">int</span> b = str.IndexOf(<span class=\"string\">&quot;at&quot;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);<span class=\"comment\">//从第二个字符开始搜索,,搜索两个字符数</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"IsLeapYear方法\"><a href=\"#IsLeapYear方法\" class=\"headerlink\" title=\"IsLeapYear方法\"></a>IsLeapYear方法</h4>用于判断年份是否为闰年<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> resullt = DateTime.IsLeapYear(<span class=\"number\">2014</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"IsMatch方法\"><a href=\"#IsMatch方法\" class=\"headerlink\" title=\"IsMatch方法\"></a>IsMatch方法</h4>用于验证输入字符是否与正则表达式相匹配<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">&quot;caty&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">bool</span> result = Regex.IsMatch(str,<span class=\"string\">@&quot;^.&#123;8,&#125;$&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"IsUpper方法\"><a href=\"#IsUpper方法\" class=\"headerlink\" title=\"IsUpper方法\"></a>IsUpper方法</h4>用于判断指定字符串中指定位置的字符是否大写<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> result = <span class=\"built_in\">char</span>.IsUpper(<span class=\"string\">&quot;Caty&quot;</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Join方法\"><a href=\"#Join方法\" class=\"headerlink\" title=\"Join方法\"></a>Join方法</h4>用于在指定String数组的每个元素之间串联指定的分隔符String,从而产生单个串联的字符串<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> [] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[<span class=\"number\">5</span>] &#123; <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot; 5&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">string</span> result = String.Join(<span class=\"string\">&quot;,&quot;</span>,arr);</span><br></pre></td></tr></table></figure>\n<h4 id=\"LastIndexOf方法\"><a href=\"#LastIndexOf方法\" class=\"headerlink\" title=\"LastIndexOf方法\"></a>LastIndexOf方法</h4>用于确定指定字符在字符串中最后一次出现的索引位置<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">&quot;ChCaty&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> result = str.LastIndexOf(<span class=\"string\">&quot;C&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"length":3249,"excerpt":"<h3 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h3><h4 id=\"AddDays方法\"><a href=\"#AddDays方法\" class=\"headerlink\" title=\"AddDays方法\"></a>AddDays方法</h4><p>用于将指定的天数加到指定实例的值上</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DateTime结构的AddDays方法</span></span><br><span class=\"line\">DateTime dt = DateTine.Now;</span><br><span class=\"line\">DateTime result = dt.AddDays(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"comment\">//Calender类的AddDays方法</span></span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\">DataTime dtresult = cal.AddDays(dt, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"Compare方法\"><a href=\"#Compare方法\" class=\"headerlink\" title=\"Compare方法\"></a>Compare方法</h4><p>用于全面比较两个字符串对象</p>\n<ul>\n<li>Compare方法各个参数说明<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">strA和strB</td>\n<td align=\"center\">待比较的两个字符串</td>\n</tr>\n<tr>\n<td align=\"center\">ignorCase</td>\n<td align=\"center\">指定是否忽略大小写</td>\n</tr>\n<tr>\n<td align=\"center\">indexA和indexB</td>\n<td align=\"center\">需要比较两个字符串中的子串时,indexA和indexB为strA和strB中子字符串的起始位置</td>\n</tr>\n<tr>\n<td align=\"center\">length</td>\n<td align=\"center\">待比较字符串的最大长度</td>\n</tr>\n<tr>\n<td align=\"center\">culture</td>\n<td align=\"center\">字符串的区域信息</td>\n</tr>\n</tbody></table>\n</li>\n<li>Compare返回值说明<table>\n<thead>\n<tr>\n<th align=\"center\">参数条件</th>\n<th align=\"center\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">strA大于strB</td>\n<td align=\"center\">负整数</td>\n</tr>\n<tr>\n<td align=\"center\">strA小于strB</td>\n<td align=\"center\">正整数</td>\n</tr>\n<tr>\n<td align=\"center\">strA等于strB</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n</li>\n<li>示例  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> i = String.Compare(<span class=\"string\">&quot;A&quot;</span>,<span class=\"string\">&quot;B&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"CompareTo方法\"><a href=\"#CompareTo方法\" class=\"headerlink\" title=\"CompareTo方法\"></a>CompareTo方法</h4>用于将当前字符串对象与另一个字符串对象做比较<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String StrA = <span class=\"string\">&quot;Caty&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> result = StrA.CompareTo(<span class=\"string\">&quot;chchaty&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"DateDiff方法\"><a href=\"#DateDiff方法\" class=\"headerlink\" title=\"DateDiff方法\"></a>DateDiff方法</h4>用于获取日期时间的间隔数</li>\n<li>参数说明<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Interval</td>\n<td align=\"center\">DateInterval枚举值或String表达式,表示要用做Date1和Date2之差的单位的时间间隔</td>\n</tr>\n<tr>\n<td align=\"center\">Date1</td>\n<td align=\"center\">要用于计算的第1个日期/时间</td>\n</tr>\n<tr>\n<td align=\"center\">Date2</td>\n<td align=\"center\">要用于计算的第2个日期/时间</td>\n</tr>\n<tr>\n<td align=\"center\">DayOfWeek</td>\n<td align=\"center\">用于指定一周的第一天,默认星期天</td>\n</tr>\n<tr>\n<td align=\"center\">WeekOfYear</td>\n<td align=\"center\">用于指定一年的第一周,默认一月一号</td>\n</tr>\n<tr>\n<td align=\"center\">返回值</td>\n<td align=\"center\">返回一个Long值,用于指定两个Date值之间的时间间隔数</td>\n</tr>\n</tbody></table>\n</li>\n<li>示例  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = DateTine.Now;</span><br><span class=\"line\">DateTime result = dt.AddDays(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"built_in\">long</span> dat = DateAndTime.DateDiff(<span class=\"string\">&quot;s&quot;</span>, dt, result, FirstDayOfWeek.Sunday, FirstWeekOfYear.FirstFourDays);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Equals方法\"><a href=\"#Equals方法\" class=\"headerlink\" title=\"Equals方法\"></a>Equals方法</h4>用于确定两个String对象是否具有相同的值</li>\n<li>StringComparison枚举值说明<table>\n<thead>\n<tr>\n<th align=\"center\">枚举值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CurrentCulture</td>\n<td align=\"center\">使用区域敏感排序规则和当前区域比较字符串</td>\n</tr>\n<tr>\n<td align=\"center\">CurrentCultureIgnoreCase</td>\n<td align=\"center\">使用区域敏感排序规则和当前区域比较字符串,忽略大小写</td>\n</tr>\n<tr>\n<td align=\"center\">InvariantCulture</td>\n<td align=\"center\">使用区域敏感排序规则和固定区域比较字符串</td>\n</tr>\n<tr>\n<td align=\"center\">InvariantCultureIgnoreCase</td>\n<td align=\"center\">使用区域敏感排序规则和固定区域比较字符串,忽略大小写</td>\n</tr>\n<tr>\n<td align=\"center\">Ordinal</td>\n<td align=\"center\">使用序号排序规则比较字符串</td>\n</tr>\n<tr>\n<td align=\"center\">OrdinalIgnoreCase</td>\n<td align=\"center\">使用序号排序规则比较字符串,忽略大小写</td>\n</tr>\n</tbody></table>\n</li>\n<li>示例 <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> result = <span class=\"built_in\">string</span>.Equals(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;HELLO&quot;</span>,StringComparison.OrdinalIgnoreCase);</span><br><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;Caty&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> result = a.Equals(<span class=\"string\">&quot;caty&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Format方法\"><a href=\"#Format方法\" class=\"headerlink\" title=\"Format方法\"></a>Format方法</h4>将指定的String中的格式项替换为指定的Object实例的值的文本等效项<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"built_in\">string</span>.Format(<span class=\"string\">&quot;&#123;0&#125;&quot;</span>,<span class=\"string\">&quot;Caty&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">object</span>[] obj = <span class=\"keyword\">new</span> <span class=\"built_in\">object</span>[] &#123; <span class=\"string\">&quot;C#&quot;</span>, <span class=\"string\">&quot;.Net&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"built_in\">string</span>.Format(Culture.CurrentCulture, <span class=\"string\">&quot;$123456&quot;</span>, obj);</span><br></pre></td></tr></table></figure>\n<h4 id=\"GetDayOfWeek方法\"><a href=\"#GetDayOfWeek方法\" class=\"headerlink\" title=\"GetDayOfWeek方法\"></a>GetDayOfWeek方法</h4>用于返回指定DateTime中的日期是星期几<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"built_in\">string</span> str = cal.GetDayOfWeek(dt);</span><br></pre></td></tr></table></figure>\n<h4 id=\"GetMonth方法\"><a href=\"#GetMonth方法\" class=\"headerlink\" title=\"GetMonth方法\"></a>GetMonth方法</h4>用于返回指定日期中的月份<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i = cal.GetMonth(dt);</span><br></pre></td></tr></table></figure>\n<h4 id=\"GetYear方法\"><a href=\"#GetYear方法\" class=\"headerlink\" title=\"GetYear方法\"></a>GetYear方法</h4>用于返回指定日期中的年份<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i = cal.GetYear(dt);</span><br></pre></td></tr></table></figure>\n<h4 id=\"GetMonthsInYear方法\"><a href=\"#GetMonthsInYear方法\" class=\"headerlink\" title=\"GetMonthsInYear方法\"></a>GetMonthsInYear方法</h4>用于返回指定年份中的月数<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i = cal.GetMonthsInYear(cal.GetYear(dt));</span><br></pre></td></tr></table></figure>\n<h4 id=\"GetText方法\"><a href=\"#GetText方法\" class=\"headerlink\" title=\"GetText方法\"></a>GetText方法</h4>用于检索文本数据</li>\n<li>TextDataFormat的枚举值说明<table>\n<thead>\n<tr>\n<th align=\"center\">枚举值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Text</td>\n<td align=\"center\">指定标准的ANSI文本格式</td>\n</tr>\n<tr>\n<td align=\"center\">UnicodeText</td>\n<td align=\"center\">指定标准的Windows Unicode文本格式</td>\n</tr>\n<tr>\n<td align=\"center\">Rtf</td>\n<td align=\"center\">指定有RTF数据组成的文本</td>\n</tr>\n<tr>\n<td align=\"center\">Html</td>\n<td align=\"center\">指定有HTML数据组成的文本</td>\n</tr>\n<tr>\n<td align=\"center\">CommaSeparatedValue</td>\n<td align=\"center\">指定以逗号分隔值的格式</td>\n</tr>\n</tbody></table>\n</li>\n<li>示例 <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str = Clipboard.GetText();</span><br></pre></td></tr></table></figure>\n<h4 id=\"IndexOf方法\"><a href=\"#IndexOf方法\" class=\"headerlink\" title=\"IndexOf方法\"></a>IndexOf方法</h4>用于确定指定字符串在字符串中的索引<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">&quot;caty&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> a = str.IndexOf(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">int</span> b = str.IndexOf(<span class=\"string\">&quot;at&quot;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);<span class=\"comment\">//从第二个字符开始搜索,,搜索两个字符数</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"IsLeapYear方法\"><a href=\"#IsLeapYear方法\" class=\"headerlink\" title=\"IsLeapYear方法\"></a>IsLeapYear方法</h4>用于判断年份是否为闰年<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> resullt = DateTime.IsLeapYear(<span class=\"number\">2014</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"IsMatch方法\"><a href=\"#IsMatch方法\" class=\"headerlink\" title=\"IsMatch方法\"></a>IsMatch方法</h4>用于验证输入字符是否与正则表达式相匹配<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">&quot;caty&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">bool</span> result = Regex.IsMatch(str,<span class=\"string\">@&quot;^.&#123;8,&#125;$&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"IsUpper方法\"><a href=\"#IsUpper方法\" class=\"headerlink\" title=\"IsUpper方法\"></a>IsUpper方法</h4>用于判断指定字符串中指定位置的字符是否大写<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> result = <span class=\"built_in\">char</span>.IsUpper(<span class=\"string\">&quot;Caty&quot;</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Join方法\"><a href=\"#Join方法\" class=\"headerlink\" title=\"Join方法\"></a>Join方法</h4>用于在指定String数组的每个元素之间串联指定的分隔符String,从而产生单个串联的字符串<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> [] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[<span class=\"number\">5</span>] &#123; <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot; 5&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">string</span> result = String.Join(<span class=\"string\">&quot;,&quot;</span>,arr);</span><br></pre></td></tr></table></figure>\n<h4 id=\"LastIndexOf方法\"><a href=\"#LastIndexOf方法\" class=\"headerlink\" title=\"LastIndexOf方法\"></a>LastIndexOf方法</h4>用于确定指定字符在字符串中最后一次出现的索引位置<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">&quot;ChCaty&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> result = str.LastIndexOf(<span class=\"string\">&quot;C&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"CSharp-常用关键字和基础类","date":"2019-03-30T15:41:06.000Z","_content":"#### abstract关键字-抽象类\nabstract 关键字可以和类，属性，方法，索引器以及事件一起使用。在类声明中使用abstract关键字以指示某个类只能是其他类的基类\n<!--more-->\n##### 特性\n* 抽象类不能实例化\n* 抽象类可以包含抽象方法和抽象访问器\n* 抽象类不能被继承\n* 从抽象类派生的非抽象类必须包括继承的所有抽象方法和抽象访问器的实现\n\n#### base关键字-从派生类中访问基类的成员\nbase关键字用于从派生类中访问基类的成员\n##### 使用范围\n* 调用基类上已被其他方法重写的方法\n* 指定创建派生类实例时应调用的基类基类构造函数\n\n#### Console类-控制台中的输入流，输出流和错误流\nConsole类表示控制台应用程序的标准输入流。输出流和错误流，无法继承此类\n##### 属性\n| 属性 | 描述 |\n| :------: | :------: |\n| ForeGroundColor | 获取或设置控制台的前景色 |\n| BackgroundColor | 获取或设置控制台的背景色 |\n| BufferHeight | 获取或设置缓冲区高度 |\n| BufferWidth | 获取或设置缓冲区宽度 |\n| CapsLock | 获取一个值，该值指示CapsLock键盘切换键是打开的还是关闭的 |\n| NumberLock | 获取一个值，该值指示NumLock键盘切换键是打开的还是关闭的 |\n| KeyAvailable | 获取一个值，该值指示按键操作在输入流是否可用 |\n| CursorTop | 获取或设置光标在缓冲区中的行位置 |\n| CursorLeft | 获取或设置光标在缓冲区中的列位置 |\n| CursorSize | 获取或设置光标在字符单元格中的高度 |\n| CursorVisible | 获取或设置光标是否可见 |\n| In | 获取标准输入流 |\n| Out | 获取标准输出流 |\n| Error | 获取标准错误输出流 |\n| InputEncoding | 获取或设置控制台用于读取输入的编码 |\n| OutEncoding | 获取或设置控制台用于写入输出的编码 |\n| LargestWindowHeight | 根据当前字体和屏幕分辨率获取控制台窗口可能有的最大行数 |\n| LargestWindowWidth | 根据当前字体和屏幕分辨率获取控制台窗口可能有的最大列数 |\n| Title | 获取或设置要显示在控制台标题栏中的标题 |\n| TreatControlCAsInput | 获取或设置一个值，该值指示是将修改键【Control】和控制台键【C】的组合（Ctrl+C）视为普通输入，还是视为由操作系统处理的中断 |\n| WindowHeight | 获取或设置控制台窗口区域的高度 |\n| WindowWidth | 获取或设置控制台窗口区域的宽度 |\n| WindowLeft | 获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置 |\n| WindowTop | 获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置 |\n##### 方法\n| 方法 | 描述 |\n| :------: | :------: |\n| Beep | 通过控制台扬声器播放提示音 |\n| Clear | 清除控制台缓冲区和夏国英的控制台窗口的显示信息 |\n| MoveBufferArea | 将屏幕缓冲区的制定源区域复制到指定的目标区域 |\n| OpenStandarError | 获取标准错误流 |\n| OpenStandarInput | 获取标准输入流 |\n| OpenStandarOutput | 获取标注输出流 |\n| Read | 从标准输入流读取下一个字符 |\n| ReadKey | 获取用户按下的下一个字符或功能键 |\n| ReadLine | 从标准输入流读取下一行字符 |\n| ReadColor | 将控制台的前景色和背景色设置为默认值 |\n| SetBufferSize | 将屏幕缓冲区的高度和宽度设置为指定值 |\n| SetCursorPosition | 设置光标位置 |\n| SetError | 将Error属性设置为指定TextWriter对象 |\n| SetIn | 将In属性设置为指定TextWriter对象 |\n| SetOut | 将Out属性设置为指定TextWriter对象 |\n| SetWindowPosition | 设置控制台窗口相对于屏幕缓冲区的位置 |\n| SetWindowSize | 将控制台窗口的高度和宽度设置为指定值 |\n| Write | 将指定值的文本表示形式写入标准输出流 |\n| WriteLine | 将指定的数据（后跟当前行终止符）表示形式写入标准输出流 |\n\n#### Convert类-类型转换\nConvert类用于将一个基本数据类型转换为另一个基本数据类型\n##### 方法\n| 方法 | 描述 |\n| :------: | :------: |\n| FromBase64CharArray | 将Unicode字符数组的子集转换成等效成等效的8位无符号整数数组，参数指定输入数组的子集及要转换的元素数 |\n| FromBase64String | 将指定的String转换成等效成等效的8位无符号整数数组 |\n| GetHashCode | 用作特定类型的哈希函数 |\n| ToBase64CharArray | 将8位无符号整数数组的子集转换为用Base64数字编码的Unicode字符数组的等价子集 |\n| ToBase64String | 将8位无符号整数数组的值转换为与其等效的String表示形式 |\n| ToBoolean | 将指定的值转换为等效的布尔值 |\n| ToByte | 将指定的值转换为8位无符号整数 |\n| ToChar | 将指定的值转换为Unicode字符 |\n| ToDateTime | 将指定的值转换为DateTime |\n| ToDecimal | 将指定的值转换为Decimal数字 |\n| ToDouble | 将指定的值转换为双精度浮点数 |\n| ToInt16 | 将指定的值转换为16位有符号整数 |\n| ToInt32 | 将指定的值转换为32位有符号整数 |\n| ToInt64 | 将指定的值转换为64位有符号整数 |\n| ToSByte | 将指定的值转换为8位有符号整数 |\n| ToSingle | 将指定的值转换为单精度浮点数 |\n| ToString | 将指定的值转换为与其等效的String表示形式 |\n| ToUInt16 | 将指定的值转换为16位有符号整数 |\n| ToUInt32 | 将指定的值转换为32位有符号整数 |\n| ToUInt64 | 将指定的值转换为64位有符号整数 |\n\n#### Dispose方法-释放资源\nDispose方法用于执行与释放或重置非托管资源相关的应用程序定义的任务\n\n\n","source":"_posts/CSharp-常用关键字和基础类.md","raw":"---\ntitle: 'CSharp-常用关键字和基础类'\ndate: 2019-03-30 23:41:06\ncategories: C#\ntags:\n - C#\n - 基础\n---\n#### abstract关键字-抽象类\nabstract 关键字可以和类，属性，方法，索引器以及事件一起使用。在类声明中使用abstract关键字以指示某个类只能是其他类的基类\n<!--more-->\n##### 特性\n* 抽象类不能实例化\n* 抽象类可以包含抽象方法和抽象访问器\n* 抽象类不能被继承\n* 从抽象类派生的非抽象类必须包括继承的所有抽象方法和抽象访问器的实现\n\n#### base关键字-从派生类中访问基类的成员\nbase关键字用于从派生类中访问基类的成员\n##### 使用范围\n* 调用基类上已被其他方法重写的方法\n* 指定创建派生类实例时应调用的基类基类构造函数\n\n#### Console类-控制台中的输入流，输出流和错误流\nConsole类表示控制台应用程序的标准输入流。输出流和错误流，无法继承此类\n##### 属性\n| 属性 | 描述 |\n| :------: | :------: |\n| ForeGroundColor | 获取或设置控制台的前景色 |\n| BackgroundColor | 获取或设置控制台的背景色 |\n| BufferHeight | 获取或设置缓冲区高度 |\n| BufferWidth | 获取或设置缓冲区宽度 |\n| CapsLock | 获取一个值，该值指示CapsLock键盘切换键是打开的还是关闭的 |\n| NumberLock | 获取一个值，该值指示NumLock键盘切换键是打开的还是关闭的 |\n| KeyAvailable | 获取一个值，该值指示按键操作在输入流是否可用 |\n| CursorTop | 获取或设置光标在缓冲区中的行位置 |\n| CursorLeft | 获取或设置光标在缓冲区中的列位置 |\n| CursorSize | 获取或设置光标在字符单元格中的高度 |\n| CursorVisible | 获取或设置光标是否可见 |\n| In | 获取标准输入流 |\n| Out | 获取标准输出流 |\n| Error | 获取标准错误输出流 |\n| InputEncoding | 获取或设置控制台用于读取输入的编码 |\n| OutEncoding | 获取或设置控制台用于写入输出的编码 |\n| LargestWindowHeight | 根据当前字体和屏幕分辨率获取控制台窗口可能有的最大行数 |\n| LargestWindowWidth | 根据当前字体和屏幕分辨率获取控制台窗口可能有的最大列数 |\n| Title | 获取或设置要显示在控制台标题栏中的标题 |\n| TreatControlCAsInput | 获取或设置一个值，该值指示是将修改键【Control】和控制台键【C】的组合（Ctrl+C）视为普通输入，还是视为由操作系统处理的中断 |\n| WindowHeight | 获取或设置控制台窗口区域的高度 |\n| WindowWidth | 获取或设置控制台窗口区域的宽度 |\n| WindowLeft | 获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置 |\n| WindowTop | 获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置 |\n##### 方法\n| 方法 | 描述 |\n| :------: | :------: |\n| Beep | 通过控制台扬声器播放提示音 |\n| Clear | 清除控制台缓冲区和夏国英的控制台窗口的显示信息 |\n| MoveBufferArea | 将屏幕缓冲区的制定源区域复制到指定的目标区域 |\n| OpenStandarError | 获取标准错误流 |\n| OpenStandarInput | 获取标准输入流 |\n| OpenStandarOutput | 获取标注输出流 |\n| Read | 从标准输入流读取下一个字符 |\n| ReadKey | 获取用户按下的下一个字符或功能键 |\n| ReadLine | 从标准输入流读取下一行字符 |\n| ReadColor | 将控制台的前景色和背景色设置为默认值 |\n| SetBufferSize | 将屏幕缓冲区的高度和宽度设置为指定值 |\n| SetCursorPosition | 设置光标位置 |\n| SetError | 将Error属性设置为指定TextWriter对象 |\n| SetIn | 将In属性设置为指定TextWriter对象 |\n| SetOut | 将Out属性设置为指定TextWriter对象 |\n| SetWindowPosition | 设置控制台窗口相对于屏幕缓冲区的位置 |\n| SetWindowSize | 将控制台窗口的高度和宽度设置为指定值 |\n| Write | 将指定值的文本表示形式写入标准输出流 |\n| WriteLine | 将指定的数据（后跟当前行终止符）表示形式写入标准输出流 |\n\n#### Convert类-类型转换\nConvert类用于将一个基本数据类型转换为另一个基本数据类型\n##### 方法\n| 方法 | 描述 |\n| :------: | :------: |\n| FromBase64CharArray | 将Unicode字符数组的子集转换成等效成等效的8位无符号整数数组，参数指定输入数组的子集及要转换的元素数 |\n| FromBase64String | 将指定的String转换成等效成等效的8位无符号整数数组 |\n| GetHashCode | 用作特定类型的哈希函数 |\n| ToBase64CharArray | 将8位无符号整数数组的子集转换为用Base64数字编码的Unicode字符数组的等价子集 |\n| ToBase64String | 将8位无符号整数数组的值转换为与其等效的String表示形式 |\n| ToBoolean | 将指定的值转换为等效的布尔值 |\n| ToByte | 将指定的值转换为8位无符号整数 |\n| ToChar | 将指定的值转换为Unicode字符 |\n| ToDateTime | 将指定的值转换为DateTime |\n| ToDecimal | 将指定的值转换为Decimal数字 |\n| ToDouble | 将指定的值转换为双精度浮点数 |\n| ToInt16 | 将指定的值转换为16位有符号整数 |\n| ToInt32 | 将指定的值转换为32位有符号整数 |\n| ToInt64 | 将指定的值转换为64位有符号整数 |\n| ToSByte | 将指定的值转换为8位有符号整数 |\n| ToSingle | 将指定的值转换为单精度浮点数 |\n| ToString | 将指定的值转换为与其等效的String表示形式 |\n| ToUInt16 | 将指定的值转换为16位有符号整数 |\n| ToUInt32 | 将指定的值转换为32位有符号整数 |\n| ToUInt64 | 将指定的值转换为64位有符号整数 |\n\n#### Dispose方法-释放资源\nDispose方法用于执行与释放或重置非托管资源相关的应用程序定义的任务\n\n\n","slug":"CSharp-常用关键字和基础类","published":1,"updated":"2021-03-30T03:24:16.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzw0023vcuacd3s60j9","content":"<h4 id=\"abstract关键字-抽象类\"><a href=\"#abstract关键字-抽象类\" class=\"headerlink\" title=\"abstract关键字-抽象类\"></a>abstract关键字-抽象类</h4><p>abstract 关键字可以和类，属性，方法，索引器以及事件一起使用。在类声明中使用abstract关键字以指示某个类只能是其他类的基类</p>\n<span id=\"more\"></span>\n<h5 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h5><ul>\n<li>抽象类不能实例化</li>\n<li>抽象类可以包含抽象方法和抽象访问器</li>\n<li>抽象类不能被继承</li>\n<li>从抽象类派生的非抽象类必须包括继承的所有抽象方法和抽象访问器的实现</li>\n</ul>\n<h4 id=\"base关键字-从派生类中访问基类的成员\"><a href=\"#base关键字-从派生类中访问基类的成员\" class=\"headerlink\" title=\"base关键字-从派生类中访问基类的成员\"></a>base关键字-从派生类中访问基类的成员</h4><p>base关键字用于从派生类中访问基类的成员</p>\n<h5 id=\"使用范围\"><a href=\"#使用范围\" class=\"headerlink\" title=\"使用范围\"></a>使用范围</h5><ul>\n<li>调用基类上已被其他方法重写的方法</li>\n<li>指定创建派生类实例时应调用的基类基类构造函数</li>\n</ul>\n<h4 id=\"Console类-控制台中的输入流，输出流和错误流\"><a href=\"#Console类-控制台中的输入流，输出流和错误流\" class=\"headerlink\" title=\"Console类-控制台中的输入流，输出流和错误流\"></a>Console类-控制台中的输入流，输出流和错误流</h4><p>Console类表示控制台应用程序的标准输入流。输出流和错误流，无法继承此类</p>\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><table>\n<thead>\n<tr>\n<th align=\"center\">属性</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ForeGroundColor</td>\n<td align=\"center\">获取或设置控制台的前景色</td>\n</tr>\n<tr>\n<td align=\"center\">BackgroundColor</td>\n<td align=\"center\">获取或设置控制台的背景色</td>\n</tr>\n<tr>\n<td align=\"center\">BufferHeight</td>\n<td align=\"center\">获取或设置缓冲区高度</td>\n</tr>\n<tr>\n<td align=\"center\">BufferWidth</td>\n<td align=\"center\">获取或设置缓冲区宽度</td>\n</tr>\n<tr>\n<td align=\"center\">CapsLock</td>\n<td align=\"center\">获取一个值，该值指示CapsLock键盘切换键是打开的还是关闭的</td>\n</tr>\n<tr>\n<td align=\"center\">NumberLock</td>\n<td align=\"center\">获取一个值，该值指示NumLock键盘切换键是打开的还是关闭的</td>\n</tr>\n<tr>\n<td align=\"center\">KeyAvailable</td>\n<td align=\"center\">获取一个值，该值指示按键操作在输入流是否可用</td>\n</tr>\n<tr>\n<td align=\"center\">CursorTop</td>\n<td align=\"center\">获取或设置光标在缓冲区中的行位置</td>\n</tr>\n<tr>\n<td align=\"center\">CursorLeft</td>\n<td align=\"center\">获取或设置光标在缓冲区中的列位置</td>\n</tr>\n<tr>\n<td align=\"center\">CursorSize</td>\n<td align=\"center\">获取或设置光标在字符单元格中的高度</td>\n</tr>\n<tr>\n<td align=\"center\">CursorVisible</td>\n<td align=\"center\">获取或设置光标是否可见</td>\n</tr>\n<tr>\n<td align=\"center\">In</td>\n<td align=\"center\">获取标准输入流</td>\n</tr>\n<tr>\n<td align=\"center\">Out</td>\n<td align=\"center\">获取标准输出流</td>\n</tr>\n<tr>\n<td align=\"center\">Error</td>\n<td align=\"center\">获取标准错误输出流</td>\n</tr>\n<tr>\n<td align=\"center\">InputEncoding</td>\n<td align=\"center\">获取或设置控制台用于读取输入的编码</td>\n</tr>\n<tr>\n<td align=\"center\">OutEncoding</td>\n<td align=\"center\">获取或设置控制台用于写入输出的编码</td>\n</tr>\n<tr>\n<td align=\"center\">LargestWindowHeight</td>\n<td align=\"center\">根据当前字体和屏幕分辨率获取控制台窗口可能有的最大行数</td>\n</tr>\n<tr>\n<td align=\"center\">LargestWindowWidth</td>\n<td align=\"center\">根据当前字体和屏幕分辨率获取控制台窗口可能有的最大列数</td>\n</tr>\n<tr>\n<td align=\"center\">Title</td>\n<td align=\"center\">获取或设置要显示在控制台标题栏中的标题</td>\n</tr>\n<tr>\n<td align=\"center\">TreatControlCAsInput</td>\n<td align=\"center\">获取或设置一个值，该值指示是将修改键【Control】和控制台键【C】的组合（Ctrl+C）视为普通输入，还是视为由操作系统处理的中断</td>\n</tr>\n<tr>\n<td align=\"center\">WindowHeight</td>\n<td align=\"center\">获取或设置控制台窗口区域的高度</td>\n</tr>\n<tr>\n<td align=\"center\">WindowWidth</td>\n<td align=\"center\">获取或设置控制台窗口区域的宽度</td>\n</tr>\n<tr>\n<td align=\"center\">WindowLeft</td>\n<td align=\"center\">获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置</td>\n</tr>\n<tr>\n<td align=\"center\">WindowTop</td>\n<td align=\"center\">获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置</td>\n</tr>\n</tbody></table>\n<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Beep</td>\n<td align=\"center\">通过控制台扬声器播放提示音</td>\n</tr>\n<tr>\n<td align=\"center\">Clear</td>\n<td align=\"center\">清除控制台缓冲区和夏国英的控制台窗口的显示信息</td>\n</tr>\n<tr>\n<td align=\"center\">MoveBufferArea</td>\n<td align=\"center\">将屏幕缓冲区的制定源区域复制到指定的目标区域</td>\n</tr>\n<tr>\n<td align=\"center\">OpenStandarError</td>\n<td align=\"center\">获取标准错误流</td>\n</tr>\n<tr>\n<td align=\"center\">OpenStandarInput</td>\n<td align=\"center\">获取标准输入流</td>\n</tr>\n<tr>\n<td align=\"center\">OpenStandarOutput</td>\n<td align=\"center\">获取标注输出流</td>\n</tr>\n<tr>\n<td align=\"center\">Read</td>\n<td align=\"center\">从标准输入流读取下一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">ReadKey</td>\n<td align=\"center\">获取用户按下的下一个字符或功能键</td>\n</tr>\n<tr>\n<td align=\"center\">ReadLine</td>\n<td align=\"center\">从标准输入流读取下一行字符</td>\n</tr>\n<tr>\n<td align=\"center\">ReadColor</td>\n<td align=\"center\">将控制台的前景色和背景色设置为默认值</td>\n</tr>\n<tr>\n<td align=\"center\">SetBufferSize</td>\n<td align=\"center\">将屏幕缓冲区的高度和宽度设置为指定值</td>\n</tr>\n<tr>\n<td align=\"center\">SetCursorPosition</td>\n<td align=\"center\">设置光标位置</td>\n</tr>\n<tr>\n<td align=\"center\">SetError</td>\n<td align=\"center\">将Error属性设置为指定TextWriter对象</td>\n</tr>\n<tr>\n<td align=\"center\">SetIn</td>\n<td align=\"center\">将In属性设置为指定TextWriter对象</td>\n</tr>\n<tr>\n<td align=\"center\">SetOut</td>\n<td align=\"center\">将Out属性设置为指定TextWriter对象</td>\n</tr>\n<tr>\n<td align=\"center\">SetWindowPosition</td>\n<td align=\"center\">设置控制台窗口相对于屏幕缓冲区的位置</td>\n</tr>\n<tr>\n<td align=\"center\">SetWindowSize</td>\n<td align=\"center\">将控制台窗口的高度和宽度设置为指定值</td>\n</tr>\n<tr>\n<td align=\"center\">Write</td>\n<td align=\"center\">将指定值的文本表示形式写入标准输出流</td>\n</tr>\n<tr>\n<td align=\"center\">WriteLine</td>\n<td align=\"center\">将指定的数据（后跟当前行终止符）表示形式写入标准输出流</td>\n</tr>\n</tbody></table>\n<h4 id=\"Convert类-类型转换\"><a href=\"#Convert类-类型转换\" class=\"headerlink\" title=\"Convert类-类型转换\"></a>Convert类-类型转换</h4><p>Convert类用于将一个基本数据类型转换为另一个基本数据类型</p>\n<h5 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h5><table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">FromBase64CharArray</td>\n<td align=\"center\">将Unicode字符数组的子集转换成等效成等效的8位无符号整数数组，参数指定输入数组的子集及要转换的元素数</td>\n</tr>\n<tr>\n<td align=\"center\">FromBase64String</td>\n<td align=\"center\">将指定的String转换成等效成等效的8位无符号整数数组</td>\n</tr>\n<tr>\n<td align=\"center\">GetHashCode</td>\n<td align=\"center\">用作特定类型的哈希函数</td>\n</tr>\n<tr>\n<td align=\"center\">ToBase64CharArray</td>\n<td align=\"center\">将8位无符号整数数组的子集转换为用Base64数字编码的Unicode字符数组的等价子集</td>\n</tr>\n<tr>\n<td align=\"center\">ToBase64String</td>\n<td align=\"center\">将8位无符号整数数组的值转换为与其等效的String表示形式</td>\n</tr>\n<tr>\n<td align=\"center\">ToBoolean</td>\n<td align=\"center\">将指定的值转换为等效的布尔值</td>\n</tr>\n<tr>\n<td align=\"center\">ToByte</td>\n<td align=\"center\">将指定的值转换为8位无符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToChar</td>\n<td align=\"center\">将指定的值转换为Unicode字符</td>\n</tr>\n<tr>\n<td align=\"center\">ToDateTime</td>\n<td align=\"center\">将指定的值转换为DateTime</td>\n</tr>\n<tr>\n<td align=\"center\">ToDecimal</td>\n<td align=\"center\">将指定的值转换为Decimal数字</td>\n</tr>\n<tr>\n<td align=\"center\">ToDouble</td>\n<td align=\"center\">将指定的值转换为双精度浮点数</td>\n</tr>\n<tr>\n<td align=\"center\">ToInt16</td>\n<td align=\"center\">将指定的值转换为16位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToInt32</td>\n<td align=\"center\">将指定的值转换为32位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToInt64</td>\n<td align=\"center\">将指定的值转换为64位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToSByte</td>\n<td align=\"center\">将指定的值转换为8位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToSingle</td>\n<td align=\"center\">将指定的值转换为单精度浮点数</td>\n</tr>\n<tr>\n<td align=\"center\">ToString</td>\n<td align=\"center\">将指定的值转换为与其等效的String表示形式</td>\n</tr>\n<tr>\n<td align=\"center\">ToUInt16</td>\n<td align=\"center\">将指定的值转换为16位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToUInt32</td>\n<td align=\"center\">将指定的值转换为32位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToUInt64</td>\n<td align=\"center\">将指定的值转换为64位有符号整数</td>\n</tr>\n</tbody></table>\n<h4 id=\"Dispose方法-释放资源\"><a href=\"#Dispose方法-释放资源\" class=\"headerlink\" title=\"Dispose方法-释放资源\"></a>Dispose方法-释放资源</h4><p>Dispose方法用于执行与释放或重置非托管资源相关的应用程序定义的任务</p>\n","site":{"data":{}},"length":2248,"excerpt":"<h4 id=\"abstract关键字-抽象类\"><a href=\"#abstract关键字-抽象类\" class=\"headerlink\" title=\"abstract关键字-抽象类\"></a>abstract关键字-抽象类</h4><p>abstract 关键字可以和类，属性，方法，索引器以及事件一起使用。在类声明中使用abstract关键字以指示某个类只能是其他类的基类</p>","more":"<h5 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h5><ul>\n<li>抽象类不能实例化</li>\n<li>抽象类可以包含抽象方法和抽象访问器</li>\n<li>抽象类不能被继承</li>\n<li>从抽象类派生的非抽象类必须包括继承的所有抽象方法和抽象访问器的实现</li>\n</ul>\n<h4 id=\"base关键字-从派生类中访问基类的成员\"><a href=\"#base关键字-从派生类中访问基类的成员\" class=\"headerlink\" title=\"base关键字-从派生类中访问基类的成员\"></a>base关键字-从派生类中访问基类的成员</h4><p>base关键字用于从派生类中访问基类的成员</p>\n<h5 id=\"使用范围\"><a href=\"#使用范围\" class=\"headerlink\" title=\"使用范围\"></a>使用范围</h5><ul>\n<li>调用基类上已被其他方法重写的方法</li>\n<li>指定创建派生类实例时应调用的基类基类构造函数</li>\n</ul>\n<h4 id=\"Console类-控制台中的输入流，输出流和错误流\"><a href=\"#Console类-控制台中的输入流，输出流和错误流\" class=\"headerlink\" title=\"Console类-控制台中的输入流，输出流和错误流\"></a>Console类-控制台中的输入流，输出流和错误流</h4><p>Console类表示控制台应用程序的标准输入流。输出流和错误流，无法继承此类</p>\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><table>\n<thead>\n<tr>\n<th align=\"center\">属性</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ForeGroundColor</td>\n<td align=\"center\">获取或设置控制台的前景色</td>\n</tr>\n<tr>\n<td align=\"center\">BackgroundColor</td>\n<td align=\"center\">获取或设置控制台的背景色</td>\n</tr>\n<tr>\n<td align=\"center\">BufferHeight</td>\n<td align=\"center\">获取或设置缓冲区高度</td>\n</tr>\n<tr>\n<td align=\"center\">BufferWidth</td>\n<td align=\"center\">获取或设置缓冲区宽度</td>\n</tr>\n<tr>\n<td align=\"center\">CapsLock</td>\n<td align=\"center\">获取一个值，该值指示CapsLock键盘切换键是打开的还是关闭的</td>\n</tr>\n<tr>\n<td align=\"center\">NumberLock</td>\n<td align=\"center\">获取一个值，该值指示NumLock键盘切换键是打开的还是关闭的</td>\n</tr>\n<tr>\n<td align=\"center\">KeyAvailable</td>\n<td align=\"center\">获取一个值，该值指示按键操作在输入流是否可用</td>\n</tr>\n<tr>\n<td align=\"center\">CursorTop</td>\n<td align=\"center\">获取或设置光标在缓冲区中的行位置</td>\n</tr>\n<tr>\n<td align=\"center\">CursorLeft</td>\n<td align=\"center\">获取或设置光标在缓冲区中的列位置</td>\n</tr>\n<tr>\n<td align=\"center\">CursorSize</td>\n<td align=\"center\">获取或设置光标在字符单元格中的高度</td>\n</tr>\n<tr>\n<td align=\"center\">CursorVisible</td>\n<td align=\"center\">获取或设置光标是否可见</td>\n</tr>\n<tr>\n<td align=\"center\">In</td>\n<td align=\"center\">获取标准输入流</td>\n</tr>\n<tr>\n<td align=\"center\">Out</td>\n<td align=\"center\">获取标准输出流</td>\n</tr>\n<tr>\n<td align=\"center\">Error</td>\n<td align=\"center\">获取标准错误输出流</td>\n</tr>\n<tr>\n<td align=\"center\">InputEncoding</td>\n<td align=\"center\">获取或设置控制台用于读取输入的编码</td>\n</tr>\n<tr>\n<td align=\"center\">OutEncoding</td>\n<td align=\"center\">获取或设置控制台用于写入输出的编码</td>\n</tr>\n<tr>\n<td align=\"center\">LargestWindowHeight</td>\n<td align=\"center\">根据当前字体和屏幕分辨率获取控制台窗口可能有的最大行数</td>\n</tr>\n<tr>\n<td align=\"center\">LargestWindowWidth</td>\n<td align=\"center\">根据当前字体和屏幕分辨率获取控制台窗口可能有的最大列数</td>\n</tr>\n<tr>\n<td align=\"center\">Title</td>\n<td align=\"center\">获取或设置要显示在控制台标题栏中的标题</td>\n</tr>\n<tr>\n<td align=\"center\">TreatControlCAsInput</td>\n<td align=\"center\">获取或设置一个值，该值指示是将修改键【Control】和控制台键【C】的组合（Ctrl+C）视为普通输入，还是视为由操作系统处理的中断</td>\n</tr>\n<tr>\n<td align=\"center\">WindowHeight</td>\n<td align=\"center\">获取或设置控制台窗口区域的高度</td>\n</tr>\n<tr>\n<td align=\"center\">WindowWidth</td>\n<td align=\"center\">获取或设置控制台窗口区域的宽度</td>\n</tr>\n<tr>\n<td align=\"center\">WindowLeft</td>\n<td align=\"center\">获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置</td>\n</tr>\n<tr>\n<td align=\"center\">WindowTop</td>\n<td align=\"center\">获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置</td>\n</tr>\n</tbody></table>\n<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Beep</td>\n<td align=\"center\">通过控制台扬声器播放提示音</td>\n</tr>\n<tr>\n<td align=\"center\">Clear</td>\n<td align=\"center\">清除控制台缓冲区和夏国英的控制台窗口的显示信息</td>\n</tr>\n<tr>\n<td align=\"center\">MoveBufferArea</td>\n<td align=\"center\">将屏幕缓冲区的制定源区域复制到指定的目标区域</td>\n</tr>\n<tr>\n<td align=\"center\">OpenStandarError</td>\n<td align=\"center\">获取标准错误流</td>\n</tr>\n<tr>\n<td align=\"center\">OpenStandarInput</td>\n<td align=\"center\">获取标准输入流</td>\n</tr>\n<tr>\n<td align=\"center\">OpenStandarOutput</td>\n<td align=\"center\">获取标注输出流</td>\n</tr>\n<tr>\n<td align=\"center\">Read</td>\n<td align=\"center\">从标准输入流读取下一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">ReadKey</td>\n<td align=\"center\">获取用户按下的下一个字符或功能键</td>\n</tr>\n<tr>\n<td align=\"center\">ReadLine</td>\n<td align=\"center\">从标准输入流读取下一行字符</td>\n</tr>\n<tr>\n<td align=\"center\">ReadColor</td>\n<td align=\"center\">将控制台的前景色和背景色设置为默认值</td>\n</tr>\n<tr>\n<td align=\"center\">SetBufferSize</td>\n<td align=\"center\">将屏幕缓冲区的高度和宽度设置为指定值</td>\n</tr>\n<tr>\n<td align=\"center\">SetCursorPosition</td>\n<td align=\"center\">设置光标位置</td>\n</tr>\n<tr>\n<td align=\"center\">SetError</td>\n<td align=\"center\">将Error属性设置为指定TextWriter对象</td>\n</tr>\n<tr>\n<td align=\"center\">SetIn</td>\n<td align=\"center\">将In属性设置为指定TextWriter对象</td>\n</tr>\n<tr>\n<td align=\"center\">SetOut</td>\n<td align=\"center\">将Out属性设置为指定TextWriter对象</td>\n</tr>\n<tr>\n<td align=\"center\">SetWindowPosition</td>\n<td align=\"center\">设置控制台窗口相对于屏幕缓冲区的位置</td>\n</tr>\n<tr>\n<td align=\"center\">SetWindowSize</td>\n<td align=\"center\">将控制台窗口的高度和宽度设置为指定值</td>\n</tr>\n<tr>\n<td align=\"center\">Write</td>\n<td align=\"center\">将指定值的文本表示形式写入标准输出流</td>\n</tr>\n<tr>\n<td align=\"center\">WriteLine</td>\n<td align=\"center\">将指定的数据（后跟当前行终止符）表示形式写入标准输出流</td>\n</tr>\n</tbody></table>\n<h4 id=\"Convert类-类型转换\"><a href=\"#Convert类-类型转换\" class=\"headerlink\" title=\"Convert类-类型转换\"></a>Convert类-类型转换</h4><p>Convert类用于将一个基本数据类型转换为另一个基本数据类型</p>\n<h5 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h5><table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">FromBase64CharArray</td>\n<td align=\"center\">将Unicode字符数组的子集转换成等效成等效的8位无符号整数数组，参数指定输入数组的子集及要转换的元素数</td>\n</tr>\n<tr>\n<td align=\"center\">FromBase64String</td>\n<td align=\"center\">将指定的String转换成等效成等效的8位无符号整数数组</td>\n</tr>\n<tr>\n<td align=\"center\">GetHashCode</td>\n<td align=\"center\">用作特定类型的哈希函数</td>\n</tr>\n<tr>\n<td align=\"center\">ToBase64CharArray</td>\n<td align=\"center\">将8位无符号整数数组的子集转换为用Base64数字编码的Unicode字符数组的等价子集</td>\n</tr>\n<tr>\n<td align=\"center\">ToBase64String</td>\n<td align=\"center\">将8位无符号整数数组的值转换为与其等效的String表示形式</td>\n</tr>\n<tr>\n<td align=\"center\">ToBoolean</td>\n<td align=\"center\">将指定的值转换为等效的布尔值</td>\n</tr>\n<tr>\n<td align=\"center\">ToByte</td>\n<td align=\"center\">将指定的值转换为8位无符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToChar</td>\n<td align=\"center\">将指定的值转换为Unicode字符</td>\n</tr>\n<tr>\n<td align=\"center\">ToDateTime</td>\n<td align=\"center\">将指定的值转换为DateTime</td>\n</tr>\n<tr>\n<td align=\"center\">ToDecimal</td>\n<td align=\"center\">将指定的值转换为Decimal数字</td>\n</tr>\n<tr>\n<td align=\"center\">ToDouble</td>\n<td align=\"center\">将指定的值转换为双精度浮点数</td>\n</tr>\n<tr>\n<td align=\"center\">ToInt16</td>\n<td align=\"center\">将指定的值转换为16位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToInt32</td>\n<td align=\"center\">将指定的值转换为32位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToInt64</td>\n<td align=\"center\">将指定的值转换为64位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToSByte</td>\n<td align=\"center\">将指定的值转换为8位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToSingle</td>\n<td align=\"center\">将指定的值转换为单精度浮点数</td>\n</tr>\n<tr>\n<td align=\"center\">ToString</td>\n<td align=\"center\">将指定的值转换为与其等效的String表示形式</td>\n</tr>\n<tr>\n<td align=\"center\">ToUInt16</td>\n<td align=\"center\">将指定的值转换为16位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToUInt32</td>\n<td align=\"center\">将指定的值转换为32位有符号整数</td>\n</tr>\n<tr>\n<td align=\"center\">ToUInt64</td>\n<td align=\"center\">将指定的值转换为64位有符号整数</td>\n</tr>\n</tbody></table>\n<h4 id=\"Dispose方法-释放资源\"><a href=\"#Dispose方法-释放资源\" class=\"headerlink\" title=\"Dispose方法-释放资源\"></a>Dispose方法-释放资源</h4><p>Dispose方法用于执行与释放或重置非托管资源相关的应用程序定义的任务</p>"},{"title":"CSharp-复制对象的方式","date":"2018-06-09T14:38:24.000Z","_content":"在代码中经常会遇到需要把对象复制一遍，或者把属性名相同的值复制一遍。\n<!--more-->\n##### 解决方法\n以People为例\n```cs\npublic class People\n{\n    public string IdCard { get; set; }\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n```\n1. 手动赋值\n```cs\nPeople p = new People() {IdCrad = \"445221XXXXXXXX\", Name=\"caty\", Age=21 };\nPeople h = new People() {IdCrad = p.IdCard, Name = p.Name, Age = p.Age };\n```\n2. 反射\n```cs\nprivate static TOut TransReflection<TIn, TOut>(TIn tIn)\n{\n    TOut tOut = Activator.CreateInstance<TOut>();\n    var tInType = tIn.GetType();\n    foreach (var itemOut in tOut.GetType().GetProperties())\n    {\n        var itemIn = tInType.GetProperty(itemOut.Name); ;\n        if (itemIn != null)\n        {\n            itemOut.SetValue(tOut, itemIn.GetValue(tIn));\n        }\n    }\n    return tOut;\n}\n\nPeople pp = TransReflection<People, People>(p);\n```\n3. 序列化\n需引入Newtonsoft.Json 包\n```cs\nPeople ss= JsonConvert.DeserializeObject<People>(JsonConvert.SerializeObject(s));\n```\n4. 表达式树\n```cs\npublic static class TransExpression<TIn, TOut>\n{\n    private static readonly Func<TIn, TOut> cache = GetFunc();\n    private static Func<TIn, TOut> GetFunc()\n    {\n        ParameterExpression parameterExpression = Expression.Parameter(typeof(TIn), \"p\");\n        List<MemberBinding> memberBindingList = new List<MemberBinding>();\n        foreach (var item in typeof(TOut).GetProperties())\n        {\n　　　　　　　if (!item.CanWrite)\n　　　　　　　　    continue;\n            MemberExpression property = Expression.Property(parameterExpression, typeof(TIn).GetProperty(item.Name));\n            MemberBinding memberBinding = Expression.Bind(item, property);\n            memberBindingList.Add(memberBinding);\n        }\n\n        MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(typeof(TOut)), memberBindingList.ToArray());\n        Expression<Func<TIn, TOut>> lambda = Expression.Lambda<Func<TIn, TOut>>(memberInitExpression, new ParameterExpression[] { parameterExpression });\n        return lambda.Compile();\n    }\n\n    public static TOut Trans(TIn tIn)\n    {\n        return cache(tIn);\n    }\n}\n\nPeople pp = TransExpression<People,People>,Trans(p);\n```\n","source":"_posts/CSharp-通过表达式树复制对象.md","raw":"---\ntitle: CSharp-复制对象的方式\ndate: 2018-06-09 22:38:24\ncategories: C# \ntags: \n - 复制对象\n - C#\n---\n在代码中经常会遇到需要把对象复制一遍，或者把属性名相同的值复制一遍。\n<!--more-->\n##### 解决方法\n以People为例\n```cs\npublic class People\n{\n    public string IdCard { get; set; }\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n```\n1. 手动赋值\n```cs\nPeople p = new People() {IdCrad = \"445221XXXXXXXX\", Name=\"caty\", Age=21 };\nPeople h = new People() {IdCrad = p.IdCard, Name = p.Name, Age = p.Age };\n```\n2. 反射\n```cs\nprivate static TOut TransReflection<TIn, TOut>(TIn tIn)\n{\n    TOut tOut = Activator.CreateInstance<TOut>();\n    var tInType = tIn.GetType();\n    foreach (var itemOut in tOut.GetType().GetProperties())\n    {\n        var itemIn = tInType.GetProperty(itemOut.Name); ;\n        if (itemIn != null)\n        {\n            itemOut.SetValue(tOut, itemIn.GetValue(tIn));\n        }\n    }\n    return tOut;\n}\n\nPeople pp = TransReflection<People, People>(p);\n```\n3. 序列化\n需引入Newtonsoft.Json 包\n```cs\nPeople ss= JsonConvert.DeserializeObject<People>(JsonConvert.SerializeObject(s));\n```\n4. 表达式树\n```cs\npublic static class TransExpression<TIn, TOut>\n{\n    private static readonly Func<TIn, TOut> cache = GetFunc();\n    private static Func<TIn, TOut> GetFunc()\n    {\n        ParameterExpression parameterExpression = Expression.Parameter(typeof(TIn), \"p\");\n        List<MemberBinding> memberBindingList = new List<MemberBinding>();\n        foreach (var item in typeof(TOut).GetProperties())\n        {\n　　　　　　　if (!item.CanWrite)\n　　　　　　　　    continue;\n            MemberExpression property = Expression.Property(parameterExpression, typeof(TIn).GetProperty(item.Name));\n            MemberBinding memberBinding = Expression.Bind(item, property);\n            memberBindingList.Add(memberBinding);\n        }\n\n        MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(typeof(TOut)), memberBindingList.ToArray());\n        Expression<Func<TIn, TOut>> lambda = Expression.Lambda<Func<TIn, TOut>>(memberInitExpression, new ParameterExpression[] { parameterExpression });\n        return lambda.Compile();\n    }\n\n    public static TOut Trans(TIn tIn)\n    {\n        return cache(tIn);\n    }\n}\n\nPeople pp = TransExpression<People,People>,Trans(p);\n```\n","slug":"CSharp-通过表达式树复制对象","published":1,"updated":"2021-03-30T03:24:16.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzx0026vcuahd5bd3pd","content":"<p>在代码中经常会遇到需要把对象复制一遍，或者把属性名相同的值复制一遍。</p>\n<span id=\"more\"></span>\n<h5 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h5><p>以People为例</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">People</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> IdCard &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Age &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>手动赋值<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">People p = <span class=\"keyword\">new</span> People() &#123;IdCrad = <span class=\"string\">&quot;445221XXXXXXXX&quot;</span>, Name=<span class=\"string\">&quot;caty&quot;</span>, Age=<span class=\"number\">21</span> &#125;;</span><br><span class=\"line\">People h = <span class=\"keyword\">new</span> People() &#123;IdCrad = p.IdCard, Name = p.Name, Age = p.Age &#125;;</span><br></pre></td></tr></table></figure></li>\n<li>反射<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TOut <span class=\"title\">TransReflection</span>&lt;<span class=\"title\">TIn</span>, <span class=\"title\">TOut</span>&gt;(<span class=\"params\">TIn tIn</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TOut tOut = Activator.CreateInstance&lt;TOut&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tInType = tIn.GetType();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> itemOut <span class=\"keyword\">in</span> tOut.GetType().GetProperties())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemIn = tInType.GetProperty(itemOut.Name); ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (itemIn != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            itemOut.SetValue(tOut, itemIn.GetValue(tIn));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tOut;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">People pp = TransReflection&lt;People, People&gt;(p);</span><br></pre></td></tr></table></figure></li>\n<li>序列化<br>需引入Newtonsoft.Json 包<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">People ss= JsonConvert.DeserializeObject&lt;People&gt;(JsonConvert.SerializeObject(s));</span><br></pre></td></tr></table></figure></li>\n<li>表达式树<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">TransExpression</span>&lt;<span class=\"title\">TIn</span>, <span class=\"title\">TOut</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Func&lt;TIn, TOut&gt; cache = GetFunc();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Func&lt;TIn, TOut&gt; <span class=\"title\">GetFunc</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ParameterExpression parameterExpression = Expression.Parameter(<span class=\"keyword\">typeof</span>(TIn), <span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">        List&lt;MemberBinding&gt; memberBindingList = <span class=\"keyword\">new</span> List&lt;MemberBinding&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> <span class=\"title\">typeof</span>(<span class=\"params\">TOut</span>).<span class=\"title\">GetProperties</span>(<span class=\"params\"></span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">　　　　　　　<span class=\"keyword\">if</span> (!item.CanWrite)</span><br><span class=\"line\">　　　　　　　　    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            MemberExpression property = Expression.Property(parameterExpression, <span class=\"keyword\">typeof</span>(TIn).GetProperty(item.Name));</span><br><span class=\"line\">            MemberBinding memberBinding = Expression.Bind(item, property);</span><br><span class=\"line\">            memberBindingList.Add(memberBinding);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(<span class=\"keyword\">typeof</span>(TOut)), memberBindingList.ToArray());</span><br><span class=\"line\">        Expression&lt;Func&lt;TIn, TOut&gt;&gt; lambda = Expression.Lambda&lt;Func&lt;TIn, TOut&gt;&gt;(memberInitExpression, <span class=\"keyword\">new</span> ParameterExpression[] &#123; parameterExpression &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lambda.Compile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TOut <span class=\"title\">Trans</span>(<span class=\"params\">TIn tIn</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache(tIn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">People pp = TransExpression&lt;People,People&gt;,Trans(p);</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":1961,"excerpt":"<p>在代码中经常会遇到需要把对象复制一遍，或者把属性名相同的值复制一遍。</p>","more":"<h5 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h5><p>以People为例</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">People</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> IdCard &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Age &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>手动赋值<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">People p = <span class=\"keyword\">new</span> People() &#123;IdCrad = <span class=\"string\">&quot;445221XXXXXXXX&quot;</span>, Name=<span class=\"string\">&quot;caty&quot;</span>, Age=<span class=\"number\">21</span> &#125;;</span><br><span class=\"line\">People h = <span class=\"keyword\">new</span> People() &#123;IdCrad = p.IdCard, Name = p.Name, Age = p.Age &#125;;</span><br></pre></td></tr></table></figure></li>\n<li>反射<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TOut <span class=\"title\">TransReflection</span>&lt;<span class=\"title\">TIn</span>, <span class=\"title\">TOut</span>&gt;(<span class=\"params\">TIn tIn</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TOut tOut = Activator.CreateInstance&lt;TOut&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tInType = tIn.GetType();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> itemOut <span class=\"keyword\">in</span> tOut.GetType().GetProperties())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemIn = tInType.GetProperty(itemOut.Name); ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (itemIn != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            itemOut.SetValue(tOut, itemIn.GetValue(tIn));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tOut;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">People pp = TransReflection&lt;People, People&gt;(p);</span><br></pre></td></tr></table></figure></li>\n<li>序列化<br>需引入Newtonsoft.Json 包<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">People ss= JsonConvert.DeserializeObject&lt;People&gt;(JsonConvert.SerializeObject(s));</span><br></pre></td></tr></table></figure></li>\n<li>表达式树<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">TransExpression</span>&lt;<span class=\"title\">TIn</span>, <span class=\"title\">TOut</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Func&lt;TIn, TOut&gt; cache = GetFunc();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Func&lt;TIn, TOut&gt; <span class=\"title\">GetFunc</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ParameterExpression parameterExpression = Expression.Parameter(<span class=\"keyword\">typeof</span>(TIn), <span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">        List&lt;MemberBinding&gt; memberBindingList = <span class=\"keyword\">new</span> List&lt;MemberBinding&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> <span class=\"title\">typeof</span>(<span class=\"params\">TOut</span>).<span class=\"title\">GetProperties</span>(<span class=\"params\"></span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">　　　　　　　<span class=\"keyword\">if</span> (!item.CanWrite)</span><br><span class=\"line\">　　　　　　　　    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            MemberExpression property = Expression.Property(parameterExpression, <span class=\"keyword\">typeof</span>(TIn).GetProperty(item.Name));</span><br><span class=\"line\">            MemberBinding memberBinding = Expression.Bind(item, property);</span><br><span class=\"line\">            memberBindingList.Add(memberBinding);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(<span class=\"keyword\">typeof</span>(TOut)), memberBindingList.ToArray());</span><br><span class=\"line\">        Expression&lt;Func&lt;TIn, TOut&gt;&gt; lambda = Expression.Lambda&lt;Func&lt;TIn, TOut&gt;&gt;(memberInitExpression, <span class=\"keyword\">new</span> ParameterExpression[] &#123; parameterExpression &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lambda.Compile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TOut <span class=\"title\">Trans</span>(<span class=\"params\">TIn tIn</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache(tIn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">People pp = TransExpression&lt;People,People&gt;,Trans(p);</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"EF Core实现DB First和Code First","date":"2018-06-10T13:38:41.000Z","_content":"##### 安装 Entity Framework Core\n```cs\n// MsSql\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer\n// 柚子的MySql\nInstall-Package Pomelo.EntityFrameworkCore.MySql\n// 官方的MySql\nInstall-Package MySql.Data.EntityFrameworkCore\n// 程序包管理器控制台\nInstall-Package Microsoft.EntityFrameworkCore.Tools\n// 安装设计包\nInstall-Package Microsoft.EntityFrameworkCore.Design\n// 数据库提供程序设计包(EF Core 2.0不再需要)\n// MsSql\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer.Design\n// MySql\nInstall-Package Pomelo.EntityFrameworkCore.MySql.Design\n```\n<!--more-->\n##### DB First -- 从现有数据库创建模型\n```cs\n// MsSql\nScaffold-DbContext -Connection \"Server=localhost;User Id=root;Password=123456;Database=vanfj\" -Provider \"Microsoft.EntityFrameworkCore.SqlServer\" -OutputDir \"Models\"\n// MySql\nScaffold-DbContext -Connection \"Server=localhost;User Id=root;Password=123456;Database=vanfj\" -Provider \"Pomelo.EntityFrameworkCore.MySql\" -OutputDir \"Models\"\n// 将Connection中的连接字符串替换为自己的数据库连接，将OutputDir中的Models替换为自己要生成的文件目录名\n```\n##### CodeFirst -- 从模型生成到数据库\n###### 创建上下文\nIRSContext.cs\n```cs\npublic class IRSContext:DbContext\n{\n    public IRSContext(DbContextOptions options) : base(options) { }\n\n    public DbSet<Role> Roles { get; set; }\n    public DbSet<User> Users { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<User>().ToTable(\"User\");\n        modelBuilder.Entity<Role>().ToTable(\"Role\");\n    }\n}\n```\nUser.cs\n```cs\npublic class User\n{\n    public int UserId { get; set; }\n    public string UserCode { get; set; }\n    public string UserPwd { get; set; }\n    public string UserName { get; set; }\n}\n```\nRole.cs\n```cs\npublic class Role\n{\n    public int RoleId { get; set; }\n    public string RoleName { get; set; }\n    public string RoleDecs { get; set; }\n}\n```\n####### 注入上下文\nStartup.cs\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    //AddDbContext注入方式 \n    var connection = Configuration.GetConnectionString(\"SqlServer\");\n    services.AddDbContext<IRSContext>(options => options.UseSqlServer(connection, b => b.UseRowNumberForPaging()));\n    services.AddScoped<DbContext, IRSContext>();\n    services.AddMvc();\n\n    //AddDbContextPool注入方式\n    services.AddDbContextPool<IRSContext>(options => options.UseSqlServer(Configuration.GetConnectionString(\"SqlServer\")));\n    services.AddMvc().AddJsonOptions(options => options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore);\n}\n```\n###### appsettings.json连接字符串\n```cs\n{\n    \"ConnectionStrings\": \n    {\n        \"SqlServer\": \"Data Source=.;Initial Catalog=IRSDb;User Id=sa;Password=123;\"\n    },\n}\n```\n##### 执行NuGet命令,创建数据库\n```cs\n// 第一次执行初始化\nAdd-Migration InitialCreate\n// 添加一个迁移数据库 迁移的名称 目录（及其子命名空间）路径是相对于项目目录。 默认值为\"Migrations\"。\nAdd-Migration -Name <String> -OutputDir <String>\n// 删除上次的迁移数据库 不检查以查看迁移是否已应用到数据库。\nRemove-Migration -Force\n// 目标迁移。 如果为\"0\"，将恢复所有迁移。 默认到最后一个迁移。\nUpdate-Database \nUpdate-Database LastGoodMigration //还原迁移\n// 删除数据库 显示的数据库会被丢弃，但没有删除它\nDrop-Database -WhatIf\n// 获取有关 DbContext 类型的信息\nGet-DbContext \n// 从数据库更新DbContext和实体的类型\nScaffold-DbContext \n-Connection <String>\t// 数据库的连接字符串。\n-Provider <String>\t// 要使用的提供程序。 （例如 Microsoft.EntityFrameworkCore.SqlServer)\n-OutputDir <String >\t// 要将文件放入的目录。 路径是相对于项目目录。\n--Context <String >\t// 若要生成的 dbcontext 名称。\n-Schemas <String[]>\t// 要生成实体类型的表架构。\n-Tables <String[]>\t// 要生成实体类型的表。\n-DataAnnotations\t// 使用属性来配置该模型 （如果可能）。 如果省略，则使用仅 fluent API。\n-UseDatabaseNames\t// 使用直接从数据库表和列名称。\n-Force // 覆盖现有文件。\n\n// 从迁移中生成的 SQL 脚本\nScript-Migration\n-From <String>\t// 开始迁移。 默认值为 0 （初始数据库）\n-To <String>\t// 结束的迁移。 默认到最后一个迁移\n-Idempotent\t// 生成可以在任何迁移的数据库使用的脚本\n-Output <String>\t// 要将结果写入的文件\n```\n","source":"_posts/EF-Core实现DB-First和Code-First.md","raw":"---\ntitle: EF Core实现DB First和Code First\ndate: 2018-06-10 21:38:41\ncategories: .Net Core\ntags: \n - .Net Core\n - EF Core\n---\n##### 安装 Entity Framework Core\n```cs\n// MsSql\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer\n// 柚子的MySql\nInstall-Package Pomelo.EntityFrameworkCore.MySql\n// 官方的MySql\nInstall-Package MySql.Data.EntityFrameworkCore\n// 程序包管理器控制台\nInstall-Package Microsoft.EntityFrameworkCore.Tools\n// 安装设计包\nInstall-Package Microsoft.EntityFrameworkCore.Design\n// 数据库提供程序设计包(EF Core 2.0不再需要)\n// MsSql\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer.Design\n// MySql\nInstall-Package Pomelo.EntityFrameworkCore.MySql.Design\n```\n<!--more-->\n##### DB First -- 从现有数据库创建模型\n```cs\n// MsSql\nScaffold-DbContext -Connection \"Server=localhost;User Id=root;Password=123456;Database=vanfj\" -Provider \"Microsoft.EntityFrameworkCore.SqlServer\" -OutputDir \"Models\"\n// MySql\nScaffold-DbContext -Connection \"Server=localhost;User Id=root;Password=123456;Database=vanfj\" -Provider \"Pomelo.EntityFrameworkCore.MySql\" -OutputDir \"Models\"\n// 将Connection中的连接字符串替换为自己的数据库连接，将OutputDir中的Models替换为自己要生成的文件目录名\n```\n##### CodeFirst -- 从模型生成到数据库\n###### 创建上下文\nIRSContext.cs\n```cs\npublic class IRSContext:DbContext\n{\n    public IRSContext(DbContextOptions options) : base(options) { }\n\n    public DbSet<Role> Roles { get; set; }\n    public DbSet<User> Users { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<User>().ToTable(\"User\");\n        modelBuilder.Entity<Role>().ToTable(\"Role\");\n    }\n}\n```\nUser.cs\n```cs\npublic class User\n{\n    public int UserId { get; set; }\n    public string UserCode { get; set; }\n    public string UserPwd { get; set; }\n    public string UserName { get; set; }\n}\n```\nRole.cs\n```cs\npublic class Role\n{\n    public int RoleId { get; set; }\n    public string RoleName { get; set; }\n    public string RoleDecs { get; set; }\n}\n```\n####### 注入上下文\nStartup.cs\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    //AddDbContext注入方式 \n    var connection = Configuration.GetConnectionString(\"SqlServer\");\n    services.AddDbContext<IRSContext>(options => options.UseSqlServer(connection, b => b.UseRowNumberForPaging()));\n    services.AddScoped<DbContext, IRSContext>();\n    services.AddMvc();\n\n    //AddDbContextPool注入方式\n    services.AddDbContextPool<IRSContext>(options => options.UseSqlServer(Configuration.GetConnectionString(\"SqlServer\")));\n    services.AddMvc().AddJsonOptions(options => options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore);\n}\n```\n###### appsettings.json连接字符串\n```cs\n{\n    \"ConnectionStrings\": \n    {\n        \"SqlServer\": \"Data Source=.;Initial Catalog=IRSDb;User Id=sa;Password=123;\"\n    },\n}\n```\n##### 执行NuGet命令,创建数据库\n```cs\n// 第一次执行初始化\nAdd-Migration InitialCreate\n// 添加一个迁移数据库 迁移的名称 目录（及其子命名空间）路径是相对于项目目录。 默认值为\"Migrations\"。\nAdd-Migration -Name <String> -OutputDir <String>\n// 删除上次的迁移数据库 不检查以查看迁移是否已应用到数据库。\nRemove-Migration -Force\n// 目标迁移。 如果为\"0\"，将恢复所有迁移。 默认到最后一个迁移。\nUpdate-Database \nUpdate-Database LastGoodMigration //还原迁移\n// 删除数据库 显示的数据库会被丢弃，但没有删除它\nDrop-Database -WhatIf\n// 获取有关 DbContext 类型的信息\nGet-DbContext \n// 从数据库更新DbContext和实体的类型\nScaffold-DbContext \n-Connection <String>\t// 数据库的连接字符串。\n-Provider <String>\t// 要使用的提供程序。 （例如 Microsoft.EntityFrameworkCore.SqlServer)\n-OutputDir <String >\t// 要将文件放入的目录。 路径是相对于项目目录。\n--Context <String >\t// 若要生成的 dbcontext 名称。\n-Schemas <String[]>\t// 要生成实体类型的表架构。\n-Tables <String[]>\t// 要生成实体类型的表。\n-DataAnnotations\t// 使用属性来配置该模型 （如果可能）。 如果省略，则使用仅 fluent API。\n-UseDatabaseNames\t// 使用直接从数据库表和列名称。\n-Force // 覆盖现有文件。\n\n// 从迁移中生成的 SQL 脚本\nScript-Migration\n-From <String>\t// 开始迁移。 默认值为 0 （初始数据库）\n-To <String>\t// 结束的迁移。 默认到最后一个迁移\n-Idempotent\t// 生成可以在任何迁移的数据库使用的脚本\n-Output <String>\t// 要将结果写入的文件\n```\n","slug":"EF-Core实现DB-First和Code-First","published":1,"updated":"2021-03-30T03:24:16.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzx0029vcua34gldbic","content":"<h5 id=\"安装-Entity-Framework-Core\"><a href=\"#安装-Entity-Framework-Core\" class=\"headerlink\" title=\"安装 Entity Framework Core\"></a>安装 Entity Framework Core</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.SqlServer</span><br><span class=\"line\"><span class=\"comment\">// 柚子的MySql</span></span><br><span class=\"line\">Install-Package Pomelo.EntityFrameworkCore.MySql</span><br><span class=\"line\"><span class=\"comment\">// 官方的MySql</span></span><br><span class=\"line\">Install-Package MySql.Data.EntityFrameworkCore</span><br><span class=\"line\"><span class=\"comment\">// 程序包管理器控制台</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.Tools</span><br><span class=\"line\"><span class=\"comment\">// 安装设计包</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.Design</span><br><span class=\"line\"><span class=\"comment\">// 数据库提供程序设计包(EF Core 2.0不再需要)</span></span><br><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.SqlServer.Design</span><br><span class=\"line\"><span class=\"comment\">// MySql</span></span><br><span class=\"line\">Install-Package Pomelo.EntityFrameworkCore.MySql.Design</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h5 id=\"DB-First-–-从现有数据库创建模型\"><a href=\"#DB-First-–-从现有数据库创建模型\" class=\"headerlink\" title=\"DB First – 从现有数据库创建模型\"></a>DB First – 从现有数据库创建模型</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Scaffold-DbContext -Connection <span class=\"string\">&quot;Server=localhost;User Id=root;Password=123456;Database=vanfj&quot;</span> -Provider <span class=\"string\">&quot;Microsoft.EntityFrameworkCore.SqlServer&quot;</span> -OutputDir <span class=\"string\">&quot;Models&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// MySql</span></span><br><span class=\"line\">Scaffold-DbContext -Connection <span class=\"string\">&quot;Server=localhost;User Id=root;Password=123456;Database=vanfj&quot;</span> -Provider <span class=\"string\">&quot;Pomelo.EntityFrameworkCore.MySql&quot;</span> -OutputDir <span class=\"string\">&quot;Models&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 将Connection中的连接字符串替换为自己的数据库连接，将OutputDir中的Models替换为自己要生成的文件目录名</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"CodeFirst-–-从模型生成到数据库\"><a href=\"#CodeFirst-–-从模型生成到数据库\" class=\"headerlink\" title=\"CodeFirst – 从模型生成到数据库\"></a>CodeFirst – 从模型生成到数据库</h5><h6 id=\"创建上下文\"><a href=\"#创建上下文\" class=\"headerlink\" title=\"创建上下文\"></a>创建上下文</h6><p>IRSContext.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IRSContext</span>:<span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IRSContext</span>(<span class=\"params\">DbContextOptions options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DbSet&lt;Role&gt; Roles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DbSet&lt;User&gt; Users &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder modelBuilder</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        modelBuilder.Entity&lt;User&gt;().ToTable(<span class=\"string\">&quot;User&quot;</span>);</span><br><span class=\"line\">        modelBuilder.Entity&lt;Role&gt;().ToTable(<span class=\"string\">&quot;Role&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>User.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> UserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserPwd &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Role.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Role</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> RoleId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> RoleName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> RoleDecs &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####### 注入上下文<br>Startup.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//AddDbContext注入方式 </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> connection = Configuration.GetConnectionString(<span class=\"string\">&quot;SqlServer&quot;</span>);</span><br><span class=\"line\">    services.AddDbContext&lt;IRSContext&gt;(options =&gt; options.UseSqlServer(connection, b =&gt; b.UseRowNumberForPaging()));</span><br><span class=\"line\">    services.AddScoped&lt;DbContext, IRSContext&gt;();</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//AddDbContextPool注入方式</span></span><br><span class=\"line\">    services.AddDbContextPool&lt;IRSContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString(<span class=\"string\">&quot;SqlServer&quot;</span>)));</span><br><span class=\"line\">    services.AddMvc().AddJsonOptions(options =&gt; options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"appsettings-json连接字符串\"><a href=\"#appsettings-json连接字符串\" class=\"headerlink\" title=\"appsettings.json连接字符串\"></a>appsettings.json连接字符串</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ConnectionStrings&quot;</span>: </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;SqlServer&quot;</span>: <span class=\"string\">&quot;Data Source=.;Initial Catalog=IRSDb;User Id=sa;Password=123;&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"执行NuGet命令-创建数据库\"><a href=\"#执行NuGet命令-创建数据库\" class=\"headerlink\" title=\"执行NuGet命令,创建数据库\"></a>执行NuGet命令,创建数据库</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一次执行初始化</span></span><br><span class=\"line\">Add-Migration InitialCreate</span><br><span class=\"line\"><span class=\"comment\">// 添加一个迁移数据库 迁移的名称 目录（及其子命名空间）路径是相对于项目目录。 默认值为&quot;Migrations&quot;。</span></span><br><span class=\"line\">Add-Migration -Name &lt;String&gt; -OutputDir &lt;String&gt;</span><br><span class=\"line\"><span class=\"comment\">// 删除上次的迁移数据库 不检查以查看迁移是否已应用到数据库。</span></span><br><span class=\"line\">Remove-Migration -Force</span><br><span class=\"line\"><span class=\"comment\">// 目标迁移。 如果为&quot;0&quot;，将恢复所有迁移。 默认到最后一个迁移。</span></span><br><span class=\"line\">Update-Database </span><br><span class=\"line\">Update-Database LastGoodMigration <span class=\"comment\">//还原迁移</span></span><br><span class=\"line\"><span class=\"comment\">// 删除数据库 显示的数据库会被丢弃，但没有删除它</span></span><br><span class=\"line\">Drop-Database -WhatIf</span><br><span class=\"line\"><span class=\"comment\">// 获取有关 DbContext 类型的信息</span></span><br><span class=\"line\">Get-DbContext </span><br><span class=\"line\"><span class=\"comment\">// 从数据库更新DbContext和实体的类型</span></span><br><span class=\"line\">Scaffold-DbContext </span><br><span class=\"line\">-Connection &lt;String&gt;\t<span class=\"comment\">// 数据库的连接字符串。</span></span><br><span class=\"line\">-Provider &lt;String&gt;\t<span class=\"comment\">// 要使用的提供程序。 （例如 Microsoft.EntityFrameworkCore.SqlServer)</span></span><br><span class=\"line\">-OutputDir &lt;String &gt;\t<span class=\"comment\">// 要将文件放入的目录。 路径是相对于项目目录。</span></span><br><span class=\"line\">--Context &lt;String &gt;\t<span class=\"comment\">// 若要生成的 dbcontext 名称。</span></span><br><span class=\"line\">-Schemas &lt;String[]&gt;\t<span class=\"comment\">// 要生成实体类型的表架构。</span></span><br><span class=\"line\">-Tables &lt;String[]&gt;\t<span class=\"comment\">// 要生成实体类型的表。</span></span><br><span class=\"line\">-DataAnnotations\t<span class=\"comment\">// 使用属性来配置该模型 （如果可能）。 如果省略，则使用仅 fluent API。</span></span><br><span class=\"line\">-UseDatabaseNames\t<span class=\"comment\">// 使用直接从数据库表和列名称。</span></span><br><span class=\"line\">-Force <span class=\"comment\">// 覆盖现有文件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从迁移中生成的 SQL 脚本</span></span><br><span class=\"line\">Script-Migration</span><br><span class=\"line\">-From &lt;String&gt;\t<span class=\"comment\">// 开始迁移。 默认值为 0 （初始数据库）</span></span><br><span class=\"line\">-To &lt;String&gt;\t<span class=\"comment\">// 结束的迁移。 默认到最后一个迁移</span></span><br><span class=\"line\">-Idempotent\t<span class=\"comment\">// 生成可以在任何迁移的数据库使用的脚本</span></span><br><span class=\"line\">-Output &lt;String&gt;\t<span class=\"comment\">// 要将结果写入的文件</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":3646,"excerpt":"<h5 id=\"安装-Entity-Framework-Core\"><a href=\"#安装-Entity-Framework-Core\" class=\"headerlink\" title=\"安装 Entity Framework Core\"></a>安装 Entity Framework Core</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.SqlServer</span><br><span class=\"line\"><span class=\"comment\">// 柚子的MySql</span></span><br><span class=\"line\">Install-Package Pomelo.EntityFrameworkCore.MySql</span><br><span class=\"line\"><span class=\"comment\">// 官方的MySql</span></span><br><span class=\"line\">Install-Package MySql.Data.EntityFrameworkCore</span><br><span class=\"line\"><span class=\"comment\">// 程序包管理器控制台</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.Tools</span><br><span class=\"line\"><span class=\"comment\">// 安装设计包</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.Design</span><br><span class=\"line\"><span class=\"comment\">// 数据库提供程序设计包(EF Core 2.0不再需要)</span></span><br><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.SqlServer.Design</span><br><span class=\"line\"><span class=\"comment\">// MySql</span></span><br><span class=\"line\">Install-Package Pomelo.EntityFrameworkCore.MySql.Design</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"DB-First-–-从现有数据库创建模型\"><a href=\"#DB-First-–-从现有数据库创建模型\" class=\"headerlink\" title=\"DB First – 从现有数据库创建模型\"></a>DB First – 从现有数据库创建模型</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Scaffold-DbContext -Connection <span class=\"string\">&quot;Server=localhost;User Id=root;Password=123456;Database=vanfj&quot;</span> -Provider <span class=\"string\">&quot;Microsoft.EntityFrameworkCore.SqlServer&quot;</span> -OutputDir <span class=\"string\">&quot;Models&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// MySql</span></span><br><span class=\"line\">Scaffold-DbContext -Connection <span class=\"string\">&quot;Server=localhost;User Id=root;Password=123456;Database=vanfj&quot;</span> -Provider <span class=\"string\">&quot;Pomelo.EntityFrameworkCore.MySql&quot;</span> -OutputDir <span class=\"string\">&quot;Models&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 将Connection中的连接字符串替换为自己的数据库连接，将OutputDir中的Models替换为自己要生成的文件目录名</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"CodeFirst-–-从模型生成到数据库\"><a href=\"#CodeFirst-–-从模型生成到数据库\" class=\"headerlink\" title=\"CodeFirst – 从模型生成到数据库\"></a>CodeFirst – 从模型生成到数据库</h5><h6 id=\"创建上下文\"><a href=\"#创建上下文\" class=\"headerlink\" title=\"创建上下文\"></a>创建上下文</h6><p>IRSContext.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IRSContext</span>:<span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IRSContext</span>(<span class=\"params\">DbContextOptions options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DbSet&lt;Role&gt; Roles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DbSet&lt;User&gt; Users &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder modelBuilder</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        modelBuilder.Entity&lt;User&gt;().ToTable(<span class=\"string\">&quot;User&quot;</span>);</span><br><span class=\"line\">        modelBuilder.Entity&lt;Role&gt;().ToTable(<span class=\"string\">&quot;Role&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>User.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> UserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserPwd &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Role.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Role</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> RoleId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> RoleName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> RoleDecs &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####### 注入上下文<br>Startup.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//AddDbContext注入方式 </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> connection = Configuration.GetConnectionString(<span class=\"string\">&quot;SqlServer&quot;</span>);</span><br><span class=\"line\">    services.AddDbContext&lt;IRSContext&gt;(options =&gt; options.UseSqlServer(connection, b =&gt; b.UseRowNumberForPaging()));</span><br><span class=\"line\">    services.AddScoped&lt;DbContext, IRSContext&gt;();</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//AddDbContextPool注入方式</span></span><br><span class=\"line\">    services.AddDbContextPool&lt;IRSContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString(<span class=\"string\">&quot;SqlServer&quot;</span>)));</span><br><span class=\"line\">    services.AddMvc().AddJsonOptions(options =&gt; options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"appsettings-json连接字符串\"><a href=\"#appsettings-json连接字符串\" class=\"headerlink\" title=\"appsettings.json连接字符串\"></a>appsettings.json连接字符串</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ConnectionStrings&quot;</span>: </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;SqlServer&quot;</span>: <span class=\"string\">&quot;Data Source=.;Initial Catalog=IRSDb;User Id=sa;Password=123;&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"执行NuGet命令-创建数据库\"><a href=\"#执行NuGet命令-创建数据库\" class=\"headerlink\" title=\"执行NuGet命令,创建数据库\"></a>执行NuGet命令,创建数据库</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一次执行初始化</span></span><br><span class=\"line\">Add-Migration InitialCreate</span><br><span class=\"line\"><span class=\"comment\">// 添加一个迁移数据库 迁移的名称 目录（及其子命名空间）路径是相对于项目目录。 默认值为&quot;Migrations&quot;。</span></span><br><span class=\"line\">Add-Migration -Name &lt;String&gt; -OutputDir &lt;String&gt;</span><br><span class=\"line\"><span class=\"comment\">// 删除上次的迁移数据库 不检查以查看迁移是否已应用到数据库。</span></span><br><span class=\"line\">Remove-Migration -Force</span><br><span class=\"line\"><span class=\"comment\">// 目标迁移。 如果为&quot;0&quot;，将恢复所有迁移。 默认到最后一个迁移。</span></span><br><span class=\"line\">Update-Database </span><br><span class=\"line\">Update-Database LastGoodMigration <span class=\"comment\">//还原迁移</span></span><br><span class=\"line\"><span class=\"comment\">// 删除数据库 显示的数据库会被丢弃，但没有删除它</span></span><br><span class=\"line\">Drop-Database -WhatIf</span><br><span class=\"line\"><span class=\"comment\">// 获取有关 DbContext 类型的信息</span></span><br><span class=\"line\">Get-DbContext </span><br><span class=\"line\"><span class=\"comment\">// 从数据库更新DbContext和实体的类型</span></span><br><span class=\"line\">Scaffold-DbContext </span><br><span class=\"line\">-Connection &lt;String&gt;\t<span class=\"comment\">// 数据库的连接字符串。</span></span><br><span class=\"line\">-Provider &lt;String&gt;\t<span class=\"comment\">// 要使用的提供程序。 （例如 Microsoft.EntityFrameworkCore.SqlServer)</span></span><br><span class=\"line\">-OutputDir &lt;String &gt;\t<span class=\"comment\">// 要将文件放入的目录。 路径是相对于项目目录。</span></span><br><span class=\"line\">--Context &lt;String &gt;\t<span class=\"comment\">// 若要生成的 dbcontext 名称。</span></span><br><span class=\"line\">-Schemas &lt;String[]&gt;\t<span class=\"comment\">// 要生成实体类型的表架构。</span></span><br><span class=\"line\">-Tables &lt;String[]&gt;\t<span class=\"comment\">// 要生成实体类型的表。</span></span><br><span class=\"line\">-DataAnnotations\t<span class=\"comment\">// 使用属性来配置该模型 （如果可能）。 如果省略，则使用仅 fluent API。</span></span><br><span class=\"line\">-UseDatabaseNames\t<span class=\"comment\">// 使用直接从数据库表和列名称。</span></span><br><span class=\"line\">-Force <span class=\"comment\">// 覆盖现有文件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从迁移中生成的 SQL 脚本</span></span><br><span class=\"line\">Script-Migration</span><br><span class=\"line\">-From &lt;String&gt;\t<span class=\"comment\">// 开始迁移。 默认值为 0 （初始数据库）</span></span><br><span class=\"line\">-To &lt;String&gt;\t<span class=\"comment\">// 结束的迁移。 默认到最后一个迁移</span></span><br><span class=\"line\">-Idempotent\t<span class=\"comment\">// 生成可以在任何迁移的数据库使用的脚本</span></span><br><span class=\"line\">-Output &lt;String&gt;\t<span class=\"comment\">// 要将结果写入的文件</span></span><br></pre></td></tr></table></figure>"},{"title":"IdentityServer4 ClientCredential模式","date":"2019-11-02T04:48:58.000Z","_content":"#### 使用客户端认证保护Api\n\n此博客介绍了使用IdentityServer保护API的最基本场景.\n在这种情况下,我们将定义一个API和要访问它的客户端.客户端将在IdentityServer上请求访问令牌,并使用它来访问API.\n\n#### 准备\n\n先交代一下需要用的到包以及版本\n\n* .Net Core 3.0.0\n* IdentityServer4.AccessTokenValidation 3.0.1\n* IdentityServer4 3.0.2\n* IdentityModel 4.0.0\n\n#### IdentityServerCenter\n\n这是一个ASP.NET Core Web Api项目,认证服务中心,主要用为Token的发放,引用IdentityServer4包\n\n<!--more-->\n\n##### Config.cs\n\n```cs\npublic class Config\n{\n    public static IEnumerable<ApiResource> GetResources()\n    {\n        return new List<ApiResource>()\n        {\n            new ApiResource(\"api\", \"My Api\")\n        };\n    }\n\n    public static IEnumerable<Client> GetClients()\n    {\n        return new List<Client>\n        {\n            new Client()\n            {\n                ClientId = \"client\",\n                AllowedGrantTypes = GrantTypes.ClientCredentials,\n                ClientSecrets = new List<Secret>\n                {\n                    new Secret(\"secret\".Sha256())\n                },\n                AllowedScopes = {\"api\"}\n            }\n        };\n    }\n}\n```\n\n##### Startup.cs\n\n```cs\npublic class Startup\n{\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddIdentityServer()\n            .AddDeveloperSigningCredential()\n            .AddInMemoryApiResources(Config.GetResources())\n            .AddInMemoryClients(Config.GetClients());\n        services.AddControllers();\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        app.UseHttpsRedirection();\n        app.UseIdentityServer();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}\n```\n\n通过查看launchsettings.json,获知和修改项目运行时的端口.\n","source":"_posts/IdentityServer4-ClientCredential模式.md","raw":"---\ntitle: IdentityServer4 ClientCredential模式\ndate: 2019-11-02 12:48:58\ncategories: .Net Core\ntags:\n - .Net Core\n - IdentityServer4\n---\n#### 使用客户端认证保护Api\n\n此博客介绍了使用IdentityServer保护API的最基本场景.\n在这种情况下,我们将定义一个API和要访问它的客户端.客户端将在IdentityServer上请求访问令牌,并使用它来访问API.\n\n#### 准备\n\n先交代一下需要用的到包以及版本\n\n* .Net Core 3.0.0\n* IdentityServer4.AccessTokenValidation 3.0.1\n* IdentityServer4 3.0.2\n* IdentityModel 4.0.0\n\n#### IdentityServerCenter\n\n这是一个ASP.NET Core Web Api项目,认证服务中心,主要用为Token的发放,引用IdentityServer4包\n\n<!--more-->\n\n##### Config.cs\n\n```cs\npublic class Config\n{\n    public static IEnumerable<ApiResource> GetResources()\n    {\n        return new List<ApiResource>()\n        {\n            new ApiResource(\"api\", \"My Api\")\n        };\n    }\n\n    public static IEnumerable<Client> GetClients()\n    {\n        return new List<Client>\n        {\n            new Client()\n            {\n                ClientId = \"client\",\n                AllowedGrantTypes = GrantTypes.ClientCredentials,\n                ClientSecrets = new List<Secret>\n                {\n                    new Secret(\"secret\".Sha256())\n                },\n                AllowedScopes = {\"api\"}\n            }\n        };\n    }\n}\n```\n\n##### Startup.cs\n\n```cs\npublic class Startup\n{\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddIdentityServer()\n            .AddDeveloperSigningCredential()\n            .AddInMemoryApiResources(Config.GetResources())\n            .AddInMemoryClients(Config.GetClients());\n        services.AddControllers();\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        app.UseHttpsRedirection();\n        app.UseIdentityServer();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}\n```\n\n通过查看launchsettings.json,获知和修改项目运行时的端口.\n","slug":"IdentityServer4-ClientCredential模式","published":1,"updated":"2021-03-30T03:24:16.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvwzz002dvcuahlb68bmf","content":"<h4 id=\"使用客户端认证保护Api\"><a href=\"#使用客户端认证保护Api\" class=\"headerlink\" title=\"使用客户端认证保护Api\"></a>使用客户端认证保护Api</h4><p>此博客介绍了使用IdentityServer保护API的最基本场景.<br>在这种情况下,我们将定义一个API和要访问它的客户端.客户端将在IdentityServer上请求访问令牌,并使用它来访问API.</p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>先交代一下需要用的到包以及版本</p>\n<ul>\n<li>.Net Core 3.0.0</li>\n<li>IdentityServer4.AccessTokenValidation 3.0.1</li>\n<li>IdentityServer4 3.0.2</li>\n<li>IdentityModel 4.0.0</li>\n</ul>\n<h4 id=\"IdentityServerCenter\"><a href=\"#IdentityServerCenter\" class=\"headerlink\" title=\"IdentityServerCenter\"></a>IdentityServerCenter</h4><p>这是一个ASP.NET Core Web Api项目,认证服务中心,主要用为Token的发放,引用IdentityServer4包</p>\n<span id=\"more\"></span>\n\n<h5 id=\"Config-cs\"><a href=\"#Config-cs\" class=\"headerlink\" title=\"Config.cs\"></a>Config.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Config</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;ApiResource&gt; <span class=\"title\">GetResources</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> List&lt;ApiResource&gt;()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ApiResource(<span class=\"string\">&quot;api&quot;</span>, <span class=\"string\">&quot;My Api&quot;</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;Client&gt; <span class=\"title\">GetClients</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> List&lt;Client&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Client()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ClientId = <span class=\"string\">&quot;client&quot;</span>,</span><br><span class=\"line\">                AllowedGrantTypes = GrantTypes.ClientCredentials,</span><br><span class=\"line\">                ClientSecrets = <span class=\"keyword\">new</span> List&lt;Secret&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Secret(<span class=\"string\">&quot;secret&quot;</span>.Sha256())</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                AllowedScopes = &#123;<span class=\"string\">&quot;api&quot;</span>&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Configuration = configuration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddIdentityServer()</span><br><span class=\"line\">            .AddDeveloperSigningCredential()</span><br><span class=\"line\">            .AddInMemoryApiResources(Config.GetResources())</span><br><span class=\"line\">            .AddInMemoryClients(Config.GetClients());</span><br><span class=\"line\">        services.AddControllers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        app.UseHttpsRedirection();</span><br><span class=\"line\">        app.UseIdentityServer();</span><br><span class=\"line\">        app.UseRouting();</span><br><span class=\"line\">        app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            endpoints.MapControllers();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过查看launchsettings.json,获知和修改项目运行时的端口.</p>\n","site":{"data":{}},"length":1667,"excerpt":"<h4 id=\"使用客户端认证保护Api\"><a href=\"#使用客户端认证保护Api\" class=\"headerlink\" title=\"使用客户端认证保护Api\"></a>使用客户端认证保护Api</h4><p>此博客介绍了使用IdentityServer保护API的最基本场景.<br>在这种情况下,我们将定义一个API和要访问它的客户端.客户端将在IdentityServer上请求访问令牌,并使用它来访问API.</p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>先交代一下需要用的到包以及版本</p>\n<ul>\n<li>.Net Core 3.0.0</li>\n<li>IdentityServer4.AccessTokenValidation 3.0.1</li>\n<li>IdentityServer4 3.0.2</li>\n<li>IdentityModel 4.0.0</li>\n</ul>\n<h4 id=\"IdentityServerCenter\"><a href=\"#IdentityServerCenter\" class=\"headerlink\" title=\"IdentityServerCenter\"></a>IdentityServerCenter</h4><p>这是一个ASP.NET Core Web Api项目,认证服务中心,主要用为Token的发放,引用IdentityServer4包</p>","more":"<h5 id=\"Config-cs\"><a href=\"#Config-cs\" class=\"headerlink\" title=\"Config.cs\"></a>Config.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Config</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;ApiResource&gt; <span class=\"title\">GetResources</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> List&lt;ApiResource&gt;()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ApiResource(<span class=\"string\">&quot;api&quot;</span>, <span class=\"string\">&quot;My Api&quot;</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;Client&gt; <span class=\"title\">GetClients</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> List&lt;Client&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Client()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ClientId = <span class=\"string\">&quot;client&quot;</span>,</span><br><span class=\"line\">                AllowedGrantTypes = GrantTypes.ClientCredentials,</span><br><span class=\"line\">                ClientSecrets = <span class=\"keyword\">new</span> List&lt;Secret&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Secret(<span class=\"string\">&quot;secret&quot;</span>.Sha256())</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                AllowedScopes = &#123;<span class=\"string\">&quot;api&quot;</span>&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Configuration = configuration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddIdentityServer()</span><br><span class=\"line\">            .AddDeveloperSigningCredential()</span><br><span class=\"line\">            .AddInMemoryApiResources(Config.GetResources())</span><br><span class=\"line\">            .AddInMemoryClients(Config.GetClients());</span><br><span class=\"line\">        services.AddControllers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        app.UseHttpsRedirection();</span><br><span class=\"line\">        app.UseIdentityServer();</span><br><span class=\"line\">        app.UseRouting();</span><br><span class=\"line\">        app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            endpoints.MapControllers();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过查看launchsettings.json,获知和修改项目运行时的端口.</p>"},{"title":".Net Core MVC 三层架构框架","date":"2018-03-06T15:41:49.000Z","_content":"Asp.Net Core 出来也很长时间,研究了一段时间,并基于Asp.Net Core + EF Core搭建了一个MVC的三层结构,其中用到了依赖注入和控制反转\n<!--more-->\n#### BLL层\n##### IBaseService.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Interface\n{\n    public interface IBaseService<T> where T:class,new()\n    {\n        IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n        bool DeleteEntity(T entity);\n        bool EditEntity(T entity);\n        T AddEntity(T entity);\n    }\n}\n```\n\n##### IService.cs\n```cs\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Interface\n{\n    public partial interface IFaceService : IBaseService<Face>\n    {\n\n    }\n    public partial interface IPeopleService : IBaseService<People>\n    {\n\n    }\n}\n```\n\n##### BaseService.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Implements\n{\n    public class BaseService<T> where T : class, new()\n    {\n        private IBaseDal<T> _baseDal;\n        public BaseService(IBaseDal<T> baseDal)\n        {\n            _baseDal = baseDal;\n        }\n        //查询\n        public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n        {\n            return _baseDal.LoadEntities(whereLambda);\n        }\n        //分页岔村\n        public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n        {\n            return _baseDal.LoadPageEntities<s>(pageIndex, pageSize, out totalCount, whereLambda, orderbyLambda, isAsc);\n        }\n        /// <summary>\n        /// 删除\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool DeleteEntity(T entity)\n        {\n            _baseDal.DeleteEntity(entity);\n            return _baseDal.SaveChanges();\n        }\n        /// <summary>\n        /// 更新\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool EditEntity(T entity)\n        {\n            _baseDal.EditEntity(entity);\n            return _baseDal.SaveChanges();\n        }\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public T AddEntity(T entity)\n        {\n            _baseDal.AddEntity(entity);\n            _baseDal.SaveChanges();\n            return entity;\n        }\n    }\n}\n```\n\n##### Service.cs\n```cs\nusing Caty.Album.BLL.Interface;\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Implements\n{\n    public partial class FaceService:BaseService<Face>,IFaceService\n    {\n        private IFaceDal _faceDal;\n        public FaceService(IFaceDal faceDal):base(faceDal)\n        {\n            _faceDal = faceDal;\n        }\n    }\n\n    public partial class PeopleService:BaseService<People>,IPeopleService\n    {\n        private IPeopleDal _peopleDal;\n        public PeopleService(IPeopleDal peopleDal) : base(peopleDal)\n        {\n            _peopleDal = peopleDal;\n        }\n    }\n}\n```\n\n#### Dal层\n##### IBaseDal.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Interface\n{\n    public interface IBaseDal<T> where T:class, new()\n    {\n        IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n        bool DeleteEntity(T entity);\n        bool EditEntity(T entity);\n        T AddEntity(T entity);\n        bool SaveChanges();\n    }\n}\n```\n\n##### IDal.cs\n```cs\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Interface\n{\n    public partial interface IUserDal : IBaseDal<User>\n    {\n        \n    }\n    public partial interface IRoleDal : IBaseDal<Role>\n    {\n\n    }\n}\n```\n\n##### BaseDal.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Implements\n{\n    public class BaseDal<T> : IBaseDal<T> where T : class, new()\n    {\n        protected readonly AlbumContext Db;\n        public BaseDal(AlbumContext dbContext)\n        {\n            Db = dbContext;\n        }\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public T AddEntity(T entity)\n        {\n            Db.Set<T>().Add(entity);\n            // Db.SaveChanges();\n            return entity;\n        }\n        /// <summary>\n        /// 删除\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool DeleteEntity(T entity)\n        {\n            Db.Entry<T>(entity).State = EntityState.Deleted;\n            return true;\n            // return Db.SaveChanges() > 0;\n        }\n        /// <summary>\n        /// 更新\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool EditEntity(T entity)\n        {\n            Db.Entry<T>(entity).State = EntityState.Modified;\n            return true;\n            // return Db.SaveChanges() > 0;\n        }\n        /// <summary>\n        /// 查询过滤\n        /// </summary>\n        /// <param name=\"whereLambda\"></param>\n        /// <returns></returns>\n        public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n        {\n            return Db.Set<T>().Where<T>(whereLambda);\n        }\n        /// <summary>\n        /// 分页\n        /// </summary>\n        /// <typeparam name=\"s\"></typeparam>\n        /// <param name=\"pageIndex\"></param>\n        /// <param name=\"pageSize\"></param>\n        /// <param name=\"totalCount\"></param>\n        /// <param name=\"whereLambda\"></param>\n        /// <param name=\"orderbyLambda\"></param>\n        /// <param name=\"isAsc\"></param>\n        /// <returns></returns>\n        public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n        {\n            var temp = Db.Set<T>().Where<T>(whereLambda);\n            totalCount = temp.Count();\n            if (isAsc) //升序\n            {\n                temp = temp.OrderBy<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n            }\n            else\n            {\n                temp = temp.OrderByDescending<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n            }\n            return temp;\n        }\n        /// <summary>\n        /// 一个业务中经常设计多张表操作,一次连接数据库完成所有数据的保存,提高性能,工作单元模式\n        /// </summary>\n        /// <returns></returns>\n        public bool SaveChanges()\n        {\n            return Db.SaveChanges() > 0;\n        }\n    }\n}\n```\n\n##### Dal.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Implements\n{\n    public partial class UserDal : BaseDal<User>, IUserDal\n    {\n        public UserDal(AlbumContext dbContext) : base(dbContext)\n        {\n\n        }\n    }\n    public partial class RoleDal : BaseDal<Role>, IRoleDal\n    {\n        public RoleDal(AlbumContext dbContext) : base(dbContext)\n        {\n\n        }\n    }\n}\n```\n\n#### Model层\n##### AlbumContext.cs\n```cs\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Album.Model\n{\n    public class AlbumContext:DbContext\n    {\n        public AlbumContext() : base() { }\n        public AlbumContext(DbContextOptions options) : base(options) { }\n\n        public DbSet<User> Users { get; set; }\n        public DbSet<Role> Roles { get; set; }\n        public DbSet<Right> Rights { get; set; }\n        public DbSet<UserRole> UserRoles { get; set; }\n        public DbSet<UserRight> UserRights { get; set; }\n        public DbSet<RoleRight> RoleRights { get; set; }\n        public DbSet<Face> Faces { get; set; }\n        public DbSet<Group> Groups { get; set; }\n        public DbSet<People> Peoples { get; set; }\n        public DbSet<PeopleGroup> PeopleGroups { get; set; }\n    }\n}\n```\n\n#### 依赖注入\n修改Stratup.cs下的ConfigureServices方法的代码\n##### Startup.cs\n```cs\n public void ConfigureServices(IServiceCollection services)\n    {\n        //添加ef的依赖  \n        var connection = \"server=.;uid=sa;pwd=123;database=AlbumDb\";\n        services.AddDbContext<AlbumContext>(options => options.UseSqlServer(connection));\n        services.AddScoped<DbContext, AlbumContext>();\n        services.AddMvc();\n\n        #region 依赖注入\n        services.AddScoped<IFaceDal, FaceDal>();\n        services.AddScoped<IPeopleDal, PeopleDal>();\n        services.AddScoped<IGroupDal, GroupDal>();\n        services.AddScoped<IPeopleGroupDal, PeopleGroupDal>();\n        services.AddScoped<IFaceService, FaceService>();\n        services.AddScoped<IPeopleService, PeopleService>();\n        services.AddScoped<IGroupService, GroupService>();\n        services.AddScoped<IPeopleGroupService, PeopleGroupService>();\n        #endregion\n    }\n```","source":"_posts/Net-Core-MVC-三层架构框架.md","raw":"---\ntitle: .Net Core MVC 三层架构框架\ndate: 2018-03-06 23:41:49\ncategories: .Net Core\ntags:\n - .Net Core\n - MVC\n---\nAsp.Net Core 出来也很长时间,研究了一段时间,并基于Asp.Net Core + EF Core搭建了一个MVC的三层结构,其中用到了依赖注入和控制反转\n<!--more-->\n#### BLL层\n##### IBaseService.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Interface\n{\n    public interface IBaseService<T> where T:class,new()\n    {\n        IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n        bool DeleteEntity(T entity);\n        bool EditEntity(T entity);\n        T AddEntity(T entity);\n    }\n}\n```\n\n##### IService.cs\n```cs\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Interface\n{\n    public partial interface IFaceService : IBaseService<Face>\n    {\n\n    }\n    public partial interface IPeopleService : IBaseService<People>\n    {\n\n    }\n}\n```\n\n##### BaseService.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Implements\n{\n    public class BaseService<T> where T : class, new()\n    {\n        private IBaseDal<T> _baseDal;\n        public BaseService(IBaseDal<T> baseDal)\n        {\n            _baseDal = baseDal;\n        }\n        //查询\n        public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n        {\n            return _baseDal.LoadEntities(whereLambda);\n        }\n        //分页岔村\n        public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n        {\n            return _baseDal.LoadPageEntities<s>(pageIndex, pageSize, out totalCount, whereLambda, orderbyLambda, isAsc);\n        }\n        /// <summary>\n        /// 删除\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool DeleteEntity(T entity)\n        {\n            _baseDal.DeleteEntity(entity);\n            return _baseDal.SaveChanges();\n        }\n        /// <summary>\n        /// 更新\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool EditEntity(T entity)\n        {\n            _baseDal.EditEntity(entity);\n            return _baseDal.SaveChanges();\n        }\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public T AddEntity(T entity)\n        {\n            _baseDal.AddEntity(entity);\n            _baseDal.SaveChanges();\n            return entity;\n        }\n    }\n}\n```\n\n##### Service.cs\n```cs\nusing Caty.Album.BLL.Interface;\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Implements\n{\n    public partial class FaceService:BaseService<Face>,IFaceService\n    {\n        private IFaceDal _faceDal;\n        public FaceService(IFaceDal faceDal):base(faceDal)\n        {\n            _faceDal = faceDal;\n        }\n    }\n\n    public partial class PeopleService:BaseService<People>,IPeopleService\n    {\n        private IPeopleDal _peopleDal;\n        public PeopleService(IPeopleDal peopleDal) : base(peopleDal)\n        {\n            _peopleDal = peopleDal;\n        }\n    }\n}\n```\n\n#### Dal层\n##### IBaseDal.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Interface\n{\n    public interface IBaseDal<T> where T:class, new()\n    {\n        IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n        bool DeleteEntity(T entity);\n        bool EditEntity(T entity);\n        T AddEntity(T entity);\n        bool SaveChanges();\n    }\n}\n```\n\n##### IDal.cs\n```cs\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Interface\n{\n    public partial interface IUserDal : IBaseDal<User>\n    {\n        \n    }\n    public partial interface IRoleDal : IBaseDal<Role>\n    {\n\n    }\n}\n```\n\n##### BaseDal.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Implements\n{\n    public class BaseDal<T> : IBaseDal<T> where T : class, new()\n    {\n        protected readonly AlbumContext Db;\n        public BaseDal(AlbumContext dbContext)\n        {\n            Db = dbContext;\n        }\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public T AddEntity(T entity)\n        {\n            Db.Set<T>().Add(entity);\n            // Db.SaveChanges();\n            return entity;\n        }\n        /// <summary>\n        /// 删除\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool DeleteEntity(T entity)\n        {\n            Db.Entry<T>(entity).State = EntityState.Deleted;\n            return true;\n            // return Db.SaveChanges() > 0;\n        }\n        /// <summary>\n        /// 更新\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool EditEntity(T entity)\n        {\n            Db.Entry<T>(entity).State = EntityState.Modified;\n            return true;\n            // return Db.SaveChanges() > 0;\n        }\n        /// <summary>\n        /// 查询过滤\n        /// </summary>\n        /// <param name=\"whereLambda\"></param>\n        /// <returns></returns>\n        public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n        {\n            return Db.Set<T>().Where<T>(whereLambda);\n        }\n        /// <summary>\n        /// 分页\n        /// </summary>\n        /// <typeparam name=\"s\"></typeparam>\n        /// <param name=\"pageIndex\"></param>\n        /// <param name=\"pageSize\"></param>\n        /// <param name=\"totalCount\"></param>\n        /// <param name=\"whereLambda\"></param>\n        /// <param name=\"orderbyLambda\"></param>\n        /// <param name=\"isAsc\"></param>\n        /// <returns></returns>\n        public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n        {\n            var temp = Db.Set<T>().Where<T>(whereLambda);\n            totalCount = temp.Count();\n            if (isAsc) //升序\n            {\n                temp = temp.OrderBy<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n            }\n            else\n            {\n                temp = temp.OrderByDescending<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n            }\n            return temp;\n        }\n        /// <summary>\n        /// 一个业务中经常设计多张表操作,一次连接数据库完成所有数据的保存,提高性能,工作单元模式\n        /// </summary>\n        /// <returns></returns>\n        public bool SaveChanges()\n        {\n            return Db.SaveChanges() > 0;\n        }\n    }\n}\n```\n\n##### Dal.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Implements\n{\n    public partial class UserDal : BaseDal<User>, IUserDal\n    {\n        public UserDal(AlbumContext dbContext) : base(dbContext)\n        {\n\n        }\n    }\n    public partial class RoleDal : BaseDal<Role>, IRoleDal\n    {\n        public RoleDal(AlbumContext dbContext) : base(dbContext)\n        {\n\n        }\n    }\n}\n```\n\n#### Model层\n##### AlbumContext.cs\n```cs\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Album.Model\n{\n    public class AlbumContext:DbContext\n    {\n        public AlbumContext() : base() { }\n        public AlbumContext(DbContextOptions options) : base(options) { }\n\n        public DbSet<User> Users { get; set; }\n        public DbSet<Role> Roles { get; set; }\n        public DbSet<Right> Rights { get; set; }\n        public DbSet<UserRole> UserRoles { get; set; }\n        public DbSet<UserRight> UserRights { get; set; }\n        public DbSet<RoleRight> RoleRights { get; set; }\n        public DbSet<Face> Faces { get; set; }\n        public DbSet<Group> Groups { get; set; }\n        public DbSet<People> Peoples { get; set; }\n        public DbSet<PeopleGroup> PeopleGroups { get; set; }\n    }\n}\n```\n\n#### 依赖注入\n修改Stratup.cs下的ConfigureServices方法的代码\n##### Startup.cs\n```cs\n public void ConfigureServices(IServiceCollection services)\n    {\n        //添加ef的依赖  \n        var connection = \"server=.;uid=sa;pwd=123;database=AlbumDb\";\n        services.AddDbContext<AlbumContext>(options => options.UseSqlServer(connection));\n        services.AddScoped<DbContext, AlbumContext>();\n        services.AddMvc();\n\n        #region 依赖注入\n        services.AddScoped<IFaceDal, FaceDal>();\n        services.AddScoped<IPeopleDal, PeopleDal>();\n        services.AddScoped<IGroupDal, GroupDal>();\n        services.AddScoped<IPeopleGroupDal, PeopleGroupDal>();\n        services.AddScoped<IFaceService, FaceService>();\n        services.AddScoped<IPeopleService, PeopleService>();\n        services.AddScoped<IGroupService, GroupService>();\n        services.AddScoped<IPeopleGroupService, PeopleGroupService>();\n        #endregion\n    }\n```","slug":"Net-Core-MVC-三层架构框架","published":1,"updated":"2021-03-30T03:24:16.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx00002gvcuafg3o3xuf","content":"<p>Asp.Net Core 出来也很长时间,研究了一段时间,并基于Asp.Net Core + EF Core搭建了一个MVC的三层结构,其中用到了依赖注入和控制反转</p>\n<span id=\"more\"></span>\n<h4 id=\"BLL层\"><a href=\"#BLL层\" class=\"headerlink\" title=\"BLL层\"></a>BLL层</h4><h5 id=\"IBaseService-cs\"><a href=\"#IBaseService-cs\" class=\"headerlink\" title=\"IBaseService.cs\"></a>IBaseService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseService&lt;T&gt; where T:class,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"IService-cs\"><a href=\"#IService-cs\" class=\"headerlink\" title=\"IService.cs\"></a>IService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IFaceService</span> : <span class=\"title\">IBaseService</span>&lt;<span class=\"title\">Face</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IPeopleService</span> : <span class=\"title\">IBaseService</span>&lt;<span class=\"title\">People</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"BaseService-cs\"><a href=\"#BaseService-cs\" class=\"headerlink\" title=\"BaseService.cs\"></a>BaseService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class BaseService&lt;T&gt; where T : class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IBaseDal&lt;T&gt; _baseDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\">IBaseDal&lt;T&gt; baseDal</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _baseDal = baseDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//查询</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.LoadEntities(whereLambda);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//分页岔村</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.LoadPageEntities&lt;s&gt;(pageIndex, pageSize, <span class=\"keyword\">out</span> totalCount, whereLambda, orderbyLambda, isAsc);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _baseDal.DeleteEntity(entity);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.SaveChanges();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _baseDal.EditEntity(entity);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.SaveChanges();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _baseDal.AddEntity(entity);</span><br><span class=\"line\">            _baseDal.SaveChanges();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Service-cs\"><a href=\"#Service-cs\" class=\"headerlink\" title=\"Service.cs\"></a>Service.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.BLL.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq.Expressions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">FaceService</span>:<span class=\"title\">BaseService</span>&lt;<span class=\"title\">Face</span>&gt;,<span class=\"title\">IFaceService</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IFaceDal _faceDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FaceService</span>(<span class=\"params\">IFaceDal faceDal</span>):<span class=\"title\">base</span>(<span class=\"params\">faceDal</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _faceDal = faceDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">PeopleService</span>:<span class=\"title\">BaseService</span>&lt;<span class=\"title\">People</span>&gt;,<span class=\"title\">IPeopleService</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IPeopleDal _peopleDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleService</span>(<span class=\"params\">IPeopleDal peopleDal</span>) : <span class=\"title\">base</span>(<span class=\"params\">peopleDal</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _peopleDal = peopleDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Dal层\"><a href=\"#Dal层\" class=\"headerlink\" title=\"Dal层\"></a>Dal层</h4><h5 id=\"IBaseDal-cs\"><a href=\"#IBaseDal-cs\" class=\"headerlink\" title=\"IBaseDal.cs\"></a>IBaseDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseDal&lt;T&gt; where T:class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"IDal-cs\"><a href=\"#IDal-cs\" class=\"headerlink\" title=\"IDal.cs\"></a>IDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUserDal</span> : <span class=\"title\">IBaseDal</span>&lt;<span class=\"title\">User</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IRoleDal</span> : <span class=\"title\">IBaseDal</span>&lt;<span class=\"title\">Role</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"BaseDal-cs\"><a href=\"#BaseDal-cs\" class=\"headerlink\" title=\"BaseDal.cs\"></a>BaseDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.EntityFrameworkCore;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class BaseDal&lt;T&gt; : IBaseDal&lt;T&gt; where T : class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">readonly</span> AlbumContext Db;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseDal</span>(<span class=\"params\">AlbumContext dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Db = dbContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Db.Set&lt;T&gt;().Add(entity);</span><br><span class=\"line\">            <span class=\"comment\">// Db.SaveChanges();</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Db.Entry&lt;T&gt;(entity).State = EntityState.Deleted;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// return Db.SaveChanges() &gt; 0;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Db.Entry&lt;T&gt;(entity).State = EntityState.Modified;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// return Db.SaveChanges() &gt; 0;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;s&quot;&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageIndex&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageSize&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;totalCount&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;orderbyLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;isAsc&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">            totalCount = temp.Count();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isAsc) <span class=\"comment\">//升序</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp = temp.OrderBy&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp = temp.OrderByDescending&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 一个业务中经常设计多张表操作,一次连接数据库完成所有数据的保存,提高性能,工作单元模式</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Dal-cs\"><a href=\"#Dal-cs\" class=\"headerlink\" title=\"Dal.cs\"></a>Dal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">UserDal</span> : <span class=\"title\">BaseDal</span>&lt;<span class=\"title\">User</span>&gt;, <span class=\"title\">IUserDal</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDal</span>(<span class=\"params\">AlbumContext dbContext</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">RoleDal</span> : <span class=\"title\">BaseDal</span>&lt;<span class=\"title\">Role</span>&gt;, <span class=\"title\">IRoleDal</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RoleDal</span>(<span class=\"params\">AlbumContext dbContext</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Model层\"><a href=\"#Model层\" class=\"headerlink\" title=\"Model层\"></a>Model层</h4><h5 id=\"AlbumContext-cs\"><a href=\"#AlbumContext-cs\" class=\"headerlink\" title=\"AlbumContext.cs\"></a>AlbumContext.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.EntityFrameworkCore;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Model</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumContext</span>:<span class=\"title\">DbContext</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumContext</span>(<span class=\"params\"></span>) : <span class=\"title\">base</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumContext</span>(<span class=\"params\">DbContextOptions options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;User&gt; Users &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Role&gt; Roles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Right&gt; Rights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;UserRole&gt; UserRoles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;UserRight&gt; UserRights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;RoleRight&gt; RoleRights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Face&gt; Faces &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Group&gt; Groups &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;People&gt; Peoples &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;PeopleGroup&gt; PeopleGroups &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h4><p>修改Stratup.cs下的ConfigureServices方法的代码</p>\n<h5 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">       <span class=\"comment\">//添加ef的依赖  </span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> connection = <span class=\"string\">&quot;server=.;uid=sa;pwd=123;database=AlbumDb&quot;</span>;</span><br><span class=\"line\">       services.AddDbContext&lt;AlbumContext&gt;(options =&gt; options.UseSqlServer(connection));</span><br><span class=\"line\">       services.AddScoped&lt;DbContext, AlbumContext&gt;();</span><br><span class=\"line\">       services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 依赖注入</span></span><br><span class=\"line\">       services.AddScoped&lt;IFaceDal, FaceDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleDal, PeopleDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IGroupDal, GroupDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleGroupDal, PeopleGroupDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IFaceService, FaceService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleService, PeopleService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IGroupService, GroupService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleGroupService, PeopleGroupService&gt;();</span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":9541,"excerpt":"<p>Asp.Net Core 出来也很长时间,研究了一段时间,并基于Asp.Net Core + EF Core搭建了一个MVC的三层结构,其中用到了依赖注入和控制反转</p>","more":"<h4 id=\"BLL层\"><a href=\"#BLL层\" class=\"headerlink\" title=\"BLL层\"></a>BLL层</h4><h5 id=\"IBaseService-cs\"><a href=\"#IBaseService-cs\" class=\"headerlink\" title=\"IBaseService.cs\"></a>IBaseService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseService&lt;T&gt; where T:class,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"IService-cs\"><a href=\"#IService-cs\" class=\"headerlink\" title=\"IService.cs\"></a>IService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IFaceService</span> : <span class=\"title\">IBaseService</span>&lt;<span class=\"title\">Face</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IPeopleService</span> : <span class=\"title\">IBaseService</span>&lt;<span class=\"title\">People</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"BaseService-cs\"><a href=\"#BaseService-cs\" class=\"headerlink\" title=\"BaseService.cs\"></a>BaseService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class BaseService&lt;T&gt; where T : class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IBaseDal&lt;T&gt; _baseDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\">IBaseDal&lt;T&gt; baseDal</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _baseDal = baseDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//查询</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.LoadEntities(whereLambda);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//分页岔村</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.LoadPageEntities&lt;s&gt;(pageIndex, pageSize, <span class=\"keyword\">out</span> totalCount, whereLambda, orderbyLambda, isAsc);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _baseDal.DeleteEntity(entity);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.SaveChanges();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _baseDal.EditEntity(entity);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.SaveChanges();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _baseDal.AddEntity(entity);</span><br><span class=\"line\">            _baseDal.SaveChanges();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Service-cs\"><a href=\"#Service-cs\" class=\"headerlink\" title=\"Service.cs\"></a>Service.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.BLL.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq.Expressions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">FaceService</span>:<span class=\"title\">BaseService</span>&lt;<span class=\"title\">Face</span>&gt;,<span class=\"title\">IFaceService</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IFaceDal _faceDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FaceService</span>(<span class=\"params\">IFaceDal faceDal</span>):<span class=\"title\">base</span>(<span class=\"params\">faceDal</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _faceDal = faceDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">PeopleService</span>:<span class=\"title\">BaseService</span>&lt;<span class=\"title\">People</span>&gt;,<span class=\"title\">IPeopleService</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IPeopleDal _peopleDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleService</span>(<span class=\"params\">IPeopleDal peopleDal</span>) : <span class=\"title\">base</span>(<span class=\"params\">peopleDal</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _peopleDal = peopleDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Dal层\"><a href=\"#Dal层\" class=\"headerlink\" title=\"Dal层\"></a>Dal层</h4><h5 id=\"IBaseDal-cs\"><a href=\"#IBaseDal-cs\" class=\"headerlink\" title=\"IBaseDal.cs\"></a>IBaseDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseDal&lt;T&gt; where T:class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"IDal-cs\"><a href=\"#IDal-cs\" class=\"headerlink\" title=\"IDal.cs\"></a>IDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUserDal</span> : <span class=\"title\">IBaseDal</span>&lt;<span class=\"title\">User</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IRoleDal</span> : <span class=\"title\">IBaseDal</span>&lt;<span class=\"title\">Role</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"BaseDal-cs\"><a href=\"#BaseDal-cs\" class=\"headerlink\" title=\"BaseDal.cs\"></a>BaseDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.EntityFrameworkCore;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class BaseDal&lt;T&gt; : IBaseDal&lt;T&gt; where T : class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">readonly</span> AlbumContext Db;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseDal</span>(<span class=\"params\">AlbumContext dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Db = dbContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Db.Set&lt;T&gt;().Add(entity);</span><br><span class=\"line\">            <span class=\"comment\">// Db.SaveChanges();</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Db.Entry&lt;T&gt;(entity).State = EntityState.Deleted;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// return Db.SaveChanges() &gt; 0;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Db.Entry&lt;T&gt;(entity).State = EntityState.Modified;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// return Db.SaveChanges() &gt; 0;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;s&quot;&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageIndex&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageSize&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;totalCount&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;orderbyLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;isAsc&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">            totalCount = temp.Count();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isAsc) <span class=\"comment\">//升序</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp = temp.OrderBy&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp = temp.OrderByDescending&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 一个业务中经常设计多张表操作,一次连接数据库完成所有数据的保存,提高性能,工作单元模式</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Dal-cs\"><a href=\"#Dal-cs\" class=\"headerlink\" title=\"Dal.cs\"></a>Dal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">UserDal</span> : <span class=\"title\">BaseDal</span>&lt;<span class=\"title\">User</span>&gt;, <span class=\"title\">IUserDal</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDal</span>(<span class=\"params\">AlbumContext dbContext</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">RoleDal</span> : <span class=\"title\">BaseDal</span>&lt;<span class=\"title\">Role</span>&gt;, <span class=\"title\">IRoleDal</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RoleDal</span>(<span class=\"params\">AlbumContext dbContext</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Model层\"><a href=\"#Model层\" class=\"headerlink\" title=\"Model层\"></a>Model层</h4><h5 id=\"AlbumContext-cs\"><a href=\"#AlbumContext-cs\" class=\"headerlink\" title=\"AlbumContext.cs\"></a>AlbumContext.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.EntityFrameworkCore;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Model</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumContext</span>:<span class=\"title\">DbContext</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumContext</span>(<span class=\"params\"></span>) : <span class=\"title\">base</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumContext</span>(<span class=\"params\">DbContextOptions options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;User&gt; Users &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Role&gt; Roles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Right&gt; Rights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;UserRole&gt; UserRoles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;UserRight&gt; UserRights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;RoleRight&gt; RoleRights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Face&gt; Faces &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Group&gt; Groups &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;People&gt; Peoples &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;PeopleGroup&gt; PeopleGroups &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h4><p>修改Stratup.cs下的ConfigureServices方法的代码</p>\n<h5 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">       <span class=\"comment\">//添加ef的依赖  </span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> connection = <span class=\"string\">&quot;server=.;uid=sa;pwd=123;database=AlbumDb&quot;</span>;</span><br><span class=\"line\">       services.AddDbContext&lt;AlbumContext&gt;(options =&gt; options.UseSqlServer(connection));</span><br><span class=\"line\">       services.AddScoped&lt;DbContext, AlbumContext&gt;();</span><br><span class=\"line\">       services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 依赖注入</span></span><br><span class=\"line\">       services.AddScoped&lt;IFaceDal, FaceDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleDal, PeopleDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IGroupDal, GroupDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleGroupDal, PeopleGroupDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IFaceService, FaceService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleService, PeopleService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IGroupService, GroupService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleGroupService, PeopleGroupService&gt;();</span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net Core Ocelot","date":"2018-03-29T10:15:26.000Z","_content":"Ocelot是一个用.Net Core实现并且开源的API网关,它功能强大,包括了：路由、请求聚合、服务发现、认证、鉴权、限流熔断，并内置了负载均衡器与Service Fabric、Butterfly Tracing集成。\n<!--more-->\n##### 安装Ocelot\n通过nuget安装Ocelot\n```cs\nInstall-Package Ocelot\n```\n\n##### 配置\nOcelot.json\n最基本的配置信息\n```cs\n{\n    \"ReRoutes\":[],\n    \"GlobalConfiguration\":{\n        \"BaseUrl\":\"https://chcaty.com\"\n    }\n}\n```\n\n将配置文件加入Asp.Net Core Configuration\n```cs\npublic static IWebHost BuildWebHost(string[] args) => WebHost.CreateDefaultBuilder(args).ConfigureAppConfiguration((hostingContext,builder) => {\n    builder.SetBasePath(hostingContext.HostingEnvironment.ContentRootPath).AddJsonFile(\"Ocelot.json\");\n}).UseStartUp<StartUp>().Build();\n```\n\n配置依赖注入和中间件\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddOcelot();\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if(env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    app.UseOcelot().Wait();\n}\n```\n","source":"_posts/Net-Core-Ocelot.md","raw":"---\ntitle: .Net Core Ocelot\ndate: 2018-03-29 18:15:26\ncategories: .Net Core\ntags:\n - .Net Core\n - Ocelot\n---\nOcelot是一个用.Net Core实现并且开源的API网关,它功能强大,包括了：路由、请求聚合、服务发现、认证、鉴权、限流熔断，并内置了负载均衡器与Service Fabric、Butterfly Tracing集成。\n<!--more-->\n##### 安装Ocelot\n通过nuget安装Ocelot\n```cs\nInstall-Package Ocelot\n```\n\n##### 配置\nOcelot.json\n最基本的配置信息\n```cs\n{\n    \"ReRoutes\":[],\n    \"GlobalConfiguration\":{\n        \"BaseUrl\":\"https://chcaty.com\"\n    }\n}\n```\n\n将配置文件加入Asp.Net Core Configuration\n```cs\npublic static IWebHost BuildWebHost(string[] args) => WebHost.CreateDefaultBuilder(args).ConfigureAppConfiguration((hostingContext,builder) => {\n    builder.SetBasePath(hostingContext.HostingEnvironment.ContentRootPath).AddJsonFile(\"Ocelot.json\");\n}).UseStartUp<StartUp>().Build();\n```\n\n配置依赖注入和中间件\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddOcelot();\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if(env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    app.UseOcelot().Wait();\n}\n```\n","slug":"Net-Core-Ocelot","published":1,"updated":"2021-03-30T03:24:16.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx00002jvcua7n86ht72","content":"<p>Ocelot是一个用.Net Core实现并且开源的API网关,它功能强大,包括了：路由、请求聚合、服务发现、认证、鉴权、限流熔断，并内置了负载均衡器与Service Fabric、Butterfly Tracing集成。</p>\n<span id=\"more\"></span>\n<h5 id=\"安装Ocelot\"><a href=\"#安装Ocelot\" class=\"headerlink\" title=\"安装Ocelot\"></a>安装Ocelot</h5><p>通过nuget安装Ocelot</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package Ocelot</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><p>Ocelot.json<br>最基本的配置信息</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ReRoutes&quot;</span>:[],</span><br><span class=\"line\">    <span class=\"string\">&quot;GlobalConfiguration&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;BaseUrl&quot;</span>:<span class=\"string\">&quot;https://chcaty.com&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将配置文件加入Asp.Net Core Configuration</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHost <span class=\"title\">BuildWebHost</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt; WebHost.CreateDefaultBuilder(args).ConfigureAppConfiguration((hostingContext,builder) =&gt; &#123;</span><br><span class=\"line\">    builder.SetBasePath(hostingContext.HostingEnvironment.ContentRootPath).AddJsonFile(<span class=\"string\">&quot;Ocelot.json&quot;</span>);</span><br><span class=\"line\">&#125;).UseStartUp&lt;StartUp&gt;().Build();</span><br></pre></td></tr></table></figure>\n\n<p>配置依赖注入和中间件</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddOcelot();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    app.UseOcelot().Wait();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":926,"excerpt":"<p>Ocelot是一个用.Net Core实现并且开源的API网关,它功能强大,包括了：路由、请求聚合、服务发现、认证、鉴权、限流熔断，并内置了负载均衡器与Service Fabric、Butterfly Tracing集成。</p>","more":"<h5 id=\"安装Ocelot\"><a href=\"#安装Ocelot\" class=\"headerlink\" title=\"安装Ocelot\"></a>安装Ocelot</h5><p>通过nuget安装Ocelot</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package Ocelot</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><p>Ocelot.json<br>最基本的配置信息</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ReRoutes&quot;</span>:[],</span><br><span class=\"line\">    <span class=\"string\">&quot;GlobalConfiguration&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;BaseUrl&quot;</span>:<span class=\"string\">&quot;https://chcaty.com&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将配置文件加入Asp.Net Core Configuration</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHost <span class=\"title\">BuildWebHost</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt; WebHost.CreateDefaultBuilder(args).ConfigureAppConfiguration((hostingContext,builder) =&gt; &#123;</span><br><span class=\"line\">    builder.SetBasePath(hostingContext.HostingEnvironment.ContentRootPath).AddJsonFile(<span class=\"string\">&quot;Ocelot.json&quot;</span>);</span><br><span class=\"line\">&#125;).UseStartUp&lt;StartUp&gt;().Build();</span><br></pre></td></tr></table></figure>\n\n<p>配置依赖注入和中间件</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddOcelot();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    app.UseOcelot().Wait();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net Core RSA/RSA2算法","date":"2018-03-08T10:24:12.000Z","_content":"RSA2是在原来SHA1WithRSA签名算法的基础上,新增了支持SHA256WithRSA的签名算法.该算法比该SHA1WithRSA有更强的安全能力.\n<!--more-->\n###### RSA加解密 使用OpenSSL的公钥加密/私钥解密\n```cs\npublic class RSAHelper\n{\n    private readonly RSA_privateKeyRsaProvider;\n    \n    private readonly RSA_publicKeyRsaProvider;\n\n    private readonly HashAlgorithmName_hashAlgorithmName;\n\n    private readonly Encoding _encoding;\n\n    /// <summary>\n    /// 实例化RSAHelper\n    /// </summary>\n    /// <param name=\"rsaType\">加密算法类型RSA SHA1;RSA2 SHA256 密钥长度至少为2048</param>\n    /// <param name=\"encoding\">编码类型</param>\n    /// <param name=\"privateKey\">私钥</param>\n    /// <param name=\"publicKey\">公钥</param>\n    public RSAHelper(RSAType rsaType,Encoding encoding,string privateKey,string publicKey = null)\n    {\n        _encoding = encoding;\n        if(!string.IsNullOrEmpty(privateKey))\n        {\n            _privateKeyRsaProvider = CreateRsaProviderFromPrivateKey(privateKey);\n        }\n        if(!string.IsNullOrEmpty(publicKey))\n        {\n            _publicKeyRsaProvider = CreateRsaProviderFromPublicKey(publicKey);\n        }\n\n        _hashAlgorithName = rsaType == RSAType.RSA?HashAlgorithmName.SHA1:HashAlgorithName.SHA256;\n    }\n\n    /// <summary>\n    /// 使用私钥签名\n    /// </summary>\n    /// <param name=\"data\">原始数据</param>\n    /// <returns></returns>\n    public string Sign(string data)\n    {\n        byte[] dataBytes = _encoding.GetBytes(data);\n\n        var signatureBytes = _privateKeyRsaProvider.SignData(dataBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);\n        return Convert.ToBase64String(signatureBytes);\n    }\n\n    /// <summary>\n    /// 使用公钥签名\n    /// </summary>\n    /// <param name=\"data\">原始数据</param>\n    /// <param name=\"sign\">签名</param>\n    /// <returns></returns>\n    public bool Verify(stringt data,string sign)\n    {\n        byte[] dataBytes = _encoding.GetBytes(data);\n\n        byte[] signBytes = Convert.FromBase64String(sign);\n        var verify = _publicKeyRsaProvider.VerifyData(dataBytes,signBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);\n        return varify;\n    }\n\n    // 解密\n    public string Decrypt(string cipherText)\n    {\n        if(_privateKeyRsaProvider == null)\n        {\n            throw new Exception(\"_privateKeyRsaProvider is null\");\n        }\n        return Encoding.UTF8.GetString(_privateKeyRsaProvider.Decrypt(Convert.FromBase64String(cipherText), RSAEncryptionPadding.Pkcs1));\n    }\n\n    // 加密\n    public string Encrypt(string text)\n    {\n        if(_publicKeyRsaProvider == null)\n        {\n            throw new Exception(\"_publicKeyRsaProvider is null\");\n        }\n        return Convert.ToBase64String(_publicKeyRsaProvider.Encrypt(Encoding.UTF8.GetBytes(text), RSAEncryptionPadding.Pkcs1));\n    }\n\n    // 使用私钥创建RSA实例    \n    public RSA CreateRsaProviderFromPrivateKey(string privateKey)    {        \n        var privateKeyBits = Convert.FromBase64String(privateKey);\n        var rsa = RSA.Create();      \n        var rsaParameters = new RSAParameters();  \n        using (BinaryReader binr = new BinaryReader(new MemoryStream(privateKeyBits)))        \n        {            \n            byte bt = 0;       \n            ushort twobytes = 0;            \n            twobytes = binr.ReadUInt16();      \n            if (twobytes == 0x8130)             \n            {   \n                binr.ReadByte();\n            }      \n            else if (twobytes == 0x8230)   \n            {             \n                binr.ReadInt16();\n            }        \n            else            \n            {    \n                throw new Exception(\"Unexpected value read binr.ReadUInt16()\"); \n            }           \n            twobytes = binr.ReadUInt16();      \n            \n            if (twobytes != 0x0102)      \n            {\n                throw new Exception(\"Unexpected version\");\n            }            \n            bt = binr.ReadByte();        \n\n            if (bt != 0x00)  \n            {\n                throw new Exception(\"Unexpected value read binr.ReadByte()\");\n            }            \n            rsaParameters.Modulus = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.Exponent = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.D = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.P = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.Q = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.DP = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.DQ = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.InverseQ = binr.ReadBytes(GetIntegerSize(binr));        \n        }        \n        rsa.ImportParameters(rsaParameters);    \n        return rsa;    \n    }\n        \n    // 使用公钥创建RSA实例    \n    public RSA CreateRsaProviderFromPublicKey(string publicKeyString)   \n    {        \n        // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = \"1.2.840.113549.1.1.1\"        \n        byte[] seqOid = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };    \n\n        byte[] seq = new byte[15];      \n\n        var x509Key = Convert.FromBase64String(publicKeyString);        \n        // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------        \n        using (MemoryStream mem = new MemoryStream(x509Key))        \n        {            \n            using (BinaryReader binr = new BinaryReader(mem))  //wrap Memory Stream with BinaryReader for easy reading            \n            {                \n                byte bt = 0;                \n                ushort twobytes = 0;                \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)                    \n                {\n                    binr.ReadByte();\n                }    \n                //advance 1 byte                \n                else if (twobytes == 0x8230)             \n                {       \n                    binr.ReadInt16(); \n                }  \n                //advance 2 bytes                \n                else     \n                {               \n                    return null;\n                }                \n                seq = binr.ReadBytes(15);       \n                //read the Sequence OID                \n                if (!CompareBytearrays(seq, seqOid))   \n                { \n                    //make sure Sequence for OID is correct                    \n                    return null;  \n                }              \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8103) \n                {\n                    //data read as little endian order (actual data order for Bit String is 03 81)                    \n                    binr.ReadByte();\n                }    \n                //advance 1 byte                \n                else if (twobytes == 0x8203)                 \n                {   \n                    binr.ReadInt16();  \n                } \n                //advance 2 bytes                \n                else                \n                {    \n                    return null;  \n                }              \n                bt = binr.ReadByte();                \n                if (bt != 0x00)     \n                //expect null byte next                \n                {    \n                    return null;   \n                }             \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8130) \n                //data read as little endian order (actual data order for Sequence is 30 81)                  \n                {  \n                    binr.ReadByte();   \n                } \n                //advance 1 byte                \n                else if (twobytes == 0x8230)                    \n                {\n                    binr.ReadInt16();  \n                }\n                //advance 2 bytes                \n                else                   \n                { \n                    return null;\n                }                \n                twobytes = binr.ReadUInt16();        \n                byte lowbyte = 0x00;            \n                byte highbyte = 0x00;        \n                \n                if (twobytes == 0x8102) \n                //data read as little endian order (actual data order for Integer is 02 81)                    \n                {\n                    lowbyte = binr.ReadByte(); \n                } \n                // read next bytes which is bytes in modulus                \n                else if (twobytes == 0x8202)                \n                {                    \n                    highbyte = binr.ReadByte(); //advance 2 bytes                    \n                    lowbyte = binr.ReadByte();                \n                }                \n                else\n                {                    \n                    return null;\n                }          \n\n                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   \n                //reverse byte order since asn.1 key uses big endian order                \n                int modsize = BitConverter.ToInt32(modint, 0);                \n                int firstbyte = binr.PeekChar();            \n\n                if (firstbyte == 0x00)                \n                {   \n                    //if first byte (highest order) of modulus is zero, don't include it                    \n                    binr.ReadByte();    \n                    //skip this null byte                    \n                    modsize -= 1;   \n                    //reduce modulus buffer size by 1                }                \n                    byte[] modulus = binr.ReadBytes(modsize);   \n                    //read the modulus bytes                \n                    if (binr.ReadByte() != 0x02)          \n                    //expect an Integer for the exponent data           \n                    {         \n                        return null;\n                    }              \n\n                    int expbytes = (int)binr.ReadByte();    \n\n                    // should only need one byte for actual exponent data (for all useful values)                \n                    byte[] exponent = binr.ReadBytes(expbytes);                \n                    // ------- create RSACryptoServiceProvider instance and initialize with public key -----                \n                    var rsa = RSA.Create();                \n                    RSAParameters rsaKeyInfo = new RSAParameters                \n                    {                    \n                        Modulus = modulus,                    \n                        Exponent = exponent                \n                    };                \n                    rsa.ImportParameters(rsaKeyInfo);        \n                    return rsa;            \n                }        \n            }    \n        } \n           \n        // 导入密钥算法    \n        private int GetIntegerSize(BinaryReader binr)    \n        {      \n            byte bt = 0;        \n            int count = 0;        \n            bt = binr.ReadByte();    \n\n            if (bt != 0x02)          \n            {\n                return 0; \n            }       \n            bt = binr.ReadByte();      \n            if (bt == 0x81)            \n            {\n                count = binr.ReadByte();\n            }  \n            else if (bt == 0x82)        \n            {\n                var highbyte = binr.ReadByte();\n                var lowbyte = binr.ReadByte();\n                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };            \n                count = BitConverter.ToInt32(modint, 0);        \n            }\n            else        \n            {            \n                count = bt;        \n            }\n            while (binr.ReadByte() == 0x00)        \n            {            \n                count -= 1;        \n            }        \n            binr.BaseStream.Seek(-1, SeekOrigin.Current);  \n            return count;    \n        }  \n        \n        private bool CompareBytearrays(byte[] a, byte[] b)    \n        { \n            if (a.Length != b.Length)      \n            {\n                return false;    \n            }\n            int i = 0;    \n\n            foreach (byte c in a)        \n            {\n                if (c != b[i])\n                {\n                    return false; \n                }           \n                i++;        \n            }        \n            return true;    \n        } \n    }\n\n    /// <summary>\n    /// RSA算法类型\n    /// </summary>\n    public enum RSAType \n    {  \n        /// <summary>    \n        /// SHA1    \n        /// </summary>    \n        RSA = 0,\n            \n        /// <summary>    \n        /// RSA2 密钥长度至少为2048    \n        /// SHA256    \n        /// </summary>    \n        RSA2 \n    }\n}\n```\n\n###### 使用\n```cs\nstatic void Main(string[] args)\n{    \n    //2048 公钥    \n    string publicKey = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQAB\";    \n    \n    //2048 私钥    \n    string privateKey = \"MIIEpAIBAAKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQABAoIBAQCRZLUlOUvjIVqYvhznRK1OG6p45s8JY1r+UnPIId2Bt46oSLeUkZvZVeCnfq9k0Bzb8AVGwVPhtPEDh73z3dEYcT/lwjLXAkyPB6gG5ZfI/vvC/k7JYV01+neFmktw2/FIJWjEMMF2dvLNZ/Pm4bX1Dz9SfD/45Hwr8wqrvRzvFZsj5qqOxv9RPAudOYwCwZskKp/GF+L+3Ycod1Wu98imzMZUH+L5dQuDGg3kvf3ljIAegTPoqYBg0imNPYY/EGoFKnbxlK5S5/5uAFb16dGJqAz3XQCz9Is/IWrOTu0etteqV2Ncs8uqPdjed+b0j8CMsr4U1xjwPQ8WwdaJtTkRAoGBANAndgiGZkCVcc9975/AYdgFp35W6D+hGQAZlL6DmnucUFdXbWa/x2rTSEXlkvgk9X/PxOptUYsLJkzysTgfDywZwuIXLm9B3oNmv3bVgPXsgDsvDfaHYCgz0nHK6NSrX2AeX3yO/dFuoZsuk+J+UyRigMqYj0wjmxUlqj183hinAoGBAMYMOBgF77OXRII7GAuEut/nBeh2sBrgyzR7FmJMs5kvRh6Ck8wp3ysgMvX4lxh1ep8iCw1R2cguqNATr1klOdsCTOE9RrhuvOp3JrYzuIAK6MpH/uBICy4w1rW2+gQySsHcH40r+tNaTFQ7dQ1tef//iy/IW8v8i0t+csztE1JnAoGABdtWYt8FOYP688+jUmdjWWSvVcq0NjYeMfaGTOX/DsNTL2HyXhW/Uq4nNnBDNmAz2CjMbZwt0y+5ICkj+2REVQVUinAEinTcAe5+LKXNPx4sbX3hcrJUbk0m+rSu4G0B/f5cyXBsi9wFCAzDdHgBduCepxSr04Sc9Hde1uQQi7kCgYB0U20HP0Vh+TG2RLuE2HtjVDD2L/CUeQEiXEHzjxXWnhvTg+MIAnggvpLwQwmMxkQ2ACr5sd/3YuCpB0bxV5o594nsqq9FWVYBaecFEjAGlWHSnqMoXWijwu/6X/VOTbP3VjH6G6ECT4GR4DKKpokIQrMgZ9DzaezvdOA9WesFdQKBgQCWfeOQTitRJ0NZACFUn3Fs3Rvgc9eN9YSWj4RtqkmGPMPvguWo+SKhlk3IbYjrRBc5WVOdoX8JXb2/+nAGhPCuUZckWVmZe5pMSr4EkNQdYeY8kOXGSjoTOUH34ZdKeS+e399BkBWIiXUejX/Srln0H4KoHnTWgxwNpTsBCgXu8Q==\";    \n    var rsa = new RSAHelper(RSAType.RSA2,Encoding.UTF8, privateKey, publicKey);    \n    string str = \"博客园 http://www.cnblogs.com/\";   \n    Console.WriteLine(\"原始字符串：\"+str);    \n    \n    //加密    \n    string enStr = rsa.Encrypt(str);    \n    Console.WriteLine(\"加密字符串：\"+enStr);    \n    \n    //解密    \n    string deStr = rsa.Decrypt(enStr);    \n    Console.WriteLine(\"解密字符串：\"+deStr);    \n    \n    //私钥签名    \n    string signStr = rsa.Sign(str);    \n    Console.WriteLine(\"字符串签名：\" + signStr);    \n    \n    //公钥验证签名    \n    bool signVerify = rsa.Verify(str,signStr);    \n    Console.WriteLine(\"验证签名：\" + signVerify);    \n    Console.ReadKey(); \n}\n```","source":"_posts/Net-Core-RSA-RSA2算法.md","raw":"---\ntitle: .Net Core RSA/RSA2算法\ndate: 2018-03-08 18:24:12\ncategories: .Net Core\ntags:\n - .Net Core\n - RSA算法\n---\nRSA2是在原来SHA1WithRSA签名算法的基础上,新增了支持SHA256WithRSA的签名算法.该算法比该SHA1WithRSA有更强的安全能力.\n<!--more-->\n###### RSA加解密 使用OpenSSL的公钥加密/私钥解密\n```cs\npublic class RSAHelper\n{\n    private readonly RSA_privateKeyRsaProvider;\n    \n    private readonly RSA_publicKeyRsaProvider;\n\n    private readonly HashAlgorithmName_hashAlgorithmName;\n\n    private readonly Encoding _encoding;\n\n    /// <summary>\n    /// 实例化RSAHelper\n    /// </summary>\n    /// <param name=\"rsaType\">加密算法类型RSA SHA1;RSA2 SHA256 密钥长度至少为2048</param>\n    /// <param name=\"encoding\">编码类型</param>\n    /// <param name=\"privateKey\">私钥</param>\n    /// <param name=\"publicKey\">公钥</param>\n    public RSAHelper(RSAType rsaType,Encoding encoding,string privateKey,string publicKey = null)\n    {\n        _encoding = encoding;\n        if(!string.IsNullOrEmpty(privateKey))\n        {\n            _privateKeyRsaProvider = CreateRsaProviderFromPrivateKey(privateKey);\n        }\n        if(!string.IsNullOrEmpty(publicKey))\n        {\n            _publicKeyRsaProvider = CreateRsaProviderFromPublicKey(publicKey);\n        }\n\n        _hashAlgorithName = rsaType == RSAType.RSA?HashAlgorithmName.SHA1:HashAlgorithName.SHA256;\n    }\n\n    /// <summary>\n    /// 使用私钥签名\n    /// </summary>\n    /// <param name=\"data\">原始数据</param>\n    /// <returns></returns>\n    public string Sign(string data)\n    {\n        byte[] dataBytes = _encoding.GetBytes(data);\n\n        var signatureBytes = _privateKeyRsaProvider.SignData(dataBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);\n        return Convert.ToBase64String(signatureBytes);\n    }\n\n    /// <summary>\n    /// 使用公钥签名\n    /// </summary>\n    /// <param name=\"data\">原始数据</param>\n    /// <param name=\"sign\">签名</param>\n    /// <returns></returns>\n    public bool Verify(stringt data,string sign)\n    {\n        byte[] dataBytes = _encoding.GetBytes(data);\n\n        byte[] signBytes = Convert.FromBase64String(sign);\n        var verify = _publicKeyRsaProvider.VerifyData(dataBytes,signBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);\n        return varify;\n    }\n\n    // 解密\n    public string Decrypt(string cipherText)\n    {\n        if(_privateKeyRsaProvider == null)\n        {\n            throw new Exception(\"_privateKeyRsaProvider is null\");\n        }\n        return Encoding.UTF8.GetString(_privateKeyRsaProvider.Decrypt(Convert.FromBase64String(cipherText), RSAEncryptionPadding.Pkcs1));\n    }\n\n    // 加密\n    public string Encrypt(string text)\n    {\n        if(_publicKeyRsaProvider == null)\n        {\n            throw new Exception(\"_publicKeyRsaProvider is null\");\n        }\n        return Convert.ToBase64String(_publicKeyRsaProvider.Encrypt(Encoding.UTF8.GetBytes(text), RSAEncryptionPadding.Pkcs1));\n    }\n\n    // 使用私钥创建RSA实例    \n    public RSA CreateRsaProviderFromPrivateKey(string privateKey)    {        \n        var privateKeyBits = Convert.FromBase64String(privateKey);\n        var rsa = RSA.Create();      \n        var rsaParameters = new RSAParameters();  \n        using (BinaryReader binr = new BinaryReader(new MemoryStream(privateKeyBits)))        \n        {            \n            byte bt = 0;       \n            ushort twobytes = 0;            \n            twobytes = binr.ReadUInt16();      \n            if (twobytes == 0x8130)             \n            {   \n                binr.ReadByte();\n            }      \n            else if (twobytes == 0x8230)   \n            {             \n                binr.ReadInt16();\n            }        \n            else            \n            {    \n                throw new Exception(\"Unexpected value read binr.ReadUInt16()\"); \n            }           \n            twobytes = binr.ReadUInt16();      \n            \n            if (twobytes != 0x0102)      \n            {\n                throw new Exception(\"Unexpected version\");\n            }            \n            bt = binr.ReadByte();        \n\n            if (bt != 0x00)  \n            {\n                throw new Exception(\"Unexpected value read binr.ReadByte()\");\n            }            \n            rsaParameters.Modulus = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.Exponent = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.D = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.P = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.Q = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.DP = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.DQ = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.InverseQ = binr.ReadBytes(GetIntegerSize(binr));        \n        }        \n        rsa.ImportParameters(rsaParameters);    \n        return rsa;    \n    }\n        \n    // 使用公钥创建RSA实例    \n    public RSA CreateRsaProviderFromPublicKey(string publicKeyString)   \n    {        \n        // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = \"1.2.840.113549.1.1.1\"        \n        byte[] seqOid = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };    \n\n        byte[] seq = new byte[15];      \n\n        var x509Key = Convert.FromBase64String(publicKeyString);        \n        // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------        \n        using (MemoryStream mem = new MemoryStream(x509Key))        \n        {            \n            using (BinaryReader binr = new BinaryReader(mem))  //wrap Memory Stream with BinaryReader for easy reading            \n            {                \n                byte bt = 0;                \n                ushort twobytes = 0;                \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)                    \n                {\n                    binr.ReadByte();\n                }    \n                //advance 1 byte                \n                else if (twobytes == 0x8230)             \n                {       \n                    binr.ReadInt16(); \n                }  \n                //advance 2 bytes                \n                else     \n                {               \n                    return null;\n                }                \n                seq = binr.ReadBytes(15);       \n                //read the Sequence OID                \n                if (!CompareBytearrays(seq, seqOid))   \n                { \n                    //make sure Sequence for OID is correct                    \n                    return null;  \n                }              \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8103) \n                {\n                    //data read as little endian order (actual data order for Bit String is 03 81)                    \n                    binr.ReadByte();\n                }    \n                //advance 1 byte                \n                else if (twobytes == 0x8203)                 \n                {   \n                    binr.ReadInt16();  \n                } \n                //advance 2 bytes                \n                else                \n                {    \n                    return null;  \n                }              \n                bt = binr.ReadByte();                \n                if (bt != 0x00)     \n                //expect null byte next                \n                {    \n                    return null;   \n                }             \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8130) \n                //data read as little endian order (actual data order for Sequence is 30 81)                  \n                {  \n                    binr.ReadByte();   \n                } \n                //advance 1 byte                \n                else if (twobytes == 0x8230)                    \n                {\n                    binr.ReadInt16();  \n                }\n                //advance 2 bytes                \n                else                   \n                { \n                    return null;\n                }                \n                twobytes = binr.ReadUInt16();        \n                byte lowbyte = 0x00;            \n                byte highbyte = 0x00;        \n                \n                if (twobytes == 0x8102) \n                //data read as little endian order (actual data order for Integer is 02 81)                    \n                {\n                    lowbyte = binr.ReadByte(); \n                } \n                // read next bytes which is bytes in modulus                \n                else if (twobytes == 0x8202)                \n                {                    \n                    highbyte = binr.ReadByte(); //advance 2 bytes                    \n                    lowbyte = binr.ReadByte();                \n                }                \n                else\n                {                    \n                    return null;\n                }          \n\n                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   \n                //reverse byte order since asn.1 key uses big endian order                \n                int modsize = BitConverter.ToInt32(modint, 0);                \n                int firstbyte = binr.PeekChar();            \n\n                if (firstbyte == 0x00)                \n                {   \n                    //if first byte (highest order) of modulus is zero, don't include it                    \n                    binr.ReadByte();    \n                    //skip this null byte                    \n                    modsize -= 1;   \n                    //reduce modulus buffer size by 1                }                \n                    byte[] modulus = binr.ReadBytes(modsize);   \n                    //read the modulus bytes                \n                    if (binr.ReadByte() != 0x02)          \n                    //expect an Integer for the exponent data           \n                    {         \n                        return null;\n                    }              \n\n                    int expbytes = (int)binr.ReadByte();    \n\n                    // should only need one byte for actual exponent data (for all useful values)                \n                    byte[] exponent = binr.ReadBytes(expbytes);                \n                    // ------- create RSACryptoServiceProvider instance and initialize with public key -----                \n                    var rsa = RSA.Create();                \n                    RSAParameters rsaKeyInfo = new RSAParameters                \n                    {                    \n                        Modulus = modulus,                    \n                        Exponent = exponent                \n                    };                \n                    rsa.ImportParameters(rsaKeyInfo);        \n                    return rsa;            \n                }        \n            }    \n        } \n           \n        // 导入密钥算法    \n        private int GetIntegerSize(BinaryReader binr)    \n        {      \n            byte bt = 0;        \n            int count = 0;        \n            bt = binr.ReadByte();    \n\n            if (bt != 0x02)          \n            {\n                return 0; \n            }       \n            bt = binr.ReadByte();      \n            if (bt == 0x81)            \n            {\n                count = binr.ReadByte();\n            }  \n            else if (bt == 0x82)        \n            {\n                var highbyte = binr.ReadByte();\n                var lowbyte = binr.ReadByte();\n                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };            \n                count = BitConverter.ToInt32(modint, 0);        \n            }\n            else        \n            {            \n                count = bt;        \n            }\n            while (binr.ReadByte() == 0x00)        \n            {            \n                count -= 1;        \n            }        \n            binr.BaseStream.Seek(-1, SeekOrigin.Current);  \n            return count;    \n        }  \n        \n        private bool CompareBytearrays(byte[] a, byte[] b)    \n        { \n            if (a.Length != b.Length)      \n            {\n                return false;    \n            }\n            int i = 0;    \n\n            foreach (byte c in a)        \n            {\n                if (c != b[i])\n                {\n                    return false; \n                }           \n                i++;        \n            }        \n            return true;    \n        } \n    }\n\n    /// <summary>\n    /// RSA算法类型\n    /// </summary>\n    public enum RSAType \n    {  \n        /// <summary>    \n        /// SHA1    \n        /// </summary>    \n        RSA = 0,\n            \n        /// <summary>    \n        /// RSA2 密钥长度至少为2048    \n        /// SHA256    \n        /// </summary>    \n        RSA2 \n    }\n}\n```\n\n###### 使用\n```cs\nstatic void Main(string[] args)\n{    \n    //2048 公钥    \n    string publicKey = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQAB\";    \n    \n    //2048 私钥    \n    string privateKey = \"MIIEpAIBAAKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQABAoIBAQCRZLUlOUvjIVqYvhznRK1OG6p45s8JY1r+UnPIId2Bt46oSLeUkZvZVeCnfq9k0Bzb8AVGwVPhtPEDh73z3dEYcT/lwjLXAkyPB6gG5ZfI/vvC/k7JYV01+neFmktw2/FIJWjEMMF2dvLNZ/Pm4bX1Dz9SfD/45Hwr8wqrvRzvFZsj5qqOxv9RPAudOYwCwZskKp/GF+L+3Ycod1Wu98imzMZUH+L5dQuDGg3kvf3ljIAegTPoqYBg0imNPYY/EGoFKnbxlK5S5/5uAFb16dGJqAz3XQCz9Is/IWrOTu0etteqV2Ncs8uqPdjed+b0j8CMsr4U1xjwPQ8WwdaJtTkRAoGBANAndgiGZkCVcc9975/AYdgFp35W6D+hGQAZlL6DmnucUFdXbWa/x2rTSEXlkvgk9X/PxOptUYsLJkzysTgfDywZwuIXLm9B3oNmv3bVgPXsgDsvDfaHYCgz0nHK6NSrX2AeX3yO/dFuoZsuk+J+UyRigMqYj0wjmxUlqj183hinAoGBAMYMOBgF77OXRII7GAuEut/nBeh2sBrgyzR7FmJMs5kvRh6Ck8wp3ysgMvX4lxh1ep8iCw1R2cguqNATr1klOdsCTOE9RrhuvOp3JrYzuIAK6MpH/uBICy4w1rW2+gQySsHcH40r+tNaTFQ7dQ1tef//iy/IW8v8i0t+csztE1JnAoGABdtWYt8FOYP688+jUmdjWWSvVcq0NjYeMfaGTOX/DsNTL2HyXhW/Uq4nNnBDNmAz2CjMbZwt0y+5ICkj+2REVQVUinAEinTcAe5+LKXNPx4sbX3hcrJUbk0m+rSu4G0B/f5cyXBsi9wFCAzDdHgBduCepxSr04Sc9Hde1uQQi7kCgYB0U20HP0Vh+TG2RLuE2HtjVDD2L/CUeQEiXEHzjxXWnhvTg+MIAnggvpLwQwmMxkQ2ACr5sd/3YuCpB0bxV5o594nsqq9FWVYBaecFEjAGlWHSnqMoXWijwu/6X/VOTbP3VjH6G6ECT4GR4DKKpokIQrMgZ9DzaezvdOA9WesFdQKBgQCWfeOQTitRJ0NZACFUn3Fs3Rvgc9eN9YSWj4RtqkmGPMPvguWo+SKhlk3IbYjrRBc5WVOdoX8JXb2/+nAGhPCuUZckWVmZe5pMSr4EkNQdYeY8kOXGSjoTOUH34ZdKeS+e399BkBWIiXUejX/Srln0H4KoHnTWgxwNpTsBCgXu8Q==\";    \n    var rsa = new RSAHelper(RSAType.RSA2,Encoding.UTF8, privateKey, publicKey);    \n    string str = \"博客园 http://www.cnblogs.com/\";   \n    Console.WriteLine(\"原始字符串：\"+str);    \n    \n    //加密    \n    string enStr = rsa.Encrypt(str);    \n    Console.WriteLine(\"加密字符串：\"+enStr);    \n    \n    //解密    \n    string deStr = rsa.Decrypt(enStr);    \n    Console.WriteLine(\"解密字符串：\"+deStr);    \n    \n    //私钥签名    \n    string signStr = rsa.Sign(str);    \n    Console.WriteLine(\"字符串签名：\" + signStr);    \n    \n    //公钥验证签名    \n    bool signVerify = rsa.Verify(str,signStr);    \n    Console.WriteLine(\"验证签名：\" + signVerify);    \n    Console.ReadKey(); \n}\n```","slug":"Net-Core-RSA-RSA2算法","published":1,"updated":"2021-03-30T03:24:16.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx01002mvcuadvk38r17","content":"<p>RSA2是在原来SHA1WithRSA签名算法的基础上,新增了支持SHA256WithRSA的签名算法.该算法比该SHA1WithRSA有更强的安全能力.</p>\n<span id=\"more\"></span>\n<h6 id=\"RSA加解密-使用OpenSSL的公钥加密-私钥解密\"><a href=\"#RSA加解密-使用OpenSSL的公钥加密-私钥解密\" class=\"headerlink\" title=\"RSA加解密 使用OpenSSL的公钥加密/私钥解密\"></a>RSA加解密 使用OpenSSL的公钥加密/私钥解密</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">RSAHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RSA_privateKeyRsaProvider;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RSA_publicKeyRsaProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> HashAlgorithmName_hashAlgorithmName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Encoding _encoding;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 实例化RSAHelper</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;rsaType&quot;&gt;</span>加密算法类型RSA SHA1;RSA2 SHA256 密钥长度至少为2048<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;encoding&quot;&gt;</span>编码类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;privateKey&quot;&gt;</span>私钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;publicKey&quot;&gt;</span>公钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RSAHelper</span>(<span class=\"params\">RSAType rsaType,Encoding encoding,<span class=\"built_in\">string</span> privateKey,<span class=\"built_in\">string</span> publicKey = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _encoding = encoding;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">string</span>.IsNullOrEmpty(privateKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _privateKeyRsaProvider = CreateRsaProviderFromPrivateKey(privateKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">string</span>.IsNullOrEmpty(publicKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _publicKeyRsaProvider = CreateRsaProviderFromPublicKey(publicKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        _hashAlgorithName = rsaType == RSAType.RSA?HashAlgorithmName.SHA1:HashAlgorithName.SHA256;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 使用私钥签名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;data&quot;&gt;</span>原始数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Sign</span>(<span class=\"params\"><span class=\"built_in\">string</span> data</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] dataBytes = _encoding.GetBytes(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> signatureBytes = _privateKeyRsaProvider.SignData(dataBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToBase64String(signatureBytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 使用公钥签名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;data&quot;&gt;</span>原始数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;sign&quot;&gt;</span>签名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Verify</span>(<span class=\"params\">stringt data,<span class=\"built_in\">string</span> sign</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] dataBytes = _encoding.GetBytes(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] signBytes = Convert.FromBase64String(sign);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> verify = _publicKeyRsaProvider.VerifyData(dataBytes,signBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> varify;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解密</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Decrypt</span>(<span class=\"params\"><span class=\"built_in\">string</span> cipherText</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_privateKeyRsaProvider == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;_privateKeyRsaProvider is null&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Encoding.UTF8.GetString(_privateKeyRsaProvider.Decrypt(Convert.FromBase64String(cipherText), RSAEncryptionPadding.Pkcs1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加密</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Encrypt</span>(<span class=\"params\"><span class=\"built_in\">string</span> text</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_publicKeyRsaProvider == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;_publicKeyRsaProvider is null&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToBase64String(_publicKeyRsaProvider.Encrypt(Encoding.UTF8.GetBytes(text), RSAEncryptionPadding.Pkcs1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用私钥创建RSA实例    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RSA <span class=\"title\">CreateRsaProviderFromPrivateKey</span>(<span class=\"params\"><span class=\"built_in\">string</span> privateKey</span>)</span>    &#123;        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> privateKeyBits = Convert.FromBase64String(privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rsa = RSA.Create();      </span><br><span class=\"line\">        <span class=\"keyword\">var</span> rsaParameters = <span class=\"keyword\">new</span> RSAParameters();  </span><br><span class=\"line\">        <span class=\"keyword\">using</span> (BinaryReader binr = <span class=\"keyword\">new</span> BinaryReader(<span class=\"keyword\">new</span> MemoryStream(privateKeyBits)))        </span><br><span class=\"line\">        &#123;            </span><br><span class=\"line\">            <span class=\"built_in\">byte</span> bt = <span class=\"number\">0</span>;       </span><br><span class=\"line\">            <span class=\"built_in\">ushort</span> twobytes = <span class=\"number\">0</span>;            </span><br><span class=\"line\">            twobytes = binr.ReadUInt16();      </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>)             </span><br><span class=\"line\">            &#123;   </span><br><span class=\"line\">                binr.ReadByte();</span><br><span class=\"line\">            &#125;      </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)   </span><br><span class=\"line\">            &#123;             </span><br><span class=\"line\">                binr.ReadInt16();</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            <span class=\"keyword\">else</span>            </span><br><span class=\"line\">            &#123;    </span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Unexpected value read binr.ReadUInt16()&quot;</span>); </span><br><span class=\"line\">            &#125;           </span><br><span class=\"line\">            twobytes = binr.ReadUInt16();      </span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (twobytes != <span class=\"number\">0x0102</span>)      </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Unexpected version&quot;</span>);</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            bt = binr.ReadByte();        </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x00</span>)  </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Unexpected value read binr.ReadByte()&quot;</span>);</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            rsaParameters.Modulus = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.Exponent = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.D = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.P = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.Q = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.DP = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.DQ = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.InverseQ = binr.ReadBytes(GetIntegerSize(binr));        </span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">        rsa.ImportParameters(rsaParameters);    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> rsa;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 使用公钥创建RSA实例    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RSA <span class=\"title\">CreateRsaProviderFromPublicKey</span>(<span class=\"params\"><span class=\"built_in\">string</span> publicKeyString</span>)   </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;        </span><br><span class=\"line\">        <span class=\"comment\">// encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = &quot;1.2.840.113549.1.1.1&quot;        </span></span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] seqOid = &#123; <span class=\"number\">0x30</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x06</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x2A</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0xF7</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0x00</span> &#125;;    </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] seq = <span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">15</span>];      </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> x509Key = Convert.FromBase64String(publicKeyString);        </span><br><span class=\"line\">        <span class=\"comment\">// ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------        </span></span><br><span class=\"line\">        <span class=\"keyword\">using</span> (MemoryStream mem = <span class=\"keyword\">new</span> MemoryStream(x509Key))        </span><br><span class=\"line\">        &#123;            </span><br><span class=\"line\">            <span class=\"keyword\">using</span> (BinaryReader binr = <span class=\"keyword\">new</span> BinaryReader(mem))  <span class=\"comment\">//wrap Memory Stream with BinaryReader for easy reading            </span></span><br><span class=\"line\">            &#123;                </span><br><span class=\"line\">                <span class=\"built_in\">byte</span> bt = <span class=\"number\">0</span>;                </span><br><span class=\"line\">                <span class=\"built_in\">ushort</span> twobytes = <span class=\"number\">0</span>;                </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>) <span class=\"comment\">//data read as little endian order (actual data order for Sequence is 30 81)                    </span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    binr.ReadByte();</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)             </span><br><span class=\"line\">                &#123;       </span><br><span class=\"line\">                    binr.ReadInt16(); </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>     </span><br><span class=\"line\">                &#123;               </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                seq = binr.ReadBytes(<span class=\"number\">15</span>);       </span><br><span class=\"line\">                <span class=\"comment\">//read the Sequence OID                </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!CompareBytearrays(seq, seqOid))   </span><br><span class=\"line\">                &#123; </span><br><span class=\"line\">                    <span class=\"comment\">//make sure Sequence for OID is correct                    </span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8103</span>) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//data read as little endian order (actual data order for Bit String is 03 81)                    </span></span><br><span class=\"line\">                    binr.ReadByte();</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8203</span>)                 </span><br><span class=\"line\">                &#123;   </span><br><span class=\"line\">                    binr.ReadInt16();  </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>                </span><br><span class=\"line\">                &#123;    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                bt = binr.ReadByte();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x00</span>)     </span><br><span class=\"line\">                <span class=\"comment\">//expect null byte next                </span></span><br><span class=\"line\">                &#123;    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;   </span><br><span class=\"line\">                &#125;             </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>) </span><br><span class=\"line\">                <span class=\"comment\">//data read as little endian order (actual data order for Sequence is 30 81)                  </span></span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">                    binr.ReadByte();   </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)                    </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    binr.ReadInt16();  </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>                   </span><br><span class=\"line\">                &#123; </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();        </span><br><span class=\"line\">                <span class=\"built_in\">byte</span> lowbyte = <span class=\"number\">0x00</span>;            </span><br><span class=\"line\">                <span class=\"built_in\">byte</span> highbyte = <span class=\"number\">0x00</span>;        </span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8102</span>) </span><br><span class=\"line\">                <span class=\"comment\">//data read as little endian order (actual data order for Integer is 02 81)                    </span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    lowbyte = binr.ReadByte(); </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">// read next bytes which is bytes in modulus                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8202</span>)                </span><br><span class=\"line\">                &#123;                    </span><br><span class=\"line\">                    highbyte = binr.ReadByte(); <span class=\"comment\">//advance 2 bytes                    </span></span><br><span class=\"line\">                    lowbyte = binr.ReadByte();                </span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;                    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;          </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">byte</span>[] modint = &#123; lowbyte, highbyte, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span> &#125;;   </span><br><span class=\"line\">                <span class=\"comment\">//reverse byte order since asn.1 key uses big endian order                </span></span><br><span class=\"line\">                <span class=\"built_in\">int</span> modsize = BitConverter.ToInt32(modint, <span class=\"number\">0</span>);                </span><br><span class=\"line\">                <span class=\"built_in\">int</span> firstbyte = binr.PeekChar();            </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (firstbyte == <span class=\"number\">0x00</span>)                </span><br><span class=\"line\">                &#123;   </span><br><span class=\"line\">                    <span class=\"comment\">//if first byte (highest order) of modulus is zero, don&#x27;t include it                    </span></span><br><span class=\"line\">                    binr.ReadByte();    </span><br><span class=\"line\">                    <span class=\"comment\">//skip this null byte                    </span></span><br><span class=\"line\">                    modsize -= <span class=\"number\">1</span>;   </span><br><span class=\"line\">                    <span class=\"comment\">//reduce modulus buffer size by 1                &#125;                </span></span><br><span class=\"line\">                    <span class=\"built_in\">byte</span>[] modulus = binr.ReadBytes(modsize);   </span><br><span class=\"line\">                    <span class=\"comment\">//read the modulus bytes                </span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binr.ReadByte() != <span class=\"number\">0x02</span>)          </span><br><span class=\"line\">                    <span class=\"comment\">//expect an Integer for the exponent data           </span></span><br><span class=\"line\">                    &#123;         </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    &#125;              </span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"built_in\">int</span> expbytes = (<span class=\"built_in\">int</span>)binr.ReadByte();    </span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// should only need one byte for actual exponent data (for all useful values)                </span></span><br><span class=\"line\">                    <span class=\"built_in\">byte</span>[] exponent = binr.ReadBytes(expbytes);                </span><br><span class=\"line\">                    <span class=\"comment\">// ------- create RSACryptoServiceProvider instance and initialize with public key -----                </span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> rsa = RSA.Create();                </span><br><span class=\"line\">                    RSAParameters rsaKeyInfo = <span class=\"keyword\">new</span> RSAParameters                </span><br><span class=\"line\">                    &#123;                    </span><br><span class=\"line\">                        Modulus = modulus,                    </span><br><span class=\"line\">                        Exponent = exponent                </span><br><span class=\"line\">                    &#125;;                </span><br><span class=\"line\">                    rsa.ImportParameters(rsaKeyInfo);        </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> rsa;            </span><br><span class=\"line\">                &#125;        </span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">           </span><br><span class=\"line\">        <span class=\"comment\">// 导入密钥算法    </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> <span class=\"title\">GetIntegerSize</span>(<span class=\"params\">BinaryReader binr</span>)    </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;      </span><br><span class=\"line\">            <span class=\"built_in\">byte</span> bt = <span class=\"number\">0</span>;        </span><br><span class=\"line\">            <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;        </span><br><span class=\"line\">            bt = binr.ReadByte();    </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x02</span>)          </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">            &#125;       </span><br><span class=\"line\">            bt = binr.ReadByte();      </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt == <span class=\"number\">0x81</span>)            </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                count = binr.ReadByte();</span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bt == <span class=\"number\">0x82</span>)        </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> highbyte = binr.ReadByte();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> lowbyte = binr.ReadByte();</span><br><span class=\"line\">                <span class=\"built_in\">byte</span>[] modint = &#123; lowbyte, highbyte, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span> &#125;;            </span><br><span class=\"line\">                count = BitConverter.ToInt32(modint, <span class=\"number\">0</span>);        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>        </span><br><span class=\"line\">            &#123;            </span><br><span class=\"line\">                count = bt;        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (binr.ReadByte() == <span class=\"number\">0x00</span>)        </span><br><span class=\"line\">            &#123;            </span><br><span class=\"line\">                count -= <span class=\"number\">1</span>;        </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            binr.BaseStream.Seek(<span class=\"number\">-1</span>, SeekOrigin.Current);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;    </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> <span class=\"title\">CompareBytearrays</span>(<span class=\"params\"><span class=\"built_in\">byte</span>[] a, <span class=\"built_in\">byte</span>[] b</span>)    </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a.Length != b.Length)      </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;    </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"built_in\">byte</span> c <span class=\"keyword\">in</span> a)        </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c != b[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">                &#125;           </span><br><span class=\"line\">                i++;        </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;    </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> RSA算法类型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> RSAType </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span>    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SHA1    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span>    </span></span><br><span class=\"line\">        RSA = <span class=\"number\">0</span>,</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span>    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> RSA2 密钥长度至少为2048    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SHA256    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span>    </span></span><br><span class=\"line\">        RSA2 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;    </span><br><span class=\"line\">    <span class=\"comment\">//2048 公钥    </span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> publicKey = <span class=\"string\">&quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQAB&quot;</span>;    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2048 私钥    </span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> privateKey = <span class=\"string\">&quot;MIIEpAIBAAKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQABAoIBAQCRZLUlOUvjIVqYvhznRK1OG6p45s8JY1r+UnPIId2Bt46oSLeUkZvZVeCnfq9k0Bzb8AVGwVPhtPEDh73z3dEYcT/lwjLXAkyPB6gG5ZfI/vvC/k7JYV01+neFmktw2/FIJWjEMMF2dvLNZ/Pm4bX1Dz9SfD/45Hwr8wqrvRzvFZsj5qqOxv9RPAudOYwCwZskKp/GF+L+3Ycod1Wu98imzMZUH+L5dQuDGg3kvf3ljIAegTPoqYBg0imNPYY/EGoFKnbxlK5S5/5uAFb16dGJqAz3XQCz9Is/IWrOTu0etteqV2Ncs8uqPdjed+b0j8CMsr4U1xjwPQ8WwdaJtTkRAoGBANAndgiGZkCVcc9975/AYdgFp35W6D+hGQAZlL6DmnucUFdXbWa/x2rTSEXlkvgk9X/PxOptUYsLJkzysTgfDywZwuIXLm9B3oNmv3bVgPXsgDsvDfaHYCgz0nHK6NSrX2AeX3yO/dFuoZsuk+J+UyRigMqYj0wjmxUlqj183hinAoGBAMYMOBgF77OXRII7GAuEut/nBeh2sBrgyzR7FmJMs5kvRh6Ck8wp3ysgMvX4lxh1ep8iCw1R2cguqNATr1klOdsCTOE9RrhuvOp3JrYzuIAK6MpH/uBICy4w1rW2+gQySsHcH40r+tNaTFQ7dQ1tef//iy/IW8v8i0t+csztE1JnAoGABdtWYt8FOYP688+jUmdjWWSvVcq0NjYeMfaGTOX/DsNTL2HyXhW/Uq4nNnBDNmAz2CjMbZwt0y+5ICkj+2REVQVUinAEinTcAe5+LKXNPx4sbX3hcrJUbk0m+rSu4G0B/f5cyXBsi9wFCAzDdHgBduCepxSr04Sc9Hde1uQQi7kCgYB0U20HP0Vh+TG2RLuE2HtjVDD2L/CUeQEiXEHzjxXWnhvTg+MIAnggvpLwQwmMxkQ2ACr5sd/3YuCpB0bxV5o594nsqq9FWVYBaecFEjAGlWHSnqMoXWijwu/6X/VOTbP3VjH6G6ECT4GR4DKKpokIQrMgZ9DzaezvdOA9WesFdQKBgQCWfeOQTitRJ0NZACFUn3Fs3Rvgc9eN9YSWj4RtqkmGPMPvguWo+SKhlk3IbYjrRBc5WVOdoX8JXb2/+nAGhPCuUZckWVmZe5pMSr4EkNQdYeY8kOXGSjoTOUH34ZdKeS+e399BkBWIiXUejX/Srln0H4KoHnTWgxwNpTsBCgXu8Q==&quot;</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> rsa = <span class=\"keyword\">new</span> RSAHelper(RSAType.RSA2,Encoding.UTF8, privateKey, publicKey);    </span><br><span class=\"line\">    <span class=\"built_in\">string</span> str = <span class=\"string\">&quot;博客园 http://www.cnblogs.com/&quot;</span>;   </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;原始字符串：&quot;</span>+str);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//加密    </span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> enStr = rsa.Encrypt(str);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;加密字符串：&quot;</span>+enStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//解密    </span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> deStr = rsa.Decrypt(enStr);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;解密字符串：&quot;</span>+deStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//私钥签名    </span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> signStr = rsa.Sign(str);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;字符串签名：&quot;</span> + signStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//公钥验证签名    </span></span><br><span class=\"line\">    <span class=\"built_in\">bool</span> signVerify = rsa.Verify(str,signStr);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;验证签名：&quot;</span> + signVerify);    </span><br><span class=\"line\">    Console.ReadKey(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":10821,"excerpt":"<p>RSA2是在原来SHA1WithRSA签名算法的基础上,新增了支持SHA256WithRSA的签名算法.该算法比该SHA1WithRSA有更强的安全能力.</p>","more":"<h6 id=\"RSA加解密-使用OpenSSL的公钥加密-私钥解密\"><a href=\"#RSA加解密-使用OpenSSL的公钥加密-私钥解密\" class=\"headerlink\" title=\"RSA加解密 使用OpenSSL的公钥加密/私钥解密\"></a>RSA加解密 使用OpenSSL的公钥加密/私钥解密</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">RSAHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RSA_privateKeyRsaProvider;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RSA_publicKeyRsaProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> HashAlgorithmName_hashAlgorithmName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Encoding _encoding;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 实例化RSAHelper</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;rsaType&quot;&gt;</span>加密算法类型RSA SHA1;RSA2 SHA256 密钥长度至少为2048<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;encoding&quot;&gt;</span>编码类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;privateKey&quot;&gt;</span>私钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;publicKey&quot;&gt;</span>公钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RSAHelper</span>(<span class=\"params\">RSAType rsaType,Encoding encoding,<span class=\"built_in\">string</span> privateKey,<span class=\"built_in\">string</span> publicKey = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _encoding = encoding;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">string</span>.IsNullOrEmpty(privateKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _privateKeyRsaProvider = CreateRsaProviderFromPrivateKey(privateKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">string</span>.IsNullOrEmpty(publicKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _publicKeyRsaProvider = CreateRsaProviderFromPublicKey(publicKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        _hashAlgorithName = rsaType == RSAType.RSA?HashAlgorithmName.SHA1:HashAlgorithName.SHA256;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 使用私钥签名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;data&quot;&gt;</span>原始数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Sign</span>(<span class=\"params\"><span class=\"built_in\">string</span> data</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] dataBytes = _encoding.GetBytes(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> signatureBytes = _privateKeyRsaProvider.SignData(dataBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToBase64String(signatureBytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 使用公钥签名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;data&quot;&gt;</span>原始数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;sign&quot;&gt;</span>签名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Verify</span>(<span class=\"params\">stringt data,<span class=\"built_in\">string</span> sign</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] dataBytes = _encoding.GetBytes(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] signBytes = Convert.FromBase64String(sign);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> verify = _publicKeyRsaProvider.VerifyData(dataBytes,signBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> varify;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解密</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Decrypt</span>(<span class=\"params\"><span class=\"built_in\">string</span> cipherText</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_privateKeyRsaProvider == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;_privateKeyRsaProvider is null&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Encoding.UTF8.GetString(_privateKeyRsaProvider.Decrypt(Convert.FromBase64String(cipherText), RSAEncryptionPadding.Pkcs1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加密</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Encrypt</span>(<span class=\"params\"><span class=\"built_in\">string</span> text</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_publicKeyRsaProvider == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;_publicKeyRsaProvider is null&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToBase64String(_publicKeyRsaProvider.Encrypt(Encoding.UTF8.GetBytes(text), RSAEncryptionPadding.Pkcs1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用私钥创建RSA实例    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RSA <span class=\"title\">CreateRsaProviderFromPrivateKey</span>(<span class=\"params\"><span class=\"built_in\">string</span> privateKey</span>)</span>    &#123;        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> privateKeyBits = Convert.FromBase64String(privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rsa = RSA.Create();      </span><br><span class=\"line\">        <span class=\"keyword\">var</span> rsaParameters = <span class=\"keyword\">new</span> RSAParameters();  </span><br><span class=\"line\">        <span class=\"keyword\">using</span> (BinaryReader binr = <span class=\"keyword\">new</span> BinaryReader(<span class=\"keyword\">new</span> MemoryStream(privateKeyBits)))        </span><br><span class=\"line\">        &#123;            </span><br><span class=\"line\">            <span class=\"built_in\">byte</span> bt = <span class=\"number\">0</span>;       </span><br><span class=\"line\">            <span class=\"built_in\">ushort</span> twobytes = <span class=\"number\">0</span>;            </span><br><span class=\"line\">            twobytes = binr.ReadUInt16();      </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>)             </span><br><span class=\"line\">            &#123;   </span><br><span class=\"line\">                binr.ReadByte();</span><br><span class=\"line\">            &#125;      </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)   </span><br><span class=\"line\">            &#123;             </span><br><span class=\"line\">                binr.ReadInt16();</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            <span class=\"keyword\">else</span>            </span><br><span class=\"line\">            &#123;    </span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Unexpected value read binr.ReadUInt16()&quot;</span>); </span><br><span class=\"line\">            &#125;           </span><br><span class=\"line\">            twobytes = binr.ReadUInt16();      </span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (twobytes != <span class=\"number\">0x0102</span>)      </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Unexpected version&quot;</span>);</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            bt = binr.ReadByte();        </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x00</span>)  </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Unexpected value read binr.ReadByte()&quot;</span>);</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            rsaParameters.Modulus = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.Exponent = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.D = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.P = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.Q = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.DP = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.DQ = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.InverseQ = binr.ReadBytes(GetIntegerSize(binr));        </span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">        rsa.ImportParameters(rsaParameters);    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> rsa;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 使用公钥创建RSA实例    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RSA <span class=\"title\">CreateRsaProviderFromPublicKey</span>(<span class=\"params\"><span class=\"built_in\">string</span> publicKeyString</span>)   </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;        </span><br><span class=\"line\">        <span class=\"comment\">// encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = &quot;1.2.840.113549.1.1.1&quot;        </span></span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] seqOid = &#123; <span class=\"number\">0x30</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x06</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x2A</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0xF7</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0x00</span> &#125;;    </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] seq = <span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">15</span>];      </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> x509Key = Convert.FromBase64String(publicKeyString);        </span><br><span class=\"line\">        <span class=\"comment\">// ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------        </span></span><br><span class=\"line\">        <span class=\"keyword\">using</span> (MemoryStream mem = <span class=\"keyword\">new</span> MemoryStream(x509Key))        </span><br><span class=\"line\">        &#123;            </span><br><span class=\"line\">            <span class=\"keyword\">using</span> (BinaryReader binr = <span class=\"keyword\">new</span> BinaryReader(mem))  <span class=\"comment\">//wrap Memory Stream with BinaryReader for easy reading            </span></span><br><span class=\"line\">            &#123;                </span><br><span class=\"line\">                <span class=\"built_in\">byte</span> bt = <span class=\"number\">0</span>;                </span><br><span class=\"line\">                <span class=\"built_in\">ushort</span> twobytes = <span class=\"number\">0</span>;                </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>) <span class=\"comment\">//data read as little endian order (actual data order for Sequence is 30 81)                    </span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    binr.ReadByte();</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)             </span><br><span class=\"line\">                &#123;       </span><br><span class=\"line\">                    binr.ReadInt16(); </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>     </span><br><span class=\"line\">                &#123;               </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                seq = binr.ReadBytes(<span class=\"number\">15</span>);       </span><br><span class=\"line\">                <span class=\"comment\">//read the Sequence OID                </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!CompareBytearrays(seq, seqOid))   </span><br><span class=\"line\">                &#123; </span><br><span class=\"line\">                    <span class=\"comment\">//make sure Sequence for OID is correct                    </span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8103</span>) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//data read as little endian order (actual data order for Bit String is 03 81)                    </span></span><br><span class=\"line\">                    binr.ReadByte();</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8203</span>)                 </span><br><span class=\"line\">                &#123;   </span><br><span class=\"line\">                    binr.ReadInt16();  </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>                </span><br><span class=\"line\">                &#123;    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                bt = binr.ReadByte();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x00</span>)     </span><br><span class=\"line\">                <span class=\"comment\">//expect null byte next                </span></span><br><span class=\"line\">                &#123;    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;   </span><br><span class=\"line\">                &#125;             </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>) </span><br><span class=\"line\">                <span class=\"comment\">//data read as little endian order (actual data order for Sequence is 30 81)                  </span></span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">                    binr.ReadByte();   </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)                    </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    binr.ReadInt16();  </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>                   </span><br><span class=\"line\">                &#123; </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();        </span><br><span class=\"line\">                <span class=\"built_in\">byte</span> lowbyte = <span class=\"number\">0x00</span>;            </span><br><span class=\"line\">                <span class=\"built_in\">byte</span> highbyte = <span class=\"number\">0x00</span>;        </span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8102</span>) </span><br><span class=\"line\">                <span class=\"comment\">//data read as little endian order (actual data order for Integer is 02 81)                    </span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    lowbyte = binr.ReadByte(); </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">// read next bytes which is bytes in modulus                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8202</span>)                </span><br><span class=\"line\">                &#123;                    </span><br><span class=\"line\">                    highbyte = binr.ReadByte(); <span class=\"comment\">//advance 2 bytes                    </span></span><br><span class=\"line\">                    lowbyte = binr.ReadByte();                </span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;                    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;          </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">byte</span>[] modint = &#123; lowbyte, highbyte, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span> &#125;;   </span><br><span class=\"line\">                <span class=\"comment\">//reverse byte order since asn.1 key uses big endian order                </span></span><br><span class=\"line\">                <span class=\"built_in\">int</span> modsize = BitConverter.ToInt32(modint, <span class=\"number\">0</span>);                </span><br><span class=\"line\">                <span class=\"built_in\">int</span> firstbyte = binr.PeekChar();            </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (firstbyte == <span class=\"number\">0x00</span>)                </span><br><span class=\"line\">                &#123;   </span><br><span class=\"line\">                    <span class=\"comment\">//if first byte (highest order) of modulus is zero, don&#x27;t include it                    </span></span><br><span class=\"line\">                    binr.ReadByte();    </span><br><span class=\"line\">                    <span class=\"comment\">//skip this null byte                    </span></span><br><span class=\"line\">                    modsize -= <span class=\"number\">1</span>;   </span><br><span class=\"line\">                    <span class=\"comment\">//reduce modulus buffer size by 1                &#125;                </span></span><br><span class=\"line\">                    <span class=\"built_in\">byte</span>[] modulus = binr.ReadBytes(modsize);   </span><br><span class=\"line\">                    <span class=\"comment\">//read the modulus bytes                </span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binr.ReadByte() != <span class=\"number\">0x02</span>)          </span><br><span class=\"line\">                    <span class=\"comment\">//expect an Integer for the exponent data           </span></span><br><span class=\"line\">                    &#123;         </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    &#125;              </span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"built_in\">int</span> expbytes = (<span class=\"built_in\">int</span>)binr.ReadByte();    </span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// should only need one byte for actual exponent data (for all useful values)                </span></span><br><span class=\"line\">                    <span class=\"built_in\">byte</span>[] exponent = binr.ReadBytes(expbytes);                </span><br><span class=\"line\">                    <span class=\"comment\">// ------- create RSACryptoServiceProvider instance and initialize with public key -----                </span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> rsa = RSA.Create();                </span><br><span class=\"line\">                    RSAParameters rsaKeyInfo = <span class=\"keyword\">new</span> RSAParameters                </span><br><span class=\"line\">                    &#123;                    </span><br><span class=\"line\">                        Modulus = modulus,                    </span><br><span class=\"line\">                        Exponent = exponent                </span><br><span class=\"line\">                    &#125;;                </span><br><span class=\"line\">                    rsa.ImportParameters(rsaKeyInfo);        </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> rsa;            </span><br><span class=\"line\">                &#125;        </span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">           </span><br><span class=\"line\">        <span class=\"comment\">// 导入密钥算法    </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> <span class=\"title\">GetIntegerSize</span>(<span class=\"params\">BinaryReader binr</span>)    </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;      </span><br><span class=\"line\">            <span class=\"built_in\">byte</span> bt = <span class=\"number\">0</span>;        </span><br><span class=\"line\">            <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;        </span><br><span class=\"line\">            bt = binr.ReadByte();    </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x02</span>)          </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">            &#125;       </span><br><span class=\"line\">            bt = binr.ReadByte();      </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt == <span class=\"number\">0x81</span>)            </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                count = binr.ReadByte();</span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bt == <span class=\"number\">0x82</span>)        </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> highbyte = binr.ReadByte();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> lowbyte = binr.ReadByte();</span><br><span class=\"line\">                <span class=\"built_in\">byte</span>[] modint = &#123; lowbyte, highbyte, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span> &#125;;            </span><br><span class=\"line\">                count = BitConverter.ToInt32(modint, <span class=\"number\">0</span>);        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>        </span><br><span class=\"line\">            &#123;            </span><br><span class=\"line\">                count = bt;        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (binr.ReadByte() == <span class=\"number\">0x00</span>)        </span><br><span class=\"line\">            &#123;            </span><br><span class=\"line\">                count -= <span class=\"number\">1</span>;        </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            binr.BaseStream.Seek(<span class=\"number\">-1</span>, SeekOrigin.Current);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;    </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> <span class=\"title\">CompareBytearrays</span>(<span class=\"params\"><span class=\"built_in\">byte</span>[] a, <span class=\"built_in\">byte</span>[] b</span>)    </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a.Length != b.Length)      </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;    </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"built_in\">byte</span> c <span class=\"keyword\">in</span> a)        </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c != b[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">                &#125;           </span><br><span class=\"line\">                i++;        </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;    </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> RSA算法类型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> RSAType </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span>    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SHA1    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span>    </span></span><br><span class=\"line\">        RSA = <span class=\"number\">0</span>,</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span>    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> RSA2 密钥长度至少为2048    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SHA256    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span>    </span></span><br><span class=\"line\">        RSA2 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;    </span><br><span class=\"line\">    <span class=\"comment\">//2048 公钥    </span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> publicKey = <span class=\"string\">&quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQAB&quot;</span>;    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2048 私钥    </span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> privateKey = <span class=\"string\">&quot;MIIEpAIBAAKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQABAoIBAQCRZLUlOUvjIVqYvhznRK1OG6p45s8JY1r+UnPIId2Bt46oSLeUkZvZVeCnfq9k0Bzb8AVGwVPhtPEDh73z3dEYcT/lwjLXAkyPB6gG5ZfI/vvC/k7JYV01+neFmktw2/FIJWjEMMF2dvLNZ/Pm4bX1Dz9SfD/45Hwr8wqrvRzvFZsj5qqOxv9RPAudOYwCwZskKp/GF+L+3Ycod1Wu98imzMZUH+L5dQuDGg3kvf3ljIAegTPoqYBg0imNPYY/EGoFKnbxlK5S5/5uAFb16dGJqAz3XQCz9Is/IWrOTu0etteqV2Ncs8uqPdjed+b0j8CMsr4U1xjwPQ8WwdaJtTkRAoGBANAndgiGZkCVcc9975/AYdgFp35W6D+hGQAZlL6DmnucUFdXbWa/x2rTSEXlkvgk9X/PxOptUYsLJkzysTgfDywZwuIXLm9B3oNmv3bVgPXsgDsvDfaHYCgz0nHK6NSrX2AeX3yO/dFuoZsuk+J+UyRigMqYj0wjmxUlqj183hinAoGBAMYMOBgF77OXRII7GAuEut/nBeh2sBrgyzR7FmJMs5kvRh6Ck8wp3ysgMvX4lxh1ep8iCw1R2cguqNATr1klOdsCTOE9RrhuvOp3JrYzuIAK6MpH/uBICy4w1rW2+gQySsHcH40r+tNaTFQ7dQ1tef//iy/IW8v8i0t+csztE1JnAoGABdtWYt8FOYP688+jUmdjWWSvVcq0NjYeMfaGTOX/DsNTL2HyXhW/Uq4nNnBDNmAz2CjMbZwt0y+5ICkj+2REVQVUinAEinTcAe5+LKXNPx4sbX3hcrJUbk0m+rSu4G0B/f5cyXBsi9wFCAzDdHgBduCepxSr04Sc9Hde1uQQi7kCgYB0U20HP0Vh+TG2RLuE2HtjVDD2L/CUeQEiXEHzjxXWnhvTg+MIAnggvpLwQwmMxkQ2ACr5sd/3YuCpB0bxV5o594nsqq9FWVYBaecFEjAGlWHSnqMoXWijwu/6X/VOTbP3VjH6G6ECT4GR4DKKpokIQrMgZ9DzaezvdOA9WesFdQKBgQCWfeOQTitRJ0NZACFUn3Fs3Rvgc9eN9YSWj4RtqkmGPMPvguWo+SKhlk3IbYjrRBc5WVOdoX8JXb2/+nAGhPCuUZckWVmZe5pMSr4EkNQdYeY8kOXGSjoTOUH34ZdKeS+e399BkBWIiXUejX/Srln0H4KoHnTWgxwNpTsBCgXu8Q==&quot;</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> rsa = <span class=\"keyword\">new</span> RSAHelper(RSAType.RSA2,Encoding.UTF8, privateKey, publicKey);    </span><br><span class=\"line\">    <span class=\"built_in\">string</span> str = <span class=\"string\">&quot;博客园 http://www.cnblogs.com/&quot;</span>;   </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;原始字符串：&quot;</span>+str);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//加密    </span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> enStr = rsa.Encrypt(str);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;加密字符串：&quot;</span>+enStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//解密    </span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> deStr = rsa.Decrypt(enStr);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;解密字符串：&quot;</span>+deStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//私钥签名    </span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> signStr = rsa.Sign(str);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;字符串签名：&quot;</span> + signStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//公钥验证签名    </span></span><br><span class=\"line\">    <span class=\"built_in\">bool</span> signVerify = rsa.Verify(str,signStr);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;验证签名：&quot;</span> + signVerify);    </span><br><span class=\"line\">    Console.ReadKey(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net Core-从零开始搭建框架(一)","date":"2019-02-21T15:27:08.000Z","_content":"之前一直想学习一下用Vs Code开发,趁着最近有做一个小项目的想法,顺路学习一下\n<!--more-->\n#### Vs Code 技巧\n##### 推荐的Vs Code插件\n1. vscode-solution-explorer //解决方案\n2. C#\n3. C# Extensions\n4. C# XML Documentation Comments //三行注释\n\n##### 常用的命令\n1. F1 或 Ctrl+Shift+P: 打开命令面板\n2. Ctrl+` 打开命令行\n3. Shift+Alt+F 代码格式化\n4. Ctrl+B 侧边栏显/隐\n5. Ctrl+Shift+E 显示资源管理器\n6. Ctrl_Tab 切换文件\n\n##### Vs Code 运行生成XML注释文件\n先在对应的项目csproj文件里节点PropertyGroup内添加代码：\n``` cs\n<GenerateDocumentationFile>true</GenerateDocumentationFile>\n<NoWarn>$(NoWarn);1591<Warn>\n```\n\n#### 创建项目和集成Swagger\n先创建一个空白的解决方案,再往里面添加对应的项目,先添加一个ASP.NET CORE WEBAPI项目,名称为Caty.Core.Api.通过vscode-solution-explorer插件,这一步将十分简单,就像在vs中一样.\n\n##### 引入swagger插件\n在终端控制台输入命令:dotnet add YourProjectName.csproj package Swashbuckle.AspNetCore\n\n##### 要增加的引用\n1. using System.IO;\n2. using Swashbuckle.AspNetCore.Swagger;\n3. using System.Reflection;\n\n##### 添加配置和Swagger中间件\n1. 打开Startup.cs类，编辑ConfigureServices类\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n\n    #region Swagger\n    services.AddSwaggerGen(c =>{\n        c.SwaggerDoc(\"v1\", new Info{\n            Version = \"v1.0.0\",\n            Title = \"Core Api\",\n            Description = \"基础框架\",\n            TermsOfService = \"None\",\n            Contact =new Swashbuckle.AspNetCore.Swagger.Contact{ Name = \"Caty\", Email = \"1120873075@qq.com\", Url = \"https://chcaty.github.io/\" }\n        });\n        //添加读取注释服务(需在生成时输出xml注释文件)\n        var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";  \n        var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); \n        c.IncludeXmlComments(xmlPath,true);//true表示显示控制器注释\n\n        //添加header验证信息\n        var security  = new Dictionary<string,IEnumerable<string>>{ {\"Admin\",new string[] {} },};\n        c.AddSecurityRequirement(security);\n        c.AddSecurityDefinition(\"Admin\",new ApiKeyScheme\n        {\n            Description =  \"JWT授权 参数结构: \\\"Authorization: Admin {token}\\\"\",\n            Name = \"Authorization\",//默认的参数名\n            In = \"header\",//存放信息的位置(请求头中)\n            Type =\"apiKey\"\n        });\n    }) ;\n    #endregion\n}\n```\n\n2. 编辑Configure类\n```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    else\n    {\n        app.UseHsts();\n    }\n\n    app.UseHttpsRedirection();\n    app.UseMvc();\n\n    #region Swagger \n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\",\"Api Help V1\");\n    });\n    #endregion\n}\n```\n\n#### 在框架中引入Dapper\n在解决方案中添加Business,Service,Entity,Common 四个类库\n##### Entity类库创建User实体类\n```cs\nusing System;\nnamespace Caty.Core.Entity\n{\n    public class User\n    {\n        /// <summary>\n        /// 用户Id\n        /// </summary>\n        public int Id { get; set; }\n\n        /// <summary>\n        /// 用户名\n        /// </summary>\n        public string UserName { get; set; }\n\n        /// <summary>\n        /// 密码\n        /// </summary>\n        public string Password { get; set; }\n\n        /// <summary>\n        /// 性别（0女，1男）\n        /// </summary>\n        public bool Gender { get; set; }\n\n        /// <summary>\n        /// 出生年月日\n        /// </summary>\n        public DateTime Birthday { get; set; }\n\n        /// <summary>\n        /// 创建人\n        /// </summary>\n        public int CreateUserId { get; set; }\n\n        /// <summary>\n        /// 创建日期\n        /// </summary>\n        public DateTime CreateDate { get; set; }\n\n        /// <summary>\n        /// 更新人\n        /// </summary>\n        public int UpdateUserId { get; set; }\n\n        /// <summary>\n        /// 更新日期\n        /// </summary>\n        public DateTime UpdateDate { get; set; }\n\n        /// <summary>\n        /// 删除标志\n        /// </summary>\n        public int IsDeleted { get; set; }\n    }\n}\n```\n\n##### 在Common中设置连接字符串和DbConnection\n```cs\nusing System;\nusing System.Data;\nusing System.Data.SqlClient;\n\nnamespace Caty.Core.Common\n{\n    public class DataBaseConfig\n    {\n        #region SqlServer连接配置\n        private static string DefaultSqlConnectionString =  @\"Data Source=.;Initial Catalog=Light;User ID=sa;Password=sa;\";\n        public static IDbConnection GetSqlConnection(string sqlConnectionString = null)\n        {\n            if(string.IsNullOrWhiteSpace(sqlConnectionString))\n            {\n                sqlConnectionString = DefaultSqlConnectionString;\n            }\n            IDbConnection conn = new SqlConnection(sqlConnectionString);\n            conn.Open();\n            return conn;\n        }\n        #endregion\n    }\n}\n```\n\n##### 使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它\n定义\n```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace Caty.Core.Interface\n{\n    public interface IBaseService<T> where T:class\n    {\n        /// <summary>\n        /// 添加一个实体\n        /// </summary>\n        /// <param name=\"entity\">实体类型</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        bool CreateEntity(T entity,string connectionString = null);\n\n        /// <summary>\n        /// 根据主键Id获得一个实体\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        T RetriveOneEntityById(int id,string connectionString = null);\n\n        /// <summary>\n        /// 获得全部实体\n        /// </summary>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        IEnumerable<T> RetriveAllEntity(string connectionString = null);\n\n        /// <summary>\n        /// 修改一个实体\n        /// </summary>\n        /// <param name=\"entity\">要修改的实体</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        bool UpdateEntity(T entity,string connectionString = null);\n\n        /// <summary>\n        /// 根据主键Id删除一个实体\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"connectionString\"></param>\n        /// <returns></returns>\n        bool DeleteEntityById(int id,string connectionString = null);\n    }\n}\n```\n继承\n```cs\nusing System;\nusing Caty.Core.Entity;\n\nnamespace Caty.Core.Interface \n{\n    public partial  interface IUserService :IBaseService<User>\n    {\n        \n    }\n}\n```\n\n##### 实现IUserRepository定义的接口\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing Caty.Core.Common;\nusing Caty.Core.Entity;\nusing Caty.Core.Interface;\nusing Dapper;\n\nnamespace Caty.Core.Implement\n{\n    /// <summary>\n    /// 用户仓储\n    /// </summary>\n    public class UserService : IUserService\n    {\n        /// <summary>\n        /// 创建一个用户\n        /// </summary>\n        /// <param name=\"entity\">用户</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool CreateEntity(User entity, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string insertSql = @\"INSERT INTO [dbo].[User]\n                                             ([UserName]\n                                             ,[Password]\n                                             ,[Gender]\n                                             ,[Birthday]\n                                             ,[CreateUserId]\n                                             ,[CreateDate]\n                                             ,[UpdateUserId]\n                                             ,[UpdateDate]\n                                             ,[IsDeleted])\n                                       VALUES\n                                             (@UserName\n                                             ,@Password\n                                             ,@Gender\n                                             ,@Birthday\n                                             ,@CreateUserId\n                                             ,@CreateDate\n                                             ,@UpdateUserId\n                                             ,@UpdateDate\n                                             ,@IsDeleted)\";\n                return conn.Execute(insertSql, entity) > 0;\n            }\n        }\n\n        /// <summary>\n        /// 根据主键Id删除一个用户\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool DeleteEntityById(int id, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string deleteSql = @\"DELETE FROM [dbo].[User]\n                                              WHERE Id = @Id\";\n                return conn.Execute(deleteSql, new { Id = id }) > 0;\n            }\n        }\n\n        /// <summary>\n        /// 获取所有用户\n        /// </summary>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public IEnumerable<User> RetriveAllEntity(string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string querySql = @\"SELECT [Id]\n                                            ,[UserName]\n                                            ,[Password]\n                                            ,[Gender]\n                                            ,[Birthday]\n                                            ,[CreateUserId]\n                                            ,[CreateDate]\n                                            ,[UpdateUserId]\n                                            ,[UpdateDate]\n                                            ,[IsDeleted]\n                                        FROM [dbo].[User]\";\n                return conn.Query<User>(querySql);\n            }\n        }\n\n        /// <summary>\n        /// 根据主键Id获取一个用户\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public User RetriveOneEntityById(int id, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string querySql = @\"SELECT [Id]\n                                           ,[UserName]\n                                            ,[Password]\n                                            ,[Gender]\n                                            ,[Birthday]\n                                            ,[CreateUserId]\n                                            ,[CreateDate]\n                                            ,[UpdateUserId]\n                                           ,[UpdateDate]\n                                           ,[IsDeleted]\n                                       FROM [dbo].[User]\n                                     WHERE Id = @Id\";\n                return conn.QueryFirstOrDefault<User>(querySql, new { Id = id });\n            }\n        }\n        /// <summary>\n        /// 修改一个用户\n        /// </summary>\n        /// <param name=\"entity\">要修改的用户</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool UpdateEntity(User entity, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string updateSql = @\"UPDATE [dbo].[User]\n                                    SET [UserName] = @UserName\n                                    ,[Password] = @Password\n                                    ,[Gender] = @Gender\n                                    ,[Birthday] = @Birthday\n                                    ,[UpdateUserId] = @UpdateUserId\n                                    ,[UpdateDate] = @UpdateDate\n                                    ,[IsDeleted] = @IsDeleted\n                                    WHERE Id = @Id\";\n                return conn.Execute(updateSql, entity) > 0;\n            }\n        }\n    }\n}\n```\n未完待续....","source":"_posts/Net-Core-从零开始搭建框架(一).md","raw":"---\ntitle: .Net Core-从零开始搭建框架(一)\ndate: 2019-02-21 23:27:08\ncategories: .Net Core\ntags:\n - .Net Core\n - Swagger\n - 框架\n - Dapper\n---\n之前一直想学习一下用Vs Code开发,趁着最近有做一个小项目的想法,顺路学习一下\n<!--more-->\n#### Vs Code 技巧\n##### 推荐的Vs Code插件\n1. vscode-solution-explorer //解决方案\n2. C#\n3. C# Extensions\n4. C# XML Documentation Comments //三行注释\n\n##### 常用的命令\n1. F1 或 Ctrl+Shift+P: 打开命令面板\n2. Ctrl+` 打开命令行\n3. Shift+Alt+F 代码格式化\n4. Ctrl+B 侧边栏显/隐\n5. Ctrl+Shift+E 显示资源管理器\n6. Ctrl_Tab 切换文件\n\n##### Vs Code 运行生成XML注释文件\n先在对应的项目csproj文件里节点PropertyGroup内添加代码：\n``` cs\n<GenerateDocumentationFile>true</GenerateDocumentationFile>\n<NoWarn>$(NoWarn);1591<Warn>\n```\n\n#### 创建项目和集成Swagger\n先创建一个空白的解决方案,再往里面添加对应的项目,先添加一个ASP.NET CORE WEBAPI项目,名称为Caty.Core.Api.通过vscode-solution-explorer插件,这一步将十分简单,就像在vs中一样.\n\n##### 引入swagger插件\n在终端控制台输入命令:dotnet add YourProjectName.csproj package Swashbuckle.AspNetCore\n\n##### 要增加的引用\n1. using System.IO;\n2. using Swashbuckle.AspNetCore.Swagger;\n3. using System.Reflection;\n\n##### 添加配置和Swagger中间件\n1. 打开Startup.cs类，编辑ConfigureServices类\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n\n    #region Swagger\n    services.AddSwaggerGen(c =>{\n        c.SwaggerDoc(\"v1\", new Info{\n            Version = \"v1.0.0\",\n            Title = \"Core Api\",\n            Description = \"基础框架\",\n            TermsOfService = \"None\",\n            Contact =new Swashbuckle.AspNetCore.Swagger.Contact{ Name = \"Caty\", Email = \"1120873075@qq.com\", Url = \"https://chcaty.github.io/\" }\n        });\n        //添加读取注释服务(需在生成时输出xml注释文件)\n        var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";  \n        var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); \n        c.IncludeXmlComments(xmlPath,true);//true表示显示控制器注释\n\n        //添加header验证信息\n        var security  = new Dictionary<string,IEnumerable<string>>{ {\"Admin\",new string[] {} },};\n        c.AddSecurityRequirement(security);\n        c.AddSecurityDefinition(\"Admin\",new ApiKeyScheme\n        {\n            Description =  \"JWT授权 参数结构: \\\"Authorization: Admin {token}\\\"\",\n            Name = \"Authorization\",//默认的参数名\n            In = \"header\",//存放信息的位置(请求头中)\n            Type =\"apiKey\"\n        });\n    }) ;\n    #endregion\n}\n```\n\n2. 编辑Configure类\n```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    else\n    {\n        app.UseHsts();\n    }\n\n    app.UseHttpsRedirection();\n    app.UseMvc();\n\n    #region Swagger \n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\",\"Api Help V1\");\n    });\n    #endregion\n}\n```\n\n#### 在框架中引入Dapper\n在解决方案中添加Business,Service,Entity,Common 四个类库\n##### Entity类库创建User实体类\n```cs\nusing System;\nnamespace Caty.Core.Entity\n{\n    public class User\n    {\n        /// <summary>\n        /// 用户Id\n        /// </summary>\n        public int Id { get; set; }\n\n        /// <summary>\n        /// 用户名\n        /// </summary>\n        public string UserName { get; set; }\n\n        /// <summary>\n        /// 密码\n        /// </summary>\n        public string Password { get; set; }\n\n        /// <summary>\n        /// 性别（0女，1男）\n        /// </summary>\n        public bool Gender { get; set; }\n\n        /// <summary>\n        /// 出生年月日\n        /// </summary>\n        public DateTime Birthday { get; set; }\n\n        /// <summary>\n        /// 创建人\n        /// </summary>\n        public int CreateUserId { get; set; }\n\n        /// <summary>\n        /// 创建日期\n        /// </summary>\n        public DateTime CreateDate { get; set; }\n\n        /// <summary>\n        /// 更新人\n        /// </summary>\n        public int UpdateUserId { get; set; }\n\n        /// <summary>\n        /// 更新日期\n        /// </summary>\n        public DateTime UpdateDate { get; set; }\n\n        /// <summary>\n        /// 删除标志\n        /// </summary>\n        public int IsDeleted { get; set; }\n    }\n}\n```\n\n##### 在Common中设置连接字符串和DbConnection\n```cs\nusing System;\nusing System.Data;\nusing System.Data.SqlClient;\n\nnamespace Caty.Core.Common\n{\n    public class DataBaseConfig\n    {\n        #region SqlServer连接配置\n        private static string DefaultSqlConnectionString =  @\"Data Source=.;Initial Catalog=Light;User ID=sa;Password=sa;\";\n        public static IDbConnection GetSqlConnection(string sqlConnectionString = null)\n        {\n            if(string.IsNullOrWhiteSpace(sqlConnectionString))\n            {\n                sqlConnectionString = DefaultSqlConnectionString;\n            }\n            IDbConnection conn = new SqlConnection(sqlConnectionString);\n            conn.Open();\n            return conn;\n        }\n        #endregion\n    }\n}\n```\n\n##### 使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它\n定义\n```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace Caty.Core.Interface\n{\n    public interface IBaseService<T> where T:class\n    {\n        /// <summary>\n        /// 添加一个实体\n        /// </summary>\n        /// <param name=\"entity\">实体类型</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        bool CreateEntity(T entity,string connectionString = null);\n\n        /// <summary>\n        /// 根据主键Id获得一个实体\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        T RetriveOneEntityById(int id,string connectionString = null);\n\n        /// <summary>\n        /// 获得全部实体\n        /// </summary>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        IEnumerable<T> RetriveAllEntity(string connectionString = null);\n\n        /// <summary>\n        /// 修改一个实体\n        /// </summary>\n        /// <param name=\"entity\">要修改的实体</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        bool UpdateEntity(T entity,string connectionString = null);\n\n        /// <summary>\n        /// 根据主键Id删除一个实体\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"connectionString\"></param>\n        /// <returns></returns>\n        bool DeleteEntityById(int id,string connectionString = null);\n    }\n}\n```\n继承\n```cs\nusing System;\nusing Caty.Core.Entity;\n\nnamespace Caty.Core.Interface \n{\n    public partial  interface IUserService :IBaseService<User>\n    {\n        \n    }\n}\n```\n\n##### 实现IUserRepository定义的接口\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing Caty.Core.Common;\nusing Caty.Core.Entity;\nusing Caty.Core.Interface;\nusing Dapper;\n\nnamespace Caty.Core.Implement\n{\n    /// <summary>\n    /// 用户仓储\n    /// </summary>\n    public class UserService : IUserService\n    {\n        /// <summary>\n        /// 创建一个用户\n        /// </summary>\n        /// <param name=\"entity\">用户</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool CreateEntity(User entity, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string insertSql = @\"INSERT INTO [dbo].[User]\n                                             ([UserName]\n                                             ,[Password]\n                                             ,[Gender]\n                                             ,[Birthday]\n                                             ,[CreateUserId]\n                                             ,[CreateDate]\n                                             ,[UpdateUserId]\n                                             ,[UpdateDate]\n                                             ,[IsDeleted])\n                                       VALUES\n                                             (@UserName\n                                             ,@Password\n                                             ,@Gender\n                                             ,@Birthday\n                                             ,@CreateUserId\n                                             ,@CreateDate\n                                             ,@UpdateUserId\n                                             ,@UpdateDate\n                                             ,@IsDeleted)\";\n                return conn.Execute(insertSql, entity) > 0;\n            }\n        }\n\n        /// <summary>\n        /// 根据主键Id删除一个用户\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool DeleteEntityById(int id, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string deleteSql = @\"DELETE FROM [dbo].[User]\n                                              WHERE Id = @Id\";\n                return conn.Execute(deleteSql, new { Id = id }) > 0;\n            }\n        }\n\n        /// <summary>\n        /// 获取所有用户\n        /// </summary>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public IEnumerable<User> RetriveAllEntity(string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string querySql = @\"SELECT [Id]\n                                            ,[UserName]\n                                            ,[Password]\n                                            ,[Gender]\n                                            ,[Birthday]\n                                            ,[CreateUserId]\n                                            ,[CreateDate]\n                                            ,[UpdateUserId]\n                                            ,[UpdateDate]\n                                            ,[IsDeleted]\n                                        FROM [dbo].[User]\";\n                return conn.Query<User>(querySql);\n            }\n        }\n\n        /// <summary>\n        /// 根据主键Id获取一个用户\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public User RetriveOneEntityById(int id, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string querySql = @\"SELECT [Id]\n                                           ,[UserName]\n                                            ,[Password]\n                                            ,[Gender]\n                                            ,[Birthday]\n                                            ,[CreateUserId]\n                                            ,[CreateDate]\n                                            ,[UpdateUserId]\n                                           ,[UpdateDate]\n                                           ,[IsDeleted]\n                                       FROM [dbo].[User]\n                                     WHERE Id = @Id\";\n                return conn.QueryFirstOrDefault<User>(querySql, new { Id = id });\n            }\n        }\n        /// <summary>\n        /// 修改一个用户\n        /// </summary>\n        /// <param name=\"entity\">要修改的用户</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool UpdateEntity(User entity, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string updateSql = @\"UPDATE [dbo].[User]\n                                    SET [UserName] = @UserName\n                                    ,[Password] = @Password\n                                    ,[Gender] = @Gender\n                                    ,[Birthday] = @Birthday\n                                    ,[UpdateUserId] = @UpdateUserId\n                                    ,[UpdateDate] = @UpdateDate\n                                    ,[IsDeleted] = @IsDeleted\n                                    WHERE Id = @Id\";\n                return conn.Execute(updateSql, entity) > 0;\n            }\n        }\n    }\n}\n```\n未完待续....","slug":"Net-Core-从零开始搭建框架(一)","published":1,"updated":"2021-03-30T03:24:16.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx02002qvcuad71403yv","content":"<p>之前一直想学习一下用Vs Code开发,趁着最近有做一个小项目的想法,顺路学习一下</p>\n<span id=\"more\"></span>\n<h4 id=\"Vs-Code-技巧\"><a href=\"#Vs-Code-技巧\" class=\"headerlink\" title=\"Vs Code 技巧\"></a>Vs Code 技巧</h4><h5 id=\"推荐的Vs-Code插件\"><a href=\"#推荐的Vs-Code插件\" class=\"headerlink\" title=\"推荐的Vs Code插件\"></a>推荐的Vs Code插件</h5><ol>\n<li>vscode-solution-explorer //解决方案</li>\n<li>C#</li>\n<li>C# Extensions</li>\n<li>C# XML Documentation Comments //三行注释</li>\n</ol>\n<h5 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h5><ol>\n<li>F1 或 Ctrl+Shift+P: 打开命令面板</li>\n<li>Ctrl+` 打开命令行</li>\n<li>Shift+Alt+F 代码格式化</li>\n<li>Ctrl+B 侧边栏显/隐</li>\n<li>Ctrl+Shift+E 显示资源管理器</li>\n<li>Ctrl_Tab 切换文件</li>\n</ol>\n<h5 id=\"Vs-Code-运行生成XML注释文件\"><a href=\"#Vs-Code-运行生成XML注释文件\" class=\"headerlink\" title=\"Vs Code 运行生成XML注释文件\"></a>Vs Code 运行生成XML注释文件</h5><p>先在对应的项目csproj文件里节点PropertyGroup内添加代码：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;GenerateDocumentationFile&gt;<span class=\"literal\">true</span>&lt;/GenerateDocumentationFile&gt;</span><br><span class=\"line\">&lt;NoWarn&gt;$(NoWarn);<span class=\"number\">1591</span>&lt;Warn&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建项目和集成Swagger\"><a href=\"#创建项目和集成Swagger\" class=\"headerlink\" title=\"创建项目和集成Swagger\"></a>创建项目和集成Swagger</h4><p>先创建一个空白的解决方案,再往里面添加对应的项目,先添加一个ASP.NET CORE WEBAPI项目,名称为Caty.Core.Api.通过vscode-solution-explorer插件,这一步将十分简单,就像在vs中一样.</p>\n<h5 id=\"引入swagger插件\"><a href=\"#引入swagger插件\" class=\"headerlink\" title=\"引入swagger插件\"></a>引入swagger插件</h5><p>在终端控制台输入命令:dotnet add YourProjectName.csproj package Swashbuckle.AspNetCore</p>\n<h5 id=\"要增加的引用\"><a href=\"#要增加的引用\" class=\"headerlink\" title=\"要增加的引用\"></a>要增加的引用</h5><ol>\n<li>using System.IO;</li>\n<li>using Swashbuckle.AspNetCore.Swagger;</li>\n<li>using System.Reflection;</li>\n</ol>\n<h5 id=\"添加配置和Swagger中间件\"><a href=\"#添加配置和Swagger中间件\" class=\"headerlink\" title=\"添加配置和Swagger中间件\"></a>添加配置和Swagger中间件</h5><ol>\n<li><p>打开Startup.cs类，编辑ConfigureServices类</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">    services.AddSwaggerGen(c =&gt;&#123;</span><br><span class=\"line\">        c.SwaggerDoc(<span class=\"string\">&quot;v1&quot;</span>, <span class=\"keyword\">new</span> Info&#123;</span><br><span class=\"line\">            Version = <span class=\"string\">&quot;v1.0.0&quot;</span>,</span><br><span class=\"line\">            Title = <span class=\"string\">&quot;Core Api&quot;</span>,</span><br><span class=\"line\">            Description = <span class=\"string\">&quot;基础框架&quot;</span>,</span><br><span class=\"line\">            TermsOfService = <span class=\"string\">&quot;None&quot;</span>,</span><br><span class=\"line\">            Contact =<span class=\"keyword\">new</span> Swashbuckle.AspNetCore.Swagger.Contact&#123; Name = <span class=\"string\">&quot;Caty&quot;</span>, Email = <span class=\"string\">&quot;1120873075@qq.com&quot;</span>, Url = <span class=\"string\">&quot;https://chcaty.github.io/&quot;</span> &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//添加读取注释服务(需在生成时输出xml注释文件)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlFile = <span class=\"string\">$&quot;<span class=\"subst\">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); </span><br><span class=\"line\">        c.IncludeXmlComments(xmlPath,<span class=\"literal\">true</span>);<span class=\"comment\">//true表示显示控制器注释</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加header验证信息</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> security  = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>,IEnumerable&lt;<span class=\"built_in\">string</span>&gt;&gt;&#123; &#123;<span class=\"string\">&quot;Admin&quot;</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123;&#125; &#125;,&#125;;</span><br><span class=\"line\">        c.AddSecurityRequirement(security);</span><br><span class=\"line\">        c.AddSecurityDefinition(<span class=\"string\">&quot;Admin&quot;</span>,<span class=\"keyword\">new</span> ApiKeyScheme</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Description =  <span class=\"string\">&quot;JWT授权 参数结构: \\&quot;Authorization: Admin &#123;token&#125;\\&quot;&quot;</span>,</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;Authorization&quot;</span>,<span class=\"comment\">//默认的参数名</span></span><br><span class=\"line\">            In = <span class=\"string\">&quot;header&quot;</span>,<span class=\"comment\">//存放信息的位置(请求头中)</span></span><br><span class=\"line\">            Type =<span class=\"string\">&quot;apiKey&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;) ;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编辑Configure类</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseHsts();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger </span></span><br><span class=\"line\">    app.UseSwagger();</span><br><span class=\"line\">    app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SwaggerEndpoint(<span class=\"string\">&quot;/swagger/v1/swagger.json&quot;</span>,<span class=\"string\">&quot;Api Help V1&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"在框架中引入Dapper\"><a href=\"#在框架中引入Dapper\" class=\"headerlink\" title=\"在框架中引入Dapper\"></a>在框架中引入Dapper</h4><p>在解决方案中添加Business,Service,Entity,Common 四个类库</p>\n<h5 id=\"Entity类库创建User实体类\"><a href=\"#Entity类库创建User实体类\" class=\"headerlink\" title=\"Entity类库创建User实体类\"></a>Entity类库创建User实体类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Entity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 用户Id</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 用户名</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 密码</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Password &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 性别（0女，1男）</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Gender &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 出生年月日</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime Birthday &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建人</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CreateUserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建日期</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime CreateDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新人</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> UpdateUserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新日期</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime UpdateDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除标志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> IsDeleted &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在Common中设置连接字符串和DbConnection\"><a href=\"#在Common中设置连接字符串和DbConnection\" class=\"headerlink\" title=\"在Common中设置连接字符串和DbConnection\"></a>在Common中设置连接字符串和DbConnection</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.SqlClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DataBaseConfig</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">region</span> SqlServer连接配置</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> DefaultSqlConnectionString =  <span class=\"string\">@&quot;Data Source=.;Initial Catalog=Light;User ID=sa;Password=sa;&quot;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDbConnection <span class=\"title\">GetSqlConnection</span>(<span class=\"params\"><span class=\"built_in\">string</span> sqlConnectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">string</span>.IsNullOrWhiteSpace(sqlConnectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sqlConnectionString = DefaultSqlConnectionString;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            IDbConnection conn = <span class=\"keyword\">new</span> SqlConnection(sqlConnectionString);</span><br><span class=\"line\">            conn.Open();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用泛型针对每一个表定义基本的CRUD接口-然后IUserRepository继承它\"><a href=\"#使用泛型针对每一个表定义基本的CRUD接口-然后IUserRepository继承它\" class=\"headerlink\" title=\"使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它\"></a>使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它</h5><p>定义</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IBaseService</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">where</span> <span class=\"title\">T</span>:<span class=\"keyword\">class</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span>实体类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">CreateEntity</span>(<span class=\"params\">T entity,<span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id获得一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">RetriveOneEntityById</span>(<span class=\"params\"><span class=\"built_in\">int</span> id,<span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获得全部实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">IEnumerable&lt;T&gt; <span class=\"title\">RetriveAllEntity</span>(<span class=\"params\"><span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 修改一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span>要修改的实体<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">UpdateEntity</span>(<span class=\"params\">T entity,<span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id删除一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntityById</span>(<span class=\"params\"><span class=\"built_in\">int</span> id,<span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Interface</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span>  <span class=\"keyword\">interface</span> <span class=\"title\">IUserService</span> :<span class=\"title\">IBaseService</span>&lt;<span class=\"title\">User</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实现IUserRepository定义的接口\"><a href=\"#实现IUserRepository定义的接口\" class=\"headerlink\" title=\"实现IUserRepository定义的接口\"></a>实现IUserRepository定义的接口</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Common;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Dapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Implement</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 用户仓储</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserService</span> : <span class=\"title\">IUserService</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span>用户<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">CreateEntity</span>(<span class=\"params\">User entity, <span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> insertSql = <span class=\"string\">@&quot;INSERT INTO [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                             ([UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[IsDeleted])</span></span><br><span class=\"line\"><span class=\"string\">                                       VALUES</span></span><br><span class=\"line\"><span class=\"string\">                                             (@UserName</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Password</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Gender</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Birthday</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@CreateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@CreateDate</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@UpdateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@UpdateDate</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@IsDeleted)&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(insertSql, entity) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id删除一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntityById</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, <span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> deleteSql = <span class=\"string\">@&quot;DELETE FROM [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                              WHERE Id = @Id&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(deleteSql, <span class=\"keyword\">new</span> &#123; Id = id &#125;) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取所有用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;User&gt; <span class=\"title\">RetriveAllEntity</span>(<span class=\"params\"><span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> querySql = <span class=\"string\">@&quot;SELECT [Id]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[IsDeleted]</span></span><br><span class=\"line\"><span class=\"string\">                                        FROM [dbo].[User]&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Query&lt;User&gt;(querySql);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id获取一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">RetriveOneEntityById</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, <span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> querySql = <span class=\"string\">@&quot;SELECT [Id]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[IsDeleted]</span></span><br><span class=\"line\"><span class=\"string\">                                       FROM [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                     WHERE Id = @Id&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.QueryFirstOrDefault&lt;User&gt;(querySql, <span class=\"keyword\">new</span> &#123; Id = id &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 修改一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span>要修改的用户<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">UpdateEntity</span>(<span class=\"params\">User entity, <span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> updateSql = <span class=\"string\">@&quot;UPDATE [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                    SET [UserName] = @UserName</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Password] = @Password</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Gender] = @Gender</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Birthday] = @Birthday</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[UpdateUserId] = @UpdateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[UpdateDate] = @UpdateDate</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[IsDeleted] = @IsDeleted</span></span><br><span class=\"line\"><span class=\"string\">                                    WHERE Id = @Id&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(updateSql, entity) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>未完待续….</p>\n","site":{"data":{}},"length":9264,"excerpt":"<p>之前一直想学习一下用Vs Code开发,趁着最近有做一个小项目的想法,顺路学习一下</p>","more":"<h4 id=\"Vs-Code-技巧\"><a href=\"#Vs-Code-技巧\" class=\"headerlink\" title=\"Vs Code 技巧\"></a>Vs Code 技巧</h4><h5 id=\"推荐的Vs-Code插件\"><a href=\"#推荐的Vs-Code插件\" class=\"headerlink\" title=\"推荐的Vs Code插件\"></a>推荐的Vs Code插件</h5><ol>\n<li>vscode-solution-explorer //解决方案</li>\n<li>C#</li>\n<li>C# Extensions</li>\n<li>C# XML Documentation Comments //三行注释</li>\n</ol>\n<h5 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h5><ol>\n<li>F1 或 Ctrl+Shift+P: 打开命令面板</li>\n<li>Ctrl+` 打开命令行</li>\n<li>Shift+Alt+F 代码格式化</li>\n<li>Ctrl+B 侧边栏显/隐</li>\n<li>Ctrl+Shift+E 显示资源管理器</li>\n<li>Ctrl_Tab 切换文件</li>\n</ol>\n<h5 id=\"Vs-Code-运行生成XML注释文件\"><a href=\"#Vs-Code-运行生成XML注释文件\" class=\"headerlink\" title=\"Vs Code 运行生成XML注释文件\"></a>Vs Code 运行生成XML注释文件</h5><p>先在对应的项目csproj文件里节点PropertyGroup内添加代码：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;GenerateDocumentationFile&gt;<span class=\"literal\">true</span>&lt;/GenerateDocumentationFile&gt;</span><br><span class=\"line\">&lt;NoWarn&gt;$(NoWarn);<span class=\"number\">1591</span>&lt;Warn&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建项目和集成Swagger\"><a href=\"#创建项目和集成Swagger\" class=\"headerlink\" title=\"创建项目和集成Swagger\"></a>创建项目和集成Swagger</h4><p>先创建一个空白的解决方案,再往里面添加对应的项目,先添加一个ASP.NET CORE WEBAPI项目,名称为Caty.Core.Api.通过vscode-solution-explorer插件,这一步将十分简单,就像在vs中一样.</p>\n<h5 id=\"引入swagger插件\"><a href=\"#引入swagger插件\" class=\"headerlink\" title=\"引入swagger插件\"></a>引入swagger插件</h5><p>在终端控制台输入命令:dotnet add YourProjectName.csproj package Swashbuckle.AspNetCore</p>\n<h5 id=\"要增加的引用\"><a href=\"#要增加的引用\" class=\"headerlink\" title=\"要增加的引用\"></a>要增加的引用</h5><ol>\n<li>using System.IO;</li>\n<li>using Swashbuckle.AspNetCore.Swagger;</li>\n<li>using System.Reflection;</li>\n</ol>\n<h5 id=\"添加配置和Swagger中间件\"><a href=\"#添加配置和Swagger中间件\" class=\"headerlink\" title=\"添加配置和Swagger中间件\"></a>添加配置和Swagger中间件</h5><ol>\n<li><p>打开Startup.cs类，编辑ConfigureServices类</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">    services.AddSwaggerGen(c =&gt;&#123;</span><br><span class=\"line\">        c.SwaggerDoc(<span class=\"string\">&quot;v1&quot;</span>, <span class=\"keyword\">new</span> Info&#123;</span><br><span class=\"line\">            Version = <span class=\"string\">&quot;v1.0.0&quot;</span>,</span><br><span class=\"line\">            Title = <span class=\"string\">&quot;Core Api&quot;</span>,</span><br><span class=\"line\">            Description = <span class=\"string\">&quot;基础框架&quot;</span>,</span><br><span class=\"line\">            TermsOfService = <span class=\"string\">&quot;None&quot;</span>,</span><br><span class=\"line\">            Contact =<span class=\"keyword\">new</span> Swashbuckle.AspNetCore.Swagger.Contact&#123; Name = <span class=\"string\">&quot;Caty&quot;</span>, Email = <span class=\"string\">&quot;1120873075@qq.com&quot;</span>, Url = <span class=\"string\">&quot;https://chcaty.github.io/&quot;</span> &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//添加读取注释服务(需在生成时输出xml注释文件)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlFile = <span class=\"string\">$&quot;<span class=\"subst\">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); </span><br><span class=\"line\">        c.IncludeXmlComments(xmlPath,<span class=\"literal\">true</span>);<span class=\"comment\">//true表示显示控制器注释</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加header验证信息</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> security  = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>,IEnumerable&lt;<span class=\"built_in\">string</span>&gt;&gt;&#123; &#123;<span class=\"string\">&quot;Admin&quot;</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123;&#125; &#125;,&#125;;</span><br><span class=\"line\">        c.AddSecurityRequirement(security);</span><br><span class=\"line\">        c.AddSecurityDefinition(<span class=\"string\">&quot;Admin&quot;</span>,<span class=\"keyword\">new</span> ApiKeyScheme</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Description =  <span class=\"string\">&quot;JWT授权 参数结构: \\&quot;Authorization: Admin &#123;token&#125;\\&quot;&quot;</span>,</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;Authorization&quot;</span>,<span class=\"comment\">//默认的参数名</span></span><br><span class=\"line\">            In = <span class=\"string\">&quot;header&quot;</span>,<span class=\"comment\">//存放信息的位置(请求头中)</span></span><br><span class=\"line\">            Type =<span class=\"string\">&quot;apiKey&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;) ;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编辑Configure类</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseHsts();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger </span></span><br><span class=\"line\">    app.UseSwagger();</span><br><span class=\"line\">    app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SwaggerEndpoint(<span class=\"string\">&quot;/swagger/v1/swagger.json&quot;</span>,<span class=\"string\">&quot;Api Help V1&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"在框架中引入Dapper\"><a href=\"#在框架中引入Dapper\" class=\"headerlink\" title=\"在框架中引入Dapper\"></a>在框架中引入Dapper</h4><p>在解决方案中添加Business,Service,Entity,Common 四个类库</p>\n<h5 id=\"Entity类库创建User实体类\"><a href=\"#Entity类库创建User实体类\" class=\"headerlink\" title=\"Entity类库创建User实体类\"></a>Entity类库创建User实体类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Entity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 用户Id</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 用户名</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 密码</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Password &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 性别（0女，1男）</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Gender &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 出生年月日</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime Birthday &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建人</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> CreateUserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建日期</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime CreateDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新人</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> UpdateUserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新日期</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime UpdateDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除标志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> IsDeleted &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在Common中设置连接字符串和DbConnection\"><a href=\"#在Common中设置连接字符串和DbConnection\" class=\"headerlink\" title=\"在Common中设置连接字符串和DbConnection\"></a>在Common中设置连接字符串和DbConnection</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.SqlClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DataBaseConfig</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">region</span> SqlServer连接配置</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> DefaultSqlConnectionString =  <span class=\"string\">@&quot;Data Source=.;Initial Catalog=Light;User ID=sa;Password=sa;&quot;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDbConnection <span class=\"title\">GetSqlConnection</span>(<span class=\"params\"><span class=\"built_in\">string</span> sqlConnectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">string</span>.IsNullOrWhiteSpace(sqlConnectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sqlConnectionString = DefaultSqlConnectionString;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            IDbConnection conn = <span class=\"keyword\">new</span> SqlConnection(sqlConnectionString);</span><br><span class=\"line\">            conn.Open();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用泛型针对每一个表定义基本的CRUD接口-然后IUserRepository继承它\"><a href=\"#使用泛型针对每一个表定义基本的CRUD接口-然后IUserRepository继承它\" class=\"headerlink\" title=\"使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它\"></a>使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它</h5><p>定义</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IBaseService</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">where</span> <span class=\"title\">T</span>:<span class=\"keyword\">class</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span>实体类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">CreateEntity</span>(<span class=\"params\">T entity,<span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id获得一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">RetriveOneEntityById</span>(<span class=\"params\"><span class=\"built_in\">int</span> id,<span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获得全部实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">IEnumerable&lt;T&gt; <span class=\"title\">RetriveAllEntity</span>(<span class=\"params\"><span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 修改一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span>要修改的实体<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">UpdateEntity</span>(<span class=\"params\">T entity,<span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id删除一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntityById</span>(<span class=\"params\"><span class=\"built_in\">int</span> id,<span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Interface</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span>  <span class=\"keyword\">interface</span> <span class=\"title\">IUserService</span> :<span class=\"title\">IBaseService</span>&lt;<span class=\"title\">User</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实现IUserRepository定义的接口\"><a href=\"#实现IUserRepository定义的接口\" class=\"headerlink\" title=\"实现IUserRepository定义的接口\"></a>实现IUserRepository定义的接口</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Common;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Dapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Implement</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 用户仓储</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserService</span> : <span class=\"title\">IUserService</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span>用户<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">CreateEntity</span>(<span class=\"params\">User entity, <span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> insertSql = <span class=\"string\">@&quot;INSERT INTO [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                             ([UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[IsDeleted])</span></span><br><span class=\"line\"><span class=\"string\">                                       VALUES</span></span><br><span class=\"line\"><span class=\"string\">                                             (@UserName</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Password</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Gender</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Birthday</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@CreateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@CreateDate</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@UpdateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@UpdateDate</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@IsDeleted)&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(insertSql, entity) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id删除一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntityById</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, <span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> deleteSql = <span class=\"string\">@&quot;DELETE FROM [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                              WHERE Id = @Id&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(deleteSql, <span class=\"keyword\">new</span> &#123; Id = id &#125;) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取所有用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;User&gt; <span class=\"title\">RetriveAllEntity</span>(<span class=\"params\"><span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> querySql = <span class=\"string\">@&quot;SELECT [Id]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[IsDeleted]</span></span><br><span class=\"line\"><span class=\"string\">                                        FROM [dbo].[User]&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Query&lt;User&gt;(querySql);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id获取一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">RetriveOneEntityById</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, <span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> querySql = <span class=\"string\">@&quot;SELECT [Id]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[IsDeleted]</span></span><br><span class=\"line\"><span class=\"string\">                                       FROM [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                     WHERE Id = @Id&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.QueryFirstOrDefault&lt;User&gt;(querySql, <span class=\"keyword\">new</span> &#123; Id = id &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 修改一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span>要修改的用户<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">UpdateEntity</span>(<span class=\"params\">User entity, <span class=\"built_in\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> updateSql = <span class=\"string\">@&quot;UPDATE [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                    SET [UserName] = @UserName</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Password] = @Password</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Gender] = @Gender</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Birthday] = @Birthday</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[UpdateUserId] = @UpdateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[UpdateDate] = @UpdateDate</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[IsDeleted] = @IsDeleted</span></span><br><span class=\"line\"><span class=\"string\">                                    WHERE Id = @Id&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(updateSql, entity) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>未完待续….</p>"},{"title":".Net Core 使用swagger进行API接口文档管理","date":"2018-03-11T14:20:31.000Z","_content":"##### 什么是Swagger\nSwagger可以从不同的代码中,根据注释生成API信息,swagger拥有强大的社区,并且对于各种语言都支持良好,有很多的工具可以通过swagger生成的文件生成API文档\n<!--more-->\n\n##### .Net Core中使用\n.Net Core中使用,首先要用nuget引用Swashbuckle.AspNetCore,在startup.cs中加入如下代码\n\n###### Startup.cs\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n    services.AddSwaggerGen(c => \n    {\n        c.SwaggerDoc(\"v1\", new Info { Title = \"Hello\", Version = \"v1\" });\n        var basePath = PlatformServices.Default.Application.ApplicationBasePath;\n        var xmlPath = Path.Combine(basePath, \"WebApplication2.xml\");\n        c.IncludeXmlComments(xmlPath);\n    });\n    services.AddMvcCore().AddApiExplorer();\n}\n\npublic void Configure(IApplicationBuilderapp, IHostingEnvironment env)\n{\n    if(env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    app.UseMvcWithDefaultRoute();\n    app.UseSwagger(c =>\n    {\n\n    });\n    app.UseSwaggerUI(c =>\n    {\n        c.ShowExtensions();\n        c.VaildatorUrl(null);\n\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"test V1\");\n    });\n}\n```\n\n以上部分为加载swagger的代码,位于startup.cs中,下面是controller代码\n###### ValuesController.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace WebApplication2.Controllers\n{\n    /// <summary>\n    /// 测试信息\n    /// </summmary>\n    /// <returns></returns>\n    [Route(\"api/[controller]/[action]\")]\n    public class ValuesController : Controller\n    {\n        /// <summary>\n        /// 获得所有信息\n        /// </summmary>\n        /// <returns></returns>\n        [HttpGet]\n        public IEnumercble<string> Get()\n        {\n            return new string[] { \"value1\", \"value2\" };\n        }\n\n        /// <summary>\n        /// 根据ID获取信息\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        /// <returns></returns>\n        // Get api/values/5\n        [HttpGet(\"{id}\")]\n        public string Get(int id)\n        {\n            return \"value\";\n        }\n\n        /// <summary>\n        /// Post数据信息\n        /// </summmary>\n        /// <param name=\"value\"></param>\n        // POST api/values\n        [HttpPost]\n        public void Post([FromBody]string value)\n        {\n\n        }\n\n        /// <summary>\n        /// 根据ID put数据\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"value\"></param>\n        // PUT api/values/5\n        [HttpPut(\"{id}\")]\n        public void Put(int id, [FromBody]string value)\n        {\n\n        }\n\n        /// <summary>\n        /// 根据ID删除数据\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        // DELETE api/values/5\n        [HttpDelete(\"{id}\")]\n        public void Delete(int id)\n        {\n\n        }\n\n        /// <summary>\n        /// 复杂数据操作\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        [HttpPost]\n        public namevalue test(namevalue _info)\n        {\n            return _info;\n        }\n    }\n\n    public class namevalue\n    {\n        /// <summary>\n        /// name的信息\n        /// </summmary>\n        public String name { get; set; }\n\n        /// <summary>\n        /// value的信息\n        /// </summmary>\n        public String value { get; set; }\n    }\n}\n```\n\n","source":"_posts/Net-Core-使用swagger进行API接口文档管理.md","raw":"---\ntitle: .Net Core 使用swagger进行API接口文档管理\ndate: 2018-03-11 22:20:31\ncategories: .Net Core\ntags:\n - .Net Core\n - WebApi\n---\n##### 什么是Swagger\nSwagger可以从不同的代码中,根据注释生成API信息,swagger拥有强大的社区,并且对于各种语言都支持良好,有很多的工具可以通过swagger生成的文件生成API文档\n<!--more-->\n\n##### .Net Core中使用\n.Net Core中使用,首先要用nuget引用Swashbuckle.AspNetCore,在startup.cs中加入如下代码\n\n###### Startup.cs\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n    services.AddSwaggerGen(c => \n    {\n        c.SwaggerDoc(\"v1\", new Info { Title = \"Hello\", Version = \"v1\" });\n        var basePath = PlatformServices.Default.Application.ApplicationBasePath;\n        var xmlPath = Path.Combine(basePath, \"WebApplication2.xml\");\n        c.IncludeXmlComments(xmlPath);\n    });\n    services.AddMvcCore().AddApiExplorer();\n}\n\npublic void Configure(IApplicationBuilderapp, IHostingEnvironment env)\n{\n    if(env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    app.UseMvcWithDefaultRoute();\n    app.UseSwagger(c =>\n    {\n\n    });\n    app.UseSwaggerUI(c =>\n    {\n        c.ShowExtensions();\n        c.VaildatorUrl(null);\n\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"test V1\");\n    });\n}\n```\n\n以上部分为加载swagger的代码,位于startup.cs中,下面是controller代码\n###### ValuesController.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace WebApplication2.Controllers\n{\n    /// <summary>\n    /// 测试信息\n    /// </summmary>\n    /// <returns></returns>\n    [Route(\"api/[controller]/[action]\")]\n    public class ValuesController : Controller\n    {\n        /// <summary>\n        /// 获得所有信息\n        /// </summmary>\n        /// <returns></returns>\n        [HttpGet]\n        public IEnumercble<string> Get()\n        {\n            return new string[] { \"value1\", \"value2\" };\n        }\n\n        /// <summary>\n        /// 根据ID获取信息\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        /// <returns></returns>\n        // Get api/values/5\n        [HttpGet(\"{id}\")]\n        public string Get(int id)\n        {\n            return \"value\";\n        }\n\n        /// <summary>\n        /// Post数据信息\n        /// </summmary>\n        /// <param name=\"value\"></param>\n        // POST api/values\n        [HttpPost]\n        public void Post([FromBody]string value)\n        {\n\n        }\n\n        /// <summary>\n        /// 根据ID put数据\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"value\"></param>\n        // PUT api/values/5\n        [HttpPut(\"{id}\")]\n        public void Put(int id, [FromBody]string value)\n        {\n\n        }\n\n        /// <summary>\n        /// 根据ID删除数据\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        // DELETE api/values/5\n        [HttpDelete(\"{id}\")]\n        public void Delete(int id)\n        {\n\n        }\n\n        /// <summary>\n        /// 复杂数据操作\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        [HttpPost]\n        public namevalue test(namevalue _info)\n        {\n            return _info;\n        }\n    }\n\n    public class namevalue\n    {\n        /// <summary>\n        /// name的信息\n        /// </summmary>\n        public String name { get; set; }\n\n        /// <summary>\n        /// value的信息\n        /// </summmary>\n        public String value { get; set; }\n    }\n}\n```\n\n","slug":"Net-Core-使用swagger进行API接口文档管理","published":1,"updated":"2021-03-30T03:24:16.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx03002tvcua546948s3","content":"<h5 id=\"什么是Swagger\"><a href=\"#什么是Swagger\" class=\"headerlink\" title=\"什么是Swagger\"></a>什么是Swagger</h5><p>Swagger可以从不同的代码中,根据注释生成API信息,swagger拥有强大的社区,并且对于各种语言都支持良好,有很多的工具可以通过swagger生成的文件生成API文档</p>\n<span id=\"more\"></span>\n\n<h5 id=\"Net-Core中使用\"><a href=\"#Net-Core中使用\" class=\"headerlink\" title=\".Net Core中使用\"></a>.Net Core中使用</h5><p>.Net Core中使用,首先要用nuget引用Swashbuckle.AspNetCore,在startup.cs中加入如下代码</p>\n<h6 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\">    services.AddSwaggerGen(c =&gt; </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SwaggerDoc(<span class=\"string\">&quot;v1&quot;</span>, <span class=\"keyword\">new</span> Info &#123; Title = <span class=\"string\">&quot;Hello&quot;</span>, Version = <span class=\"string\">&quot;v1&quot;</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> basePath = PlatformServices.Default.Application.ApplicationBasePath;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlPath = Path.Combine(basePath, <span class=\"string\">&quot;WebApplication2.xml&quot;</span>);</span><br><span class=\"line\">        c.IncludeXmlComments(xmlPath);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    services.AddMvcCore().AddApiExplorer();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilderapp, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    app.UseSwagger(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.ShowExtensions();</span><br><span class=\"line\">        c.VaildatorUrl(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        c.SwaggerEndpoint(<span class=\"string\">&quot;/swagger/v1/swagger.json&quot;</span>, <span class=\"string\">&quot;test V1&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上部分为加载swagger的代码,位于startup.cs中,下面是controller代码</p>\n<h6 id=\"ValuesController-cs\"><a href=\"#ValuesController-cs\" class=\"headerlink\" title=\"ValuesController.cs\"></a>ValuesController.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WebApplication2.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 测试信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">&quot;api/[controller]/[action]&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValuesController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获得所有信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumercble&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123; <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span> &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID获取信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// Get api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"built_in\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;value&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Post数据信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;value&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// POST api/values</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromBody]<span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID put数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;value&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// PUT api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPut(<span class=\"meta-string\">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Put</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, [FromBody]<span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID删除数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// DELETE api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpDelete(<span class=\"meta-string\">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Delete</span>(<span class=\"params\"><span class=\"built_in\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 复杂数据操作</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> namevalue <span class=\"title\">test</span>(<span class=\"params\">namevalue _info</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _info;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">namevalue</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> name的信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> value的信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"keyword\">value</span> &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":3060,"excerpt":"<h5 id=\"什么是Swagger\"><a href=\"#什么是Swagger\" class=\"headerlink\" title=\"什么是Swagger\"></a>什么是Swagger</h5><p>Swagger可以从不同的代码中,根据注释生成API信息,swagger拥有强大的社区,并且对于各种语言都支持良好,有很多的工具可以通过swagger生成的文件生成API文档</p>","more":"<h5 id=\"Net-Core中使用\"><a href=\"#Net-Core中使用\" class=\"headerlink\" title=\".Net Core中使用\"></a>.Net Core中使用</h5><p>.Net Core中使用,首先要用nuget引用Swashbuckle.AspNetCore,在startup.cs中加入如下代码</p>\n<h6 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\">    services.AddSwaggerGen(c =&gt; </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SwaggerDoc(<span class=\"string\">&quot;v1&quot;</span>, <span class=\"keyword\">new</span> Info &#123; Title = <span class=\"string\">&quot;Hello&quot;</span>, Version = <span class=\"string\">&quot;v1&quot;</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> basePath = PlatformServices.Default.Application.ApplicationBasePath;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlPath = Path.Combine(basePath, <span class=\"string\">&quot;WebApplication2.xml&quot;</span>);</span><br><span class=\"line\">        c.IncludeXmlComments(xmlPath);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    services.AddMvcCore().AddApiExplorer();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilderapp, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    app.UseSwagger(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.ShowExtensions();</span><br><span class=\"line\">        c.VaildatorUrl(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        c.SwaggerEndpoint(<span class=\"string\">&quot;/swagger/v1/swagger.json&quot;</span>, <span class=\"string\">&quot;test V1&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上部分为加载swagger的代码,位于startup.cs中,下面是controller代码</p>\n<h6 id=\"ValuesController-cs\"><a href=\"#ValuesController-cs\" class=\"headerlink\" title=\"ValuesController.cs\"></a>ValuesController.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WebApplication2.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 测试信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">&quot;api/[controller]/[action]&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValuesController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获得所有信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumercble&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123; <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span> &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID获取信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// Get api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"built_in\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;value&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Post数据信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;value&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// POST api/values</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromBody]<span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID put数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;value&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// PUT api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPut(<span class=\"meta-string\">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Put</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, [FromBody]<span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID删除数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// DELETE api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpDelete(<span class=\"meta-string\">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Delete</span>(<span class=\"params\"><span class=\"built_in\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 复杂数据操作</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> namevalue <span class=\"title\">test</span>(<span class=\"params\">namevalue _info</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _info;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">namevalue</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> name的信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> value的信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"keyword\">value</span> &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net Core 使用日志NLog","date":"2018-03-16T13:40:12.000Z","_content":"将 ASP.NET Core 提供的默认日志提供程序替换成 NLog。\n<!--more-->\n\n##### 添加相关依赖\n```\nInstall-Package NLog.Extensions.Logging -Pre\nInstall-Package NLog.Web.AspNetCore\n```\n\n##### 创建好Nlog配置文件(nlog.config)\n```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"  \n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n      autoReload=\"true\"  \n      internalLogLevel=\"Warn\"  \n      internalLogFile=\"internal-nlog.txt\">  \n  \n  <!--define various log targets-->  \n  <targets>  \n  \n    <!--write logs to file-->  \n    <target xsi:type=\"File\" name=\"allfile\" fileName=\"nlog-all-${shortdate}.log\"  \n                 layout=\"${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}\" />  \n  \n    <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"nlog-my-${shortdate}.log\"  \n                 layout=\"${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}\" />  \n  \n    <target xsi:type=\"Null\" name=\"blackhole\" />  \n  \n  </targets>  \n  \n  <rules>  \n    <!--All logs, including from Microsoft-->  \n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" />  \n  \n    <!--Skip Microsoft logs and so log only own logs-->  \n    <logger name=\"Microsoft.*\" minlevel=\"Trace\" writeTo=\"blackhole\" final=\"true\" />  \n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" />  \n  </rules>  \n</nlog>  \n```\n\n##### Startup.cs中添加使用的服务\n```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)  \n{\n    loggerFactory.AddNLog();//添加NLog  \n    env.ConfigureNLog(\"nlog.config\");//读取Nlog配置文件  \n    //..............  \n} \n```\n\n##### 使用日志\n```cs\n//获得日志的实例  \nstatic Logger Logger = LogManager.GetCurrentClassLogger();  \npublic IActionResult Index()  \n{\n    Logger.Info(\"普通信息日志-----------\");  \n    Logger.Debug(\"调试日志-----------\");  \n    Logger.Error(\"错误日志-----------\");  \n    Logger.Fatal(\"异常日志-----------\");  \n    Logger.Warn(\"警告日志-----------\");  \n    Logger.Trace(\"跟踪日志-----------\");  \n    Logger.Log(NLog.LogLevel.Warn, \"Log日志------------------\");  \n    return View();  \n}  \n```","source":"_posts/Net-Core-使用日志NLog.md","raw":"---\ntitle: .Net Core 使用日志NLog\ndate: 2018-03-16 21:40:12\ncategories: .Net Core\ntags:\n - .Net Core\n - NLog\n---\n将 ASP.NET Core 提供的默认日志提供程序替换成 NLog。\n<!--more-->\n\n##### 添加相关依赖\n```\nInstall-Package NLog.Extensions.Logging -Pre\nInstall-Package NLog.Web.AspNetCore\n```\n\n##### 创建好Nlog配置文件(nlog.config)\n```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"  \n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n      autoReload=\"true\"  \n      internalLogLevel=\"Warn\"  \n      internalLogFile=\"internal-nlog.txt\">  \n  \n  <!--define various log targets-->  \n  <targets>  \n  \n    <!--write logs to file-->  \n    <target xsi:type=\"File\" name=\"allfile\" fileName=\"nlog-all-${shortdate}.log\"  \n                 layout=\"${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}\" />  \n  \n    <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"nlog-my-${shortdate}.log\"  \n                 layout=\"${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}\" />  \n  \n    <target xsi:type=\"Null\" name=\"blackhole\" />  \n  \n  </targets>  \n  \n  <rules>  \n    <!--All logs, including from Microsoft-->  \n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" />  \n  \n    <!--Skip Microsoft logs and so log only own logs-->  \n    <logger name=\"Microsoft.*\" minlevel=\"Trace\" writeTo=\"blackhole\" final=\"true\" />  \n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" />  \n  </rules>  \n</nlog>  \n```\n\n##### Startup.cs中添加使用的服务\n```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)  \n{\n    loggerFactory.AddNLog();//添加NLog  \n    env.ConfigureNLog(\"nlog.config\");//读取Nlog配置文件  \n    //..............  \n} \n```\n\n##### 使用日志\n```cs\n//获得日志的实例  \nstatic Logger Logger = LogManager.GetCurrentClassLogger();  \npublic IActionResult Index()  \n{\n    Logger.Info(\"普通信息日志-----------\");  \n    Logger.Debug(\"调试日志-----------\");  \n    Logger.Error(\"错误日志-----------\");  \n    Logger.Fatal(\"异常日志-----------\");  \n    Logger.Warn(\"警告日志-----------\");  \n    Logger.Trace(\"跟踪日志-----------\");  \n    Logger.Log(NLog.LogLevel.Warn, \"Log日志------------------\");  \n    return View();  \n}  \n```","slug":"Net-Core-使用日志NLog","published":1,"updated":"2021-03-30T03:24:16.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx04002xvcua3n9pgin0","content":"<p>将 ASP.NET Core 提供的默认日志提供程序替换成 NLog。</p>\n<span id=\"more\"></span>\n\n<h5 id=\"添加相关依赖\"><a href=\"#添加相关依赖\" class=\"headerlink\" title=\"添加相关依赖\"></a>添加相关依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package NLog.Extensions.Logging -Pre</span><br><span class=\"line\">Install-Package NLog.Web.AspNetCore</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建好Nlog配置文件-nlog-config\"><a href=\"#创建好Nlog配置文件-nlog-config\" class=\"headerlink\" title=\"创建好Nlog配置文件(nlog.config)\"></a>创建好Nlog配置文件(nlog.config)</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span> ?&gt;  </span><br><span class=\"line\">&lt;nlog xmlns=<span class=\"string\">&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;</span>  </span><br><span class=\"line\">      xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span><br><span class=\"line\">      autoReload=<span class=\"string\">&quot;true&quot;</span>  </span><br><span class=\"line\">      internalLogLevel=<span class=\"string\">&quot;Warn&quot;</span>  </span><br><span class=\"line\">      internalLogFile=<span class=\"string\">&quot;internal-nlog.txt&quot;</span>&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;!--define various log targets--&gt;  </span><br><span class=\"line\">  &lt;targets&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;!--write logs to file--&gt;  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">&quot;File&quot;</span> name=<span class=\"string\">&quot;allfile&quot;</span> fileName=<span class=\"string\">&quot;nlog-all-$&#123;shortdate&#125;.log&quot;</span>  </span><br><span class=\"line\">                 layout=<span class=\"string\">&quot;$&#123;longdate&#125;|$&#123;logger&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;message&#125; $&#123;exception&#125;&quot;</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">&quot;File&quot;</span> name=<span class=\"string\">&quot;ownFile-web&quot;</span> fileName=<span class=\"string\">&quot;nlog-my-$&#123;shortdate&#125;.log&quot;</span>  </span><br><span class=\"line\">                 layout=<span class=\"string\">&quot;$&#123;longdate&#125;|$&#123;logger&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;message&#125; $&#123;exception&#125;&quot;</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">&quot;Null&quot;</span> name=<span class=\"string\">&quot;blackhole&quot;</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;/targets&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;rules&gt;  </span><br><span class=\"line\">    &lt;!--All logs, including <span class=\"keyword\">from</span> Microsoft--&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">&quot;*&quot;</span> minlevel=<span class=\"string\">&quot;Trace&quot;</span> writeTo=<span class=\"string\">&quot;allfile&quot;</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;!--Skip Microsoft logs <span class=\"keyword\">and</span> so log only own logs--&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">&quot;Microsoft.*&quot;</span> minlevel=<span class=\"string\">&quot;Trace&quot;</span> writeTo=<span class=\"string\">&quot;blackhole&quot;</span> final=<span class=\"string\">&quot;true&quot;</span> /&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">&quot;*&quot;</span> minlevel=<span class=\"string\">&quot;Trace&quot;</span> writeTo=<span class=\"string\">&quot;ownFile-web&quot;</span> /&gt;  </span><br><span class=\"line\">  &lt;/rules&gt;  </span><br><span class=\"line\">&lt;/nlog&gt;  </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Startup-cs中添加使用的服务\"><a href=\"#Startup-cs中添加使用的服务\" class=\"headerlink\" title=\"Startup.cs中添加使用的服务\"></a>Startup.cs中添加使用的服务</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddNLog();<span class=\"comment\">//添加NLog  </span></span><br><span class=\"line\">    env.ConfigureNLog(<span class=\"string\">&quot;nlog.config&quot;</span>);<span class=\"comment\">//读取Nlog配置文件  </span></span><br><span class=\"line\">    <span class=\"comment\">//..............  </span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用日志\"><a href=\"#使用日志\" class=\"headerlink\" title=\"使用日志\"></a>使用日志</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获得日志的实例  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> Logger Logger = LogManager.GetCurrentClassLogger();  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Logger.Info(<span class=\"string\">&quot;普通信息日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Debug(<span class=\"string\">&quot;调试日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Error(<span class=\"string\">&quot;错误日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Fatal(<span class=\"string\">&quot;异常日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Warn(<span class=\"string\">&quot;警告日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Trace(<span class=\"string\">&quot;跟踪日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Log(NLog.LogLevel.Warn, <span class=\"string\">&quot;Log日志------------------&quot;</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2303,"excerpt":"<p>将 ASP.NET Core 提供的默认日志提供程序替换成 NLog。</p>","more":"<h5 id=\"添加相关依赖\"><a href=\"#添加相关依赖\" class=\"headerlink\" title=\"添加相关依赖\"></a>添加相关依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package NLog.Extensions.Logging -Pre</span><br><span class=\"line\">Install-Package NLog.Web.AspNetCore</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建好Nlog配置文件-nlog-config\"><a href=\"#创建好Nlog配置文件-nlog-config\" class=\"headerlink\" title=\"创建好Nlog配置文件(nlog.config)\"></a>创建好Nlog配置文件(nlog.config)</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span> ?&gt;  </span><br><span class=\"line\">&lt;nlog xmlns=<span class=\"string\">&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;</span>  </span><br><span class=\"line\">      xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span><br><span class=\"line\">      autoReload=<span class=\"string\">&quot;true&quot;</span>  </span><br><span class=\"line\">      internalLogLevel=<span class=\"string\">&quot;Warn&quot;</span>  </span><br><span class=\"line\">      internalLogFile=<span class=\"string\">&quot;internal-nlog.txt&quot;</span>&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;!--define various log targets--&gt;  </span><br><span class=\"line\">  &lt;targets&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;!--write logs to file--&gt;  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">&quot;File&quot;</span> name=<span class=\"string\">&quot;allfile&quot;</span> fileName=<span class=\"string\">&quot;nlog-all-$&#123;shortdate&#125;.log&quot;</span>  </span><br><span class=\"line\">                 layout=<span class=\"string\">&quot;$&#123;longdate&#125;|$&#123;logger&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;message&#125; $&#123;exception&#125;&quot;</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">&quot;File&quot;</span> name=<span class=\"string\">&quot;ownFile-web&quot;</span> fileName=<span class=\"string\">&quot;nlog-my-$&#123;shortdate&#125;.log&quot;</span>  </span><br><span class=\"line\">                 layout=<span class=\"string\">&quot;$&#123;longdate&#125;|$&#123;logger&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;message&#125; $&#123;exception&#125;&quot;</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">&quot;Null&quot;</span> name=<span class=\"string\">&quot;blackhole&quot;</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;/targets&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;rules&gt;  </span><br><span class=\"line\">    &lt;!--All logs, including <span class=\"keyword\">from</span> Microsoft--&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">&quot;*&quot;</span> minlevel=<span class=\"string\">&quot;Trace&quot;</span> writeTo=<span class=\"string\">&quot;allfile&quot;</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;!--Skip Microsoft logs <span class=\"keyword\">and</span> so log only own logs--&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">&quot;Microsoft.*&quot;</span> minlevel=<span class=\"string\">&quot;Trace&quot;</span> writeTo=<span class=\"string\">&quot;blackhole&quot;</span> final=<span class=\"string\">&quot;true&quot;</span> /&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">&quot;*&quot;</span> minlevel=<span class=\"string\">&quot;Trace&quot;</span> writeTo=<span class=\"string\">&quot;ownFile-web&quot;</span> /&gt;  </span><br><span class=\"line\">  &lt;/rules&gt;  </span><br><span class=\"line\">&lt;/nlog&gt;  </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Startup-cs中添加使用的服务\"><a href=\"#Startup-cs中添加使用的服务\" class=\"headerlink\" title=\"Startup.cs中添加使用的服务\"></a>Startup.cs中添加使用的服务</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddNLog();<span class=\"comment\">//添加NLog  </span></span><br><span class=\"line\">    env.ConfigureNLog(<span class=\"string\">&quot;nlog.config&quot;</span>);<span class=\"comment\">//读取Nlog配置文件  </span></span><br><span class=\"line\">    <span class=\"comment\">//..............  </span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用日志\"><a href=\"#使用日志\" class=\"headerlink\" title=\"使用日志\"></a>使用日志</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获得日志的实例  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> Logger Logger = LogManager.GetCurrentClassLogger();  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Logger.Info(<span class=\"string\">&quot;普通信息日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Debug(<span class=\"string\">&quot;调试日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Error(<span class=\"string\">&quot;错误日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Fatal(<span class=\"string\">&quot;异常日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Warn(<span class=\"string\">&quot;警告日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Trace(<span class=\"string\">&quot;跟踪日志-----------&quot;</span>);  </span><br><span class=\"line\">    Logger.Log(NLog.LogLevel.Warn, <span class=\"string\">&quot;Log日志------------------&quot;</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>"},{"title":".Net Core 修改IOC为Autofac","date":"2018-03-17T01:42:34.000Z","_content":"本文主要讲解如何更换Asp.Net Core的IOC为Autofac\n<!--more-->\n\n##### 安装Autofac\n在Nuget上，找到Autofac和Autofac.Extensions.DependencyInjection，直接安装。\n\n##### 创建容器并注册依赖\n修改Startup.cs中的代码，主要ConfigureServices(IServiceCollection services)方法。其中该方法默认的返回值为void，这里需要修改返回值为IServiceProvider。代码如下：\n```cs\npublic IContainer ApplicationContainer { get; private set; }\n// ConfigureServices is where you register dependencies. This gets\n// called by the runtime before the Configure method, below.\npublic IServiceProvider ConfigureServices(IServiceCollection services)\n{\n    // Add services to the collection.\n    services.AddMvc();\n\n    // Create the container builder.\n    var builder = new ContainerBuilder();\n\n    // Register dependencies, populate the services from\n    // the collection, and build the container. If you want\n    // to dispose of the container at the end of the app,\n    // be sure to keep a reference to it as a property or field.\n    builder.RegisterType<MyType>().As<IMyType>();\n    builder.Populate(services);\n    this.ApplicationContainer = builder.Build();\n\n    // Create the IServiceProvider based on the container.\n    return new AutofacServiceProvider(this.ApplicationContainer);\n}\n```","source":"_posts/Net-Core-修改IOC为Autofac.md","raw":"---\ntitle: .Net Core 修改IOC为Autofac\ndate: 2018-03-17 09:42:34\ncategories: .Net Core\ntags:\n - .Net Core\n - Autofac\n---\n本文主要讲解如何更换Asp.Net Core的IOC为Autofac\n<!--more-->\n\n##### 安装Autofac\n在Nuget上，找到Autofac和Autofac.Extensions.DependencyInjection，直接安装。\n\n##### 创建容器并注册依赖\n修改Startup.cs中的代码，主要ConfigureServices(IServiceCollection services)方法。其中该方法默认的返回值为void，这里需要修改返回值为IServiceProvider。代码如下：\n```cs\npublic IContainer ApplicationContainer { get; private set; }\n// ConfigureServices is where you register dependencies. This gets\n// called by the runtime before the Configure method, below.\npublic IServiceProvider ConfigureServices(IServiceCollection services)\n{\n    // Add services to the collection.\n    services.AddMvc();\n\n    // Create the container builder.\n    var builder = new ContainerBuilder();\n\n    // Register dependencies, populate the services from\n    // the collection, and build the container. If you want\n    // to dispose of the container at the end of the app,\n    // be sure to keep a reference to it as a property or field.\n    builder.RegisterType<MyType>().As<IMyType>();\n    builder.Populate(services);\n    this.ApplicationContainer = builder.Build();\n\n    // Create the IServiceProvider based on the container.\n    return new AutofacServiceProvider(this.ApplicationContainer);\n}\n```","slug":"Net-Core-修改IOC为Autofac","published":1,"updated":"2021-03-30T03:24:16.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx050030vcuagun5750q","content":"<p>本文主要讲解如何更换Asp.Net Core的IOC为Autofac</p>\n<span id=\"more\"></span>\n\n<h5 id=\"安装Autofac\"><a href=\"#安装Autofac\" class=\"headerlink\" title=\"安装Autofac\"></a>安装Autofac</h5><p>在Nuget上，找到Autofac和Autofac.Extensions.DependencyInjection，直接安装。</p>\n<h5 id=\"创建容器并注册依赖\"><a href=\"#创建容器并注册依赖\" class=\"headerlink\" title=\"创建容器并注册依赖\"></a>创建容器并注册依赖</h5><p>修改Startup.cs中的代码，主要ConfigureServices(IServiceCollection services)方法。其中该方法默认的返回值为void，这里需要修改返回值为IServiceProvider。代码如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IContainer ApplicationContainer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">// ConfigureServices is where you register dependencies. This gets</span></span><br><span class=\"line\"><span class=\"comment\">// called by the runtime before the Configure method, below.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IServiceProvider <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Add services to the collection.</span></span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create the container builder.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ContainerBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register dependencies, populate the services from</span></span><br><span class=\"line\">    <span class=\"comment\">// the collection, and build the container. If you want</span></span><br><span class=\"line\">    <span class=\"comment\">// to dispose of the container at the end of the app,</span></span><br><span class=\"line\">    <span class=\"comment\">// be sure to keep a reference to it as a property or field.</span></span><br><span class=\"line\">    builder.RegisterType&lt;MyType&gt;().As&lt;IMyType&gt;();</span><br><span class=\"line\">    builder.Populate(services);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ApplicationContainer = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create the IServiceProvider based on the container.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutofacServiceProvider(<span class=\"keyword\">this</span>.ApplicationContainer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1036,"excerpt":"<p>本文主要讲解如何更换Asp.Net Core的IOC为Autofac</p>","more":"<h5 id=\"安装Autofac\"><a href=\"#安装Autofac\" class=\"headerlink\" title=\"安装Autofac\"></a>安装Autofac</h5><p>在Nuget上，找到Autofac和Autofac.Extensions.DependencyInjection，直接安装。</p>\n<h5 id=\"创建容器并注册依赖\"><a href=\"#创建容器并注册依赖\" class=\"headerlink\" title=\"创建容器并注册依赖\"></a>创建容器并注册依赖</h5><p>修改Startup.cs中的代码，主要ConfigureServices(IServiceCollection services)方法。其中该方法默认的返回值为void，这里需要修改返回值为IServiceProvider。代码如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IContainer ApplicationContainer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">// ConfigureServices is where you register dependencies. This gets</span></span><br><span class=\"line\"><span class=\"comment\">// called by the runtime before the Configure method, below.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IServiceProvider <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Add services to the collection.</span></span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create the container builder.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ContainerBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register dependencies, populate the services from</span></span><br><span class=\"line\">    <span class=\"comment\">// the collection, and build the container. If you want</span></span><br><span class=\"line\">    <span class=\"comment\">// to dispose of the container at the end of the app,</span></span><br><span class=\"line\">    <span class=\"comment\">// be sure to keep a reference to it as a property or field.</span></span><br><span class=\"line\">    builder.RegisterType&lt;MyType&gt;().As&lt;IMyType&gt;();</span><br><span class=\"line\">    builder.Populate(services);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ApplicationContainer = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create the IServiceProvider based on the container.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutofacServiceProvider(<span class=\"keyword\">this</span>.ApplicationContainer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net Core 单例模式","date":"2018-06-11T11:49:03.000Z","_content":"##### 单例模式的定义\n单体模式保证一个类只有一个实例, 并提供一个全局访问该实例的方法\n<!--more-->\n\n##### .Net Core实现单例模式的代码\n###### ChocolateBoiler.cs\n```cs\nnamespace SingletonPattern\n{\n    public class ChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static ChocolateBoiler _uniqueInstance;\n\n        private ChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        public static ChocolateBoiler GetInstance()\n        {\n            return _uniqueInstance ?? (_uniqueInstance = new ChocolateBoiler());\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n```\n\n###### SynchronizedChocolateBoiler.cs\n```cs\nusing System.Runtime.CompilerServices;\nnamespace SingletonPattern\n{\n    public class SynchronizedChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static SynchronizedChocolateBoiler _uniqueInstance;\n\n        private SynchronizedChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        [MethodImpl(MethodImplOptions.Synchronized)]\n        public static SynchronizedChocolateBoiler GetInstance()\n        {\n            return _uniqueInstance ?? (_uniqueInstance = new SynchronizedChocolateBoiler());\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n\n```\n\n###### DoubleCheckChocolateBoiler.cs\n```cs\nnamespace SingletonPattern\n{\n    public class DoubleCheckChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static volatile DoubleCheckChocolateBoiler _uniqueInstance;\n        private static readonly object LockHelper = new object();\n\n        private DoubleCheckChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        public static DoubleCheckChocolateBoiler GetInstance()\n        {\n            if (_uniqueInstance == null)\n            {\n                lock (LockHelper)\n                {\n                    if (_uniqueInstance == null)\n                    {\n                        _uniqueInstance = new DoubleCheckChocolateBoiler();\n                    }\n                }\n            }\n            return _uniqueInstance;\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n```","source":"_posts/Net-Core-单例模式.md","raw":"---\ntitle: .Net Core 单例模式\ndate: 2018-06-11 19:49:03\ncategories : .Net Core\ntags: \n - .Net Core\n - 设计模式\n---\n##### 单例模式的定义\n单体模式保证一个类只有一个实例, 并提供一个全局访问该实例的方法\n<!--more-->\n\n##### .Net Core实现单例模式的代码\n###### ChocolateBoiler.cs\n```cs\nnamespace SingletonPattern\n{\n    public class ChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static ChocolateBoiler _uniqueInstance;\n\n        private ChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        public static ChocolateBoiler GetInstance()\n        {\n            return _uniqueInstance ?? (_uniqueInstance = new ChocolateBoiler());\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n```\n\n###### SynchronizedChocolateBoiler.cs\n```cs\nusing System.Runtime.CompilerServices;\nnamespace SingletonPattern\n{\n    public class SynchronizedChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static SynchronizedChocolateBoiler _uniqueInstance;\n\n        private SynchronizedChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        [MethodImpl(MethodImplOptions.Synchronized)]\n        public static SynchronizedChocolateBoiler GetInstance()\n        {\n            return _uniqueInstance ?? (_uniqueInstance = new SynchronizedChocolateBoiler());\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n\n```\n\n###### DoubleCheckChocolateBoiler.cs\n```cs\nnamespace SingletonPattern\n{\n    public class DoubleCheckChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static volatile DoubleCheckChocolateBoiler _uniqueInstance;\n        private static readonly object LockHelper = new object();\n\n        private DoubleCheckChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        public static DoubleCheckChocolateBoiler GetInstance()\n        {\n            if (_uniqueInstance == null)\n            {\n                lock (LockHelper)\n                {\n                    if (_uniqueInstance == null)\n                    {\n                        _uniqueInstance = new DoubleCheckChocolateBoiler();\n                    }\n                }\n            }\n            return _uniqueInstance;\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n```","slug":"Net-Core-单例模式","published":1,"updated":"2021-03-30T03:24:16.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx060033vcuagv8b246n","content":"<h5 id=\"单例模式的定义\"><a href=\"#单例模式的定义\" class=\"headerlink\" title=\"单例模式的定义\"></a>单例模式的定义</h5><p>单体模式保证一个类只有一个实例, 并提供一个全局访问该实例的方法</p>\n<span id=\"more\"></span>\n\n<h5 id=\"Net-Core实现单例模式的代码\"><a href=\"#Net-Core实现单例模式的代码\" class=\"headerlink\" title=\".Net Core实现单例模式的代码\"></a>.Net Core实现单例模式的代码</h5><h6 id=\"ChocolateBoiler-cs\"><a href=\"#ChocolateBoiler-cs\" class=\"headerlink\" title=\"ChocolateBoiler.cs\"></a>ChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ChocolateBoiler _uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance ?? (_uniqueInstance = <span class=\"keyword\">new</span> ChocolateBoiler());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"SynchronizedChocolateBoiler-cs\"><a href=\"#SynchronizedChocolateBoiler-cs\" class=\"headerlink\" title=\"SynchronizedChocolateBoiler.cs\"></a>SynchronizedChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.CompilerServices;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SynchronizedChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SynchronizedChocolateBoiler _uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SynchronizedChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">MethodImpl(MethodImplOptions.Synchronized)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SynchronizedChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance ?? (_uniqueInstance = <span class=\"keyword\">new</span> SynchronizedChocolateBoiler());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"DoubleCheckChocolateBoiler-cs\"><a href=\"#DoubleCheckChocolateBoiler-cs\" class=\"headerlink\" title=\"DoubleCheckChocolateBoiler.cs\"></a>DoubleCheckChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DoubleCheckChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> DoubleCheckChocolateBoiler _uniqueInstance;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">object</span> LockHelper = <span class=\"keyword\">new</span> <span class=\"built_in\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DoubleCheckChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DoubleCheckChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_uniqueInstance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">lock</span> (LockHelper)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (_uniqueInstance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        _uniqueInstance = <span class=\"keyword\">new</span> DoubleCheckChocolateBoiler();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2589,"excerpt":"<h5 id=\"单例模式的定义\"><a href=\"#单例模式的定义\" class=\"headerlink\" title=\"单例模式的定义\"></a>单例模式的定义</h5><p>单体模式保证一个类只有一个实例, 并提供一个全局访问该实例的方法</p>","more":"<h5 id=\"Net-Core实现单例模式的代码\"><a href=\"#Net-Core实现单例模式的代码\" class=\"headerlink\" title=\".Net Core实现单例模式的代码\"></a>.Net Core实现单例模式的代码</h5><h6 id=\"ChocolateBoiler-cs\"><a href=\"#ChocolateBoiler-cs\" class=\"headerlink\" title=\"ChocolateBoiler.cs\"></a>ChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ChocolateBoiler _uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance ?? (_uniqueInstance = <span class=\"keyword\">new</span> ChocolateBoiler());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"SynchronizedChocolateBoiler-cs\"><a href=\"#SynchronizedChocolateBoiler-cs\" class=\"headerlink\" title=\"SynchronizedChocolateBoiler.cs\"></a>SynchronizedChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.CompilerServices;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SynchronizedChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SynchronizedChocolateBoiler _uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SynchronizedChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">MethodImpl(MethodImplOptions.Synchronized)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SynchronizedChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance ?? (_uniqueInstance = <span class=\"keyword\">new</span> SynchronizedChocolateBoiler());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"DoubleCheckChocolateBoiler-cs\"><a href=\"#DoubleCheckChocolateBoiler-cs\" class=\"headerlink\" title=\"DoubleCheckChocolateBoiler.cs\"></a>DoubleCheckChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DoubleCheckChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> DoubleCheckChocolateBoiler _uniqueInstance;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">object</span> LockHelper = <span class=\"keyword\">new</span> <span class=\"built_in\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DoubleCheckChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DoubleCheckChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_uniqueInstance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">lock</span> (LockHelper)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (_uniqueInstance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        _uniqueInstance = <span class=\"keyword\">new</span> DoubleCheckChocolateBoiler();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net Core 抽象工厂模式","date":"2018-04-16T12:03:13.000Z","_content":"##### 抽象工厂的定义\n抽象工厂提供了一个接口,这个接口可以创建一族相关或依赖的对象而无需指明它们具体的类.\n<!--more-->\n\n##### 工厂方法和抽象工厂的比较\n工厂方法是通过继承来实现创建对象工作的,而抽象工厂则是通过组合的方法.\n工厂方法是让子类来创建对象,客户只需要知道抽象类,子类做具体的实现,解耦.\n抽象工厂提供了一个可以创建一族产品的抽象类,这个类的实现类/子类决定产品是如何产出的,也是解耦.\n抽象工厂的优点是:可以创建一族相关的产品.缺点是它的接口比较大,如果添加了产品需要改接口.\n而工厂方法只负责生产一个产品.\n抽象工厂也经常使用工厂方法来实现具体的工厂.\n而工厂方法也经常使用抽象的创造者,它来使用子类创建出的具体产品.\n\n##### .Net Core实现抽象工厂\n###### IGredient.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IGredient\n    {\n        string Name { get; }\n    }\n}\n```\n\n###### ICheese.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface ICheese : IGredient\n    {\n        \n    }\n}\n```\n\n###### IClams.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IClams : IGredient\n    {\n        \n    }\n}\n```\n\n###### IDough.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IDough : IGredient\n    {\n        \n    }\n}\n```\n\n###### ISauce.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface ISauce : IGredient\n    {\n        \n    }\n}\n```\n\n###### IPizzalngredientFactory.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IPizzalngredientFactory\n    {\n        IDough CreateDough();\n        ICheese CreateCheese();\n        IClams CreateClams();\n        ISauce CreateSauce();\n    }\n}\n```\n\n###### PizzaStore.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public abstract class PizzaStore\n    {\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n\n        protected abstract Pizza CreatePizza(string type);\n    }\n}\n```\n\n###### Pizza.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public abstract class Pizza\n    {\n        public string Name { get; set; }\n        public IDough Dough { get; protected set; }\n        public ISauce Sauce { get; protected set; }\n        public ICheese Cheese { get; protected set; }\n        public IClams Clams { get; protected set; }\n\n        public abstract void Propare();\n\n        \n    }\n}\n```","source":"_posts/Net-Core-抽象工厂模式.md","raw":"---\ntitle: .Net Core 抽象工厂模式\ndate: 2018-04-16 20:03:13\ncategories : .Net Core\ntags: \n - .Net Core\n - 设计模式\n---\n##### 抽象工厂的定义\n抽象工厂提供了一个接口,这个接口可以创建一族相关或依赖的对象而无需指明它们具体的类.\n<!--more-->\n\n##### 工厂方法和抽象工厂的比较\n工厂方法是通过继承来实现创建对象工作的,而抽象工厂则是通过组合的方法.\n工厂方法是让子类来创建对象,客户只需要知道抽象类,子类做具体的实现,解耦.\n抽象工厂提供了一个可以创建一族产品的抽象类,这个类的实现类/子类决定产品是如何产出的,也是解耦.\n抽象工厂的优点是:可以创建一族相关的产品.缺点是它的接口比较大,如果添加了产品需要改接口.\n而工厂方法只负责生产一个产品.\n抽象工厂也经常使用工厂方法来实现具体的工厂.\n而工厂方法也经常使用抽象的创造者,它来使用子类创建出的具体产品.\n\n##### .Net Core实现抽象工厂\n###### IGredient.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IGredient\n    {\n        string Name { get; }\n    }\n}\n```\n\n###### ICheese.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface ICheese : IGredient\n    {\n        \n    }\n}\n```\n\n###### IClams.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IClams : IGredient\n    {\n        \n    }\n}\n```\n\n###### IDough.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IDough : IGredient\n    {\n        \n    }\n}\n```\n\n###### ISauce.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface ISauce : IGredient\n    {\n        \n    }\n}\n```\n\n###### IPizzalngredientFactory.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IPizzalngredientFactory\n    {\n        IDough CreateDough();\n        ICheese CreateCheese();\n        IClams CreateClams();\n        ISauce CreateSauce();\n    }\n}\n```\n\n###### PizzaStore.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public abstract class PizzaStore\n    {\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n\n        protected abstract Pizza CreatePizza(string type);\n    }\n}\n```\n\n###### Pizza.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public abstract class Pizza\n    {\n        public string Name { get; set; }\n        public IDough Dough { get; protected set; }\n        public ISauce Sauce { get; protected set; }\n        public ICheese Cheese { get; protected set; }\n        public IClams Clams { get; protected set; }\n\n        public abstract void Propare();\n\n        \n    }\n}\n```","slug":"Net-Core-抽象工厂模式","published":1,"updated":"2021-03-30T03:24:16.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx070037vcuaexomdxfe","content":"<h5 id=\"抽象工厂的定义\"><a href=\"#抽象工厂的定义\" class=\"headerlink\" title=\"抽象工厂的定义\"></a>抽象工厂的定义</h5><p>抽象工厂提供了一个接口,这个接口可以创建一族相关或依赖的对象而无需指明它们具体的类.</p>\n<span id=\"more\"></span>\n\n<h5 id=\"工厂方法和抽象工厂的比较\"><a href=\"#工厂方法和抽象工厂的比较\" class=\"headerlink\" title=\"工厂方法和抽象工厂的比较\"></a>工厂方法和抽象工厂的比较</h5><p>工厂方法是通过继承来实现创建对象工作的,而抽象工厂则是通过组合的方法.<br>工厂方法是让子类来创建对象,客户只需要知道抽象类,子类做具体的实现,解耦.<br>抽象工厂提供了一个可以创建一族产品的抽象类,这个类的实现类/子类决定产品是如何产出的,也是解耦.<br>抽象工厂的优点是:可以创建一族相关的产品.缺点是它的接口比较大,如果添加了产品需要改接口.<br>而工厂方法只负责生产一个产品.<br>抽象工厂也经常使用工厂方法来实现具体的工厂.<br>而工厂方法也经常使用抽象的创造者,它来使用子类创建出的具体产品.</p>\n<h5 id=\"Net-Core实现抽象工厂\"><a href=\"#Net-Core实现抽象工厂\" class=\"headerlink\" title=\".Net Core实现抽象工厂\"></a>.Net Core实现抽象工厂</h5><h6 id=\"IGredient-cs\"><a href=\"#IGredient-cs\" class=\"headerlink\" title=\"IGredient.cs\"></a>IGredient.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ICheese-cs\"><a href=\"#ICheese-cs\" class=\"headerlink\" title=\"ICheese.cs\"></a>ICheese.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICheese</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"IClams-cs\"><a href=\"#IClams-cs\" class=\"headerlink\" title=\"IClams.cs\"></a>IClams.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IClams</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"IDough-cs\"><a href=\"#IDough-cs\" class=\"headerlink\" title=\"IDough.cs\"></a>IDough.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDough</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ISauce-cs\"><a href=\"#ISauce-cs\" class=\"headerlink\" title=\"ISauce.cs\"></a>ISauce.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISauce</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"IPizzalngredientFactory-cs\"><a href=\"#IPizzalngredientFactory-cs\" class=\"headerlink\" title=\"IPizzalngredientFactory.cs\"></a>IPizzalngredientFactory.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IPizzalngredientFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IDough <span class=\"title\">CreateDough</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">ICheese <span class=\"title\">CreateCheese</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">IClams <span class=\"title\">CreateClams</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">ISauce <span class=\"title\">CreateSauce</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"PizzaStore-cs\"><a href=\"#PizzaStore-cs\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Pizza-cs\"><a href=\"#Pizza-cs\" class=\"headerlink\" title=\"Pizza.cs\"></a>Pizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IDough Dough &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ISauce Sauce &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ICheese Cheese &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IClams Clams &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">Propare</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1814,"excerpt":"<h5 id=\"抽象工厂的定义\"><a href=\"#抽象工厂的定义\" class=\"headerlink\" title=\"抽象工厂的定义\"></a>抽象工厂的定义</h5><p>抽象工厂提供了一个接口,这个接口可以创建一族相关或依赖的对象而无需指明它们具体的类.</p>","more":"<h5 id=\"工厂方法和抽象工厂的比较\"><a href=\"#工厂方法和抽象工厂的比较\" class=\"headerlink\" title=\"工厂方法和抽象工厂的比较\"></a>工厂方法和抽象工厂的比较</h5><p>工厂方法是通过继承来实现创建对象工作的,而抽象工厂则是通过组合的方法.<br>工厂方法是让子类来创建对象,客户只需要知道抽象类,子类做具体的实现,解耦.<br>抽象工厂提供了一个可以创建一族产品的抽象类,这个类的实现类/子类决定产品是如何产出的,也是解耦.<br>抽象工厂的优点是:可以创建一族相关的产品.缺点是它的接口比较大,如果添加了产品需要改接口.<br>而工厂方法只负责生产一个产品.<br>抽象工厂也经常使用工厂方法来实现具体的工厂.<br>而工厂方法也经常使用抽象的创造者,它来使用子类创建出的具体产品.</p>\n<h5 id=\"Net-Core实现抽象工厂\"><a href=\"#Net-Core实现抽象工厂\" class=\"headerlink\" title=\".Net Core实现抽象工厂\"></a>.Net Core实现抽象工厂</h5><h6 id=\"IGredient-cs\"><a href=\"#IGredient-cs\" class=\"headerlink\" title=\"IGredient.cs\"></a>IGredient.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ICheese-cs\"><a href=\"#ICheese-cs\" class=\"headerlink\" title=\"ICheese.cs\"></a>ICheese.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICheese</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"IClams-cs\"><a href=\"#IClams-cs\" class=\"headerlink\" title=\"IClams.cs\"></a>IClams.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IClams</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"IDough-cs\"><a href=\"#IDough-cs\" class=\"headerlink\" title=\"IDough.cs\"></a>IDough.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDough</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ISauce-cs\"><a href=\"#ISauce-cs\" class=\"headerlink\" title=\"ISauce.cs\"></a>ISauce.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISauce</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"IPizzalngredientFactory-cs\"><a href=\"#IPizzalngredientFactory-cs\" class=\"headerlink\" title=\"IPizzalngredientFactory.cs\"></a>IPizzalngredientFactory.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IPizzalngredientFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IDough <span class=\"title\">CreateDough</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">ICheese <span class=\"title\">CreateCheese</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">IClams <span class=\"title\">CreateClams</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">ISauce <span class=\"title\">CreateSauce</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"PizzaStore-cs\"><a href=\"#PizzaStore-cs\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Pizza-cs\"><a href=\"#Pizza-cs\" class=\"headerlink\" title=\"Pizza.cs\"></a>Pizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IDough Dough &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ISauce Sauce &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ICheese Cheese &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IClams Clams &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">Propare</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net Core 简单工厂和工厂方法模式","date":"2018-04-14T13:35:44.000Z","_content":"##### 简单工厂的定义\n简单工厂负责创建对象的细节工作,通过传入的类型参数,建立并返回不同类型的对象.\n<!--more-->\n\n##### .Net Core实现简单工厂\n###### Pizza.cs\n```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace SimpleFactory.Pizzas\n{\n    public abstract class Pizza\n    {\n        public string Name { get; protectes set; }\n        public string Dough { get; protectes set; }\n        public string Sauce { get; protectes set; }\n        protected List<string> Toppingd = new List<string>();\n\n        public void Prepare()\n        {\n            Console.WriteLine($\"Preparing:{Name}\");\n            Console.WriteLine($\"Tossing:{Dough}\");\n            Console.WriteLine($\"Adding sauce:{Sauce}\");\n            Console.WriteLine($\"Adding toppings\");\n            Toppings.ForEach(x => Console.WriteLine($\"{x}\"));\n        }\n\n        public void Bake()\n        {\n            Console.WriteLine(\"Bake for 25 minutes\");\n        }\n\n        public void Cut()\n        {\n            Console.WriteLine(\"Cutting the pizza into diagnol slices\");\n        }\n\n        public void Box()\n        {\n            Console.WriteLine(\"Placing pizza in official PizzaStore box......\");\n        }\n    }\n}\n```\n\n###### CheesePizza.cs\n```cs\nnamespace SimpleFactory.Pizzas\n{\n    public class CheesePizza: Pizza\n    {\n        public CheesePizza()\n        {\n            Name = \"Cheese Pizza\";\n            Dough = \"Think Dough\";\n            Sauce = \"Salad\";\n            Toppings.Add(\"Grated ReggianoCheese\");\n        }\n    }\n} \n```\n\n###### ClamPizza.ca\n```cs\nnamespace SimpleFactory.Pizzas\n{\n    public class ClamPizza: Pizza\n    {\n        public ClamPizza()\n        {\n            Name = \"Clam Pizza\";\n            Dough = \"Soft Dough\";\n            Sauce = \"Tomato sauce\";\n            Toppings.Add(\"Shrimp meat\");\n        }\n    }\n} \n```\n\n###### SimplePizzaFactory\n```cs\nusing SimpleFactory.Pizzas;\n\nnamespace SimpleFactory\n{\n    public class SimplePizzaFactory\n    {\n        public Pizza CreatePizza(string type)\n        {\n            Pizza pizza = null;\n            switch(type)\n            {\n                case \"cheese\":\n                    pizza = new CheesePizza();\n                    break;\n                case \"clam\":\n                    pizza = new ClamPizza();\n                    break;\n            }\n            return pizza;\n        }\n    }\n}\n```\n\n###### PizzaStore.cs\n```cs\nusing SimpleFactory.Pizzas;\n\nnamespace SimpleFactory\n{\n    public class PizzaStore\n    {\n        private readonly SimplePizzaFactory _factory;\n\n        public PizzaStore(SimplePizzaFactory factory)\n        {\n            _factory = factory;\n        }\n\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = _factory.CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nnamespace SimpleFactory\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var pizzaStore = new PizzaStore(new SimplePizzaFactory());\n            var cheesePizza = pizzaStore.OrderPizza(\"cheese\");\n            var clamPizza = pizzaStore.OrderPizza(\"clam\");\n            Consloe.ReadKey();\n        }\n    }\n}\n```\n\n##### 工厂方法的定义\n工厂方法把对象创建的动作交给了子类,并让它决定创建哪些对象.\n\n##### .Net Core实现工厂方法\n###### ChicagoCheesePizza.cs\n```cs\nnamespace FactoryMethodPattern.Pizzas\n{\n    public class ChicagoCheesePizza: Pizza\n    {\n        public ChicagoCheesePizza()\n        {\n            Name = \"Chicago Cheese Pizza\";\n            Dough = \"Think Dough\";\n            Sauce = \"Salad\";\n            Toppings.Add(\"Grated ReggianoCheese\");\n        }\n    }\n} \n```\n\n###### ChicagoClamPizza.ca\n```cs\nnamespace FactoryMethodPattern.Pizzas\n{\n    public class ChicagoClamPizza: Pizza\n    {\n        public ChicagoClamPizza()\n        {\n            Name = \"Chicago Clam Pizza\";\n            Dough = \"Soft Dough\";\n            Sauce = \"Tomato sauce\";\n            Toppings.Add(\"Shrimp meat\");\n        }\n    }\n} \n```\n\n###### PizzaStore.cs\n```cs\nusing FactoryMethodPattern.Pizzas;\n\nnamespace FactoryMethodPattern\n{\n    public abstract class PizzaStore\n    {\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n\n        protected abstract Pizza CreatePizza(string type);\n    }\n}\n```\n\n###### ChicagoPizzaStore.cs\n```cs\nusing FactoryMethodPattern.Pizzas;\n\nnamespace FactoryMethodPattern\n{\n    public class ChicagoPizzaStore:PizzaStore\n    {\n        protected override Pizza CreatePizza(string type)\n        {\n            Pizza pizza = null;\n            switch(type)\n            {\n                case \"cheese\":\n                    pizza = new ChicagoCheesePizza();\n                    break;\n                case \"clam\":\n                    pizza = new ChicagoClamPizza();\n                    break;\n            }\n            return pizza;\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nnamespace FactoryMethodPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var chicagoStore = new ChicagoPizzaStore();\n            var cheesePizza = chicagoStore.OrderPizza(\"cheese\");\n            var clamPizza = chicagoStore.OrderPizza(\"clam\");\n            Consloe.ReadKey();\n        }\n    }\n}\n```","source":"_posts/Net-Core-简单工厂和工厂方法模式.md","raw":"---\ntitle: .Net Core 简单工厂和工厂方法模式\ndate: 2018-04-14 21:35:44\ncategories : .Net Core\ntags: \n - .Net Core\n - 设计模式\n---\n##### 简单工厂的定义\n简单工厂负责创建对象的细节工作,通过传入的类型参数,建立并返回不同类型的对象.\n<!--more-->\n\n##### .Net Core实现简单工厂\n###### Pizza.cs\n```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace SimpleFactory.Pizzas\n{\n    public abstract class Pizza\n    {\n        public string Name { get; protectes set; }\n        public string Dough { get; protectes set; }\n        public string Sauce { get; protectes set; }\n        protected List<string> Toppingd = new List<string>();\n\n        public void Prepare()\n        {\n            Console.WriteLine($\"Preparing:{Name}\");\n            Console.WriteLine($\"Tossing:{Dough}\");\n            Console.WriteLine($\"Adding sauce:{Sauce}\");\n            Console.WriteLine($\"Adding toppings\");\n            Toppings.ForEach(x => Console.WriteLine($\"{x}\"));\n        }\n\n        public void Bake()\n        {\n            Console.WriteLine(\"Bake for 25 minutes\");\n        }\n\n        public void Cut()\n        {\n            Console.WriteLine(\"Cutting the pizza into diagnol slices\");\n        }\n\n        public void Box()\n        {\n            Console.WriteLine(\"Placing pizza in official PizzaStore box......\");\n        }\n    }\n}\n```\n\n###### CheesePizza.cs\n```cs\nnamespace SimpleFactory.Pizzas\n{\n    public class CheesePizza: Pizza\n    {\n        public CheesePizza()\n        {\n            Name = \"Cheese Pizza\";\n            Dough = \"Think Dough\";\n            Sauce = \"Salad\";\n            Toppings.Add(\"Grated ReggianoCheese\");\n        }\n    }\n} \n```\n\n###### ClamPizza.ca\n```cs\nnamespace SimpleFactory.Pizzas\n{\n    public class ClamPizza: Pizza\n    {\n        public ClamPizza()\n        {\n            Name = \"Clam Pizza\";\n            Dough = \"Soft Dough\";\n            Sauce = \"Tomato sauce\";\n            Toppings.Add(\"Shrimp meat\");\n        }\n    }\n} \n```\n\n###### SimplePizzaFactory\n```cs\nusing SimpleFactory.Pizzas;\n\nnamespace SimpleFactory\n{\n    public class SimplePizzaFactory\n    {\n        public Pizza CreatePizza(string type)\n        {\n            Pizza pizza = null;\n            switch(type)\n            {\n                case \"cheese\":\n                    pizza = new CheesePizza();\n                    break;\n                case \"clam\":\n                    pizza = new ClamPizza();\n                    break;\n            }\n            return pizza;\n        }\n    }\n}\n```\n\n###### PizzaStore.cs\n```cs\nusing SimpleFactory.Pizzas;\n\nnamespace SimpleFactory\n{\n    public class PizzaStore\n    {\n        private readonly SimplePizzaFactory _factory;\n\n        public PizzaStore(SimplePizzaFactory factory)\n        {\n            _factory = factory;\n        }\n\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = _factory.CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nnamespace SimpleFactory\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var pizzaStore = new PizzaStore(new SimplePizzaFactory());\n            var cheesePizza = pizzaStore.OrderPizza(\"cheese\");\n            var clamPizza = pizzaStore.OrderPizza(\"clam\");\n            Consloe.ReadKey();\n        }\n    }\n}\n```\n\n##### 工厂方法的定义\n工厂方法把对象创建的动作交给了子类,并让它决定创建哪些对象.\n\n##### .Net Core实现工厂方法\n###### ChicagoCheesePizza.cs\n```cs\nnamespace FactoryMethodPattern.Pizzas\n{\n    public class ChicagoCheesePizza: Pizza\n    {\n        public ChicagoCheesePizza()\n        {\n            Name = \"Chicago Cheese Pizza\";\n            Dough = \"Think Dough\";\n            Sauce = \"Salad\";\n            Toppings.Add(\"Grated ReggianoCheese\");\n        }\n    }\n} \n```\n\n###### ChicagoClamPizza.ca\n```cs\nnamespace FactoryMethodPattern.Pizzas\n{\n    public class ChicagoClamPizza: Pizza\n    {\n        public ChicagoClamPizza()\n        {\n            Name = \"Chicago Clam Pizza\";\n            Dough = \"Soft Dough\";\n            Sauce = \"Tomato sauce\";\n            Toppings.Add(\"Shrimp meat\");\n        }\n    }\n} \n```\n\n###### PizzaStore.cs\n```cs\nusing FactoryMethodPattern.Pizzas;\n\nnamespace FactoryMethodPattern\n{\n    public abstract class PizzaStore\n    {\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n\n        protected abstract Pizza CreatePizza(string type);\n    }\n}\n```\n\n###### ChicagoPizzaStore.cs\n```cs\nusing FactoryMethodPattern.Pizzas;\n\nnamespace FactoryMethodPattern\n{\n    public class ChicagoPizzaStore:PizzaStore\n    {\n        protected override Pizza CreatePizza(string type)\n        {\n            Pizza pizza = null;\n            switch(type)\n            {\n                case \"cheese\":\n                    pizza = new ChicagoCheesePizza();\n                    break;\n                case \"clam\":\n                    pizza = new ChicagoClamPizza();\n                    break;\n            }\n            return pizza;\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nnamespace FactoryMethodPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var chicagoStore = new ChicagoPizzaStore();\n            var cheesePizza = chicagoStore.OrderPizza(\"cheese\");\n            var clamPizza = chicagoStore.OrderPizza(\"clam\");\n            Consloe.ReadKey();\n        }\n    }\n}\n```","slug":"Net-Core-简单工厂和工厂方法模式","published":1,"updated":"2021-03-30T03:24:16.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx08003avcua7t3p7y7h","content":"<h5 id=\"简单工厂的定义\"><a href=\"#简单工厂的定义\" class=\"headerlink\" title=\"简单工厂的定义\"></a>简单工厂的定义</h5><p>简单工厂负责创建对象的细节工作,通过传入的类型参数,建立并返回不同类型的对象.</p>\n<span id=\"more\"></span>\n\n<h5 id=\"Net-Core实现简单工厂\"><a href=\"#Net-Core实现简单工厂\" class=\"headerlink\" title=\".Net Core实现简单工厂\"></a>.Net Core实现简单工厂</h5><h6 id=\"Pizza-cs\"><a href=\"#Pizza-cs\" class=\"headerlink\" title=\"Pizza.cs\"></a>Pizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Dough &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Sauce &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">List</span>&lt;<span class=\"title\">string</span>&gt; Toppingd</span> = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Prepare</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;Preparing:<span class=\"subst\">&#123;Name&#125;</span>&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;Tossing:<span class=\"subst\">&#123;Dough&#125;</span>&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;Adding sauce:<span class=\"subst\">&#123;Sauce&#125;</span>&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;Adding toppings&quot;</span>);</span><br><span class=\"line\">            Toppings.ForEach(x =&gt; Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;x&#125;</span>&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Bake</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Bake for 25 minutes&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Cut</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Cutting the pizza into diagnol slices&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Box</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Placing pizza in official PizzaStore box......&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"CheesePizza-cs\"><a href=\"#CheesePizza-cs\" class=\"headerlink\" title=\"CheesePizza.cs\"></a>CheesePizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CheesePizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CheesePizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;Cheese Pizza&quot;</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">&quot;Think Dough&quot;</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">&quot;Salad&quot;</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">&quot;Grated ReggianoCheese&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ClamPizza-ca\"><a href=\"#ClamPizza-ca\" class=\"headerlink\" title=\"ClamPizza.ca\"></a>ClamPizza.ca</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ClamPizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClamPizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;Clam Pizza&quot;</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">&quot;Soft Dough&quot;</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">&quot;Tomato sauce&quot;</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">&quot;Shrimp meat&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"SimplePizzaFactory\"><a href=\"#SimplePizzaFactory\" class=\"headerlink\" title=\"SimplePizzaFactory\"></a>SimplePizzaFactory</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SimpleFactory.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimplePizzaFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Pizza pizza = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;cheese&quot;</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> CheesePizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;clam&quot;</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ClamPizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"PizzaStore-cs\"><a href=\"#PizzaStore-cs\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SimpleFactory.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SimplePizzaFactory _factory;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PizzaStore</span>(<span class=\"params\">SimplePizzaFactory factory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _factory = factory;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = _factory.CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizzaStore = <span class=\"keyword\">new</span> PizzaStore(<span class=\"keyword\">new</span> SimplePizzaFactory());</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cheesePizza = pizzaStore.OrderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clamPizza = pizzaStore.OrderPizza(<span class=\"string\">&quot;clam&quot;</span>);</span><br><span class=\"line\">            Consloe.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"工厂方法的定义\"><a href=\"#工厂方法的定义\" class=\"headerlink\" title=\"工厂方法的定义\"></a>工厂方法的定义</h5><p>工厂方法把对象创建的动作交给了子类,并让它决定创建哪些对象.</p>\n<h5 id=\"Net-Core实现工厂方法\"><a href=\"#Net-Core实现工厂方法\" class=\"headerlink\" title=\".Net Core实现工厂方法\"></a>.Net Core实现工厂方法</h5><h6 id=\"ChicagoCheesePizza-cs\"><a href=\"#ChicagoCheesePizza-cs\" class=\"headerlink\" title=\"ChicagoCheesePizza.cs\"></a>ChicagoCheesePizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoCheesePizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoCheesePizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;Chicago Cheese Pizza&quot;</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">&quot;Think Dough&quot;</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">&quot;Salad&quot;</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">&quot;Grated ReggianoCheese&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ChicagoClamPizza-ca\"><a href=\"#ChicagoClamPizza-ca\" class=\"headerlink\" title=\"ChicagoClamPizza.ca\"></a>ChicagoClamPizza.ca</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoClamPizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoClamPizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;Chicago Clam Pizza&quot;</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">&quot;Soft Dough&quot;</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">&quot;Tomato sauce&quot;</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">&quot;Shrimp meat&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"PizzaStore-cs-1\"><a href=\"#PizzaStore-cs-1\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FactoryMethodPattern.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ChicagoPizzaStore-cs\"><a href=\"#ChicagoPizzaStore-cs\" class=\"headerlink\" title=\"ChicagoPizzaStore.cs\"></a>ChicagoPizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FactoryMethodPattern.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoPizzaStore</span>:<span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Pizza pizza = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;cheese&quot;</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ChicagoCheesePizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;clam&quot;</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ChicagoClamPizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Program-cs-1\"><a href=\"#Program-cs-1\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> chicagoStore = <span class=\"keyword\">new</span> ChicagoPizzaStore();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cheesePizza = chicagoStore.OrderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clamPizza = chicagoStore.OrderPizza(<span class=\"string\">&quot;clam&quot;</span>);</span><br><span class=\"line\">            Consloe.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":4365,"excerpt":"<h5 id=\"简单工厂的定义\"><a href=\"#简单工厂的定义\" class=\"headerlink\" title=\"简单工厂的定义\"></a>简单工厂的定义</h5><p>简单工厂负责创建对象的细节工作,通过传入的类型参数,建立并返回不同类型的对象.</p>","more":"<h5 id=\"Net-Core实现简单工厂\"><a href=\"#Net-Core实现简单工厂\" class=\"headerlink\" title=\".Net Core实现简单工厂\"></a>.Net Core实现简单工厂</h5><h6 id=\"Pizza-cs\"><a href=\"#Pizza-cs\" class=\"headerlink\" title=\"Pizza.cs\"></a>Pizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Dough &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Sauce &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">List</span>&lt;<span class=\"title\">string</span>&gt; Toppingd</span> = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Prepare</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;Preparing:<span class=\"subst\">&#123;Name&#125;</span>&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;Tossing:<span class=\"subst\">&#123;Dough&#125;</span>&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;Adding sauce:<span class=\"subst\">&#123;Sauce&#125;</span>&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;Adding toppings&quot;</span>);</span><br><span class=\"line\">            Toppings.ForEach(x =&gt; Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;x&#125;</span>&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Bake</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Bake for 25 minutes&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Cut</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Cutting the pizza into diagnol slices&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Box</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Placing pizza in official PizzaStore box......&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"CheesePizza-cs\"><a href=\"#CheesePizza-cs\" class=\"headerlink\" title=\"CheesePizza.cs\"></a>CheesePizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CheesePizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CheesePizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;Cheese Pizza&quot;</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">&quot;Think Dough&quot;</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">&quot;Salad&quot;</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">&quot;Grated ReggianoCheese&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ClamPizza-ca\"><a href=\"#ClamPizza-ca\" class=\"headerlink\" title=\"ClamPizza.ca\"></a>ClamPizza.ca</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ClamPizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClamPizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;Clam Pizza&quot;</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">&quot;Soft Dough&quot;</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">&quot;Tomato sauce&quot;</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">&quot;Shrimp meat&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"SimplePizzaFactory\"><a href=\"#SimplePizzaFactory\" class=\"headerlink\" title=\"SimplePizzaFactory\"></a>SimplePizzaFactory</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SimpleFactory.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimplePizzaFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Pizza pizza = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;cheese&quot;</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> CheesePizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;clam&quot;</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ClamPizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"PizzaStore-cs\"><a href=\"#PizzaStore-cs\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SimpleFactory.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SimplePizzaFactory _factory;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PizzaStore</span>(<span class=\"params\">SimplePizzaFactory factory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            _factory = factory;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = _factory.CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizzaStore = <span class=\"keyword\">new</span> PizzaStore(<span class=\"keyword\">new</span> SimplePizzaFactory());</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cheesePizza = pizzaStore.OrderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clamPizza = pizzaStore.OrderPizza(<span class=\"string\">&quot;clam&quot;</span>);</span><br><span class=\"line\">            Consloe.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"工厂方法的定义\"><a href=\"#工厂方法的定义\" class=\"headerlink\" title=\"工厂方法的定义\"></a>工厂方法的定义</h5><p>工厂方法把对象创建的动作交给了子类,并让它决定创建哪些对象.</p>\n<h5 id=\"Net-Core实现工厂方法\"><a href=\"#Net-Core实现工厂方法\" class=\"headerlink\" title=\".Net Core实现工厂方法\"></a>.Net Core实现工厂方法</h5><h6 id=\"ChicagoCheesePizza-cs\"><a href=\"#ChicagoCheesePizza-cs\" class=\"headerlink\" title=\"ChicagoCheesePizza.cs\"></a>ChicagoCheesePizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoCheesePizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoCheesePizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;Chicago Cheese Pizza&quot;</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">&quot;Think Dough&quot;</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">&quot;Salad&quot;</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">&quot;Grated ReggianoCheese&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ChicagoClamPizza-ca\"><a href=\"#ChicagoClamPizza-ca\" class=\"headerlink\" title=\"ChicagoClamPizza.ca\"></a>ChicagoClamPizza.ca</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoClamPizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoClamPizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;Chicago Clam Pizza&quot;</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">&quot;Soft Dough&quot;</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">&quot;Tomato sauce&quot;</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">&quot;Shrimp meat&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"PizzaStore-cs-1\"><a href=\"#PizzaStore-cs-1\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FactoryMethodPattern.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ChicagoPizzaStore-cs\"><a href=\"#ChicagoPizzaStore-cs\" class=\"headerlink\" title=\"ChicagoPizzaStore.cs\"></a>ChicagoPizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FactoryMethodPattern.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoPizzaStore</span>:<span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"built_in\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Pizza pizza = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;cheese&quot;</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ChicagoCheesePizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;clam&quot;</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ChicagoClamPizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Program-cs-1\"><a href=\"#Program-cs-1\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> chicagoStore = <span class=\"keyword\">new</span> ChicagoPizzaStore();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cheesePizza = chicagoStore.OrderPizza(<span class=\"string\">&quot;cheese&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clamPizza = chicagoStore.OrderPizza(<span class=\"string\">&quot;clam&quot;</span>);</span><br><span class=\"line\">            Consloe.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net Core 装饰模式","date":"2018-04-05T15:14:57.000Z","_content":"##### 装饰模式的定义\n动态的对某个对象进行扩展(附加额外的职责),装饰器是除了继承之外的另外一种为对象扩展功能的方法\n<!--more-->\n\n##### .Net Core实现装饰模式的代码\n###### Beverage.cs\n```cs\nnamespace DecoratorPattern.Core\n{\n    public abstract class Beverage\n    {\n        public virtual string Description{ get; private set; } = \"Unknown Beverage\";\n        public abstract double Cost();\n    }\n}\n```\n\n###### CondimentDecorator.cs\n```cs\nnamespace DecoratorPattern.Core\n{\n    public abstract class CondimentDecorator : Beverage\n    {\n        public abstract override string Description{ get; }\n    }\n}\n```\n\n###### Espresso.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Coffee\n{\n    public class Espresso : Beverage\n    {\n        public Espresso()\n        {\n            Description = \"Espresso\";\n        }\n        public override double Cost()\n        {\n            return 1.99;\n        }\n    }\n}\n```\n\n###### HouseBlend.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Coffee\n{\n    public class HouseBlend : Beverage\n    {\n        public HouseBlend()\n        {\n            Description = \"HouseBlend\";\n        }\n        public override double Cost()\n        {\n            return 0.89;\n        }\n    }\n}\n```\n\n###### Mocha.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Condiments\n{\n    public class Mocha : CodimentDecorator\n    {\n        private readonly Beverage beverage;\n\n        public Mocha(Beverage beverage) => this.beverage = beverage;\n\n        public override string Description => $\"{beverage.Description},Mocha\";\n\n        public override doublr Cost()\n        {\n            return 0.20 + beverage.Cost();\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nusing DecoratorPattern.Core;\nusing DecoratorPattern.Coffee;\n\nnamespace DecoratorPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var beverage = new Espresso();\n            Console.WriteLine($\"{beverage.Description}${beverage.Cost()}\");\n\n            Beverage beverage2 = new HouseBlend();\n            beverage2 = new Mocha(beverage2);\n            Console.WriteLine($\"{beverage2.Description}${beverage2.Cost()}\");\n        }\n    }\n}\n```\n","source":"_posts/Net-Core-装饰模式.md","raw":"---\ntitle: .Net Core 装饰模式\ndate: 2018-04-05 23:14:57\ncategories: .Net Core\ntags:\n - .Net Core\n - 设计模式\n---\n##### 装饰模式的定义\n动态的对某个对象进行扩展(附加额外的职责),装饰器是除了继承之外的另外一种为对象扩展功能的方法\n<!--more-->\n\n##### .Net Core实现装饰模式的代码\n###### Beverage.cs\n```cs\nnamespace DecoratorPattern.Core\n{\n    public abstract class Beverage\n    {\n        public virtual string Description{ get; private set; } = \"Unknown Beverage\";\n        public abstract double Cost();\n    }\n}\n```\n\n###### CondimentDecorator.cs\n```cs\nnamespace DecoratorPattern.Core\n{\n    public abstract class CondimentDecorator : Beverage\n    {\n        public abstract override string Description{ get; }\n    }\n}\n```\n\n###### Espresso.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Coffee\n{\n    public class Espresso : Beverage\n    {\n        public Espresso()\n        {\n            Description = \"Espresso\";\n        }\n        public override double Cost()\n        {\n            return 1.99;\n        }\n    }\n}\n```\n\n###### HouseBlend.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Coffee\n{\n    public class HouseBlend : Beverage\n    {\n        public HouseBlend()\n        {\n            Description = \"HouseBlend\";\n        }\n        public override double Cost()\n        {\n            return 0.89;\n        }\n    }\n}\n```\n\n###### Mocha.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Condiments\n{\n    public class Mocha : CodimentDecorator\n    {\n        private readonly Beverage beverage;\n\n        public Mocha(Beverage beverage) => this.beverage = beverage;\n\n        public override string Description => $\"{beverage.Description},Mocha\";\n\n        public override doublr Cost()\n        {\n            return 0.20 + beverage.Cost();\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nusing DecoratorPattern.Core;\nusing DecoratorPattern.Coffee;\n\nnamespace DecoratorPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var beverage = new Espresso();\n            Console.WriteLine($\"{beverage.Description}${beverage.Cost()}\");\n\n            Beverage beverage2 = new HouseBlend();\n            beverage2 = new Mocha(beverage2);\n            Console.WriteLine($\"{beverage2.Description}${beverage2.Cost()}\");\n        }\n    }\n}\n```\n","slug":"Net-Core-装饰模式","published":1,"updated":"2021-03-30T03:24:16.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx09003dvcuacqxmg35o","content":"<h5 id=\"装饰模式的定义\"><a href=\"#装饰模式的定义\" class=\"headerlink\" title=\"装饰模式的定义\"></a>装饰模式的定义</h5><p>动态的对某个对象进行扩展(附加额外的职责),装饰器是除了继承之外的另外一种为对象扩展功能的方法</p>\n<span id=\"more\"></span>\n\n<h5 id=\"Net-Core实现装饰模式的代码\"><a href=\"#Net-Core实现装饰模式的代码\" class=\"headerlink\" title=\".Net Core实现装饰模式的代码\"></a>.Net Core实现装饰模式的代码</h5><h6 id=\"Beverage-cs\"><a href=\"#Beverage-cs\" class=\"headerlink\" title=\"Beverage.cs\"></a>Beverage.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Core</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">string</span> Description&#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125; = <span class=\"string\">&quot;Unknown Beverage&quot;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"built_in\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"CondimentDecorator-cs\"><a href=\"#CondimentDecorator-cs\" class=\"headerlink\" title=\"CondimentDecorator.cs\"></a>CondimentDecorator.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Core</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">CondimentDecorator</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> Description&#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Espresso-cs\"><a href=\"#Espresso-cs\" class=\"headerlink\" title=\"Espresso.cs\"></a>Espresso.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Coffee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Espresso</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Espresso</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Description = <span class=\"string\">&quot;Espresso&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"HouseBlend-cs\"><a href=\"#HouseBlend-cs\" class=\"headerlink\" title=\"HouseBlend.cs\"></a>HouseBlend.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Coffee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HouseBlend</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HouseBlend</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Description = <span class=\"string\">&quot;HouseBlend&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.89</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Mocha-cs\"><a href=\"#Mocha-cs\" class=\"headerlink\" title=\"Mocha.cs\"></a>Mocha.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Condiments</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> : <span class=\"title\">CodimentDecorator</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Beverage beverage;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mocha</span>(<span class=\"params\">Beverage beverage</span>)</span> =&gt; <span class=\"keyword\">this</span>.beverage = beverage;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> Description =&gt; <span class=\"string\">$&quot;<span class=\"subst\">&#123;beverage.Description&#125;</span>,Mocha&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> doublr <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.20</span> + beverage.Cost();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Coffee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> beverage = <span class=\"keyword\">new</span> Espresso();</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;beverage.Description&#125;</span>$<span class=\"subst\">&#123;beverage.Cost()&#125;</span>&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Beverage beverage2 = <span class=\"keyword\">new</span> HouseBlend();</span><br><span class=\"line\">            beverage2 = <span class=\"keyword\">new</span> Mocha(beverage2);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;beverage2.Description&#125;</span>$<span class=\"subst\">&#123;beverage2.Cost()&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":1863,"excerpt":"<h5 id=\"装饰模式的定义\"><a href=\"#装饰模式的定义\" class=\"headerlink\" title=\"装饰模式的定义\"></a>装饰模式的定义</h5><p>动态的对某个对象进行扩展(附加额外的职责),装饰器是除了继承之外的另外一种为对象扩展功能的方法</p>","more":"<h5 id=\"Net-Core实现装饰模式的代码\"><a href=\"#Net-Core实现装饰模式的代码\" class=\"headerlink\" title=\".Net Core实现装饰模式的代码\"></a>.Net Core实现装饰模式的代码</h5><h6 id=\"Beverage-cs\"><a href=\"#Beverage-cs\" class=\"headerlink\" title=\"Beverage.cs\"></a>Beverage.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Core</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">string</span> Description&#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125; = <span class=\"string\">&quot;Unknown Beverage&quot;</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"built_in\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"CondimentDecorator-cs\"><a href=\"#CondimentDecorator-cs\" class=\"headerlink\" title=\"CondimentDecorator.cs\"></a>CondimentDecorator.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Core</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">CondimentDecorator</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> Description&#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Espresso-cs\"><a href=\"#Espresso-cs\" class=\"headerlink\" title=\"Espresso.cs\"></a>Espresso.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Coffee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Espresso</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Espresso</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Description = <span class=\"string\">&quot;Espresso&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"HouseBlend-cs\"><a href=\"#HouseBlend-cs\" class=\"headerlink\" title=\"HouseBlend.cs\"></a>HouseBlend.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Coffee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HouseBlend</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HouseBlend</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Description = <span class=\"string\">&quot;HouseBlend&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.89</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Mocha-cs\"><a href=\"#Mocha-cs\" class=\"headerlink\" title=\"Mocha.cs\"></a>Mocha.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Condiments</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> : <span class=\"title\">CodimentDecorator</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Beverage beverage;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mocha</span>(<span class=\"params\">Beverage beverage</span>)</span> =&gt; <span class=\"keyword\">this</span>.beverage = beverage;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> Description =&gt; <span class=\"string\">$&quot;<span class=\"subst\">&#123;beverage.Description&#125;</span>,Mocha&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> doublr <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.20</span> + beverage.Cost();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Coffee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> beverage = <span class=\"keyword\">new</span> Espresso();</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;beverage.Description&#125;</span>$<span class=\"subst\">&#123;beverage.Cost()&#125;</span>&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Beverage beverage2 = <span class=\"keyword\">new</span> HouseBlend();</span><br><span class=\"line\">            beverage2 = <span class=\"keyword\">new</span> Mocha(beverage2);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;beverage2.Description&#125;</span>$<span class=\"subst\">&#123;beverage2.Cost()&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net Core 观察者模式","date":"2018-04-05T14:27:26.000Z","_content":"##### 观察者模式的定义\n一个目标物件管理所有相依于它的观察者物件,并且在它本身的状态改变时主动发出通知\n<!--more-->\n\n##### .Net Core实现观察者模式的代码\n###### Person.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    public class Person\n    {\n        public event EventHandle<FallsIllEventArgs> FallsIll;\n\n        public void OnFallsIll()\n        {\n            FallsIll?.Invoke(this, new FallsIllEventArgs(\"China Beijing\"));\n        }\n    }\n}\n```\n\n###### FallsIllEventArgs.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    public readonly string Address;\n\n    public FallsIllEventArgs(string address)\n    {\n        this.Address = address;\n    }\n}\n```\n\n##### Program.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var person = new Person();\n            person.FallsIll += OnFallsIll;\n            person.OnFallsIll();\n            person.FallsIll -= OnFallsIll;\n        }\n\n        private static void OnFallsIll(object sender, FallsIllEventArgs eventArgs)\n        {\n            Console.WriteLine($'A doctor has been called to(eventArgs.Address)');\n        }\n    }\n}\n```","source":"_posts/Net-Core-观察者模式.md","raw":"---\ntitle: .Net Core 观察者模式\ndate: 2018-04-05 22:27:26\ncategories : .Net Core\ntags: \n - .Net Core\n - 设计模式\n---\n##### 观察者模式的定义\n一个目标物件管理所有相依于它的观察者物件,并且在它本身的状态改变时主动发出通知\n<!--more-->\n\n##### .Net Core实现观察者模式的代码\n###### Person.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    public class Person\n    {\n        public event EventHandle<FallsIllEventArgs> FallsIll;\n\n        public void OnFallsIll()\n        {\n            FallsIll?.Invoke(this, new FallsIllEventArgs(\"China Beijing\"));\n        }\n    }\n}\n```\n\n###### FallsIllEventArgs.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    public readonly string Address;\n\n    public FallsIllEventArgs(string address)\n    {\n        this.Address = address;\n    }\n}\n```\n\n##### Program.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var person = new Person();\n            person.FallsIll += OnFallsIll;\n            person.OnFallsIll();\n            person.FallsIll -= OnFallsIll;\n        }\n\n        private static void OnFallsIll(object sender, FallsIllEventArgs eventArgs)\n        {\n            Console.WriteLine($'A doctor has been called to(eventArgs.Address)');\n        }\n    }\n}\n```","slug":"Net-Core-观察者模式","published":1,"updated":"2021-03-30T03:24:16.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx09003gvcuadhr5a5w1","content":"<h5 id=\"观察者模式的定义\"><a href=\"#观察者模式的定义\" class=\"headerlink\" title=\"观察者模式的定义\"></a>观察者模式的定义</h5><p>一个目标物件管理所有相依于它的观察者物件,并且在它本身的状态改变时主动发出通知</p>\n<span id=\"more\"></span>\n\n<h5 id=\"Net-Core实现观察者模式的代码\"><a href=\"#Net-Core实现观察者模式的代码\" class=\"headerlink\" title=\".Net Core实现观察者模式的代码\"></a>.Net Core实现观察者模式的代码</h5><h6 id=\"Person-cs\"><a href=\"#Person-cs\" class=\"headerlink\" title=\"Person.cs\"></a>Person.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandle&lt;FallsIllEventArgs&gt; FallsIll;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnFallsIll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            FallsIll?.Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> FallsIllEventArgs(<span class=\"string\">&quot;China Beijing&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"FallsIllEventArgs-cs\"><a href=\"#FallsIllEventArgs-cs\" class=\"headerlink\" title=\"FallsIllEventArgs.cs\"></a>FallsIllEventArgs.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> Address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FallsIllEventArgs</span>(<span class=\"params\"><span class=\"built_in\">string</span> address</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">            person.FallsIll += OnFallsIll;</span><br><span class=\"line\">            person.OnFallsIll();</span><br><span class=\"line\">            person.FallsIll -= OnFallsIll;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OnFallsIll</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, FallsIllEventArgs eventArgs</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine($<span class=\"string\">&#x27;A doctor has been called to(eventArgs.Address)&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":909,"excerpt":"<h5 id=\"观察者模式的定义\"><a href=\"#观察者模式的定义\" class=\"headerlink\" title=\"观察者模式的定义\"></a>观察者模式的定义</h5><p>一个目标物件管理所有相依于它的观察者物件,并且在它本身的状态改变时主动发出通知</p>","more":"<h5 id=\"Net-Core实现观察者模式的代码\"><a href=\"#Net-Core实现观察者模式的代码\" class=\"headerlink\" title=\".Net Core实现观察者模式的代码\"></a>.Net Core实现观察者模式的代码</h5><h6 id=\"Person-cs\"><a href=\"#Person-cs\" class=\"headerlink\" title=\"Person.cs\"></a>Person.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandle&lt;FallsIllEventArgs&gt; FallsIll;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnFallsIll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            FallsIll?.Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> FallsIllEventArgs(<span class=\"string\">&quot;China Beijing&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"FallsIllEventArgs-cs\"><a href=\"#FallsIllEventArgs-cs\" class=\"headerlink\" title=\"FallsIllEventArgs.cs\"></a>FallsIllEventArgs.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> Address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FallsIllEventArgs</span>(<span class=\"params\"><span class=\"built_in\">string</span> address</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">            person.FallsIll += OnFallsIll;</span><br><span class=\"line\">            person.OnFallsIll();</span><br><span class=\"line\">            person.FallsIll -= OnFallsIll;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OnFallsIll</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, FallsIllEventArgs eventArgs</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine($<span class=\"string\">&#x27;A doctor has been called to(eventArgs.Address)&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net Core 配置与自动更新","date":"2018-03-07T14:27:31.000Z","_content":".Net Core将之前Web.Config中的配置迁移到了appsettings.json文件中，并使用ConfigurationBuilder来读取该配置文件可设置在设置文件变化后自动重新加载，避免了重启程序。\n<!--more-->\n```cs\nvar builder = new ConfigurationBuilder()\n .SetBasePath(env.ContentRootPath)\n .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n .AddEnvironmentVariables();\n```\n\n#### 配置信息读取\n配置的读取比以前方便很多，可以直接使用。在ConfigurationBuilder调用Build()方法以后，就可直接取值\n```cs\nConfiguration = builder.Build();\nvar value = Configuration[\"Section:Key\"];\n```\n当配置更新以后，使用Configuration[\"Section:Key\"]得到的也是最新的值。\n\n#### 配置强类型\n可以直接使用强类型，把配置文件转换成你的对象直接使用，只要对象的属性与配置中一一对应即可。\n```cs\nservices.Configure<DatabaseOption>(configuration.GetSection(\"Database\"));\n```\n然后在构造函数中注入\n```cs\npublic EntityFrameWorkConfigure(IOptions<DatabaseOption> dataBaseOption)\n {\n     _dataBaseOption = dataBaseOption;\n }\n```\n##### 注意：IOptions<T>是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。\n\n#### 使用IOptionsSnapshot<T>自动更新\n如果你希望在使用强类型的时候，也可以自动更新你的配置而不用重启程序，你可以使用IOptionsSnapshot<T>\n```cs\npublic EntityFrameWorkConfigure(IOptionsSnapshot<DatabaseOption> dataBaseOption)\n {\n     _dataBaseOption = dataBaseOption;\n }\n```\n\n> 原文地址:http://www.zkea.net/codesnippet/detail/post-80","source":"_posts/Net-Core-配置与自动更新.md","raw":"---\ntitle: .Net Core 配置与自动更新\ndate: 2018-03-07 22:27:31\ncategories: .Net Core\ntags: \n - .Net Core\n---\n.Net Core将之前Web.Config中的配置迁移到了appsettings.json文件中，并使用ConfigurationBuilder来读取该配置文件可设置在设置文件变化后自动重新加载，避免了重启程序。\n<!--more-->\n```cs\nvar builder = new ConfigurationBuilder()\n .SetBasePath(env.ContentRootPath)\n .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n .AddEnvironmentVariables();\n```\n\n#### 配置信息读取\n配置的读取比以前方便很多，可以直接使用。在ConfigurationBuilder调用Build()方法以后，就可直接取值\n```cs\nConfiguration = builder.Build();\nvar value = Configuration[\"Section:Key\"];\n```\n当配置更新以后，使用Configuration[\"Section:Key\"]得到的也是最新的值。\n\n#### 配置强类型\n可以直接使用强类型，把配置文件转换成你的对象直接使用，只要对象的属性与配置中一一对应即可。\n```cs\nservices.Configure<DatabaseOption>(configuration.GetSection(\"Database\"));\n```\n然后在构造函数中注入\n```cs\npublic EntityFrameWorkConfigure(IOptions<DatabaseOption> dataBaseOption)\n {\n     _dataBaseOption = dataBaseOption;\n }\n```\n##### 注意：IOptions<T>是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。\n\n#### 使用IOptionsSnapshot<T>自动更新\n如果你希望在使用强类型的时候，也可以自动更新你的配置而不用重启程序，你可以使用IOptionsSnapshot<T>\n```cs\npublic EntityFrameWorkConfigure(IOptionsSnapshot<DatabaseOption> dataBaseOption)\n {\n     _dataBaseOption = dataBaseOption;\n }\n```\n\n> 原文地址:http://www.zkea.net/codesnippet/detail/post-80","slug":"Net-Core-配置与自动更新","published":1,"updated":"2021-03-30T03:24:16.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0a003kvcua8wu64ss0","content":"<p>.Net Core将之前Web.Config中的配置迁移到了appsettings.json文件中，并使用ConfigurationBuilder来读取该配置文件可设置在设置文件变化后自动重新加载，避免了重启程序。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\"> .SetBasePath(env.ContentRootPath)</span><br><span class=\"line\"> .AddJsonFile(<span class=\"string\">&quot;appsettings.json&quot;</span>, optional: <span class=\"literal\">true</span>, reloadOnChange: <span class=\"literal\">true</span>)</span><br><span class=\"line\"> .AddJsonFile(<span class=\"string\">$&quot;appsettings.<span class=\"subst\">&#123;env.EnvironmentName&#125;</span>.json&quot;</span>, optional: <span class=\"literal\">true</span>)</span><br><span class=\"line\"> .AddEnvironmentVariables();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置信息读取\"><a href=\"#配置信息读取\" class=\"headerlink\" title=\"配置信息读取\"></a>配置信息读取</h4><p>配置的读取比以前方便很多，可以直接使用。在ConfigurationBuilder调用Build()方法以后，就可直接取值</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration = builder.Build();</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = Configuration[<span class=\"string\">&quot;Section:Key&quot;</span>];</span><br></pre></td></tr></table></figure>\n<p>当配置更新以后，使用Configuration[“Section:Key”]得到的也是最新的值。</p>\n<h4 id=\"配置强类型\"><a href=\"#配置强类型\" class=\"headerlink\" title=\"配置强类型\"></a>配置强类型</h4><p>可以直接使用强类型，把配置文件转换成你的对象直接使用，只要对象的属性与配置中一一对应即可。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.Configure&lt;DatabaseOption&gt;(configuration.GetSection(<span class=\"string\">&quot;Database&quot;</span>));</span><br></pre></td></tr></table></figure>\n<p>然后在构造函数中注入</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EntityFrameWorkConfigure</span>(<span class=\"params\">IOptions&lt;DatabaseOption&gt; dataBaseOption</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span> &#123;</span><br><span class=\"line\">     _dataBaseOption = dataBaseOption;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"注意：IOptions是单例的，即当你修改了appsettings-json也不会改变它的值，这样一定要重启你的程序才会更新。\"><a href=\"#注意：IOptions是单例的，即当你修改了appsettings-json也不会改变它的值，这样一定要重启你的程序才会更新。\" class=\"headerlink\" title=\"注意：IOptions是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。\"></a>注意：IOptions<T>是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。</h5><h4 id=\"使用IOptionsSnapshot自动更新\"><a href=\"#使用IOptionsSnapshot自动更新\" class=\"headerlink\" title=\"使用IOptionsSnapshot自动更新\"></a>使用IOptionsSnapshot<T>自动更新</h4><p>如果你希望在使用强类型的时候，也可以自动更新你的配置而不用重启程序，你可以使用IOptionsSnapshot<T></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EntityFrameWorkConfigure</span>(<span class=\"params\">IOptionsSnapshot&lt;DatabaseOption&gt; dataBaseOption</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span> &#123;</span><br><span class=\"line\">     _dataBaseOption = dataBaseOption;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>原文地址:<a href=\"http://www.zkea.net/codesnippet/detail/post-80\">http://www.zkea.net/codesnippet/detail/post-80</a></p>\n</blockquote>\n","site":{"data":{}},"length":1162,"excerpt":"<p>.Net Core将之前Web.Config中的配置迁移到了appsettings.json文件中，并使用ConfigurationBuilder来读取该配置文件可设置在设置文件变化后自动重新加载，避免了重启程序。</p>","more":"<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\"> .SetBasePath(env.ContentRootPath)</span><br><span class=\"line\"> .AddJsonFile(<span class=\"string\">&quot;appsettings.json&quot;</span>, optional: <span class=\"literal\">true</span>, reloadOnChange: <span class=\"literal\">true</span>)</span><br><span class=\"line\"> .AddJsonFile(<span class=\"string\">$&quot;appsettings.<span class=\"subst\">&#123;env.EnvironmentName&#125;</span>.json&quot;</span>, optional: <span class=\"literal\">true</span>)</span><br><span class=\"line\"> .AddEnvironmentVariables();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置信息读取\"><a href=\"#配置信息读取\" class=\"headerlink\" title=\"配置信息读取\"></a>配置信息读取</h4><p>配置的读取比以前方便很多，可以直接使用。在ConfigurationBuilder调用Build()方法以后，就可直接取值</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration = builder.Build();</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = Configuration[<span class=\"string\">&quot;Section:Key&quot;</span>];</span><br></pre></td></tr></table></figure>\n<p>当配置更新以后，使用Configuration[“Section:Key”]得到的也是最新的值。</p>\n<h4 id=\"配置强类型\"><a href=\"#配置强类型\" class=\"headerlink\" title=\"配置强类型\"></a>配置强类型</h4><p>可以直接使用强类型，把配置文件转换成你的对象直接使用，只要对象的属性与配置中一一对应即可。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.Configure&lt;DatabaseOption&gt;(configuration.GetSection(<span class=\"string\">&quot;Database&quot;</span>));</span><br></pre></td></tr></table></figure>\n<p>然后在构造函数中注入</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EntityFrameWorkConfigure</span>(<span class=\"params\">IOptions&lt;DatabaseOption&gt; dataBaseOption</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span> &#123;</span><br><span class=\"line\">     _dataBaseOption = dataBaseOption;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"注意：IOptions是单例的，即当你修改了appsettings-json也不会改变它的值，这样一定要重启你的程序才会更新。\"><a href=\"#注意：IOptions是单例的，即当你修改了appsettings-json也不会改变它的值，这样一定要重启你的程序才会更新。\" class=\"headerlink\" title=\"注意：IOptions是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。\"></a>注意：IOptions<T>是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。</h5><h4 id=\"使用IOptionsSnapshot自动更新\"><a href=\"#使用IOptionsSnapshot自动更新\" class=\"headerlink\" title=\"使用IOptionsSnapshot自动更新\"></a>使用IOptionsSnapshot<T>自动更新</h4><p>如果你希望在使用强类型的时候，也可以自动更新你的配置而不用重启程序，你可以使用IOptionsSnapshot<T></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EntityFrameWorkConfigure</span>(<span class=\"params\">IOptionsSnapshot&lt;DatabaseOption&gt; dataBaseOption</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span> &#123;</span><br><span class=\"line\">     _dataBaseOption = dataBaseOption;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>原文地址:<a href=\"http://www.zkea.net/codesnippet/detail/post-80\">http://www.zkea.net/codesnippet/detail/post-80</a></p>\n</blockquote>"},{"title":".Net Linq","date":"2019-07-16T13:47:47.000Z","_content":"#### Linq简介\n\nLinq,语言集成查询,它允许使用C#或VB代码以查询数据库相同的方式来操作不同的数据源.\n<!--more-->\n##### Linq体系结构\n\n* Linq to Objects 对内存中集合的操作\n\n* Linq to DataSets 对数据集Datatable的操作\n\n* Linq to Sql 对Sql Server数据源的操作\n\n* Line to Entities 对Entity Framework的一部分并取代Linq to Sql作为在数据库上使用Linq的标准机制\n\n* Linq to Xml 对Xml数据源的操作\n\n##### Linq的语法\n\nLinq查询表达式以from子句开头,以select子句结束.在两个子句之间,可以使用where,orderby等查询操作符.\n\n```cs\nint[] arr = new int[] { 1, 4, 2, 6, 7, 9, 5, 1, 2, 4 };\nvar query = from r in arr where r < 6 orderby r select r\nvar query2 = arr.Where(r => r < 6).OrderBy(r => r);\nConsole.WriteLine($\"query个数:{query.Count()},query2个数:{query2.Count()}\");\nforeach(var item in query)\n{\n    Console.WriteLine(item);\n}\noreach (var item in query2)\n{\n    Console.WriteLine(item);\n}\n```\n\nLinq的语法分为Lanbda语法和Query语法.\n\n#### Linq to Objects\n\n##### 标准查询操作符\n\n1. 筛选操作符(Where,OfType&lt;TResult>)\n\n   * Where 根据表达式函数过滤元素\n\n    ```cs\n    int[] arr = new int[] { 1, 4, 2, 6, 7, 9, 5, 1, 2, 4 };\n    var query = from r in arr where r < 6 orderby r select r\n    var query2 = arr.Where(r => r < 6).OrderBy(r => r);\n    ```\n\n   * OfType&lt;TResult> 类型筛选\n\n    ```cs\n    object[] data = { \"One\", 2, 3, \"Four\", \"Five\", 6 };\n    var typeFilter = data.OfType<int>();\n    ```\n\n2. 投射操作符(Select,SelectMany)\n\n   * Select是把要遍历的集合IEnumerable逐一遍历，**每次返回一个T**，合并之后直接返回一个IEnumerable.\n\n   * SelectMany则把原有的集合IEnumerable每个元素遍历一遍，**每次返回一个IEnumerable**，把这些IEnumerable的“T”合并之后整体返回一个IEnumerable\n\n   * 例子\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<List<int>> numbers = new List<List<int>>()\n        {\n            new List<int>{1,2,3},\n            new List<int>{4,5,6},\n            new List<int>{7,8,9}\n        };\n        var tokens = numbers.Select(s => s);\n        var tokens1 = numbers.SelectMany(s => s);\n        foreach (List<int> line in tokens)\n        {\n            foreach (int token in line)\n            {\n                Console.WriteLine($\"Select:{token.ToString()}\");\n            }\n        }\n        foreach (int token in tokens1)\n        {\n            Console.WriteLine($\"Select Many:{token.ToString()}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n3. 排序操作符(OrderBy,ThenBy,OrderByDescending,ThenByDescending,Reverse)\n\n   * OrderBy,OrderByDescending 升序排序,降序排序(连续调用,以最后一个为准排序)\n\n   * ThenBy,ThenByDescending 是在使用OrderBy或OrderByDescending之后,再次对结果进行二次排序\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\"},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\"},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"user\"},\n        };\n        var tokens = users.Select(s => s).OrderBy(s => s.UserId).OrderBy(r => r.UserName);\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.WriteLine(\"ThenBy\");\n        tokens = users.Select(s => s).OrderBy(s => s.UserId).ThenBy(r => r.UserName);\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n   * Revise 反转集合中的元素顺序\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\"},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\"},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"user\"},\n        };\n        var tokens = users.OrderBy(s => s.UserName).Reverse();\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n4. 连接操作符(Join,GroupJoin)\n\n   * Join 根据特定的条件合并两个数据源\n\n   * GroupJoin 基于键相等对两个序列的元素进行关联并对结果进行分组.\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\",RoleId =1},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\",RoleId=2},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\",RoleId=3},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=5,UserCode=\"b0002\",UserName=\"user\",RoleId=1},\n        };\n        List<Role> roles = new List<Role>()\n        {\n            new Role(){RoleId = 1,RoleName=\"管理员\"},\n            new Role(){RoleId = 2,RoleName=\"普通用户\"},\n            new Role(){RoleId=3,RoleName=\"被封禁用户\"}\n        };\n        var lists = users.Join(roles, u => u.RoleId, r => r.RoleId, (u, r) => new { u, r }).Select(o => o).ToList();\n        Console.WriteLine(\"Join\");\n        foreach (var user in lists)\n        {\n            Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:{user.r.RoleId},RoleName:{user.r.RoleName}\");\n        }\n        var tokens = users.GroupJoin(roles,u=>u.RoleId,r=>r.RoleId, (u,r) => new { u, r }).Select(o=>o).ToList();\n        Console.WriteLine(\"GroupJoin\");\n        foreach (var user in tokens)\n        {\n            if (user.r.Count() >0)\n            {\n                Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:{user.r.FirstOrDefault().RoleId},RoleName:{user.r.FirstOrDefault().RoleName}\");\n            }\n            else\n            {\n                Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:NULL,RoleName:NULL\");\n            }\n        }\n        Console.ReadLine();\n    }\n    ```\n\n5. 组合操作符(GroupBy,ToLookup)\n\n   * GroupBy 根据关键字值对查询结果进行分组\n\n   * ToLookup 通过创建一对多的字典来组合元素\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\",RoleId=1},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\",RoleId=2},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\",RoleId=3},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\",RoleId=2},\n            new User(){UserId=5,UserCode=\"b0002\",UserName=\"user\",RoleId=1},\n        };\n        List<Role> roles = new List<Role>()\n        {\n            new Role(){RoleId = 1,RoleName=\"管理员\"},\n            new Role(){RoleId = 2,RoleName=\"普通用户\"},\n            new Role(){RoleId=3,RoleName=\"被封禁用户\"}\n        };\n        var lists = users.GroupBy(u => new { u.RoleId, u.UserName }).ToList();\n        Console.WriteLine(\"GroupBy\");\n        foreach (var user in lists)\n        {\n            Console.WriteLine($\"UserName:{user.Key.UserName},RoleId:{user.Key.RoleId},Count:{user.Count()}\");\n        }\n        var tolookup = users.ToLookup(u => u.UserName, u => u.UserId);\n        Console.WriteLine(\"ToLookup\");\n        if(tolookup.Contains(\"admin\"))\n        {\n            foreach(var item in tolookup[\"admin\"])\n            {\n                Console.WriteLine(item);\n            }\n        }\n        Console.ReadLine();\n    }\n    ```\n\n6. 限定操作符(Any,All,Contains)\n\n   * Any 是否包含满足条件的元素\n\n   * All 是否所有元素都满足条件\n\n   * Contains 某一元素是否包含在集合中\n\n    ```cs\n    bool any = users.Any(u => u.UserId == 1);\n    bool all = users.All(u => u.UserId != 0);\n    User user = new User() { UserId = 1, UserCode = \"a0001\", UserName = \"admin\", RoleId = 1 };\n    users.Add(user);\n    bool contain = users.Contains(user);\n    Console.WriteLine($\"any:{any},all:{all},contain:{contain}\");\n    ```\n\n7. 分区操作符(Take,Skip,TakeWhile,SkipWhile)\n\n   * Take 从集合中提取指定数量的元素\n\n   * Skip 从集合中跳过指定数量的元素\n\n   * TakeWhile 提取第一个条件为真时的元素\n\n   * SkipWhere 跳过集合中第一个满足条件的元素,返回剩余的所有元素\n\n    ```cs\n    var take = users.Take(2).ToList();\n    var skip = users.Skip(2).ToList();\n    var takewhile = users.TakeWhile(u => u.UserName == \"admin\").ToList();\n    var skipwhile = users.SkipWhile(u => u.UserName == \"admin\").ToList();\n    foreach(var t in take)\n    {\n        Console.WriteLine($\"take UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in skip)\n    {\n        Console.WriteLine($\"skip UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in takewhile)\n    {\n        Console.WriteLine($\"takewhile UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in skipwhile)\n    {\n        Console.WriteLine($\"skipwhile UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    Console.ReadLine();\n     ```\n\n8. Set操作符(Distinct,Union,Intersect,Except,Zip)\n\n   * Distinct 从集合中删除重复元素\n\n   * Union,Intersect,Except 并集,交集,差集\n\n   * Zip 把两个集合相应的项目合并起来,从到大较小的集合的末尾时停止.\n\n    ```cs\n    var distinct = users.Select(u=>u.UserName).Distinct().ToList();\n    foreach (var t in distinct)\n    {\n        Console.WriteLine($\"Distinct UserName:{t}\");\n    }\n    var startwitha = users.Where(u => u.UserCode.StartsWith('a')).ToList();\n    var endwithr = users.Where(u => u.UserName.EndsWith('r')).ToList();\n    var union = startwitha.Union(endwithr);\n    foreach(var u in union)\n    {\n        Console.WriteLine($\"Union UserId={u.UserId},UserCode={u.UserCode},UserName={u.UserName}\");\n    }\n    var intersect = startwitha.Intersect(endwithr);\n    foreach(var i in intersect)\n    {\n        Console.WriteLine($\"Intersect UserId={i.UserId},UserCode={i.UserCode},UserName={i.UserName}\");\n    }\n    var except = startwitha.Except(endwithr);\n    foreach(var e in except)\n    {\n        Console.WriteLine($\"Except UserId={e.UserId},UserCode={e.UserCode},UserName={e.UserName}\");\n    }\n    var zip = startwitha.Zip(endwithr, (first, second) => first.UserName + \"+\" + second.UserName);\n    foreach(var z in zip)\n    {\n        Console.WriteLine($\"Zip ={z}\");\n    }\n    ```\n\n9. 元素操作符(First,FirstOrDefault,Last,LastOrDefault,ElementAt,ElementAtOrDefault,Single,SingleOrDefault)\n\n   * First 返回第一个满足条件的元素,若不存在,则引发异常\n\n   * FirstOrDefault 返回第一个满足条件的元素,若不存在,则返回默认值\n\n   * Last 返回最后一个满足条件的元素,若不存在,则引发异常\n\n   * LastOrDefault 返回最后一个满足条件的元素,若不存在,则返回默认值\n\n   * ElementAt 返回指定索引位置的元素,若不存在,则引发异常\n\n   * ElementAtOrDefault 返回指定索引位置的元素,若不存在,则返回默认值\n\n   * Single 只返回一个满足条件的元素,若不存在或多个元素都满足条件,则引发异常\n\n   * SingleOrDefault 只返回一个满足条件的元素,若不存在,则返回默认值,若多个元素都满足条件,则引发异常\n\n    ```cs\n    var first = users.Where(u => u.UserName == \"admin\").First();\n    Console.WriteLine($\"First UserId:{first.UserId},UserCode:{first.UserCode},UserName:{first.UserName}\");\n    var firstordefault = users.Where(u => u.UserId == 6).FirstOrDefault();\n    if (firstordefault != null)\n    {\n        Console.WriteLine($\"FirstOrDefault UserId:{firstordefault.UserId},UserCode:{firstordefault.UserCode},UserName:{firstordefault.UserName}\");\n    }\n    var last = users.Where(u => u.UserName == \"admin\").Last();\n    Console.WriteLine($\"Last UserId:{last.UserId},UserCode:{last.UserCode},UserName:{last.UserName}\");\n    var lastordefault = users.Where(u => u.UserName == \"admin\").LastOrDefault();\n    Console.WriteLine($\"LastOrDefault UserId:{lastordefault.UserId},UserCode:{lastordefault.UserCode},UserName:{lastordefault.UserName}\");\n    var elementat = users.Where(u => true).ElementAt(1);\n    Console.WriteLine($\"ElementAt UserId:{elementat.UserId},UserCode:{elementat.UserCode},UserName:{elementat.UserName}\");\n    var elementatordefault = users.Where(u => true).ElementAtOrDefault(3);\n    Console.WriteLine($\"ElementAtOrDefault UserId:{elementatordefault.UserId},UserCode:{elementatordefault.UserCode},UserName:{elementatordefault.UserName}\");\n    var single = users.Where(u => u.UserId == 1).Single();\n    Console.WriteLine($\"Single UserId:{single.UserId},UserCode:{single.UserCode},UserName:{single.UserName}\");\n    var singleordefault = users.Where(u => u.UserName == \"admin\").SingleOrDefault();\n    if (singleordefault != null)\n    {\n        Console.WriteLine(\"SingleOrDefault UserId:{singleordefault.UserId},UserCode:{singleordefault.UserCode},UserName:{singleordefault.UserName}\");\n    }\n    Console.ReadLine();\n     ```\n\n10. 聚合操作符(Count,Sum,Min,Max,Average,Aggregate)\n\n    * Count 返回集合中的项数\n\n    * Sum 计算所有值的总和\n\n    * Min,Max,Average 最小值,最大值,平均值\n\n    * Aggregate 对序列进行累加\n\n    ```cs\n    var count = users.Count();\n    Console.WriteLine($\"Count:{count}\");\n    var sum = users.Sum(u => u.UserId);\n    Console.WriteLine($\"Sum:{sum}\");\n    var min = users.Min(u => u.UserId);\n    Console.WriteLine($\"Min:{min}\");\n    var max = users.Max(u => u.UserCode);\n    Console.WriteLine($\"Max:{max}\");\n    var average = users.Average(u => u.UserId);\n    Console.WriteLine($\"Average:{average}\");\n    var nums = Enumerable.Range(2, 4);\n    var aggregate = nums.Aggregate(1, (a, b) => a * b);\n    Console.WriteLine($\"Aggregate:{aggregate}\");\n    ```\n\n11. 转换操作符(ToArray,AsEnumerable,ToList,ToDictionary,Cast&lt;TResult>)\n\n    使用类型转换符会立刻立即执行结果,将查询结果放在数组/列表和字典中.\n\n     ```cs\n     User[] array = users.Where(u => u.UserName == \"admin\").ToArray();\n     List<User> list = users.Where(u => u.UserName == \"user\").ToList();\n     Dictionary<string, User> dic = users.Where(u => u.UserId == 1).ToDictionary(u => u.UserCode);\n     IEnumerable<User> enumerable = users.Where(u => true).AsEnumerable();\n     User user = users.Where(u => u.UserId == 1).Cast<User>().Single();\n     ```\n\n12. 生成操作符(Empty,Range,Repeat)\n\n    * Empty 生成空集合\n    * Range 生成一系列数字的集合\n    * Repeat 返回始终重复一个值的集合\n\n    ```cs\n    var empty = Enumerable.Empty<int>();\n    Console.WriteLine($\"Count:{empty.Count()}\");\n    var range = Enumerable.Range(1, 100);\n    foreach(var r in range)\n    {\n        Console.WriteLine($\"Range:{r}\");\n    }\n    var repeat = Enumerable.Repeat(5, 10);\n    foreach (var r in repeat)\n    {\n        Console.WriteLine($\"Repeat:{r}\");\n    }\n    ```\n","source":"_posts/Net-Linq.md","raw":"---\ntitle: .Net Linq\ndate: 2019-07-16 21:47:47\ncategories: .Net\ntags:\n - .Net\n - Linq\n---\n#### Linq简介\n\nLinq,语言集成查询,它允许使用C#或VB代码以查询数据库相同的方式来操作不同的数据源.\n<!--more-->\n##### Linq体系结构\n\n* Linq to Objects 对内存中集合的操作\n\n* Linq to DataSets 对数据集Datatable的操作\n\n* Linq to Sql 对Sql Server数据源的操作\n\n* Line to Entities 对Entity Framework的一部分并取代Linq to Sql作为在数据库上使用Linq的标准机制\n\n* Linq to Xml 对Xml数据源的操作\n\n##### Linq的语法\n\nLinq查询表达式以from子句开头,以select子句结束.在两个子句之间,可以使用where,orderby等查询操作符.\n\n```cs\nint[] arr = new int[] { 1, 4, 2, 6, 7, 9, 5, 1, 2, 4 };\nvar query = from r in arr where r < 6 orderby r select r\nvar query2 = arr.Where(r => r < 6).OrderBy(r => r);\nConsole.WriteLine($\"query个数:{query.Count()},query2个数:{query2.Count()}\");\nforeach(var item in query)\n{\n    Console.WriteLine(item);\n}\noreach (var item in query2)\n{\n    Console.WriteLine(item);\n}\n```\n\nLinq的语法分为Lanbda语法和Query语法.\n\n#### Linq to Objects\n\n##### 标准查询操作符\n\n1. 筛选操作符(Where,OfType&lt;TResult>)\n\n   * Where 根据表达式函数过滤元素\n\n    ```cs\n    int[] arr = new int[] { 1, 4, 2, 6, 7, 9, 5, 1, 2, 4 };\n    var query = from r in arr where r < 6 orderby r select r\n    var query2 = arr.Where(r => r < 6).OrderBy(r => r);\n    ```\n\n   * OfType&lt;TResult> 类型筛选\n\n    ```cs\n    object[] data = { \"One\", 2, 3, \"Four\", \"Five\", 6 };\n    var typeFilter = data.OfType<int>();\n    ```\n\n2. 投射操作符(Select,SelectMany)\n\n   * Select是把要遍历的集合IEnumerable逐一遍历，**每次返回一个T**，合并之后直接返回一个IEnumerable.\n\n   * SelectMany则把原有的集合IEnumerable每个元素遍历一遍，**每次返回一个IEnumerable**，把这些IEnumerable的“T”合并之后整体返回一个IEnumerable\n\n   * 例子\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<List<int>> numbers = new List<List<int>>()\n        {\n            new List<int>{1,2,3},\n            new List<int>{4,5,6},\n            new List<int>{7,8,9}\n        };\n        var tokens = numbers.Select(s => s);\n        var tokens1 = numbers.SelectMany(s => s);\n        foreach (List<int> line in tokens)\n        {\n            foreach (int token in line)\n            {\n                Console.WriteLine($\"Select:{token.ToString()}\");\n            }\n        }\n        foreach (int token in tokens1)\n        {\n            Console.WriteLine($\"Select Many:{token.ToString()}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n3. 排序操作符(OrderBy,ThenBy,OrderByDescending,ThenByDescending,Reverse)\n\n   * OrderBy,OrderByDescending 升序排序,降序排序(连续调用,以最后一个为准排序)\n\n   * ThenBy,ThenByDescending 是在使用OrderBy或OrderByDescending之后,再次对结果进行二次排序\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\"},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\"},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"user\"},\n        };\n        var tokens = users.Select(s => s).OrderBy(s => s.UserId).OrderBy(r => r.UserName);\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.WriteLine(\"ThenBy\");\n        tokens = users.Select(s => s).OrderBy(s => s.UserId).ThenBy(r => r.UserName);\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n   * Revise 反转集合中的元素顺序\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\"},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\"},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"user\"},\n        };\n        var tokens = users.OrderBy(s => s.UserName).Reverse();\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n4. 连接操作符(Join,GroupJoin)\n\n   * Join 根据特定的条件合并两个数据源\n\n   * GroupJoin 基于键相等对两个序列的元素进行关联并对结果进行分组.\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\",RoleId =1},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\",RoleId=2},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\",RoleId=3},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=5,UserCode=\"b0002\",UserName=\"user\",RoleId=1},\n        };\n        List<Role> roles = new List<Role>()\n        {\n            new Role(){RoleId = 1,RoleName=\"管理员\"},\n            new Role(){RoleId = 2,RoleName=\"普通用户\"},\n            new Role(){RoleId=3,RoleName=\"被封禁用户\"}\n        };\n        var lists = users.Join(roles, u => u.RoleId, r => r.RoleId, (u, r) => new { u, r }).Select(o => o).ToList();\n        Console.WriteLine(\"Join\");\n        foreach (var user in lists)\n        {\n            Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:{user.r.RoleId},RoleName:{user.r.RoleName}\");\n        }\n        var tokens = users.GroupJoin(roles,u=>u.RoleId,r=>r.RoleId, (u,r) => new { u, r }).Select(o=>o).ToList();\n        Console.WriteLine(\"GroupJoin\");\n        foreach (var user in tokens)\n        {\n            if (user.r.Count() >0)\n            {\n                Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:{user.r.FirstOrDefault().RoleId},RoleName:{user.r.FirstOrDefault().RoleName}\");\n            }\n            else\n            {\n                Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:NULL,RoleName:NULL\");\n            }\n        }\n        Console.ReadLine();\n    }\n    ```\n\n5. 组合操作符(GroupBy,ToLookup)\n\n   * GroupBy 根据关键字值对查询结果进行分组\n\n   * ToLookup 通过创建一对多的字典来组合元素\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\",RoleId=1},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\",RoleId=2},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\",RoleId=3},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\",RoleId=2},\n            new User(){UserId=5,UserCode=\"b0002\",UserName=\"user\",RoleId=1},\n        };\n        List<Role> roles = new List<Role>()\n        {\n            new Role(){RoleId = 1,RoleName=\"管理员\"},\n            new Role(){RoleId = 2,RoleName=\"普通用户\"},\n            new Role(){RoleId=3,RoleName=\"被封禁用户\"}\n        };\n        var lists = users.GroupBy(u => new { u.RoleId, u.UserName }).ToList();\n        Console.WriteLine(\"GroupBy\");\n        foreach (var user in lists)\n        {\n            Console.WriteLine($\"UserName:{user.Key.UserName},RoleId:{user.Key.RoleId},Count:{user.Count()}\");\n        }\n        var tolookup = users.ToLookup(u => u.UserName, u => u.UserId);\n        Console.WriteLine(\"ToLookup\");\n        if(tolookup.Contains(\"admin\"))\n        {\n            foreach(var item in tolookup[\"admin\"])\n            {\n                Console.WriteLine(item);\n            }\n        }\n        Console.ReadLine();\n    }\n    ```\n\n6. 限定操作符(Any,All,Contains)\n\n   * Any 是否包含满足条件的元素\n\n   * All 是否所有元素都满足条件\n\n   * Contains 某一元素是否包含在集合中\n\n    ```cs\n    bool any = users.Any(u => u.UserId == 1);\n    bool all = users.All(u => u.UserId != 0);\n    User user = new User() { UserId = 1, UserCode = \"a0001\", UserName = \"admin\", RoleId = 1 };\n    users.Add(user);\n    bool contain = users.Contains(user);\n    Console.WriteLine($\"any:{any},all:{all},contain:{contain}\");\n    ```\n\n7. 分区操作符(Take,Skip,TakeWhile,SkipWhile)\n\n   * Take 从集合中提取指定数量的元素\n\n   * Skip 从集合中跳过指定数量的元素\n\n   * TakeWhile 提取第一个条件为真时的元素\n\n   * SkipWhere 跳过集合中第一个满足条件的元素,返回剩余的所有元素\n\n    ```cs\n    var take = users.Take(2).ToList();\n    var skip = users.Skip(2).ToList();\n    var takewhile = users.TakeWhile(u => u.UserName == \"admin\").ToList();\n    var skipwhile = users.SkipWhile(u => u.UserName == \"admin\").ToList();\n    foreach(var t in take)\n    {\n        Console.WriteLine($\"take UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in skip)\n    {\n        Console.WriteLine($\"skip UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in takewhile)\n    {\n        Console.WriteLine($\"takewhile UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in skipwhile)\n    {\n        Console.WriteLine($\"skipwhile UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    Console.ReadLine();\n     ```\n\n8. Set操作符(Distinct,Union,Intersect,Except,Zip)\n\n   * Distinct 从集合中删除重复元素\n\n   * Union,Intersect,Except 并集,交集,差集\n\n   * Zip 把两个集合相应的项目合并起来,从到大较小的集合的末尾时停止.\n\n    ```cs\n    var distinct = users.Select(u=>u.UserName).Distinct().ToList();\n    foreach (var t in distinct)\n    {\n        Console.WriteLine($\"Distinct UserName:{t}\");\n    }\n    var startwitha = users.Where(u => u.UserCode.StartsWith('a')).ToList();\n    var endwithr = users.Where(u => u.UserName.EndsWith('r')).ToList();\n    var union = startwitha.Union(endwithr);\n    foreach(var u in union)\n    {\n        Console.WriteLine($\"Union UserId={u.UserId},UserCode={u.UserCode},UserName={u.UserName}\");\n    }\n    var intersect = startwitha.Intersect(endwithr);\n    foreach(var i in intersect)\n    {\n        Console.WriteLine($\"Intersect UserId={i.UserId},UserCode={i.UserCode},UserName={i.UserName}\");\n    }\n    var except = startwitha.Except(endwithr);\n    foreach(var e in except)\n    {\n        Console.WriteLine($\"Except UserId={e.UserId},UserCode={e.UserCode},UserName={e.UserName}\");\n    }\n    var zip = startwitha.Zip(endwithr, (first, second) => first.UserName + \"+\" + second.UserName);\n    foreach(var z in zip)\n    {\n        Console.WriteLine($\"Zip ={z}\");\n    }\n    ```\n\n9. 元素操作符(First,FirstOrDefault,Last,LastOrDefault,ElementAt,ElementAtOrDefault,Single,SingleOrDefault)\n\n   * First 返回第一个满足条件的元素,若不存在,则引发异常\n\n   * FirstOrDefault 返回第一个满足条件的元素,若不存在,则返回默认值\n\n   * Last 返回最后一个满足条件的元素,若不存在,则引发异常\n\n   * LastOrDefault 返回最后一个满足条件的元素,若不存在,则返回默认值\n\n   * ElementAt 返回指定索引位置的元素,若不存在,则引发异常\n\n   * ElementAtOrDefault 返回指定索引位置的元素,若不存在,则返回默认值\n\n   * Single 只返回一个满足条件的元素,若不存在或多个元素都满足条件,则引发异常\n\n   * SingleOrDefault 只返回一个满足条件的元素,若不存在,则返回默认值,若多个元素都满足条件,则引发异常\n\n    ```cs\n    var first = users.Where(u => u.UserName == \"admin\").First();\n    Console.WriteLine($\"First UserId:{first.UserId},UserCode:{first.UserCode},UserName:{first.UserName}\");\n    var firstordefault = users.Where(u => u.UserId == 6).FirstOrDefault();\n    if (firstordefault != null)\n    {\n        Console.WriteLine($\"FirstOrDefault UserId:{firstordefault.UserId},UserCode:{firstordefault.UserCode},UserName:{firstordefault.UserName}\");\n    }\n    var last = users.Where(u => u.UserName == \"admin\").Last();\n    Console.WriteLine($\"Last UserId:{last.UserId},UserCode:{last.UserCode},UserName:{last.UserName}\");\n    var lastordefault = users.Where(u => u.UserName == \"admin\").LastOrDefault();\n    Console.WriteLine($\"LastOrDefault UserId:{lastordefault.UserId},UserCode:{lastordefault.UserCode},UserName:{lastordefault.UserName}\");\n    var elementat = users.Where(u => true).ElementAt(1);\n    Console.WriteLine($\"ElementAt UserId:{elementat.UserId},UserCode:{elementat.UserCode},UserName:{elementat.UserName}\");\n    var elementatordefault = users.Where(u => true).ElementAtOrDefault(3);\n    Console.WriteLine($\"ElementAtOrDefault UserId:{elementatordefault.UserId},UserCode:{elementatordefault.UserCode},UserName:{elementatordefault.UserName}\");\n    var single = users.Where(u => u.UserId == 1).Single();\n    Console.WriteLine($\"Single UserId:{single.UserId},UserCode:{single.UserCode},UserName:{single.UserName}\");\n    var singleordefault = users.Where(u => u.UserName == \"admin\").SingleOrDefault();\n    if (singleordefault != null)\n    {\n        Console.WriteLine(\"SingleOrDefault UserId:{singleordefault.UserId},UserCode:{singleordefault.UserCode},UserName:{singleordefault.UserName}\");\n    }\n    Console.ReadLine();\n     ```\n\n10. 聚合操作符(Count,Sum,Min,Max,Average,Aggregate)\n\n    * Count 返回集合中的项数\n\n    * Sum 计算所有值的总和\n\n    * Min,Max,Average 最小值,最大值,平均值\n\n    * Aggregate 对序列进行累加\n\n    ```cs\n    var count = users.Count();\n    Console.WriteLine($\"Count:{count}\");\n    var sum = users.Sum(u => u.UserId);\n    Console.WriteLine($\"Sum:{sum}\");\n    var min = users.Min(u => u.UserId);\n    Console.WriteLine($\"Min:{min}\");\n    var max = users.Max(u => u.UserCode);\n    Console.WriteLine($\"Max:{max}\");\n    var average = users.Average(u => u.UserId);\n    Console.WriteLine($\"Average:{average}\");\n    var nums = Enumerable.Range(2, 4);\n    var aggregate = nums.Aggregate(1, (a, b) => a * b);\n    Console.WriteLine($\"Aggregate:{aggregate}\");\n    ```\n\n11. 转换操作符(ToArray,AsEnumerable,ToList,ToDictionary,Cast&lt;TResult>)\n\n    使用类型转换符会立刻立即执行结果,将查询结果放在数组/列表和字典中.\n\n     ```cs\n     User[] array = users.Where(u => u.UserName == \"admin\").ToArray();\n     List<User> list = users.Where(u => u.UserName == \"user\").ToList();\n     Dictionary<string, User> dic = users.Where(u => u.UserId == 1).ToDictionary(u => u.UserCode);\n     IEnumerable<User> enumerable = users.Where(u => true).AsEnumerable();\n     User user = users.Where(u => u.UserId == 1).Cast<User>().Single();\n     ```\n\n12. 生成操作符(Empty,Range,Repeat)\n\n    * Empty 生成空集合\n    * Range 生成一系列数字的集合\n    * Repeat 返回始终重复一个值的集合\n\n    ```cs\n    var empty = Enumerable.Empty<int>();\n    Console.WriteLine($\"Count:{empty.Count()}\");\n    var range = Enumerable.Range(1, 100);\n    foreach(var r in range)\n    {\n        Console.WriteLine($\"Range:{r}\");\n    }\n    var repeat = Enumerable.Repeat(5, 10);\n    foreach (var r in repeat)\n    {\n        Console.WriteLine($\"Repeat:{r}\");\n    }\n    ```\n","slug":"Net-Linq","published":1,"updated":"2021-03-30T03:24:16.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0b003mvcua4izc7sog","content":"<h4 id=\"Linq简介\"><a href=\"#Linq简介\" class=\"headerlink\" title=\"Linq简介\"></a>Linq简介</h4><p>Linq,语言集成查询,它允许使用C#或VB代码以查询数据库相同的方式来操作不同的数据源.</p>\n<span id=\"more\"></span>\n<h5 id=\"Linq体系结构\"><a href=\"#Linq体系结构\" class=\"headerlink\" title=\"Linq体系结构\"></a>Linq体系结构</h5><ul>\n<li><p>Linq to Objects 对内存中集合的操作</p>\n</li>\n<li><p>Linq to DataSets 对数据集Datatable的操作</p>\n</li>\n<li><p>Linq to Sql 对Sql Server数据源的操作</p>\n</li>\n<li><p>Line to Entities 对Entity Framework的一部分并取代Linq to Sql作为在数据库上使用Linq的标准机制</p>\n</li>\n<li><p>Linq to Xml 对Xml数据源的操作</p>\n</li>\n</ul>\n<h5 id=\"Linq的语法\"><a href=\"#Linq的语法\" class=\"headerlink\" title=\"Linq的语法\"></a>Linq的语法</h5><p>Linq查询表达式以from子句开头,以select子句结束.在两个子句之间,可以使用where,orderby等查询操作符.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> r <span class=\"keyword\">in</span> arr <span class=\"keyword\">where</span> r &lt; <span class=\"number\">6</span> <span class=\"keyword\">orderby</span> r <span class=\"keyword\">select</span> r</span><br><span class=\"line\"><span class=\"keyword\">var</span> query2 = arr.Where(r =&gt; r &lt; <span class=\"number\">6</span>).OrderBy(r =&gt; r);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;query个数:<span class=\"subst\">&#123;query.Count()&#125;</span>,query2个数:<span class=\"subst\">&#123;query2.Count()&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> query)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oreach (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> query2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Linq的语法分为Lanbda语法和Query语法.</p>\n<h4 id=\"Linq-to-Objects\"><a href=\"#Linq-to-Objects\" class=\"headerlink\" title=\"Linq to Objects\"></a>Linq to Objects</h4><h5 id=\"标准查询操作符\"><a href=\"#标准查询操作符\" class=\"headerlink\" title=\"标准查询操作符\"></a>标准查询操作符</h5><ol>\n<li><p>筛选操作符(Where,OfType&lt;TResult&gt;)</p>\n<ul>\n<li>Where 根据表达式函数过滤元素</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> r <span class=\"keyword\">in</span> arr <span class=\"keyword\">where</span> r &lt; <span class=\"number\">6</span> <span class=\"keyword\">orderby</span> r <span class=\"keyword\">select</span> r</span><br><span class=\"line\"><span class=\"keyword\">var</span> query2 = arr.Where(r =&gt; r &lt; <span class=\"number\">6</span>).OrderBy(r =&gt; r);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>OfType&lt;TResult&gt; 类型筛选</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">object</span>[] data = &#123; <span class=\"string\">&quot;One&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;Four&quot;</span>, <span class=\"string\">&quot;Five&quot;</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> typeFilter = data.OfType&lt;<span class=\"built_in\">int</span>&gt;();</span><br></pre></td></tr></table></figure></li>\n<li><p>投射操作符(Select,SelectMany)</p>\n<ul>\n<li><p>Select是把要遍历的集合IEnumerable逐一遍历，<strong>每次返回一个T</strong>，合并之后直接返回一个IEnumerable.</p>\n</li>\n<li><p>SelectMany则把原有的集合IEnumerable每个元素遍历一遍，<strong>每次返回一个IEnumerable</strong>，把这些IEnumerable的“T”合并之后整体返回一个IEnumerable</p>\n</li>\n<li><p>例子</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;List&lt;<span class=\"built_in\">int</span>&gt;&gt; numbers = <span class=\"keyword\">new</span> List&lt;List&lt;<span class=\"built_in\">int</span>&gt;&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = numbers.Select(s =&gt; s);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens1 = numbers.SelectMany(s =&gt; s);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (List&lt;<span class=\"built_in\">int</span>&gt; line <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"built_in\">int</span> token <span class=\"keyword\">in</span> line)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;Select:<span class=\"subst\">&#123;token.ToString()&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"built_in\">int</span> token <span class=\"keyword\">in</span> tokens1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;Select Many:<span class=\"subst\">&#123;token.ToString()&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>排序操作符(OrderBy,ThenBy,OrderByDescending,ThenByDescending,Reverse)</p>\n<ul>\n<li><p>OrderBy,OrderByDescending 升序排序,降序排序(连续调用,以最后一个为准排序)</p>\n</li>\n<li><p>ThenBy,ThenByDescending 是在使用OrderBy或OrderByDescending之后,再次对结果进行二次排序</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">&quot;a0001&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">&quot;b0001&quot;</span>,UserName=<span class=\"string\">&quot;super&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">&quot;a0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.Select(s =&gt; s).OrderBy(s =&gt; s.UserId).OrderBy(r =&gt; r.UserName);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;ThenBy&quot;</span>);</span><br><span class=\"line\">    tokens = users.Select(s =&gt; s).OrderBy(s =&gt; s.UserId).ThenBy(r =&gt; r.UserName);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Revise 反转集合中的元素顺序</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">&quot;a0001&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">&quot;b0001&quot;</span>,UserName=<span class=\"string\">&quot;super&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">&quot;a0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.OrderBy(s =&gt; s.UserName).Reverse();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>连接操作符(Join,GroupJoin)</p>\n<ul>\n<li><p>Join 根据特定的条件合并两个数据源</p>\n</li>\n<li><p>GroupJoin 基于键相等对两个序列的元素进行关联并对结果进行分组.</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">&quot;a0001&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>,RoleId =<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">&quot;b0001&quot;</span>,UserName=<span class=\"string\">&quot;super&quot;</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">&quot;a0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>,RoleId=<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">5</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    List&lt;Role&gt; roles = <span class=\"keyword\">new</span> List&lt;Role&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">1</span>,RoleName=<span class=\"string\">&quot;管理员&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">2</span>,RoleName=<span class=\"string\">&quot;普通用户&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId=<span class=\"number\">3</span>,RoleName=<span class=\"string\">&quot;被封禁用户&quot;</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lists = users.Join(roles, u =&gt; u.RoleId, r =&gt; r.RoleId, (u, r) =&gt; <span class=\"keyword\">new</span> &#123; u, r &#125;).Select(o =&gt; o).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Join&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> lists)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.r.RoleId&#125;</span>,RoleName:<span class=\"subst\">&#123;user.r.RoleName&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.GroupJoin(roles,u=&gt;u.RoleId,r=&gt;r.RoleId, (u,r) =&gt; <span class=\"keyword\">new</span> &#123; u, r &#125;).Select(o=&gt;o).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;GroupJoin&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user.r.Count() &gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.r.FirstOrDefault().RoleId&#125;</span>,RoleName:<span class=\"subst\">&#123;user.r.FirstOrDefault().RoleName&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:NULL,RoleName:NULL&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>组合操作符(GroupBy,ToLookup)</p>\n<ul>\n<li><p>GroupBy 根据关键字值对查询结果进行分组</p>\n</li>\n<li><p>ToLookup 通过创建一对多的字典来组合元素</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">&quot;a0001&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">&quot;b0001&quot;</span>,UserName=<span class=\"string\">&quot;super&quot;</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">&quot;a0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>,RoleId=<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">5</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    List&lt;Role&gt; roles = <span class=\"keyword\">new</span> List&lt;Role&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">1</span>,RoleName=<span class=\"string\">&quot;管理员&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">2</span>,RoleName=<span class=\"string\">&quot;普通用户&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId=<span class=\"number\">3</span>,RoleName=<span class=\"string\">&quot;被封禁用户&quot;</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lists = users.GroupBy(u =&gt; <span class=\"keyword\">new</span> &#123; u.RoleId, u.UserName &#125;).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;GroupBy&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> lists)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;UserName:<span class=\"subst\">&#123;user.Key.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.Key.RoleId&#125;</span>,Count:<span class=\"subst\">&#123;user.Count()&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tolookup = users.ToLookup(u =&gt; u.UserName, u =&gt; u.UserId);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;ToLookup&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tolookup.Contains(<span class=\"string\">&quot;admin&quot;</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> tolookup[<span class=\"string\">&quot;admin&quot;</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>限定操作符(Any,All,Contains)</p>\n<ul>\n<li><p>Any 是否包含满足条件的元素</p>\n</li>\n<li><p>All 是否所有元素都满足条件</p>\n</li>\n<li><p>Contains 某一元素是否包含在集合中</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> any = users.Any(u =&gt; u.UserId == <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">bool</span> all = users.All(u =&gt; u.UserId != <span class=\"number\">0</span>);</span><br><span class=\"line\">User user = <span class=\"keyword\">new</span> User() &#123; UserId = <span class=\"number\">1</span>, UserCode = <span class=\"string\">&quot;a0001&quot;</span>, UserName = <span class=\"string\">&quot;admin&quot;</span>, RoleId = <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">users.Add(user);</span><br><span class=\"line\"><span class=\"built_in\">bool</span> contain = users.Contains(user);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;any:<span class=\"subst\">&#123;any&#125;</span>,all:<span class=\"subst\">&#123;all&#125;</span>,contain:<span class=\"subst\">&#123;contain&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>分区操作符(Take,Skip,TakeWhile,SkipWhile)</p>\n<ul>\n<li><p>Take 从集合中提取指定数量的元素</p>\n</li>\n<li><p>Skip 从集合中跳过指定数量的元素</p>\n</li>\n<li><p>TakeWhile 提取第一个条件为真时的元素</p>\n</li>\n<li><p>SkipWhere 跳过集合中第一个满足条件的元素,返回剩余的所有元素</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> take = users.Take(<span class=\"number\">2</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> skip = users.Skip(<span class=\"number\">2</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> takewhile = users.TakeWhile(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> skipwhile = users.SkipWhile(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> take)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;take UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> skip)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;skip UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> takewhile)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;takewhile UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> skipwhile)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;skipwhile UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Console.ReadLine();</span><br></pre></td></tr></table></figure></li>\n<li><p>Set操作符(Distinct,Union,Intersect,Except,Zip)</p>\n<ul>\n<li><p>Distinct 从集合中删除重复元素</p>\n</li>\n<li><p>Union,Intersect,Except 并集,交集,差集</p>\n</li>\n<li><p>Zip 把两个集合相应的项目合并起来,从到大较小的集合的末尾时停止.</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> distinct = users.Select(u=&gt;u.UserName).Distinct().ToList();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> distinct)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Distinct UserName:<span class=\"subst\">&#123;t&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> startwitha = users.Where(u =&gt; u.UserCode.StartsWith(<span class=\"string\">&#x27;a&#x27;</span>)).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> endwithr = users.Where(u =&gt; u.UserName.EndsWith(<span class=\"string\">&#x27;r&#x27;</span>)).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> union = startwitha.Union(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> u <span class=\"keyword\">in</span> union)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Union UserId=<span class=\"subst\">&#123;u.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;u.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;u.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = startwitha.Intersect(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> intersect)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Intersect UserId=<span class=\"subst\">&#123;i.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;i.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;i.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> except = startwitha.Except(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> e <span class=\"keyword\">in</span> except)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Except UserId=<span class=\"subst\">&#123;e.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;e.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;e.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> zip = startwitha.Zip(endwithr, (first, second) =&gt; first.UserName + <span class=\"string\">&quot;+&quot;</span> + second.UserName);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> z <span class=\"keyword\">in</span> zip)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Zip =<span class=\"subst\">&#123;z&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>元素操作符(First,FirstOrDefault,Last,LastOrDefault,ElementAt,ElementAtOrDefault,Single,SingleOrDefault)</p>\n<ul>\n<li><p>First 返回第一个满足条件的元素,若不存在,则引发异常</p>\n</li>\n<li><p>FirstOrDefault 返回第一个满足条件的元素,若不存在,则返回默认值</p>\n</li>\n<li><p>Last 返回最后一个满足条件的元素,若不存在,则引发异常</p>\n</li>\n<li><p>LastOrDefault 返回最后一个满足条件的元素,若不存在,则返回默认值</p>\n</li>\n<li><p>ElementAt 返回指定索引位置的元素,若不存在,则引发异常</p>\n</li>\n<li><p>ElementAtOrDefault 返回指定索引位置的元素,若不存在,则返回默认值</p>\n</li>\n<li><p>Single 只返回一个满足条件的元素,若不存在或多个元素都满足条件,则引发异常</p>\n</li>\n<li><p>SingleOrDefault 只返回一个满足条件的元素,若不存在,则返回默认值,若多个元素都满足条件,则引发异常</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).First();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;First UserId:<span class=\"subst\">&#123;first.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;first.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;first.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> firstordefault = users.Where(u =&gt; u.UserId == <span class=\"number\">6</span>).FirstOrDefault();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (firstordefault != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;FirstOrDefault UserId:<span class=\"subst\">&#123;firstordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;firstordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;firstordefault.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> last = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).Last();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Last UserId:<span class=\"subst\">&#123;last.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;last.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;last.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastordefault = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).LastOrDefault();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;LastOrDefault UserId:<span class=\"subst\">&#123;lastordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;lastordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;lastordefault.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> elementat = users.Where(u =&gt; <span class=\"literal\">true</span>).ElementAt(<span class=\"number\">1</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;ElementAt UserId:<span class=\"subst\">&#123;elementat.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;elementat.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;elementat.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> elementatordefault = users.Where(u =&gt; <span class=\"literal\">true</span>).ElementAtOrDefault(<span class=\"number\">3</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;ElementAtOrDefault UserId:<span class=\"subst\">&#123;elementatordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;elementatordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;elementatordefault.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> single = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).Single();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Single UserId:<span class=\"subst\">&#123;single.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;single.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;single.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> singleordefault = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).SingleOrDefault();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (singleordefault != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;SingleOrDefault UserId:&#123;singleordefault.UserId&#125;,UserCode:&#123;singleordefault.UserCode&#125;,UserName:&#123;singleordefault.UserName&#125;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Console.ReadLine();</span><br></pre></td></tr></table></figure></li>\n<li><p>聚合操作符(Count,Sum,Min,Max,Average,Aggregate)</p>\n<ul>\n<li><p>Count 返回集合中的项数</p>\n</li>\n<li><p>Sum 计算所有值的总和</p>\n</li>\n<li><p>Min,Max,Average 最小值,最大值,平均值</p>\n</li>\n<li><p>Aggregate 对序列进行累加</p>\n</li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = users.Count();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Count:<span class=\"subst\">&#123;count&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = users.Sum(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Sum:<span class=\"subst\">&#123;sum&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> min = users.Min(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Min:<span class=\"subst\">&#123;min&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = users.Max(u =&gt; u.UserCode);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Max:<span class=\"subst\">&#123;max&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> average = users.Average(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Average:<span class=\"subst\">&#123;average&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nums = Enumerable.Range(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> aggregate = nums.Aggregate(<span class=\"number\">1</span>, (a, b) =&gt; a * b);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Aggregate:<span class=\"subst\">&#123;aggregate&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>转换操作符(ToArray,AsEnumerable,ToList,ToDictionary,Cast&lt;TResult&gt;)</p>\n<p>使用类型转换符会立刻立即执行结果,将查询结果放在数组/列表和字典中.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User[] array = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).ToArray();</span><br><span class=\"line\">List&lt;User&gt; list = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;user&quot;</span>).ToList();</span><br><span class=\"line\">Dictionary&lt;<span class=\"built_in\">string</span>, User&gt; dic = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).ToDictionary(u =&gt; u.UserCode);</span><br><span class=\"line\">IEnumerable&lt;User&gt; enumerable = users.Where(u =&gt; <span class=\"literal\">true</span>).AsEnumerable();</span><br><span class=\"line\">User user = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).Cast&lt;User&gt;().Single();</span><br></pre></td></tr></table></figure></li>\n<li><p>生成操作符(Empty,Range,Repeat)</p>\n<ul>\n<li>Empty 生成空集合</li>\n<li>Range 生成一系列数字的集合</li>\n<li>Repeat 返回始终重复一个值的集合</li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> empty = Enumerable.Empty&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Count:<span class=\"subst\">&#123;empty.Count()&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> range = Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> range)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Range:<span class=\"subst\">&#123;r&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> repeat = Enumerable.Repeat(<span class=\"number\">5</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> repeat)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Repeat:<span class=\"subst\">&#123;r&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":13871,"excerpt":"<h4 id=\"Linq简介\"><a href=\"#Linq简介\" class=\"headerlink\" title=\"Linq简介\"></a>Linq简介</h4><p>Linq,语言集成查询,它允许使用C#或VB代码以查询数据库相同的方式来操作不同的数据源.</p>","more":"<h5 id=\"Linq体系结构\"><a href=\"#Linq体系结构\" class=\"headerlink\" title=\"Linq体系结构\"></a>Linq体系结构</h5><ul>\n<li><p>Linq to Objects 对内存中集合的操作</p>\n</li>\n<li><p>Linq to DataSets 对数据集Datatable的操作</p>\n</li>\n<li><p>Linq to Sql 对Sql Server数据源的操作</p>\n</li>\n<li><p>Line to Entities 对Entity Framework的一部分并取代Linq to Sql作为在数据库上使用Linq的标准机制</p>\n</li>\n<li><p>Linq to Xml 对Xml数据源的操作</p>\n</li>\n</ul>\n<h5 id=\"Linq的语法\"><a href=\"#Linq的语法\" class=\"headerlink\" title=\"Linq的语法\"></a>Linq的语法</h5><p>Linq查询表达式以from子句开头,以select子句结束.在两个子句之间,可以使用where,orderby等查询操作符.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> r <span class=\"keyword\">in</span> arr <span class=\"keyword\">where</span> r &lt; <span class=\"number\">6</span> <span class=\"keyword\">orderby</span> r <span class=\"keyword\">select</span> r</span><br><span class=\"line\"><span class=\"keyword\">var</span> query2 = arr.Where(r =&gt; r &lt; <span class=\"number\">6</span>).OrderBy(r =&gt; r);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;query个数:<span class=\"subst\">&#123;query.Count()&#125;</span>,query2个数:<span class=\"subst\">&#123;query2.Count()&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> query)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oreach (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> query2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Linq的语法分为Lanbda语法和Query语法.</p>\n<h4 id=\"Linq-to-Objects\"><a href=\"#Linq-to-Objects\" class=\"headerlink\" title=\"Linq to Objects\"></a>Linq to Objects</h4><h5 id=\"标准查询操作符\"><a href=\"#标准查询操作符\" class=\"headerlink\" title=\"标准查询操作符\"></a>标准查询操作符</h5><ol>\n<li><p>筛选操作符(Where,OfType&lt;TResult&gt;)</p>\n<ul>\n<li>Where 根据表达式函数过滤元素</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> r <span class=\"keyword\">in</span> arr <span class=\"keyword\">where</span> r &lt; <span class=\"number\">6</span> <span class=\"keyword\">orderby</span> r <span class=\"keyword\">select</span> r</span><br><span class=\"line\"><span class=\"keyword\">var</span> query2 = arr.Where(r =&gt; r &lt; <span class=\"number\">6</span>).OrderBy(r =&gt; r);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>OfType&lt;TResult&gt; 类型筛选</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">object</span>[] data = &#123; <span class=\"string\">&quot;One&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;Four&quot;</span>, <span class=\"string\">&quot;Five&quot;</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> typeFilter = data.OfType&lt;<span class=\"built_in\">int</span>&gt;();</span><br></pre></td></tr></table></figure></li>\n<li><p>投射操作符(Select,SelectMany)</p>\n<ul>\n<li><p>Select是把要遍历的集合IEnumerable逐一遍历，<strong>每次返回一个T</strong>，合并之后直接返回一个IEnumerable.</p>\n</li>\n<li><p>SelectMany则把原有的集合IEnumerable每个元素遍历一遍，<strong>每次返回一个IEnumerable</strong>，把这些IEnumerable的“T”合并之后整体返回一个IEnumerable</p>\n</li>\n<li><p>例子</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;List&lt;<span class=\"built_in\">int</span>&gt;&gt; numbers = <span class=\"keyword\">new</span> List&lt;List&lt;<span class=\"built_in\">int</span>&gt;&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = numbers.Select(s =&gt; s);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens1 = numbers.SelectMany(s =&gt; s);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (List&lt;<span class=\"built_in\">int</span>&gt; line <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"built_in\">int</span> token <span class=\"keyword\">in</span> line)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;Select:<span class=\"subst\">&#123;token.ToString()&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"built_in\">int</span> token <span class=\"keyword\">in</span> tokens1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;Select Many:<span class=\"subst\">&#123;token.ToString()&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>排序操作符(OrderBy,ThenBy,OrderByDescending,ThenByDescending,Reverse)</p>\n<ul>\n<li><p>OrderBy,OrderByDescending 升序排序,降序排序(连续调用,以最后一个为准排序)</p>\n</li>\n<li><p>ThenBy,ThenByDescending 是在使用OrderBy或OrderByDescending之后,再次对结果进行二次排序</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">&quot;a0001&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">&quot;b0001&quot;</span>,UserName=<span class=\"string\">&quot;super&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">&quot;a0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.Select(s =&gt; s).OrderBy(s =&gt; s.UserId).OrderBy(r =&gt; r.UserName);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;ThenBy&quot;</span>);</span><br><span class=\"line\">    tokens = users.Select(s =&gt; s).OrderBy(s =&gt; s.UserId).ThenBy(r =&gt; r.UserName);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Revise 反转集合中的元素顺序</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">&quot;a0001&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">&quot;b0001&quot;</span>,UserName=<span class=\"string\">&quot;super&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">&quot;a0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.OrderBy(s =&gt; s.UserName).Reverse();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>连接操作符(Join,GroupJoin)</p>\n<ul>\n<li><p>Join 根据特定的条件合并两个数据源</p>\n</li>\n<li><p>GroupJoin 基于键相等对两个序列的元素进行关联并对结果进行分组.</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">&quot;a0001&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>,RoleId =<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">&quot;b0001&quot;</span>,UserName=<span class=\"string\">&quot;super&quot;</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">&quot;a0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>,RoleId=<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">5</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    List&lt;Role&gt; roles = <span class=\"keyword\">new</span> List&lt;Role&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">1</span>,RoleName=<span class=\"string\">&quot;管理员&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">2</span>,RoleName=<span class=\"string\">&quot;普通用户&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId=<span class=\"number\">3</span>,RoleName=<span class=\"string\">&quot;被封禁用户&quot;</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lists = users.Join(roles, u =&gt; u.RoleId, r =&gt; r.RoleId, (u, r) =&gt; <span class=\"keyword\">new</span> &#123; u, r &#125;).Select(o =&gt; o).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Join&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> lists)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.r.RoleId&#125;</span>,RoleName:<span class=\"subst\">&#123;user.r.RoleName&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.GroupJoin(roles,u=&gt;u.RoleId,r=&gt;r.RoleId, (u,r) =&gt; <span class=\"keyword\">new</span> &#123; u, r &#125;).Select(o=&gt;o).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;GroupJoin&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user.r.Count() &gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.r.FirstOrDefault().RoleId&#125;</span>,RoleName:<span class=\"subst\">&#123;user.r.FirstOrDefault().RoleName&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:NULL,RoleName:NULL&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>组合操作符(GroupBy,ToLookup)</p>\n<ul>\n<li><p>GroupBy 根据关键字值对查询结果进行分组</p>\n</li>\n<li><p>ToLookup 通过创建一对多的字典来组合元素</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">&quot;a0001&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">&quot;b0001&quot;</span>,UserName=<span class=\"string\">&quot;super&quot;</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">&quot;a0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>,RoleId=<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;admin&quot;</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">5</span>,UserCode=<span class=\"string\">&quot;b0002&quot;</span>,UserName=<span class=\"string\">&quot;user&quot;</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    List&lt;Role&gt; roles = <span class=\"keyword\">new</span> List&lt;Role&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">1</span>,RoleName=<span class=\"string\">&quot;管理员&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">2</span>,RoleName=<span class=\"string\">&quot;普通用户&quot;</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId=<span class=\"number\">3</span>,RoleName=<span class=\"string\">&quot;被封禁用户&quot;</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lists = users.GroupBy(u =&gt; <span class=\"keyword\">new</span> &#123; u.RoleId, u.UserName &#125;).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;GroupBy&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> lists)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;UserName:<span class=\"subst\">&#123;user.Key.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.Key.RoleId&#125;</span>,Count:<span class=\"subst\">&#123;user.Count()&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tolookup = users.ToLookup(u =&gt; u.UserName, u =&gt; u.UserId);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;ToLookup&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tolookup.Contains(<span class=\"string\">&quot;admin&quot;</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> tolookup[<span class=\"string\">&quot;admin&quot;</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>限定操作符(Any,All,Contains)</p>\n<ul>\n<li><p>Any 是否包含满足条件的元素</p>\n</li>\n<li><p>All 是否所有元素都满足条件</p>\n</li>\n<li><p>Contains 某一元素是否包含在集合中</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> any = users.Any(u =&gt; u.UserId == <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">bool</span> all = users.All(u =&gt; u.UserId != <span class=\"number\">0</span>);</span><br><span class=\"line\">User user = <span class=\"keyword\">new</span> User() &#123; UserId = <span class=\"number\">1</span>, UserCode = <span class=\"string\">&quot;a0001&quot;</span>, UserName = <span class=\"string\">&quot;admin&quot;</span>, RoleId = <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">users.Add(user);</span><br><span class=\"line\"><span class=\"built_in\">bool</span> contain = users.Contains(user);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;any:<span class=\"subst\">&#123;any&#125;</span>,all:<span class=\"subst\">&#123;all&#125;</span>,contain:<span class=\"subst\">&#123;contain&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>分区操作符(Take,Skip,TakeWhile,SkipWhile)</p>\n<ul>\n<li><p>Take 从集合中提取指定数量的元素</p>\n</li>\n<li><p>Skip 从集合中跳过指定数量的元素</p>\n</li>\n<li><p>TakeWhile 提取第一个条件为真时的元素</p>\n</li>\n<li><p>SkipWhere 跳过集合中第一个满足条件的元素,返回剩余的所有元素</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> take = users.Take(<span class=\"number\">2</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> skip = users.Skip(<span class=\"number\">2</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> takewhile = users.TakeWhile(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> skipwhile = users.SkipWhile(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> take)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;take UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> skip)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;skip UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> takewhile)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;takewhile UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> skipwhile)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;skipwhile UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Console.ReadLine();</span><br></pre></td></tr></table></figure></li>\n<li><p>Set操作符(Distinct,Union,Intersect,Except,Zip)</p>\n<ul>\n<li><p>Distinct 从集合中删除重复元素</p>\n</li>\n<li><p>Union,Intersect,Except 并集,交集,差集</p>\n</li>\n<li><p>Zip 把两个集合相应的项目合并起来,从到大较小的集合的末尾时停止.</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> distinct = users.Select(u=&gt;u.UserName).Distinct().ToList();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> distinct)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Distinct UserName:<span class=\"subst\">&#123;t&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> startwitha = users.Where(u =&gt; u.UserCode.StartsWith(<span class=\"string\">&#x27;a&#x27;</span>)).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> endwithr = users.Where(u =&gt; u.UserName.EndsWith(<span class=\"string\">&#x27;r&#x27;</span>)).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> union = startwitha.Union(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> u <span class=\"keyword\">in</span> union)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Union UserId=<span class=\"subst\">&#123;u.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;u.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;u.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = startwitha.Intersect(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> intersect)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Intersect UserId=<span class=\"subst\">&#123;i.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;i.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;i.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> except = startwitha.Except(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> e <span class=\"keyword\">in</span> except)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Except UserId=<span class=\"subst\">&#123;e.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;e.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;e.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> zip = startwitha.Zip(endwithr, (first, second) =&gt; first.UserName + <span class=\"string\">&quot;+&quot;</span> + second.UserName);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> z <span class=\"keyword\">in</span> zip)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Zip =<span class=\"subst\">&#123;z&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>元素操作符(First,FirstOrDefault,Last,LastOrDefault,ElementAt,ElementAtOrDefault,Single,SingleOrDefault)</p>\n<ul>\n<li><p>First 返回第一个满足条件的元素,若不存在,则引发异常</p>\n</li>\n<li><p>FirstOrDefault 返回第一个满足条件的元素,若不存在,则返回默认值</p>\n</li>\n<li><p>Last 返回最后一个满足条件的元素,若不存在,则引发异常</p>\n</li>\n<li><p>LastOrDefault 返回最后一个满足条件的元素,若不存在,则返回默认值</p>\n</li>\n<li><p>ElementAt 返回指定索引位置的元素,若不存在,则引发异常</p>\n</li>\n<li><p>ElementAtOrDefault 返回指定索引位置的元素,若不存在,则返回默认值</p>\n</li>\n<li><p>Single 只返回一个满足条件的元素,若不存在或多个元素都满足条件,则引发异常</p>\n</li>\n<li><p>SingleOrDefault 只返回一个满足条件的元素,若不存在,则返回默认值,若多个元素都满足条件,则引发异常</p>\n</li>\n</ul>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).First();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;First UserId:<span class=\"subst\">&#123;first.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;first.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;first.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> firstordefault = users.Where(u =&gt; u.UserId == <span class=\"number\">6</span>).FirstOrDefault();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (firstordefault != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;FirstOrDefault UserId:<span class=\"subst\">&#123;firstordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;firstordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;firstordefault.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> last = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).Last();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Last UserId:<span class=\"subst\">&#123;last.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;last.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;last.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastordefault = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).LastOrDefault();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;LastOrDefault UserId:<span class=\"subst\">&#123;lastordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;lastordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;lastordefault.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> elementat = users.Where(u =&gt; <span class=\"literal\">true</span>).ElementAt(<span class=\"number\">1</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;ElementAt UserId:<span class=\"subst\">&#123;elementat.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;elementat.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;elementat.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> elementatordefault = users.Where(u =&gt; <span class=\"literal\">true</span>).ElementAtOrDefault(<span class=\"number\">3</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;ElementAtOrDefault UserId:<span class=\"subst\">&#123;elementatordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;elementatordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;elementatordefault.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> single = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).Single();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Single UserId:<span class=\"subst\">&#123;single.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;single.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;single.UserName&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> singleordefault = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).SingleOrDefault();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (singleordefault != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;SingleOrDefault UserId:&#123;singleordefault.UserId&#125;,UserCode:&#123;singleordefault.UserCode&#125;,UserName:&#123;singleordefault.UserName&#125;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Console.ReadLine();</span><br></pre></td></tr></table></figure></li>\n<li><p>聚合操作符(Count,Sum,Min,Max,Average,Aggregate)</p>\n<ul>\n<li><p>Count 返回集合中的项数</p>\n</li>\n<li><p>Sum 计算所有值的总和</p>\n</li>\n<li><p>Min,Max,Average 最小值,最大值,平均值</p>\n</li>\n<li><p>Aggregate 对序列进行累加</p>\n</li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = users.Count();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Count:<span class=\"subst\">&#123;count&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = users.Sum(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Sum:<span class=\"subst\">&#123;sum&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> min = users.Min(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Min:<span class=\"subst\">&#123;min&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = users.Max(u =&gt; u.UserCode);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Max:<span class=\"subst\">&#123;max&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> average = users.Average(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Average:<span class=\"subst\">&#123;average&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nums = Enumerable.Range(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> aggregate = nums.Aggregate(<span class=\"number\">1</span>, (a, b) =&gt; a * b);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Aggregate:<span class=\"subst\">&#123;aggregate&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>转换操作符(ToArray,AsEnumerable,ToList,ToDictionary,Cast&lt;TResult&gt;)</p>\n<p>使用类型转换符会立刻立即执行结果,将查询结果放在数组/列表和字典中.</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User[] array = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;admin&quot;</span>).ToArray();</span><br><span class=\"line\">List&lt;User&gt; list = users.Where(u =&gt; u.UserName == <span class=\"string\">&quot;user&quot;</span>).ToList();</span><br><span class=\"line\">Dictionary&lt;<span class=\"built_in\">string</span>, User&gt; dic = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).ToDictionary(u =&gt; u.UserCode);</span><br><span class=\"line\">IEnumerable&lt;User&gt; enumerable = users.Where(u =&gt; <span class=\"literal\">true</span>).AsEnumerable();</span><br><span class=\"line\">User user = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).Cast&lt;User&gt;().Single();</span><br></pre></td></tr></table></figure></li>\n<li><p>生成操作符(Empty,Range,Repeat)</p>\n<ul>\n<li>Empty 生成空集合</li>\n<li>Range 生成一系列数字的集合</li>\n<li>Repeat 返回始终重复一个值的集合</li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> empty = Enumerable.Empty&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Count:<span class=\"subst\">&#123;empty.Count()&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> range = Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> range)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Range:<span class=\"subst\">&#123;r&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> repeat = Enumerable.Repeat(<span class=\"number\">5</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> repeat)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Repeat:<span class=\"subst\">&#123;r&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":".Net Log4net封装","date":"2018-03-06T04:26:10.000Z","_content":"log4net是.Net下一个非常优秀的开源日志记录组件。log4net记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。\n封装如下\n<!--more-->\n#### ILoger.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    public interface ILoger\n    {\n        void Write(string msg);\n        void Write(string msg, LogMessageType type);\n        void Write(string message, LogMessageType messageType, Type type);\n        void Write(string message, LogMessageType messageType, Exception ex);\n\n        void Write(string message, LogMessageType messageType, Exception ex, Type type);\n\n        void Write<T>(T entity, LogMessageType messageType);\n        void Write<T>(T entity, LogMessageType messageType, Exception ex, Type type);\n\n        void Assert(bool condition, string message);\n        void Assert(bool condition, string message, Type type);\n    }\n}\n```\n\n#### Log4netLoger.cs\n```cs\nusing log4net;\nusing log4net.Repository;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{ \n    public class Log4netLoger : ILoger\n    {\n        private static ILog loger = null;\n        public Log4netLoger()\n        {\n            ILoggerRepository repository = LogManager.CreateRepository(\"AlbumRepository\");\n            try\n            {\n                if (loger == null)\n                {\n                    try\n                    {\n                        //string logerName = System.Configuration.ConfigurationManager.AppSettings[\"NiMisLog\"];\n                        loger = LogManager.GetLogger(repository.Name,\"Album\");\n                    }\n                    catch\n                    {\n                        loger = LogManager.GetLogger(repository.Name, \"Album\");\n                    }\n                }\n            }\n            catch\n            {\n                loger = LogManager.GetLogger(repository.Name, \"Album\");\n            }\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        public void Write(string message)\n        {\n            DoLog(message, LogMessageType.Info, null, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        public void Write(string message, LogMessageType messageType)\n        {\n            DoLog(message, messageType, null, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"type\"></param>\n        public void Write(string message, LogMessageType messageType, Type type)\n        {\n            DoLog(message, messageType, null, type);\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        public void Write(string message, LogMessageType messageType, Exception ex)\n        {\n            DoLog(message, messageType, ex, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        /// <param name=\"type\"></param>\n        public void Write(string message, LogMessageType messageType, Exception ex, Type type)\n        {\n            DoLog(message, messageType, ex, type);\n        }\n\n        public void Write<T>(T entity, LogMessageType messageType)\n        {\n            Write(entity, messageType, null, null);\n        }\n\n        /// <summary>\n        /// 将日志写入数据库中，主要是操作日志\n        /// </summary>\n        /// <param name=\"entity\">数据表</param>\n        /// <param name=\"messageType\"></param>\n        /// <param name=\"ex\"></param>\n        /// <param name=\"type\"></param>\n        public void Write<T>(T entity, LogMessageType messageType, Exception ex, Type type)\n        {\n            //if (dt == null || dt.Rows.Count < 1)\n            //    return;\n            //int rowCount = dt.Rows.Count;\n            //int columnCount = dt.Columns.Count;\n            //string message = string.Empty;\n            //StringBuilder build = new StringBuilder();\n            //DataRow dr = null;\n\n            //build.Append(\"\\r\\n\");\n            //for (int j = 0; j < columnCount; j++)\n            //{\n            //    string Field = dt.Columns[j].ColumnName;\n            //    build.Append(Field + \"\\t\");\n            //}\n            //build.Append(\"\\r\\n\");\n\n            //for (int i = 0; i < rowCount; i++)\n            //{\n            //    dr = dt.Rows[i]; for (int j = 0; j < columnCount; j++)\n            //    {\n            //        string Value = dt.Rows[i][j].ToString();\n            //        build.Append(Value + \"\\t\");\n            //    }\n            //    build.Append(\"\\r\\n\");\n            //}\n            //message = build.ToString();\n\n\n            //if (type == null)\n            //{\n            //    type = Type.GetType(\"System.Object\");\n            //}\n            //DoLog(message, messageType, ex, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 断言\n        /// </summary>\n        /// <param name=\"condition\">条件</param>\n        /// <param name=\"message\">日志信息</param>\n        public void Assert(bool condition, string message)\n        {\n            Assert(condition, message, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 断言\n        /// </summary>\n        /// <param name=\"condition\">条件</param>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"type\">日志类型</param>\n        public void Assert(bool condition, string message, Type type)\n        {\n            if (condition == false)\n                Write(message, LogMessageType.Info);\n        }\n\n        /// <summary>\n        /// 保存日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        /// <param name=\"type\">日志类型</param>\n        private void DoLog(string message, LogMessageType messageType, Exception ex, Type type)\n        {\n            switch (messageType)\n            {\n                case LogMessageType.Debug:\n                    loger.Debug(message, ex);\n                    break;\n                case LogMessageType.Info:\n                    loger.Info(message, ex);\n                    break;\n                case LogMessageType.Warn:\n                    loger.Warn(message, ex);\n                    break;\n                case LogMessageType.Error:\n                    loger.Error(message, ex);\n                    break;\n                case LogMessageType.Fatal:\n                    loger.Fatal(message, ex);\n                    break;\n            }\n        }\n    }\n}\n```\n\n#### Loger.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    /// <summary>\n    /// 日志器\n    /// </summary>\n    public static class Loger\n    {\n        private static ILoger loger;\n        public static ILoger Instance\n        {\n            get\n            {\n                if (loger == null)\n                {\n                    try\n                    {\n                        loger = new Log4netLoger();\n                    }\n                    catch (Exception)\n                    {\n                        throw new Exception(\"Log4Net配置文件丢失或配置Log4Net出现错误。\");\n                    }\n                }\n                return loger;\n            }\n        }\n    }\n}\n\n```\n\n#### LogMessageType.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    /// <summary>\n    /// 日志类型\n    /// </summary>\n    public enum LogMessageType\n    {\n        /// <summary>\n        /// 调试\n        /// </summary>\n        Debug,\n        /// <summary>\n        /// 信息\n        /// </summary>\n        Info,\n        /// <summary>\n        /// 警告\n        /// </summary>\n        Warn,\n        /// <summary>\n        /// 错误\n        /// </summary>\n        Error,\n        /// <summary>\n        /// 致命错误\n        /// </summary>\n        Fatal\n    }\n}\n```\n","source":"_posts/Net-Log4net封装.md","raw":"---\ntitle: .Net Log4net封装\ndate: 2018-03-06 12:26:10\ncategories: .Net\ntags: \n - .Net\n - Log4net\n---\nlog4net是.Net下一个非常优秀的开源日志记录组件。log4net记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。\n封装如下\n<!--more-->\n#### ILoger.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    public interface ILoger\n    {\n        void Write(string msg);\n        void Write(string msg, LogMessageType type);\n        void Write(string message, LogMessageType messageType, Type type);\n        void Write(string message, LogMessageType messageType, Exception ex);\n\n        void Write(string message, LogMessageType messageType, Exception ex, Type type);\n\n        void Write<T>(T entity, LogMessageType messageType);\n        void Write<T>(T entity, LogMessageType messageType, Exception ex, Type type);\n\n        void Assert(bool condition, string message);\n        void Assert(bool condition, string message, Type type);\n    }\n}\n```\n\n#### Log4netLoger.cs\n```cs\nusing log4net;\nusing log4net.Repository;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{ \n    public class Log4netLoger : ILoger\n    {\n        private static ILog loger = null;\n        public Log4netLoger()\n        {\n            ILoggerRepository repository = LogManager.CreateRepository(\"AlbumRepository\");\n            try\n            {\n                if (loger == null)\n                {\n                    try\n                    {\n                        //string logerName = System.Configuration.ConfigurationManager.AppSettings[\"NiMisLog\"];\n                        loger = LogManager.GetLogger(repository.Name,\"Album\");\n                    }\n                    catch\n                    {\n                        loger = LogManager.GetLogger(repository.Name, \"Album\");\n                    }\n                }\n            }\n            catch\n            {\n                loger = LogManager.GetLogger(repository.Name, \"Album\");\n            }\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        public void Write(string message)\n        {\n            DoLog(message, LogMessageType.Info, null, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        public void Write(string message, LogMessageType messageType)\n        {\n            DoLog(message, messageType, null, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"type\"></param>\n        public void Write(string message, LogMessageType messageType, Type type)\n        {\n            DoLog(message, messageType, null, type);\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        public void Write(string message, LogMessageType messageType, Exception ex)\n        {\n            DoLog(message, messageType, ex, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        /// <param name=\"type\"></param>\n        public void Write(string message, LogMessageType messageType, Exception ex, Type type)\n        {\n            DoLog(message, messageType, ex, type);\n        }\n\n        public void Write<T>(T entity, LogMessageType messageType)\n        {\n            Write(entity, messageType, null, null);\n        }\n\n        /// <summary>\n        /// 将日志写入数据库中，主要是操作日志\n        /// </summary>\n        /// <param name=\"entity\">数据表</param>\n        /// <param name=\"messageType\"></param>\n        /// <param name=\"ex\"></param>\n        /// <param name=\"type\"></param>\n        public void Write<T>(T entity, LogMessageType messageType, Exception ex, Type type)\n        {\n            //if (dt == null || dt.Rows.Count < 1)\n            //    return;\n            //int rowCount = dt.Rows.Count;\n            //int columnCount = dt.Columns.Count;\n            //string message = string.Empty;\n            //StringBuilder build = new StringBuilder();\n            //DataRow dr = null;\n\n            //build.Append(\"\\r\\n\");\n            //for (int j = 0; j < columnCount; j++)\n            //{\n            //    string Field = dt.Columns[j].ColumnName;\n            //    build.Append(Field + \"\\t\");\n            //}\n            //build.Append(\"\\r\\n\");\n\n            //for (int i = 0; i < rowCount; i++)\n            //{\n            //    dr = dt.Rows[i]; for (int j = 0; j < columnCount; j++)\n            //    {\n            //        string Value = dt.Rows[i][j].ToString();\n            //        build.Append(Value + \"\\t\");\n            //    }\n            //    build.Append(\"\\r\\n\");\n            //}\n            //message = build.ToString();\n\n\n            //if (type == null)\n            //{\n            //    type = Type.GetType(\"System.Object\");\n            //}\n            //DoLog(message, messageType, ex, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 断言\n        /// </summary>\n        /// <param name=\"condition\">条件</param>\n        /// <param name=\"message\">日志信息</param>\n        public void Assert(bool condition, string message)\n        {\n            Assert(condition, message, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 断言\n        /// </summary>\n        /// <param name=\"condition\">条件</param>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"type\">日志类型</param>\n        public void Assert(bool condition, string message, Type type)\n        {\n            if (condition == false)\n                Write(message, LogMessageType.Info);\n        }\n\n        /// <summary>\n        /// 保存日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        /// <param name=\"type\">日志类型</param>\n        private void DoLog(string message, LogMessageType messageType, Exception ex, Type type)\n        {\n            switch (messageType)\n            {\n                case LogMessageType.Debug:\n                    loger.Debug(message, ex);\n                    break;\n                case LogMessageType.Info:\n                    loger.Info(message, ex);\n                    break;\n                case LogMessageType.Warn:\n                    loger.Warn(message, ex);\n                    break;\n                case LogMessageType.Error:\n                    loger.Error(message, ex);\n                    break;\n                case LogMessageType.Fatal:\n                    loger.Fatal(message, ex);\n                    break;\n            }\n        }\n    }\n}\n```\n\n#### Loger.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    /// <summary>\n    /// 日志器\n    /// </summary>\n    public static class Loger\n    {\n        private static ILoger loger;\n        public static ILoger Instance\n        {\n            get\n            {\n                if (loger == null)\n                {\n                    try\n                    {\n                        loger = new Log4netLoger();\n                    }\n                    catch (Exception)\n                    {\n                        throw new Exception(\"Log4Net配置文件丢失或配置Log4Net出现错误。\");\n                    }\n                }\n                return loger;\n            }\n        }\n    }\n}\n\n```\n\n#### LogMessageType.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    /// <summary>\n    /// 日志类型\n    /// </summary>\n    public enum LogMessageType\n    {\n        /// <summary>\n        /// 调试\n        /// </summary>\n        Debug,\n        /// <summary>\n        /// 信息\n        /// </summary>\n        Info,\n        /// <summary>\n        /// 警告\n        /// </summary>\n        Warn,\n        /// <summary>\n        /// 错误\n        /// </summary>\n        Error,\n        /// <summary>\n        /// 致命错误\n        /// </summary>\n        Fatal\n    }\n}\n```\n","slug":"Net-Log4net封装","published":1,"updated":"2021-03-30T03:24:16.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0c003qvcua5tp11j6p","content":"<p>log4net是.Net下一个非常优秀的开源日志记录组件。log4net记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。<br>封装如下</p>\n<span id=\"more\"></span>\n<h4 id=\"ILoger-cs\"><a href=\"#ILoger-cs\" class=\"headerlink\" title=\"ILoger.cs\"></a>ILoger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ILoger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> msg</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> msg, LogMessageType type</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Type type</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Exception ex</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T entity, LogMessageType messageType</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T entity, LogMessageType messageType, Exception ex, Type type</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"built_in\">bool</span> condition, <span class=\"built_in\">string</span> message</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"built_in\">bool</span> condition, <span class=\"built_in\">string</span> message, Type type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Log4netLoger-cs\"><a href=\"#Log4netLoger-cs\" class=\"headerlink\" title=\"Log4netLoger.cs\"></a>Log4netLoger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> log4net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> log4net.Repository;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Log4netLoger</span> : <span class=\"title\">ILoger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ILog loger = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Log4netLoger</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            ILoggerRepository repository = LogManager.CreateRepository(<span class=\"string\">&quot;AlbumRepository&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (loger == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//string logerName = System.Configuration.ConfigurationManager.AppSettings[&quot;NiMisLog&quot;];</span></span><br><span class=\"line\">                        loger = LogManager.GetLogger(repository.Name,<span class=\"string\">&quot;Album&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    catch</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loger = LogManager.GetLogger(repository.Name, <span class=\"string\">&quot;Album&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                loger = LogManager.GetLogger(repository.Name, <span class=\"string\">&quot;Album&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            DoLog(message, LogMessageType.Info, <span class=\"literal\">null</span>, Type.GetType(<span class=\"string\">&quot;System.Object&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            DoLog(message, messageType, <span class=\"literal\">null</span>, Type.GetType(<span class=\"string\">&quot;System.Object&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            DoLog(message, messageType, <span class=\"literal\">null</span>, type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;ex&quot;&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Exception ex</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            DoLog(message, messageType, ex, Type.GetType(<span class=\"string\">&quot;System.Object&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;ex&quot;&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            DoLog(message, messageType, ex, type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T entity, LogMessageType messageType</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Write(entity, messageType, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将日志写入数据库中，主要是操作日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span>数据表<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;ex&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T entity, LogMessageType messageType, Exception ex, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//if (dt == null || dt.Rows.Count &lt; 1)</span></span><br><span class=\"line\">            <span class=\"comment\">//    return;</span></span><br><span class=\"line\">            <span class=\"comment\">//int rowCount = dt.Rows.Count;</span></span><br><span class=\"line\">            <span class=\"comment\">//int columnCount = dt.Columns.Count;</span></span><br><span class=\"line\">            <span class=\"comment\">//string message = string.Empty;</span></span><br><span class=\"line\">            <span class=\"comment\">//StringBuilder build = new StringBuilder();</span></span><br><span class=\"line\">            <span class=\"comment\">//DataRow dr = null;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//build.Append(&quot;\\r\\n&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//for (int j = 0; j &lt; columnCount; j++)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    string Field = dt.Columns[j].ColumnName;</span></span><br><span class=\"line\">            <span class=\"comment\">//    build.Append(Field + &quot;\\t&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//build.Append(&quot;\\r\\n&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//for (int i = 0; i &lt; rowCount; i++)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    dr = dt.Rows[i]; for (int j = 0; j &lt; columnCount; j++)</span></span><br><span class=\"line\">            <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//        string Value = dt.Rows[i][j].ToString();</span></span><br><span class=\"line\">            <span class=\"comment\">//        build.Append(Value + &quot;\\t&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//    build.Append(&quot;\\r\\n&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//message = build.ToString();</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//if (type == null)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    type = Type.GetType(&quot;System.Object&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//DoLog(message, messageType, ex, Type.GetType(&quot;System.Object&quot;));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 断言</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;condition&quot;&gt;</span>条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"built_in\">bool</span> condition, <span class=\"built_in\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Assert(condition, message, Type.GetType(<span class=\"string\">&quot;System.Object&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 断言</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;condition&quot;&gt;</span>条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"built_in\">bool</span> condition, <span class=\"built_in\">string</span> message, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (condition == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                Write(message, LogMessageType.Info);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 保存日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;ex&quot;&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">DoLog</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (messageType)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Debug:</span><br><span class=\"line\">                    loger.Debug(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Info:</span><br><span class=\"line\">                    loger.Info(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Warn:</span><br><span class=\"line\">                    loger.Warn(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Error:</span><br><span class=\"line\">                    loger.Error(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Fatal:</span><br><span class=\"line\">                    loger.Fatal(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Loger-cs\"><a href=\"#Loger-cs\" class=\"headerlink\" title=\"Loger.cs\"></a>Loger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 日志器</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Loger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ILoger loger;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ILoger Instance</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (loger == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loger = <span class=\"keyword\">new</span> Log4netLoger();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    catch (Exception)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Log4Net配置文件丢失或配置Log4Net出现错误。&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> loger;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"LogMessageType-cs\"><a href=\"#LogMessageType-cs\" class=\"headerlink\" title=\"LogMessageType.cs\"></a>LogMessageType.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 日志类型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> LogMessageType</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 调试</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Debug,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Info,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 警告</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Warn,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 错误</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Error,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 致命错误</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Fatal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":7121,"excerpt":"<p>log4net是.Net下一个非常优秀的开源日志记录组件。log4net记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。<br>封装如下</p>","more":"<h4 id=\"ILoger-cs\"><a href=\"#ILoger-cs\" class=\"headerlink\" title=\"ILoger.cs\"></a>ILoger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ILoger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> msg</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> msg, LogMessageType type</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Type type</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Exception ex</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T entity, LogMessageType messageType</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T entity, LogMessageType messageType, Exception ex, Type type</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"built_in\">bool</span> condition, <span class=\"built_in\">string</span> message</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"built_in\">bool</span> condition, <span class=\"built_in\">string</span> message, Type type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Log4netLoger-cs\"><a href=\"#Log4netLoger-cs\" class=\"headerlink\" title=\"Log4netLoger.cs\"></a>Log4netLoger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> log4net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> log4net.Repository;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Log4netLoger</span> : <span class=\"title\">ILoger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ILog loger = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Log4netLoger</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            ILoggerRepository repository = LogManager.CreateRepository(<span class=\"string\">&quot;AlbumRepository&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (loger == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//string logerName = System.Configuration.ConfigurationManager.AppSettings[&quot;NiMisLog&quot;];</span></span><br><span class=\"line\">                        loger = LogManager.GetLogger(repository.Name,<span class=\"string\">&quot;Album&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    catch</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loger = LogManager.GetLogger(repository.Name, <span class=\"string\">&quot;Album&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                loger = LogManager.GetLogger(repository.Name, <span class=\"string\">&quot;Album&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            DoLog(message, LogMessageType.Info, <span class=\"literal\">null</span>, Type.GetType(<span class=\"string\">&quot;System.Object&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            DoLog(message, messageType, <span class=\"literal\">null</span>, Type.GetType(<span class=\"string\">&quot;System.Object&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            DoLog(message, messageType, <span class=\"literal\">null</span>, type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;ex&quot;&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Exception ex</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            DoLog(message, messageType, ex, Type.GetType(<span class=\"string\">&quot;System.Object&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;ex&quot;&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            DoLog(message, messageType, ex, type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T entity, LogMessageType messageType</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Write(entity, messageType, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将日志写入数据库中，主要是操作日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span>数据表<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;ex&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T entity, LogMessageType messageType, Exception ex, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//if (dt == null || dt.Rows.Count &lt; 1)</span></span><br><span class=\"line\">            <span class=\"comment\">//    return;</span></span><br><span class=\"line\">            <span class=\"comment\">//int rowCount = dt.Rows.Count;</span></span><br><span class=\"line\">            <span class=\"comment\">//int columnCount = dt.Columns.Count;</span></span><br><span class=\"line\">            <span class=\"comment\">//string message = string.Empty;</span></span><br><span class=\"line\">            <span class=\"comment\">//StringBuilder build = new StringBuilder();</span></span><br><span class=\"line\">            <span class=\"comment\">//DataRow dr = null;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//build.Append(&quot;\\r\\n&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//for (int j = 0; j &lt; columnCount; j++)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    string Field = dt.Columns[j].ColumnName;</span></span><br><span class=\"line\">            <span class=\"comment\">//    build.Append(Field + &quot;\\t&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//build.Append(&quot;\\r\\n&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//for (int i = 0; i &lt; rowCount; i++)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    dr = dt.Rows[i]; for (int j = 0; j &lt; columnCount; j++)</span></span><br><span class=\"line\">            <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//        string Value = dt.Rows[i][j].ToString();</span></span><br><span class=\"line\">            <span class=\"comment\">//        build.Append(Value + &quot;\\t&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//    build.Append(&quot;\\r\\n&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//message = build.ToString();</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//if (type == null)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    type = Type.GetType(&quot;System.Object&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//DoLog(message, messageType, ex, Type.GetType(&quot;System.Object&quot;));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 断言</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;condition&quot;&gt;</span>条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"built_in\">bool</span> condition, <span class=\"built_in\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Assert(condition, message, Type.GetType(<span class=\"string\">&quot;System.Object&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 断言</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;condition&quot;&gt;</span>条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"built_in\">bool</span> condition, <span class=\"built_in\">string</span> message, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (condition == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                Write(message, LogMessageType.Info);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 保存日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;message&quot;&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;messageType&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;ex&quot;&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">DoLog</span>(<span class=\"params\"><span class=\"built_in\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (messageType)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Debug:</span><br><span class=\"line\">                    loger.Debug(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Info:</span><br><span class=\"line\">                    loger.Info(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Warn:</span><br><span class=\"line\">                    loger.Warn(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Error:</span><br><span class=\"line\">                    loger.Error(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Fatal:</span><br><span class=\"line\">                    loger.Fatal(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Loger-cs\"><a href=\"#Loger-cs\" class=\"headerlink\" title=\"Loger.cs\"></a>Loger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 日志器</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Loger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ILoger loger;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ILoger Instance</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (loger == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loger = <span class=\"keyword\">new</span> Log4netLoger();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    catch (Exception)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Log4Net配置文件丢失或配置Log4Net出现错误。&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> loger;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"LogMessageType-cs\"><a href=\"#LogMessageType-cs\" class=\"headerlink\" title=\"LogMessageType.cs\"></a>LogMessageType.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 日志类型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> LogMessageType</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 调试</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Debug,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Info,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 警告</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Warn,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 错误</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Error,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 致命错误</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Fatal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":".Net MVC 三层架构框架","date":"2018-03-09T17:23:10.000Z","_content":"asp.net+ef mvc三层框架搭建过程如下\n\n##### 先创建Model层\n略\n<!--more-->\n\n##### 创建数据访问接口层IUserInfoDal\n在该接口中定义了常见的方法CRUD以及分页方法\n```cs\npublic interface IUserInfoDal\n{\n    IQueryable<UserInfo> LoadEntities(System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda);\n    IQueryable<UserInfo> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda, System.Linq.Expressions.Expression<Func<UserInfo, s>> orderbyLambda, bool isAsc);\n    bool DeleteEntity(UserInfo entity);\n    bool EditEntity(UserInfo entity);\n    UserInfo AddEntity(UserInfo entity);\n}\n```\n\n##### 每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal\n```cs\npublic interface IBaseDal<T>where T:class,new()//注意该泛型的使用\n{\n    IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n    IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n    bool DeleteEntity(T entity);\n    bool EditEntity(T entity);\n    T AddEntity(T entity);\n}\n```\n\n##### 让IUserInfoDal继承IBaseDal\n```cs\npublic interface IUserInfoDal:IBaseDal<UserInfo>\n{\n    //定义自己特有的方法。\n}\n```\n\n##### 让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\n```cs\npublic class UserInfoDal :IUserInfoDal\n{\n    OAEntities Db = new OAEntities();\n    /// <summary>\n    /// 查询过滤\n    /// </summary>\n    /// <param name=\"whereLambda\"></param>\n    /// <returns></returns>\n    public IQueryable<UserInfo> LoadEntities(System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda)\n    {\n        return Db.UserInfo.Where<UserInfo>(whereLambda);//\n    }\n    /// <summary>\n    /// 分页\n    /// </summary>\n    /// <typeparam name=\"s\"></typeparam>\n    /// <param name=\"pageIndex\"></param>\n    /// <param name=\"pageSize\"></param>\n    /// <param name=\"totalCount\"></param>\n    /// <param name=\"whereLambda\"></param>\n    /// <param name=\"orderbyLambda\"></param>\n    /// <param name=\"isAsc\"></param>\n    /// <returns></returns>\n    public IQueryable<UserInfo> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda, System.Linq.Expressions.Expression<Func<UserInfo, s>> orderbyLambda, bool isAsc)\n    {\n        var temp = Db.UserInfo.Where<UserInfo>(whereLambda);\n        totalCount = temp.Count();\n        if (isAsc)//升序\n        {\n            temp = temp.OrderBy<UserInfo, s>(orderbyLambda).Skip<UserInfo>((pageIndex - 1) * pageSize).Take<UserInfo>(pageSize);\n        }\n        else\n        {\n            temp = temp.OrderByDescending<UserInfo, s>(orderbyLambda).Skip<UserInfo>((pageIndex - 1) * pageSize).Take<UserInfo>(pageSize);\n        }\n        return temp;\n    }\n\n    /// <summary>\n    /// 删除\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool DeleteEntity(UserInfo entity)\n    {\n        Db.Entry<UserInfo>(entity).State = System.Data.EntityState.Deleted;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 更新\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool EditEntity(UserInfo entity)\n    {\n        Db.Entry<UserInfo>(entity).State = System.Data.EntityState.Modified;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 添加数据\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public UserInfo AddEntity(UserInfo entity)\n    {\n        Db.Set <UserInfo>().Add(entity);\n        Db.SaveChanges();\n        return entity;\n    }\n}\n```  \n\n##### 由于每个数据操作类都要实现自己的接口（每一个接口都继承了IBaseDal）,所以每个数据操作类中都要重复实现CURD以及分页的方法，所以把具体的实现封装到了BaseDal中。\n```cs\npublic class BaseDal<T>where T:class,new()\n{\n    OAEntities Db = new OAEntities();\n    /// <summary>\n    /// 查询过滤\n    /// </summary>\n    /// <param name=\"whereLambda\"></param>\n    /// <returns></returns>\n    public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n    {\n        return Db.Set <T>().Where<T>(whereLambda);//\n    }\n        \n    /// <summary>\n    /// 分页\n    /// </summary>\n    /// <typeparam name=\"s\"></typeparam>\n    /// <param name=\"pageIndex\"></param>\n    /// <param name=\"pageSize\"></param>\n    /// <param name=\"totalCount\"></param>\n    /// <param name=\"whereLambda\"></param>\n    /// <param name=\"orderbyLambda\"></param>\n    /// <param name=\"isAsc\"></param>\n    /// <returns></returns>\n    public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n    {\n        var temp = Db.Set<T>().Where<T>(whereLambda);\n        totalCount = temp.Count();\n        if (isAsc)//升序\n        {\n            temp = temp.OrderBy<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n        }\n        else\n        {\n            temp = temp.OrderByDescending<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n        }\n        return temp;\n    }\n\n    /// <summary>\n    /// 删除\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool DeleteEntity(T entity)\n    {\n        Db.Entry<T>(entity).State = System.Data.EntityState.Deleted;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 更新\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool EditEntity(T entity)\n    {\n        Db.Entry<T>(entity).State = System.Data.EntityState.Modified;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 添加数据\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public T AddEntity(T entity)\n    {\n        Db.Set <T>().Add(entity);\n        Db.SaveChanges();\n        return entity;\n    }\n}\n```\n\n##### 让UserInfoDal继承BaseDal.\n```cs\npublic class UserInfoDal : BaseDal<UserInfo>,IUserInfoDal\n{\n    //对应的独特方法\n} \n```\n\n##### 创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)\n```cs\nprivate IUserInfoDal _UserInfoDal;\npublic IUserInfoDal UserInfoDal\n{\n    get\n    {\n        if (_UserInfoDal == null)\n         {\n            _UserInfoDal = new UserInfoDal();\n        }\n        return _UserInfoDal;\n    }\n    set\n    {\n        _UserInfoDal = value;\n    }\n}\n```\n\n##### 在数据会话层中提供一个方法：完成所有数据的保存\n```cs\n/// <summary>\n/// 一个业务中经常涉及到对多张操作，我们希望连接一次数据库，完成对张表数据的操作。提高性能。 工作单元模式。\n/// </summary>\n/// <returns></returns>\npublic bool SaveChanges()\n{\n    return Db.SaveChanges() > 0;\n}\n```\n\n##### 将数据层中的所有的保存数据的SaveChanges注释掉\n略\n\n##### 在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\n```cs\n/// <summary>\n/// 负责创建EF数据操作上下文实例，必须保证线程内唯一.\n/// </summary>\npublic class DBContextFactory\n{\n    public static DbContext CreateDbContext()\n    {\n        DbContext dbContext = (DbContext)CallContext.GetData(\"dbContext\");\n        if (dbContext == null)\n        {\n            dbContext = new OAEntities();\n            CallContext.SetData(\"dbContext\", dbContext);\n        }\n        return dbContext;\n    }\n}\n```\n\n##### 在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\n```cs\n// DBSession获取EF实例\npublic DbContext Db\n{\n    get\n    {\n        return DBContextFactory.CreateDbContext(); \n    }\n}\n\t   \n// BaseDal中获取EF的实例\nDbContext Db = DAL.DBContextFactory.CreateDbContext();\n```\n\n##### 抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\n```cs\n/// <summary>\n/// 通过反射的形式创建类的实例\n/// </summary>\npublic class AbstractFactory\n{\n    private static readonly string AssemblyPath = ConfigurationManager.AppSettings[\"AssemblyPath\"];\n    private static readonly string NameSpace = ConfigurationManager.AppSettings[\"NameSpace\"];\n    public static IUserInfoDal CreateUserInfoDal()\n    {\n        string fullClassName = NameSpace + \".UserInfoDal\";\n        return CreateInstance(fullClassName) as IUserInfoDal;\n    }\n    private static object CreateInstance(string className)\n    {\n        var assembly= Assembly.Load(AssemblyPath);\n        return assembly.CreateInstance(className);\n    }\n}\n```\t\n\n##### 然后修改DBSession\n```cs\nprivate IUserInfoDal _UserInfoDal;\npublic IUserInfoDal UserInfoDal\n{\n    get \n    {\n        if (_UserInfoDal == null)\n        {\n            //_UserInfoDal = new UserInfoDal();\n            _UserInfoDal = AbstractFactory.CreateUserInfoDal();//通过抽象工厂封装了类的实例的创建\n        }\n        return _UserInfoDal;\n    }\n    set\n    {\n        _UserInfoDal = value;\n    }\n}\n```\n\n##### 定义DBSession的接口\n```cs\n/// <summary>\n/// 业务层调用的是数据会话层的接口。\n/// </summary>\npublic interface IDBSession\n{\n    DbContext Db { get; }\n    IUserInfoDal UserInfoDal { get; set; }\n    bool SaveChanges();\n}\n```\n\n##### 然后让DBSession实现该接口\n略\n\n##### 定义具体的业务基类\n```cs\n//在业务基类中完成DBSession的调用，然后将业务层中公共的方法定义在基类中，但是这些方法不知道通过DBSession来获取哪个数据操作类的实例。所以将该业务基类定义成抽象类，加上一个抽象方法，加上一个IBaseDal属性，并且让基类的构造方法调用抽象方法目的是在表现层new具体的业务子类，父类的构造方法被调用，这些执行抽象方法，但是执行的的是子类中具体的实现。业务子类知道通过DBSession获取哪个数据操作类的实例。\npublic abstract class BaseService<T> where T:class,new()\n{\n    public IDBSession CurrentDBSession\n    {\n        get\n        {\n            return new DBSession();//暂时\n        }\n    }\n    public IDAL.IBaseDal<T> CurrentDal { get; set; }\n    public abstract void SetCurrentDal();\n    public BaseService()\n    {\n        SetCurrentDal();//子类一定要实现抽象方法。\n    }\n    public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n    {\n        return CurrentDal.LoadEntities(whereLambda);\n    }\n}\n```\n\n##### 定义业务层的接口\n略\n\n##### 将数据库链接字符串拷贝到web.config文件中\n略","source":"_posts/Net-MVC-三层架构框架.md","raw":"---\ntitle: .Net MVC 三层架构框架\ndate: 2018-03-10 01:23:10\ncategories: .Net\ntags:\n - .Net\n - MVC\n---\nasp.net+ef mvc三层框架搭建过程如下\n\n##### 先创建Model层\n略\n<!--more-->\n\n##### 创建数据访问接口层IUserInfoDal\n在该接口中定义了常见的方法CRUD以及分页方法\n```cs\npublic interface IUserInfoDal\n{\n    IQueryable<UserInfo> LoadEntities(System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda);\n    IQueryable<UserInfo> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda, System.Linq.Expressions.Expression<Func<UserInfo, s>> orderbyLambda, bool isAsc);\n    bool DeleteEntity(UserInfo entity);\n    bool EditEntity(UserInfo entity);\n    UserInfo AddEntity(UserInfo entity);\n}\n```\n\n##### 每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal\n```cs\npublic interface IBaseDal<T>where T:class,new()//注意该泛型的使用\n{\n    IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n    IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n    bool DeleteEntity(T entity);\n    bool EditEntity(T entity);\n    T AddEntity(T entity);\n}\n```\n\n##### 让IUserInfoDal继承IBaseDal\n```cs\npublic interface IUserInfoDal:IBaseDal<UserInfo>\n{\n    //定义自己特有的方法。\n}\n```\n\n##### 让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\n```cs\npublic class UserInfoDal :IUserInfoDal\n{\n    OAEntities Db = new OAEntities();\n    /// <summary>\n    /// 查询过滤\n    /// </summary>\n    /// <param name=\"whereLambda\"></param>\n    /// <returns></returns>\n    public IQueryable<UserInfo> LoadEntities(System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda)\n    {\n        return Db.UserInfo.Where<UserInfo>(whereLambda);//\n    }\n    /// <summary>\n    /// 分页\n    /// </summary>\n    /// <typeparam name=\"s\"></typeparam>\n    /// <param name=\"pageIndex\"></param>\n    /// <param name=\"pageSize\"></param>\n    /// <param name=\"totalCount\"></param>\n    /// <param name=\"whereLambda\"></param>\n    /// <param name=\"orderbyLambda\"></param>\n    /// <param name=\"isAsc\"></param>\n    /// <returns></returns>\n    public IQueryable<UserInfo> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda, System.Linq.Expressions.Expression<Func<UserInfo, s>> orderbyLambda, bool isAsc)\n    {\n        var temp = Db.UserInfo.Where<UserInfo>(whereLambda);\n        totalCount = temp.Count();\n        if (isAsc)//升序\n        {\n            temp = temp.OrderBy<UserInfo, s>(orderbyLambda).Skip<UserInfo>((pageIndex - 1) * pageSize).Take<UserInfo>(pageSize);\n        }\n        else\n        {\n            temp = temp.OrderByDescending<UserInfo, s>(orderbyLambda).Skip<UserInfo>((pageIndex - 1) * pageSize).Take<UserInfo>(pageSize);\n        }\n        return temp;\n    }\n\n    /// <summary>\n    /// 删除\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool DeleteEntity(UserInfo entity)\n    {\n        Db.Entry<UserInfo>(entity).State = System.Data.EntityState.Deleted;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 更新\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool EditEntity(UserInfo entity)\n    {\n        Db.Entry<UserInfo>(entity).State = System.Data.EntityState.Modified;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 添加数据\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public UserInfo AddEntity(UserInfo entity)\n    {\n        Db.Set <UserInfo>().Add(entity);\n        Db.SaveChanges();\n        return entity;\n    }\n}\n```  \n\n##### 由于每个数据操作类都要实现自己的接口（每一个接口都继承了IBaseDal）,所以每个数据操作类中都要重复实现CURD以及分页的方法，所以把具体的实现封装到了BaseDal中。\n```cs\npublic class BaseDal<T>where T:class,new()\n{\n    OAEntities Db = new OAEntities();\n    /// <summary>\n    /// 查询过滤\n    /// </summary>\n    /// <param name=\"whereLambda\"></param>\n    /// <returns></returns>\n    public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n    {\n        return Db.Set <T>().Where<T>(whereLambda);//\n    }\n        \n    /// <summary>\n    /// 分页\n    /// </summary>\n    /// <typeparam name=\"s\"></typeparam>\n    /// <param name=\"pageIndex\"></param>\n    /// <param name=\"pageSize\"></param>\n    /// <param name=\"totalCount\"></param>\n    /// <param name=\"whereLambda\"></param>\n    /// <param name=\"orderbyLambda\"></param>\n    /// <param name=\"isAsc\"></param>\n    /// <returns></returns>\n    public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n    {\n        var temp = Db.Set<T>().Where<T>(whereLambda);\n        totalCount = temp.Count();\n        if (isAsc)//升序\n        {\n            temp = temp.OrderBy<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n        }\n        else\n        {\n            temp = temp.OrderByDescending<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n        }\n        return temp;\n    }\n\n    /// <summary>\n    /// 删除\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool DeleteEntity(T entity)\n    {\n        Db.Entry<T>(entity).State = System.Data.EntityState.Deleted;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 更新\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool EditEntity(T entity)\n    {\n        Db.Entry<T>(entity).State = System.Data.EntityState.Modified;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 添加数据\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public T AddEntity(T entity)\n    {\n        Db.Set <T>().Add(entity);\n        Db.SaveChanges();\n        return entity;\n    }\n}\n```\n\n##### 让UserInfoDal继承BaseDal.\n```cs\npublic class UserInfoDal : BaseDal<UserInfo>,IUserInfoDal\n{\n    //对应的独特方法\n} \n```\n\n##### 创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)\n```cs\nprivate IUserInfoDal _UserInfoDal;\npublic IUserInfoDal UserInfoDal\n{\n    get\n    {\n        if (_UserInfoDal == null)\n         {\n            _UserInfoDal = new UserInfoDal();\n        }\n        return _UserInfoDal;\n    }\n    set\n    {\n        _UserInfoDal = value;\n    }\n}\n```\n\n##### 在数据会话层中提供一个方法：完成所有数据的保存\n```cs\n/// <summary>\n/// 一个业务中经常涉及到对多张操作，我们希望连接一次数据库，完成对张表数据的操作。提高性能。 工作单元模式。\n/// </summary>\n/// <returns></returns>\npublic bool SaveChanges()\n{\n    return Db.SaveChanges() > 0;\n}\n```\n\n##### 将数据层中的所有的保存数据的SaveChanges注释掉\n略\n\n##### 在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\n```cs\n/// <summary>\n/// 负责创建EF数据操作上下文实例，必须保证线程内唯一.\n/// </summary>\npublic class DBContextFactory\n{\n    public static DbContext CreateDbContext()\n    {\n        DbContext dbContext = (DbContext)CallContext.GetData(\"dbContext\");\n        if (dbContext == null)\n        {\n            dbContext = new OAEntities();\n            CallContext.SetData(\"dbContext\", dbContext);\n        }\n        return dbContext;\n    }\n}\n```\n\n##### 在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\n```cs\n// DBSession获取EF实例\npublic DbContext Db\n{\n    get\n    {\n        return DBContextFactory.CreateDbContext(); \n    }\n}\n\t   \n// BaseDal中获取EF的实例\nDbContext Db = DAL.DBContextFactory.CreateDbContext();\n```\n\n##### 抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\n```cs\n/// <summary>\n/// 通过反射的形式创建类的实例\n/// </summary>\npublic class AbstractFactory\n{\n    private static readonly string AssemblyPath = ConfigurationManager.AppSettings[\"AssemblyPath\"];\n    private static readonly string NameSpace = ConfigurationManager.AppSettings[\"NameSpace\"];\n    public static IUserInfoDal CreateUserInfoDal()\n    {\n        string fullClassName = NameSpace + \".UserInfoDal\";\n        return CreateInstance(fullClassName) as IUserInfoDal;\n    }\n    private static object CreateInstance(string className)\n    {\n        var assembly= Assembly.Load(AssemblyPath);\n        return assembly.CreateInstance(className);\n    }\n}\n```\t\n\n##### 然后修改DBSession\n```cs\nprivate IUserInfoDal _UserInfoDal;\npublic IUserInfoDal UserInfoDal\n{\n    get \n    {\n        if (_UserInfoDal == null)\n        {\n            //_UserInfoDal = new UserInfoDal();\n            _UserInfoDal = AbstractFactory.CreateUserInfoDal();//通过抽象工厂封装了类的实例的创建\n        }\n        return _UserInfoDal;\n    }\n    set\n    {\n        _UserInfoDal = value;\n    }\n}\n```\n\n##### 定义DBSession的接口\n```cs\n/// <summary>\n/// 业务层调用的是数据会话层的接口。\n/// </summary>\npublic interface IDBSession\n{\n    DbContext Db { get; }\n    IUserInfoDal UserInfoDal { get; set; }\n    bool SaveChanges();\n}\n```\n\n##### 然后让DBSession实现该接口\n略\n\n##### 定义具体的业务基类\n```cs\n//在业务基类中完成DBSession的调用，然后将业务层中公共的方法定义在基类中，但是这些方法不知道通过DBSession来获取哪个数据操作类的实例。所以将该业务基类定义成抽象类，加上一个抽象方法，加上一个IBaseDal属性，并且让基类的构造方法调用抽象方法目的是在表现层new具体的业务子类，父类的构造方法被调用，这些执行抽象方法，但是执行的的是子类中具体的实现。业务子类知道通过DBSession获取哪个数据操作类的实例。\npublic abstract class BaseService<T> where T:class,new()\n{\n    public IDBSession CurrentDBSession\n    {\n        get\n        {\n            return new DBSession();//暂时\n        }\n    }\n    public IDAL.IBaseDal<T> CurrentDal { get; set; }\n    public abstract void SetCurrentDal();\n    public BaseService()\n    {\n        SetCurrentDal();//子类一定要实现抽象方法。\n    }\n    public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n    {\n        return CurrentDal.LoadEntities(whereLambda);\n    }\n}\n```\n\n##### 定义业务层的接口\n略\n\n##### 将数据库链接字符串拷贝到web.config文件中\n略","slug":"Net-MVC-三层架构框架","published":1,"updated":"2021-03-30T03:24:16.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0e003uvcua8ond3vxx","content":"<p>asp.net+ef mvc三层框架搭建过程如下</p>\n<h5 id=\"先创建Model层\"><a href=\"#先创建Model层\" class=\"headerlink\" title=\"先创建Model层\"></a>先创建Model层</h5><p>略</p>\n<span id=\"more\"></span>\n\n<h5 id=\"创建数据访问接口层IUserInfoDal\"><a href=\"#创建数据访问接口层IUserInfoDal\" class=\"headerlink\" title=\"创建数据访问接口层IUserInfoDal\"></a>创建数据访问接口层IUserInfoDal</h5><p>在该接口中定义了常见的方法CRUD以及分页方法</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUserInfoDal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IQueryable&lt;UserInfo&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">IQueryable</span>&lt;<span class=\"title\">UserInfo</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">UserInfo <span class=\"title\">AddEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"每个接口中都需要CURD以及分页方法的定义-而且这些方法的定义基本上是一致的-所以封装-封装到IBaseDal\"><a href=\"#每个接口中都需要CURD以及分页方法的定义-而且这些方法的定义基本上是一致的-所以封装-封装到IBaseDal\" class=\"headerlink\" title=\"每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal\"></a>每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IBaseDal&lt;T&gt;where T:class,new()//注意该泛型的使用</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"让IUserInfoDal继承IBaseDal\"><a href=\"#让IUserInfoDal继承IBaseDal\" class=\"headerlink\" title=\"让IUserInfoDal继承IBaseDal\"></a>让IUserInfoDal继承IBaseDal</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUserInfoDal</span>:<span class=\"title\">IBaseDal</span>&lt;<span class=\"title\">UserInfo</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义自己特有的方法。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\"><a href=\"#让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\" class=\"headerlink\" title=\"让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\"></a>让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserInfoDal</span> :<span class=\"title\">IUserInfoDal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OAEntities Db = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;UserInfo&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.UserInfo.Where&lt;UserInfo&gt;(whereLambda);<span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;s&quot;&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageIndex&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageSize&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;totalCount&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;orderbyLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;isAsc&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IQueryable</span>&lt;<span class=\"title\">UserInfo</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = Db.UserInfo.Where&lt;UserInfo&gt;(whereLambda);</span><br><span class=\"line\">        totalCount = temp.Count();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAsc)<span class=\"comment\">//升序</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderBy&lt;UserInfo, s&gt;(orderbyLambda).Skip&lt;UserInfo&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;UserInfo&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderByDescending&lt;UserInfo, s&gt;(orderbyLambda).Skip&lt;UserInfo&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;UserInfo&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Entry&lt;UserInfo&gt;(entity).State = System.Data.EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Entry&lt;UserInfo&gt;(entity).State = System.Data.EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserInfo <span class=\"title\">AddEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Set &lt;UserInfo&gt;().Add(entity);</span><br><span class=\"line\">        Db.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">##### 由于每个数据操作类都要实现自己的接口（每一个接口都继承了IBaseDal）,所以每个数据操作类中都要重复实现CURD以及分页的方法，所以把具体的实现封装到了BaseDal中。</span></span><br><span class=\"line\">```cs</span><br><span class=\"line\">public class BaseDal&lt;T&gt;where T:class,new()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OAEntities Db = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.Set &lt;T&gt;().Where&lt;T&gt;(whereLambda);<span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;s&quot;&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageIndex&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageSize&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;totalCount&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;orderbyLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;isAsc&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">        totalCount = temp.Count();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAsc)<span class=\"comment\">//升序</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderBy&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderByDescending&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Entry&lt;T&gt;(entity).State = System.Data.EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Entry&lt;T&gt;(entity).State = System.Data.EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Set &lt;T&gt;().Add(entity);</span><br><span class=\"line\">        Db.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"让UserInfoDal继承BaseDal\"><a href=\"#让UserInfoDal继承BaseDal\" class=\"headerlink\" title=\"让UserInfoDal继承BaseDal.\"></a>让UserInfoDal继承BaseDal.</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserInfoDal</span> : <span class=\"title\">BaseDal</span>&lt;<span class=\"title\">UserInfo</span>&gt;,<span class=\"title\">IUserInfoDal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对应的独特方法</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建DBSession-数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例-所以数据会话层将业务层与数据层解耦-在数据会话层中提供一个方法：完成所有数据的保存\"><a href=\"#创建DBSession-数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例-所以数据会话层将业务层与数据层解耦-在数据会话层中提供一个方法：完成所有数据的保存\" class=\"headerlink\" title=\"创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)\"></a>创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> IUserInfoDal _UserInfoDal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> IUserInfoDal UserInfoDal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_UserInfoDal == <span class=\"literal\">null</span>)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            _UserInfoDal = <span class=\"keyword\">new</span> UserInfoDal();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _UserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _UserInfoDal = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在数据会话层中提供一个方法：完成所有数据的保存\"><a href=\"#在数据会话层中提供一个方法：完成所有数据的保存\" class=\"headerlink\" title=\"在数据会话层中提供一个方法：完成所有数据的保存\"></a>在数据会话层中提供一个方法：完成所有数据的保存</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 一个业务中经常涉及到对多张操作，我们希望连接一次数据库，完成对张表数据的操作。提高性能。 工作单元模式。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"将数据层中的所有的保存数据的SaveChanges注释掉\"><a href=\"#将数据层中的所有的保存数据的SaveChanges注释掉\" class=\"headerlink\" title=\"将数据层中的所有的保存数据的SaveChanges注释掉\"></a>将数据层中的所有的保存数据的SaveChanges注释掉</h5><p>略</p>\n<h5 id=\"在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\"><a href=\"#在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\" class=\"headerlink\" title=\"在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\"></a>在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 负责创建EF数据操作上下文实例，必须保证线程内唯一.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DBContextFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DbContext <span class=\"title\">CreateDbContext</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        DbContext dbContext = (DbContext)CallContext.GetData(<span class=\"string\">&quot;dbContext&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dbContext == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dbContext = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">            CallContext.SetData(<span class=\"string\">&quot;dbContext&quot;</span>, dbContext);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dbContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\"><a href=\"#在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\" class=\"headerlink\" title=\"在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\"></a>在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DBSession获取EF实例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DbContext Db</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DBContextFactory.CreateDbContext(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t   </span><br><span class=\"line\"><span class=\"comment\">// BaseDal中获取EF的实例</span></span><br><span class=\"line\">DbContext Db = DAL.DBContextFactory.CreateDbContext();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\"><a href=\"#抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\" class=\"headerlink\" title=\"抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\"></a>抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 通过反射的形式创建类的实例</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> AssemblyPath = ConfigurationManager.AppSettings[<span class=\"string\">&quot;AssemblyPath&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> NameSpace = ConfigurationManager.AppSettings[<span class=\"string\">&quot;NameSpace&quot;</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IUserInfoDal <span class=\"title\">CreateUserInfoDal</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> fullClassName = NameSpace + <span class=\"string\">&quot;.UserInfoDal&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CreateInstance(fullClassName) <span class=\"keyword\">as</span> IUserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">object</span> <span class=\"title\">CreateInstance</span>(<span class=\"params\"><span class=\"built_in\">string</span> className</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> assembly= Assembly.Load(AssemblyPath);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> assembly.CreateInstance(className);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后修改DBSession\"><a href=\"#然后修改DBSession\" class=\"headerlink\" title=\"然后修改DBSession\"></a>然后修改DBSession</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> IUserInfoDal _UserInfoDal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> IUserInfoDal UserInfoDal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_UserInfoDal == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//_UserInfoDal = new UserInfoDal();</span></span><br><span class=\"line\">            _UserInfoDal = AbstractFactory.CreateUserInfoDal();<span class=\"comment\">//通过抽象工厂封装了类的实例的创建</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _UserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _UserInfoDal = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义DBSession的接口\"><a href=\"#定义DBSession的接口\" class=\"headerlink\" title=\"定义DBSession的接口\"></a>定义DBSession的接口</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 业务层调用的是数据会话层的接口。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDBSession</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DbContext Db &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    IUserInfoDal UserInfoDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后让DBSession实现该接口\"><a href=\"#然后让DBSession实现该接口\" class=\"headerlink\" title=\"然后让DBSession实现该接口\"></a>然后让DBSession实现该接口</h5><p>略</p>\n<h5 id=\"定义具体的业务基类\"><a href=\"#定义具体的业务基类\" class=\"headerlink\" title=\"定义具体的业务基类\"></a>定义具体的业务基类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在业务基类中完成DBSession的调用，然后将业务层中公共的方法定义在基类中，但是这些方法不知道通过DBSession来获取哪个数据操作类的实例。所以将该业务基类定义成抽象类，加上一个抽象方法，加上一个IBaseDal属性，并且让基类的构造方法调用抽象方法目的是在表现层new具体的业务子类，父类的构造方法被调用，这些执行抽象方法，但是执行的的是子类中具体的实现。业务子类知道通过DBSession获取哪个数据操作类的实例。</span></span><br><span class=\"line\">public abstract class BaseService&lt;T&gt; where T:class,new()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IDBSession CurrentDBSession</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DBSession();<span class=\"comment\">//暂时</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IDAL.IBaseDal&lt;T&gt; CurrentDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        SetCurrentDal();<span class=\"comment\">//子类一定要实现抽象方法。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CurrentDal.LoadEntities(whereLambda);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义业务层的接口\"><a href=\"#定义业务层的接口\" class=\"headerlink\" title=\"定义业务层的接口\"></a>定义业务层的接口</h5><p>略</p>\n<h5 id=\"将数据库链接字符串拷贝到web-config文件中\"><a href=\"#将数据库链接字符串拷贝到web-config文件中\" class=\"headerlink\" title=\"将数据库链接字符串拷贝到web.config文件中\"></a>将数据库链接字符串拷贝到web.config文件中</h5><p>略</p>\n","site":{"data":{}},"length":9621,"excerpt":"<p>asp.net+ef mvc三层框架搭建过程如下</p>\n<h5 id=\"先创建Model层\"><a href=\"#先创建Model层\" class=\"headerlink\" title=\"先创建Model层\"></a>先创建Model层</h5><p>略</p>","more":"<h5 id=\"创建数据访问接口层IUserInfoDal\"><a href=\"#创建数据访问接口层IUserInfoDal\" class=\"headerlink\" title=\"创建数据访问接口层IUserInfoDal\"></a>创建数据访问接口层IUserInfoDal</h5><p>在该接口中定义了常见的方法CRUD以及分页方法</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUserInfoDal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IQueryable&lt;UserInfo&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">IQueryable</span>&lt;<span class=\"title\">UserInfo</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">UserInfo <span class=\"title\">AddEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"每个接口中都需要CURD以及分页方法的定义-而且这些方法的定义基本上是一致的-所以封装-封装到IBaseDal\"><a href=\"#每个接口中都需要CURD以及分页方法的定义-而且这些方法的定义基本上是一致的-所以封装-封装到IBaseDal\" class=\"headerlink\" title=\"每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal\"></a>每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IBaseDal&lt;T&gt;where T:class,new()//注意该泛型的使用</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"让IUserInfoDal继承IBaseDal\"><a href=\"#让IUserInfoDal继承IBaseDal\" class=\"headerlink\" title=\"让IUserInfoDal继承IBaseDal\"></a>让IUserInfoDal继承IBaseDal</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUserInfoDal</span>:<span class=\"title\">IBaseDal</span>&lt;<span class=\"title\">UserInfo</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义自己特有的方法。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\"><a href=\"#让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\" class=\"headerlink\" title=\"让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\"></a>让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserInfoDal</span> :<span class=\"title\">IUserInfoDal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OAEntities Db = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;UserInfo&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.UserInfo.Where&lt;UserInfo&gt;(whereLambda);<span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;s&quot;&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageIndex&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageSize&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;totalCount&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;orderbyLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;isAsc&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IQueryable</span>&lt;<span class=\"title\">UserInfo</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = Db.UserInfo.Where&lt;UserInfo&gt;(whereLambda);</span><br><span class=\"line\">        totalCount = temp.Count();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAsc)<span class=\"comment\">//升序</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderBy&lt;UserInfo, s&gt;(orderbyLambda).Skip&lt;UserInfo&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;UserInfo&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderByDescending&lt;UserInfo, s&gt;(orderbyLambda).Skip&lt;UserInfo&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;UserInfo&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Entry&lt;UserInfo&gt;(entity).State = System.Data.EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Entry&lt;UserInfo&gt;(entity).State = System.Data.EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserInfo <span class=\"title\">AddEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Set &lt;UserInfo&gt;().Add(entity);</span><br><span class=\"line\">        Db.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">##### 由于每个数据操作类都要实现自己的接口（每一个接口都继承了IBaseDal）,所以每个数据操作类中都要重复实现CURD以及分页的方法，所以把具体的实现封装到了BaseDal中。</span></span><br><span class=\"line\">```cs</span><br><span class=\"line\">public class BaseDal&lt;T&gt;where T:class,new()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OAEntities Db = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.Set &lt;T&gt;().Where&lt;T&gt;(whereLambda);<span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;s&quot;&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageIndex&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pageSize&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;totalCount&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;whereLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;orderbyLambda&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;isAsc&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IQueryable</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">LoadPageEntities</span>&lt;<span class=\"title\">s</span>&gt;(<span class=\"params\"><span class=\"built_in\">int</span> pageIndex, <span class=\"built_in\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"built_in\">bool</span> isAsc</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">        totalCount = temp.Count();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAsc)<span class=\"comment\">//升序</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderBy&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderByDescending&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Entry&lt;T&gt;(entity).State = System.Data.EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Entry&lt;T&gt;(entity).State = System.Data.EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;entity&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Db.Set &lt;T&gt;().Add(entity);</span><br><span class=\"line\">        Db.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"让UserInfoDal继承BaseDal\"><a href=\"#让UserInfoDal继承BaseDal\" class=\"headerlink\" title=\"让UserInfoDal继承BaseDal.\"></a>让UserInfoDal继承BaseDal.</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserInfoDal</span> : <span class=\"title\">BaseDal</span>&lt;<span class=\"title\">UserInfo</span>&gt;,<span class=\"title\">IUserInfoDal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对应的独特方法</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建DBSession-数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例-所以数据会话层将业务层与数据层解耦-在数据会话层中提供一个方法：完成所有数据的保存\"><a href=\"#创建DBSession-数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例-所以数据会话层将业务层与数据层解耦-在数据会话层中提供一个方法：完成所有数据的保存\" class=\"headerlink\" title=\"创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)\"></a>创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> IUserInfoDal _UserInfoDal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> IUserInfoDal UserInfoDal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_UserInfoDal == <span class=\"literal\">null</span>)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            _UserInfoDal = <span class=\"keyword\">new</span> UserInfoDal();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _UserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _UserInfoDal = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在数据会话层中提供一个方法：完成所有数据的保存\"><a href=\"#在数据会话层中提供一个方法：完成所有数据的保存\" class=\"headerlink\" title=\"在数据会话层中提供一个方法：完成所有数据的保存\"></a>在数据会话层中提供一个方法：完成所有数据的保存</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 一个业务中经常涉及到对多张操作，我们希望连接一次数据库，完成对张表数据的操作。提高性能。 工作单元模式。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"将数据层中的所有的保存数据的SaveChanges注释掉\"><a href=\"#将数据层中的所有的保存数据的SaveChanges注释掉\" class=\"headerlink\" title=\"将数据层中的所有的保存数据的SaveChanges注释掉\"></a>将数据层中的所有的保存数据的SaveChanges注释掉</h5><p>略</p>\n<h5 id=\"在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\"><a href=\"#在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\" class=\"headerlink\" title=\"在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\"></a>在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 负责创建EF数据操作上下文实例，必须保证线程内唯一.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DBContextFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DbContext <span class=\"title\">CreateDbContext</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        DbContext dbContext = (DbContext)CallContext.GetData(<span class=\"string\">&quot;dbContext&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dbContext == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dbContext = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">            CallContext.SetData(<span class=\"string\">&quot;dbContext&quot;</span>, dbContext);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dbContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\"><a href=\"#在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\" class=\"headerlink\" title=\"在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\"></a>在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DBSession获取EF实例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DbContext Db</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DBContextFactory.CreateDbContext(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t   </span><br><span class=\"line\"><span class=\"comment\">// BaseDal中获取EF的实例</span></span><br><span class=\"line\">DbContext Db = DAL.DBContextFactory.CreateDbContext();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\"><a href=\"#抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\" class=\"headerlink\" title=\"抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\"></a>抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 通过反射的形式创建类的实例</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> AssemblyPath = ConfigurationManager.AppSettings[<span class=\"string\">&quot;AssemblyPath&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> NameSpace = ConfigurationManager.AppSettings[<span class=\"string\">&quot;NameSpace&quot;</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IUserInfoDal <span class=\"title\">CreateUserInfoDal</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> fullClassName = NameSpace + <span class=\"string\">&quot;.UserInfoDal&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CreateInstance(fullClassName) <span class=\"keyword\">as</span> IUserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">object</span> <span class=\"title\">CreateInstance</span>(<span class=\"params\"><span class=\"built_in\">string</span> className</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> assembly= Assembly.Load(AssemblyPath);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> assembly.CreateInstance(className);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后修改DBSession\"><a href=\"#然后修改DBSession\" class=\"headerlink\" title=\"然后修改DBSession\"></a>然后修改DBSession</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> IUserInfoDal _UserInfoDal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> IUserInfoDal UserInfoDal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_UserInfoDal == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//_UserInfoDal = new UserInfoDal();</span></span><br><span class=\"line\">            _UserInfoDal = AbstractFactory.CreateUserInfoDal();<span class=\"comment\">//通过抽象工厂封装了类的实例的创建</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _UserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _UserInfoDal = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义DBSession的接口\"><a href=\"#定义DBSession的接口\" class=\"headerlink\" title=\"定义DBSession的接口\"></a>定义DBSession的接口</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 业务层调用的是数据会话层的接口。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDBSession</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DbContext Db &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    IUserInfoDal UserInfoDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后让DBSession实现该接口\"><a href=\"#然后让DBSession实现该接口\" class=\"headerlink\" title=\"然后让DBSession实现该接口\"></a>然后让DBSession实现该接口</h5><p>略</p>\n<h5 id=\"定义具体的业务基类\"><a href=\"#定义具体的业务基类\" class=\"headerlink\" title=\"定义具体的业务基类\"></a>定义具体的业务基类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在业务基类中完成DBSession的调用，然后将业务层中公共的方法定义在基类中，但是这些方法不知道通过DBSession来获取哪个数据操作类的实例。所以将该业务基类定义成抽象类，加上一个抽象方法，加上一个IBaseDal属性，并且让基类的构造方法调用抽象方法目的是在表现层new具体的业务子类，父类的构造方法被调用，这些执行抽象方法，但是执行的的是子类中具体的实现。业务子类知道通过DBSession获取哪个数据操作类的实例。</span></span><br><span class=\"line\">public abstract class BaseService&lt;T&gt; where T:class,new()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IDBSession CurrentDBSession</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DBSession();<span class=\"comment\">//暂时</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IDAL.IBaseDal&lt;T&gt; CurrentDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        SetCurrentDal();<span class=\"comment\">//子类一定要实现抽象方法。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CurrentDal.LoadEntities(whereLambda);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义业务层的接口\"><a href=\"#定义业务层的接口\" class=\"headerlink\" title=\"定义业务层的接口\"></a>定义业务层的接口</h5><p>略</p>\n<h5 id=\"将数据库链接字符串拷贝到web-config文件中\"><a href=\"#将数据库链接字符串拷贝到web-config文件中\" class=\"headerlink\" title=\"将数据库链接字符串拷贝到web.config文件中\"></a>将数据库链接字符串拷贝到web.config文件中</h5><p>略</p>"},{"title":".Net 爬虫封装","date":"2018-03-06T15:17:26.000Z","_content":"“爬虫”就是一段用来自动化采集网站数据的程序。\n<!--more-->\n#### ICrawler.cs\n```cs\nusing Caty.Spider.Crawler.Events;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Spider.Crawler\n{\n    public interface ICrawler\n    {\n        event EventHandler<OnStartEventArgs> OnStart;//爬虫启动事件\n\n        event EventHandler<OnCompletedEventArgs> OnCompleted;//爬虫完成事件\n\n        event EventHandler<OnErrorEventArgs> OnError;//爬虫出错事件\n\n        Task<string> Start(Uri uri, string proxy); //异步爬虫\n    }\n}\n```\n\n#### SimpleCrawler.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.IO.Compression;\nusing Caty.Spider.Crawler.Events;\n\nnamespace Caty.Spider.Crawler\n{\n    public class SimpleCrawler : ICrawler\n    {\n        public event EventHandler<OnStartEventArgs> OnStart;//爬虫启动事件\n\n        public event EventHandler<OnCompletedEventArgs> OnCompleted;//爬虫完成事件\n\n        public event EventHandler<OnErrorEventArgs> OnError; //爬虫出错事件\n\n        public CookieContainer CookiesContainer { get; set; } //定义Cookie容器\n\n        public SimpleCrawler() { }\n\n        /// <summary>\n        /// 异步创建爬虫\n        /// </summary>\n        /// <param name=\"uri\">爬虫URL地址</param>\n        /// <param name=\"proxy\">代理服务器</param>\n        /// <returns>网页源代码</returns>\n        public async Task<string> Start(Uri uri, string proxy = null)\n        {\n            return await Task.Run(() =>\n            {\n                var pageSource = string.Empty;\n                try\n                {\n                    if (this.OnStart != null) this.OnStart(this, new OnStartEventArgs(uri));\n                    var watch = new Stopwatch();\n                    watch.Start();\n                    var request = (HttpWebRequest)WebRequest.Create(uri);\n                    request.Accept = \"*/*\";\n                    request.ContentType = \"application/x-www-form-urlencoede\";//定义文档类型及编码\n                    request.AllowAutoRedirect = false;//禁止自动跳转\n                                                      //设置User-Agent，伪装成Google Chrome浏览器\n                    request.UserAgent = \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\";\n                    request.Timeout = 5000;//定义请求超时时间为5秒\n                    request.KeepAlive = true;//启用长连接\n                    request.Method = \"GET\";//定义请求方式为GET     \n                    if (proxy != null) request.Proxy = new WebProxy(proxy);//设置代理服务器IP，伪装请求地址\n                    request.CookieContainer = this.CookiesContainer;//附加Cookie容器\n                    request.ServicePoint.ConnectionLimit = int.MaxValue;//定义最大连接数\n\n                    using (var response = (HttpWebResponse)request.GetResponse())\n                    {//获取请求响应\n\n                        foreach (Cookie cookie in response.Cookies) this.CookiesContainer.Add(cookie);//将Cookie加入容器，保存登录状态\n\n                        if (response.ContentEncoding.ToLower().Contains(\"gzip\"))//解压\n                        {\n                            using (GZipStream stream = new GZipStream(response.GetResponseStream(), CompressionMode.Decompress))\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n                                    pageSource = reader.ReadToEnd();\n                                }\n                            }\n                        }\n                        else if (response.ContentEncoding.ToLower().Contains(\"deflate\"))//解压\n                        {\n                            using (DeflateStream stream = new DeflateStream(response.GetResponseStream(), CompressionMode.Decompress))\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n                                    pageSource = reader.ReadToEnd();\n                                }\n\n                            }\n                        }\n                        else\n                        {\n                            using (Stream stream = response.GetResponseStream())//原始\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n\n                                    pageSource = reader.ReadToEnd();\n                                }\n                            }\n                        }\n                    }\n                    request.Abort();\n                    watch.Stop();\n                    var threadId = System.Threading.Thread.CurrentThread.ManagedThreadId;//获取当前任务线程ID\n                    var milliseconds = watch.ElapsedMilliseconds;//获取请求执行时间\n                    if (this.OnCompleted != null) this.OnCompleted(this, new OnCompletedEventArgs(uri, threadId, milliseconds, pageSource));\n                }\n                catch (Exception ex)\n                {\n                    if (this.OnError != null) this.OnError(this, new OnErrorEventArgs(uri, ex));\n                }\n                return pageSource;\n            });\n        }\n    }\n}\n```\n\n#### OnCompletedEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫完成事件\n    /// </summary>\n    public class OnCompletedEventArgs\n    {\n        public Uri Uri { get; private set; }// 爬虫URL地址\n        public int ThreadId { get; private set; }// 任务线程ID\n        public string PageSource { get; private set; }// 页面源代码\n        public long Milliseconds { get; private set; }// 爬虫请求执行事件\n        public OnCompletedEventArgs(Uri uri, int threadId, long milliseconds, string pageSource)\n        {\n            this.Uri = uri;\n            this.ThreadId = threadId;\n            this.Milliseconds = milliseconds;\n            this.PageSource = pageSource;\n        }\n    }\n}\n```\n\n#### OnErrorEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫错误事件\n    /// </summary>\n    public class OnErrorEventArgs\n    {\n        public Uri Uri { get; set; }\n\n        public Exception Exception { get; set; }\n\n        public OnErrorEventArgs(Uri uri, Exception exception)\n        {\n            this.Uri = uri;\n            this.Exception = exception;\n        }\n    }\n}\n```\n\n#### OnStartEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫启动事件\n    /// </summary>\n    public class OnStartEventArgs\n    {\n        public Uri Uri { get; set; }// 爬虫URL地址\n\n        public OnStartEventArgs(Uri uri)\n        {\n            this.Uri = uri;\n        }\n    }\n}\n```\n\n#### 如何使用\n```cs\nvar Url = \"http://mebook.cc/\";\nvar kindleCrawler = new SimpleCrawler();\nkindleCrawler.OnStart += (s, e) =>\n{\n    //启动时执行的代码\n};\nkindleCrawler.OnError += (s, e) =>\n{\n    //出错时执行的代码\n};\nkindleCrawler.OnCompleted += (s, e) =>\n{\n    //完成时执行的代码\n}\n```\n","source":"_posts/Net-爬虫封装.md","raw":"---\ntitle: .Net 爬虫封装\ndate: 2018-03-06 23:17:26\ncategories: .Net\ntags: \n - .Net\n - Spider\n---\n“爬虫”就是一段用来自动化采集网站数据的程序。\n<!--more-->\n#### ICrawler.cs\n```cs\nusing Caty.Spider.Crawler.Events;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Spider.Crawler\n{\n    public interface ICrawler\n    {\n        event EventHandler<OnStartEventArgs> OnStart;//爬虫启动事件\n\n        event EventHandler<OnCompletedEventArgs> OnCompleted;//爬虫完成事件\n\n        event EventHandler<OnErrorEventArgs> OnError;//爬虫出错事件\n\n        Task<string> Start(Uri uri, string proxy); //异步爬虫\n    }\n}\n```\n\n#### SimpleCrawler.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.IO.Compression;\nusing Caty.Spider.Crawler.Events;\n\nnamespace Caty.Spider.Crawler\n{\n    public class SimpleCrawler : ICrawler\n    {\n        public event EventHandler<OnStartEventArgs> OnStart;//爬虫启动事件\n\n        public event EventHandler<OnCompletedEventArgs> OnCompleted;//爬虫完成事件\n\n        public event EventHandler<OnErrorEventArgs> OnError; //爬虫出错事件\n\n        public CookieContainer CookiesContainer { get; set; } //定义Cookie容器\n\n        public SimpleCrawler() { }\n\n        /// <summary>\n        /// 异步创建爬虫\n        /// </summary>\n        /// <param name=\"uri\">爬虫URL地址</param>\n        /// <param name=\"proxy\">代理服务器</param>\n        /// <returns>网页源代码</returns>\n        public async Task<string> Start(Uri uri, string proxy = null)\n        {\n            return await Task.Run(() =>\n            {\n                var pageSource = string.Empty;\n                try\n                {\n                    if (this.OnStart != null) this.OnStart(this, new OnStartEventArgs(uri));\n                    var watch = new Stopwatch();\n                    watch.Start();\n                    var request = (HttpWebRequest)WebRequest.Create(uri);\n                    request.Accept = \"*/*\";\n                    request.ContentType = \"application/x-www-form-urlencoede\";//定义文档类型及编码\n                    request.AllowAutoRedirect = false;//禁止自动跳转\n                                                      //设置User-Agent，伪装成Google Chrome浏览器\n                    request.UserAgent = \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\";\n                    request.Timeout = 5000;//定义请求超时时间为5秒\n                    request.KeepAlive = true;//启用长连接\n                    request.Method = \"GET\";//定义请求方式为GET     \n                    if (proxy != null) request.Proxy = new WebProxy(proxy);//设置代理服务器IP，伪装请求地址\n                    request.CookieContainer = this.CookiesContainer;//附加Cookie容器\n                    request.ServicePoint.ConnectionLimit = int.MaxValue;//定义最大连接数\n\n                    using (var response = (HttpWebResponse)request.GetResponse())\n                    {//获取请求响应\n\n                        foreach (Cookie cookie in response.Cookies) this.CookiesContainer.Add(cookie);//将Cookie加入容器，保存登录状态\n\n                        if (response.ContentEncoding.ToLower().Contains(\"gzip\"))//解压\n                        {\n                            using (GZipStream stream = new GZipStream(response.GetResponseStream(), CompressionMode.Decompress))\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n                                    pageSource = reader.ReadToEnd();\n                                }\n                            }\n                        }\n                        else if (response.ContentEncoding.ToLower().Contains(\"deflate\"))//解压\n                        {\n                            using (DeflateStream stream = new DeflateStream(response.GetResponseStream(), CompressionMode.Decompress))\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n                                    pageSource = reader.ReadToEnd();\n                                }\n\n                            }\n                        }\n                        else\n                        {\n                            using (Stream stream = response.GetResponseStream())//原始\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n\n                                    pageSource = reader.ReadToEnd();\n                                }\n                            }\n                        }\n                    }\n                    request.Abort();\n                    watch.Stop();\n                    var threadId = System.Threading.Thread.CurrentThread.ManagedThreadId;//获取当前任务线程ID\n                    var milliseconds = watch.ElapsedMilliseconds;//获取请求执行时间\n                    if (this.OnCompleted != null) this.OnCompleted(this, new OnCompletedEventArgs(uri, threadId, milliseconds, pageSource));\n                }\n                catch (Exception ex)\n                {\n                    if (this.OnError != null) this.OnError(this, new OnErrorEventArgs(uri, ex));\n                }\n                return pageSource;\n            });\n        }\n    }\n}\n```\n\n#### OnCompletedEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫完成事件\n    /// </summary>\n    public class OnCompletedEventArgs\n    {\n        public Uri Uri { get; private set; }// 爬虫URL地址\n        public int ThreadId { get; private set; }// 任务线程ID\n        public string PageSource { get; private set; }// 页面源代码\n        public long Milliseconds { get; private set; }// 爬虫请求执行事件\n        public OnCompletedEventArgs(Uri uri, int threadId, long milliseconds, string pageSource)\n        {\n            this.Uri = uri;\n            this.ThreadId = threadId;\n            this.Milliseconds = milliseconds;\n            this.PageSource = pageSource;\n        }\n    }\n}\n```\n\n#### OnErrorEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫错误事件\n    /// </summary>\n    public class OnErrorEventArgs\n    {\n        public Uri Uri { get; set; }\n\n        public Exception Exception { get; set; }\n\n        public OnErrorEventArgs(Uri uri, Exception exception)\n        {\n            this.Uri = uri;\n            this.Exception = exception;\n        }\n    }\n}\n```\n\n#### OnStartEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫启动事件\n    /// </summary>\n    public class OnStartEventArgs\n    {\n        public Uri Uri { get; set; }// 爬虫URL地址\n\n        public OnStartEventArgs(Uri uri)\n        {\n            this.Uri = uri;\n        }\n    }\n}\n```\n\n#### 如何使用\n```cs\nvar Url = \"http://mebook.cc/\";\nvar kindleCrawler = new SimpleCrawler();\nkindleCrawler.OnStart += (s, e) =>\n{\n    //启动时执行的代码\n};\nkindleCrawler.OnError += (s, e) =>\n{\n    //出错时执行的代码\n};\nkindleCrawler.OnCompleted += (s, e) =>\n{\n    //完成时执行的代码\n}\n```\n","slug":"Net-爬虫封装","published":1,"updated":"2021-03-30T03:24:16.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0e003yvcuah7gu2b2a","content":"<p>“爬虫”就是一段用来自动化采集网站数据的程序。</p>\n<span id=\"more\"></span>\n<h4 id=\"ICrawler-cs\"><a href=\"#ICrawler-cs\" class=\"headerlink\" title=\"ICrawler.cs\"></a>ICrawler.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Spider.Crawler.Events;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICrawler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnStartEventArgs&gt; OnStart;<span class=\"comment\">//爬虫启动事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnCompletedEventArgs&gt; OnCompleted;<span class=\"comment\">//爬虫完成事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnErrorEventArgs&gt; OnError;<span class=\"comment\">//爬虫出错事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">Task&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Start</span>(<span class=\"params\">Uri uri, <span class=\"built_in\">string</span> proxy</span>)</span>; <span class=\"comment\">//异步爬虫</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SimpleCrawler-cs\"><a href=\"#SimpleCrawler-cs\" class=\"headerlink\" title=\"SimpleCrawler.cs\"></a>SimpleCrawler.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO.Compression;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Spider.Crawler.Events;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimpleCrawler</span> : <span class=\"title\">ICrawler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnStartEventArgs&gt; OnStart;<span class=\"comment\">//爬虫启动事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnCompletedEventArgs&gt; OnCompleted;<span class=\"comment\">//爬虫完成事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnErrorEventArgs&gt; OnError; <span class=\"comment\">//爬虫出错事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> CookieContainer CookiesContainer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; <span class=\"comment\">//定义Cookie容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleCrawler</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 异步创建爬虫</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;uri&quot;&gt;</span>爬虫URL地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;proxy&quot;&gt;</span>代理服务器<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>网页源代码<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Start</span>(<span class=\"params\">Uri uri, <span class=\"built_in\">string</span> proxy = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> Task.Run(() =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> pageSource = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnStart != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnStart(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnStartEventArgs(uri));</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> watch = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">                    watch.Start();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> request = (HttpWebRequest)WebRequest.Create(uri);</span><br><span class=\"line\">                    request.Accept = <span class=\"string\">&quot;*/*&quot;</span>;</span><br><span class=\"line\">                    request.ContentType = <span class=\"string\">&quot;application/x-www-form-urlencoede&quot;</span>;<span class=\"comment\">//定义文档类型及编码</span></span><br><span class=\"line\">                    request.AllowAutoRedirect = <span class=\"literal\">false</span>;<span class=\"comment\">//禁止自动跳转</span></span><br><span class=\"line\">                                                      <span class=\"comment\">//设置User-Agent，伪装成Google Chrome浏览器</span></span><br><span class=\"line\">                    request.UserAgent = <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36&quot;</span>;</span><br><span class=\"line\">                    request.Timeout = <span class=\"number\">5000</span>;<span class=\"comment\">//定义请求超时时间为5秒</span></span><br><span class=\"line\">                    request.KeepAlive = <span class=\"literal\">true</span>;<span class=\"comment\">//启用长连接</span></span><br><span class=\"line\">                    request.Method = <span class=\"string\">&quot;GET&quot;</span>;<span class=\"comment\">//定义请求方式为GET     </span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (proxy != <span class=\"literal\">null</span>) request.Proxy = <span class=\"keyword\">new</span> WebProxy(proxy);<span class=\"comment\">//设置代理服务器IP，伪装请求地址</span></span><br><span class=\"line\">                    request.CookieContainer = <span class=\"keyword\">this</span>.CookiesContainer;<span class=\"comment\">//附加Cookie容器</span></span><br><span class=\"line\">                    request.ServicePoint.ConnectionLimit = <span class=\"built_in\">int</span>.MaxValue;<span class=\"comment\">//定义最大连接数</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> response = (HttpWebResponse)request.GetResponse())</span><br><span class=\"line\">                    &#123;<span class=\"comment\">//获取请求响应</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">foreach</span> (Cookie cookie <span class=\"keyword\">in</span> response.Cookies) <span class=\"keyword\">this</span>.CookiesContainer.Add(cookie);<span class=\"comment\">//将Cookie加入容器，保存登录状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (response.ContentEncoding.ToLower().Contains(<span class=\"string\">&quot;gzip&quot;</span>))<span class=\"comment\">//解压</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (GZipStream stream = <span class=\"keyword\">new</span> GZipStream(response.GetResponseStream(), CompressionMode.Decompress))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (response.ContentEncoding.ToLower().Contains(<span class=\"string\">&quot;deflate&quot;</span>))<span class=\"comment\">//解压</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (DeflateStream stream = <span class=\"keyword\">new</span> DeflateStream(response.GetResponseStream(), CompressionMode.Decompress))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (Stream stream = response.GetResponseStream())<span class=\"comment\">//原始</span></span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    request.Abort();</span><br><span class=\"line\">                    watch.Stop();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> threadId = System.Threading.Thread.CurrentThread.ManagedThreadId;<span class=\"comment\">//获取当前任务线程ID</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> milliseconds = watch.ElapsedMilliseconds;<span class=\"comment\">//获取请求执行时间</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnCompleted != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnCompleted(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnCompletedEventArgs(uri, threadId, milliseconds, pageSource));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                catch (Exception ex)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnError != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnError(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnErrorEventArgs(uri, ex));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> pageSource;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"OnCompletedEventArgs-cs\"><a href=\"#OnCompletedEventArgs-cs\" class=\"headerlink\" title=\"OnCompletedEventArgs.cs\"></a>OnCompletedEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫完成事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnCompletedEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫URL地址</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ThreadId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 任务线程ID</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> PageSource &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 页面源代码</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Milliseconds &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫请求执行事件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnCompletedEventArgs</span>(<span class=\"params\">Uri uri, <span class=\"built_in\">int</span> threadId, <span class=\"built_in\">long</span> milliseconds, <span class=\"built_in\">string</span> pageSource</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ThreadId = threadId;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Milliseconds = milliseconds;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.PageSource = pageSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"OnErrorEventArgs-cs\"><a href=\"#OnErrorEventArgs-cs\" class=\"headerlink\" title=\"OnErrorEventArgs.cs\"></a>OnErrorEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫错误事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnErrorEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Exception Exception &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnErrorEventArgs</span>(<span class=\"params\">Uri uri, Exception exception</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Exception = exception;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"OnStartEventArgs-cs\"><a href=\"#OnStartEventArgs-cs\" class=\"headerlink\" title=\"OnStartEventArgs.cs\"></a>OnStartEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫启动事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnStartEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫URL地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnStartEventArgs</span>(<span class=\"params\">Uri uri</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Url = <span class=\"string\">&quot;http://mebook.cc/&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> kindleCrawler = <span class=\"keyword\">new</span> SimpleCrawler();</span><br><span class=\"line\">kindleCrawler.OnStart += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//启动时执行的代码</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">kindleCrawler.OnError += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//出错时执行的代码</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">kindleCrawler.OnCompleted += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//完成时执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":5471,"excerpt":"<p>“爬虫”就是一段用来自动化采集网站数据的程序。</p>","more":"<h4 id=\"ICrawler-cs\"><a href=\"#ICrawler-cs\" class=\"headerlink\" title=\"ICrawler.cs\"></a>ICrawler.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Spider.Crawler.Events;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICrawler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnStartEventArgs&gt; OnStart;<span class=\"comment\">//爬虫启动事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnCompletedEventArgs&gt; OnCompleted;<span class=\"comment\">//爬虫完成事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnErrorEventArgs&gt; OnError;<span class=\"comment\">//爬虫出错事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">Task&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Start</span>(<span class=\"params\">Uri uri, <span class=\"built_in\">string</span> proxy</span>)</span>; <span class=\"comment\">//异步爬虫</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SimpleCrawler-cs\"><a href=\"#SimpleCrawler-cs\" class=\"headerlink\" title=\"SimpleCrawler.cs\"></a>SimpleCrawler.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO.Compression;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Spider.Crawler.Events;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimpleCrawler</span> : <span class=\"title\">ICrawler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnStartEventArgs&gt; OnStart;<span class=\"comment\">//爬虫启动事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnCompletedEventArgs&gt; OnCompleted;<span class=\"comment\">//爬虫完成事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnErrorEventArgs&gt; OnError; <span class=\"comment\">//爬虫出错事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> CookieContainer CookiesContainer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; <span class=\"comment\">//定义Cookie容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleCrawler</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 异步创建爬虫</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;uri&quot;&gt;</span>爬虫URL地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;proxy&quot;&gt;</span>代理服务器<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>网页源代码<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Start</span>(<span class=\"params\">Uri uri, <span class=\"built_in\">string</span> proxy = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> Task.Run(() =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> pageSource = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnStart != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnStart(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnStartEventArgs(uri));</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> watch = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">                    watch.Start();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> request = (HttpWebRequest)WebRequest.Create(uri);</span><br><span class=\"line\">                    request.Accept = <span class=\"string\">&quot;*/*&quot;</span>;</span><br><span class=\"line\">                    request.ContentType = <span class=\"string\">&quot;application/x-www-form-urlencoede&quot;</span>;<span class=\"comment\">//定义文档类型及编码</span></span><br><span class=\"line\">                    request.AllowAutoRedirect = <span class=\"literal\">false</span>;<span class=\"comment\">//禁止自动跳转</span></span><br><span class=\"line\">                                                      <span class=\"comment\">//设置User-Agent，伪装成Google Chrome浏览器</span></span><br><span class=\"line\">                    request.UserAgent = <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36&quot;</span>;</span><br><span class=\"line\">                    request.Timeout = <span class=\"number\">5000</span>;<span class=\"comment\">//定义请求超时时间为5秒</span></span><br><span class=\"line\">                    request.KeepAlive = <span class=\"literal\">true</span>;<span class=\"comment\">//启用长连接</span></span><br><span class=\"line\">                    request.Method = <span class=\"string\">&quot;GET&quot;</span>;<span class=\"comment\">//定义请求方式为GET     </span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (proxy != <span class=\"literal\">null</span>) request.Proxy = <span class=\"keyword\">new</span> WebProxy(proxy);<span class=\"comment\">//设置代理服务器IP，伪装请求地址</span></span><br><span class=\"line\">                    request.CookieContainer = <span class=\"keyword\">this</span>.CookiesContainer;<span class=\"comment\">//附加Cookie容器</span></span><br><span class=\"line\">                    request.ServicePoint.ConnectionLimit = <span class=\"built_in\">int</span>.MaxValue;<span class=\"comment\">//定义最大连接数</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> response = (HttpWebResponse)request.GetResponse())</span><br><span class=\"line\">                    &#123;<span class=\"comment\">//获取请求响应</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">foreach</span> (Cookie cookie <span class=\"keyword\">in</span> response.Cookies) <span class=\"keyword\">this</span>.CookiesContainer.Add(cookie);<span class=\"comment\">//将Cookie加入容器，保存登录状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (response.ContentEncoding.ToLower().Contains(<span class=\"string\">&quot;gzip&quot;</span>))<span class=\"comment\">//解压</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (GZipStream stream = <span class=\"keyword\">new</span> GZipStream(response.GetResponseStream(), CompressionMode.Decompress))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (response.ContentEncoding.ToLower().Contains(<span class=\"string\">&quot;deflate&quot;</span>))<span class=\"comment\">//解压</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (DeflateStream stream = <span class=\"keyword\">new</span> DeflateStream(response.GetResponseStream(), CompressionMode.Decompress))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (Stream stream = response.GetResponseStream())<span class=\"comment\">//原始</span></span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    request.Abort();</span><br><span class=\"line\">                    watch.Stop();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> threadId = System.Threading.Thread.CurrentThread.ManagedThreadId;<span class=\"comment\">//获取当前任务线程ID</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> milliseconds = watch.ElapsedMilliseconds;<span class=\"comment\">//获取请求执行时间</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnCompleted != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnCompleted(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnCompletedEventArgs(uri, threadId, milliseconds, pageSource));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                catch (Exception ex)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnError != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnError(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnErrorEventArgs(uri, ex));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> pageSource;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"OnCompletedEventArgs-cs\"><a href=\"#OnCompletedEventArgs-cs\" class=\"headerlink\" title=\"OnCompletedEventArgs.cs\"></a>OnCompletedEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫完成事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnCompletedEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫URL地址</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ThreadId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 任务线程ID</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> PageSource &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 页面源代码</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Milliseconds &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫请求执行事件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnCompletedEventArgs</span>(<span class=\"params\">Uri uri, <span class=\"built_in\">int</span> threadId, <span class=\"built_in\">long</span> milliseconds, <span class=\"built_in\">string</span> pageSource</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ThreadId = threadId;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Milliseconds = milliseconds;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.PageSource = pageSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"OnErrorEventArgs-cs\"><a href=\"#OnErrorEventArgs-cs\" class=\"headerlink\" title=\"OnErrorEventArgs.cs\"></a>OnErrorEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫错误事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnErrorEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Exception Exception &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnErrorEventArgs</span>(<span class=\"params\">Uri uri, Exception exception</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Exception = exception;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"OnStartEventArgs-cs\"><a href=\"#OnStartEventArgs-cs\" class=\"headerlink\" title=\"OnStartEventArgs.cs\"></a>OnStartEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫启动事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnStartEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫URL地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnStartEventArgs</span>(<span class=\"params\">Uri uri</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Url = <span class=\"string\">&quot;http://mebook.cc/&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> kindleCrawler = <span class=\"keyword\">new</span> SimpleCrawler();</span><br><span class=\"line\">kindleCrawler.OnStart += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//启动时执行的代码</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">kindleCrawler.OnError += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//出错时执行的代码</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">kindleCrawler.OnCompleted += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//完成时执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"WPF基础学习(一)","date":"2020-03-28T03:19:45.000Z","_content":"> 作者：Peter Luo 出处：https://www.cnblogs.com/Peter-Luo/\n\n### XAML基础\n\n#### WPF应用程序的顶级元素如下\n\n* Windo元素\n* Page元素(用于可导航的应用程序)\n* Application元素(用于定于应用程序资源和启动设置)\n\n#### 名称空间\n\n* http://schemas.microsoft.com/winfx/2006/xaml/presentation 是WPF核心名称空间.它包含了所有WPF类,包括用来构建用户界面的控件.如果没有使用名称空间前缀,那么它成为整个文档的默认名称空间.换句话说,除非另外指明,每个元素自动位于这个名称空间.\n\n* http://schemas.microsoft.com/winfx/2006/xaml 是XAML名称空间.它包含各种XAML使用特性,这些特性可影响文档的解释方式.该名称空间被映射为前缀x.这意味着可通过在元素名称之前放置名称空间前缀x来使用该名称空间(例如<x:ElementName>).\n<!--more-->\n#### 代码隐藏类\n\n可通过XAML构造用户界面,但为了使应用程序具有一定的功能,就需要用于连接包含应用程序代码的事件处理程序的方法.XAML通过使用如下所示的Class特性简化了这个问题：\n\n```cs\n    <Window x:Class=\"WpfApplication1.MainWindow\">\n```\n\n在XAML名称空间的Class特性之前放置了名称空间前缀x,意味着这是XAML语言中更通用的部分.实际上,Class特性告诉XAML解析器用指定的名称生成一个新类.该类继承自由XML元素命名的类.换句话说,该实例创建了一个名为MainWindow的新类,该类继承自Window基类.\n\n### XAML属性\n\n#### 标记扩展\n\n标记扩展使用{标记扩展类 参数}语法,如\n\n```cs\n<Button Background=\"{x:Static SystemColors.ActiveCaptionBrush}\"/>\n```\n\n所有标记扩展都由继承自System.Windows.MarkupExtension基类地类实现.MarkupExtension基类十分简单,提供了一个简单的ProvideValue()方法类获取所期望的数值.\n\n#### 附加属性\n\n附加属性始终使用包含两个部分的命名格式:定义类型.属性名.\n\n附加属性根本不是真正的属性.它们实际上被转换为方法调用.\n\n#### 特殊字符与空白\n\n特殊字符|实体字符\n:-|:-|\n<|&lt ;\n>|&gt ;\n&|&amp ;\n\"|&quot ;\n\n如果希望在文本中包含一系列空格.在这种情况下,需要为元素使用xml:space=\"preserve\"特性,\n\nxml:space特性是XML标准的一部分,是一个要么包括全部、要么什么都不包括的设置.一旦使用了该设置,元素内的所有空字符串都将被保留.\n\n### 使用其他名称空间中的类型\n\n为使用未在WPF名称空间中定义的类.需要将.NET名称空间映射到XML名称空间.XAML有一种特殊的语法可用于完成这一工作,该语法如下所示:\n\n```cs\n　　xmlns:Prefix=\"clr-namespace:Namespace;assembly=AssemblyName\"\n```\n\n　　通常,在XAML文档的根元素中,在紧随声明WPF和XAML名称空间的特性之后放置这个名称空间.还需要使用适当的信息填充三个斜体部分,这三部分的含义如下：\n\n* Prefix是希望在XAML标记中用于指示名称空间的XML前缀.例如,XAML语法使用x前缀.\n* Namespace是完全限定的.NET名称空间的名称.\n* AssemblyName是声明类型的程序集,没有.dll扩张名.这个程序集必须在项目中引用.如果希望使用项目程序集,可以忽略这一部分.\n\n### 加载和编译XAML\n\n可使用三种不同的编码方式来创建WPF应用程序：\n\n* 只使用代码.这是在Visual Studio中为Windows窗体应用程序使用的传统方法.它通过代码语句生成用户界面.\n* 使用代码和未经编译的标记(XAML).这种具体方式对于某些特殊情况是很有意义的,例如创建高度动态化的用户界面.这种方式在运行时使用System.Windows.Markup名称空间中的XamlReader类,从XAML文件中加载部分用户界面.\n* 使用代码和编译过的标记(BAML).对于WPF而言这是一种更好的方式,也是Visual Studio支持的一种方式.这种方式为每个窗口创建了一个XAML模板,这个XAML模板被编译为BAML,并嵌入到最终的程序集中.编译过的BAML在运行时被提取出来,用于重新生成用户界面\n\n### WPF的布局\n\n\"理想的\"WPF窗口需要遵循以下几条重要原则：\n\n* 不应显示设定元素(如控件)的尺寸.元素应当可以改变尺寸以适合它们的内容.例如,当添加更多的文本时按钮应当能够扩展.可通过设置最大和最小尺寸来限制可以接受的控件尺寸范围.\n* 不应使用屏幕坐标指定元素的位置.元素应当由它们的容器根据它们的尺寸、顺序以及(可选的)其他特定与具体布局容器的信息进行排列.如果需要在元素之间添加空白空间,可使用Margin属性.\n* 布局容器的子元素“共享”可用的空间.如果空间允许,布局容器会根据每个元素的内容尽可能为元素设置更合理得尺寸.它们还会向一个或多个子元素分配多余的空间.\n* 可嵌套的布局容器.典型的用户界面使用Grid面板作为开始,Grid面板是WPF中功能最强大的容器,Grid面板可包含其他布局容器,包含的这些容器以最小的分组排列元素,比如带有标题的文本框、列表框中的项、工具栏上的图标以及一列按钮等.\n\nPanel的公有属性\n\n名称|说明\n:-|:-\nBackgroup|该属性用于面板背景着色.如果想要接收鼠标事件,就必须将属性设置为非空值(如果想接收鼠标事件,又不希望显示固定颜色的背景,那么只需要将背景色设置为透明即可)\nChildren|该属性是在面板中存储的条目集合.这是第一级条目--换句话说,这些条目自身也可以包含更多的条目.\nIsItemsHost|该属性是一个布尔值,如果面板用于显示与ItemsControl控件关联的项(例如,TreeView控件中的节点或列表框中的列表项),该属性值为true.在大多数情况下,设置不需要知道列表控件使用后台面板来管理它所包含的条目的布局.但如果希望创建自定义的列表,以不同方式防止子元素(例如,以平布方式显示图像的ListBox控件),该细节就变得很重要.\n\n核心布局面板\n名称|说明\n:-|:-\nStackPanel|在水平或垂直的堆栈中放置元素.这个布局容器通常用于更大、更复杂窗口的一些小区域.\nWrapPanel|在一系列可换行的行中放置元素,在水平方向上,WrapPanel面板从左向右放置条目,然后在随后的行中放置元素,在垂直方向上,WrapPanel面板在自上而下的列中放置元素,并使用附件的列放置剩余的条目.\nDockPanel|根据容器上的整体边界调整元素\nGrid|根据不可见的表格在行和列中排列元素,这是最灵活、最常用的容器之一.\nUniformGrid|在不可见但是强制所有单元格具有相同尺寸的表中放置元素,这个布局容器不常用.\nCanvas|使用固定坐标绝对定位元素.这个布局与传统Windows窗体应用程序最相似,但没有提供锚定或停靠功能.因此,对于尺寸可变的窗体,该布局容器不是合适的选择.如果选择的话,需要另外做一些工作.\n\n### StackPanel面板进行布局\n\nStackPanel布局属性\n名称|说明\n:-|:-\nHorizontalAlignment|当水平方向上有额外的空间时,该属性决定了子元素在布局容器中如何定位.可选用Center、Left、Right或Stretch等属性值\nVerticalAlignment|当垂直方向上有额外的空间时,该属性决定了子元素在布局容器中如何定位.可选用Center、Top、Bottom或Stretch等属性值\nMargin|该属性用于在元素的周围添加一定的空间.Margin属性是System.Windows.Thickness结构的一个实例,该结构具有分别用于顶部、底部、左边和右边添加空间的独立组件.\nMinWidth和MinHeight|这两个属性用于设置元素的最小尺寸.如果一个元素对于其他布局容器来说太大,该元素将被剪裁以适合容器.\nMaxWidth和MaxHeight|这两个属性用于设置元素的最大尺寸.如果有更多可以使用的空间,那么在扩展子元素时依旧不会超出这一限制,即使将HorizontalAlignment和VerticalAlignment属性设置为Stretch也同样如此.\nWidth和Height|这两个属性用来显式地设置元素的尺寸.这一设置会重写为HorizontalAlignment和VerticalAlignment属性设置的Stretch值.但不能超出MinWidth、MinHeight、MaxWidth和MaxHeight属性设置的范围.\n\nBorder控件\nBorder类非常简单.它只能包含一段嵌套内容(通常是布局面板),并为其添加背景或在其周围添加边框.\n\nBorder控件属性\n名称|说明\n:-|:-\nBackground|使用Brush对象设置边框中所有内容后面的背景.可使用固定颜色背景,也可使用其他更特殊的背景.\nBorderBrush和BorderThickness|使用Brush对象设置位于Border对象边缘的边框的颜色,并设置边框的宽度.为显示边框,必须设置这两个属性\nCornerRadius|该属性可使边框具有雅致的圆角.CornerRadius的值越大,圆角效果就越明显.\nPadding|该属性在边框和内部的内容之间添加空间.\n\n### WrapPanel和DockPanel面板\n\nWrapPanel面板\n\nWrapPanel面板在可能的空间中,以一次一行或一列的方式布置控件.默认情况下,WrapPanel.Orientation的属性设置为Horizontal;控件从左向右进行排列,再在下一行中排列.但可将WrapPenel.Orientation的属性设置为Vertical,从而在多个列中放置元素.\n\nWrapPanel面板是唯一一个不能通过灵活使用Grid面板代替的面板.\n\nDockPanel面板\n\nDockPanel面板是更有趣的布局选项.它沿着一条外边缘来拉伸所包含的控件.理解该面板最简便的方式是,考虑一下位于许多Windows应用程序窗口顶部的工具栏,这些工具栏停靠到窗口顶部.与StackPanel面板类似,被停靠的元素选择它们的布局的一方面.\n\n通过Dock附加属性,可将该属性设置为Left、Right、Top或Bottom.放在DockPanel面板中的每个元素都会自动捕获该属性.\n\n### Grid面板\n\n需要两个步骤来创建基于Grid面板的布局.首先,选择希望使用的行和列的数量.然后,为每个包含的元素指定恰当的行和列,从而在合适的位置放置元素.Grid面板通过使用对象Grid.ColumnDefinitions和Grid.RowDefinitions集合来创建网格和行.\n\n#### 调整行和列\n\nGrid面板支持以下三种设置尺寸的方式：\n\n* 绝对设置尺寸方式.使用设备无关单位准确地设置尺寸.这是最无用的策略,因为这种策略不够灵活,难以适应内容大小和容器大小的改变,而且难以处理本地化.\n\n    ```cs\n    <ColumnDefinition Width=\"100\"></ColumnDefinition>\n    ````\n\n* 自动设置尺寸方式.每行和每列的尺寸刚好满足需要.这是最有用的尺寸设置方式.\n\n    ```cs\n    <ColumnDefinition Width=\"Auto\"></ColumnDefinition>\n    ````\n\n* 按比例设置尺寸方式.按比例将空间分割到一组行和列中.这是对所有行和列的标准设置.\n\n    ```cs\n    <ColumnDefinition Width=\"*\"></ColumnDefinition>\n    ```\n\n#### 布局舍入\n\n将布局容器的UseLayouyRounding属性设置为true,WPF会确保布局容器中的所有内容对齐到最近的像素边界,从而消除了所有模糊问题.\n\n#### 跨越行和列\n\n使用两个附加属性使元素跨越多个单元格,这两个附加属性是RowSpan和ColumnSpan.这两个属性使用元素将会占有的行数和列数进行设置.\n\n#### 分割窗口\n\n在WPF中,分隔条由GridSplitter类表示,它是Grid面板的功能之一.通过为Grid面板添加GridSplitter对象,用户就可以改变行和列的尺寸.\n\n大多数开发人员认为WPF中的GridSplitter类不是最直观的.理解如何使用GridSplitter类,从而得到所期望的效果需要一定的经验.下面列出几条指导原则：\n\n* GridSplitter对象必须放在Grid单元格中.可与已经存在的内容一并放到单元格中,这时需要调整边距设置,并将预留行或列的Height或Width属性的值设置为Auto.\n* GridSplitter对象总是改变整行或整列的尺寸(而非改变单个单元格的尺寸).为使GridSplitter对象的外观和行为保持一致,需要拉伸GridSplitter对象使其穿越整行或整列,而不是将其限制在单元格中.为此,可使用前面介绍过的RowSpan或ColumnSpan属性.\n* 最初,GridSplitter对象很小不易看见.为了使其更可用,需要哦为其设置最小尺寸.对于竖直分隔条,需要将VerticalAlignment属性设置为Stretch(使分隔条填满区域的整个高度),并将Width设置为固定值.对于水平分隔条,需要设置HorizontalAlignment属性来拉伸,并将Height属性设置为固定值.\n* GridSplitter对齐方式还决定了分隔条是水平的(用于改变行的尺寸)还是竖直的(用于改变列的尺寸).对于水平分隔条,需要将VerticalAlignment属性设置为Center(这也是默认值),以指明拖动分隔条改变上面行和下面行的尺寸.对于竖直分隔条,需要将HorizontalAlignment属性设置为Center,以改变分隔条两侧列的尺寸.\n\n#### 共享尺寸组\n\n共享尺寸组的目标是保持用户界面独立部分的一致性.例如,可能希望该表一列的尺寸以适应其内容,并改变另一列的尺寸使其与前面一列改变后的尺寸相匹配.共享尺寸组的真正有点是使独立的Grid控件具有相同的比例.\n\n通过Grid.IsSharedSizeScope=\"True\"启动共享尺寸组,在需要共享ColumnDefinition上设置相同的SharedSizeGroup,即可实现共享.\n\n#### UniformGrid面板\n\nUniformGrid面板不需要(甚至不支持)预先定义的列和行.相反,通过简单地设置Rows和Columns属性来设置其尺寸.每个单元格始终具有相同的大小,因为可用的空间被均分.最后,元素根据定义的顺序被放置到适当的单元格中.UniformGrid面板中没有Row和Column附加属性,也没有空白单元格.\n\n### Canvas面板\n\nCanvas面板只是在指定的位置放置其子元素,并且子元素具有所希望的精确尺寸.\n\n在Canvas面板中定位元素,需要设置Canvas.Left和Canvas.Top附加属性.Canvas.Left属性设置元素左边和Canvas面板左边之间的单位数.Canvas.Top属性设置子元素顶部和Canvas面板顶边之间的单位数.\n\n可使用Width和Height属性明确设置子元素的尺寸.如果没有设置Width和Height属性,元素会获取它所期望的尺寸——换句话说,它将变得足够大以适应其内容.\n\n#### Z顺序\n\n如果Canvas面板中有多个互相重叠的元素,可通过设置Canvas.ZIndex附加属性来控制他们的层叠方式.\n\n添加的所有元素通常都具有相同的ZIndex指——0.如果元素具有相同的ZIndex值,就按他们在Canvas.Children集合中的顺序进行显示,这个顺序依赖于元素在XAML标记中定义的顺序.在标记靠后位置声明的元素会显示在前面声明的元素的上面.\n\n### InkCanvas元素\n\nInkCanvas元素的主要目的用于接收手写笔输入.手写笔是一种在平板PC中使用的类似钢笔的输入设备,然而,InkCanvas元素同时也可使用鼠标进行工作,就像使用手写笔一样.因此,用户可使用鼠标在InkCanvas元素上绘制线条,或者选择以及操作InkCanvas中的元素.\n\nInkCanvas元素实际上包含两个子内容集合.一个是为人熟知的Children集合,它保存任意元素,就像Canvas面板一样.每个子元素可根据Top、Left、Bottom和Right属性进行定位.另一个是Strokes结合,它保存System.Windows.Ink.Stroke对象,该对象表示用户在InkCanvas元素上绘制的图形输入.用户绘制的每条直线或曲线都变成独立的Stroke对象.得益于这两个集合,可使用InkCanvas让用户使用存储在Strokes集合中的笔画(Stroke)为保存在Children集合中的内容添加注释.\n\n根据为InkCanvas.EditingMode属性设置的值,可以采用截然不同的方式使用InkCanvas元素,下表列出了所有选项:\n\n名称|说明\n:-|:-\nInk|InkCanvas元素允许用户绘制批注,这是默认模式.当用户用鼠标或手写笔绘图时,会绘制笔画.\nGestureOnly|InkCanvas元素不允许用户绘制笔画批注,但会关注预先定义的特定姿势(例如在某个方向拖动手写笔或涂画内容).能识别的姿势的完整列表由System.Windows.Ink.ApplicationGesture枚举给出.\nInkAndGesture|InkCanvas元素允许用户绘制笔画批注,也可以识别预先定义的姿势.\nEraseByStroke|用单击笔画时,InkCanvas元素会擦除笔画.如果用户使用手写笔,可使用手写笔的底端切换到该模(可使用只读的ActiveEditingMode属性确定当前编辑模式,也可通过改变EditingModeInverted属性来改变手写笔的底端使用的工作模式)\nEraseByPoint|当单击笔画时,InkCanvas元素会擦除笔画中呗单击的部分(笔画上的一个点)\nSelect|InkCanvas面板允许用户选择保存在Childeren集合中的元素.要选择一个元素,用户必须单击该元素或拖动\"套索\"选择该元素.一旦选择一个元素,就可以移动该元素、改变其尺寸或将其删除\nNone|InkCanvas元素忽略鼠标和手写笔输入\n　　\nInkCanvas元素会引发多种事件,当编辑模式改变时会引发ActiveEditingModeChanged事件,在GestureOnly或InkAndGesture模式下删除姿势时会引发Gesture事件,在Select模式下选择元素或改变元素时会引发SelectionChanging事件、SelectionChanged事件、SelectionMoving事件、SelectionMoved事件、SelectionResizing事件和SelectionResized事件.其中,名称以\"ing\"结尾的事件表示动作将要发生,但可以通过设置EventArgs对象的Cancel属性取消事件.\n\n### 理解依赖项属性\n\n#### 定义依赖项属性\n\n第一步是定义表示属性的对象,它是DependencyProperty类的实例.属性信息应该始终保持可用,甚至可能需要在多个类之间共享这些信息(在WPF元素中这是十分普遍的).因此,必须将DependencyProperty对象为与其相关联的类的静态字段.\n\n```cs\npublic class FrameworkElement:UIElement\n{\n    public static readonly DependencyProperty MaraginProperty;\n}\n```\n\n根据约定,定义依赖项属性的字段的名称是在普遍属性的末尾处加上单词\"Property\".根据这种命名方式,可从实际属性的名称中区分出依赖项属性的定义.字段的定义使用了readonly关键字,这意味着只能在FrameworkElement类的静态构造函数中对其进行设置.\n\n#### 注册依赖项属性\n\nWPF确保DependencyProperty对象不能被直接实例化,因为DependencyProperty类没有公有的构造函数.相反,只能使用静态的DependencyProperty.Register()方法创建DependencyProperty实例.WPF还确保在创建DependencyProperty对象后不能改变该对象,因为所有DependencyProperty成员都是只读的.它们的值必须作为Register()方法的参数来提供.\n\n```cs\nstatic FrameworkElement()\n{\n    FrameworkPropertyMetadata metadata = new FrameworkPropertyMetadata(new Thickness(), FrameworkPropertyMetadataOptions.AffectsMeasure);\n\n    MarginProperty = DependencyProperty.Register(\"Margin\", typeof(Thickness), typeof(FrameworkElement), metadata, new ValidateValueCallback(FrameworkElement.IsMarginValid));\n}\n```\n\n注册依赖项属性需要经历两个步骤:首先创建FrameworkPropertyMetadata对象,该对象指示希望通过依赖项属性使用什么服务(如支持数据库绑定、动画以及日志).接下来通过调用DependencyProperty.Register()静态方法注册属性.在这一步骤中,你负责提供以下几个要素：\n\n* 属性名(在该例中为Margin)\n* 属性使用的数据类型(在该例中为Thickness结构)\n* 拥有该属性的类型(在该例中为FrameworkElement类)\n* 一个具有附加属性设置的FrameworkPropertyMetadata对象,该要素是可选的.\n* 一个用于验证属性的回调函数,该要素是可选的.\n\nFrameworkPropertyMetadata类的所有属性\n\n名称|说明\n:-|:-\nAffectsArrange、AffectsMeasure、AffectsParentArrange和AffectsParentMeasure|如果为true,依赖项属性会影响在布局操作的测量过程和排列过程中如何放置相邻的元素或父元素.例如,Margin依赖项属性将AffectsMeasure属性设置为true,表面如果一个元素的边距发生变化,那么布局容器需要重新执行测量步骤以确定元素新的布局.\nAffectsRender|如果为true,依赖项属性会对元素的绘制方式造成一定的影响,要求重新绘制元素.\nBindsTwoWayByDefault|如果为true,默认情况下,依赖项属性将使用双向数据绑定而不是单向数据绑定.不过,当创建数据绑定时,可以明确指定所需的绑定行为.\nInherits|如果为true,就通过元素树传播该依赖项属性值,并且可以被嵌套的元素继承.例如,Font属性是可继承的依赖项属性.如果在更高层次的元素中为Font属性设置了值,那么该属性值就会被嵌套的元素继承(除非使用自己的字体设置明确地覆盖继承而来的值).\nIsAnimationProhibited|如果为true,就不能将依赖项属性用于动画.\nIsNotDataBindale|如果为true,就不能使用绑定表达式设置依赖项属性.\nJournal|如果为true,在基于页面的应用程序中,依赖项属性将会被保存到日志(浏览过的页面的历史记录)中.\nSubPropertiesDoNotAffectRender|如果为true,并且对象的某个子属性(属性的属性)发生了变化,WPF将不会重新渲染该对象.\nDafaultUpdateSourceTrigger|当该属性用于绑定表达式,该属性用于Binding.UpdateSourceTrigger属性设置默认值.UpdateSourceTrigger属性决定了数据绑定值在何时应用自身的变化.当创建绑定时,可以手动设置UpdateSourceTrigger属性.\nDefaultValue|该属性用于依赖项属性设置默认值.\nCoerceValueCallback|该属性提供了一个回调函数,用于验证依赖项属性之前尝试\"纠正\"属性值.\nPropertyChangedCallback|该属性提供了一个回调函数,当依赖项属性的值变化时调用该回调函数.\n\n#### 添加属性包装器\n\n创建依赖项属性的最后一个步骤就是使用传统的.NET属性封装WPF依赖项属性.但典型的属性过程是检索或设置某个私有字段的值,而WPF属性的属性过程是使用在DependencyObject基类中定义的GetValue()和SetValue()方法.\n\n```cs\npublic Thickness Margin\n{\n    get{ return (Thickness)GetValue(MarginProperty); }\n    set{ SetValue(MarginProperty, value); }\n}\n```\n\n删除本地值设置,并像从来没有设置过那样确定属性值.需要使用另外一个继承自DependencyObject类的方法:ClearValue().\n\n```cs\nmyElement.ClearValue(FrameworkElement.MarginProperty);\n```\n\n依赖项属性依赖于多个属性提供者,每个提供者都有各自的优先级.当从属性检索值时,WPF属性系统会通过一系列步骤获取最终值.首先通过考虑以下因素(按优先级从低到高的顺序排列)来决定基本值(base value):\n\n* 默认值(由FrameworkPropertyMetadata对象设置的值).\n* 继承而来的值(假设设置了FrameworkPropertyMetadata.Inherits标志,并为包含层次中的某个元素提供了值).\n* 来自主题样式的值.\n* 来自项目样式的值.\n* 本地值(使用代码或XAML直接为对象设置的值).\n\nWPF决定属性值得四步骤过程:\n\n1. 确定基本值.\n2. 如果属性是使用表达式设置的,就对表达式进行求值.当前,WPF支持两类表达式:数据绑定和资源.\n3. 如果属性是动画的目标,就应用动画.\n4. 运动CoerceValueCallback回调函数来修正属性值.\n\n#### 共享的依赖项属性\n\n尽管一些类具有不同的继承层次,但他们回共享同一依赖项属性.例如,TextBlock.FontFamily属性和Control.FontFamily属性指向同一个静态的依赖项属性,该属性实际上是在TextElement类中定义的TextElement.FontFamilyProperty依赖项属性.TextElement类的静态构造函数注册该函数,而TextBlock类和Control类的静态构造函数只是通过调用DependencyProperty.AddOwner()方法重用该属性.\n\n```cs\nTextBlock.FontFamilyProperty = TextElement.FontFamilyProperty.AddOwner(typeof(TextBlock));\n```\n\n可以使用相同的基础来创建自己的自定义类(假定在所继承的父类中还没有提供属性,否则直接重用即可）.还可以使用重载的AddOwner()方法来提供验证回调函数以及仅应用于依赖项属性用法的新FrameworkPropertyMetadata对象.\n\n#### 附加的依赖项属性\n\n加属性是一种依赖项属性,由WPF属性系统管理.不同之处在于附加属性被应用到的类并非定义附加属性的那个类.例如,Grid类定义了Row和Column附加属性,这两个属性被用于设置Grid面板包含的元素,以指明这些元素应被放到哪个单元格中.\n\n　为了定义附加属性,需要使用RegisterAttached()方法,而不是使用Register()方法.\n\n```cs\nFrameworkPropertyMetadata metadata=new FrameworkPropertyMetadata(0,new PropertyChangedCallback(Grid.OnCellAttachedPropertyChanged));\nGrid.RowProperty=DependencyProperty.RegisterAttached(\"Row\",typeof(int),typeof(Grid),metadata,new ValidateValueCallback(Grid.IsIntValueNotNegative));\n```\n\n当创建附加属性时,不必定义.NET属性封装器.这是因为附加属性可以被用于任何依赖对象.\n\n附加属性需要调用两个静态方法来设置和获取属性值,这两个方法使用了为人熟知的SetValue()和GetValue()方法(继承自DependencyObject类).这两个静态方法应当命名为SetPropertyName()和GetPropertyName().\n","source":"_posts/WPF基础学习-一.md","raw":"---\ntitle: WPF基础学习(一)\ndate: 2020-03-28 11:19:45\ncategories: .Net\ntags:\n - .Net\n - WPF\n---\n> 作者：Peter Luo 出处：https://www.cnblogs.com/Peter-Luo/\n\n### XAML基础\n\n#### WPF应用程序的顶级元素如下\n\n* Windo元素\n* Page元素(用于可导航的应用程序)\n* Application元素(用于定于应用程序资源和启动设置)\n\n#### 名称空间\n\n* http://schemas.microsoft.com/winfx/2006/xaml/presentation 是WPF核心名称空间.它包含了所有WPF类,包括用来构建用户界面的控件.如果没有使用名称空间前缀,那么它成为整个文档的默认名称空间.换句话说,除非另外指明,每个元素自动位于这个名称空间.\n\n* http://schemas.microsoft.com/winfx/2006/xaml 是XAML名称空间.它包含各种XAML使用特性,这些特性可影响文档的解释方式.该名称空间被映射为前缀x.这意味着可通过在元素名称之前放置名称空间前缀x来使用该名称空间(例如<x:ElementName>).\n<!--more-->\n#### 代码隐藏类\n\n可通过XAML构造用户界面,但为了使应用程序具有一定的功能,就需要用于连接包含应用程序代码的事件处理程序的方法.XAML通过使用如下所示的Class特性简化了这个问题：\n\n```cs\n    <Window x:Class=\"WpfApplication1.MainWindow\">\n```\n\n在XAML名称空间的Class特性之前放置了名称空间前缀x,意味着这是XAML语言中更通用的部分.实际上,Class特性告诉XAML解析器用指定的名称生成一个新类.该类继承自由XML元素命名的类.换句话说,该实例创建了一个名为MainWindow的新类,该类继承自Window基类.\n\n### XAML属性\n\n#### 标记扩展\n\n标记扩展使用{标记扩展类 参数}语法,如\n\n```cs\n<Button Background=\"{x:Static SystemColors.ActiveCaptionBrush}\"/>\n```\n\n所有标记扩展都由继承自System.Windows.MarkupExtension基类地类实现.MarkupExtension基类十分简单,提供了一个简单的ProvideValue()方法类获取所期望的数值.\n\n#### 附加属性\n\n附加属性始终使用包含两个部分的命名格式:定义类型.属性名.\n\n附加属性根本不是真正的属性.它们实际上被转换为方法调用.\n\n#### 特殊字符与空白\n\n特殊字符|实体字符\n:-|:-|\n<|&lt ;\n>|&gt ;\n&|&amp ;\n\"|&quot ;\n\n如果希望在文本中包含一系列空格.在这种情况下,需要为元素使用xml:space=\"preserve\"特性,\n\nxml:space特性是XML标准的一部分,是一个要么包括全部、要么什么都不包括的设置.一旦使用了该设置,元素内的所有空字符串都将被保留.\n\n### 使用其他名称空间中的类型\n\n为使用未在WPF名称空间中定义的类.需要将.NET名称空间映射到XML名称空间.XAML有一种特殊的语法可用于完成这一工作,该语法如下所示:\n\n```cs\n　　xmlns:Prefix=\"clr-namespace:Namespace;assembly=AssemblyName\"\n```\n\n　　通常,在XAML文档的根元素中,在紧随声明WPF和XAML名称空间的特性之后放置这个名称空间.还需要使用适当的信息填充三个斜体部分,这三部分的含义如下：\n\n* Prefix是希望在XAML标记中用于指示名称空间的XML前缀.例如,XAML语法使用x前缀.\n* Namespace是完全限定的.NET名称空间的名称.\n* AssemblyName是声明类型的程序集,没有.dll扩张名.这个程序集必须在项目中引用.如果希望使用项目程序集,可以忽略这一部分.\n\n### 加载和编译XAML\n\n可使用三种不同的编码方式来创建WPF应用程序：\n\n* 只使用代码.这是在Visual Studio中为Windows窗体应用程序使用的传统方法.它通过代码语句生成用户界面.\n* 使用代码和未经编译的标记(XAML).这种具体方式对于某些特殊情况是很有意义的,例如创建高度动态化的用户界面.这种方式在运行时使用System.Windows.Markup名称空间中的XamlReader类,从XAML文件中加载部分用户界面.\n* 使用代码和编译过的标记(BAML).对于WPF而言这是一种更好的方式,也是Visual Studio支持的一种方式.这种方式为每个窗口创建了一个XAML模板,这个XAML模板被编译为BAML,并嵌入到最终的程序集中.编译过的BAML在运行时被提取出来,用于重新生成用户界面\n\n### WPF的布局\n\n\"理想的\"WPF窗口需要遵循以下几条重要原则：\n\n* 不应显示设定元素(如控件)的尺寸.元素应当可以改变尺寸以适合它们的内容.例如,当添加更多的文本时按钮应当能够扩展.可通过设置最大和最小尺寸来限制可以接受的控件尺寸范围.\n* 不应使用屏幕坐标指定元素的位置.元素应当由它们的容器根据它们的尺寸、顺序以及(可选的)其他特定与具体布局容器的信息进行排列.如果需要在元素之间添加空白空间,可使用Margin属性.\n* 布局容器的子元素“共享”可用的空间.如果空间允许,布局容器会根据每个元素的内容尽可能为元素设置更合理得尺寸.它们还会向一个或多个子元素分配多余的空间.\n* 可嵌套的布局容器.典型的用户界面使用Grid面板作为开始,Grid面板是WPF中功能最强大的容器,Grid面板可包含其他布局容器,包含的这些容器以最小的分组排列元素,比如带有标题的文本框、列表框中的项、工具栏上的图标以及一列按钮等.\n\nPanel的公有属性\n\n名称|说明\n:-|:-\nBackgroup|该属性用于面板背景着色.如果想要接收鼠标事件,就必须将属性设置为非空值(如果想接收鼠标事件,又不希望显示固定颜色的背景,那么只需要将背景色设置为透明即可)\nChildren|该属性是在面板中存储的条目集合.这是第一级条目--换句话说,这些条目自身也可以包含更多的条目.\nIsItemsHost|该属性是一个布尔值,如果面板用于显示与ItemsControl控件关联的项(例如,TreeView控件中的节点或列表框中的列表项),该属性值为true.在大多数情况下,设置不需要知道列表控件使用后台面板来管理它所包含的条目的布局.但如果希望创建自定义的列表,以不同方式防止子元素(例如,以平布方式显示图像的ListBox控件),该细节就变得很重要.\n\n核心布局面板\n名称|说明\n:-|:-\nStackPanel|在水平或垂直的堆栈中放置元素.这个布局容器通常用于更大、更复杂窗口的一些小区域.\nWrapPanel|在一系列可换行的行中放置元素,在水平方向上,WrapPanel面板从左向右放置条目,然后在随后的行中放置元素,在垂直方向上,WrapPanel面板在自上而下的列中放置元素,并使用附件的列放置剩余的条目.\nDockPanel|根据容器上的整体边界调整元素\nGrid|根据不可见的表格在行和列中排列元素,这是最灵活、最常用的容器之一.\nUniformGrid|在不可见但是强制所有单元格具有相同尺寸的表中放置元素,这个布局容器不常用.\nCanvas|使用固定坐标绝对定位元素.这个布局与传统Windows窗体应用程序最相似,但没有提供锚定或停靠功能.因此,对于尺寸可变的窗体,该布局容器不是合适的选择.如果选择的话,需要另外做一些工作.\n\n### StackPanel面板进行布局\n\nStackPanel布局属性\n名称|说明\n:-|:-\nHorizontalAlignment|当水平方向上有额外的空间时,该属性决定了子元素在布局容器中如何定位.可选用Center、Left、Right或Stretch等属性值\nVerticalAlignment|当垂直方向上有额外的空间时,该属性决定了子元素在布局容器中如何定位.可选用Center、Top、Bottom或Stretch等属性值\nMargin|该属性用于在元素的周围添加一定的空间.Margin属性是System.Windows.Thickness结构的一个实例,该结构具有分别用于顶部、底部、左边和右边添加空间的独立组件.\nMinWidth和MinHeight|这两个属性用于设置元素的最小尺寸.如果一个元素对于其他布局容器来说太大,该元素将被剪裁以适合容器.\nMaxWidth和MaxHeight|这两个属性用于设置元素的最大尺寸.如果有更多可以使用的空间,那么在扩展子元素时依旧不会超出这一限制,即使将HorizontalAlignment和VerticalAlignment属性设置为Stretch也同样如此.\nWidth和Height|这两个属性用来显式地设置元素的尺寸.这一设置会重写为HorizontalAlignment和VerticalAlignment属性设置的Stretch值.但不能超出MinWidth、MinHeight、MaxWidth和MaxHeight属性设置的范围.\n\nBorder控件\nBorder类非常简单.它只能包含一段嵌套内容(通常是布局面板),并为其添加背景或在其周围添加边框.\n\nBorder控件属性\n名称|说明\n:-|:-\nBackground|使用Brush对象设置边框中所有内容后面的背景.可使用固定颜色背景,也可使用其他更特殊的背景.\nBorderBrush和BorderThickness|使用Brush对象设置位于Border对象边缘的边框的颜色,并设置边框的宽度.为显示边框,必须设置这两个属性\nCornerRadius|该属性可使边框具有雅致的圆角.CornerRadius的值越大,圆角效果就越明显.\nPadding|该属性在边框和内部的内容之间添加空间.\n\n### WrapPanel和DockPanel面板\n\nWrapPanel面板\n\nWrapPanel面板在可能的空间中,以一次一行或一列的方式布置控件.默认情况下,WrapPanel.Orientation的属性设置为Horizontal;控件从左向右进行排列,再在下一行中排列.但可将WrapPenel.Orientation的属性设置为Vertical,从而在多个列中放置元素.\n\nWrapPanel面板是唯一一个不能通过灵活使用Grid面板代替的面板.\n\nDockPanel面板\n\nDockPanel面板是更有趣的布局选项.它沿着一条外边缘来拉伸所包含的控件.理解该面板最简便的方式是,考虑一下位于许多Windows应用程序窗口顶部的工具栏,这些工具栏停靠到窗口顶部.与StackPanel面板类似,被停靠的元素选择它们的布局的一方面.\n\n通过Dock附加属性,可将该属性设置为Left、Right、Top或Bottom.放在DockPanel面板中的每个元素都会自动捕获该属性.\n\n### Grid面板\n\n需要两个步骤来创建基于Grid面板的布局.首先,选择希望使用的行和列的数量.然后,为每个包含的元素指定恰当的行和列,从而在合适的位置放置元素.Grid面板通过使用对象Grid.ColumnDefinitions和Grid.RowDefinitions集合来创建网格和行.\n\n#### 调整行和列\n\nGrid面板支持以下三种设置尺寸的方式：\n\n* 绝对设置尺寸方式.使用设备无关单位准确地设置尺寸.这是最无用的策略,因为这种策略不够灵活,难以适应内容大小和容器大小的改变,而且难以处理本地化.\n\n    ```cs\n    <ColumnDefinition Width=\"100\"></ColumnDefinition>\n    ````\n\n* 自动设置尺寸方式.每行和每列的尺寸刚好满足需要.这是最有用的尺寸设置方式.\n\n    ```cs\n    <ColumnDefinition Width=\"Auto\"></ColumnDefinition>\n    ````\n\n* 按比例设置尺寸方式.按比例将空间分割到一组行和列中.这是对所有行和列的标准设置.\n\n    ```cs\n    <ColumnDefinition Width=\"*\"></ColumnDefinition>\n    ```\n\n#### 布局舍入\n\n将布局容器的UseLayouyRounding属性设置为true,WPF会确保布局容器中的所有内容对齐到最近的像素边界,从而消除了所有模糊问题.\n\n#### 跨越行和列\n\n使用两个附加属性使元素跨越多个单元格,这两个附加属性是RowSpan和ColumnSpan.这两个属性使用元素将会占有的行数和列数进行设置.\n\n#### 分割窗口\n\n在WPF中,分隔条由GridSplitter类表示,它是Grid面板的功能之一.通过为Grid面板添加GridSplitter对象,用户就可以改变行和列的尺寸.\n\n大多数开发人员认为WPF中的GridSplitter类不是最直观的.理解如何使用GridSplitter类,从而得到所期望的效果需要一定的经验.下面列出几条指导原则：\n\n* GridSplitter对象必须放在Grid单元格中.可与已经存在的内容一并放到单元格中,这时需要调整边距设置,并将预留行或列的Height或Width属性的值设置为Auto.\n* GridSplitter对象总是改变整行或整列的尺寸(而非改变单个单元格的尺寸).为使GridSplitter对象的外观和行为保持一致,需要拉伸GridSplitter对象使其穿越整行或整列,而不是将其限制在单元格中.为此,可使用前面介绍过的RowSpan或ColumnSpan属性.\n* 最初,GridSplitter对象很小不易看见.为了使其更可用,需要哦为其设置最小尺寸.对于竖直分隔条,需要将VerticalAlignment属性设置为Stretch(使分隔条填满区域的整个高度),并将Width设置为固定值.对于水平分隔条,需要设置HorizontalAlignment属性来拉伸,并将Height属性设置为固定值.\n* GridSplitter对齐方式还决定了分隔条是水平的(用于改变行的尺寸)还是竖直的(用于改变列的尺寸).对于水平分隔条,需要将VerticalAlignment属性设置为Center(这也是默认值),以指明拖动分隔条改变上面行和下面行的尺寸.对于竖直分隔条,需要将HorizontalAlignment属性设置为Center,以改变分隔条两侧列的尺寸.\n\n#### 共享尺寸组\n\n共享尺寸组的目标是保持用户界面独立部分的一致性.例如,可能希望该表一列的尺寸以适应其内容,并改变另一列的尺寸使其与前面一列改变后的尺寸相匹配.共享尺寸组的真正有点是使独立的Grid控件具有相同的比例.\n\n通过Grid.IsSharedSizeScope=\"True\"启动共享尺寸组,在需要共享ColumnDefinition上设置相同的SharedSizeGroup,即可实现共享.\n\n#### UniformGrid面板\n\nUniformGrid面板不需要(甚至不支持)预先定义的列和行.相反,通过简单地设置Rows和Columns属性来设置其尺寸.每个单元格始终具有相同的大小,因为可用的空间被均分.最后,元素根据定义的顺序被放置到适当的单元格中.UniformGrid面板中没有Row和Column附加属性,也没有空白单元格.\n\n### Canvas面板\n\nCanvas面板只是在指定的位置放置其子元素,并且子元素具有所希望的精确尺寸.\n\n在Canvas面板中定位元素,需要设置Canvas.Left和Canvas.Top附加属性.Canvas.Left属性设置元素左边和Canvas面板左边之间的单位数.Canvas.Top属性设置子元素顶部和Canvas面板顶边之间的单位数.\n\n可使用Width和Height属性明确设置子元素的尺寸.如果没有设置Width和Height属性,元素会获取它所期望的尺寸——换句话说,它将变得足够大以适应其内容.\n\n#### Z顺序\n\n如果Canvas面板中有多个互相重叠的元素,可通过设置Canvas.ZIndex附加属性来控制他们的层叠方式.\n\n添加的所有元素通常都具有相同的ZIndex指——0.如果元素具有相同的ZIndex值,就按他们在Canvas.Children集合中的顺序进行显示,这个顺序依赖于元素在XAML标记中定义的顺序.在标记靠后位置声明的元素会显示在前面声明的元素的上面.\n\n### InkCanvas元素\n\nInkCanvas元素的主要目的用于接收手写笔输入.手写笔是一种在平板PC中使用的类似钢笔的输入设备,然而,InkCanvas元素同时也可使用鼠标进行工作,就像使用手写笔一样.因此,用户可使用鼠标在InkCanvas元素上绘制线条,或者选择以及操作InkCanvas中的元素.\n\nInkCanvas元素实际上包含两个子内容集合.一个是为人熟知的Children集合,它保存任意元素,就像Canvas面板一样.每个子元素可根据Top、Left、Bottom和Right属性进行定位.另一个是Strokes结合,它保存System.Windows.Ink.Stroke对象,该对象表示用户在InkCanvas元素上绘制的图形输入.用户绘制的每条直线或曲线都变成独立的Stroke对象.得益于这两个集合,可使用InkCanvas让用户使用存储在Strokes集合中的笔画(Stroke)为保存在Children集合中的内容添加注释.\n\n根据为InkCanvas.EditingMode属性设置的值,可以采用截然不同的方式使用InkCanvas元素,下表列出了所有选项:\n\n名称|说明\n:-|:-\nInk|InkCanvas元素允许用户绘制批注,这是默认模式.当用户用鼠标或手写笔绘图时,会绘制笔画.\nGestureOnly|InkCanvas元素不允许用户绘制笔画批注,但会关注预先定义的特定姿势(例如在某个方向拖动手写笔或涂画内容).能识别的姿势的完整列表由System.Windows.Ink.ApplicationGesture枚举给出.\nInkAndGesture|InkCanvas元素允许用户绘制笔画批注,也可以识别预先定义的姿势.\nEraseByStroke|用单击笔画时,InkCanvas元素会擦除笔画.如果用户使用手写笔,可使用手写笔的底端切换到该模(可使用只读的ActiveEditingMode属性确定当前编辑模式,也可通过改变EditingModeInverted属性来改变手写笔的底端使用的工作模式)\nEraseByPoint|当单击笔画时,InkCanvas元素会擦除笔画中呗单击的部分(笔画上的一个点)\nSelect|InkCanvas面板允许用户选择保存在Childeren集合中的元素.要选择一个元素,用户必须单击该元素或拖动\"套索\"选择该元素.一旦选择一个元素,就可以移动该元素、改变其尺寸或将其删除\nNone|InkCanvas元素忽略鼠标和手写笔输入\n　　\nInkCanvas元素会引发多种事件,当编辑模式改变时会引发ActiveEditingModeChanged事件,在GestureOnly或InkAndGesture模式下删除姿势时会引发Gesture事件,在Select模式下选择元素或改变元素时会引发SelectionChanging事件、SelectionChanged事件、SelectionMoving事件、SelectionMoved事件、SelectionResizing事件和SelectionResized事件.其中,名称以\"ing\"结尾的事件表示动作将要发生,但可以通过设置EventArgs对象的Cancel属性取消事件.\n\n### 理解依赖项属性\n\n#### 定义依赖项属性\n\n第一步是定义表示属性的对象,它是DependencyProperty类的实例.属性信息应该始终保持可用,甚至可能需要在多个类之间共享这些信息(在WPF元素中这是十分普遍的).因此,必须将DependencyProperty对象为与其相关联的类的静态字段.\n\n```cs\npublic class FrameworkElement:UIElement\n{\n    public static readonly DependencyProperty MaraginProperty;\n}\n```\n\n根据约定,定义依赖项属性的字段的名称是在普遍属性的末尾处加上单词\"Property\".根据这种命名方式,可从实际属性的名称中区分出依赖项属性的定义.字段的定义使用了readonly关键字,这意味着只能在FrameworkElement类的静态构造函数中对其进行设置.\n\n#### 注册依赖项属性\n\nWPF确保DependencyProperty对象不能被直接实例化,因为DependencyProperty类没有公有的构造函数.相反,只能使用静态的DependencyProperty.Register()方法创建DependencyProperty实例.WPF还确保在创建DependencyProperty对象后不能改变该对象,因为所有DependencyProperty成员都是只读的.它们的值必须作为Register()方法的参数来提供.\n\n```cs\nstatic FrameworkElement()\n{\n    FrameworkPropertyMetadata metadata = new FrameworkPropertyMetadata(new Thickness(), FrameworkPropertyMetadataOptions.AffectsMeasure);\n\n    MarginProperty = DependencyProperty.Register(\"Margin\", typeof(Thickness), typeof(FrameworkElement), metadata, new ValidateValueCallback(FrameworkElement.IsMarginValid));\n}\n```\n\n注册依赖项属性需要经历两个步骤:首先创建FrameworkPropertyMetadata对象,该对象指示希望通过依赖项属性使用什么服务(如支持数据库绑定、动画以及日志).接下来通过调用DependencyProperty.Register()静态方法注册属性.在这一步骤中,你负责提供以下几个要素：\n\n* 属性名(在该例中为Margin)\n* 属性使用的数据类型(在该例中为Thickness结构)\n* 拥有该属性的类型(在该例中为FrameworkElement类)\n* 一个具有附加属性设置的FrameworkPropertyMetadata对象,该要素是可选的.\n* 一个用于验证属性的回调函数,该要素是可选的.\n\nFrameworkPropertyMetadata类的所有属性\n\n名称|说明\n:-|:-\nAffectsArrange、AffectsMeasure、AffectsParentArrange和AffectsParentMeasure|如果为true,依赖项属性会影响在布局操作的测量过程和排列过程中如何放置相邻的元素或父元素.例如,Margin依赖项属性将AffectsMeasure属性设置为true,表面如果一个元素的边距发生变化,那么布局容器需要重新执行测量步骤以确定元素新的布局.\nAffectsRender|如果为true,依赖项属性会对元素的绘制方式造成一定的影响,要求重新绘制元素.\nBindsTwoWayByDefault|如果为true,默认情况下,依赖项属性将使用双向数据绑定而不是单向数据绑定.不过,当创建数据绑定时,可以明确指定所需的绑定行为.\nInherits|如果为true,就通过元素树传播该依赖项属性值,并且可以被嵌套的元素继承.例如,Font属性是可继承的依赖项属性.如果在更高层次的元素中为Font属性设置了值,那么该属性值就会被嵌套的元素继承(除非使用自己的字体设置明确地覆盖继承而来的值).\nIsAnimationProhibited|如果为true,就不能将依赖项属性用于动画.\nIsNotDataBindale|如果为true,就不能使用绑定表达式设置依赖项属性.\nJournal|如果为true,在基于页面的应用程序中,依赖项属性将会被保存到日志(浏览过的页面的历史记录)中.\nSubPropertiesDoNotAffectRender|如果为true,并且对象的某个子属性(属性的属性)发生了变化,WPF将不会重新渲染该对象.\nDafaultUpdateSourceTrigger|当该属性用于绑定表达式,该属性用于Binding.UpdateSourceTrigger属性设置默认值.UpdateSourceTrigger属性决定了数据绑定值在何时应用自身的变化.当创建绑定时,可以手动设置UpdateSourceTrigger属性.\nDefaultValue|该属性用于依赖项属性设置默认值.\nCoerceValueCallback|该属性提供了一个回调函数,用于验证依赖项属性之前尝试\"纠正\"属性值.\nPropertyChangedCallback|该属性提供了一个回调函数,当依赖项属性的值变化时调用该回调函数.\n\n#### 添加属性包装器\n\n创建依赖项属性的最后一个步骤就是使用传统的.NET属性封装WPF依赖项属性.但典型的属性过程是检索或设置某个私有字段的值,而WPF属性的属性过程是使用在DependencyObject基类中定义的GetValue()和SetValue()方法.\n\n```cs\npublic Thickness Margin\n{\n    get{ return (Thickness)GetValue(MarginProperty); }\n    set{ SetValue(MarginProperty, value); }\n}\n```\n\n删除本地值设置,并像从来没有设置过那样确定属性值.需要使用另外一个继承自DependencyObject类的方法:ClearValue().\n\n```cs\nmyElement.ClearValue(FrameworkElement.MarginProperty);\n```\n\n依赖项属性依赖于多个属性提供者,每个提供者都有各自的优先级.当从属性检索值时,WPF属性系统会通过一系列步骤获取最终值.首先通过考虑以下因素(按优先级从低到高的顺序排列)来决定基本值(base value):\n\n* 默认值(由FrameworkPropertyMetadata对象设置的值).\n* 继承而来的值(假设设置了FrameworkPropertyMetadata.Inherits标志,并为包含层次中的某个元素提供了值).\n* 来自主题样式的值.\n* 来自项目样式的值.\n* 本地值(使用代码或XAML直接为对象设置的值).\n\nWPF决定属性值得四步骤过程:\n\n1. 确定基本值.\n2. 如果属性是使用表达式设置的,就对表达式进行求值.当前,WPF支持两类表达式:数据绑定和资源.\n3. 如果属性是动画的目标,就应用动画.\n4. 运动CoerceValueCallback回调函数来修正属性值.\n\n#### 共享的依赖项属性\n\n尽管一些类具有不同的继承层次,但他们回共享同一依赖项属性.例如,TextBlock.FontFamily属性和Control.FontFamily属性指向同一个静态的依赖项属性,该属性实际上是在TextElement类中定义的TextElement.FontFamilyProperty依赖项属性.TextElement类的静态构造函数注册该函数,而TextBlock类和Control类的静态构造函数只是通过调用DependencyProperty.AddOwner()方法重用该属性.\n\n```cs\nTextBlock.FontFamilyProperty = TextElement.FontFamilyProperty.AddOwner(typeof(TextBlock));\n```\n\n可以使用相同的基础来创建自己的自定义类(假定在所继承的父类中还没有提供属性,否则直接重用即可）.还可以使用重载的AddOwner()方法来提供验证回调函数以及仅应用于依赖项属性用法的新FrameworkPropertyMetadata对象.\n\n#### 附加的依赖项属性\n\n加属性是一种依赖项属性,由WPF属性系统管理.不同之处在于附加属性被应用到的类并非定义附加属性的那个类.例如,Grid类定义了Row和Column附加属性,这两个属性被用于设置Grid面板包含的元素,以指明这些元素应被放到哪个单元格中.\n\n　为了定义附加属性,需要使用RegisterAttached()方法,而不是使用Register()方法.\n\n```cs\nFrameworkPropertyMetadata metadata=new FrameworkPropertyMetadata(0,new PropertyChangedCallback(Grid.OnCellAttachedPropertyChanged));\nGrid.RowProperty=DependencyProperty.RegisterAttached(\"Row\",typeof(int),typeof(Grid),metadata,new ValidateValueCallback(Grid.IsIntValueNotNegative));\n```\n\n当创建附加属性时,不必定义.NET属性封装器.这是因为附加属性可以被用于任何依赖对象.\n\n附加属性需要调用两个静态方法来设置和获取属性值,这两个方法使用了为人熟知的SetValue()和GetValue()方法(继承自DependencyObject类).这两个静态方法应当命名为SetPropertyName()和GetPropertyName().\n","slug":"WPF基础学习-一","published":1,"updated":"2021-03-30T03:24:16.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0f0040vcua715u04h0","content":"<blockquote>\n<p>作者：Peter Luo 出处：<a href=\"https://www.cnblogs.com/Peter-Luo/\">https://www.cnblogs.com/Peter-Luo/</a></p>\n</blockquote>\n<h3 id=\"XAML基础\"><a href=\"#XAML基础\" class=\"headerlink\" title=\"XAML基础\"></a>XAML基础</h3><h4 id=\"WPF应用程序的顶级元素如下\"><a href=\"#WPF应用程序的顶级元素如下\" class=\"headerlink\" title=\"WPF应用程序的顶级元素如下\"></a>WPF应用程序的顶级元素如下</h4><ul>\n<li>Windo元素</li>\n<li>Page元素(用于可导航的应用程序)</li>\n<li>Application元素(用于定于应用程序资源和启动设置)</li>\n</ul>\n<h4 id=\"名称空间\"><a href=\"#名称空间\" class=\"headerlink\" title=\"名称空间\"></a>名称空间</h4><ul>\n<li><p><a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a> 是WPF核心名称空间.它包含了所有WPF类,包括用来构建用户界面的控件.如果没有使用名称空间前缀,那么它成为整个文档的默认名称空间.换句话说,除非另外指明,每个元素自动位于这个名称空间.</p>\n</li>\n<li><p><a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a> 是XAML名称空间.它包含各种XAML使用特性,这些特性可影响文档的解释方式.该名称空间被映射为前缀x.这意味着可通过在元素名称之前放置名称空间前缀x来使用该名称空间(例如&lt;x:ElementName&gt;).</p>\n<span id=\"more\"></span>\n<h4 id=\"代码隐藏类\"><a href=\"#代码隐藏类\" class=\"headerlink\" title=\"代码隐藏类\"></a>代码隐藏类</h4></li>\n</ul>\n<p>可通过XAML构造用户界面,但为了使应用程序具有一定的功能,就需要用于连接包含应用程序代码的事件处理程序的方法.XAML通过使用如下所示的Class特性简化了这个问题：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Window x:Class=<span class=\"string\">&quot;WpfApplication1.MainWindow&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在XAML名称空间的Class特性之前放置了名称空间前缀x,意味着这是XAML语言中更通用的部分.实际上,Class特性告诉XAML解析器用指定的名称生成一个新类.该类继承自由XML元素命名的类.换句话说,该实例创建了一个名为MainWindow的新类,该类继承自Window基类.</p>\n<h3 id=\"XAML属性\"><a href=\"#XAML属性\" class=\"headerlink\" title=\"XAML属性\"></a>XAML属性</h3><h4 id=\"标记扩展\"><a href=\"#标记扩展\" class=\"headerlink\" title=\"标记扩展\"></a>标记扩展</h4><p>标记扩展使用{标记扩展类 参数}语法,如</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button Background=<span class=\"string\">&quot;&#123;x:Static SystemColors.ActiveCaptionBrush&#125;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>所有标记扩展都由继承自System.Windows.MarkupExtension基类地类实现.MarkupExtension基类十分简单,提供了一个简单的ProvideValue()方法类获取所期望的数值.</p>\n<h4 id=\"附加属性\"><a href=\"#附加属性\" class=\"headerlink\" title=\"附加属性\"></a>附加属性</h4><p>附加属性始终使用包含两个部分的命名格式:定义类型.属性名.</p>\n<p>附加属性根本不是真正的属性.它们实际上被转换为方法调用.</p>\n<h4 id=\"特殊字符与空白\"><a href=\"#特殊字符与空白\" class=\"headerlink\" title=\"特殊字符与空白\"></a>特殊字符与空白</h4><table>\n<thead>\n<tr>\n<th align=\"left\">特殊字符</th>\n<th align=\"left\">实体字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">&amp;lt ;</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>|&amp;gt ;<br>&amp;|&amp;amp ;<br>“|&amp;quot ;</p>\n</blockquote>\n<p>如果希望在文本中包含一系列空格.在这种情况下,需要为元素使用xml:space=”preserve”特性,</p>\n<p>xml:space特性是XML标准的一部分,是一个要么包括全部、要么什么都不包括的设置.一旦使用了该设置,元素内的所有空字符串都将被保留.</p>\n<h3 id=\"使用其他名称空间中的类型\"><a href=\"#使用其他名称空间中的类型\" class=\"headerlink\" title=\"使用其他名称空间中的类型\"></a>使用其他名称空间中的类型</h3><p>为使用未在WPF名称空间中定义的类.需要将.NET名称空间映射到XML名称空间.XAML有一种特殊的语法可用于完成这一工作,该语法如下所示:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　xmlns:Prefix=<span class=\"string\">&quot;clr-namespace:Namespace;assembly=AssemblyName&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>　　通常,在XAML文档的根元素中,在紧随声明WPF和XAML名称空间的特性之后放置这个名称空间.还需要使用适当的信息填充三个斜体部分,这三部分的含义如下：</p>\n<ul>\n<li>Prefix是希望在XAML标记中用于指示名称空间的XML前缀.例如,XAML语法使用x前缀.</li>\n<li>Namespace是完全限定的.NET名称空间的名称.</li>\n<li>AssemblyName是声明类型的程序集,没有.dll扩张名.这个程序集必须在项目中引用.如果希望使用项目程序集,可以忽略这一部分.</li>\n</ul>\n<h3 id=\"加载和编译XAML\"><a href=\"#加载和编译XAML\" class=\"headerlink\" title=\"加载和编译XAML\"></a>加载和编译XAML</h3><p>可使用三种不同的编码方式来创建WPF应用程序：</p>\n<ul>\n<li>只使用代码.这是在Visual Studio中为Windows窗体应用程序使用的传统方法.它通过代码语句生成用户界面.</li>\n<li>使用代码和未经编译的标记(XAML).这种具体方式对于某些特殊情况是很有意义的,例如创建高度动态化的用户界面.这种方式在运行时使用System.Windows.Markup名称空间中的XamlReader类,从XAML文件中加载部分用户界面.</li>\n<li>使用代码和编译过的标记(BAML).对于WPF而言这是一种更好的方式,也是Visual Studio支持的一种方式.这种方式为每个窗口创建了一个XAML模板,这个XAML模板被编译为BAML,并嵌入到最终的程序集中.编译过的BAML在运行时被提取出来,用于重新生成用户界面</li>\n</ul>\n<h3 id=\"WPF的布局\"><a href=\"#WPF的布局\" class=\"headerlink\" title=\"WPF的布局\"></a>WPF的布局</h3><p>“理想的”WPF窗口需要遵循以下几条重要原则：</p>\n<ul>\n<li>不应显示设定元素(如控件)的尺寸.元素应当可以改变尺寸以适合它们的内容.例如,当添加更多的文本时按钮应当能够扩展.可通过设置最大和最小尺寸来限制可以接受的控件尺寸范围.</li>\n<li>不应使用屏幕坐标指定元素的位置.元素应当由它们的容器根据它们的尺寸、顺序以及(可选的)其他特定与具体布局容器的信息进行排列.如果需要在元素之间添加空白空间,可使用Margin属性.</li>\n<li>布局容器的子元素“共享”可用的空间.如果空间允许,布局容器会根据每个元素的内容尽可能为元素设置更合理得尺寸.它们还会向一个或多个子元素分配多余的空间.</li>\n<li>可嵌套的布局容器.典型的用户界面使用Grid面板作为开始,Grid面板是WPF中功能最强大的容器,Grid面板可包含其他布局容器,包含的这些容器以最小的分组排列元素,比如带有标题的文本框、列表框中的项、工具栏上的图标以及一列按钮等.</li>\n</ul>\n<p>Panel的公有属性</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Backgroup</td>\n<td align=\"left\">该属性用于面板背景着色.如果想要接收鼠标事件,就必须将属性设置为非空值(如果想接收鼠标事件,又不希望显示固定颜色的背景,那么只需要将背景色设置为透明即可)</td>\n</tr>\n<tr>\n<td align=\"left\">Children</td>\n<td align=\"left\">该属性是在面板中存储的条目集合.这是第一级条目–换句话说,这些条目自身也可以包含更多的条目.</td>\n</tr>\n<tr>\n<td align=\"left\">IsItemsHost</td>\n<td align=\"left\">该属性是一个布尔值,如果面板用于显示与ItemsControl控件关联的项(例如,TreeView控件中的节点或列表框中的列表项),该属性值为true.在大多数情况下,设置不需要知道列表控件使用后台面板来管理它所包含的条目的布局.但如果希望创建自定义的列表,以不同方式防止子元素(例如,以平布方式显示图像的ListBox控件),该细节就变得很重要.</td>\n</tr>\n</tbody></table>\n<p>核心布局面板<br>名称|说明<br>:-|:-<br>StackPanel|在水平或垂直的堆栈中放置元素.这个布局容器通常用于更大、更复杂窗口的一些小区域.<br>WrapPanel|在一系列可换行的行中放置元素,在水平方向上,WrapPanel面板从左向右放置条目,然后在随后的行中放置元素,在垂直方向上,WrapPanel面板在自上而下的列中放置元素,并使用附件的列放置剩余的条目.<br>DockPanel|根据容器上的整体边界调整元素<br>Grid|根据不可见的表格在行和列中排列元素,这是最灵活、最常用的容器之一.<br>UniformGrid|在不可见但是强制所有单元格具有相同尺寸的表中放置元素,这个布局容器不常用.<br>Canvas|使用固定坐标绝对定位元素.这个布局与传统Windows窗体应用程序最相似,但没有提供锚定或停靠功能.因此,对于尺寸可变的窗体,该布局容器不是合适的选择.如果选择的话,需要另外做一些工作.</p>\n<h3 id=\"StackPanel面板进行布局\"><a href=\"#StackPanel面板进行布局\" class=\"headerlink\" title=\"StackPanel面板进行布局\"></a>StackPanel面板进行布局</h3><p>StackPanel布局属性<br>名称|说明<br>:-|:-<br>HorizontalAlignment|当水平方向上有额外的空间时,该属性决定了子元素在布局容器中如何定位.可选用Center、Left、Right或Stretch等属性值<br>VerticalAlignment|当垂直方向上有额外的空间时,该属性决定了子元素在布局容器中如何定位.可选用Center、Top、Bottom或Stretch等属性值<br>Margin|该属性用于在元素的周围添加一定的空间.Margin属性是System.Windows.Thickness结构的一个实例,该结构具有分别用于顶部、底部、左边和右边添加空间的独立组件.<br>MinWidth和MinHeight|这两个属性用于设置元素的最小尺寸.如果一个元素对于其他布局容器来说太大,该元素将被剪裁以适合容器.<br>MaxWidth和MaxHeight|这两个属性用于设置元素的最大尺寸.如果有更多可以使用的空间,那么在扩展子元素时依旧不会超出这一限制,即使将HorizontalAlignment和VerticalAlignment属性设置为Stretch也同样如此.<br>Width和Height|这两个属性用来显式地设置元素的尺寸.这一设置会重写为HorizontalAlignment和VerticalAlignment属性设置的Stretch值.但不能超出MinWidth、MinHeight、MaxWidth和MaxHeight属性设置的范围.</p>\n<p>Border控件<br>Border类非常简单.它只能包含一段嵌套内容(通常是布局面板),并为其添加背景或在其周围添加边框.</p>\n<p>Border控件属性<br>名称|说明<br>:-|:-<br>Background|使用Brush对象设置边框中所有内容后面的背景.可使用固定颜色背景,也可使用其他更特殊的背景.<br>BorderBrush和BorderThickness|使用Brush对象设置位于Border对象边缘的边框的颜色,并设置边框的宽度.为显示边框,必须设置这两个属性<br>CornerRadius|该属性可使边框具有雅致的圆角.CornerRadius的值越大,圆角效果就越明显.<br>Padding|该属性在边框和内部的内容之间添加空间.</p>\n<h3 id=\"WrapPanel和DockPanel面板\"><a href=\"#WrapPanel和DockPanel面板\" class=\"headerlink\" title=\"WrapPanel和DockPanel面板\"></a>WrapPanel和DockPanel面板</h3><p>WrapPanel面板</p>\n<p>WrapPanel面板在可能的空间中,以一次一行或一列的方式布置控件.默认情况下,WrapPanel.Orientation的属性设置为Horizontal;控件从左向右进行排列,再在下一行中排列.但可将WrapPenel.Orientation的属性设置为Vertical,从而在多个列中放置元素.</p>\n<p>WrapPanel面板是唯一一个不能通过灵活使用Grid面板代替的面板.</p>\n<p>DockPanel面板</p>\n<p>DockPanel面板是更有趣的布局选项.它沿着一条外边缘来拉伸所包含的控件.理解该面板最简便的方式是,考虑一下位于许多Windows应用程序窗口顶部的工具栏,这些工具栏停靠到窗口顶部.与StackPanel面板类似,被停靠的元素选择它们的布局的一方面.</p>\n<p>通过Dock附加属性,可将该属性设置为Left、Right、Top或Bottom.放在DockPanel面板中的每个元素都会自动捕获该属性.</p>\n<h3 id=\"Grid面板\"><a href=\"#Grid面板\" class=\"headerlink\" title=\"Grid面板\"></a>Grid面板</h3><p>需要两个步骤来创建基于Grid面板的布局.首先,选择希望使用的行和列的数量.然后,为每个包含的元素指定恰当的行和列,从而在合适的位置放置元素.Grid面板通过使用对象Grid.ColumnDefinitions和Grid.RowDefinitions集合来创建网格和行.</p>\n<h4 id=\"调整行和列\"><a href=\"#调整行和列\" class=\"headerlink\" title=\"调整行和列\"></a>调整行和列</h4><p>Grid面板支持以下三种设置尺寸的方式：</p>\n<ul>\n<li><p>绝对设置尺寸方式.使用设备无关单位准确地设置尺寸.这是最无用的策略,因为这种策略不够灵活,难以适应内容大小和容器大小的改变,而且难以处理本地化.</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;ColumnDefinition Width=<span class=\"string\">&quot;100&quot;</span>&gt;&lt;/ColumnDefinition&gt;</span><br><span class=\"line\">    ````</span><br><span class=\"line\"></span><br><span class=\"line\">* 自动设置尺寸方式.每行和每列的尺寸刚好满足需要.这是最有用的尺寸设置方式.</span><br><span class=\"line\"></span><br><span class=\"line\">    ```cs</span><br><span class=\"line\">    &lt;ColumnDefinition Width=<span class=\"string\">&quot;Auto&quot;</span>&gt;&lt;/ColumnDefinition&gt;</span><br><span class=\"line\">    ````</span><br><span class=\"line\"></span><br><span class=\"line\">* 按比例设置尺寸方式.按比例将空间分割到一组行和列中.这是对所有行和列的标准设置.</span><br><span class=\"line\"></span><br><span class=\"line\">    ```cs</span><br><span class=\"line\">    &lt;ColumnDefinition Width=<span class=\"string\">&quot;*&quot;</span>&gt;&lt;/ColumnDefinition&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"布局舍入\"><a href=\"#布局舍入\" class=\"headerlink\" title=\"布局舍入\"></a>布局舍入</h4><p>将布局容器的UseLayouyRounding属性设置为true,WPF会确保布局容器中的所有内容对齐到最近的像素边界,从而消除了所有模糊问题.</p>\n<h4 id=\"跨越行和列\"><a href=\"#跨越行和列\" class=\"headerlink\" title=\"跨越行和列\"></a>跨越行和列</h4><p>使用两个附加属性使元素跨越多个单元格,这两个附加属性是RowSpan和ColumnSpan.这两个属性使用元素将会占有的行数和列数进行设置.</p>\n<h4 id=\"分割窗口\"><a href=\"#分割窗口\" class=\"headerlink\" title=\"分割窗口\"></a>分割窗口</h4><p>在WPF中,分隔条由GridSplitter类表示,它是Grid面板的功能之一.通过为Grid面板添加GridSplitter对象,用户就可以改变行和列的尺寸.</p>\n<p>大多数开发人员认为WPF中的GridSplitter类不是最直观的.理解如何使用GridSplitter类,从而得到所期望的效果需要一定的经验.下面列出几条指导原则：</p>\n<ul>\n<li>GridSplitter对象必须放在Grid单元格中.可与已经存在的内容一并放到单元格中,这时需要调整边距设置,并将预留行或列的Height或Width属性的值设置为Auto.</li>\n<li>GridSplitter对象总是改变整行或整列的尺寸(而非改变单个单元格的尺寸).为使GridSplitter对象的外观和行为保持一致,需要拉伸GridSplitter对象使其穿越整行或整列,而不是将其限制在单元格中.为此,可使用前面介绍过的RowSpan或ColumnSpan属性.</li>\n<li>最初,GridSplitter对象很小不易看见.为了使其更可用,需要哦为其设置最小尺寸.对于竖直分隔条,需要将VerticalAlignment属性设置为Stretch(使分隔条填满区域的整个高度),并将Width设置为固定值.对于水平分隔条,需要设置HorizontalAlignment属性来拉伸,并将Height属性设置为固定值.</li>\n<li>GridSplitter对齐方式还决定了分隔条是水平的(用于改变行的尺寸)还是竖直的(用于改变列的尺寸).对于水平分隔条,需要将VerticalAlignment属性设置为Center(这也是默认值),以指明拖动分隔条改变上面行和下面行的尺寸.对于竖直分隔条,需要将HorizontalAlignment属性设置为Center,以改变分隔条两侧列的尺寸.</li>\n</ul>\n<h4 id=\"共享尺寸组\"><a href=\"#共享尺寸组\" class=\"headerlink\" title=\"共享尺寸组\"></a>共享尺寸组</h4><p>共享尺寸组的目标是保持用户界面独立部分的一致性.例如,可能希望该表一列的尺寸以适应其内容,并改变另一列的尺寸使其与前面一列改变后的尺寸相匹配.共享尺寸组的真正有点是使独立的Grid控件具有相同的比例.</p>\n<p>通过Grid.IsSharedSizeScope=”True”启动共享尺寸组,在需要共享ColumnDefinition上设置相同的SharedSizeGroup,即可实现共享.</p>\n<h4 id=\"UniformGrid面板\"><a href=\"#UniformGrid面板\" class=\"headerlink\" title=\"UniformGrid面板\"></a>UniformGrid面板</h4><p>UniformGrid面板不需要(甚至不支持)预先定义的列和行.相反,通过简单地设置Rows和Columns属性来设置其尺寸.每个单元格始终具有相同的大小,因为可用的空间被均分.最后,元素根据定义的顺序被放置到适当的单元格中.UniformGrid面板中没有Row和Column附加属性,也没有空白单元格.</p>\n<h3 id=\"Canvas面板\"><a href=\"#Canvas面板\" class=\"headerlink\" title=\"Canvas面板\"></a>Canvas面板</h3><p>Canvas面板只是在指定的位置放置其子元素,并且子元素具有所希望的精确尺寸.</p>\n<p>在Canvas面板中定位元素,需要设置Canvas.Left和Canvas.Top附加属性.Canvas.Left属性设置元素左边和Canvas面板左边之间的单位数.Canvas.Top属性设置子元素顶部和Canvas面板顶边之间的单位数.</p>\n<p>可使用Width和Height属性明确设置子元素的尺寸.如果没有设置Width和Height属性,元素会获取它所期望的尺寸——换句话说,它将变得足够大以适应其内容.</p>\n<h4 id=\"Z顺序\"><a href=\"#Z顺序\" class=\"headerlink\" title=\"Z顺序\"></a>Z顺序</h4><p>如果Canvas面板中有多个互相重叠的元素,可通过设置Canvas.ZIndex附加属性来控制他们的层叠方式.</p>\n<p>添加的所有元素通常都具有相同的ZIndex指——0.如果元素具有相同的ZIndex值,就按他们在Canvas.Children集合中的顺序进行显示,这个顺序依赖于元素在XAML标记中定义的顺序.在标记靠后位置声明的元素会显示在前面声明的元素的上面.</p>\n<h3 id=\"InkCanvas元素\"><a href=\"#InkCanvas元素\" class=\"headerlink\" title=\"InkCanvas元素\"></a>InkCanvas元素</h3><p>InkCanvas元素的主要目的用于接收手写笔输入.手写笔是一种在平板PC中使用的类似钢笔的输入设备,然而,InkCanvas元素同时也可使用鼠标进行工作,就像使用手写笔一样.因此,用户可使用鼠标在InkCanvas元素上绘制线条,或者选择以及操作InkCanvas中的元素.</p>\n<p>InkCanvas元素实际上包含两个子内容集合.一个是为人熟知的Children集合,它保存任意元素,就像Canvas面板一样.每个子元素可根据Top、Left、Bottom和Right属性进行定位.另一个是Strokes结合,它保存System.Windows.Ink.Stroke对象,该对象表示用户在InkCanvas元素上绘制的图形输入.用户绘制的每条直线或曲线都变成独立的Stroke对象.得益于这两个集合,可使用InkCanvas让用户使用存储在Strokes集合中的笔画(Stroke)为保存在Children集合中的内容添加注释.</p>\n<p>根据为InkCanvas.EditingMode属性设置的值,可以采用截然不同的方式使用InkCanvas元素,下表列出了所有选项:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Ink</td>\n<td align=\"left\">InkCanvas元素允许用户绘制批注,这是默认模式.当用户用鼠标或手写笔绘图时,会绘制笔画.</td>\n</tr>\n<tr>\n<td align=\"left\">GestureOnly</td>\n<td align=\"left\">InkCanvas元素不允许用户绘制笔画批注,但会关注预先定义的特定姿势(例如在某个方向拖动手写笔或涂画内容).能识别的姿势的完整列表由System.Windows.Ink.ApplicationGesture枚举给出.</td>\n</tr>\n<tr>\n<td align=\"left\">InkAndGesture</td>\n<td align=\"left\">InkCanvas元素允许用户绘制笔画批注,也可以识别预先定义的姿势.</td>\n</tr>\n<tr>\n<td align=\"left\">EraseByStroke</td>\n<td align=\"left\">用单击笔画时,InkCanvas元素会擦除笔画.如果用户使用手写笔,可使用手写笔的底端切换到该模(可使用只读的ActiveEditingMode属性确定当前编辑模式,也可通过改变EditingModeInverted属性来改变手写笔的底端使用的工作模式)</td>\n</tr>\n<tr>\n<td align=\"left\">EraseByPoint</td>\n<td align=\"left\">当单击笔画时,InkCanvas元素会擦除笔画中呗单击的部分(笔画上的一个点)</td>\n</tr>\n<tr>\n<td align=\"left\">Select</td>\n<td align=\"left\">InkCanvas面板允许用户选择保存在Childeren集合中的元素.要选择一个元素,用户必须单击该元素或拖动”套索”选择该元素.一旦选择一个元素,就可以移动该元素、改变其尺寸或将其删除</td>\n</tr>\n<tr>\n<td align=\"left\">None</td>\n<td align=\"left\">InkCanvas元素忽略鼠标和手写笔输入</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">InkCanvas元素会引发多种事件,当编辑模式改变时会引发ActiveEditingModeChanged事件,在GestureOnly或InkAndGesture模式下删除姿势时会引发Gesture事件,在Select模式下选择元素或改变元素时会引发SelectionChanging事件、SelectionChanged事件、SelectionMoving事件、SelectionMoved事件、SelectionResizing事件和SelectionResized事件.其中,名称以”ing”结尾的事件表示动作将要发生,但可以通过设置EventArgs对象的Cancel属性取消事件.</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"理解依赖项属性\"><a href=\"#理解依赖项属性\" class=\"headerlink\" title=\"理解依赖项属性\"></a>理解依赖项属性</h3><h4 id=\"定义依赖项属性\"><a href=\"#定义依赖项属性\" class=\"headerlink\" title=\"定义依赖项属性\"></a>定义依赖项属性</h4><p>第一步是定义表示属性的对象,它是DependencyProperty类的实例.属性信息应该始终保持可用,甚至可能需要在多个类之间共享这些信息(在WPF元素中这是十分普遍的).因此,必须将DependencyProperty对象为与其相关联的类的静态字段.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FrameworkElement</span>:<span class=\"title\">UIElement</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> DependencyProperty MaraginProperty;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据约定,定义依赖项属性的字段的名称是在普遍属性的末尾处加上单词”Property”.根据这种命名方式,可从实际属性的名称中区分出依赖项属性的定义.字段的定义使用了readonly关键字,这意味着只能在FrameworkElement类的静态构造函数中对其进行设置.</p>\n<h4 id=\"注册依赖项属性\"><a href=\"#注册依赖项属性\" class=\"headerlink\" title=\"注册依赖项属性\"></a>注册依赖项属性</h4><p>WPF确保DependencyProperty对象不能被直接实例化,因为DependencyProperty类没有公有的构造函数.相反,只能使用静态的DependencyProperty.Register()方法创建DependencyProperty实例.WPF还确保在创建DependencyProperty对象后不能改变该对象,因为所有DependencyProperty成员都是只读的.它们的值必须作为Register()方法的参数来提供.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">FrameworkElement</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FrameworkPropertyMetadata metadata = <span class=\"keyword\">new</span> FrameworkPropertyMetadata(<span class=\"keyword\">new</span> Thickness(), FrameworkPropertyMetadataOptions.AffectsMeasure);</span><br><span class=\"line\"></span><br><span class=\"line\">    MarginProperty = DependencyProperty.Register(<span class=\"string\">&quot;Margin&quot;</span>, <span class=\"keyword\">typeof</span>(Thickness), <span class=\"keyword\">typeof</span>(FrameworkElement), metadata, <span class=\"keyword\">new</span> ValidateValueCallback(FrameworkElement.IsMarginValid));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册依赖项属性需要经历两个步骤:首先创建FrameworkPropertyMetadata对象,该对象指示希望通过依赖项属性使用什么服务(如支持数据库绑定、动画以及日志).接下来通过调用DependencyProperty.Register()静态方法注册属性.在这一步骤中,你负责提供以下几个要素：</p>\n<ul>\n<li>属性名(在该例中为Margin)</li>\n<li>属性使用的数据类型(在该例中为Thickness结构)</li>\n<li>拥有该属性的类型(在该例中为FrameworkElement类)</li>\n<li>一个具有附加属性设置的FrameworkPropertyMetadata对象,该要素是可选的.</li>\n<li>一个用于验证属性的回调函数,该要素是可选的.</li>\n</ul>\n<p>FrameworkPropertyMetadata类的所有属性</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">AffectsArrange、AffectsMeasure、AffectsParentArrange和AffectsParentMeasure</td>\n<td align=\"left\">如果为true,依赖项属性会影响在布局操作的测量过程和排列过程中如何放置相邻的元素或父元素.例如,Margin依赖项属性将AffectsMeasure属性设置为true,表面如果一个元素的边距发生变化,那么布局容器需要重新执行测量步骤以确定元素新的布局.</td>\n</tr>\n<tr>\n<td align=\"left\">AffectsRender</td>\n<td align=\"left\">如果为true,依赖项属性会对元素的绘制方式造成一定的影响,要求重新绘制元素.</td>\n</tr>\n<tr>\n<td align=\"left\">BindsTwoWayByDefault</td>\n<td align=\"left\">如果为true,默认情况下,依赖项属性将使用双向数据绑定而不是单向数据绑定.不过,当创建数据绑定时,可以明确指定所需的绑定行为.</td>\n</tr>\n<tr>\n<td align=\"left\">Inherits</td>\n<td align=\"left\">如果为true,就通过元素树传播该依赖项属性值,并且可以被嵌套的元素继承.例如,Font属性是可继承的依赖项属性.如果在更高层次的元素中为Font属性设置了值,那么该属性值就会被嵌套的元素继承(除非使用自己的字体设置明确地覆盖继承而来的值).</td>\n</tr>\n<tr>\n<td align=\"left\">IsAnimationProhibited</td>\n<td align=\"left\">如果为true,就不能将依赖项属性用于动画.</td>\n</tr>\n<tr>\n<td align=\"left\">IsNotDataBindale</td>\n<td align=\"left\">如果为true,就不能使用绑定表达式设置依赖项属性.</td>\n</tr>\n<tr>\n<td align=\"left\">Journal</td>\n<td align=\"left\">如果为true,在基于页面的应用程序中,依赖项属性将会被保存到日志(浏览过的页面的历史记录)中.</td>\n</tr>\n<tr>\n<td align=\"left\">SubPropertiesDoNotAffectRender</td>\n<td align=\"left\">如果为true,并且对象的某个子属性(属性的属性)发生了变化,WPF将不会重新渲染该对象.</td>\n</tr>\n<tr>\n<td align=\"left\">DafaultUpdateSourceTrigger</td>\n<td align=\"left\">当该属性用于绑定表达式,该属性用于Binding.UpdateSourceTrigger属性设置默认值.UpdateSourceTrigger属性决定了数据绑定值在何时应用自身的变化.当创建绑定时,可以手动设置UpdateSourceTrigger属性.</td>\n</tr>\n<tr>\n<td align=\"left\">DefaultValue</td>\n<td align=\"left\">该属性用于依赖项属性设置默认值.</td>\n</tr>\n<tr>\n<td align=\"left\">CoerceValueCallback</td>\n<td align=\"left\">该属性提供了一个回调函数,用于验证依赖项属性之前尝试”纠正”属性值.</td>\n</tr>\n<tr>\n<td align=\"left\">PropertyChangedCallback</td>\n<td align=\"left\">该属性提供了一个回调函数,当依赖项属性的值变化时调用该回调函数.</td>\n</tr>\n</tbody></table>\n<h4 id=\"添加属性包装器\"><a href=\"#添加属性包装器\" class=\"headerlink\" title=\"添加属性包装器\"></a>添加属性包装器</h4><p>创建依赖项属性的最后一个步骤就是使用传统的.NET属性封装WPF依赖项属性.但典型的属性过程是检索或设置某个私有字段的值,而WPF属性的属性过程是使用在DependencyObject基类中定义的GetValue()和SetValue()方法.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Thickness Margin</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>&#123; <span class=\"keyword\">return</span> (Thickness)GetValue(MarginProperty); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span>&#123; SetValue(MarginProperty, <span class=\"keyword\">value</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除本地值设置,并像从来没有设置过那样确定属性值.需要使用另外一个继承自DependencyObject类的方法:ClearValue().</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.ClearValue(FrameworkElement.MarginProperty);</span><br></pre></td></tr></table></figure>\n\n<p>依赖项属性依赖于多个属性提供者,每个提供者都有各自的优先级.当从属性检索值时,WPF属性系统会通过一系列步骤获取最终值.首先通过考虑以下因素(按优先级从低到高的顺序排列)来决定基本值(base value):</p>\n<ul>\n<li>默认值(由FrameworkPropertyMetadata对象设置的值).</li>\n<li>继承而来的值(假设设置了FrameworkPropertyMetadata.Inherits标志,并为包含层次中的某个元素提供了值).</li>\n<li>来自主题样式的值.</li>\n<li>来自项目样式的值.</li>\n<li>本地值(使用代码或XAML直接为对象设置的值).</li>\n</ul>\n<p>WPF决定属性值得四步骤过程:</p>\n<ol>\n<li>确定基本值.</li>\n<li>如果属性是使用表达式设置的,就对表达式进行求值.当前,WPF支持两类表达式:数据绑定和资源.</li>\n<li>如果属性是动画的目标,就应用动画.</li>\n<li>运动CoerceValueCallback回调函数来修正属性值.</li>\n</ol>\n<h4 id=\"共享的依赖项属性\"><a href=\"#共享的依赖项属性\" class=\"headerlink\" title=\"共享的依赖项属性\"></a>共享的依赖项属性</h4><p>尽管一些类具有不同的继承层次,但他们回共享同一依赖项属性.例如,TextBlock.FontFamily属性和Control.FontFamily属性指向同一个静态的依赖项属性,该属性实际上是在TextElement类中定义的TextElement.FontFamilyProperty依赖项属性.TextElement类的静态构造函数注册该函数,而TextBlock类和Control类的静态构造函数只是通过调用DependencyProperty.AddOwner()方法重用该属性.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextBlock.FontFamilyProperty = TextElement.FontFamilyProperty.AddOwner(<span class=\"keyword\">typeof</span>(TextBlock));</span><br></pre></td></tr></table></figure>\n\n<p>可以使用相同的基础来创建自己的自定义类(假定在所继承的父类中还没有提供属性,否则直接重用即可）.还可以使用重载的AddOwner()方法来提供验证回调函数以及仅应用于依赖项属性用法的新FrameworkPropertyMetadata对象.</p>\n<h4 id=\"附加的依赖项属性\"><a href=\"#附加的依赖项属性\" class=\"headerlink\" title=\"附加的依赖项属性\"></a>附加的依赖项属性</h4><p>加属性是一种依赖项属性,由WPF属性系统管理.不同之处在于附加属性被应用到的类并非定义附加属性的那个类.例如,Grid类定义了Row和Column附加属性,这两个属性被用于设置Grid面板包含的元素,以指明这些元素应被放到哪个单元格中.</p>\n<p>　为了定义附加属性,需要使用RegisterAttached()方法,而不是使用Register()方法.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FrameworkPropertyMetadata metadata=<span class=\"keyword\">new</span> FrameworkPropertyMetadata(<span class=\"number\">0</span>,<span class=\"keyword\">new</span> PropertyChangedCallback(Grid.OnCellAttachedPropertyChanged));</span><br><span class=\"line\">Grid.RowProperty=DependencyProperty.RegisterAttached(<span class=\"string\">&quot;Row&quot;</span>,<span class=\"keyword\">typeof</span>(<span class=\"built_in\">int</span>),<span class=\"keyword\">typeof</span>(Grid),metadata,<span class=\"keyword\">new</span> ValidateValueCallback(Grid.IsIntValueNotNegative));</span><br></pre></td></tr></table></figure>\n\n<p>当创建附加属性时,不必定义.NET属性封装器.这是因为附加属性可以被用于任何依赖对象.</p>\n<p>附加属性需要调用两个静态方法来设置和获取属性值,这两个方法使用了为人熟知的SetValue()和GetValue()方法(继承自DependencyObject类).这两个静态方法应当命名为SetPropertyName()和GetPropertyName().</p>\n","site":{"data":{}},"length":12075,"excerpt":"<blockquote>\n<p>作者：Peter Luo 出处：<a href=\"https://www.cnblogs.com/Peter-Luo/\">https://www.cnblogs.com/Peter-Luo/</a></p>\n</blockquote>\n<h3 id=\"XAML基础\"><a href=\"#XAML基础\" class=\"headerlink\" title=\"XAML基础\"></a>XAML基础</h3><h4 id=\"WPF应用程序的顶级元素如下\"><a href=\"#WPF应用程序的顶级元素如下\" class=\"headerlink\" title=\"WPF应用程序的顶级元素如下\"></a>WPF应用程序的顶级元素如下</h4><ul>\n<li>Windo元素</li>\n<li>Page元素(用于可导航的应用程序)</li>\n<li>Application元素(用于定于应用程序资源和启动设置)</li>\n</ul>\n<h4 id=\"名称空间\"><a href=\"#名称空间\" class=\"headerlink\" title=\"名称空间\"></a>名称空间</h4><ul>\n<li><p><a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a> 是WPF核心名称空间.它包含了所有WPF类,包括用来构建用户界面的控件.如果没有使用名称空间前缀,那么它成为整个文档的默认名称空间.换句话说,除非另外指明,每个元素自动位于这个名称空间.</p>\n</li>\n<li><p><a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a> 是XAML名称空间.它包含各种XAML使用特性,这些特性可影响文档的解释方式.该名称空间被映射为前缀x.这意味着可通过在元素名称之前放置名称空间前缀x来使用该名称空间(例如&lt;x:ElementName&gt;).</p>","more":"<h4 id=\"代码隐藏类\"><a href=\"#代码隐藏类\" class=\"headerlink\" title=\"代码隐藏类\"></a>代码隐藏类</h4></li>\n</ul>\n<p>可通过XAML构造用户界面,但为了使应用程序具有一定的功能,就需要用于连接包含应用程序代码的事件处理程序的方法.XAML通过使用如下所示的Class特性简化了这个问题：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Window x:Class=<span class=\"string\">&quot;WpfApplication1.MainWindow&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在XAML名称空间的Class特性之前放置了名称空间前缀x,意味着这是XAML语言中更通用的部分.实际上,Class特性告诉XAML解析器用指定的名称生成一个新类.该类继承自由XML元素命名的类.换句话说,该实例创建了一个名为MainWindow的新类,该类继承自Window基类.</p>\n<h3 id=\"XAML属性\"><a href=\"#XAML属性\" class=\"headerlink\" title=\"XAML属性\"></a>XAML属性</h3><h4 id=\"标记扩展\"><a href=\"#标记扩展\" class=\"headerlink\" title=\"标记扩展\"></a>标记扩展</h4><p>标记扩展使用{标记扩展类 参数}语法,如</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button Background=<span class=\"string\">&quot;&#123;x:Static SystemColors.ActiveCaptionBrush&#125;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>所有标记扩展都由继承自System.Windows.MarkupExtension基类地类实现.MarkupExtension基类十分简单,提供了一个简单的ProvideValue()方法类获取所期望的数值.</p>\n<h4 id=\"附加属性\"><a href=\"#附加属性\" class=\"headerlink\" title=\"附加属性\"></a>附加属性</h4><p>附加属性始终使用包含两个部分的命名格式:定义类型.属性名.</p>\n<p>附加属性根本不是真正的属性.它们实际上被转换为方法调用.</p>\n<h4 id=\"特殊字符与空白\"><a href=\"#特殊字符与空白\" class=\"headerlink\" title=\"特殊字符与空白\"></a>特殊字符与空白</h4><table>\n<thead>\n<tr>\n<th align=\"left\">特殊字符</th>\n<th align=\"left\">实体字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">&amp;lt ;</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>|&amp;gt ;<br>&amp;|&amp;amp ;<br>“|&amp;quot ;</p>\n</blockquote>\n<p>如果希望在文本中包含一系列空格.在这种情况下,需要为元素使用xml:space=”preserve”特性,</p>\n<p>xml:space特性是XML标准的一部分,是一个要么包括全部、要么什么都不包括的设置.一旦使用了该设置,元素内的所有空字符串都将被保留.</p>\n<h3 id=\"使用其他名称空间中的类型\"><a href=\"#使用其他名称空间中的类型\" class=\"headerlink\" title=\"使用其他名称空间中的类型\"></a>使用其他名称空间中的类型</h3><p>为使用未在WPF名称空间中定义的类.需要将.NET名称空间映射到XML名称空间.XAML有一种特殊的语法可用于完成这一工作,该语法如下所示:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　xmlns:Prefix=<span class=\"string\">&quot;clr-namespace:Namespace;assembly=AssemblyName&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>　　通常,在XAML文档的根元素中,在紧随声明WPF和XAML名称空间的特性之后放置这个名称空间.还需要使用适当的信息填充三个斜体部分,这三部分的含义如下：</p>\n<ul>\n<li>Prefix是希望在XAML标记中用于指示名称空间的XML前缀.例如,XAML语法使用x前缀.</li>\n<li>Namespace是完全限定的.NET名称空间的名称.</li>\n<li>AssemblyName是声明类型的程序集,没有.dll扩张名.这个程序集必须在项目中引用.如果希望使用项目程序集,可以忽略这一部分.</li>\n</ul>\n<h3 id=\"加载和编译XAML\"><a href=\"#加载和编译XAML\" class=\"headerlink\" title=\"加载和编译XAML\"></a>加载和编译XAML</h3><p>可使用三种不同的编码方式来创建WPF应用程序：</p>\n<ul>\n<li>只使用代码.这是在Visual Studio中为Windows窗体应用程序使用的传统方法.它通过代码语句生成用户界面.</li>\n<li>使用代码和未经编译的标记(XAML).这种具体方式对于某些特殊情况是很有意义的,例如创建高度动态化的用户界面.这种方式在运行时使用System.Windows.Markup名称空间中的XamlReader类,从XAML文件中加载部分用户界面.</li>\n<li>使用代码和编译过的标记(BAML).对于WPF而言这是一种更好的方式,也是Visual Studio支持的一种方式.这种方式为每个窗口创建了一个XAML模板,这个XAML模板被编译为BAML,并嵌入到最终的程序集中.编译过的BAML在运行时被提取出来,用于重新生成用户界面</li>\n</ul>\n<h3 id=\"WPF的布局\"><a href=\"#WPF的布局\" class=\"headerlink\" title=\"WPF的布局\"></a>WPF的布局</h3><p>“理想的”WPF窗口需要遵循以下几条重要原则：</p>\n<ul>\n<li>不应显示设定元素(如控件)的尺寸.元素应当可以改变尺寸以适合它们的内容.例如,当添加更多的文本时按钮应当能够扩展.可通过设置最大和最小尺寸来限制可以接受的控件尺寸范围.</li>\n<li>不应使用屏幕坐标指定元素的位置.元素应当由它们的容器根据它们的尺寸、顺序以及(可选的)其他特定与具体布局容器的信息进行排列.如果需要在元素之间添加空白空间,可使用Margin属性.</li>\n<li>布局容器的子元素“共享”可用的空间.如果空间允许,布局容器会根据每个元素的内容尽可能为元素设置更合理得尺寸.它们还会向一个或多个子元素分配多余的空间.</li>\n<li>可嵌套的布局容器.典型的用户界面使用Grid面板作为开始,Grid面板是WPF中功能最强大的容器,Grid面板可包含其他布局容器,包含的这些容器以最小的分组排列元素,比如带有标题的文本框、列表框中的项、工具栏上的图标以及一列按钮等.</li>\n</ul>\n<p>Panel的公有属性</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Backgroup</td>\n<td align=\"left\">该属性用于面板背景着色.如果想要接收鼠标事件,就必须将属性设置为非空值(如果想接收鼠标事件,又不希望显示固定颜色的背景,那么只需要将背景色设置为透明即可)</td>\n</tr>\n<tr>\n<td align=\"left\">Children</td>\n<td align=\"left\">该属性是在面板中存储的条目集合.这是第一级条目–换句话说,这些条目自身也可以包含更多的条目.</td>\n</tr>\n<tr>\n<td align=\"left\">IsItemsHost</td>\n<td align=\"left\">该属性是一个布尔值,如果面板用于显示与ItemsControl控件关联的项(例如,TreeView控件中的节点或列表框中的列表项),该属性值为true.在大多数情况下,设置不需要知道列表控件使用后台面板来管理它所包含的条目的布局.但如果希望创建自定义的列表,以不同方式防止子元素(例如,以平布方式显示图像的ListBox控件),该细节就变得很重要.</td>\n</tr>\n</tbody></table>\n<p>核心布局面板<br>名称|说明<br>:-|:-<br>StackPanel|在水平或垂直的堆栈中放置元素.这个布局容器通常用于更大、更复杂窗口的一些小区域.<br>WrapPanel|在一系列可换行的行中放置元素,在水平方向上,WrapPanel面板从左向右放置条目,然后在随后的行中放置元素,在垂直方向上,WrapPanel面板在自上而下的列中放置元素,并使用附件的列放置剩余的条目.<br>DockPanel|根据容器上的整体边界调整元素<br>Grid|根据不可见的表格在行和列中排列元素,这是最灵活、最常用的容器之一.<br>UniformGrid|在不可见但是强制所有单元格具有相同尺寸的表中放置元素,这个布局容器不常用.<br>Canvas|使用固定坐标绝对定位元素.这个布局与传统Windows窗体应用程序最相似,但没有提供锚定或停靠功能.因此,对于尺寸可变的窗体,该布局容器不是合适的选择.如果选择的话,需要另外做一些工作.</p>\n<h3 id=\"StackPanel面板进行布局\"><a href=\"#StackPanel面板进行布局\" class=\"headerlink\" title=\"StackPanel面板进行布局\"></a>StackPanel面板进行布局</h3><p>StackPanel布局属性<br>名称|说明<br>:-|:-<br>HorizontalAlignment|当水平方向上有额外的空间时,该属性决定了子元素在布局容器中如何定位.可选用Center、Left、Right或Stretch等属性值<br>VerticalAlignment|当垂直方向上有额外的空间时,该属性决定了子元素在布局容器中如何定位.可选用Center、Top、Bottom或Stretch等属性值<br>Margin|该属性用于在元素的周围添加一定的空间.Margin属性是System.Windows.Thickness结构的一个实例,该结构具有分别用于顶部、底部、左边和右边添加空间的独立组件.<br>MinWidth和MinHeight|这两个属性用于设置元素的最小尺寸.如果一个元素对于其他布局容器来说太大,该元素将被剪裁以适合容器.<br>MaxWidth和MaxHeight|这两个属性用于设置元素的最大尺寸.如果有更多可以使用的空间,那么在扩展子元素时依旧不会超出这一限制,即使将HorizontalAlignment和VerticalAlignment属性设置为Stretch也同样如此.<br>Width和Height|这两个属性用来显式地设置元素的尺寸.这一设置会重写为HorizontalAlignment和VerticalAlignment属性设置的Stretch值.但不能超出MinWidth、MinHeight、MaxWidth和MaxHeight属性设置的范围.</p>\n<p>Border控件<br>Border类非常简单.它只能包含一段嵌套内容(通常是布局面板),并为其添加背景或在其周围添加边框.</p>\n<p>Border控件属性<br>名称|说明<br>:-|:-<br>Background|使用Brush对象设置边框中所有内容后面的背景.可使用固定颜色背景,也可使用其他更特殊的背景.<br>BorderBrush和BorderThickness|使用Brush对象设置位于Border对象边缘的边框的颜色,并设置边框的宽度.为显示边框,必须设置这两个属性<br>CornerRadius|该属性可使边框具有雅致的圆角.CornerRadius的值越大,圆角效果就越明显.<br>Padding|该属性在边框和内部的内容之间添加空间.</p>\n<h3 id=\"WrapPanel和DockPanel面板\"><a href=\"#WrapPanel和DockPanel面板\" class=\"headerlink\" title=\"WrapPanel和DockPanel面板\"></a>WrapPanel和DockPanel面板</h3><p>WrapPanel面板</p>\n<p>WrapPanel面板在可能的空间中,以一次一行或一列的方式布置控件.默认情况下,WrapPanel.Orientation的属性设置为Horizontal;控件从左向右进行排列,再在下一行中排列.但可将WrapPenel.Orientation的属性设置为Vertical,从而在多个列中放置元素.</p>\n<p>WrapPanel面板是唯一一个不能通过灵活使用Grid面板代替的面板.</p>\n<p>DockPanel面板</p>\n<p>DockPanel面板是更有趣的布局选项.它沿着一条外边缘来拉伸所包含的控件.理解该面板最简便的方式是,考虑一下位于许多Windows应用程序窗口顶部的工具栏,这些工具栏停靠到窗口顶部.与StackPanel面板类似,被停靠的元素选择它们的布局的一方面.</p>\n<p>通过Dock附加属性,可将该属性设置为Left、Right、Top或Bottom.放在DockPanel面板中的每个元素都会自动捕获该属性.</p>\n<h3 id=\"Grid面板\"><a href=\"#Grid面板\" class=\"headerlink\" title=\"Grid面板\"></a>Grid面板</h3><p>需要两个步骤来创建基于Grid面板的布局.首先,选择希望使用的行和列的数量.然后,为每个包含的元素指定恰当的行和列,从而在合适的位置放置元素.Grid面板通过使用对象Grid.ColumnDefinitions和Grid.RowDefinitions集合来创建网格和行.</p>\n<h4 id=\"调整行和列\"><a href=\"#调整行和列\" class=\"headerlink\" title=\"调整行和列\"></a>调整行和列</h4><p>Grid面板支持以下三种设置尺寸的方式：</p>\n<ul>\n<li><p>绝对设置尺寸方式.使用设备无关单位准确地设置尺寸.这是最无用的策略,因为这种策略不够灵活,难以适应内容大小和容器大小的改变,而且难以处理本地化.</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;ColumnDefinition Width=<span class=\"string\">&quot;100&quot;</span>&gt;&lt;/ColumnDefinition&gt;</span><br><span class=\"line\">    ````</span><br><span class=\"line\"></span><br><span class=\"line\">* 自动设置尺寸方式.每行和每列的尺寸刚好满足需要.这是最有用的尺寸设置方式.</span><br><span class=\"line\"></span><br><span class=\"line\">    ```cs</span><br><span class=\"line\">    &lt;ColumnDefinition Width=<span class=\"string\">&quot;Auto&quot;</span>&gt;&lt;/ColumnDefinition&gt;</span><br><span class=\"line\">    ````</span><br><span class=\"line\"></span><br><span class=\"line\">* 按比例设置尺寸方式.按比例将空间分割到一组行和列中.这是对所有行和列的标准设置.</span><br><span class=\"line\"></span><br><span class=\"line\">    ```cs</span><br><span class=\"line\">    &lt;ColumnDefinition Width=<span class=\"string\">&quot;*&quot;</span>&gt;&lt;/ColumnDefinition&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"布局舍入\"><a href=\"#布局舍入\" class=\"headerlink\" title=\"布局舍入\"></a>布局舍入</h4><p>将布局容器的UseLayouyRounding属性设置为true,WPF会确保布局容器中的所有内容对齐到最近的像素边界,从而消除了所有模糊问题.</p>\n<h4 id=\"跨越行和列\"><a href=\"#跨越行和列\" class=\"headerlink\" title=\"跨越行和列\"></a>跨越行和列</h4><p>使用两个附加属性使元素跨越多个单元格,这两个附加属性是RowSpan和ColumnSpan.这两个属性使用元素将会占有的行数和列数进行设置.</p>\n<h4 id=\"分割窗口\"><a href=\"#分割窗口\" class=\"headerlink\" title=\"分割窗口\"></a>分割窗口</h4><p>在WPF中,分隔条由GridSplitter类表示,它是Grid面板的功能之一.通过为Grid面板添加GridSplitter对象,用户就可以改变行和列的尺寸.</p>\n<p>大多数开发人员认为WPF中的GridSplitter类不是最直观的.理解如何使用GridSplitter类,从而得到所期望的效果需要一定的经验.下面列出几条指导原则：</p>\n<ul>\n<li>GridSplitter对象必须放在Grid单元格中.可与已经存在的内容一并放到单元格中,这时需要调整边距设置,并将预留行或列的Height或Width属性的值设置为Auto.</li>\n<li>GridSplitter对象总是改变整行或整列的尺寸(而非改变单个单元格的尺寸).为使GridSplitter对象的外观和行为保持一致,需要拉伸GridSplitter对象使其穿越整行或整列,而不是将其限制在单元格中.为此,可使用前面介绍过的RowSpan或ColumnSpan属性.</li>\n<li>最初,GridSplitter对象很小不易看见.为了使其更可用,需要哦为其设置最小尺寸.对于竖直分隔条,需要将VerticalAlignment属性设置为Stretch(使分隔条填满区域的整个高度),并将Width设置为固定值.对于水平分隔条,需要设置HorizontalAlignment属性来拉伸,并将Height属性设置为固定值.</li>\n<li>GridSplitter对齐方式还决定了分隔条是水平的(用于改变行的尺寸)还是竖直的(用于改变列的尺寸).对于水平分隔条,需要将VerticalAlignment属性设置为Center(这也是默认值),以指明拖动分隔条改变上面行和下面行的尺寸.对于竖直分隔条,需要将HorizontalAlignment属性设置为Center,以改变分隔条两侧列的尺寸.</li>\n</ul>\n<h4 id=\"共享尺寸组\"><a href=\"#共享尺寸组\" class=\"headerlink\" title=\"共享尺寸组\"></a>共享尺寸组</h4><p>共享尺寸组的目标是保持用户界面独立部分的一致性.例如,可能希望该表一列的尺寸以适应其内容,并改变另一列的尺寸使其与前面一列改变后的尺寸相匹配.共享尺寸组的真正有点是使独立的Grid控件具有相同的比例.</p>\n<p>通过Grid.IsSharedSizeScope=”True”启动共享尺寸组,在需要共享ColumnDefinition上设置相同的SharedSizeGroup,即可实现共享.</p>\n<h4 id=\"UniformGrid面板\"><a href=\"#UniformGrid面板\" class=\"headerlink\" title=\"UniformGrid面板\"></a>UniformGrid面板</h4><p>UniformGrid面板不需要(甚至不支持)预先定义的列和行.相反,通过简单地设置Rows和Columns属性来设置其尺寸.每个单元格始终具有相同的大小,因为可用的空间被均分.最后,元素根据定义的顺序被放置到适当的单元格中.UniformGrid面板中没有Row和Column附加属性,也没有空白单元格.</p>\n<h3 id=\"Canvas面板\"><a href=\"#Canvas面板\" class=\"headerlink\" title=\"Canvas面板\"></a>Canvas面板</h3><p>Canvas面板只是在指定的位置放置其子元素,并且子元素具有所希望的精确尺寸.</p>\n<p>在Canvas面板中定位元素,需要设置Canvas.Left和Canvas.Top附加属性.Canvas.Left属性设置元素左边和Canvas面板左边之间的单位数.Canvas.Top属性设置子元素顶部和Canvas面板顶边之间的单位数.</p>\n<p>可使用Width和Height属性明确设置子元素的尺寸.如果没有设置Width和Height属性,元素会获取它所期望的尺寸——换句话说,它将变得足够大以适应其内容.</p>\n<h4 id=\"Z顺序\"><a href=\"#Z顺序\" class=\"headerlink\" title=\"Z顺序\"></a>Z顺序</h4><p>如果Canvas面板中有多个互相重叠的元素,可通过设置Canvas.ZIndex附加属性来控制他们的层叠方式.</p>\n<p>添加的所有元素通常都具有相同的ZIndex指——0.如果元素具有相同的ZIndex值,就按他们在Canvas.Children集合中的顺序进行显示,这个顺序依赖于元素在XAML标记中定义的顺序.在标记靠后位置声明的元素会显示在前面声明的元素的上面.</p>\n<h3 id=\"InkCanvas元素\"><a href=\"#InkCanvas元素\" class=\"headerlink\" title=\"InkCanvas元素\"></a>InkCanvas元素</h3><p>InkCanvas元素的主要目的用于接收手写笔输入.手写笔是一种在平板PC中使用的类似钢笔的输入设备,然而,InkCanvas元素同时也可使用鼠标进行工作,就像使用手写笔一样.因此,用户可使用鼠标在InkCanvas元素上绘制线条,或者选择以及操作InkCanvas中的元素.</p>\n<p>InkCanvas元素实际上包含两个子内容集合.一个是为人熟知的Children集合,它保存任意元素,就像Canvas面板一样.每个子元素可根据Top、Left、Bottom和Right属性进行定位.另一个是Strokes结合,它保存System.Windows.Ink.Stroke对象,该对象表示用户在InkCanvas元素上绘制的图形输入.用户绘制的每条直线或曲线都变成独立的Stroke对象.得益于这两个集合,可使用InkCanvas让用户使用存储在Strokes集合中的笔画(Stroke)为保存在Children集合中的内容添加注释.</p>\n<p>根据为InkCanvas.EditingMode属性设置的值,可以采用截然不同的方式使用InkCanvas元素,下表列出了所有选项:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Ink</td>\n<td align=\"left\">InkCanvas元素允许用户绘制批注,这是默认模式.当用户用鼠标或手写笔绘图时,会绘制笔画.</td>\n</tr>\n<tr>\n<td align=\"left\">GestureOnly</td>\n<td align=\"left\">InkCanvas元素不允许用户绘制笔画批注,但会关注预先定义的特定姿势(例如在某个方向拖动手写笔或涂画内容).能识别的姿势的完整列表由System.Windows.Ink.ApplicationGesture枚举给出.</td>\n</tr>\n<tr>\n<td align=\"left\">InkAndGesture</td>\n<td align=\"left\">InkCanvas元素允许用户绘制笔画批注,也可以识别预先定义的姿势.</td>\n</tr>\n<tr>\n<td align=\"left\">EraseByStroke</td>\n<td align=\"left\">用单击笔画时,InkCanvas元素会擦除笔画.如果用户使用手写笔,可使用手写笔的底端切换到该模(可使用只读的ActiveEditingMode属性确定当前编辑模式,也可通过改变EditingModeInverted属性来改变手写笔的底端使用的工作模式)</td>\n</tr>\n<tr>\n<td align=\"left\">EraseByPoint</td>\n<td align=\"left\">当单击笔画时,InkCanvas元素会擦除笔画中呗单击的部分(笔画上的一个点)</td>\n</tr>\n<tr>\n<td align=\"left\">Select</td>\n<td align=\"left\">InkCanvas面板允许用户选择保存在Childeren集合中的元素.要选择一个元素,用户必须单击该元素或拖动”套索”选择该元素.一旦选择一个元素,就可以移动该元素、改变其尺寸或将其删除</td>\n</tr>\n<tr>\n<td align=\"left\">None</td>\n<td align=\"left\">InkCanvas元素忽略鼠标和手写笔输入</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">InkCanvas元素会引发多种事件,当编辑模式改变时会引发ActiveEditingModeChanged事件,在GestureOnly或InkAndGesture模式下删除姿势时会引发Gesture事件,在Select模式下选择元素或改变元素时会引发SelectionChanging事件、SelectionChanged事件、SelectionMoving事件、SelectionMoved事件、SelectionResizing事件和SelectionResized事件.其中,名称以”ing”结尾的事件表示动作将要发生,但可以通过设置EventArgs对象的Cancel属性取消事件.</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"理解依赖项属性\"><a href=\"#理解依赖项属性\" class=\"headerlink\" title=\"理解依赖项属性\"></a>理解依赖项属性</h3><h4 id=\"定义依赖项属性\"><a href=\"#定义依赖项属性\" class=\"headerlink\" title=\"定义依赖项属性\"></a>定义依赖项属性</h4><p>第一步是定义表示属性的对象,它是DependencyProperty类的实例.属性信息应该始终保持可用,甚至可能需要在多个类之间共享这些信息(在WPF元素中这是十分普遍的).因此,必须将DependencyProperty对象为与其相关联的类的静态字段.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FrameworkElement</span>:<span class=\"title\">UIElement</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> DependencyProperty MaraginProperty;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据约定,定义依赖项属性的字段的名称是在普遍属性的末尾处加上单词”Property”.根据这种命名方式,可从实际属性的名称中区分出依赖项属性的定义.字段的定义使用了readonly关键字,这意味着只能在FrameworkElement类的静态构造函数中对其进行设置.</p>\n<h4 id=\"注册依赖项属性\"><a href=\"#注册依赖项属性\" class=\"headerlink\" title=\"注册依赖项属性\"></a>注册依赖项属性</h4><p>WPF确保DependencyProperty对象不能被直接实例化,因为DependencyProperty类没有公有的构造函数.相反,只能使用静态的DependencyProperty.Register()方法创建DependencyProperty实例.WPF还确保在创建DependencyProperty对象后不能改变该对象,因为所有DependencyProperty成员都是只读的.它们的值必须作为Register()方法的参数来提供.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">FrameworkElement</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FrameworkPropertyMetadata metadata = <span class=\"keyword\">new</span> FrameworkPropertyMetadata(<span class=\"keyword\">new</span> Thickness(), FrameworkPropertyMetadataOptions.AffectsMeasure);</span><br><span class=\"line\"></span><br><span class=\"line\">    MarginProperty = DependencyProperty.Register(<span class=\"string\">&quot;Margin&quot;</span>, <span class=\"keyword\">typeof</span>(Thickness), <span class=\"keyword\">typeof</span>(FrameworkElement), metadata, <span class=\"keyword\">new</span> ValidateValueCallback(FrameworkElement.IsMarginValid));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册依赖项属性需要经历两个步骤:首先创建FrameworkPropertyMetadata对象,该对象指示希望通过依赖项属性使用什么服务(如支持数据库绑定、动画以及日志).接下来通过调用DependencyProperty.Register()静态方法注册属性.在这一步骤中,你负责提供以下几个要素：</p>\n<ul>\n<li>属性名(在该例中为Margin)</li>\n<li>属性使用的数据类型(在该例中为Thickness结构)</li>\n<li>拥有该属性的类型(在该例中为FrameworkElement类)</li>\n<li>一个具有附加属性设置的FrameworkPropertyMetadata对象,该要素是可选的.</li>\n<li>一个用于验证属性的回调函数,该要素是可选的.</li>\n</ul>\n<p>FrameworkPropertyMetadata类的所有属性</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">AffectsArrange、AffectsMeasure、AffectsParentArrange和AffectsParentMeasure</td>\n<td align=\"left\">如果为true,依赖项属性会影响在布局操作的测量过程和排列过程中如何放置相邻的元素或父元素.例如,Margin依赖项属性将AffectsMeasure属性设置为true,表面如果一个元素的边距发生变化,那么布局容器需要重新执行测量步骤以确定元素新的布局.</td>\n</tr>\n<tr>\n<td align=\"left\">AffectsRender</td>\n<td align=\"left\">如果为true,依赖项属性会对元素的绘制方式造成一定的影响,要求重新绘制元素.</td>\n</tr>\n<tr>\n<td align=\"left\">BindsTwoWayByDefault</td>\n<td align=\"left\">如果为true,默认情况下,依赖项属性将使用双向数据绑定而不是单向数据绑定.不过,当创建数据绑定时,可以明确指定所需的绑定行为.</td>\n</tr>\n<tr>\n<td align=\"left\">Inherits</td>\n<td align=\"left\">如果为true,就通过元素树传播该依赖项属性值,并且可以被嵌套的元素继承.例如,Font属性是可继承的依赖项属性.如果在更高层次的元素中为Font属性设置了值,那么该属性值就会被嵌套的元素继承(除非使用自己的字体设置明确地覆盖继承而来的值).</td>\n</tr>\n<tr>\n<td align=\"left\">IsAnimationProhibited</td>\n<td align=\"left\">如果为true,就不能将依赖项属性用于动画.</td>\n</tr>\n<tr>\n<td align=\"left\">IsNotDataBindale</td>\n<td align=\"left\">如果为true,就不能使用绑定表达式设置依赖项属性.</td>\n</tr>\n<tr>\n<td align=\"left\">Journal</td>\n<td align=\"left\">如果为true,在基于页面的应用程序中,依赖项属性将会被保存到日志(浏览过的页面的历史记录)中.</td>\n</tr>\n<tr>\n<td align=\"left\">SubPropertiesDoNotAffectRender</td>\n<td align=\"left\">如果为true,并且对象的某个子属性(属性的属性)发生了变化,WPF将不会重新渲染该对象.</td>\n</tr>\n<tr>\n<td align=\"left\">DafaultUpdateSourceTrigger</td>\n<td align=\"left\">当该属性用于绑定表达式,该属性用于Binding.UpdateSourceTrigger属性设置默认值.UpdateSourceTrigger属性决定了数据绑定值在何时应用自身的变化.当创建绑定时,可以手动设置UpdateSourceTrigger属性.</td>\n</tr>\n<tr>\n<td align=\"left\">DefaultValue</td>\n<td align=\"left\">该属性用于依赖项属性设置默认值.</td>\n</tr>\n<tr>\n<td align=\"left\">CoerceValueCallback</td>\n<td align=\"left\">该属性提供了一个回调函数,用于验证依赖项属性之前尝试”纠正”属性值.</td>\n</tr>\n<tr>\n<td align=\"left\">PropertyChangedCallback</td>\n<td align=\"left\">该属性提供了一个回调函数,当依赖项属性的值变化时调用该回调函数.</td>\n</tr>\n</tbody></table>\n<h4 id=\"添加属性包装器\"><a href=\"#添加属性包装器\" class=\"headerlink\" title=\"添加属性包装器\"></a>添加属性包装器</h4><p>创建依赖项属性的最后一个步骤就是使用传统的.NET属性封装WPF依赖项属性.但典型的属性过程是检索或设置某个私有字段的值,而WPF属性的属性过程是使用在DependencyObject基类中定义的GetValue()和SetValue()方法.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Thickness Margin</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>&#123; <span class=\"keyword\">return</span> (Thickness)GetValue(MarginProperty); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span>&#123; SetValue(MarginProperty, <span class=\"keyword\">value</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除本地值设置,并像从来没有设置过那样确定属性值.需要使用另外一个继承自DependencyObject类的方法:ClearValue().</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.ClearValue(FrameworkElement.MarginProperty);</span><br></pre></td></tr></table></figure>\n\n<p>依赖项属性依赖于多个属性提供者,每个提供者都有各自的优先级.当从属性检索值时,WPF属性系统会通过一系列步骤获取最终值.首先通过考虑以下因素(按优先级从低到高的顺序排列)来决定基本值(base value):</p>\n<ul>\n<li>默认值(由FrameworkPropertyMetadata对象设置的值).</li>\n<li>继承而来的值(假设设置了FrameworkPropertyMetadata.Inherits标志,并为包含层次中的某个元素提供了值).</li>\n<li>来自主题样式的值.</li>\n<li>来自项目样式的值.</li>\n<li>本地值(使用代码或XAML直接为对象设置的值).</li>\n</ul>\n<p>WPF决定属性值得四步骤过程:</p>\n<ol>\n<li>确定基本值.</li>\n<li>如果属性是使用表达式设置的,就对表达式进行求值.当前,WPF支持两类表达式:数据绑定和资源.</li>\n<li>如果属性是动画的目标,就应用动画.</li>\n<li>运动CoerceValueCallback回调函数来修正属性值.</li>\n</ol>\n<h4 id=\"共享的依赖项属性\"><a href=\"#共享的依赖项属性\" class=\"headerlink\" title=\"共享的依赖项属性\"></a>共享的依赖项属性</h4><p>尽管一些类具有不同的继承层次,但他们回共享同一依赖项属性.例如,TextBlock.FontFamily属性和Control.FontFamily属性指向同一个静态的依赖项属性,该属性实际上是在TextElement类中定义的TextElement.FontFamilyProperty依赖项属性.TextElement类的静态构造函数注册该函数,而TextBlock类和Control类的静态构造函数只是通过调用DependencyProperty.AddOwner()方法重用该属性.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextBlock.FontFamilyProperty = TextElement.FontFamilyProperty.AddOwner(<span class=\"keyword\">typeof</span>(TextBlock));</span><br></pre></td></tr></table></figure>\n\n<p>可以使用相同的基础来创建自己的自定义类(假定在所继承的父类中还没有提供属性,否则直接重用即可）.还可以使用重载的AddOwner()方法来提供验证回调函数以及仅应用于依赖项属性用法的新FrameworkPropertyMetadata对象.</p>\n<h4 id=\"附加的依赖项属性\"><a href=\"#附加的依赖项属性\" class=\"headerlink\" title=\"附加的依赖项属性\"></a>附加的依赖项属性</h4><p>加属性是一种依赖项属性,由WPF属性系统管理.不同之处在于附加属性被应用到的类并非定义附加属性的那个类.例如,Grid类定义了Row和Column附加属性,这两个属性被用于设置Grid面板包含的元素,以指明这些元素应被放到哪个单元格中.</p>\n<p>　为了定义附加属性,需要使用RegisterAttached()方法,而不是使用Register()方法.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FrameworkPropertyMetadata metadata=<span class=\"keyword\">new</span> FrameworkPropertyMetadata(<span class=\"number\">0</span>,<span class=\"keyword\">new</span> PropertyChangedCallback(Grid.OnCellAttachedPropertyChanged));</span><br><span class=\"line\">Grid.RowProperty=DependencyProperty.RegisterAttached(<span class=\"string\">&quot;Row&quot;</span>,<span class=\"keyword\">typeof</span>(<span class=\"built_in\">int</span>),<span class=\"keyword\">typeof</span>(Grid),metadata,<span class=\"keyword\">new</span> ValidateValueCallback(Grid.IsIntValueNotNegative));</span><br></pre></td></tr></table></figure>\n\n<p>当创建附加属性时,不必定义.NET属性封装器.这是因为附加属性可以被用于任何依赖对象.</p>\n<p>附加属性需要调用两个静态方法来设置和获取属性值,这两个方法使用了为人熟知的SetValue()和GetValue()方法(继承自DependencyObject类).这两个静态方法应当命名为SetPropertyName()和GetPropertyName().</p>"},{"title":"Wcf创建Http和Webservice接口","date":"2018-03-09T15:37:05.000Z","_content":"不需要部署在iis上，直接打开exe程序即可开启接口。\n同时支持创建一个支持http请求和Webservice接口的wcf服务\n<!--more-->\n\n##### Http请求\n设置了兼容性，不用继承接口，在一个类里可以完成url和参数的设置\n###### HttpInterface.cs\n```cs\n    /// <summary>\n    /// http://127.0.0.1:8880\n    /// </summary>\n    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]\n    [ServiceContract]\n    public class HttpInterface\n    { \n        /// <summary>\n        /// 测试接口\n        /// 调用示例 http://127.0.0.1:8880/wcfapp/TestHttp?test1=测试\n        /// </summary>\n        /// <param name=\"idCardNo\"></param>\n        /// <returns></returns>\n        [OperationContract]\n        [WebInvoke(Method = \"*\",\n        UriTemplate = \"wcfapp/testhttp?test1={test1}\",\n        RequestFormat = WebMessageFormat.Json,\n        ResponseFormat = WebMessageFormat.Xml,\n        BodyStyle = WebMessageBodyStyle.Bare)]\n        public string TestHttp (string test1)\n        {\n            return string.Format(\"HTTP返回测试内容 = {0}\",test1);\n        } \n    }\n```\n\n##### WebService\n调用接口时注意，方法名= 类名\n###### WSInterface.cs\n```cs\n    /// <summary>\n    /// http://127.0.0.1:8881/wstest?wsdl\n    /// </summary>\n    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]\n    [ServiceContract]\n    public class WSInterface\n    { \n\n        [OperationContract]\n        public string TestWS(string test1)\n        {\n            return string.Format(\"Webservice返回测试内容 = {0}\", test1);\n        }\n    }\n```\n\n##### 使用\n###### Program.cs\n```cs\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                Console.Title = \"同时支持http和Webservice交互的服务\";  \n\n                //可以突出重点输出内容\n                Console.ForegroundColor = ConsoleColor.Yellow;\n                Console.WriteLine(\"WCF服务正在初始化.....\");\n                Console.ForegroundColor = ConsoleColor.Gray;\n       \n\n                #region 支持Post和Get\n                Console.WriteLine(\"======================================\");\n                String HttpUrl = \"http://127.0.0.1:8880\";\n                Uri address = new Uri(HttpUrl);\n                WebServiceHost http_host = new WebServiceHost(typeof(HttpInterface), address);  //绑定处理的类\n                http_host.Description.Behaviors.Add(new ServiceMetadataBehavior() { HttpGetEnabled = true });\n                http_host.Open();\n                Console.WriteLine(\"Http请求URL--->\" + HttpUrl);\n                #endregion\n\n                #region 支持Webservice\n                String WsUrl = \"http://127.0.0.1:8881/wstest\";\n                address = new Uri(WsUrl);\n                ServiceHost webservice_host = new ServiceHost(typeof(WSInterface), address); //绑定处理的类\n                webservice_host.Description.Behaviors.Add(new ServiceMetadataBehavior() { HttpGetEnabled = true });\n\n                //=======设置最大连接数\n                ServiceThrottlingBehavior behavior = new ServiceThrottlingBehavior();\n                behavior.MaxConcurrentCalls = 2147483647;\n                behavior.MaxConcurrentInstances = 2147483647;\n                behavior.MaxConcurrentSessions = 2147483647;\n                webservice_host.Description.Behaviors.Add(behavior);\n                Console.WriteLine(\"Webservice请求URL--->\" + WsUrl);\n                webservice_host.Open(); \n                #endregion \n\n                Console.WriteLine(\"WCF服务启动成功!\");\n\n                while (true)\n                {\n                    Console.ReadKey(false);\n                }\n\n            }\n            catch (Exception qq)\n            {\n                Console.WriteLine(qq.Message);\n                Console.WriteLine(\"WCF服务启动失败!\");\n                Console.Read();\n            }\n        }\n    }\n```\n\n","source":"_posts/Wcf创建http和Webservice接口.md","raw":"---\ntitle: Wcf创建Http和Webservice接口\ndate: 2018-03-09 23:37:05\ncategories: .Net\ntags: \n - WCF\n - .Net\n---\n不需要部署在iis上，直接打开exe程序即可开启接口。\n同时支持创建一个支持http请求和Webservice接口的wcf服务\n<!--more-->\n\n##### Http请求\n设置了兼容性，不用继承接口，在一个类里可以完成url和参数的设置\n###### HttpInterface.cs\n```cs\n    /// <summary>\n    /// http://127.0.0.1:8880\n    /// </summary>\n    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]\n    [ServiceContract]\n    public class HttpInterface\n    { \n        /// <summary>\n        /// 测试接口\n        /// 调用示例 http://127.0.0.1:8880/wcfapp/TestHttp?test1=测试\n        /// </summary>\n        /// <param name=\"idCardNo\"></param>\n        /// <returns></returns>\n        [OperationContract]\n        [WebInvoke(Method = \"*\",\n        UriTemplate = \"wcfapp/testhttp?test1={test1}\",\n        RequestFormat = WebMessageFormat.Json,\n        ResponseFormat = WebMessageFormat.Xml,\n        BodyStyle = WebMessageBodyStyle.Bare)]\n        public string TestHttp (string test1)\n        {\n            return string.Format(\"HTTP返回测试内容 = {0}\",test1);\n        } \n    }\n```\n\n##### WebService\n调用接口时注意，方法名= 类名\n###### WSInterface.cs\n```cs\n    /// <summary>\n    /// http://127.0.0.1:8881/wstest?wsdl\n    /// </summary>\n    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]\n    [ServiceContract]\n    public class WSInterface\n    { \n\n        [OperationContract]\n        public string TestWS(string test1)\n        {\n            return string.Format(\"Webservice返回测试内容 = {0}\", test1);\n        }\n    }\n```\n\n##### 使用\n###### Program.cs\n```cs\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                Console.Title = \"同时支持http和Webservice交互的服务\";  \n\n                //可以突出重点输出内容\n                Console.ForegroundColor = ConsoleColor.Yellow;\n                Console.WriteLine(\"WCF服务正在初始化.....\");\n                Console.ForegroundColor = ConsoleColor.Gray;\n       \n\n                #region 支持Post和Get\n                Console.WriteLine(\"======================================\");\n                String HttpUrl = \"http://127.0.0.1:8880\";\n                Uri address = new Uri(HttpUrl);\n                WebServiceHost http_host = new WebServiceHost(typeof(HttpInterface), address);  //绑定处理的类\n                http_host.Description.Behaviors.Add(new ServiceMetadataBehavior() { HttpGetEnabled = true });\n                http_host.Open();\n                Console.WriteLine(\"Http请求URL--->\" + HttpUrl);\n                #endregion\n\n                #region 支持Webservice\n                String WsUrl = \"http://127.0.0.1:8881/wstest\";\n                address = new Uri(WsUrl);\n                ServiceHost webservice_host = new ServiceHost(typeof(WSInterface), address); //绑定处理的类\n                webservice_host.Description.Behaviors.Add(new ServiceMetadataBehavior() { HttpGetEnabled = true });\n\n                //=======设置最大连接数\n                ServiceThrottlingBehavior behavior = new ServiceThrottlingBehavior();\n                behavior.MaxConcurrentCalls = 2147483647;\n                behavior.MaxConcurrentInstances = 2147483647;\n                behavior.MaxConcurrentSessions = 2147483647;\n                webservice_host.Description.Behaviors.Add(behavior);\n                Console.WriteLine(\"Webservice请求URL--->\" + WsUrl);\n                webservice_host.Open(); \n                #endregion \n\n                Console.WriteLine(\"WCF服务启动成功!\");\n\n                while (true)\n                {\n                    Console.ReadKey(false);\n                }\n\n            }\n            catch (Exception qq)\n            {\n                Console.WriteLine(qq.Message);\n                Console.WriteLine(\"WCF服务启动失败!\");\n                Console.Read();\n            }\n        }\n    }\n```\n\n","slug":"Wcf创建http和Webservice接口","published":1,"updated":"2021-03-30T03:24:16.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0g0044vcua5ftebjfq","content":"<p>不需要部署在iis上，直接打开exe程序即可开启接口。<br>同时支持创建一个支持http请求和Webservice接口的wcf服务</p>\n<span id=\"more\"></span>\n\n<h5 id=\"Http请求\"><a href=\"#Http请求\" class=\"headerlink\" title=\"Http请求\"></a>Http请求</h5><p>设置了兼容性，不用继承接口，在一个类里可以完成url和参数的设置</p>\n<h6 id=\"HttpInterface-cs\"><a href=\"#HttpInterface-cs\" class=\"headerlink\" title=\"HttpInterface.cs\"></a>HttpInterface.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> http://127.0.0.1:8880</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ServiceContract</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpInterface</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 测试接口</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 调用示例 http://127.0.0.1:8880/wcfapp/TestHttp?test1=测试</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;idCardNo&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">OperationContract</span>]</span><br><span class=\"line\">    [<span class=\"meta\">WebInvoke(Method = <span class=\"meta-string\">&quot;*&quot;</span>,</span></span><br><span class=\"line\"><span class=\"meta\">    UriTemplate = <span class=\"meta-string\">&quot;wcfapp/testhttp?test1=&#123;test1&#125;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"meta\">    RequestFormat = WebMessageFormat.Json,</span></span><br><span class=\"line\"><span class=\"meta\">    ResponseFormat = WebMessageFormat.Xml,</span></span><br><span class=\"line\"><span class=\"meta\">    BodyStyle = WebMessageBodyStyle.Bare)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">TestHttp</span> (<span class=\"params\"><span class=\"built_in\">string</span> test1</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.Format(<span class=\"string\">&quot;HTTP返回测试内容 = &#123;0&#125;&quot;</span>,test1);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"WebService\"><a href=\"#WebService\" class=\"headerlink\" title=\"WebService\"></a>WebService</h5><p>调用接口时注意，方法名= 类名</p>\n<h6 id=\"WSInterface-cs\"><a href=\"#WSInterface-cs\" class=\"headerlink\" title=\"WSInterface.cs\"></a>WSInterface.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> http://127.0.0.1:8881/wstest?wsdl</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ServiceContract</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WSInterface</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">OperationContract</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">TestWS</span>(<span class=\"params\"><span class=\"built_in\">string</span> test1</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.Format(<span class=\"string\">&quot;Webservice返回测试内容 = &#123;0&#125;&quot;</span>, test1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.Title = <span class=\"string\">&quot;同时支持http和Webservice交互的服务&quot;</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//可以突出重点输出内容</span></span><br><span class=\"line\">                Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;WCF服务正在初始化.....&quot;</span>);</span><br><span class=\"line\">                Console.ForegroundColor = ConsoleColor.Gray;</span><br><span class=\"line\">       </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 支持Post和Get</span></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;======================================&quot;</span>);</span><br><span class=\"line\">                String HttpUrl = <span class=\"string\">&quot;http://127.0.0.1:8880&quot;</span>;</span><br><span class=\"line\">                Uri address = <span class=\"keyword\">new</span> Uri(HttpUrl);</span><br><span class=\"line\">                WebServiceHost http_host = <span class=\"keyword\">new</span> WebServiceHost(<span class=\"keyword\">typeof</span>(HttpInterface), address);  <span class=\"comment\">//绑定处理的类</span></span><br><span class=\"line\">                http_host.Description.Behaviors.Add(<span class=\"keyword\">new</span> ServiceMetadataBehavior() &#123; HttpGetEnabled = <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">                http_host.Open();</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;Http请求URL---&gt;&quot;</span> + HttpUrl);</span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 支持Webservice</span></span><br><span class=\"line\">                String WsUrl = <span class=\"string\">&quot;http://127.0.0.1:8881/wstest&quot;</span>;</span><br><span class=\"line\">                address = <span class=\"keyword\">new</span> Uri(WsUrl);</span><br><span class=\"line\">                ServiceHost webservice_host = <span class=\"keyword\">new</span> ServiceHost(<span class=\"keyword\">typeof</span>(WSInterface), address); <span class=\"comment\">//绑定处理的类</span></span><br><span class=\"line\">                webservice_host.Description.Behaviors.Add(<span class=\"keyword\">new</span> ServiceMetadataBehavior() &#123; HttpGetEnabled = <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//=======设置最大连接数</span></span><br><span class=\"line\">                ServiceThrottlingBehavior behavior = <span class=\"keyword\">new</span> ServiceThrottlingBehavior();</span><br><span class=\"line\">                behavior.MaxConcurrentCalls = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                behavior.MaxConcurrentInstances = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                behavior.MaxConcurrentSessions = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                webservice_host.Description.Behaviors.Add(behavior);</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;Webservice请求URL---&gt;&quot;</span> + WsUrl);</span><br><span class=\"line\">                webservice_host.Open(); </span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;WCF服务启动成功!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.ReadKey(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (Exception qq)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(qq.Message);</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;WCF服务启动失败!&quot;</span>);</span><br><span class=\"line\">                Console.Read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":2934,"excerpt":"<p>不需要部署在iis上，直接打开exe程序即可开启接口。<br>同时支持创建一个支持http请求和Webservice接口的wcf服务</p>","more":"<h5 id=\"Http请求\"><a href=\"#Http请求\" class=\"headerlink\" title=\"Http请求\"></a>Http请求</h5><p>设置了兼容性，不用继承接口，在一个类里可以完成url和参数的设置</p>\n<h6 id=\"HttpInterface-cs\"><a href=\"#HttpInterface-cs\" class=\"headerlink\" title=\"HttpInterface.cs\"></a>HttpInterface.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> http://127.0.0.1:8880</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ServiceContract</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpInterface</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 测试接口</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 调用示例 http://127.0.0.1:8880/wcfapp/TestHttp?test1=测试</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;idCardNo&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">OperationContract</span>]</span><br><span class=\"line\">    [<span class=\"meta\">WebInvoke(Method = <span class=\"meta-string\">&quot;*&quot;</span>,</span></span><br><span class=\"line\"><span class=\"meta\">    UriTemplate = <span class=\"meta-string\">&quot;wcfapp/testhttp?test1=&#123;test1&#125;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"meta\">    RequestFormat = WebMessageFormat.Json,</span></span><br><span class=\"line\"><span class=\"meta\">    ResponseFormat = WebMessageFormat.Xml,</span></span><br><span class=\"line\"><span class=\"meta\">    BodyStyle = WebMessageBodyStyle.Bare)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">TestHttp</span> (<span class=\"params\"><span class=\"built_in\">string</span> test1</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.Format(<span class=\"string\">&quot;HTTP返回测试内容 = &#123;0&#125;&quot;</span>,test1);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"WebService\"><a href=\"#WebService\" class=\"headerlink\" title=\"WebService\"></a>WebService</h5><p>调用接口时注意，方法名= 类名</p>\n<h6 id=\"WSInterface-cs\"><a href=\"#WSInterface-cs\" class=\"headerlink\" title=\"WSInterface.cs\"></a>WSInterface.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> http://127.0.0.1:8881/wstest?wsdl</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ServiceContract</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WSInterface</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">OperationContract</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">TestWS</span>(<span class=\"params\"><span class=\"built_in\">string</span> test1</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.Format(<span class=\"string\">&quot;Webservice返回测试内容 = &#123;0&#125;&quot;</span>, test1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.Title = <span class=\"string\">&quot;同时支持http和Webservice交互的服务&quot;</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//可以突出重点输出内容</span></span><br><span class=\"line\">                Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;WCF服务正在初始化.....&quot;</span>);</span><br><span class=\"line\">                Console.ForegroundColor = ConsoleColor.Gray;</span><br><span class=\"line\">       </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 支持Post和Get</span></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;======================================&quot;</span>);</span><br><span class=\"line\">                String HttpUrl = <span class=\"string\">&quot;http://127.0.0.1:8880&quot;</span>;</span><br><span class=\"line\">                Uri address = <span class=\"keyword\">new</span> Uri(HttpUrl);</span><br><span class=\"line\">                WebServiceHost http_host = <span class=\"keyword\">new</span> WebServiceHost(<span class=\"keyword\">typeof</span>(HttpInterface), address);  <span class=\"comment\">//绑定处理的类</span></span><br><span class=\"line\">                http_host.Description.Behaviors.Add(<span class=\"keyword\">new</span> ServiceMetadataBehavior() &#123; HttpGetEnabled = <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">                http_host.Open();</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;Http请求URL---&gt;&quot;</span> + HttpUrl);</span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 支持Webservice</span></span><br><span class=\"line\">                String WsUrl = <span class=\"string\">&quot;http://127.0.0.1:8881/wstest&quot;</span>;</span><br><span class=\"line\">                address = <span class=\"keyword\">new</span> Uri(WsUrl);</span><br><span class=\"line\">                ServiceHost webservice_host = <span class=\"keyword\">new</span> ServiceHost(<span class=\"keyword\">typeof</span>(WSInterface), address); <span class=\"comment\">//绑定处理的类</span></span><br><span class=\"line\">                webservice_host.Description.Behaviors.Add(<span class=\"keyword\">new</span> ServiceMetadataBehavior() &#123; HttpGetEnabled = <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//=======设置最大连接数</span></span><br><span class=\"line\">                ServiceThrottlingBehavior behavior = <span class=\"keyword\">new</span> ServiceThrottlingBehavior();</span><br><span class=\"line\">                behavior.MaxConcurrentCalls = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                behavior.MaxConcurrentInstances = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                behavior.MaxConcurrentSessions = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                webservice_host.Description.Behaviors.Add(behavior);</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;Webservice请求URL---&gt;&quot;</span> + WsUrl);</span><br><span class=\"line\">                webservice_host.Open(); </span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;WCF服务启动成功!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.ReadKey(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (Exception qq)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(qq.Message);</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;WCF服务启动失败!&quot;</span>);</span><br><span class=\"line\">                Console.Read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"万万没想到 用理工科思维理解世界","date":"2020-07-04T09:53:02.000Z","_content":"\n### Part One 反常识思维\n\n他们有时候把自己的价值判断称为“常识”，因为这些判断本来就是从人的原始思维而来的，然而现代社会产生了另一种思维，却是\"反常识\"的。\n<!--more-->\n#### 反常识思维\n\n##### 取舍思维(tradeoff)\n\n两个好东西我不可能都要，那么我愿意牺牲(off)这个，来换取(trade)那个。\n\n\"tradeoff\"要求我们知道每一个事物的利弊。世界上并没有多少事情是“在没有是任何人境况变坏的前提下使得至少一个人变得更好”的所谓“帕累托改进”，绝大多数情况下兴一利必生一弊，而利弊都不是无限大的。\n\n#### 别想说服我！\n\n##### 确认偏误(confirmation bias)\n\n如果你已经开始相信一个东西了，那么你就会主动寻见能够增强这种相信的信息，乃至不顾事实。一旦我们有了某种偏见，我们就无法改变主意了。\n\n要主动刻意地消费，吸收有可能修正我们观念的新信息，而不是吸收对我们现有观念的肯定(Consume deliberately。 Take in information over affirmation)。\n\n#### 真理追求者\n\n两个真诚而理性的人应该对事情有相同的看法，如果争论不欢而散，一定是有人不诚实!\n\n如果我们是诚实的真理追求者，我们终将能够达成一致。\n\n#### 坏比好重要\n\n##### 损失厌恶(negativity bias)\n\n人们对负面感情的重视程度总是超过正面感情。\n\n本能归本能，有些人可以超越自己的本能。他们知道自己强烈的负面情绪会带来偏见，所以他们不轻易纵容这种情绪。他们看到好的冒险机会敢上，遭遇损失却不放在心上。他们看见好人好事主动夸，听说坏消息能够保持淡定。\n\n#### 最简单概率论的五个智慧\n\n1. 随机--有些事情就是无缘无故地发生的。大多数事情并不是完全的随机事件，却都有一定的随机因素。偶然和必然如果结合在一起，就没有那么容易理解了\n2. 误差--学会忽略误差范围内的任何波动。\n3. 赌徒谬误--如果过去一段时间内发生的事情不那么均匀，人们就错误地以为未来的事情会尽量往\"抹平\"的方向走。\n4. 在没有规律的地方发现规律--独立随机事件的发生是没有规律和不可预测的。未来是不可被精确预测的，这个世界并不像钟表那样运行。\n5. 小数定律--如果样本不够大，那么它就会表现为各种极端情况，而这些情况可能跟本性一点关系没有\n\n#### 一颗阴谋论的心\n\n##### 美国的阴谋\n\n所有这些阴谋论都有一个共同的思维模式。这个思维模式就是不承认巧合，不承认有些事情是自然发生的，认为一切的背后都有联系、有目的。合理性和可能性\n\nA和B同时成立的可能性小于等于A成立的可能性，这是概率论的常识。增加细节也许可以增加合理性，但是一定减少可能性。\n\n##### 目的与科学\n\n自然没有目的，人类社会的很多现象往往也没有什么目的。认为凡事都有目的，是普通人思维区别于科学思维的根本之一。\n\n#### 桥段会毁了你的生活\n\n一个人一旦熟知了\"TV Tropes\"上的各种桥段，再看电视剧就会只看到一堆库函数。这样看电视剧还有意思吗?\n\n真正的原创剧情是高雅文学和文艺片的事情，流行文学和商业片只需要\"好看的\"剧情。\n\n就算所有桥段都已经被发明了，商业片仍然可以拍得很好看。\n\n#### 健康的经济学\n\n工作重要还是健康重要?这个问题不是心灵鸡汤问题，而是经济学问题。\n\n对待健康和工作的正确态度，不是一味地强调某一端，而是需要根据自己的情况合理计算。\n\n某些事业会使人完全忽略任何形式的计算，人们为了完成这个实业可以什么都不顾。\n\n#### 核电站能出什么大事\n\n1. 核爆--维持核电站反应堆中的链式反应是很不容易的，以至于如果失控，链式反应会立刻停止。燃料会继续变热，像日本这样需要灌水冷却，但这种变热不是链式反应，也就是说哪怕你不管了，让燃料自己慢慢冷却，它也不会发生核爆。核电事故的有害性在辐射。核电站泄漏对公众的真正危害是癌症。\n2. 癌症--并不是说一旦被核辐射了，25年或者多少年内就一定会得癌症。核辐射致癌的数学是在20%的\"基础概率\"的基础上，增加人死于癌症的概率。这个被增加的概率与辐射的剂量成正比，具体地说说就是每受到25雷姆的辐射，得癌症的概率增加一个百分点。\n3. 哲学--我们有权为了取得能源而牺牲这400个人吗?跟火电相比，核电就像民主制度一样，虽然也不是个好的发电方式，却是\"最不坏\"的发电方式。\n\n#### Part Two 成功学的解药\n\n我们需要的是科学的励志，只有你的理论具有普遍意义，你的成功才能被复制。\n\n#### 科学的励志和励志的科学\n\n真正能左右成绩的品质只有一个:自控。研究者普遍认为，排除智力因素，不管你心目中的成功是个人成就、家庭幸福还是人际关系，最能决定成功的只有自控。\n\n自控需要意志力。意志力其实是一种生理机能。它就好像人的肌肉一样每次使用都需要消耗能量，而且用多了会疲惫。我们可以想办法合理地支配这种资源，甚至像锻炼肌肉一样增加意志力的容量。而这一切必须建立在对意志力的科学的认知基础之上。\n\n做选择会消耗意志力，冒险也需要意志力。\n\n除了好习惯可以减少意志力消耗外，作者提到另一个重要的自控手段是自我监控。我们可以把自己经历的`每一秒时间，花的每一分钱都上传到专门的网站上以作记录。\n\n怎么提高意志力?真正有效的办法是\"常立志\"。意志力是一种通用资源，这意味着你可以通过做一些日常小事来提高意志力，然后把它用在其他事情上。一个有效的练习方法就是做自己不习惯做的事，比如你习惯用右手，你可以有意识地用左手。\n\n#### 匹夫怎么逆袭\n\n1. 你要知道你的不利条件，在某些情况下可能是你的有利条件;而巨人的所谓有利条件，在某些情况下可能是他的不利条件。\n2. 你绝对不能按照对手的打法去跟他玩，你有时候得使用非常规手段。\n\n倒U曲线:在一个东西成长的初期，你每增加一点投入都能获得一点回报;然后它会进入一个平台期，继续增加投入并不能获得更多的回报;而过了平台期再投入，回报反而是负的。维护现有的社会格局和强调遵守游戏规则是高富帅的事，而改变游戏规则则是屌丝的特权。\n\n#### 练习一万小时成天才刻意练习\n\n1. 只在\"学习区\"学习\n2. 把要训练的内容分成有针对性的小块，对每一个小块进行重复练习\n3. 在整个练习过程中，随时能获得有效的反馈。\n4. 练习时注意力必须高度集中\n\n只在\"学习区\"学习\n\n有效的练习任务必须在受训者的学习区内进行，它具有高度的针对性。训练者必须随时了解自己最需要改进的地方。一旦已经学会了某个东西，就不应该继续在上面花费时间，应该立即转入下一个困难点。持续进步的关键就是持续地在\"学习区\"做事。\n\n掌握套路\n\n人的技能，取决于这两种工作记忆。专家做的事情，就是使用有限的短期工作记忆，去调用自己几乎无限的长期工作记忆，而刻意练习，就是在大脑中建立长期工作记忆的过程。用什么方法才能迅速地把技能套路\"长\"在身上呢?关键在于两点:\n\n* 必须进行大量的重复训练\n* 训练必须有高度的针对性\n\n首先你要把整个动作或者整首曲子过一遍，然后把它分解为很多小块，一块一块地反复练习。在这种训练中一定要慢，只有慢下来才能感知技能的内部结构，注意到自己的错误。\n\n想要把一个动作套路，一个技能，哪怕是仅仅是一个生活习惯，甚至是一种心态，\"长\"在大脑之中，唯一的方法是不断重复。\n\n想要掌握一项技能，要像运动员一样，需要不停地练习实战动作，不停地比赛，而不是不停地看录像。\n\n在有即时反馈的情况下，一个人的进步速度非常之快，而且是实实在在的。\n\n自己对自己的看法，与别人对自己的看法，很可能会非常不同。\"当局者迷，旁观者清\"我们需要一个旁观者来指出我们自己注意不到的错误。\n\n反馈者不见得比你的水平高，关键是他们不是你，他们可以从你看不到的角度看你。\n\n反馈还要有\"即时性\"，要让实践者立即得到反馈意见。\n\n一个动作做得好与不好，最好有教练随时指出，本人必须能够随时了解练习结果。看不到结果的练习等于没有练习:如果只是应付了事，你不但不会变好，而且会对好坏不再关心。在某种程度上，刻意练习是以错误为中心的练习。练习者必须要对错误极度敏感，一旦发现了自己错了就会感到非常不舒服，一直练习到改正为止。\n\n#### 最高级的想象力是不自由的\n\n自由的\"what if\"思维，只是高级想象力活动的第一步，其背后不自由的东西才是关键。\n\n一个`理论物理学家可能每天都有无数个怪异的想法，真正的困难不是产生\"怪异\"的想法，而是产生\"对\"的想法。\n\n#### 思维密集度和牛人的反击\n\n思维密集度=准备这个读物需要的总时间/阅读这个读物需要的时间。\n\n#### 上网能够避免浅薄吗?\n\n上网的关键态度是要成为网络的主人，而不做各种超链接的奴隶。高效率的上网应该像自闭症患者一样具有很强的目的性，以我为主，不被无关信息左右，就算是纯粹为了上网娱乐也无可厚非，这时候读得快就是优点。一个真正的智者不会让上网占用读书时间，他应该经常能够平静地深入思考。\n\n#### 高效\"冲浪\"的方法\n\n第一步，随便翻翻(toss)\n\n在浏览器的书签栏上建立一个文件夹，其中包括所有每天必去访问的新闻站点和论坛。\n\n选择一个集中的时间专门看新闻。鼠标点击这个文件夹，选择全部在标签页打开然后浏览所有这些站点的标题。看到感兴趣的就用鼠标中键点击。\n\n只点不读，直到把所有要去的站点都浏览一遍，把所有想看的文章都点过为止。\n\n第二步。略读(skim)\n\n等到挑选出来要读的这十几条或者几十条新闻之后，一条一条地快速浏览其内容。给每条新闻一个极短的时间，大概扫视一遍就可以了。然后迅速关闭它。看到值得仔细读的文章也要先速读，但要临时保存下来。\n\n第三步，精读(read)\n\n能够进入这一步的文章已经非常有限了，每天也就那么几篇而已。找空闲时间把它们仔细读完。\n\n#### \"窄框架\"和\"宽框架\"\n\n所谓窄框架，就是遇到一个东西做一次决策，一事一议;而宽框架则是把所有东西都摆在桌面上集中选择。\n\n#### 笔记本就是力量\n\n记笔记的最直接目的是为了形成自己的知识体系，改变自己看事物的眼光。\n\n笔记系统的一个附带好处是它可以帮我们把新的知识跟自己已有的知识联系起来。一般人善于发现新事物的不同点，而真正的高手则善于发现共同点。一旦发现新知识和已有知识的共同点，这个知识就彻底\"长\"在我们身上了。\n\n#### 用强力研读书\n\n新书要读两遍\n\n第一遍是正常通读，只要放松地欣赏作者的精妙思想和有趣故事即可。在读二遍的同时写下读书笔记。这时候就不要每个字都读了，书中作为例子的故事大可跳过，要专注于思想脉络。\n\n什么是好的读书笔记\n\n1. 清晰地表现每一章的逻辑脉络\n2. 带走书中所有的亮点\n3. 有大量的自己的看法和心得\n4. 发现这本书和以前读过的其他书或文章的联系\n\n#### 创新是落后者的特权:三个竞争故事\n\n分权管理方式是谁的创新?你可以说是思想是美国人杜鲁克从通用提炼出来的，但仅仅有思想不叫创新，敢于用这个思想才叫创新。\n\n企业不能每年都搞一次这种彻底改革。对于领先的企业，更没有必要冒这种风险。谚语说，If it works，don't fix it!只有落后者，光脚不怕穿鞋的，反而可以冒这个险。冒险至少还有赢的机会，不冒险就输定了。后来者创新，后来者引领新潮流，是竞争中的一般规律。\n\n#### 过度自信是创业者的通行证\n\n创业者最重要的一个素质，恰恰是明知道很有可能失败却还要干。这帮人之所以成功不是因为他们善于计算概率，而是因为他们过度自信。\n\n这个世界属于爱冒险的人，它的运行规律是撑死胆大的饿死胆小的。那些过度自信的人失败的次数也会比一般人更多，如果要死的话也会死得非常快，但只要他们没死，只要他们还在继续尝试，那么他们最终成功的可能性要比一般人大得多。\n\n#### 夺魁者本色\n\n##### 最牛女生宿舍\n\n* 如果自己评估的胜率在20%以下，很多男性政客仍然要参选，而女性的就不愿意参选了。有些男的是不管概率多低都要参选。\n* 可是如果自我评估的胜率是在20%以上，女的甚至可能比男的更愿意参选。\n\n##### 竞争激素\n\n睾酮，可以让人在竞争中更敢于冒险，更乐意投入比赛，在比赛中更无私，更关心队友，更可能抗议对手犯规，甚至能更多的诉诸理性认知而不是感情冲动。如果一个人的睾酮水平不够，他就很难进入\"来之能战，战之能胜\"的兴奋状态。\n\n##### 战士和颤士\n\n如果你的COMT酶是快酶，那么你面对压力的时候就很容易保持一颗平常心。这并不是因为你的定力过人，而是因为多出来的多巴胺会被迅速清理掉。有些学者把这样的人称为\"战士\"(Warriors)，因为他们临危不惧。而如果你的COMT酶是慢酶，那么面对压力多巴胺就容易过多，导致自己惊慌失措，这样的人则被称为\"颤士\"(Worriers)。\n\n战士在战时的表现超过颤士，颤士在平时的表现超过战士。\n\n决定一个人喜不喜欢竞争的重要因素之一，是睾酮水平。而决定一个人面对竞争压力时的状态，是COMT基因。\n\n#### 打游戏的三个境界\n\n游戏的第一个境界是好玩。首先是\"现实感\"或者是\"超现实感\"。一个游戏让人觉得好玩，凭的就是它能让玩家特别逼真地\"做事\"。\n\n游戏的第二个境界是追求成就感。因为有两件事只存在于游戏之中:第一，\"世间自有公道，付出总有回报\";第二，也是更重要的一点是，回报是即时的。\n\n游戏的第三个境界是体育和科学的境界。进入这个境界的玩家不是\"玩\"游戏，而是\"训练\"，甚至是\"研究\"游戏。他们不再对升级和获得装备之类的事情兴奋，他们追求的是技艺。\n\n#### 穷人和富人的人脉结构\n\n##### 弱联系的强度\n\n\"弱联系\"的真正意义是把不同的社交圈子连接起来，从圈外给你提供有用的信息。根据弱联系理论，一个人在社会上获得机会的多少，与他的社交网络结构很有关系。人脉的关键不在于你融入了哪个圈子，而在于你能接触多少圈外的人。\n\n##### 谁给你的信息重要\n\n强联系告诉你的有用信息，你自己本来也有可能发现;而弱联系告诉你的有用信息，他要没告诉你，你恐怕就发现不了。\n\n虽然人们重视强联系，人们的大部分知识还是来自弱联系。\n\n##### 别跟熟人合伙\n\n已经有统计表明，从弱联系那里获得想法，乃至于与弱联系合伙创业，有利于提高一个`公司的创新能力。\n\n当往我们考虑找人创业，找人合作，哪怕找人了解什么信息的时候，\"弱联系\"才是最佳选择。\n\n### Part Three 霍金的答案\n\n哪怕这个问题是全新的，在大多数情况下我们也能用旧的知识解决它。掌握科学知识的人有凭借理论推导就能破解世界的力量。\n\n#### 亚里士多为何不数数妻子有几颗牙\n\n关键在于，科学既不是课本上那一条条知识点，也不是学科竞赛中那一道道难题，它可以随时取用于生活的实在经验。真正懂科学的人不但得对所学知识倒背如流，还得能举一反三，乃至于用这些知识解释身边的现象。能求解各种抽象难题，再厉害也不过是纸上谈兵而已；而能把知识活学活用，才是真本事。\n\n科学知识是一种高度结构化的知识，其有一个很酷的性质：只要学会了一般原理，就能解决无穷多表面看来千奇百怪的问题。掌握科学知识的人可以一听你的问题，不必亲临现场，完全凭借逻辑推理就能告诉你答案。有时候他们推理出来的答案可能出乎意料甚至违反常识，然而你却不得不服。\n\n破解世界大概有两个方法。一个方法是从已知推未知，只要掌握基本原理，似乎在理论上你就应该能推导出所有现象，只动脑而不动手。但《再冷门的问题也有最热闹的答案》这本书中的几个例子恰恰告诉我们这几乎是不可能的。现有的科学原理远未完备只是一个原因，更重要的原因是复杂现象涉及的数学计算和各种相关因素多到不可能用理论推导的程度。在这种情况下，“动手”才是更直截了当的方法。\n\n#### 物理学的逻辑和霍金的答案\n\n判断一个物理理论的好坏不在于这个理论是否符合人的直觉，或者是否够漂亮，而在于它能不能做出预言。\n\n物理定律应该适用于所有时间和所有地点，所有事件都必须精确地符合物理定律的数学方程。\n\n物理定律必须处处管用，以至于上帝就算存在也无事可做；而一个好的物理理论必须不仅能解释已知的现象，还能对未知的现象做出预言。\n\n#### 一个关于转世的流行病学研究\n\n在医学界和心理学界，如果科学家想要研究某个因素对人的影响，比如吸烟是否有害健康或者受虐待儿童长大以后是否犯罪率更高之类，往往1无法直接做实验，而只能采取搜集案例做统计分析的本办法，这个方法称为“流行病学（epidemiology）”。流行病学的结果远远不能作为最后的科学结论，但是这个方法仍然是科学的方法，也可以说是在你没有别的方法的时候所能是使用的最科学府办法。\n\n#### 摆脱童稚状态\n\n##### 绝学与证据\n\n能用理论解释的结论未必正确，不能用理论解释的结论未必错误。\n\n只要用证据，反驳一个理论是非常简单的事情。\n\n##### 相关性思维\n\n相关性研究只是科研的初级阶段。\n\n使用大规模统计发现实在的相关性这个最简单的科学方法，是我们摆脱童稚状态的第一步。\n\n##### 怎么发现因果\n\n有相关性未必有因果关系，这是一个非常重要的思维。\n\n不管调查到什么程度，都只是对真实世界的管中窥豹。科学研究的是有限的真理。\n\n##### 科学的目标\n\n相关性思维和因果性思维只是思维方式的转变，科学研究的真正关键在于发现机制。机制提出来之后，这个机制的每一步也必须是可以验证的，一个课题只要做到这个程度才算超越了集邮阶段。\n\n有时候这个过程会反过来，也就是用现有的机制理论推导一些现象，再去寻找证据证实。\n\n每一篇论文都是我们从个人感觉到客观事实，从客观事实到因果关系，从因果关系到能推广使用的机制，这个过程的一小步。\n\n#### 怎样才算是主流科学\n\n只此一家，别无分店。什么新东西都得从我这儿长出去，这就是科学的态度。这种态度干掉的错误想法比正确想法多得多，比如“水变油”、永动机、黑洞发电之类。只有这样的态度才能建立一个高效而严谨的学术关系。也只有这个体系才能确保一个实验结果经得起在任何时间任何地点的重复，一个技术可以随便复制使用，既不要求使用者道德高尚、人格完美。也不要求他掌握什么不可言传的心法。\n\n#### 科研的格调\n\n科学本身是客观的，但科学家都是主观的。最好的科学家甚至可能是极度主观的。有爱恨，才是真正的科学家。敢说不，才是真正的科学家。\n\n#### 喝一口的心理学和喝一瓶的心理学\n\n目前大多数的心理学实验，是“喝一口的心理学”，而不是“喝一瓶的心理学”。所谓“积极心理暗示“，其关键也许就在于让受试者感到新鲜。\n\n#### 医学研究能当真吗？\n\n有时候他们说大蒜可以降低有害胆固醇，有时候又说打算其实不能降低有害胆固醇。在这种情况下，你应该怎么办呢？\n\n* 以最权威科学家，比如诺贝尔奖得主或者《自然》上的论文的意见为主。\n* 科学家中的“主流意见”（如果“主流”真的存在的话）为主。\n* 以最新发表的意见为主\n* 别当真，科学新闻可以当娱乐新闻看。\n\n##### 真空农场中的球形鸡\n\n所有物理定律，乃至所有科学理论，都只不过是主观模型。\n用模型预测未来是非常困难的事情，越复杂的模型就月困难，而且越细致的未来就越不好预测。\n","source":"_posts/万万没想到-用理工科思维理解世界.md","raw":"---\ntitle: 万万没想到 用理工科思维理解世界\ndate: 2020-07-04 17:53:02\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 万维钢\n---\n\n### Part One 反常识思维\n\n他们有时候把自己的价值判断称为“常识”，因为这些判断本来就是从人的原始思维而来的，然而现代社会产生了另一种思维，却是\"反常识\"的。\n<!--more-->\n#### 反常识思维\n\n##### 取舍思维(tradeoff)\n\n两个好东西我不可能都要，那么我愿意牺牲(off)这个，来换取(trade)那个。\n\n\"tradeoff\"要求我们知道每一个事物的利弊。世界上并没有多少事情是“在没有是任何人境况变坏的前提下使得至少一个人变得更好”的所谓“帕累托改进”，绝大多数情况下兴一利必生一弊，而利弊都不是无限大的。\n\n#### 别想说服我！\n\n##### 确认偏误(confirmation bias)\n\n如果你已经开始相信一个东西了，那么你就会主动寻见能够增强这种相信的信息，乃至不顾事实。一旦我们有了某种偏见，我们就无法改变主意了。\n\n要主动刻意地消费，吸收有可能修正我们观念的新信息，而不是吸收对我们现有观念的肯定(Consume deliberately。 Take in information over affirmation)。\n\n#### 真理追求者\n\n两个真诚而理性的人应该对事情有相同的看法，如果争论不欢而散，一定是有人不诚实!\n\n如果我们是诚实的真理追求者，我们终将能够达成一致。\n\n#### 坏比好重要\n\n##### 损失厌恶(negativity bias)\n\n人们对负面感情的重视程度总是超过正面感情。\n\n本能归本能，有些人可以超越自己的本能。他们知道自己强烈的负面情绪会带来偏见，所以他们不轻易纵容这种情绪。他们看到好的冒险机会敢上，遭遇损失却不放在心上。他们看见好人好事主动夸，听说坏消息能够保持淡定。\n\n#### 最简单概率论的五个智慧\n\n1. 随机--有些事情就是无缘无故地发生的。大多数事情并不是完全的随机事件，却都有一定的随机因素。偶然和必然如果结合在一起，就没有那么容易理解了\n2. 误差--学会忽略误差范围内的任何波动。\n3. 赌徒谬误--如果过去一段时间内发生的事情不那么均匀，人们就错误地以为未来的事情会尽量往\"抹平\"的方向走。\n4. 在没有规律的地方发现规律--独立随机事件的发生是没有规律和不可预测的。未来是不可被精确预测的，这个世界并不像钟表那样运行。\n5. 小数定律--如果样本不够大，那么它就会表现为各种极端情况，而这些情况可能跟本性一点关系没有\n\n#### 一颗阴谋论的心\n\n##### 美国的阴谋\n\n所有这些阴谋论都有一个共同的思维模式。这个思维模式就是不承认巧合，不承认有些事情是自然发生的，认为一切的背后都有联系、有目的。合理性和可能性\n\nA和B同时成立的可能性小于等于A成立的可能性，这是概率论的常识。增加细节也许可以增加合理性，但是一定减少可能性。\n\n##### 目的与科学\n\n自然没有目的，人类社会的很多现象往往也没有什么目的。认为凡事都有目的，是普通人思维区别于科学思维的根本之一。\n\n#### 桥段会毁了你的生活\n\n一个人一旦熟知了\"TV Tropes\"上的各种桥段，再看电视剧就会只看到一堆库函数。这样看电视剧还有意思吗?\n\n真正的原创剧情是高雅文学和文艺片的事情，流行文学和商业片只需要\"好看的\"剧情。\n\n就算所有桥段都已经被发明了，商业片仍然可以拍得很好看。\n\n#### 健康的经济学\n\n工作重要还是健康重要?这个问题不是心灵鸡汤问题，而是经济学问题。\n\n对待健康和工作的正确态度，不是一味地强调某一端，而是需要根据自己的情况合理计算。\n\n某些事业会使人完全忽略任何形式的计算，人们为了完成这个实业可以什么都不顾。\n\n#### 核电站能出什么大事\n\n1. 核爆--维持核电站反应堆中的链式反应是很不容易的，以至于如果失控，链式反应会立刻停止。燃料会继续变热，像日本这样需要灌水冷却，但这种变热不是链式反应，也就是说哪怕你不管了，让燃料自己慢慢冷却，它也不会发生核爆。核电事故的有害性在辐射。核电站泄漏对公众的真正危害是癌症。\n2. 癌症--并不是说一旦被核辐射了，25年或者多少年内就一定会得癌症。核辐射致癌的数学是在20%的\"基础概率\"的基础上，增加人死于癌症的概率。这个被增加的概率与辐射的剂量成正比，具体地说说就是每受到25雷姆的辐射，得癌症的概率增加一个百分点。\n3. 哲学--我们有权为了取得能源而牺牲这400个人吗?跟火电相比，核电就像民主制度一样，虽然也不是个好的发电方式，却是\"最不坏\"的发电方式。\n\n#### Part Two 成功学的解药\n\n我们需要的是科学的励志，只有你的理论具有普遍意义，你的成功才能被复制。\n\n#### 科学的励志和励志的科学\n\n真正能左右成绩的品质只有一个:自控。研究者普遍认为，排除智力因素，不管你心目中的成功是个人成就、家庭幸福还是人际关系，最能决定成功的只有自控。\n\n自控需要意志力。意志力其实是一种生理机能。它就好像人的肌肉一样每次使用都需要消耗能量，而且用多了会疲惫。我们可以想办法合理地支配这种资源，甚至像锻炼肌肉一样增加意志力的容量。而这一切必须建立在对意志力的科学的认知基础之上。\n\n做选择会消耗意志力，冒险也需要意志力。\n\n除了好习惯可以减少意志力消耗外，作者提到另一个重要的自控手段是自我监控。我们可以把自己经历的`每一秒时间，花的每一分钱都上传到专门的网站上以作记录。\n\n怎么提高意志力?真正有效的办法是\"常立志\"。意志力是一种通用资源，这意味着你可以通过做一些日常小事来提高意志力，然后把它用在其他事情上。一个有效的练习方法就是做自己不习惯做的事，比如你习惯用右手，你可以有意识地用左手。\n\n#### 匹夫怎么逆袭\n\n1. 你要知道你的不利条件，在某些情况下可能是你的有利条件;而巨人的所谓有利条件，在某些情况下可能是他的不利条件。\n2. 你绝对不能按照对手的打法去跟他玩，你有时候得使用非常规手段。\n\n倒U曲线:在一个东西成长的初期，你每增加一点投入都能获得一点回报;然后它会进入一个平台期，继续增加投入并不能获得更多的回报;而过了平台期再投入，回报反而是负的。维护现有的社会格局和强调遵守游戏规则是高富帅的事，而改变游戏规则则是屌丝的特权。\n\n#### 练习一万小时成天才刻意练习\n\n1. 只在\"学习区\"学习\n2. 把要训练的内容分成有针对性的小块，对每一个小块进行重复练习\n3. 在整个练习过程中，随时能获得有效的反馈。\n4. 练习时注意力必须高度集中\n\n只在\"学习区\"学习\n\n有效的练习任务必须在受训者的学习区内进行，它具有高度的针对性。训练者必须随时了解自己最需要改进的地方。一旦已经学会了某个东西，就不应该继续在上面花费时间，应该立即转入下一个困难点。持续进步的关键就是持续地在\"学习区\"做事。\n\n掌握套路\n\n人的技能，取决于这两种工作记忆。专家做的事情，就是使用有限的短期工作记忆，去调用自己几乎无限的长期工作记忆，而刻意练习，就是在大脑中建立长期工作记忆的过程。用什么方法才能迅速地把技能套路\"长\"在身上呢?关键在于两点:\n\n* 必须进行大量的重复训练\n* 训练必须有高度的针对性\n\n首先你要把整个动作或者整首曲子过一遍，然后把它分解为很多小块，一块一块地反复练习。在这种训练中一定要慢，只有慢下来才能感知技能的内部结构，注意到自己的错误。\n\n想要把一个动作套路，一个技能，哪怕是仅仅是一个生活习惯，甚至是一种心态，\"长\"在大脑之中，唯一的方法是不断重复。\n\n想要掌握一项技能，要像运动员一样，需要不停地练习实战动作，不停地比赛，而不是不停地看录像。\n\n在有即时反馈的情况下，一个人的进步速度非常之快，而且是实实在在的。\n\n自己对自己的看法，与别人对自己的看法，很可能会非常不同。\"当局者迷，旁观者清\"我们需要一个旁观者来指出我们自己注意不到的错误。\n\n反馈者不见得比你的水平高，关键是他们不是你，他们可以从你看不到的角度看你。\n\n反馈还要有\"即时性\"，要让实践者立即得到反馈意见。\n\n一个动作做得好与不好，最好有教练随时指出，本人必须能够随时了解练习结果。看不到结果的练习等于没有练习:如果只是应付了事，你不但不会变好，而且会对好坏不再关心。在某种程度上，刻意练习是以错误为中心的练习。练习者必须要对错误极度敏感，一旦发现了自己错了就会感到非常不舒服，一直练习到改正为止。\n\n#### 最高级的想象力是不自由的\n\n自由的\"what if\"思维，只是高级想象力活动的第一步，其背后不自由的东西才是关键。\n\n一个`理论物理学家可能每天都有无数个怪异的想法，真正的困难不是产生\"怪异\"的想法，而是产生\"对\"的想法。\n\n#### 思维密集度和牛人的反击\n\n思维密集度=准备这个读物需要的总时间/阅读这个读物需要的时间。\n\n#### 上网能够避免浅薄吗?\n\n上网的关键态度是要成为网络的主人，而不做各种超链接的奴隶。高效率的上网应该像自闭症患者一样具有很强的目的性，以我为主，不被无关信息左右，就算是纯粹为了上网娱乐也无可厚非，这时候读得快就是优点。一个真正的智者不会让上网占用读书时间，他应该经常能够平静地深入思考。\n\n#### 高效\"冲浪\"的方法\n\n第一步，随便翻翻(toss)\n\n在浏览器的书签栏上建立一个文件夹，其中包括所有每天必去访问的新闻站点和论坛。\n\n选择一个集中的时间专门看新闻。鼠标点击这个文件夹，选择全部在标签页打开然后浏览所有这些站点的标题。看到感兴趣的就用鼠标中键点击。\n\n只点不读，直到把所有要去的站点都浏览一遍，把所有想看的文章都点过为止。\n\n第二步。略读(skim)\n\n等到挑选出来要读的这十几条或者几十条新闻之后，一条一条地快速浏览其内容。给每条新闻一个极短的时间，大概扫视一遍就可以了。然后迅速关闭它。看到值得仔细读的文章也要先速读，但要临时保存下来。\n\n第三步，精读(read)\n\n能够进入这一步的文章已经非常有限了，每天也就那么几篇而已。找空闲时间把它们仔细读完。\n\n#### \"窄框架\"和\"宽框架\"\n\n所谓窄框架，就是遇到一个东西做一次决策，一事一议;而宽框架则是把所有东西都摆在桌面上集中选择。\n\n#### 笔记本就是力量\n\n记笔记的最直接目的是为了形成自己的知识体系，改变自己看事物的眼光。\n\n笔记系统的一个附带好处是它可以帮我们把新的知识跟自己已有的知识联系起来。一般人善于发现新事物的不同点，而真正的高手则善于发现共同点。一旦发现新知识和已有知识的共同点，这个知识就彻底\"长\"在我们身上了。\n\n#### 用强力研读书\n\n新书要读两遍\n\n第一遍是正常通读，只要放松地欣赏作者的精妙思想和有趣故事即可。在读二遍的同时写下读书笔记。这时候就不要每个字都读了，书中作为例子的故事大可跳过，要专注于思想脉络。\n\n什么是好的读书笔记\n\n1. 清晰地表现每一章的逻辑脉络\n2. 带走书中所有的亮点\n3. 有大量的自己的看法和心得\n4. 发现这本书和以前读过的其他书或文章的联系\n\n#### 创新是落后者的特权:三个竞争故事\n\n分权管理方式是谁的创新?你可以说是思想是美国人杜鲁克从通用提炼出来的，但仅仅有思想不叫创新，敢于用这个思想才叫创新。\n\n企业不能每年都搞一次这种彻底改革。对于领先的企业，更没有必要冒这种风险。谚语说，If it works，don't fix it!只有落后者，光脚不怕穿鞋的，反而可以冒这个险。冒险至少还有赢的机会，不冒险就输定了。后来者创新，后来者引领新潮流，是竞争中的一般规律。\n\n#### 过度自信是创业者的通行证\n\n创业者最重要的一个素质，恰恰是明知道很有可能失败却还要干。这帮人之所以成功不是因为他们善于计算概率，而是因为他们过度自信。\n\n这个世界属于爱冒险的人，它的运行规律是撑死胆大的饿死胆小的。那些过度自信的人失败的次数也会比一般人更多，如果要死的话也会死得非常快，但只要他们没死，只要他们还在继续尝试，那么他们最终成功的可能性要比一般人大得多。\n\n#### 夺魁者本色\n\n##### 最牛女生宿舍\n\n* 如果自己评估的胜率在20%以下，很多男性政客仍然要参选，而女性的就不愿意参选了。有些男的是不管概率多低都要参选。\n* 可是如果自我评估的胜率是在20%以上，女的甚至可能比男的更愿意参选。\n\n##### 竞争激素\n\n睾酮，可以让人在竞争中更敢于冒险，更乐意投入比赛，在比赛中更无私，更关心队友，更可能抗议对手犯规，甚至能更多的诉诸理性认知而不是感情冲动。如果一个人的睾酮水平不够，他就很难进入\"来之能战，战之能胜\"的兴奋状态。\n\n##### 战士和颤士\n\n如果你的COMT酶是快酶，那么你面对压力的时候就很容易保持一颗平常心。这并不是因为你的定力过人，而是因为多出来的多巴胺会被迅速清理掉。有些学者把这样的人称为\"战士\"(Warriors)，因为他们临危不惧。而如果你的COMT酶是慢酶，那么面对压力多巴胺就容易过多，导致自己惊慌失措，这样的人则被称为\"颤士\"(Worriers)。\n\n战士在战时的表现超过颤士，颤士在平时的表现超过战士。\n\n决定一个人喜不喜欢竞争的重要因素之一，是睾酮水平。而决定一个人面对竞争压力时的状态，是COMT基因。\n\n#### 打游戏的三个境界\n\n游戏的第一个境界是好玩。首先是\"现实感\"或者是\"超现实感\"。一个游戏让人觉得好玩，凭的就是它能让玩家特别逼真地\"做事\"。\n\n游戏的第二个境界是追求成就感。因为有两件事只存在于游戏之中:第一，\"世间自有公道，付出总有回报\";第二，也是更重要的一点是，回报是即时的。\n\n游戏的第三个境界是体育和科学的境界。进入这个境界的玩家不是\"玩\"游戏，而是\"训练\"，甚至是\"研究\"游戏。他们不再对升级和获得装备之类的事情兴奋，他们追求的是技艺。\n\n#### 穷人和富人的人脉结构\n\n##### 弱联系的强度\n\n\"弱联系\"的真正意义是把不同的社交圈子连接起来，从圈外给你提供有用的信息。根据弱联系理论，一个人在社会上获得机会的多少，与他的社交网络结构很有关系。人脉的关键不在于你融入了哪个圈子，而在于你能接触多少圈外的人。\n\n##### 谁给你的信息重要\n\n强联系告诉你的有用信息，你自己本来也有可能发现;而弱联系告诉你的有用信息，他要没告诉你，你恐怕就发现不了。\n\n虽然人们重视强联系，人们的大部分知识还是来自弱联系。\n\n##### 别跟熟人合伙\n\n已经有统计表明，从弱联系那里获得想法，乃至于与弱联系合伙创业，有利于提高一个`公司的创新能力。\n\n当往我们考虑找人创业，找人合作，哪怕找人了解什么信息的时候，\"弱联系\"才是最佳选择。\n\n### Part Three 霍金的答案\n\n哪怕这个问题是全新的，在大多数情况下我们也能用旧的知识解决它。掌握科学知识的人有凭借理论推导就能破解世界的力量。\n\n#### 亚里士多为何不数数妻子有几颗牙\n\n关键在于，科学既不是课本上那一条条知识点，也不是学科竞赛中那一道道难题，它可以随时取用于生活的实在经验。真正懂科学的人不但得对所学知识倒背如流，还得能举一反三，乃至于用这些知识解释身边的现象。能求解各种抽象难题，再厉害也不过是纸上谈兵而已；而能把知识活学活用，才是真本事。\n\n科学知识是一种高度结构化的知识，其有一个很酷的性质：只要学会了一般原理，就能解决无穷多表面看来千奇百怪的问题。掌握科学知识的人可以一听你的问题，不必亲临现场，完全凭借逻辑推理就能告诉你答案。有时候他们推理出来的答案可能出乎意料甚至违反常识，然而你却不得不服。\n\n破解世界大概有两个方法。一个方法是从已知推未知，只要掌握基本原理，似乎在理论上你就应该能推导出所有现象，只动脑而不动手。但《再冷门的问题也有最热闹的答案》这本书中的几个例子恰恰告诉我们这几乎是不可能的。现有的科学原理远未完备只是一个原因，更重要的原因是复杂现象涉及的数学计算和各种相关因素多到不可能用理论推导的程度。在这种情况下，“动手”才是更直截了当的方法。\n\n#### 物理学的逻辑和霍金的答案\n\n判断一个物理理论的好坏不在于这个理论是否符合人的直觉，或者是否够漂亮，而在于它能不能做出预言。\n\n物理定律应该适用于所有时间和所有地点，所有事件都必须精确地符合物理定律的数学方程。\n\n物理定律必须处处管用，以至于上帝就算存在也无事可做；而一个好的物理理论必须不仅能解释已知的现象，还能对未知的现象做出预言。\n\n#### 一个关于转世的流行病学研究\n\n在医学界和心理学界，如果科学家想要研究某个因素对人的影响，比如吸烟是否有害健康或者受虐待儿童长大以后是否犯罪率更高之类，往往1无法直接做实验，而只能采取搜集案例做统计分析的本办法，这个方法称为“流行病学（epidemiology）”。流行病学的结果远远不能作为最后的科学结论，但是这个方法仍然是科学的方法，也可以说是在你没有别的方法的时候所能是使用的最科学府办法。\n\n#### 摆脱童稚状态\n\n##### 绝学与证据\n\n能用理论解释的结论未必正确，不能用理论解释的结论未必错误。\n\n只要用证据，反驳一个理论是非常简单的事情。\n\n##### 相关性思维\n\n相关性研究只是科研的初级阶段。\n\n使用大规模统计发现实在的相关性这个最简单的科学方法，是我们摆脱童稚状态的第一步。\n\n##### 怎么发现因果\n\n有相关性未必有因果关系，这是一个非常重要的思维。\n\n不管调查到什么程度，都只是对真实世界的管中窥豹。科学研究的是有限的真理。\n\n##### 科学的目标\n\n相关性思维和因果性思维只是思维方式的转变，科学研究的真正关键在于发现机制。机制提出来之后，这个机制的每一步也必须是可以验证的，一个课题只要做到这个程度才算超越了集邮阶段。\n\n有时候这个过程会反过来，也就是用现有的机制理论推导一些现象，再去寻找证据证实。\n\n每一篇论文都是我们从个人感觉到客观事实，从客观事实到因果关系，从因果关系到能推广使用的机制，这个过程的一小步。\n\n#### 怎样才算是主流科学\n\n只此一家，别无分店。什么新东西都得从我这儿长出去，这就是科学的态度。这种态度干掉的错误想法比正确想法多得多，比如“水变油”、永动机、黑洞发电之类。只有这样的态度才能建立一个高效而严谨的学术关系。也只有这个体系才能确保一个实验结果经得起在任何时间任何地点的重复，一个技术可以随便复制使用，既不要求使用者道德高尚、人格完美。也不要求他掌握什么不可言传的心法。\n\n#### 科研的格调\n\n科学本身是客观的，但科学家都是主观的。最好的科学家甚至可能是极度主观的。有爱恨，才是真正的科学家。敢说不，才是真正的科学家。\n\n#### 喝一口的心理学和喝一瓶的心理学\n\n目前大多数的心理学实验，是“喝一口的心理学”，而不是“喝一瓶的心理学”。所谓“积极心理暗示“，其关键也许就在于让受试者感到新鲜。\n\n#### 医学研究能当真吗？\n\n有时候他们说大蒜可以降低有害胆固醇，有时候又说打算其实不能降低有害胆固醇。在这种情况下，你应该怎么办呢？\n\n* 以最权威科学家，比如诺贝尔奖得主或者《自然》上的论文的意见为主。\n* 科学家中的“主流意见”（如果“主流”真的存在的话）为主。\n* 以最新发表的意见为主\n* 别当真，科学新闻可以当娱乐新闻看。\n\n##### 真空农场中的球形鸡\n\n所有物理定律，乃至所有科学理论，都只不过是主观模型。\n用模型预测未来是非常困难的事情，越复杂的模型就月困难，而且越细致的未来就越不好预测。\n","slug":"万万没想到-用理工科思维理解世界","published":1,"updated":"2021-03-30T03:24:16.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0h0046vcua09escl0t","content":"<h3 id=\"Part-One-反常识思维\"><a href=\"#Part-One-反常识思维\" class=\"headerlink\" title=\"Part One 反常识思维\"></a>Part One 反常识思维</h3><p>他们有时候把自己的价值判断称为“常识”，因为这些判断本来就是从人的原始思维而来的，然而现代社会产生了另一种思维，却是”反常识”的。</p>\n<span id=\"more\"></span>\n<h4 id=\"反常识思维\"><a href=\"#反常识思维\" class=\"headerlink\" title=\"反常识思维\"></a>反常识思维</h4><h5 id=\"取舍思维-tradeoff\"><a href=\"#取舍思维-tradeoff\" class=\"headerlink\" title=\"取舍思维(tradeoff)\"></a>取舍思维(tradeoff)</h5><p>两个好东西我不可能都要，那么我愿意牺牲(off)这个，来换取(trade)那个。</p>\n<p>“tradeoff”要求我们知道每一个事物的利弊。世界上并没有多少事情是“在没有是任何人境况变坏的前提下使得至少一个人变得更好”的所谓“帕累托改进”，绝大多数情况下兴一利必生一弊，而利弊都不是无限大的。</p>\n<h4 id=\"别想说服我！\"><a href=\"#别想说服我！\" class=\"headerlink\" title=\"别想说服我！\"></a>别想说服我！</h4><h5 id=\"确认偏误-confirmation-bias\"><a href=\"#确认偏误-confirmation-bias\" class=\"headerlink\" title=\"确认偏误(confirmation bias)\"></a>确认偏误(confirmation bias)</h5><p>如果你已经开始相信一个东西了，那么你就会主动寻见能够增强这种相信的信息，乃至不顾事实。一旦我们有了某种偏见，我们就无法改变主意了。</p>\n<p>要主动刻意地消费，吸收有可能修正我们观念的新信息，而不是吸收对我们现有观念的肯定(Consume deliberately。 Take in information over affirmation)。</p>\n<h4 id=\"真理追求者\"><a href=\"#真理追求者\" class=\"headerlink\" title=\"真理追求者\"></a>真理追求者</h4><p>两个真诚而理性的人应该对事情有相同的看法，如果争论不欢而散，一定是有人不诚实!</p>\n<p>如果我们是诚实的真理追求者，我们终将能够达成一致。</p>\n<h4 id=\"坏比好重要\"><a href=\"#坏比好重要\" class=\"headerlink\" title=\"坏比好重要\"></a>坏比好重要</h4><h5 id=\"损失厌恶-negativity-bias\"><a href=\"#损失厌恶-negativity-bias\" class=\"headerlink\" title=\"损失厌恶(negativity bias)\"></a>损失厌恶(negativity bias)</h5><p>人们对负面感情的重视程度总是超过正面感情。</p>\n<p>本能归本能，有些人可以超越自己的本能。他们知道自己强烈的负面情绪会带来偏见，所以他们不轻易纵容这种情绪。他们看到好的冒险机会敢上，遭遇损失却不放在心上。他们看见好人好事主动夸，听说坏消息能够保持淡定。</p>\n<h4 id=\"最简单概率论的五个智慧\"><a href=\"#最简单概率论的五个智慧\" class=\"headerlink\" title=\"最简单概率论的五个智慧\"></a>最简单概率论的五个智慧</h4><ol>\n<li>随机–有些事情就是无缘无故地发生的。大多数事情并不是完全的随机事件，却都有一定的随机因素。偶然和必然如果结合在一起，就没有那么容易理解了</li>\n<li>误差–学会忽略误差范围内的任何波动。</li>\n<li>赌徒谬误–如果过去一段时间内发生的事情不那么均匀，人们就错误地以为未来的事情会尽量往”抹平”的方向走。</li>\n<li>在没有规律的地方发现规律–独立随机事件的发生是没有规律和不可预测的。未来是不可被精确预测的，这个世界并不像钟表那样运行。</li>\n<li>小数定律–如果样本不够大，那么它就会表现为各种极端情况，而这些情况可能跟本性一点关系没有</li>\n</ol>\n<h4 id=\"一颗阴谋论的心\"><a href=\"#一颗阴谋论的心\" class=\"headerlink\" title=\"一颗阴谋论的心\"></a>一颗阴谋论的心</h4><h5 id=\"美国的阴谋\"><a href=\"#美国的阴谋\" class=\"headerlink\" title=\"美国的阴谋\"></a>美国的阴谋</h5><p>所有这些阴谋论都有一个共同的思维模式。这个思维模式就是不承认巧合，不承认有些事情是自然发生的，认为一切的背后都有联系、有目的。合理性和可能性</p>\n<p>A和B同时成立的可能性小于等于A成立的可能性，这是概率论的常识。增加细节也许可以增加合理性，但是一定减少可能性。</p>\n<h5 id=\"目的与科学\"><a href=\"#目的与科学\" class=\"headerlink\" title=\"目的与科学\"></a>目的与科学</h5><p>自然没有目的，人类社会的很多现象往往也没有什么目的。认为凡事都有目的，是普通人思维区别于科学思维的根本之一。</p>\n<h4 id=\"桥段会毁了你的生活\"><a href=\"#桥段会毁了你的生活\" class=\"headerlink\" title=\"桥段会毁了你的生活\"></a>桥段会毁了你的生活</h4><p>一个人一旦熟知了”TV Tropes”上的各种桥段，再看电视剧就会只看到一堆库函数。这样看电视剧还有意思吗?</p>\n<p>真正的原创剧情是高雅文学和文艺片的事情，流行文学和商业片只需要”好看的”剧情。</p>\n<p>就算所有桥段都已经被发明了，商业片仍然可以拍得很好看。</p>\n<h4 id=\"健康的经济学\"><a href=\"#健康的经济学\" class=\"headerlink\" title=\"健康的经济学\"></a>健康的经济学</h4><p>工作重要还是健康重要?这个问题不是心灵鸡汤问题，而是经济学问题。</p>\n<p>对待健康和工作的正确态度，不是一味地强调某一端，而是需要根据自己的情况合理计算。</p>\n<p>某些事业会使人完全忽略任何形式的计算，人们为了完成这个实业可以什么都不顾。</p>\n<h4 id=\"核电站能出什么大事\"><a href=\"#核电站能出什么大事\" class=\"headerlink\" title=\"核电站能出什么大事\"></a>核电站能出什么大事</h4><ol>\n<li>核爆–维持核电站反应堆中的链式反应是很不容易的，以至于如果失控，链式反应会立刻停止。燃料会继续变热，像日本这样需要灌水冷却，但这种变热不是链式反应，也就是说哪怕你不管了，让燃料自己慢慢冷却，它也不会发生核爆。核电事故的有害性在辐射。核电站泄漏对公众的真正危害是癌症。</li>\n<li>癌症–并不是说一旦被核辐射了，25年或者多少年内就一定会得癌症。核辐射致癌的数学是在20%的”基础概率”的基础上，增加人死于癌症的概率。这个被增加的概率与辐射的剂量成正比，具体地说说就是每受到25雷姆的辐射，得癌症的概率增加一个百分点。</li>\n<li>哲学–我们有权为了取得能源而牺牲这400个人吗?跟火电相比，核电就像民主制度一样，虽然也不是个好的发电方式，却是”最不坏”的发电方式。</li>\n</ol>\n<h4 id=\"Part-Two-成功学的解药\"><a href=\"#Part-Two-成功学的解药\" class=\"headerlink\" title=\"Part Two 成功学的解药\"></a>Part Two 成功学的解药</h4><p>我们需要的是科学的励志，只有你的理论具有普遍意义，你的成功才能被复制。</p>\n<h4 id=\"科学的励志和励志的科学\"><a href=\"#科学的励志和励志的科学\" class=\"headerlink\" title=\"科学的励志和励志的科学\"></a>科学的励志和励志的科学</h4><p>真正能左右成绩的品质只有一个:自控。研究者普遍认为，排除智力因素，不管你心目中的成功是个人成就、家庭幸福还是人际关系，最能决定成功的只有自控。</p>\n<p>自控需要意志力。意志力其实是一种生理机能。它就好像人的肌肉一样每次使用都需要消耗能量，而且用多了会疲惫。我们可以想办法合理地支配这种资源，甚至像锻炼肌肉一样增加意志力的容量。而这一切必须建立在对意志力的科学的认知基础之上。</p>\n<p>做选择会消耗意志力，冒险也需要意志力。</p>\n<p>除了好习惯可以减少意志力消耗外，作者提到另一个重要的自控手段是自我监控。我们可以把自己经历的`每一秒时间，花的每一分钱都上传到专门的网站上以作记录。</p>\n<p>怎么提高意志力?真正有效的办法是”常立志”。意志力是一种通用资源，这意味着你可以通过做一些日常小事来提高意志力，然后把它用在其他事情上。一个有效的练习方法就是做自己不习惯做的事，比如你习惯用右手，你可以有意识地用左手。</p>\n<h4 id=\"匹夫怎么逆袭\"><a href=\"#匹夫怎么逆袭\" class=\"headerlink\" title=\"匹夫怎么逆袭\"></a>匹夫怎么逆袭</h4><ol>\n<li>你要知道你的不利条件，在某些情况下可能是你的有利条件;而巨人的所谓有利条件，在某些情况下可能是他的不利条件。</li>\n<li>你绝对不能按照对手的打法去跟他玩，你有时候得使用非常规手段。</li>\n</ol>\n<p>倒U曲线:在一个东西成长的初期，你每增加一点投入都能获得一点回报;然后它会进入一个平台期，继续增加投入并不能获得更多的回报;而过了平台期再投入，回报反而是负的。维护现有的社会格局和强调遵守游戏规则是高富帅的事，而改变游戏规则则是屌丝的特权。</p>\n<h4 id=\"练习一万小时成天才刻意练习\"><a href=\"#练习一万小时成天才刻意练习\" class=\"headerlink\" title=\"练习一万小时成天才刻意练习\"></a>练习一万小时成天才刻意练习</h4><ol>\n<li>只在”学习区”学习</li>\n<li>把要训练的内容分成有针对性的小块，对每一个小块进行重复练习</li>\n<li>在整个练习过程中，随时能获得有效的反馈。</li>\n<li>练习时注意力必须高度集中</li>\n</ol>\n<p>只在”学习区”学习</p>\n<p>有效的练习任务必须在受训者的学习区内进行，它具有高度的针对性。训练者必须随时了解自己最需要改进的地方。一旦已经学会了某个东西，就不应该继续在上面花费时间，应该立即转入下一个困难点。持续进步的关键就是持续地在”学习区”做事。</p>\n<p>掌握套路</p>\n<p>人的技能，取决于这两种工作记忆。专家做的事情，就是使用有限的短期工作记忆，去调用自己几乎无限的长期工作记忆，而刻意练习，就是在大脑中建立长期工作记忆的过程。用什么方法才能迅速地把技能套路”长”在身上呢?关键在于两点:</p>\n<ul>\n<li>必须进行大量的重复训练</li>\n<li>训练必须有高度的针对性</li>\n</ul>\n<p>首先你要把整个动作或者整首曲子过一遍，然后把它分解为很多小块，一块一块地反复练习。在这种训练中一定要慢，只有慢下来才能感知技能的内部结构，注意到自己的错误。</p>\n<p>想要把一个动作套路，一个技能，哪怕是仅仅是一个生活习惯，甚至是一种心态，”长”在大脑之中，唯一的方法是不断重复。</p>\n<p>想要掌握一项技能，要像运动员一样，需要不停地练习实战动作，不停地比赛，而不是不停地看录像。</p>\n<p>在有即时反馈的情况下，一个人的进步速度非常之快，而且是实实在在的。</p>\n<p>自己对自己的看法，与别人对自己的看法，很可能会非常不同。”当局者迷，旁观者清”我们需要一个旁观者来指出我们自己注意不到的错误。</p>\n<p>反馈者不见得比你的水平高，关键是他们不是你，他们可以从你看不到的角度看你。</p>\n<p>反馈还要有”即时性”，要让实践者立即得到反馈意见。</p>\n<p>一个动作做得好与不好，最好有教练随时指出，本人必须能够随时了解练习结果。看不到结果的练习等于没有练习:如果只是应付了事，你不但不会变好，而且会对好坏不再关心。在某种程度上，刻意练习是以错误为中心的练习。练习者必须要对错误极度敏感，一旦发现了自己错了就会感到非常不舒服，一直练习到改正为止。</p>\n<h4 id=\"最高级的想象力是不自由的\"><a href=\"#最高级的想象力是不自由的\" class=\"headerlink\" title=\"最高级的想象力是不自由的\"></a>最高级的想象力是不自由的</h4><p>自由的”what if”思维，只是高级想象力活动的第一步，其背后不自由的东西才是关键。</p>\n<p>一个`理论物理学家可能每天都有无数个怪异的想法，真正的困难不是产生”怪异”的想法，而是产生”对”的想法。</p>\n<h4 id=\"思维密集度和牛人的反击\"><a href=\"#思维密集度和牛人的反击\" class=\"headerlink\" title=\"思维密集度和牛人的反击\"></a>思维密集度和牛人的反击</h4><p>思维密集度=准备这个读物需要的总时间/阅读这个读物需要的时间。</p>\n<h4 id=\"上网能够避免浅薄吗\"><a href=\"#上网能够避免浅薄吗\" class=\"headerlink\" title=\"上网能够避免浅薄吗?\"></a>上网能够避免浅薄吗?</h4><p>上网的关键态度是要成为网络的主人，而不做各种超链接的奴隶。高效率的上网应该像自闭症患者一样具有很强的目的性，以我为主，不被无关信息左右，就算是纯粹为了上网娱乐也无可厚非，这时候读得快就是优点。一个真正的智者不会让上网占用读书时间，他应该经常能够平静地深入思考。</p>\n<h4 id=\"高效”冲浪”的方法\"><a href=\"#高效”冲浪”的方法\" class=\"headerlink\" title=\"高效”冲浪”的方法\"></a>高效”冲浪”的方法</h4><p>第一步，随便翻翻(toss)</p>\n<p>在浏览器的书签栏上建立一个文件夹，其中包括所有每天必去访问的新闻站点和论坛。</p>\n<p>选择一个集中的时间专门看新闻。鼠标点击这个文件夹，选择全部在标签页打开然后浏览所有这些站点的标题。看到感兴趣的就用鼠标中键点击。</p>\n<p>只点不读，直到把所有要去的站点都浏览一遍，把所有想看的文章都点过为止。</p>\n<p>第二步。略读(skim)</p>\n<p>等到挑选出来要读的这十几条或者几十条新闻之后，一条一条地快速浏览其内容。给每条新闻一个极短的时间，大概扫视一遍就可以了。然后迅速关闭它。看到值得仔细读的文章也要先速读，但要临时保存下来。</p>\n<p>第三步，精读(read)</p>\n<p>能够进入这一步的文章已经非常有限了，每天也就那么几篇而已。找空闲时间把它们仔细读完。</p>\n<h4 id=\"“窄框架”和”宽框架”\"><a href=\"#“窄框架”和”宽框架”\" class=\"headerlink\" title=\"“窄框架”和”宽框架”\"></a>“窄框架”和”宽框架”</h4><p>所谓窄框架，就是遇到一个东西做一次决策，一事一议;而宽框架则是把所有东西都摆在桌面上集中选择。</p>\n<h4 id=\"笔记本就是力量\"><a href=\"#笔记本就是力量\" class=\"headerlink\" title=\"笔记本就是力量\"></a>笔记本就是力量</h4><p>记笔记的最直接目的是为了形成自己的知识体系，改变自己看事物的眼光。</p>\n<p>笔记系统的一个附带好处是它可以帮我们把新的知识跟自己已有的知识联系起来。一般人善于发现新事物的不同点，而真正的高手则善于发现共同点。一旦发现新知识和已有知识的共同点，这个知识就彻底”长”在我们身上了。</p>\n<h4 id=\"用强力研读书\"><a href=\"#用强力研读书\" class=\"headerlink\" title=\"用强力研读书\"></a>用强力研读书</h4><p>新书要读两遍</p>\n<p>第一遍是正常通读，只要放松地欣赏作者的精妙思想和有趣故事即可。在读二遍的同时写下读书笔记。这时候就不要每个字都读了，书中作为例子的故事大可跳过，要专注于思想脉络。</p>\n<p>什么是好的读书笔记</p>\n<ol>\n<li>清晰地表现每一章的逻辑脉络</li>\n<li>带走书中所有的亮点</li>\n<li>有大量的自己的看法和心得</li>\n<li>发现这本书和以前读过的其他书或文章的联系</li>\n</ol>\n<h4 id=\"创新是落后者的特权-三个竞争故事\"><a href=\"#创新是落后者的特权-三个竞争故事\" class=\"headerlink\" title=\"创新是落后者的特权:三个竞争故事\"></a>创新是落后者的特权:三个竞争故事</h4><p>分权管理方式是谁的创新?你可以说是思想是美国人杜鲁克从通用提炼出来的，但仅仅有思想不叫创新，敢于用这个思想才叫创新。</p>\n<p>企业不能每年都搞一次这种彻底改革。对于领先的企业，更没有必要冒这种风险。谚语说，If it works，don’t fix it!只有落后者，光脚不怕穿鞋的，反而可以冒这个险。冒险至少还有赢的机会，不冒险就输定了。后来者创新，后来者引领新潮流，是竞争中的一般规律。</p>\n<h4 id=\"过度自信是创业者的通行证\"><a href=\"#过度自信是创业者的通行证\" class=\"headerlink\" title=\"过度自信是创业者的通行证\"></a>过度自信是创业者的通行证</h4><p>创业者最重要的一个素质，恰恰是明知道很有可能失败却还要干。这帮人之所以成功不是因为他们善于计算概率，而是因为他们过度自信。</p>\n<p>这个世界属于爱冒险的人，它的运行规律是撑死胆大的饿死胆小的。那些过度自信的人失败的次数也会比一般人更多，如果要死的话也会死得非常快，但只要他们没死，只要他们还在继续尝试，那么他们最终成功的可能性要比一般人大得多。</p>\n<h4 id=\"夺魁者本色\"><a href=\"#夺魁者本色\" class=\"headerlink\" title=\"夺魁者本色\"></a>夺魁者本色</h4><h5 id=\"最牛女生宿舍\"><a href=\"#最牛女生宿舍\" class=\"headerlink\" title=\"最牛女生宿舍\"></a>最牛女生宿舍</h5><ul>\n<li>如果自己评估的胜率在20%以下，很多男性政客仍然要参选，而女性的就不愿意参选了。有些男的是不管概率多低都要参选。</li>\n<li>可是如果自我评估的胜率是在20%以上，女的甚至可能比男的更愿意参选。</li>\n</ul>\n<h5 id=\"竞争激素\"><a href=\"#竞争激素\" class=\"headerlink\" title=\"竞争激素\"></a>竞争激素</h5><p>睾酮，可以让人在竞争中更敢于冒险，更乐意投入比赛，在比赛中更无私，更关心队友，更可能抗议对手犯规，甚至能更多的诉诸理性认知而不是感情冲动。如果一个人的睾酮水平不够，他就很难进入”来之能战，战之能胜”的兴奋状态。</p>\n<h5 id=\"战士和颤士\"><a href=\"#战士和颤士\" class=\"headerlink\" title=\"战士和颤士\"></a>战士和颤士</h5><p>如果你的COMT酶是快酶，那么你面对压力的时候就很容易保持一颗平常心。这并不是因为你的定力过人，而是因为多出来的多巴胺会被迅速清理掉。有些学者把这样的人称为”战士”(Warriors)，因为他们临危不惧。而如果你的COMT酶是慢酶，那么面对压力多巴胺就容易过多，导致自己惊慌失措，这样的人则被称为”颤士”(Worriers)。</p>\n<p>战士在战时的表现超过颤士，颤士在平时的表现超过战士。</p>\n<p>决定一个人喜不喜欢竞争的重要因素之一，是睾酮水平。而决定一个人面对竞争压力时的状态，是COMT基因。</p>\n<h4 id=\"打游戏的三个境界\"><a href=\"#打游戏的三个境界\" class=\"headerlink\" title=\"打游戏的三个境界\"></a>打游戏的三个境界</h4><p>游戏的第一个境界是好玩。首先是”现实感”或者是”超现实感”。一个游戏让人觉得好玩，凭的就是它能让玩家特别逼真地”做事”。</p>\n<p>游戏的第二个境界是追求成就感。因为有两件事只存在于游戏之中:第一，”世间自有公道，付出总有回报”;第二，也是更重要的一点是，回报是即时的。</p>\n<p>游戏的第三个境界是体育和科学的境界。进入这个境界的玩家不是”玩”游戏，而是”训练”，甚至是”研究”游戏。他们不再对升级和获得装备之类的事情兴奋，他们追求的是技艺。</p>\n<h4 id=\"穷人和富人的人脉结构\"><a href=\"#穷人和富人的人脉结构\" class=\"headerlink\" title=\"穷人和富人的人脉结构\"></a>穷人和富人的人脉结构</h4><h5 id=\"弱联系的强度\"><a href=\"#弱联系的强度\" class=\"headerlink\" title=\"弱联系的强度\"></a>弱联系的强度</h5><p>“弱联系”的真正意义是把不同的社交圈子连接起来，从圈外给你提供有用的信息。根据弱联系理论，一个人在社会上获得机会的多少，与他的社交网络结构很有关系。人脉的关键不在于你融入了哪个圈子，而在于你能接触多少圈外的人。</p>\n<h5 id=\"谁给你的信息重要\"><a href=\"#谁给你的信息重要\" class=\"headerlink\" title=\"谁给你的信息重要\"></a>谁给你的信息重要</h5><p>强联系告诉你的有用信息，你自己本来也有可能发现;而弱联系告诉你的有用信息，他要没告诉你，你恐怕就发现不了。</p>\n<p>虽然人们重视强联系，人们的大部分知识还是来自弱联系。</p>\n<h5 id=\"别跟熟人合伙\"><a href=\"#别跟熟人合伙\" class=\"headerlink\" title=\"别跟熟人合伙\"></a>别跟熟人合伙</h5><p>已经有统计表明，从弱联系那里获得想法，乃至于与弱联系合伙创业，有利于提高一个`公司的创新能力。</p>\n<p>当往我们考虑找人创业，找人合作，哪怕找人了解什么信息的时候，”弱联系”才是最佳选择。</p>\n<h3 id=\"Part-Three-霍金的答案\"><a href=\"#Part-Three-霍金的答案\" class=\"headerlink\" title=\"Part Three 霍金的答案\"></a>Part Three 霍金的答案</h3><p>哪怕这个问题是全新的，在大多数情况下我们也能用旧的知识解决它。掌握科学知识的人有凭借理论推导就能破解世界的力量。</p>\n<h4 id=\"亚里士多为何不数数妻子有几颗牙\"><a href=\"#亚里士多为何不数数妻子有几颗牙\" class=\"headerlink\" title=\"亚里士多为何不数数妻子有几颗牙\"></a>亚里士多为何不数数妻子有几颗牙</h4><p>关键在于，科学既不是课本上那一条条知识点，也不是学科竞赛中那一道道难题，它可以随时取用于生活的实在经验。真正懂科学的人不但得对所学知识倒背如流，还得能举一反三，乃至于用这些知识解释身边的现象。能求解各种抽象难题，再厉害也不过是纸上谈兵而已；而能把知识活学活用，才是真本事。</p>\n<p>科学知识是一种高度结构化的知识，其有一个很酷的性质：只要学会了一般原理，就能解决无穷多表面看来千奇百怪的问题。掌握科学知识的人可以一听你的问题，不必亲临现场，完全凭借逻辑推理就能告诉你答案。有时候他们推理出来的答案可能出乎意料甚至违反常识，然而你却不得不服。</p>\n<p>破解世界大概有两个方法。一个方法是从已知推未知，只要掌握基本原理，似乎在理论上你就应该能推导出所有现象，只动脑而不动手。但《再冷门的问题也有最热闹的答案》这本书中的几个例子恰恰告诉我们这几乎是不可能的。现有的科学原理远未完备只是一个原因，更重要的原因是复杂现象涉及的数学计算和各种相关因素多到不可能用理论推导的程度。在这种情况下，“动手”才是更直截了当的方法。</p>\n<h4 id=\"物理学的逻辑和霍金的答案\"><a href=\"#物理学的逻辑和霍金的答案\" class=\"headerlink\" title=\"物理学的逻辑和霍金的答案\"></a>物理学的逻辑和霍金的答案</h4><p>判断一个物理理论的好坏不在于这个理论是否符合人的直觉，或者是否够漂亮，而在于它能不能做出预言。</p>\n<p>物理定律应该适用于所有时间和所有地点，所有事件都必须精确地符合物理定律的数学方程。</p>\n<p>物理定律必须处处管用，以至于上帝就算存在也无事可做；而一个好的物理理论必须不仅能解释已知的现象，还能对未知的现象做出预言。</p>\n<h4 id=\"一个关于转世的流行病学研究\"><a href=\"#一个关于转世的流行病学研究\" class=\"headerlink\" title=\"一个关于转世的流行病学研究\"></a>一个关于转世的流行病学研究</h4><p>在医学界和心理学界，如果科学家想要研究某个因素对人的影响，比如吸烟是否有害健康或者受虐待儿童长大以后是否犯罪率更高之类，往往1无法直接做实验，而只能采取搜集案例做统计分析的本办法，这个方法称为“流行病学（epidemiology）”。流行病学的结果远远不能作为最后的科学结论，但是这个方法仍然是科学的方法，也可以说是在你没有别的方法的时候所能是使用的最科学府办法。</p>\n<h4 id=\"摆脱童稚状态\"><a href=\"#摆脱童稚状态\" class=\"headerlink\" title=\"摆脱童稚状态\"></a>摆脱童稚状态</h4><h5 id=\"绝学与证据\"><a href=\"#绝学与证据\" class=\"headerlink\" title=\"绝学与证据\"></a>绝学与证据</h5><p>能用理论解释的结论未必正确，不能用理论解释的结论未必错误。</p>\n<p>只要用证据，反驳一个理论是非常简单的事情。</p>\n<h5 id=\"相关性思维\"><a href=\"#相关性思维\" class=\"headerlink\" title=\"相关性思维\"></a>相关性思维</h5><p>相关性研究只是科研的初级阶段。</p>\n<p>使用大规模统计发现实在的相关性这个最简单的科学方法，是我们摆脱童稚状态的第一步。</p>\n<h5 id=\"怎么发现因果\"><a href=\"#怎么发现因果\" class=\"headerlink\" title=\"怎么发现因果\"></a>怎么发现因果</h5><p>有相关性未必有因果关系，这是一个非常重要的思维。</p>\n<p>不管调查到什么程度，都只是对真实世界的管中窥豹。科学研究的是有限的真理。</p>\n<h5 id=\"科学的目标\"><a href=\"#科学的目标\" class=\"headerlink\" title=\"科学的目标\"></a>科学的目标</h5><p>相关性思维和因果性思维只是思维方式的转变，科学研究的真正关键在于发现机制。机制提出来之后，这个机制的每一步也必须是可以验证的，一个课题只要做到这个程度才算超越了集邮阶段。</p>\n<p>有时候这个过程会反过来，也就是用现有的机制理论推导一些现象，再去寻找证据证实。</p>\n<p>每一篇论文都是我们从个人感觉到客观事实，从客观事实到因果关系，从因果关系到能推广使用的机制，这个过程的一小步。</p>\n<h4 id=\"怎样才算是主流科学\"><a href=\"#怎样才算是主流科学\" class=\"headerlink\" title=\"怎样才算是主流科学\"></a>怎样才算是主流科学</h4><p>只此一家，别无分店。什么新东西都得从我这儿长出去，这就是科学的态度。这种态度干掉的错误想法比正确想法多得多，比如“水变油”、永动机、黑洞发电之类。只有这样的态度才能建立一个高效而严谨的学术关系。也只有这个体系才能确保一个实验结果经得起在任何时间任何地点的重复，一个技术可以随便复制使用，既不要求使用者道德高尚、人格完美。也不要求他掌握什么不可言传的心法。</p>\n<h4 id=\"科研的格调\"><a href=\"#科研的格调\" class=\"headerlink\" title=\"科研的格调\"></a>科研的格调</h4><p>科学本身是客观的，但科学家都是主观的。最好的科学家甚至可能是极度主观的。有爱恨，才是真正的科学家。敢说不，才是真正的科学家。</p>\n<h4 id=\"喝一口的心理学和喝一瓶的心理学\"><a href=\"#喝一口的心理学和喝一瓶的心理学\" class=\"headerlink\" title=\"喝一口的心理学和喝一瓶的心理学\"></a>喝一口的心理学和喝一瓶的心理学</h4><p>目前大多数的心理学实验，是“喝一口的心理学”，而不是“喝一瓶的心理学”。所谓“积极心理暗示“，其关键也许就在于让受试者感到新鲜。</p>\n<h4 id=\"医学研究能当真吗？\"><a href=\"#医学研究能当真吗？\" class=\"headerlink\" title=\"医学研究能当真吗？\"></a>医学研究能当真吗？</h4><p>有时候他们说大蒜可以降低有害胆固醇，有时候又说打算其实不能降低有害胆固醇。在这种情况下，你应该怎么办呢？</p>\n<ul>\n<li>以最权威科学家，比如诺贝尔奖得主或者《自然》上的论文的意见为主。</li>\n<li>科学家中的“主流意见”（如果“主流”真的存在的话）为主。</li>\n<li>以最新发表的意见为主</li>\n<li>别当真，科学新闻可以当娱乐新闻看。</li>\n</ul>\n<h5 id=\"真空农场中的球形鸡\"><a href=\"#真空农场中的球形鸡\" class=\"headerlink\" title=\"真空农场中的球形鸡\"></a>真空农场中的球形鸡</h5><p>所有物理定律，乃至所有科学理论，都只不过是主观模型。<br>用模型预测未来是非常困难的事情，越复杂的模型就月困难，而且越细致的未来就越不好预测。</p>\n","site":{"data":{}},"length":7261,"excerpt":"<h3 id=\"Part-One-反常识思维\"><a href=\"#Part-One-反常识思维\" class=\"headerlink\" title=\"Part One 反常识思维\"></a>Part One 反常识思维</h3><p>他们有时候把自己的价值判断称为“常识”，因为这些判断本来就是从人的原始思维而来的，然而现代社会产生了另一种思维，却是”反常识”的。</p>","more":"<h4 id=\"反常识思维\"><a href=\"#反常识思维\" class=\"headerlink\" title=\"反常识思维\"></a>反常识思维</h4><h5 id=\"取舍思维-tradeoff\"><a href=\"#取舍思维-tradeoff\" class=\"headerlink\" title=\"取舍思维(tradeoff)\"></a>取舍思维(tradeoff)</h5><p>两个好东西我不可能都要，那么我愿意牺牲(off)这个，来换取(trade)那个。</p>\n<p>“tradeoff”要求我们知道每一个事物的利弊。世界上并没有多少事情是“在没有是任何人境况变坏的前提下使得至少一个人变得更好”的所谓“帕累托改进”，绝大多数情况下兴一利必生一弊，而利弊都不是无限大的。</p>\n<h4 id=\"别想说服我！\"><a href=\"#别想说服我！\" class=\"headerlink\" title=\"别想说服我！\"></a>别想说服我！</h4><h5 id=\"确认偏误-confirmation-bias\"><a href=\"#确认偏误-confirmation-bias\" class=\"headerlink\" title=\"确认偏误(confirmation bias)\"></a>确认偏误(confirmation bias)</h5><p>如果你已经开始相信一个东西了，那么你就会主动寻见能够增强这种相信的信息，乃至不顾事实。一旦我们有了某种偏见，我们就无法改变主意了。</p>\n<p>要主动刻意地消费，吸收有可能修正我们观念的新信息，而不是吸收对我们现有观念的肯定(Consume deliberately。 Take in information over affirmation)。</p>\n<h4 id=\"真理追求者\"><a href=\"#真理追求者\" class=\"headerlink\" title=\"真理追求者\"></a>真理追求者</h4><p>两个真诚而理性的人应该对事情有相同的看法，如果争论不欢而散，一定是有人不诚实!</p>\n<p>如果我们是诚实的真理追求者，我们终将能够达成一致。</p>\n<h4 id=\"坏比好重要\"><a href=\"#坏比好重要\" class=\"headerlink\" title=\"坏比好重要\"></a>坏比好重要</h4><h5 id=\"损失厌恶-negativity-bias\"><a href=\"#损失厌恶-negativity-bias\" class=\"headerlink\" title=\"损失厌恶(negativity bias)\"></a>损失厌恶(negativity bias)</h5><p>人们对负面感情的重视程度总是超过正面感情。</p>\n<p>本能归本能，有些人可以超越自己的本能。他们知道自己强烈的负面情绪会带来偏见，所以他们不轻易纵容这种情绪。他们看到好的冒险机会敢上，遭遇损失却不放在心上。他们看见好人好事主动夸，听说坏消息能够保持淡定。</p>\n<h4 id=\"最简单概率论的五个智慧\"><a href=\"#最简单概率论的五个智慧\" class=\"headerlink\" title=\"最简单概率论的五个智慧\"></a>最简单概率论的五个智慧</h4><ol>\n<li>随机–有些事情就是无缘无故地发生的。大多数事情并不是完全的随机事件，却都有一定的随机因素。偶然和必然如果结合在一起，就没有那么容易理解了</li>\n<li>误差–学会忽略误差范围内的任何波动。</li>\n<li>赌徒谬误–如果过去一段时间内发生的事情不那么均匀，人们就错误地以为未来的事情会尽量往”抹平”的方向走。</li>\n<li>在没有规律的地方发现规律–独立随机事件的发生是没有规律和不可预测的。未来是不可被精确预测的，这个世界并不像钟表那样运行。</li>\n<li>小数定律–如果样本不够大，那么它就会表现为各种极端情况，而这些情况可能跟本性一点关系没有</li>\n</ol>\n<h4 id=\"一颗阴谋论的心\"><a href=\"#一颗阴谋论的心\" class=\"headerlink\" title=\"一颗阴谋论的心\"></a>一颗阴谋论的心</h4><h5 id=\"美国的阴谋\"><a href=\"#美国的阴谋\" class=\"headerlink\" title=\"美国的阴谋\"></a>美国的阴谋</h5><p>所有这些阴谋论都有一个共同的思维模式。这个思维模式就是不承认巧合，不承认有些事情是自然发生的，认为一切的背后都有联系、有目的。合理性和可能性</p>\n<p>A和B同时成立的可能性小于等于A成立的可能性，这是概率论的常识。增加细节也许可以增加合理性，但是一定减少可能性。</p>\n<h5 id=\"目的与科学\"><a href=\"#目的与科学\" class=\"headerlink\" title=\"目的与科学\"></a>目的与科学</h5><p>自然没有目的，人类社会的很多现象往往也没有什么目的。认为凡事都有目的，是普通人思维区别于科学思维的根本之一。</p>\n<h4 id=\"桥段会毁了你的生活\"><a href=\"#桥段会毁了你的生活\" class=\"headerlink\" title=\"桥段会毁了你的生活\"></a>桥段会毁了你的生活</h4><p>一个人一旦熟知了”TV Tropes”上的各种桥段，再看电视剧就会只看到一堆库函数。这样看电视剧还有意思吗?</p>\n<p>真正的原创剧情是高雅文学和文艺片的事情，流行文学和商业片只需要”好看的”剧情。</p>\n<p>就算所有桥段都已经被发明了，商业片仍然可以拍得很好看。</p>\n<h4 id=\"健康的经济学\"><a href=\"#健康的经济学\" class=\"headerlink\" title=\"健康的经济学\"></a>健康的经济学</h4><p>工作重要还是健康重要?这个问题不是心灵鸡汤问题，而是经济学问题。</p>\n<p>对待健康和工作的正确态度，不是一味地强调某一端，而是需要根据自己的情况合理计算。</p>\n<p>某些事业会使人完全忽略任何形式的计算，人们为了完成这个实业可以什么都不顾。</p>\n<h4 id=\"核电站能出什么大事\"><a href=\"#核电站能出什么大事\" class=\"headerlink\" title=\"核电站能出什么大事\"></a>核电站能出什么大事</h4><ol>\n<li>核爆–维持核电站反应堆中的链式反应是很不容易的，以至于如果失控，链式反应会立刻停止。燃料会继续变热，像日本这样需要灌水冷却，但这种变热不是链式反应，也就是说哪怕你不管了，让燃料自己慢慢冷却，它也不会发生核爆。核电事故的有害性在辐射。核电站泄漏对公众的真正危害是癌症。</li>\n<li>癌症–并不是说一旦被核辐射了，25年或者多少年内就一定会得癌症。核辐射致癌的数学是在20%的”基础概率”的基础上，增加人死于癌症的概率。这个被增加的概率与辐射的剂量成正比，具体地说说就是每受到25雷姆的辐射，得癌症的概率增加一个百分点。</li>\n<li>哲学–我们有权为了取得能源而牺牲这400个人吗?跟火电相比，核电就像民主制度一样，虽然也不是个好的发电方式，却是”最不坏”的发电方式。</li>\n</ol>\n<h4 id=\"Part-Two-成功学的解药\"><a href=\"#Part-Two-成功学的解药\" class=\"headerlink\" title=\"Part Two 成功学的解药\"></a>Part Two 成功学的解药</h4><p>我们需要的是科学的励志，只有你的理论具有普遍意义，你的成功才能被复制。</p>\n<h4 id=\"科学的励志和励志的科学\"><a href=\"#科学的励志和励志的科学\" class=\"headerlink\" title=\"科学的励志和励志的科学\"></a>科学的励志和励志的科学</h4><p>真正能左右成绩的品质只有一个:自控。研究者普遍认为，排除智力因素，不管你心目中的成功是个人成就、家庭幸福还是人际关系，最能决定成功的只有自控。</p>\n<p>自控需要意志力。意志力其实是一种生理机能。它就好像人的肌肉一样每次使用都需要消耗能量，而且用多了会疲惫。我们可以想办法合理地支配这种资源，甚至像锻炼肌肉一样增加意志力的容量。而这一切必须建立在对意志力的科学的认知基础之上。</p>\n<p>做选择会消耗意志力，冒险也需要意志力。</p>\n<p>除了好习惯可以减少意志力消耗外，作者提到另一个重要的自控手段是自我监控。我们可以把自己经历的`每一秒时间，花的每一分钱都上传到专门的网站上以作记录。</p>\n<p>怎么提高意志力?真正有效的办法是”常立志”。意志力是一种通用资源，这意味着你可以通过做一些日常小事来提高意志力，然后把它用在其他事情上。一个有效的练习方法就是做自己不习惯做的事，比如你习惯用右手，你可以有意识地用左手。</p>\n<h4 id=\"匹夫怎么逆袭\"><a href=\"#匹夫怎么逆袭\" class=\"headerlink\" title=\"匹夫怎么逆袭\"></a>匹夫怎么逆袭</h4><ol>\n<li>你要知道你的不利条件，在某些情况下可能是你的有利条件;而巨人的所谓有利条件，在某些情况下可能是他的不利条件。</li>\n<li>你绝对不能按照对手的打法去跟他玩，你有时候得使用非常规手段。</li>\n</ol>\n<p>倒U曲线:在一个东西成长的初期，你每增加一点投入都能获得一点回报;然后它会进入一个平台期，继续增加投入并不能获得更多的回报;而过了平台期再投入，回报反而是负的。维护现有的社会格局和强调遵守游戏规则是高富帅的事，而改变游戏规则则是屌丝的特权。</p>\n<h4 id=\"练习一万小时成天才刻意练习\"><a href=\"#练习一万小时成天才刻意练习\" class=\"headerlink\" title=\"练习一万小时成天才刻意练习\"></a>练习一万小时成天才刻意练习</h4><ol>\n<li>只在”学习区”学习</li>\n<li>把要训练的内容分成有针对性的小块，对每一个小块进行重复练习</li>\n<li>在整个练习过程中，随时能获得有效的反馈。</li>\n<li>练习时注意力必须高度集中</li>\n</ol>\n<p>只在”学习区”学习</p>\n<p>有效的练习任务必须在受训者的学习区内进行，它具有高度的针对性。训练者必须随时了解自己最需要改进的地方。一旦已经学会了某个东西，就不应该继续在上面花费时间，应该立即转入下一个困难点。持续进步的关键就是持续地在”学习区”做事。</p>\n<p>掌握套路</p>\n<p>人的技能，取决于这两种工作记忆。专家做的事情，就是使用有限的短期工作记忆，去调用自己几乎无限的长期工作记忆，而刻意练习，就是在大脑中建立长期工作记忆的过程。用什么方法才能迅速地把技能套路”长”在身上呢?关键在于两点:</p>\n<ul>\n<li>必须进行大量的重复训练</li>\n<li>训练必须有高度的针对性</li>\n</ul>\n<p>首先你要把整个动作或者整首曲子过一遍，然后把它分解为很多小块，一块一块地反复练习。在这种训练中一定要慢，只有慢下来才能感知技能的内部结构，注意到自己的错误。</p>\n<p>想要把一个动作套路，一个技能，哪怕是仅仅是一个生活习惯，甚至是一种心态，”长”在大脑之中，唯一的方法是不断重复。</p>\n<p>想要掌握一项技能，要像运动员一样，需要不停地练习实战动作，不停地比赛，而不是不停地看录像。</p>\n<p>在有即时反馈的情况下，一个人的进步速度非常之快，而且是实实在在的。</p>\n<p>自己对自己的看法，与别人对自己的看法，很可能会非常不同。”当局者迷，旁观者清”我们需要一个旁观者来指出我们自己注意不到的错误。</p>\n<p>反馈者不见得比你的水平高，关键是他们不是你，他们可以从你看不到的角度看你。</p>\n<p>反馈还要有”即时性”，要让实践者立即得到反馈意见。</p>\n<p>一个动作做得好与不好，最好有教练随时指出，本人必须能够随时了解练习结果。看不到结果的练习等于没有练习:如果只是应付了事，你不但不会变好，而且会对好坏不再关心。在某种程度上，刻意练习是以错误为中心的练习。练习者必须要对错误极度敏感，一旦发现了自己错了就会感到非常不舒服，一直练习到改正为止。</p>\n<h4 id=\"最高级的想象力是不自由的\"><a href=\"#最高级的想象力是不自由的\" class=\"headerlink\" title=\"最高级的想象力是不自由的\"></a>最高级的想象力是不自由的</h4><p>自由的”what if”思维，只是高级想象力活动的第一步，其背后不自由的东西才是关键。</p>\n<p>一个`理论物理学家可能每天都有无数个怪异的想法，真正的困难不是产生”怪异”的想法，而是产生”对”的想法。</p>\n<h4 id=\"思维密集度和牛人的反击\"><a href=\"#思维密集度和牛人的反击\" class=\"headerlink\" title=\"思维密集度和牛人的反击\"></a>思维密集度和牛人的反击</h4><p>思维密集度=准备这个读物需要的总时间/阅读这个读物需要的时间。</p>\n<h4 id=\"上网能够避免浅薄吗\"><a href=\"#上网能够避免浅薄吗\" class=\"headerlink\" title=\"上网能够避免浅薄吗?\"></a>上网能够避免浅薄吗?</h4><p>上网的关键态度是要成为网络的主人，而不做各种超链接的奴隶。高效率的上网应该像自闭症患者一样具有很强的目的性，以我为主，不被无关信息左右，就算是纯粹为了上网娱乐也无可厚非，这时候读得快就是优点。一个真正的智者不会让上网占用读书时间，他应该经常能够平静地深入思考。</p>\n<h4 id=\"高效”冲浪”的方法\"><a href=\"#高效”冲浪”的方法\" class=\"headerlink\" title=\"高效”冲浪”的方法\"></a>高效”冲浪”的方法</h4><p>第一步，随便翻翻(toss)</p>\n<p>在浏览器的书签栏上建立一个文件夹，其中包括所有每天必去访问的新闻站点和论坛。</p>\n<p>选择一个集中的时间专门看新闻。鼠标点击这个文件夹，选择全部在标签页打开然后浏览所有这些站点的标题。看到感兴趣的就用鼠标中键点击。</p>\n<p>只点不读，直到把所有要去的站点都浏览一遍，把所有想看的文章都点过为止。</p>\n<p>第二步。略读(skim)</p>\n<p>等到挑选出来要读的这十几条或者几十条新闻之后，一条一条地快速浏览其内容。给每条新闻一个极短的时间，大概扫视一遍就可以了。然后迅速关闭它。看到值得仔细读的文章也要先速读，但要临时保存下来。</p>\n<p>第三步，精读(read)</p>\n<p>能够进入这一步的文章已经非常有限了，每天也就那么几篇而已。找空闲时间把它们仔细读完。</p>\n<h4 id=\"“窄框架”和”宽框架”\"><a href=\"#“窄框架”和”宽框架”\" class=\"headerlink\" title=\"“窄框架”和”宽框架”\"></a>“窄框架”和”宽框架”</h4><p>所谓窄框架，就是遇到一个东西做一次决策，一事一议;而宽框架则是把所有东西都摆在桌面上集中选择。</p>\n<h4 id=\"笔记本就是力量\"><a href=\"#笔记本就是力量\" class=\"headerlink\" title=\"笔记本就是力量\"></a>笔记本就是力量</h4><p>记笔记的最直接目的是为了形成自己的知识体系，改变自己看事物的眼光。</p>\n<p>笔记系统的一个附带好处是它可以帮我们把新的知识跟自己已有的知识联系起来。一般人善于发现新事物的不同点，而真正的高手则善于发现共同点。一旦发现新知识和已有知识的共同点，这个知识就彻底”长”在我们身上了。</p>\n<h4 id=\"用强力研读书\"><a href=\"#用强力研读书\" class=\"headerlink\" title=\"用强力研读书\"></a>用强力研读书</h4><p>新书要读两遍</p>\n<p>第一遍是正常通读，只要放松地欣赏作者的精妙思想和有趣故事即可。在读二遍的同时写下读书笔记。这时候就不要每个字都读了，书中作为例子的故事大可跳过，要专注于思想脉络。</p>\n<p>什么是好的读书笔记</p>\n<ol>\n<li>清晰地表现每一章的逻辑脉络</li>\n<li>带走书中所有的亮点</li>\n<li>有大量的自己的看法和心得</li>\n<li>发现这本书和以前读过的其他书或文章的联系</li>\n</ol>\n<h4 id=\"创新是落后者的特权-三个竞争故事\"><a href=\"#创新是落后者的特权-三个竞争故事\" class=\"headerlink\" title=\"创新是落后者的特权:三个竞争故事\"></a>创新是落后者的特权:三个竞争故事</h4><p>分权管理方式是谁的创新?你可以说是思想是美国人杜鲁克从通用提炼出来的，但仅仅有思想不叫创新，敢于用这个思想才叫创新。</p>\n<p>企业不能每年都搞一次这种彻底改革。对于领先的企业，更没有必要冒这种风险。谚语说，If it works，don’t fix it!只有落后者，光脚不怕穿鞋的，反而可以冒这个险。冒险至少还有赢的机会，不冒险就输定了。后来者创新，后来者引领新潮流，是竞争中的一般规律。</p>\n<h4 id=\"过度自信是创业者的通行证\"><a href=\"#过度自信是创业者的通行证\" class=\"headerlink\" title=\"过度自信是创业者的通行证\"></a>过度自信是创业者的通行证</h4><p>创业者最重要的一个素质，恰恰是明知道很有可能失败却还要干。这帮人之所以成功不是因为他们善于计算概率，而是因为他们过度自信。</p>\n<p>这个世界属于爱冒险的人，它的运行规律是撑死胆大的饿死胆小的。那些过度自信的人失败的次数也会比一般人更多，如果要死的话也会死得非常快，但只要他们没死，只要他们还在继续尝试，那么他们最终成功的可能性要比一般人大得多。</p>\n<h4 id=\"夺魁者本色\"><a href=\"#夺魁者本色\" class=\"headerlink\" title=\"夺魁者本色\"></a>夺魁者本色</h4><h5 id=\"最牛女生宿舍\"><a href=\"#最牛女生宿舍\" class=\"headerlink\" title=\"最牛女生宿舍\"></a>最牛女生宿舍</h5><ul>\n<li>如果自己评估的胜率在20%以下，很多男性政客仍然要参选，而女性的就不愿意参选了。有些男的是不管概率多低都要参选。</li>\n<li>可是如果自我评估的胜率是在20%以上，女的甚至可能比男的更愿意参选。</li>\n</ul>\n<h5 id=\"竞争激素\"><a href=\"#竞争激素\" class=\"headerlink\" title=\"竞争激素\"></a>竞争激素</h5><p>睾酮，可以让人在竞争中更敢于冒险，更乐意投入比赛，在比赛中更无私，更关心队友，更可能抗议对手犯规，甚至能更多的诉诸理性认知而不是感情冲动。如果一个人的睾酮水平不够，他就很难进入”来之能战，战之能胜”的兴奋状态。</p>\n<h5 id=\"战士和颤士\"><a href=\"#战士和颤士\" class=\"headerlink\" title=\"战士和颤士\"></a>战士和颤士</h5><p>如果你的COMT酶是快酶，那么你面对压力的时候就很容易保持一颗平常心。这并不是因为你的定力过人，而是因为多出来的多巴胺会被迅速清理掉。有些学者把这样的人称为”战士”(Warriors)，因为他们临危不惧。而如果你的COMT酶是慢酶，那么面对压力多巴胺就容易过多，导致自己惊慌失措，这样的人则被称为”颤士”(Worriers)。</p>\n<p>战士在战时的表现超过颤士，颤士在平时的表现超过战士。</p>\n<p>决定一个人喜不喜欢竞争的重要因素之一，是睾酮水平。而决定一个人面对竞争压力时的状态，是COMT基因。</p>\n<h4 id=\"打游戏的三个境界\"><a href=\"#打游戏的三个境界\" class=\"headerlink\" title=\"打游戏的三个境界\"></a>打游戏的三个境界</h4><p>游戏的第一个境界是好玩。首先是”现实感”或者是”超现实感”。一个游戏让人觉得好玩，凭的就是它能让玩家特别逼真地”做事”。</p>\n<p>游戏的第二个境界是追求成就感。因为有两件事只存在于游戏之中:第一，”世间自有公道，付出总有回报”;第二，也是更重要的一点是，回报是即时的。</p>\n<p>游戏的第三个境界是体育和科学的境界。进入这个境界的玩家不是”玩”游戏，而是”训练”，甚至是”研究”游戏。他们不再对升级和获得装备之类的事情兴奋，他们追求的是技艺。</p>\n<h4 id=\"穷人和富人的人脉结构\"><a href=\"#穷人和富人的人脉结构\" class=\"headerlink\" title=\"穷人和富人的人脉结构\"></a>穷人和富人的人脉结构</h4><h5 id=\"弱联系的强度\"><a href=\"#弱联系的强度\" class=\"headerlink\" title=\"弱联系的强度\"></a>弱联系的强度</h5><p>“弱联系”的真正意义是把不同的社交圈子连接起来，从圈外给你提供有用的信息。根据弱联系理论，一个人在社会上获得机会的多少，与他的社交网络结构很有关系。人脉的关键不在于你融入了哪个圈子，而在于你能接触多少圈外的人。</p>\n<h5 id=\"谁给你的信息重要\"><a href=\"#谁给你的信息重要\" class=\"headerlink\" title=\"谁给你的信息重要\"></a>谁给你的信息重要</h5><p>强联系告诉你的有用信息，你自己本来也有可能发现;而弱联系告诉你的有用信息，他要没告诉你，你恐怕就发现不了。</p>\n<p>虽然人们重视强联系，人们的大部分知识还是来自弱联系。</p>\n<h5 id=\"别跟熟人合伙\"><a href=\"#别跟熟人合伙\" class=\"headerlink\" title=\"别跟熟人合伙\"></a>别跟熟人合伙</h5><p>已经有统计表明，从弱联系那里获得想法，乃至于与弱联系合伙创业，有利于提高一个`公司的创新能力。</p>\n<p>当往我们考虑找人创业，找人合作，哪怕找人了解什么信息的时候，”弱联系”才是最佳选择。</p>\n<h3 id=\"Part-Three-霍金的答案\"><a href=\"#Part-Three-霍金的答案\" class=\"headerlink\" title=\"Part Three 霍金的答案\"></a>Part Three 霍金的答案</h3><p>哪怕这个问题是全新的，在大多数情况下我们也能用旧的知识解决它。掌握科学知识的人有凭借理论推导就能破解世界的力量。</p>\n<h4 id=\"亚里士多为何不数数妻子有几颗牙\"><a href=\"#亚里士多为何不数数妻子有几颗牙\" class=\"headerlink\" title=\"亚里士多为何不数数妻子有几颗牙\"></a>亚里士多为何不数数妻子有几颗牙</h4><p>关键在于，科学既不是课本上那一条条知识点，也不是学科竞赛中那一道道难题，它可以随时取用于生活的实在经验。真正懂科学的人不但得对所学知识倒背如流，还得能举一反三，乃至于用这些知识解释身边的现象。能求解各种抽象难题，再厉害也不过是纸上谈兵而已；而能把知识活学活用，才是真本事。</p>\n<p>科学知识是一种高度结构化的知识，其有一个很酷的性质：只要学会了一般原理，就能解决无穷多表面看来千奇百怪的问题。掌握科学知识的人可以一听你的问题，不必亲临现场，完全凭借逻辑推理就能告诉你答案。有时候他们推理出来的答案可能出乎意料甚至违反常识，然而你却不得不服。</p>\n<p>破解世界大概有两个方法。一个方法是从已知推未知，只要掌握基本原理，似乎在理论上你就应该能推导出所有现象，只动脑而不动手。但《再冷门的问题也有最热闹的答案》这本书中的几个例子恰恰告诉我们这几乎是不可能的。现有的科学原理远未完备只是一个原因，更重要的原因是复杂现象涉及的数学计算和各种相关因素多到不可能用理论推导的程度。在这种情况下，“动手”才是更直截了当的方法。</p>\n<h4 id=\"物理学的逻辑和霍金的答案\"><a href=\"#物理学的逻辑和霍金的答案\" class=\"headerlink\" title=\"物理学的逻辑和霍金的答案\"></a>物理学的逻辑和霍金的答案</h4><p>判断一个物理理论的好坏不在于这个理论是否符合人的直觉，或者是否够漂亮，而在于它能不能做出预言。</p>\n<p>物理定律应该适用于所有时间和所有地点，所有事件都必须精确地符合物理定律的数学方程。</p>\n<p>物理定律必须处处管用，以至于上帝就算存在也无事可做；而一个好的物理理论必须不仅能解释已知的现象，还能对未知的现象做出预言。</p>\n<h4 id=\"一个关于转世的流行病学研究\"><a href=\"#一个关于转世的流行病学研究\" class=\"headerlink\" title=\"一个关于转世的流行病学研究\"></a>一个关于转世的流行病学研究</h4><p>在医学界和心理学界，如果科学家想要研究某个因素对人的影响，比如吸烟是否有害健康或者受虐待儿童长大以后是否犯罪率更高之类，往往1无法直接做实验，而只能采取搜集案例做统计分析的本办法，这个方法称为“流行病学（epidemiology）”。流行病学的结果远远不能作为最后的科学结论，但是这个方法仍然是科学的方法，也可以说是在你没有别的方法的时候所能是使用的最科学府办法。</p>\n<h4 id=\"摆脱童稚状态\"><a href=\"#摆脱童稚状态\" class=\"headerlink\" title=\"摆脱童稚状态\"></a>摆脱童稚状态</h4><h5 id=\"绝学与证据\"><a href=\"#绝学与证据\" class=\"headerlink\" title=\"绝学与证据\"></a>绝学与证据</h5><p>能用理论解释的结论未必正确，不能用理论解释的结论未必错误。</p>\n<p>只要用证据，反驳一个理论是非常简单的事情。</p>\n<h5 id=\"相关性思维\"><a href=\"#相关性思维\" class=\"headerlink\" title=\"相关性思维\"></a>相关性思维</h5><p>相关性研究只是科研的初级阶段。</p>\n<p>使用大规模统计发现实在的相关性这个最简单的科学方法，是我们摆脱童稚状态的第一步。</p>\n<h5 id=\"怎么发现因果\"><a href=\"#怎么发现因果\" class=\"headerlink\" title=\"怎么发现因果\"></a>怎么发现因果</h5><p>有相关性未必有因果关系，这是一个非常重要的思维。</p>\n<p>不管调查到什么程度，都只是对真实世界的管中窥豹。科学研究的是有限的真理。</p>\n<h5 id=\"科学的目标\"><a href=\"#科学的目标\" class=\"headerlink\" title=\"科学的目标\"></a>科学的目标</h5><p>相关性思维和因果性思维只是思维方式的转变，科学研究的真正关键在于发现机制。机制提出来之后，这个机制的每一步也必须是可以验证的，一个课题只要做到这个程度才算超越了集邮阶段。</p>\n<p>有时候这个过程会反过来，也就是用现有的机制理论推导一些现象，再去寻找证据证实。</p>\n<p>每一篇论文都是我们从个人感觉到客观事实，从客观事实到因果关系，从因果关系到能推广使用的机制，这个过程的一小步。</p>\n<h4 id=\"怎样才算是主流科学\"><a href=\"#怎样才算是主流科学\" class=\"headerlink\" title=\"怎样才算是主流科学\"></a>怎样才算是主流科学</h4><p>只此一家，别无分店。什么新东西都得从我这儿长出去，这就是科学的态度。这种态度干掉的错误想法比正确想法多得多，比如“水变油”、永动机、黑洞发电之类。只有这样的态度才能建立一个高效而严谨的学术关系。也只有这个体系才能确保一个实验结果经得起在任何时间任何地点的重复，一个技术可以随便复制使用，既不要求使用者道德高尚、人格完美。也不要求他掌握什么不可言传的心法。</p>\n<h4 id=\"科研的格调\"><a href=\"#科研的格调\" class=\"headerlink\" title=\"科研的格调\"></a>科研的格调</h4><p>科学本身是客观的，但科学家都是主观的。最好的科学家甚至可能是极度主观的。有爱恨，才是真正的科学家。敢说不，才是真正的科学家。</p>\n<h4 id=\"喝一口的心理学和喝一瓶的心理学\"><a href=\"#喝一口的心理学和喝一瓶的心理学\" class=\"headerlink\" title=\"喝一口的心理学和喝一瓶的心理学\"></a>喝一口的心理学和喝一瓶的心理学</h4><p>目前大多数的心理学实验，是“喝一口的心理学”，而不是“喝一瓶的心理学”。所谓“积极心理暗示“，其关键也许就在于让受试者感到新鲜。</p>\n<h4 id=\"医学研究能当真吗？\"><a href=\"#医学研究能当真吗？\" class=\"headerlink\" title=\"医学研究能当真吗？\"></a>医学研究能当真吗？</h4><p>有时候他们说大蒜可以降低有害胆固醇，有时候又说打算其实不能降低有害胆固醇。在这种情况下，你应该怎么办呢？</p>\n<ul>\n<li>以最权威科学家，比如诺贝尔奖得主或者《自然》上的论文的意见为主。</li>\n<li>科学家中的“主流意见”（如果“主流”真的存在的话）为主。</li>\n<li>以最新发表的意见为主</li>\n<li>别当真，科学新闻可以当娱乐新闻看。</li>\n</ul>\n<h5 id=\"真空农场中的球形鸡\"><a href=\"#真空农场中的球形鸡\" class=\"headerlink\" title=\"真空农场中的球形鸡\"></a>真空农场中的球形鸡</h5><p>所有物理定律，乃至所有科学理论，都只不过是主观模型。<br>用模型预测未来是非常困难的事情，越复杂的模型就月困难，而且越细致的未来就越不好预测。</p>"},{"title":"WPF基础学习(二)","date":"2020-03-29T03:19:45.000Z","_content":"> 作者：Peter Luo 出处：https://www.cnblogs.com/Peter-Luo/\n\n### 属性验证\n\n在定义任何类型的属性时,都需要面对错误设置属性的可能性.\n<!--more-->\n\nWPF提供了两种方法来阻止非法值\n\n* ValidateValueCallback:该回调函数可接受或拒绝新值.通常,该回调函数用于捕获违反属性约束的明显错误.可作为DependencyProperty.Register()方法的一个参数提供该回调函数.\n* CoerceValueCallback:该回调函数可将新值修改为更能被接受的值.该回调函数通常用于处理为相同对象设置的依赖项属性值相互冲突的问题.这些值本身可能是合法的,但当同时应用时它们是不相容的.为了使用这个回调函数,当创建FrameworkPropertyMetadata对象时(然后该对象将被传递到DependencyProperty.Register()方法),作为构造函数的一个参数提供该回调函数.\n\n#### 验证回调\n\n验证通常应被添加到属性过程的设置部分.提供的回调函数必须指向一个接受对象参数并返回Boolean值得方法.返回true以接受对象是合法的,返回false拒绝对象.\n\n对于验证回调函数有一个限制:它们必须是静态方法而且无权访问正在被验证的对象.所有能够获得的信息只有刚刚应用的数值.尽管这样更便于重用属性,但可能无法创建考虑其他属性的验证例程.\n\n#### 强制回调\n\n可以通过CoerceValueCallback回调函数处理相互关联的属性.例如,ScrollBar控件提供了Maximum、Minimum和Value属性,这些属性都继承自RangeBase类.保持对这些属性进行调整的一种方法是使用属性强制.\n\n### 路由事件\n\n事件路由允许源自某个元素的事件由另一个元素引发.例如,使用事件路由,来自工具栏按钮的单击事件可在被代码处理之前上传到工具栏,然后上传到包含工具栏的窗口.\n\n#### 定义、注册和封装事件\n\nWPF事件模型和WPF属性模型非常类似.与依赖项属性一样,路由事件由只读的静态字段表示,在静态构造函数中注册,并通过标准的.NET事件定义进行封装.\n\n```cs\npublic abstract class ButtonBase:ContentControl,...\n{\n    public static readonly RoutedEvent ClickEvent;\n    static ButtonBase()\n    {\n        ButtonBase.ClickEvent=EventManager.RegisterRoutedEvent(\"Click\",RoutingStrategy.Bubble,typeof(RoutedEventHandler),typeof(ButtonBase));\n        ...\n    }\n\n    public event RoutedEventHandler Click\n    {\n        add\n        {\n            base.AddHandler(ButtonBase.ClickEvent,value);\n        }\n        remove\n        {\n            base.RemoveHandler(ButtonBase.ClickEvent,value);\n        }\n    }\n    ...\n}\n```\n\n路由事件是使用EvenetManager.RegisterRoutedEvent()方法注册的.当注册事件时,需要制定事件的名称、路由类型、定义事件处理程序语法的委托以及拥有事件的类.\n\n事件封装器可使用AddHandler()和RemoveHandler()方法添加和删除已注册的调用程序,这两个方法都在FrameworkElement基类中定义,并被每个WPF元素继承.\n\n#### 共享路由事件\n\n与依赖项属性一样,可在类之间共享路由事件的定义.通过Routed-Event.AddOwner()方法重用事件.\n\n#### 引发路由事件\n\nRaiseEvent()方法负责为每个已经通过AddHandler()方法注册的调用程序引发事件.因为AddHandler()方法是公有的,所有调用程序可访问该方法——他们能够通过直接调用AddHandler()方法注册他们自己,也可以使用事件封装器.无论使用哪种方法,当调用RaiseEvent()方法时都会通知他们.\n\n所有WPF事件都为事件签名使用熟悉的.NET约定.每个事件处理程序的第一个参数(sender参数）都提供引发该事件的对象的引用.第二个参数是EventArgs对象,该对象与其他所有可能很重要的附加细节绑定在一起.\n\n在WPF中,如果事件不需要传递任何额外细节,可使用RoutedEventArgs类,该类包含了有关如何传递事件的一些细节.如果事件确实需要传递额外的信息,那么需要使用更特殊的继承自RoutedEventArgs的对象.因为每个WPF事件参数都继承自RoutedEventArgs类,所以每个WPF事件处理程序都可访问与事件路由相关的信息.\n\n#### 处理路由事件\n\n可以使用多种方法关联事件处理程序\n\n* 为XAML标记添加事件特性.事件特性按照想要处理的事件命名,它的值就是事件处理程序方法的名称.\n\n    ```cs\n    <Image Source=\"a.jpg\" Stretch=\"None\" Name=\"img\" MouseUp=\"img_MouseUp\" />\n    ```\n\n* 使用代码连接事件\n\n    ```cs\n    img.MouseUp+=new MouseButtonEventHandler(img_MouseUp);\n    // img.MouseUp+=img_MouseUp;\n    ```\n\n* 自行通过调用UIElement.AddHandler()方法直接连接事件\n\n    ```cs\n    img.AddHandler(Image.MouseUpEvent,new MouseButtonEventHandler(img_MouseUp));\n    ```\n\n断开事件处理程序\n\n* 使用-=运算符\n\n    ```cs\n    img.MouseUp -=img_MouseUp;\n    ```\n\n* 使用UIElement.RemoveHandler()\n\n    ```cs\n    img.RemoveHandler(UIElment.MouseUpEvent,new MouseButtonEventHandler(img_MouseUp));\n    ```\n\n### WPF事件\n\n元素事件分类:\n\n* 生命周期事件:在元素被初始化、加载或卸载时发生这些事件\n* 鼠标事件:这是事件是鼠标动作的结果\n* 键盘事件:这是事件是键盘动作的结果\n* 手写笔:这些事件是使用类似钢笔的手写笔的结果.在平板电脑上用手写笔代替鼠标\n* 多点触控事件:这些事件是一根或多根手指在多点触控屏上触摸的结果\n\n#### 生命周期事件\n\n所有元素的生命周期事件\n名称|说明\n:-|:-\nInitialized|当元素被实例化,并已根据XAML标记设置里元素的属性之后发生,这时元素已经初始化,但窗口的其他部分可能尚未初始化.此外,尚未应用样式和数据绑定.这时,IsInitialized的属性为true.\nLoaded|当整个窗口已经初始化应用了样式和数据绑定时,该事件发生.这时在元素被呈现之前的最后一站.这时,IsLoaded属性为true.\nUnloaded|当元素被释放时,该事件发生,原因是包含元素的窗口被关闭或特定的元素被从窗口中删除.\n\nInitialised事件,当创建窗口时,会自下而上地初始化每个元素分支.这意味着,位于深层的嵌套元素在它们的容器之前被初始化.当引发初始化事件时,可确保元素树中当前元素以下的元素已经全部完成了初始化.但是,包含当前元素的元素可能还没有初始化,并且不能假定窗口的任何其他部分已经初始化.\n\nLoaded事件:包含其他所有元素的窗口首先引发Loaded事件,然后才是更深层的嵌套元素.为所有元素都引发了Loaded事件后,窗口就变得可见了,并且元素都已被呈现.\n\nWindows类的生命周期事件\n名称|说明\n:-|:-\nSourceInitialized|当取得窗口的HwndSource属性时(但在窗口可见之前)发生.HwndSource是窗口句柄,如果调用Win32 API中的遗留函数,就可能需要使用该句柄.\nContentRendered|在窗口首次呈现后立即发生,对于执行任何可能会影响窗口可视外观的更改操作,这不是一个好位置,否则就会强制进行第二次呈现(改用Loaded事件).然而,ContentRendered事件表明窗口已经完全可见,并且已经准备好接收输入.\nActivated|当用户切换到该窗口时发生(例如,从应用程序的其他窗口或从其他应用程序切换到该窗口).当窗口第一次加载时也会引发Activated事件.从概念上讲,窗口的Activated事件相当于控件的GetFocus事件.\nDeactivated|当用户从该窗口切换到其他窗口时发生(例如,切换到应用程序的其他窗口或切换其他应用程序).当用户关闭窗口也会发生该事件,该事件在Closing事件之后.当在Closed事件之前发生.从概念上讲,窗口的Deactivated事件相当于控件的LostFocus事件.\nClosing|当关闭窗口时发生,不管用户关闭窗口还是用过代码调用Window.Close()或Application.Shutdown()方法关闭窗口.Closing()事件提供了取消操作并保持打开状态的机会,具体通过将CancelEventArgs.Cancel属性设置为true实现该目标.但是,如果因为用户关闭或注销计算机而导致应用程序被关闭,就不能接收到Closing事件.\nClosed|当窗口已经关闭后发生.但是,此时仍可以访问元素对象,当然是在Unloaded事件尚未发生之前.在此,可以执行一些清理工作,向永久存储位置写入设置信息等.","source":"_posts/WPF基础学习-二.md","raw":"---\ntitle: WPF基础学习(二)\ndate: 2020-03-29 11:19:45\ncategories: .Net\ntags:\n - .Net\n - WPF\n---\n> 作者：Peter Luo 出处：https://www.cnblogs.com/Peter-Luo/\n\n### 属性验证\n\n在定义任何类型的属性时,都需要面对错误设置属性的可能性.\n<!--more-->\n\nWPF提供了两种方法来阻止非法值\n\n* ValidateValueCallback:该回调函数可接受或拒绝新值.通常,该回调函数用于捕获违反属性约束的明显错误.可作为DependencyProperty.Register()方法的一个参数提供该回调函数.\n* CoerceValueCallback:该回调函数可将新值修改为更能被接受的值.该回调函数通常用于处理为相同对象设置的依赖项属性值相互冲突的问题.这些值本身可能是合法的,但当同时应用时它们是不相容的.为了使用这个回调函数,当创建FrameworkPropertyMetadata对象时(然后该对象将被传递到DependencyProperty.Register()方法),作为构造函数的一个参数提供该回调函数.\n\n#### 验证回调\n\n验证通常应被添加到属性过程的设置部分.提供的回调函数必须指向一个接受对象参数并返回Boolean值得方法.返回true以接受对象是合法的,返回false拒绝对象.\n\n对于验证回调函数有一个限制:它们必须是静态方法而且无权访问正在被验证的对象.所有能够获得的信息只有刚刚应用的数值.尽管这样更便于重用属性,但可能无法创建考虑其他属性的验证例程.\n\n#### 强制回调\n\n可以通过CoerceValueCallback回调函数处理相互关联的属性.例如,ScrollBar控件提供了Maximum、Minimum和Value属性,这些属性都继承自RangeBase类.保持对这些属性进行调整的一种方法是使用属性强制.\n\n### 路由事件\n\n事件路由允许源自某个元素的事件由另一个元素引发.例如,使用事件路由,来自工具栏按钮的单击事件可在被代码处理之前上传到工具栏,然后上传到包含工具栏的窗口.\n\n#### 定义、注册和封装事件\n\nWPF事件模型和WPF属性模型非常类似.与依赖项属性一样,路由事件由只读的静态字段表示,在静态构造函数中注册,并通过标准的.NET事件定义进行封装.\n\n```cs\npublic abstract class ButtonBase:ContentControl,...\n{\n    public static readonly RoutedEvent ClickEvent;\n    static ButtonBase()\n    {\n        ButtonBase.ClickEvent=EventManager.RegisterRoutedEvent(\"Click\",RoutingStrategy.Bubble,typeof(RoutedEventHandler),typeof(ButtonBase));\n        ...\n    }\n\n    public event RoutedEventHandler Click\n    {\n        add\n        {\n            base.AddHandler(ButtonBase.ClickEvent,value);\n        }\n        remove\n        {\n            base.RemoveHandler(ButtonBase.ClickEvent,value);\n        }\n    }\n    ...\n}\n```\n\n路由事件是使用EvenetManager.RegisterRoutedEvent()方法注册的.当注册事件时,需要制定事件的名称、路由类型、定义事件处理程序语法的委托以及拥有事件的类.\n\n事件封装器可使用AddHandler()和RemoveHandler()方法添加和删除已注册的调用程序,这两个方法都在FrameworkElement基类中定义,并被每个WPF元素继承.\n\n#### 共享路由事件\n\n与依赖项属性一样,可在类之间共享路由事件的定义.通过Routed-Event.AddOwner()方法重用事件.\n\n#### 引发路由事件\n\nRaiseEvent()方法负责为每个已经通过AddHandler()方法注册的调用程序引发事件.因为AddHandler()方法是公有的,所有调用程序可访问该方法——他们能够通过直接调用AddHandler()方法注册他们自己,也可以使用事件封装器.无论使用哪种方法,当调用RaiseEvent()方法时都会通知他们.\n\n所有WPF事件都为事件签名使用熟悉的.NET约定.每个事件处理程序的第一个参数(sender参数）都提供引发该事件的对象的引用.第二个参数是EventArgs对象,该对象与其他所有可能很重要的附加细节绑定在一起.\n\n在WPF中,如果事件不需要传递任何额外细节,可使用RoutedEventArgs类,该类包含了有关如何传递事件的一些细节.如果事件确实需要传递额外的信息,那么需要使用更特殊的继承自RoutedEventArgs的对象.因为每个WPF事件参数都继承自RoutedEventArgs类,所以每个WPF事件处理程序都可访问与事件路由相关的信息.\n\n#### 处理路由事件\n\n可以使用多种方法关联事件处理程序\n\n* 为XAML标记添加事件特性.事件特性按照想要处理的事件命名,它的值就是事件处理程序方法的名称.\n\n    ```cs\n    <Image Source=\"a.jpg\" Stretch=\"None\" Name=\"img\" MouseUp=\"img_MouseUp\" />\n    ```\n\n* 使用代码连接事件\n\n    ```cs\n    img.MouseUp+=new MouseButtonEventHandler(img_MouseUp);\n    // img.MouseUp+=img_MouseUp;\n    ```\n\n* 自行通过调用UIElement.AddHandler()方法直接连接事件\n\n    ```cs\n    img.AddHandler(Image.MouseUpEvent,new MouseButtonEventHandler(img_MouseUp));\n    ```\n\n断开事件处理程序\n\n* 使用-=运算符\n\n    ```cs\n    img.MouseUp -=img_MouseUp;\n    ```\n\n* 使用UIElement.RemoveHandler()\n\n    ```cs\n    img.RemoveHandler(UIElment.MouseUpEvent,new MouseButtonEventHandler(img_MouseUp));\n    ```\n\n### WPF事件\n\n元素事件分类:\n\n* 生命周期事件:在元素被初始化、加载或卸载时发生这些事件\n* 鼠标事件:这是事件是鼠标动作的结果\n* 键盘事件:这是事件是键盘动作的结果\n* 手写笔:这些事件是使用类似钢笔的手写笔的结果.在平板电脑上用手写笔代替鼠标\n* 多点触控事件:这些事件是一根或多根手指在多点触控屏上触摸的结果\n\n#### 生命周期事件\n\n所有元素的生命周期事件\n名称|说明\n:-|:-\nInitialized|当元素被实例化,并已根据XAML标记设置里元素的属性之后发生,这时元素已经初始化,但窗口的其他部分可能尚未初始化.此外,尚未应用样式和数据绑定.这时,IsInitialized的属性为true.\nLoaded|当整个窗口已经初始化应用了样式和数据绑定时,该事件发生.这时在元素被呈现之前的最后一站.这时,IsLoaded属性为true.\nUnloaded|当元素被释放时,该事件发生,原因是包含元素的窗口被关闭或特定的元素被从窗口中删除.\n\nInitialised事件,当创建窗口时,会自下而上地初始化每个元素分支.这意味着,位于深层的嵌套元素在它们的容器之前被初始化.当引发初始化事件时,可确保元素树中当前元素以下的元素已经全部完成了初始化.但是,包含当前元素的元素可能还没有初始化,并且不能假定窗口的任何其他部分已经初始化.\n\nLoaded事件:包含其他所有元素的窗口首先引发Loaded事件,然后才是更深层的嵌套元素.为所有元素都引发了Loaded事件后,窗口就变得可见了,并且元素都已被呈现.\n\nWindows类的生命周期事件\n名称|说明\n:-|:-\nSourceInitialized|当取得窗口的HwndSource属性时(但在窗口可见之前)发生.HwndSource是窗口句柄,如果调用Win32 API中的遗留函数,就可能需要使用该句柄.\nContentRendered|在窗口首次呈现后立即发生,对于执行任何可能会影响窗口可视外观的更改操作,这不是一个好位置,否则就会强制进行第二次呈现(改用Loaded事件).然而,ContentRendered事件表明窗口已经完全可见,并且已经准备好接收输入.\nActivated|当用户切换到该窗口时发生(例如,从应用程序的其他窗口或从其他应用程序切换到该窗口).当窗口第一次加载时也会引发Activated事件.从概念上讲,窗口的Activated事件相当于控件的GetFocus事件.\nDeactivated|当用户从该窗口切换到其他窗口时发生(例如,切换到应用程序的其他窗口或切换其他应用程序).当用户关闭窗口也会发生该事件,该事件在Closing事件之后.当在Closed事件之前发生.从概念上讲,窗口的Deactivated事件相当于控件的LostFocus事件.\nClosing|当关闭窗口时发生,不管用户关闭窗口还是用过代码调用Window.Close()或Application.Shutdown()方法关闭窗口.Closing()事件提供了取消操作并保持打开状态的机会,具体通过将CancelEventArgs.Cancel属性设置为true实现该目标.但是,如果因为用户关闭或注销计算机而导致应用程序被关闭,就不能接收到Closing事件.\nClosed|当窗口已经关闭后发生.但是,此时仍可以访问元素对象,当然是在Unloaded事件尚未发生之前.在此,可以执行一些清理工作,向永久存储位置写入设置信息等.","slug":"WPF基础学习-二","published":1,"updated":"2021-03-30T03:24:16.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0i0049vcua9iha2jmr","content":"<blockquote>\n<p>作者：Peter Luo 出处：<a href=\"https://www.cnblogs.com/Peter-Luo/\">https://www.cnblogs.com/Peter-Luo/</a></p>\n</blockquote>\n<h3 id=\"属性验证\"><a href=\"#属性验证\" class=\"headerlink\" title=\"属性验证\"></a>属性验证</h3><p>在定义任何类型的属性时,都需要面对错误设置属性的可能性.</p>\n<span id=\"more\"></span>\n\n<p>WPF提供了两种方法来阻止非法值</p>\n<ul>\n<li>ValidateValueCallback:该回调函数可接受或拒绝新值.通常,该回调函数用于捕获违反属性约束的明显错误.可作为DependencyProperty.Register()方法的一个参数提供该回调函数.</li>\n<li>CoerceValueCallback:该回调函数可将新值修改为更能被接受的值.该回调函数通常用于处理为相同对象设置的依赖项属性值相互冲突的问题.这些值本身可能是合法的,但当同时应用时它们是不相容的.为了使用这个回调函数,当创建FrameworkPropertyMetadata对象时(然后该对象将被传递到DependencyProperty.Register()方法),作为构造函数的一个参数提供该回调函数.</li>\n</ul>\n<h4 id=\"验证回调\"><a href=\"#验证回调\" class=\"headerlink\" title=\"验证回调\"></a>验证回调</h4><p>验证通常应被添加到属性过程的设置部分.提供的回调函数必须指向一个接受对象参数并返回Boolean值得方法.返回true以接受对象是合法的,返回false拒绝对象.</p>\n<p>对于验证回调函数有一个限制:它们必须是静态方法而且无权访问正在被验证的对象.所有能够获得的信息只有刚刚应用的数值.尽管这样更便于重用属性,但可能无法创建考虑其他属性的验证例程.</p>\n<h4 id=\"强制回调\"><a href=\"#强制回调\" class=\"headerlink\" title=\"强制回调\"></a>强制回调</h4><p>可以通过CoerceValueCallback回调函数处理相互关联的属性.例如,ScrollBar控件提供了Maximum、Minimum和Value属性,这些属性都继承自RangeBase类.保持对这些属性进行调整的一种方法是使用属性强制.</p>\n<h3 id=\"路由事件\"><a href=\"#路由事件\" class=\"headerlink\" title=\"路由事件\"></a>路由事件</h3><p>事件路由允许源自某个元素的事件由另一个元素引发.例如,使用事件路由,来自工具栏按钮的单击事件可在被代码处理之前上传到工具栏,然后上传到包含工具栏的窗口.</p>\n<h4 id=\"定义、注册和封装事件\"><a href=\"#定义、注册和封装事件\" class=\"headerlink\" title=\"定义、注册和封装事件\"></a>定义、注册和封装事件</h4><p>WPF事件模型和WPF属性模型非常类似.与依赖项属性一样,路由事件由只读的静态字段表示,在静态构造函数中注册,并通过标准的.NET事件定义进行封装.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class ButtonBase:ContentControl,...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> RoutedEvent ClickEvent;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">ButtonBase</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ButtonBase.ClickEvent=EventManager.RegisterRoutedEvent(<span class=\"string\">&quot;Click&quot;</span>,RoutingStrategy.Bubble,<span class=\"keyword\">typeof</span>(RoutedEventHandler),<span class=\"keyword\">typeof</span>(ButtonBase));</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> RoutedEventHandler Click</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">add</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.AddHandler(ButtonBase.ClickEvent,<span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">remove</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.RemoveHandler(ButtonBase.ClickEvent,<span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>路由事件是使用EvenetManager.RegisterRoutedEvent()方法注册的.当注册事件时,需要制定事件的名称、路由类型、定义事件处理程序语法的委托以及拥有事件的类.</p>\n<p>事件封装器可使用AddHandler()和RemoveHandler()方法添加和删除已注册的调用程序,这两个方法都在FrameworkElement基类中定义,并被每个WPF元素继承.</p>\n<h4 id=\"共享路由事件\"><a href=\"#共享路由事件\" class=\"headerlink\" title=\"共享路由事件\"></a>共享路由事件</h4><p>与依赖项属性一样,可在类之间共享路由事件的定义.通过Routed-Event.AddOwner()方法重用事件.</p>\n<h4 id=\"引发路由事件\"><a href=\"#引发路由事件\" class=\"headerlink\" title=\"引发路由事件\"></a>引发路由事件</h4><p>RaiseEvent()方法负责为每个已经通过AddHandler()方法注册的调用程序引发事件.因为AddHandler()方法是公有的,所有调用程序可访问该方法——他们能够通过直接调用AddHandler()方法注册他们自己,也可以使用事件封装器.无论使用哪种方法,当调用RaiseEvent()方法时都会通知他们.</p>\n<p>所有WPF事件都为事件签名使用熟悉的.NET约定.每个事件处理程序的第一个参数(sender参数）都提供引发该事件的对象的引用.第二个参数是EventArgs对象,该对象与其他所有可能很重要的附加细节绑定在一起.</p>\n<p>在WPF中,如果事件不需要传递任何额外细节,可使用RoutedEventArgs类,该类包含了有关如何传递事件的一些细节.如果事件确实需要传递额外的信息,那么需要使用更特殊的继承自RoutedEventArgs的对象.因为每个WPF事件参数都继承自RoutedEventArgs类,所以每个WPF事件处理程序都可访问与事件路由相关的信息.</p>\n<h4 id=\"处理路由事件\"><a href=\"#处理路由事件\" class=\"headerlink\" title=\"处理路由事件\"></a>处理路由事件</h4><p>可以使用多种方法关联事件处理程序</p>\n<ul>\n<li><p>为XAML标记添加事件特性.事件特性按照想要处理的事件命名,它的值就是事件处理程序方法的名称.</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Image Source=<span class=\"string\">&quot;a.jpg&quot;</span> Stretch=<span class=\"string\">&quot;None&quot;</span> Name=<span class=\"string\">&quot;img&quot;</span> MouseUp=<span class=\"string\">&quot;img_MouseUp&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用代码连接事件</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.MouseUp+=<span class=\"keyword\">new</span> MouseButtonEventHandler(img_MouseUp);</span><br><span class=\"line\"><span class=\"comment\">// img.MouseUp+=img_MouseUp;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>自行通过调用UIElement.AddHandler()方法直接连接事件</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.AddHandler(Image.MouseUpEvent,<span class=\"keyword\">new</span> MouseButtonEventHandler(img_MouseUp));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>断开事件处理程序</p>\n<ul>\n<li><p>使用-=运算符</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.MouseUp -=img_MouseUp;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用UIElement.RemoveHandler()</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.RemoveHandler(UIElment.MouseUpEvent,<span class=\"keyword\">new</span> MouseButtonEventHandler(img_MouseUp));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"WPF事件\"><a href=\"#WPF事件\" class=\"headerlink\" title=\"WPF事件\"></a>WPF事件</h3><p>元素事件分类:</p>\n<ul>\n<li>生命周期事件:在元素被初始化、加载或卸载时发生这些事件</li>\n<li>鼠标事件:这是事件是鼠标动作的结果</li>\n<li>键盘事件:这是事件是键盘动作的结果</li>\n<li>手写笔:这些事件是使用类似钢笔的手写笔的结果.在平板电脑上用手写笔代替鼠标</li>\n<li>多点触控事件:这些事件是一根或多根手指在多点触控屏上触摸的结果</li>\n</ul>\n<h4 id=\"生命周期事件\"><a href=\"#生命周期事件\" class=\"headerlink\" title=\"生命周期事件\"></a>生命周期事件</h4><p>所有元素的生命周期事件<br>名称|说明<br>:-|:-<br>Initialized|当元素被实例化,并已根据XAML标记设置里元素的属性之后发生,这时元素已经初始化,但窗口的其他部分可能尚未初始化.此外,尚未应用样式和数据绑定.这时,IsInitialized的属性为true.<br>Loaded|当整个窗口已经初始化应用了样式和数据绑定时,该事件发生.这时在元素被呈现之前的最后一站.这时,IsLoaded属性为true.<br>Unloaded|当元素被释放时,该事件发生,原因是包含元素的窗口被关闭或特定的元素被从窗口中删除.</p>\n<p>Initialised事件,当创建窗口时,会自下而上地初始化每个元素分支.这意味着,位于深层的嵌套元素在它们的容器之前被初始化.当引发初始化事件时,可确保元素树中当前元素以下的元素已经全部完成了初始化.但是,包含当前元素的元素可能还没有初始化,并且不能假定窗口的任何其他部分已经初始化.</p>\n<p>Loaded事件:包含其他所有元素的窗口首先引发Loaded事件,然后才是更深层的嵌套元素.为所有元素都引发了Loaded事件后,窗口就变得可见了,并且元素都已被呈现.</p>\n<p>Windows类的生命周期事件<br>名称|说明<br>:-|:-<br>SourceInitialized|当取得窗口的HwndSource属性时(但在窗口可见之前)发生.HwndSource是窗口句柄,如果调用Win32 API中的遗留函数,就可能需要使用该句柄.<br>ContentRendered|在窗口首次呈现后立即发生,对于执行任何可能会影响窗口可视外观的更改操作,这不是一个好位置,否则就会强制进行第二次呈现(改用Loaded事件).然而,ContentRendered事件表明窗口已经完全可见,并且已经准备好接收输入.<br>Activated|当用户切换到该窗口时发生(例如,从应用程序的其他窗口或从其他应用程序切换到该窗口).当窗口第一次加载时也会引发Activated事件.从概念上讲,窗口的Activated事件相当于控件的GetFocus事件.<br>Deactivated|当用户从该窗口切换到其他窗口时发生(例如,切换到应用程序的其他窗口或切换其他应用程序).当用户关闭窗口也会发生该事件,该事件在Closing事件之后.当在Closed事件之前发生.从概念上讲,窗口的Deactivated事件相当于控件的LostFocus事件.<br>Closing|当关闭窗口时发生,不管用户关闭窗口还是用过代码调用Window.Close()或Application.Shutdown()方法关闭窗口.Closing()事件提供了取消操作并保持打开状态的机会,具体通过将CancelEventArgs.Cancel属性设置为true实现该目标.但是,如果因为用户关闭或注销计算机而导致应用程序被关闭,就不能接收到Closing事件.<br>Closed|当窗口已经关闭后发生.但是,此时仍可以访问元素对象,当然是在Unloaded事件尚未发生之前.在此,可以执行一些清理工作,向永久存储位置写入设置信息等.</p>\n","site":{"data":{}},"length":3987,"excerpt":"<blockquote>\n<p>作者：Peter Luo 出处：<a href=\"https://www.cnblogs.com/Peter-Luo/\">https://www.cnblogs.com/Peter-Luo/</a></p>\n</blockquote>\n<h3 id=\"属性验证\"><a href=\"#属性验证\" class=\"headerlink\" title=\"属性验证\"></a>属性验证</h3><p>在定义任何类型的属性时,都需要面对错误设置属性的可能性.</p>","more":"<p>WPF提供了两种方法来阻止非法值</p>\n<ul>\n<li>ValidateValueCallback:该回调函数可接受或拒绝新值.通常,该回调函数用于捕获违反属性约束的明显错误.可作为DependencyProperty.Register()方法的一个参数提供该回调函数.</li>\n<li>CoerceValueCallback:该回调函数可将新值修改为更能被接受的值.该回调函数通常用于处理为相同对象设置的依赖项属性值相互冲突的问题.这些值本身可能是合法的,但当同时应用时它们是不相容的.为了使用这个回调函数,当创建FrameworkPropertyMetadata对象时(然后该对象将被传递到DependencyProperty.Register()方法),作为构造函数的一个参数提供该回调函数.</li>\n</ul>\n<h4 id=\"验证回调\"><a href=\"#验证回调\" class=\"headerlink\" title=\"验证回调\"></a>验证回调</h4><p>验证通常应被添加到属性过程的设置部分.提供的回调函数必须指向一个接受对象参数并返回Boolean值得方法.返回true以接受对象是合法的,返回false拒绝对象.</p>\n<p>对于验证回调函数有一个限制:它们必须是静态方法而且无权访问正在被验证的对象.所有能够获得的信息只有刚刚应用的数值.尽管这样更便于重用属性,但可能无法创建考虑其他属性的验证例程.</p>\n<h4 id=\"强制回调\"><a href=\"#强制回调\" class=\"headerlink\" title=\"强制回调\"></a>强制回调</h4><p>可以通过CoerceValueCallback回调函数处理相互关联的属性.例如,ScrollBar控件提供了Maximum、Minimum和Value属性,这些属性都继承自RangeBase类.保持对这些属性进行调整的一种方法是使用属性强制.</p>\n<h3 id=\"路由事件\"><a href=\"#路由事件\" class=\"headerlink\" title=\"路由事件\"></a>路由事件</h3><p>事件路由允许源自某个元素的事件由另一个元素引发.例如,使用事件路由,来自工具栏按钮的单击事件可在被代码处理之前上传到工具栏,然后上传到包含工具栏的窗口.</p>\n<h4 id=\"定义、注册和封装事件\"><a href=\"#定义、注册和封装事件\" class=\"headerlink\" title=\"定义、注册和封装事件\"></a>定义、注册和封装事件</h4><p>WPF事件模型和WPF属性模型非常类似.与依赖项属性一样,路由事件由只读的静态字段表示,在静态构造函数中注册,并通过标准的.NET事件定义进行封装.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class ButtonBase:ContentControl,...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> RoutedEvent ClickEvent;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">ButtonBase</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ButtonBase.ClickEvent=EventManager.RegisterRoutedEvent(<span class=\"string\">&quot;Click&quot;</span>,RoutingStrategy.Bubble,<span class=\"keyword\">typeof</span>(RoutedEventHandler),<span class=\"keyword\">typeof</span>(ButtonBase));</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> RoutedEventHandler Click</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">add</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.AddHandler(ButtonBase.ClickEvent,<span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">remove</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.RemoveHandler(ButtonBase.ClickEvent,<span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>路由事件是使用EvenetManager.RegisterRoutedEvent()方法注册的.当注册事件时,需要制定事件的名称、路由类型、定义事件处理程序语法的委托以及拥有事件的类.</p>\n<p>事件封装器可使用AddHandler()和RemoveHandler()方法添加和删除已注册的调用程序,这两个方法都在FrameworkElement基类中定义,并被每个WPF元素继承.</p>\n<h4 id=\"共享路由事件\"><a href=\"#共享路由事件\" class=\"headerlink\" title=\"共享路由事件\"></a>共享路由事件</h4><p>与依赖项属性一样,可在类之间共享路由事件的定义.通过Routed-Event.AddOwner()方法重用事件.</p>\n<h4 id=\"引发路由事件\"><a href=\"#引发路由事件\" class=\"headerlink\" title=\"引发路由事件\"></a>引发路由事件</h4><p>RaiseEvent()方法负责为每个已经通过AddHandler()方法注册的调用程序引发事件.因为AddHandler()方法是公有的,所有调用程序可访问该方法——他们能够通过直接调用AddHandler()方法注册他们自己,也可以使用事件封装器.无论使用哪种方法,当调用RaiseEvent()方法时都会通知他们.</p>\n<p>所有WPF事件都为事件签名使用熟悉的.NET约定.每个事件处理程序的第一个参数(sender参数）都提供引发该事件的对象的引用.第二个参数是EventArgs对象,该对象与其他所有可能很重要的附加细节绑定在一起.</p>\n<p>在WPF中,如果事件不需要传递任何额外细节,可使用RoutedEventArgs类,该类包含了有关如何传递事件的一些细节.如果事件确实需要传递额外的信息,那么需要使用更特殊的继承自RoutedEventArgs的对象.因为每个WPF事件参数都继承自RoutedEventArgs类,所以每个WPF事件处理程序都可访问与事件路由相关的信息.</p>\n<h4 id=\"处理路由事件\"><a href=\"#处理路由事件\" class=\"headerlink\" title=\"处理路由事件\"></a>处理路由事件</h4><p>可以使用多种方法关联事件处理程序</p>\n<ul>\n<li><p>为XAML标记添加事件特性.事件特性按照想要处理的事件命名,它的值就是事件处理程序方法的名称.</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Image Source=<span class=\"string\">&quot;a.jpg&quot;</span> Stretch=<span class=\"string\">&quot;None&quot;</span> Name=<span class=\"string\">&quot;img&quot;</span> MouseUp=<span class=\"string\">&quot;img_MouseUp&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用代码连接事件</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.MouseUp+=<span class=\"keyword\">new</span> MouseButtonEventHandler(img_MouseUp);</span><br><span class=\"line\"><span class=\"comment\">// img.MouseUp+=img_MouseUp;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>自行通过调用UIElement.AddHandler()方法直接连接事件</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.AddHandler(Image.MouseUpEvent,<span class=\"keyword\">new</span> MouseButtonEventHandler(img_MouseUp));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>断开事件处理程序</p>\n<ul>\n<li><p>使用-=运算符</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.MouseUp -=img_MouseUp;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用UIElement.RemoveHandler()</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img.RemoveHandler(UIElment.MouseUpEvent,<span class=\"keyword\">new</span> MouseButtonEventHandler(img_MouseUp));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"WPF事件\"><a href=\"#WPF事件\" class=\"headerlink\" title=\"WPF事件\"></a>WPF事件</h3><p>元素事件分类:</p>\n<ul>\n<li>生命周期事件:在元素被初始化、加载或卸载时发生这些事件</li>\n<li>鼠标事件:这是事件是鼠标动作的结果</li>\n<li>键盘事件:这是事件是键盘动作的结果</li>\n<li>手写笔:这些事件是使用类似钢笔的手写笔的结果.在平板电脑上用手写笔代替鼠标</li>\n<li>多点触控事件:这些事件是一根或多根手指在多点触控屏上触摸的结果</li>\n</ul>\n<h4 id=\"生命周期事件\"><a href=\"#生命周期事件\" class=\"headerlink\" title=\"生命周期事件\"></a>生命周期事件</h4><p>所有元素的生命周期事件<br>名称|说明<br>:-|:-<br>Initialized|当元素被实例化,并已根据XAML标记设置里元素的属性之后发生,这时元素已经初始化,但窗口的其他部分可能尚未初始化.此外,尚未应用样式和数据绑定.这时,IsInitialized的属性为true.<br>Loaded|当整个窗口已经初始化应用了样式和数据绑定时,该事件发生.这时在元素被呈现之前的最后一站.这时,IsLoaded属性为true.<br>Unloaded|当元素被释放时,该事件发生,原因是包含元素的窗口被关闭或特定的元素被从窗口中删除.</p>\n<p>Initialised事件,当创建窗口时,会自下而上地初始化每个元素分支.这意味着,位于深层的嵌套元素在它们的容器之前被初始化.当引发初始化事件时,可确保元素树中当前元素以下的元素已经全部完成了初始化.但是,包含当前元素的元素可能还没有初始化,并且不能假定窗口的任何其他部分已经初始化.</p>\n<p>Loaded事件:包含其他所有元素的窗口首先引发Loaded事件,然后才是更深层的嵌套元素.为所有元素都引发了Loaded事件后,窗口就变得可见了,并且元素都已被呈现.</p>\n<p>Windows类的生命周期事件<br>名称|说明<br>:-|:-<br>SourceInitialized|当取得窗口的HwndSource属性时(但在窗口可见之前)发生.HwndSource是窗口句柄,如果调用Win32 API中的遗留函数,就可能需要使用该句柄.<br>ContentRendered|在窗口首次呈现后立即发生,对于执行任何可能会影响窗口可视外观的更改操作,这不是一个好位置,否则就会强制进行第二次呈现(改用Loaded事件).然而,ContentRendered事件表明窗口已经完全可见,并且已经准备好接收输入.<br>Activated|当用户切换到该窗口时发生(例如,从应用程序的其他窗口或从其他应用程序切换到该窗口).当窗口第一次加载时也会引发Activated事件.从概念上讲,窗口的Activated事件相当于控件的GetFocus事件.<br>Deactivated|当用户从该窗口切换到其他窗口时发生(例如,切换到应用程序的其他窗口或切换其他应用程序).当用户关闭窗口也会发生该事件,该事件在Closing事件之后.当在Closed事件之前发生.从概念上讲,窗口的Deactivated事件相当于控件的LostFocus事件.<br>Closing|当关闭窗口时发生,不管用户关闭窗口还是用过代码调用Window.Close()或Application.Shutdown()方法关闭窗口.Closing()事件提供了取消操作并保持打开状态的机会,具体通过将CancelEventArgs.Cancel属性设置为true实现该目标.但是,如果因为用户关闭或注销计算机而导致应用程序被关闭,就不能接收到Closing事件.<br>Closed|当窗口已经关闭后发生.但是,此时仍可以访问元素对象,当然是在Unloaded事件尚未发生之前.在此,可以执行一些清理工作,向永久存储位置写入设置信息等.</p>"},{"title":"亲密关系:通往灵魂的桥梁+无拘无束的关系","date":"2020-03-10T06:28:19.000Z","_content":"\n\"寻找真挚永恒的亲密关系,其实就是寻找自我.\"","source":"_posts/亲密关系-通往灵魂的桥梁-无拘无束的关系.md","raw":"---\ntitle: '亲密关系:通往灵魂的桥梁+无拘无束的关系'\ndate: 2020-03-10 14:28:19\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 亲密关系\n---\n\n\"寻找真挚永恒的亲密关系,其实就是寻找自我.\"","slug":"亲密关系-通往灵魂的桥梁-无拘无束的关系","published":1,"updated":"2021-03-30T03:24:16.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0j004cvcua3uuf6sl8","content":"<p>“寻找真挚永恒的亲密关系,其实就是寻找自我.”</p>\n","site":{"data":{}},"length":23,"excerpt":"","more":"<p>“寻找真挚永恒的亲密关系,其实就是寻找自我.”</p>\n"},{"title":"人性的弱点:如何赢得友谊并影响他人(二)","date":"2020-03-17T13:24:58.000Z","_content":"“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”\n<!-- more -->\n\n### 第四篇 更好说服他人的9种诀窍\n\n#### 第1章 称赞的神奇魔力\n\n* 一般而言，等人们听完赞美后，再去接受批评，会好受些。就像理发师给顾客刮胡子前，要先给脸上涂上光滑的肥皂一样。\n* 先赞美别人，就像牙医用麻醉剂，虽然病人还要忍受钻牙齿的过程，但是毕竟麻醉剂已经消除了不少痛苦。\n* 法则1：学会真诚地赞美和欣赏别人。\n\n#### 第2章 怎么批评不会引起怨恨\n\n* 间接让人意识到需要“改进”，而不直接“批评”，可以让谈话效果事半功倍。\n* 法则2：让人看到错误，方式要间接、委婉。\n\n#### 第3章 批评别人之前先承认自己的错误\n\n* 先承认自己的错误再提及别人的错误，这样更容易被人接受。\n* 错误发生了，即使没有来得及纠正，只要坦然承认事实，也会对他人产生正面影响。\n* 法则3：先坦承自己的不足，再谈别人的错误。\n\n#### 第4章 以提问的方式来替代命令\n\n* 虚心向别人请教，不仅能激发别人的兴趣，参与其中，也可以招揽生意或者让生意越做越好。\n* 即使错误显而易见，命令式的斥责也会引起持久的愤怒和抵触情绪。\n* 法则4：以提问代替命令。\n\n#### 第5章 给足别人面子\n\n* 给足别人面子，对发展良好的人际关系极为重要。不过，这一点总被我们忽视。\n* 即使我们百分之百正确，错误全出在别人身上，但假如让别人颜面尽失，我们也会有失风度，落不到任何好处。\n* “我没有任何权利。不论通过言语或行动，贬低任何一个人的尊严，我对别人的评价不重要，重要的是别人对我们的评价。贬低别人等同于犯罪。”\n* 法则5：给足别人面子。\n\n#### 第6章 如何激励他人获得成功\n\n* “赞美就像阳光，照耀着人的灵魂。没有赞美，生命之光就不会绽放。可惜的是，绝大多数人只习惯于冰冷的批评，不远分享赞美的阳光。”\n* 赞美很重要，但赞美必须实实在在，必须真诚可信，绝非为了取悦而编造的奉承之言。\n* 法则6：赞美他人的没一点微小进步，赞美要诚挚，赞美越多越好。\n\n#### 第7章 赞美能从根本上改变他人的行为\n\n* “假若渴望具备别人的有点，那么你应公开认可别人的优点，先高看别人一眼。这样，别人会加倍努力，避免让你失望。”\n* 法则7：用赞美激励别人，别人才会更加努力。\n\n#### 第8章 不批评才能使人自觉主动改成错误\n\n* 试想您直接对子女、配偶或下属说，他/她没有任何天赋、笨手笨脚、成不了大器，那么，您就等于扼杀了别人的信心。相反，多给别人鼓励，一切就会向好的方向发展。只要您让对方自信，相信自己有无穷的潜力，那么别人也会更加努力，事情也会做得更好。\n* 法则8：小错无妨，多多鼓励。\n\n#### 第9章 怎样让别人乐意接受你的建议\n\n* 改变别人的态度或行为，成为出色的领导者，以下规则应熟记在心：\n\n    1. 以诚待人，不轻易许诺；去除私心，一心想着别人的利益；\n    2. 给别人明确的指向；\n    3. 富有同情心，察己知人；\n    4. 给出方向的同时也给出行动步骤；\n    5. 把自己的需要和别人的利益挂钩；\n    6. 自己索取的同时也要别人获益。\n* 人们不会拒绝配合您的工作，要看您的方法是否得当。\n* 法则9：让人乐意配合。\n\n### 第六篇 让你家庭幸福的7个法则\n\n#### 第1章 喋喋不休就是在自掘婚姻坟墓\n\n* 在破坏爱情的所有诱因中，喋喋不休像地狱的诅咒，最具杀伤力；像眼镜蛇的毒液一样毙命。\n* 法则1：绝不要唠叨。\n\n#### 第2章 不要试图改变对方\n\n* 与人交往，首先不去干涉别人的自由。如果没有发生严重利益冲突的话，绝不轻易干涉别人追求快乐的方式。\n* 法则2：不要试图改变对方。\n\n#### 第3章 家庭生活的核心：不指责\n\n* \n","source":"_posts/人性的弱点-如何赢得友谊并影响他人(二).md","raw":"---\ntitle: '人性的弱点:如何赢得友谊并影响他人(二)'\ndate: 2020-03-17 21:24:58\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 人际交往\n---\n“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”\n<!-- more -->\n\n### 第四篇 更好说服他人的9种诀窍\n\n#### 第1章 称赞的神奇魔力\n\n* 一般而言，等人们听完赞美后，再去接受批评，会好受些。就像理发师给顾客刮胡子前，要先给脸上涂上光滑的肥皂一样。\n* 先赞美别人，就像牙医用麻醉剂，虽然病人还要忍受钻牙齿的过程，但是毕竟麻醉剂已经消除了不少痛苦。\n* 法则1：学会真诚地赞美和欣赏别人。\n\n#### 第2章 怎么批评不会引起怨恨\n\n* 间接让人意识到需要“改进”，而不直接“批评”，可以让谈话效果事半功倍。\n* 法则2：让人看到错误，方式要间接、委婉。\n\n#### 第3章 批评别人之前先承认自己的错误\n\n* 先承认自己的错误再提及别人的错误，这样更容易被人接受。\n* 错误发生了，即使没有来得及纠正，只要坦然承认事实，也会对他人产生正面影响。\n* 法则3：先坦承自己的不足，再谈别人的错误。\n\n#### 第4章 以提问的方式来替代命令\n\n* 虚心向别人请教，不仅能激发别人的兴趣，参与其中，也可以招揽生意或者让生意越做越好。\n* 即使错误显而易见，命令式的斥责也会引起持久的愤怒和抵触情绪。\n* 法则4：以提问代替命令。\n\n#### 第5章 给足别人面子\n\n* 给足别人面子，对发展良好的人际关系极为重要。不过，这一点总被我们忽视。\n* 即使我们百分之百正确，错误全出在别人身上，但假如让别人颜面尽失，我们也会有失风度，落不到任何好处。\n* “我没有任何权利。不论通过言语或行动，贬低任何一个人的尊严，我对别人的评价不重要，重要的是别人对我们的评价。贬低别人等同于犯罪。”\n* 法则5：给足别人面子。\n\n#### 第6章 如何激励他人获得成功\n\n* “赞美就像阳光，照耀着人的灵魂。没有赞美，生命之光就不会绽放。可惜的是，绝大多数人只习惯于冰冷的批评，不远分享赞美的阳光。”\n* 赞美很重要，但赞美必须实实在在，必须真诚可信，绝非为了取悦而编造的奉承之言。\n* 法则6：赞美他人的没一点微小进步，赞美要诚挚，赞美越多越好。\n\n#### 第7章 赞美能从根本上改变他人的行为\n\n* “假若渴望具备别人的有点，那么你应公开认可别人的优点，先高看别人一眼。这样，别人会加倍努力，避免让你失望。”\n* 法则7：用赞美激励别人，别人才会更加努力。\n\n#### 第8章 不批评才能使人自觉主动改成错误\n\n* 试想您直接对子女、配偶或下属说，他/她没有任何天赋、笨手笨脚、成不了大器，那么，您就等于扼杀了别人的信心。相反，多给别人鼓励，一切就会向好的方向发展。只要您让对方自信，相信自己有无穷的潜力，那么别人也会更加努力，事情也会做得更好。\n* 法则8：小错无妨，多多鼓励。\n\n#### 第9章 怎样让别人乐意接受你的建议\n\n* 改变别人的态度或行为，成为出色的领导者，以下规则应熟记在心：\n\n    1. 以诚待人，不轻易许诺；去除私心，一心想着别人的利益；\n    2. 给别人明确的指向；\n    3. 富有同情心，察己知人；\n    4. 给出方向的同时也给出行动步骤；\n    5. 把自己的需要和别人的利益挂钩；\n    6. 自己索取的同时也要别人获益。\n* 人们不会拒绝配合您的工作，要看您的方法是否得当。\n* 法则9：让人乐意配合。\n\n### 第六篇 让你家庭幸福的7个法则\n\n#### 第1章 喋喋不休就是在自掘婚姻坟墓\n\n* 在破坏爱情的所有诱因中，喋喋不休像地狱的诅咒，最具杀伤力；像眼镜蛇的毒液一样毙命。\n* 法则1：绝不要唠叨。\n\n#### 第2章 不要试图改变对方\n\n* 与人交往，首先不去干涉别人的自由。如果没有发生严重利益冲突的话，绝不轻易干涉别人追求快乐的方式。\n* 法则2：不要试图改变对方。\n\n#### 第3章 家庭生活的核心：不指责\n\n* \n","slug":"人性的弱点-如何赢得友谊并影响他人(二)","published":1,"updated":"2021-03-30T03:24:16.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0k004fvcua1u379sqr","content":"<p>“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”</p>\n<span id=\"more\"></span>\n\n<h3 id=\"第四篇-更好说服他人的9种诀窍\"><a href=\"#第四篇-更好说服他人的9种诀窍\" class=\"headerlink\" title=\"第四篇 更好说服他人的9种诀窍\"></a>第四篇 更好说服他人的9种诀窍</h3><h4 id=\"第1章-称赞的神奇魔力\"><a href=\"#第1章-称赞的神奇魔力\" class=\"headerlink\" title=\"第1章 称赞的神奇魔力\"></a>第1章 称赞的神奇魔力</h4><ul>\n<li>一般而言，等人们听完赞美后，再去接受批评，会好受些。就像理发师给顾客刮胡子前，要先给脸上涂上光滑的肥皂一样。</li>\n<li>先赞美别人，就像牙医用麻醉剂，虽然病人还要忍受钻牙齿的过程，但是毕竟麻醉剂已经消除了不少痛苦。</li>\n<li>法则1：学会真诚地赞美和欣赏别人。</li>\n</ul>\n<h4 id=\"第2章-怎么批评不会引起怨恨\"><a href=\"#第2章-怎么批评不会引起怨恨\" class=\"headerlink\" title=\"第2章 怎么批评不会引起怨恨\"></a>第2章 怎么批评不会引起怨恨</h4><ul>\n<li>间接让人意识到需要“改进”，而不直接“批评”，可以让谈话效果事半功倍。</li>\n<li>法则2：让人看到错误，方式要间接、委婉。</li>\n</ul>\n<h4 id=\"第3章-批评别人之前先承认自己的错误\"><a href=\"#第3章-批评别人之前先承认自己的错误\" class=\"headerlink\" title=\"第3章 批评别人之前先承认自己的错误\"></a>第3章 批评别人之前先承认自己的错误</h4><ul>\n<li>先承认自己的错误再提及别人的错误，这样更容易被人接受。</li>\n<li>错误发生了，即使没有来得及纠正，只要坦然承认事实，也会对他人产生正面影响。</li>\n<li>法则3：先坦承自己的不足，再谈别人的错误。</li>\n</ul>\n<h4 id=\"第4章-以提问的方式来替代命令\"><a href=\"#第4章-以提问的方式来替代命令\" class=\"headerlink\" title=\"第4章 以提问的方式来替代命令\"></a>第4章 以提问的方式来替代命令</h4><ul>\n<li>虚心向别人请教，不仅能激发别人的兴趣，参与其中，也可以招揽生意或者让生意越做越好。</li>\n<li>即使错误显而易见，命令式的斥责也会引起持久的愤怒和抵触情绪。</li>\n<li>法则4：以提问代替命令。</li>\n</ul>\n<h4 id=\"第5章-给足别人面子\"><a href=\"#第5章-给足别人面子\" class=\"headerlink\" title=\"第5章 给足别人面子\"></a>第5章 给足别人面子</h4><ul>\n<li>给足别人面子，对发展良好的人际关系极为重要。不过，这一点总被我们忽视。</li>\n<li>即使我们百分之百正确，错误全出在别人身上，但假如让别人颜面尽失，我们也会有失风度，落不到任何好处。</li>\n<li>“我没有任何权利。不论通过言语或行动，贬低任何一个人的尊严，我对别人的评价不重要，重要的是别人对我们的评价。贬低别人等同于犯罪。”</li>\n<li>法则5：给足别人面子。</li>\n</ul>\n<h4 id=\"第6章-如何激励他人获得成功\"><a href=\"#第6章-如何激励他人获得成功\" class=\"headerlink\" title=\"第6章 如何激励他人获得成功\"></a>第6章 如何激励他人获得成功</h4><ul>\n<li>“赞美就像阳光，照耀着人的灵魂。没有赞美，生命之光就不会绽放。可惜的是，绝大多数人只习惯于冰冷的批评，不远分享赞美的阳光。”</li>\n<li>赞美很重要，但赞美必须实实在在，必须真诚可信，绝非为了取悦而编造的奉承之言。</li>\n<li>法则6：赞美他人的没一点微小进步，赞美要诚挚，赞美越多越好。</li>\n</ul>\n<h4 id=\"第7章-赞美能从根本上改变他人的行为\"><a href=\"#第7章-赞美能从根本上改变他人的行为\" class=\"headerlink\" title=\"第7章 赞美能从根本上改变他人的行为\"></a>第7章 赞美能从根本上改变他人的行为</h4><ul>\n<li>“假若渴望具备别人的有点，那么你应公开认可别人的优点，先高看别人一眼。这样，别人会加倍努力，避免让你失望。”</li>\n<li>法则7：用赞美激励别人，别人才会更加努力。</li>\n</ul>\n<h4 id=\"第8章-不批评才能使人自觉主动改成错误\"><a href=\"#第8章-不批评才能使人自觉主动改成错误\" class=\"headerlink\" title=\"第8章 不批评才能使人自觉主动改成错误\"></a>第8章 不批评才能使人自觉主动改成错误</h4><ul>\n<li>试想您直接对子女、配偶或下属说，他/她没有任何天赋、笨手笨脚、成不了大器，那么，您就等于扼杀了别人的信心。相反，多给别人鼓励，一切就会向好的方向发展。只要您让对方自信，相信自己有无穷的潜力，那么别人也会更加努力，事情也会做得更好。</li>\n<li>法则8：小错无妨，多多鼓励。</li>\n</ul>\n<h4 id=\"第9章-怎样让别人乐意接受你的建议\"><a href=\"#第9章-怎样让别人乐意接受你的建议\" class=\"headerlink\" title=\"第9章 怎样让别人乐意接受你的建议\"></a>第9章 怎样让别人乐意接受你的建议</h4><ul>\n<li><p>改变别人的态度或行为，成为出色的领导者，以下规则应熟记在心：</p>\n<ol>\n<li>以诚待人，不轻易许诺；去除私心，一心想着别人的利益；</li>\n<li>给别人明确的指向；</li>\n<li>富有同情心，察己知人；</li>\n<li>给出方向的同时也给出行动步骤；</li>\n<li>把自己的需要和别人的利益挂钩；</li>\n<li>自己索取的同时也要别人获益。</li>\n</ol>\n</li>\n<li><p>人们不会拒绝配合您的工作，要看您的方法是否得当。</p>\n</li>\n<li><p>法则9：让人乐意配合。</p>\n</li>\n</ul>\n<h3 id=\"第六篇-让你家庭幸福的7个法则\"><a href=\"#第六篇-让你家庭幸福的7个法则\" class=\"headerlink\" title=\"第六篇 让你家庭幸福的7个法则\"></a>第六篇 让你家庭幸福的7个法则</h3><h4 id=\"第1章-喋喋不休就是在自掘婚姻坟墓\"><a href=\"#第1章-喋喋不休就是在自掘婚姻坟墓\" class=\"headerlink\" title=\"第1章 喋喋不休就是在自掘婚姻坟墓\"></a>第1章 喋喋不休就是在自掘婚姻坟墓</h4><ul>\n<li>在破坏爱情的所有诱因中，喋喋不休像地狱的诅咒，最具杀伤力；像眼镜蛇的毒液一样毙命。</li>\n<li>法则1：绝不要唠叨。</li>\n</ul>\n<h4 id=\"第2章-不要试图改变对方\"><a href=\"#第2章-不要试图改变对方\" class=\"headerlink\" title=\"第2章 不要试图改变对方\"></a>第2章 不要试图改变对方</h4><ul>\n<li>与人交往，首先不去干涉别人的自由。如果没有发生严重利益冲突的话，绝不轻易干涉别人追求快乐的方式。</li>\n<li>法则2：不要试图改变对方。</li>\n</ul>\n<h4 id=\"第3章-家庭生活的核心：不指责\"><a href=\"#第3章-家庭生活的核心：不指责\" class=\"headerlink\" title=\"第3章 家庭生活的核心：不指责\"></a>第3章 家庭生活的核心：不指责</h4><ul>\n<li></li>\n</ul>\n","site":{"data":{}},"length":1356,"excerpt":"<p>“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”</p>","more":"<h3 id=\"第四篇-更好说服他人的9种诀窍\"><a href=\"#第四篇-更好说服他人的9种诀窍\" class=\"headerlink\" title=\"第四篇 更好说服他人的9种诀窍\"></a>第四篇 更好说服他人的9种诀窍</h3><h4 id=\"第1章-称赞的神奇魔力\"><a href=\"#第1章-称赞的神奇魔力\" class=\"headerlink\" title=\"第1章 称赞的神奇魔力\"></a>第1章 称赞的神奇魔力</h4><ul>\n<li>一般而言，等人们听完赞美后，再去接受批评，会好受些。就像理发师给顾客刮胡子前，要先给脸上涂上光滑的肥皂一样。</li>\n<li>先赞美别人，就像牙医用麻醉剂，虽然病人还要忍受钻牙齿的过程，但是毕竟麻醉剂已经消除了不少痛苦。</li>\n<li>法则1：学会真诚地赞美和欣赏别人。</li>\n</ul>\n<h4 id=\"第2章-怎么批评不会引起怨恨\"><a href=\"#第2章-怎么批评不会引起怨恨\" class=\"headerlink\" title=\"第2章 怎么批评不会引起怨恨\"></a>第2章 怎么批评不会引起怨恨</h4><ul>\n<li>间接让人意识到需要“改进”，而不直接“批评”，可以让谈话效果事半功倍。</li>\n<li>法则2：让人看到错误，方式要间接、委婉。</li>\n</ul>\n<h4 id=\"第3章-批评别人之前先承认自己的错误\"><a href=\"#第3章-批评别人之前先承认自己的错误\" class=\"headerlink\" title=\"第3章 批评别人之前先承认自己的错误\"></a>第3章 批评别人之前先承认自己的错误</h4><ul>\n<li>先承认自己的错误再提及别人的错误，这样更容易被人接受。</li>\n<li>错误发生了，即使没有来得及纠正，只要坦然承认事实，也会对他人产生正面影响。</li>\n<li>法则3：先坦承自己的不足，再谈别人的错误。</li>\n</ul>\n<h4 id=\"第4章-以提问的方式来替代命令\"><a href=\"#第4章-以提问的方式来替代命令\" class=\"headerlink\" title=\"第4章 以提问的方式来替代命令\"></a>第4章 以提问的方式来替代命令</h4><ul>\n<li>虚心向别人请教，不仅能激发别人的兴趣，参与其中，也可以招揽生意或者让生意越做越好。</li>\n<li>即使错误显而易见，命令式的斥责也会引起持久的愤怒和抵触情绪。</li>\n<li>法则4：以提问代替命令。</li>\n</ul>\n<h4 id=\"第5章-给足别人面子\"><a href=\"#第5章-给足别人面子\" class=\"headerlink\" title=\"第5章 给足别人面子\"></a>第5章 给足别人面子</h4><ul>\n<li>给足别人面子，对发展良好的人际关系极为重要。不过，这一点总被我们忽视。</li>\n<li>即使我们百分之百正确，错误全出在别人身上，但假如让别人颜面尽失，我们也会有失风度，落不到任何好处。</li>\n<li>“我没有任何权利。不论通过言语或行动，贬低任何一个人的尊严，我对别人的评价不重要，重要的是别人对我们的评价。贬低别人等同于犯罪。”</li>\n<li>法则5：给足别人面子。</li>\n</ul>\n<h4 id=\"第6章-如何激励他人获得成功\"><a href=\"#第6章-如何激励他人获得成功\" class=\"headerlink\" title=\"第6章 如何激励他人获得成功\"></a>第6章 如何激励他人获得成功</h4><ul>\n<li>“赞美就像阳光，照耀着人的灵魂。没有赞美，生命之光就不会绽放。可惜的是，绝大多数人只习惯于冰冷的批评，不远分享赞美的阳光。”</li>\n<li>赞美很重要，但赞美必须实实在在，必须真诚可信，绝非为了取悦而编造的奉承之言。</li>\n<li>法则6：赞美他人的没一点微小进步，赞美要诚挚，赞美越多越好。</li>\n</ul>\n<h4 id=\"第7章-赞美能从根本上改变他人的行为\"><a href=\"#第7章-赞美能从根本上改变他人的行为\" class=\"headerlink\" title=\"第7章 赞美能从根本上改变他人的行为\"></a>第7章 赞美能从根本上改变他人的行为</h4><ul>\n<li>“假若渴望具备别人的有点，那么你应公开认可别人的优点，先高看别人一眼。这样，别人会加倍努力，避免让你失望。”</li>\n<li>法则7：用赞美激励别人，别人才会更加努力。</li>\n</ul>\n<h4 id=\"第8章-不批评才能使人自觉主动改成错误\"><a href=\"#第8章-不批评才能使人自觉主动改成错误\" class=\"headerlink\" title=\"第8章 不批评才能使人自觉主动改成错误\"></a>第8章 不批评才能使人自觉主动改成错误</h4><ul>\n<li>试想您直接对子女、配偶或下属说，他/她没有任何天赋、笨手笨脚、成不了大器，那么，您就等于扼杀了别人的信心。相反，多给别人鼓励，一切就会向好的方向发展。只要您让对方自信，相信自己有无穷的潜力，那么别人也会更加努力，事情也会做得更好。</li>\n<li>法则8：小错无妨，多多鼓励。</li>\n</ul>\n<h4 id=\"第9章-怎样让别人乐意接受你的建议\"><a href=\"#第9章-怎样让别人乐意接受你的建议\" class=\"headerlink\" title=\"第9章 怎样让别人乐意接受你的建议\"></a>第9章 怎样让别人乐意接受你的建议</h4><ul>\n<li><p>改变别人的态度或行为，成为出色的领导者，以下规则应熟记在心：</p>\n<ol>\n<li>以诚待人，不轻易许诺；去除私心，一心想着别人的利益；</li>\n<li>给别人明确的指向；</li>\n<li>富有同情心，察己知人；</li>\n<li>给出方向的同时也给出行动步骤；</li>\n<li>把自己的需要和别人的利益挂钩；</li>\n<li>自己索取的同时也要别人获益。</li>\n</ol>\n</li>\n<li><p>人们不会拒绝配合您的工作，要看您的方法是否得当。</p>\n</li>\n<li><p>法则9：让人乐意配合。</p>\n</li>\n</ul>\n<h3 id=\"第六篇-让你家庭幸福的7个法则\"><a href=\"#第六篇-让你家庭幸福的7个法则\" class=\"headerlink\" title=\"第六篇 让你家庭幸福的7个法则\"></a>第六篇 让你家庭幸福的7个法则</h3><h4 id=\"第1章-喋喋不休就是在自掘婚姻坟墓\"><a href=\"#第1章-喋喋不休就是在自掘婚姻坟墓\" class=\"headerlink\" title=\"第1章 喋喋不休就是在自掘婚姻坟墓\"></a>第1章 喋喋不休就是在自掘婚姻坟墓</h4><ul>\n<li>在破坏爱情的所有诱因中，喋喋不休像地狱的诅咒，最具杀伤力；像眼镜蛇的毒液一样毙命。</li>\n<li>法则1：绝不要唠叨。</li>\n</ul>\n<h4 id=\"第2章-不要试图改变对方\"><a href=\"#第2章-不要试图改变对方\" class=\"headerlink\" title=\"第2章 不要试图改变对方\"></a>第2章 不要试图改变对方</h4><ul>\n<li>与人交往，首先不去干涉别人的自由。如果没有发生严重利益冲突的话，绝不轻易干涉别人追求快乐的方式。</li>\n<li>法则2：不要试图改变对方。</li>\n</ul>\n<h4 id=\"第3章-家庭生活的核心：不指责\"><a href=\"#第3章-家庭生活的核心：不指责\" class=\"headerlink\" title=\"第3章 家庭生活的核心：不指责\"></a>第3章 家庭生活的核心：不指责</h4><ul>\n<li></li>\n</ul>"},{"title":"使用WebApiClient请求和管理Restful Api","date":"2018-03-10T14:06:47.000Z","_content":"WebApiClient的出现,大幅度减轻了接口调用者的工作量,而且在调用Http接口上还非常容易维护和更新,还可以轻松应付设计不太友好的一些Http接口\n\n使用WebApiClient,编程人员不再需要手动实现路径拼接,参数拼接,请求体组装和响应映射为模型这些繁琐的过程.\n<!--more-->\n\n以下为WebApiClient应用到项目中的一般流程\n##### 声明http接口的Interface\n```cs\n[JsonReturn]\npublic interface IlotRemotePush : IDisposable\n{\n    /// <summary>\n    /// 创建远程推送账号\n    /// </summmary>\n    /// <param name=\"auth\">授权</param>\n    /// <returns></returns>\n    [HttpPost(\"/CreateAccount\")]\n    ITask<ApiResult<PushAccount>> CreateAccountAsync(lotBasicAuth auth);\n\n     /// <summary>\n    /// 获取推送服务信息\n    /// </summmary>\n    /// <param name=\"id\">pushId</param>\n    /// <returns></returns>\n    [HttpGet(\"/GetSevice?id={id}\")]\n    ITask<ApiResult<MqttService>> GetPushServiceAsync(string id);\n}\n\n/// <summary>\n/// Api结果接口\n/// </summmary>\npublic interface IApiResult\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    ErrorCode Code { get; set; }\n\n    /// <summary>\n    /// 相关提示信息\n    /// </summmary>\n    string Msg { get; set; }\n}\n\n/// <summary>\n/// 表示Api结果\n/// </summmary>\npublic class ApiResult<T> : IApiReult\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    public ErrorCode Code { get; set; }\n\n    /// <summary>\n    /// 相关提示信息\n    /// </summmary>\n    public string Msg { get; set; }\n\n    /// <summary>\n    /// 业务数据\n    /// </summmary>\n    public T Data { get; set; }\n}\n```\n\n##### 调用http接口\nWebApiClient不需要开发者实现接口,使用HttpApiClient.Create方法可以动态创建接口的实现类的实例,调用实例的方法,就完成一个Api的请求\n```cs\nusing (var iotApi = HttpApiClient.Create<IlotRemotePush>())\n{\n    var auth = new lotBasicAuth(config.AppId, config.AppToken);\n    var createResult = await iotApi.CreateAccountAsync(auth);\n\n    if(createResult.Code != ErrorCode.NoError)\n    {\n        return null;\n    }\n\n    config.PushId = createResult.Data.Id;\n    config.PushToken = createResult.Data.Token;\n    await db.SaveChangesAsync();\n\n    return config;\n}\n```\n\n##### 异常定义与异常处理\n在以上接口中,接口返回的都是ApiResult\n```cs\n/// <summary>\n/// 表示lot异常\n/// </summmary>\npublic class lotException : Exception\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    public ErrorCode ErrorCode{ get; private set; }\n\n    /// <summary>\n    /// lot异常\n    /// </summmary>\n    /// <param name=\"apiResult\">api结果值</param>\n    public lotException(IApiResult apiResult) : base(apiResult.Msg)\n    {\n        this.ErrorCode = apiResult.Code;\n    }\n}\n```\n\n还应该在Interface上扩展JsonResult,用于将ApiResult的ErrorCode转换为lotExcetion,并抛出\n```cs\n/// <summary>\n/// 表示lotJson结果\n/// </summmary>\npublic class lotJsonResultAttribute : JsonReturnAttribute\n{\n    protected override async Task<object> GetTaskResult(ApiActionContext context)\n    {\n        var apiResult = await base.GetTaskResult(context) as IApiResult;\n        if(apiResult != null && apiResult.Code != ErrorCode.NoError)\n        {\n            throw new lotException(apiResult);\n        }\n        return apiResult;\n    }\n}\n```\n\n然后将新的lotJsonResultAttribute在Interface上替换JsonReturnAttribute\n```cs\n[lotJsonResult]public interface IlotRemotePush : IDisposable\n{\n    ...\n}\n```\n\n最后,调用http接口的时候,可以使用Handle()扩展方法处理异常\n```cs\nusing(var iotApi = HttpApiClient.Create<IlotRemotePush>())\n{\n    var auth = new lotBasicAuth(config.AppId, config.AppToken);\n    var createResult = await iotApi.CreateAccountAsync(auth).Handle()\n    .WhenCatch<lotException>(ex => {\n        // process exception\n        return default(ApiResult<PushAccount>);\n    })\n    .WhenCatch<lotException>(ex =>\n    {\n        // process exception\n        return default(ApiResult<PushAccount>);\n    });\n\n    if(createResult == null)\n    {\n        return null;\n    }\n\n    config.PushId = createResult.Data.Id;\n    config.PushToken = createResult.Data.Token;\n    await db.SaveChangesAsync();\n\n    return config;\n}\n```\n","source":"_posts/使用WebApiClient请求和管理Restful-Api.md","raw":"---\ntitle: 使用WebApiClient请求和管理Restful Api\ndate: 2018-03-10 22:06:47\ncategories: .Net\ntags:\n - .Net\n - Web Api\n---\nWebApiClient的出现,大幅度减轻了接口调用者的工作量,而且在调用Http接口上还非常容易维护和更新,还可以轻松应付设计不太友好的一些Http接口\n\n使用WebApiClient,编程人员不再需要手动实现路径拼接,参数拼接,请求体组装和响应映射为模型这些繁琐的过程.\n<!--more-->\n\n以下为WebApiClient应用到项目中的一般流程\n##### 声明http接口的Interface\n```cs\n[JsonReturn]\npublic interface IlotRemotePush : IDisposable\n{\n    /// <summary>\n    /// 创建远程推送账号\n    /// </summmary>\n    /// <param name=\"auth\">授权</param>\n    /// <returns></returns>\n    [HttpPost(\"/CreateAccount\")]\n    ITask<ApiResult<PushAccount>> CreateAccountAsync(lotBasicAuth auth);\n\n     /// <summary>\n    /// 获取推送服务信息\n    /// </summmary>\n    /// <param name=\"id\">pushId</param>\n    /// <returns></returns>\n    [HttpGet(\"/GetSevice?id={id}\")]\n    ITask<ApiResult<MqttService>> GetPushServiceAsync(string id);\n}\n\n/// <summary>\n/// Api结果接口\n/// </summmary>\npublic interface IApiResult\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    ErrorCode Code { get; set; }\n\n    /// <summary>\n    /// 相关提示信息\n    /// </summmary>\n    string Msg { get; set; }\n}\n\n/// <summary>\n/// 表示Api结果\n/// </summmary>\npublic class ApiResult<T> : IApiReult\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    public ErrorCode Code { get; set; }\n\n    /// <summary>\n    /// 相关提示信息\n    /// </summmary>\n    public string Msg { get; set; }\n\n    /// <summary>\n    /// 业务数据\n    /// </summmary>\n    public T Data { get; set; }\n}\n```\n\n##### 调用http接口\nWebApiClient不需要开发者实现接口,使用HttpApiClient.Create方法可以动态创建接口的实现类的实例,调用实例的方法,就完成一个Api的请求\n```cs\nusing (var iotApi = HttpApiClient.Create<IlotRemotePush>())\n{\n    var auth = new lotBasicAuth(config.AppId, config.AppToken);\n    var createResult = await iotApi.CreateAccountAsync(auth);\n\n    if(createResult.Code != ErrorCode.NoError)\n    {\n        return null;\n    }\n\n    config.PushId = createResult.Data.Id;\n    config.PushToken = createResult.Data.Token;\n    await db.SaveChangesAsync();\n\n    return config;\n}\n```\n\n##### 异常定义与异常处理\n在以上接口中,接口返回的都是ApiResult\n```cs\n/// <summary>\n/// 表示lot异常\n/// </summmary>\npublic class lotException : Exception\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    public ErrorCode ErrorCode{ get; private set; }\n\n    /// <summary>\n    /// lot异常\n    /// </summmary>\n    /// <param name=\"apiResult\">api结果值</param>\n    public lotException(IApiResult apiResult) : base(apiResult.Msg)\n    {\n        this.ErrorCode = apiResult.Code;\n    }\n}\n```\n\n还应该在Interface上扩展JsonResult,用于将ApiResult的ErrorCode转换为lotExcetion,并抛出\n```cs\n/// <summary>\n/// 表示lotJson结果\n/// </summmary>\npublic class lotJsonResultAttribute : JsonReturnAttribute\n{\n    protected override async Task<object> GetTaskResult(ApiActionContext context)\n    {\n        var apiResult = await base.GetTaskResult(context) as IApiResult;\n        if(apiResult != null && apiResult.Code != ErrorCode.NoError)\n        {\n            throw new lotException(apiResult);\n        }\n        return apiResult;\n    }\n}\n```\n\n然后将新的lotJsonResultAttribute在Interface上替换JsonReturnAttribute\n```cs\n[lotJsonResult]public interface IlotRemotePush : IDisposable\n{\n    ...\n}\n```\n\n最后,调用http接口的时候,可以使用Handle()扩展方法处理异常\n```cs\nusing(var iotApi = HttpApiClient.Create<IlotRemotePush>())\n{\n    var auth = new lotBasicAuth(config.AppId, config.AppToken);\n    var createResult = await iotApi.CreateAccountAsync(auth).Handle()\n    .WhenCatch<lotException>(ex => {\n        // process exception\n        return default(ApiResult<PushAccount>);\n    })\n    .WhenCatch<lotException>(ex =>\n    {\n        // process exception\n        return default(ApiResult<PushAccount>);\n    });\n\n    if(createResult == null)\n    {\n        return null;\n    }\n\n    config.PushId = createResult.Data.Id;\n    config.PushToken = createResult.Data.Token;\n    await db.SaveChangesAsync();\n\n    return config;\n}\n```\n","slug":"使用WebApiClient请求和管理Restful-Api","published":1,"updated":"2021-03-30T03:24:16.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0m004ivcuahl8jd2vz","content":"<p>WebApiClient的出现,大幅度减轻了接口调用者的工作量,而且在调用Http接口上还非常容易维护和更新,还可以轻松应付设计不太友好的一些Http接口</p>\n<p>使用WebApiClient,编程人员不再需要手动实现路径拼接,参数拼接,请求体组装和响应映射为模型这些繁琐的过程.</p>\n<span id=\"more\"></span>\n\n<p>以下为WebApiClient应用到项目中的一般流程</p>\n<h5 id=\"声明http接口的Interface\"><a href=\"#声明http接口的Interface\" class=\"headerlink\" title=\"声明http接口的Interface\"></a>声明http接口的Interface</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">JsonReturn</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IlotRemotePush</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 创建远程推送账号</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;auth&quot;&gt;</span>授权<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost(<span class=\"meta-string\">&quot;/CreateAccount&quot;</span>)</span>]</span><br><span class=\"line\">    ITask&lt;ApiResult&lt;PushAccount&gt;&gt; CreateAccountAsync(lotBasicAuth auth);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取推送服务信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span>pushId<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet(<span class=\"meta-string\">&quot;/GetSevice?id=&#123;id&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    ITask&lt;ApiResult&lt;MqttService&gt;&gt; GetPushServiceAsync(<span class=\"built_in\">string</span> id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Api结果接口</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IApiResult</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    ErrorCode Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 相关提示信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> Msg &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示Api结果</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApiResult</span>&lt;<span class=\"title\">T</span>&gt; : <span class=\"title\">IApiReult</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ErrorCode Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 相关提示信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Msg &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 业务数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T Data &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"调用http接口\"><a href=\"#调用http接口\" class=\"headerlink\" title=\"调用http接口\"></a>调用http接口</h5><p>WebApiClient不需要开发者实现接口,使用HttpApiClient.Create方法可以动态创建接口的实现类的实例,调用实例的方法,就完成一个Api的请求</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> iotApi = HttpApiClient.Create&lt;IlotRemotePush&gt;())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> auth = <span class=\"keyword\">new</span> lotBasicAuth(config.AppId, config.AppToken);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> createResult = <span class=\"keyword\">await</span> iotApi.CreateAccountAsync(auth);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(createResult.Code != ErrorCode.NoError)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.PushId = createResult.Data.Id;</span><br><span class=\"line\">    config.PushToken = createResult.Data.Token;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.SaveChangesAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"异常定义与异常处理\"><a href=\"#异常定义与异常处理\" class=\"headerlink\" title=\"异常定义与异常处理\"></a>异常定义与异常处理</h5><p>在以上接口中,接口返回的都是ApiResult</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示lot异常</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">lotException</span> : <span class=\"title\">Exception</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ErrorCode ErrorCode&#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> lot异常</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;apiResult&quot;&gt;</span>api结果值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">lotException</span>(<span class=\"params\">IApiResult apiResult</span>) : <span class=\"title\">base</span>(<span class=\"params\">apiResult.Msg</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ErrorCode = apiResult.Code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还应该在Interface上扩展JsonResult,用于将ApiResult的ErrorCode转换为lotExcetion,并抛出</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示lotJson结果</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">lotJsonResultAttribute</span> : <span class=\"title\">JsonReturnAttribute</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">object</span>&gt; <span class=\"title\">GetTaskResult</span>(<span class=\"params\">ApiActionContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> apiResult = <span class=\"keyword\">await</span> <span class=\"keyword\">base</span>.GetTaskResult(context) <span class=\"keyword\">as</span> IApiResult;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(apiResult != <span class=\"literal\">null</span> &amp;&amp; apiResult.Code != ErrorCode.NoError)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> lotException(apiResult);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apiResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将新的lotJsonResultAttribute在Interface上替换JsonReturnAttribute</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">lotJsonResult</span>]<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IlotRemotePush</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后,调用http接口的时候,可以使用Handle()扩展方法处理异常</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span>(<span class=\"keyword\">var</span> iotApi = HttpApiClient.Create&lt;IlotRemotePush&gt;())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> auth = <span class=\"keyword\">new</span> lotBasicAuth(config.AppId, config.AppToken);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> createResult = <span class=\"keyword\">await</span> iotApi.CreateAccountAsync(auth).Handle()</span><br><span class=\"line\">    .WhenCatch&lt;lotException&gt;(ex =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process exception</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">default</span>(ApiResult&lt;PushAccount&gt;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .WhenCatch&lt;lotException&gt;(ex =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process exception</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">default</span>(ApiResult&lt;PushAccount&gt;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(createResult == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.PushId = createResult.Data.Id;</span><br><span class=\"line\">    config.PushToken = createResult.Data.Token;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.SaveChangesAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":3628,"excerpt":"<p>WebApiClient的出现,大幅度减轻了接口调用者的工作量,而且在调用Http接口上还非常容易维护和更新,还可以轻松应付设计不太友好的一些Http接口</p>\n<p>使用WebApiClient,编程人员不再需要手动实现路径拼接,参数拼接,请求体组装和响应映射为模型这些繁琐的过程.</p>","more":"<p>以下为WebApiClient应用到项目中的一般流程</p>\n<h5 id=\"声明http接口的Interface\"><a href=\"#声明http接口的Interface\" class=\"headerlink\" title=\"声明http接口的Interface\"></a>声明http接口的Interface</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">JsonReturn</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IlotRemotePush</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 创建远程推送账号</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;auth&quot;&gt;</span>授权<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost(<span class=\"meta-string\">&quot;/CreateAccount&quot;</span>)</span>]</span><br><span class=\"line\">    ITask&lt;ApiResult&lt;PushAccount&gt;&gt; CreateAccountAsync(lotBasicAuth auth);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取推送服务信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;id&quot;&gt;</span>pushId<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet(<span class=\"meta-string\">&quot;/GetSevice?id=&#123;id&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    ITask&lt;ApiResult&lt;MqttService&gt;&gt; GetPushServiceAsync(<span class=\"built_in\">string</span> id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Api结果接口</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IApiResult</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    ErrorCode Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 相关提示信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> Msg &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示Api结果</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApiResult</span>&lt;<span class=\"title\">T</span>&gt; : <span class=\"title\">IApiReult</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ErrorCode Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 相关提示信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Msg &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 业务数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T Data &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"调用http接口\"><a href=\"#调用http接口\" class=\"headerlink\" title=\"调用http接口\"></a>调用http接口</h5><p>WebApiClient不需要开发者实现接口,使用HttpApiClient.Create方法可以动态创建接口的实现类的实例,调用实例的方法,就完成一个Api的请求</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> iotApi = HttpApiClient.Create&lt;IlotRemotePush&gt;())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> auth = <span class=\"keyword\">new</span> lotBasicAuth(config.AppId, config.AppToken);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> createResult = <span class=\"keyword\">await</span> iotApi.CreateAccountAsync(auth);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(createResult.Code != ErrorCode.NoError)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.PushId = createResult.Data.Id;</span><br><span class=\"line\">    config.PushToken = createResult.Data.Token;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.SaveChangesAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"异常定义与异常处理\"><a href=\"#异常定义与异常处理\" class=\"headerlink\" title=\"异常定义与异常处理\"></a>异常定义与异常处理</h5><p>在以上接口中,接口返回的都是ApiResult</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示lot异常</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">lotException</span> : <span class=\"title\">Exception</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ErrorCode ErrorCode&#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> lot异常</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;apiResult&quot;&gt;</span>api结果值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">lotException</span>(<span class=\"params\">IApiResult apiResult</span>) : <span class=\"title\">base</span>(<span class=\"params\">apiResult.Msg</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ErrorCode = apiResult.Code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还应该在Interface上扩展JsonResult,用于将ApiResult的ErrorCode转换为lotExcetion,并抛出</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示lotJson结果</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">lotJsonResultAttribute</span> : <span class=\"title\">JsonReturnAttribute</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">object</span>&gt; <span class=\"title\">GetTaskResult</span>(<span class=\"params\">ApiActionContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> apiResult = <span class=\"keyword\">await</span> <span class=\"keyword\">base</span>.GetTaskResult(context) <span class=\"keyword\">as</span> IApiResult;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(apiResult != <span class=\"literal\">null</span> &amp;&amp; apiResult.Code != ErrorCode.NoError)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> lotException(apiResult);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apiResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将新的lotJsonResultAttribute在Interface上替换JsonReturnAttribute</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">lotJsonResult</span>]<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IlotRemotePush</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后,调用http接口的时候,可以使用Handle()扩展方法处理异常</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span>(<span class=\"keyword\">var</span> iotApi = HttpApiClient.Create&lt;IlotRemotePush&gt;())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> auth = <span class=\"keyword\">new</span> lotBasicAuth(config.AppId, config.AppToken);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> createResult = <span class=\"keyword\">await</span> iotApi.CreateAccountAsync(auth).Handle()</span><br><span class=\"line\">    .WhenCatch&lt;lotException&gt;(ex =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process exception</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">default</span>(ApiResult&lt;PushAccount&gt;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .WhenCatch&lt;lotException&gt;(ex =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process exception</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">default</span>(ApiResult&lt;PushAccount&gt;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(createResult == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.PushId = createResult.Data.Id;</span><br><span class=\"line\">    config.PushToken = createResult.Data.Token;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.SaveChangesAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"人性的弱点:如何赢得友谊并影响他人","date":"2020-03-11T13:24:58.000Z","_content":"“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”\n<!-- more -->\n\n### 第一篇 人际关系的3大技巧\n\n#### 第1章 想采蜜就请善待蜂巢\n\n* 指责和批评，不能让人长久地改变，反而会招来怨恨。\n* 人际交往中，您一定要明白：我们不是和理性打交道，而是和有情感、有偏见、骄傲、虚荣、活生生的人在打交道。\n* 批评、指责和抱怨，傻子都懂，且大多数傻子还会做；理解和宽容则需要良好的修养和自制力。\n* 法则1:避免批评、指责或抱怨。\n\n#### 第2章 人际交往的秘诀\n\n* 按照西格蒙德·弗洛伊德的说法，一个人做事的动机源自两点：“对性和成功的欲望”。美国著名哲学家约翰·杜威的观点有所不同。他说：人类内心深处最重要的欲望是实现“对重视的渴求”。\n* “凡爱心、善行，应即刻兑现。不要迟疑，不要停留。光阴易逝，时不我待，人生只有一次。”\n* 法则2：诚挚地赞美别人。\n\n#### 第3章 换位思考\n\n* 明天，也许您要请某人办什么事情。切莫着急，开口前请问问自己：“我怎么做，才能让对方有兴趣，并按我的意图去做？”\n* 成功的秘诀是什么？理解他人，站在他人的角度看问题，就当是自己的问题一样。\n* 想要说服别人，首先要激发别人的认可和需求欲望。\n* 法则3：激发他人的主动性。\n\n### 第二篇 受人欢迎的6种方法\n\n#### 第1章 怎样成为“万人迷”\n\n* 对他人漠不关心的人，命运注定多舛，也会给他人造成伤害，正是因为这类人，世界才充满苦难。\n* 一个人只要做到对他人真诚关怀，不管这人有多繁忙，多高不可攀，您总会得到他的反馈，赢得谈话机会与合作。\n* 法则1：用一颗真诚的心去关心别人。\n\n#### 第2章 怎样建立美好的第一印象\n\n* “人的行为和情感几乎同步，行为能影响情感。只要有意识地控制行为，积极的行为就会改变情感，使人变的积极向上。”\n* 幸福不因您获得什么，成为什么样的人，身在何处，做过什么事，幸福在于您的想法。\n* 每当我出门，我都要放低下巴，抬头挺胸，深呼吸。走在阳光中，我微笑着和每一个人打招呼。每次握手都要坚定有力，不必担心误解，不必把时间浪费在恩仇、得失上。我应该坚定我的理想。并炽之翼，不畏艰难，勇往直前，直到实现宏伟目标。时光荏苒。不知不觉中，机会自然而来，抓住它，实现我的理想，像珊瑚从浪花中汲取养料一样。在我脑海中，始终会浮现成功的样子。我一定会成为干练、诚实、大有作为的人。我的思想将引领一切，也会不断修正，让我逐步接近梦想。我要坚守正确的价值观，保持勇敢、诚实和积极的态度。我的理想指引着我的道路，一切都源于此，当我发自内心去祈祷，一切美好都会实现。内心希望什么，就会发生什么。放低下巴，抬头挺胸，我将脱颖而出。\n* 法则2：保持微笑。\n\n#### 第3章 记住别人的名字\n\n* 记住一个人的名字，能让人感到重视，是最简单、最直接获取好感的方法。\n* 法则3：姓名是一个最重要的声音符号，牢记别人的姓名。\n\n#### 第4章 怎样做到“妙语连珠”\n\n* 如果想要展开一场愉快的谈话，可以从别人喜欢的话题开始，引导并鼓励他们，多谈一些别人的生活、成就等事情。切记，不论您与谁谈话，他对自身的需求、问题的兴趣，远远高于对您的兴趣。\n* 法则4：善于聆听，鼓励别人谈论自己。\n\n#### 第5章 怎样引起他人的兴趣\n\n* 找出让人感兴趣的话题，技能让双方从中获益，又能让生活变得充实。\n* 法则5：谈论对方感兴趣的话题。\n\n#### 第6章 怎样才能收获真正的友谊\n\n* 让他人感到自己重要。\n* 您要别人怎么待您，就得先怎样待别人。\n* 法则6：真心实意地让对方知道自己有多重要。\n\n### 第三篇 获取赞同的12条法则\n\n#### 第1章 不做无意义的争辩\n\n* 世界上不存在赢得辩论的技巧。唯一可以做的是避免任何辩论，就像对毒虫猛兽一样远远躲开。\n* 避免争论的建议：\n\n    1. 欢迎不同的声音。如果合作双方意见一致，那么其中一方就没有存在的必要。一方提出不同意见，你首先要表示感谢，也许这个意见会让你避免犯下大错。\n    2. 不要跟着感觉走。别人提出反对也很正常，这是人类出于防卫的本能。但要注意：一定要保持平静，不要被第一反应左右，这样会导致重大错误，错过明智的判断。\n    3. 控制情绪。一个人脾气的大小，决定了这个人的气量和将来可能取得的成就。\n    4. 学会聆听。让不同意见得以表达，不要阻止别人发言。不要出于维护颜面而争执，那样只能加深误解和矛盾。应积极努力沟通，而不是反过来争执。\n    5. 求同存异。别人有不同意见，你应该想想哪些对你有用，哪些你可以同意。\n    6. 以诚待人。不怕承认错误，做个诚实的人。有错误，就应该向别人真诚道歉，这样有利于彼此间的理解和沟通。\n    7. 重视不同意见，并认真思考。反对意见可能是明智之举。不然，当事实证明别人是对的，那是你将无地自容。\n    8. 感谢反对意见。提出反对意见，就说明别人和你一样，关心某事。如果你视反对意见为一种善意的帮助，那么你很快就会收获新的朋友。\n    9. 谨言慎行。如果你要推迟谈论，那么下次谈论前一定要把问题想清楚。你需要向自己这些问题：“反对意见是否全有道理？还是部分有？对方的立场是否站得住脚？我的反应是就事论事，还是夹杂有个人情绪？是否让对方感到不舒服？是否还能让对方给出更多建议？讨论会成功，还是失败？代价是什么？我如果保持沉默，反对意见会消失吗？这是否意味着新的机会？”\n\n* 法则1：避免争论，是赢得争论的唯一途径。\n\n#### 第2章 如何避免得罪人\n\n* 绝对不伤害别人的感情，不冒失武断，甚至在措辞中也避免使用带有绝对、肯定性的字眼，如：“当然”、“毋庸置疑”等。一件事情不能下定论，或者从目前情况来看，应该是“这样的”。他会说：“我想”、“我觉得”、“我估计”。别人出现明显的错误，他也不会直截了当地反驳，而是用：“从某种意义上讲，您的观点是正确的；但是在现在这种情形下，我觉得或许是......”\n* 用谦虚的态度与人交谈，不仅容易让人接受，而且避免了很多无意义的争执。即使犯错了，也不至于让自己太尴尬；当恰好说对了，对方也不会固执己见，容易接受并赞同您。\n* 法则2：尊重别人，不轻易指责别人的过失。\n\n#### 第3章 认错并不丢人\n\n* 当能预见到要被批评，您可以先发制人地把别人要说的话抢先说出来。十有八九，别人会改变主意，用比较宽大的胸怀去原谅你。\n* 勇敢而真诚地面对并承认错误，不去辩解，不仅能够让您的精神得到放松、消减罪恶感，而且有利于问题的解决。\n* 争胜好强，不能帮你取得胜利，您可以下次试一试。\n* 法则3：及时、诚恳地承认错误。\n\n#### 第4章 与人为善\n\n* 如果有人对您不满并怀有恶意，那么您无论如何也不能得到他们的赞同。您应该明白，责怪父母、上司、丈夫或喋喋不休的妻子，绝对不会改变他们的初衷，强制手段更不会让他们认同。但换一种温和、友善的态度，您就能引导他们与您的意见趋同。\n* “一句古话这么说：‘一滴蜂蜜比一滴胆汁更能吸引苍蝇’。人也一样。如果想让别人同意您，首先你们得是朋友。朋友，就像一滴蜂蜜，能赢得人心，能让人理智。”\n* 法则4：百事善为先。\n\n#### 第5章 苏格拉底式说服术\n\n* 与人谈话，不要开口就谈分歧，应该自始至终，不断地强调双方都赞同的事情，强调彼此目标一致，在适当情况下，再谈方式、方法上的差异。\n* 善于谈话的高手，通常开始就获得对方“是”的态度，从而引导对方向积极的一面思考。像打桌球，一旦击球后，方向就很难逆转，想回到原来位置就要付出更大气力。\n* 这个方法就让听话人的直接反应为“是、是、是”。他提出问题，反对者都会同意，并持续不断地肯定。一个又一个“是”，在接连不断的发问下，神不知鬼不觉之中，反对者突然发现：前一刻反对的事情，现在已经表示赞同。\n* 法则5：让别人说“是”。\n\n#### 第6章 给他人说话的机会\n\n* 想要结仇，那就努力在别人面前表现得更出色；想要交友，就让别人显得比你出色。\n* 只有别人超越我们时，他们会觉得自己很重要；反之，我们只能让别人感到自卑和嫉妒。\n* 法则6：鼓励别人多说。\n\n#### 第7章 怎样取得合作\n\n* 自己领悟的道理永远比别人教给您的要深刻。即使别人把这些道理用银盘子托着盛意送您，您也不见得领情。同样的道理，把自己的想法强加于人显然不合适。换个方式，只给建议，让别人总结出结论，效果不是更好？\n* “江海之所以能成为百川百谷之王，是因为江海能够自处于谦下的位置，河川自然流向大海，江海也自然能够成为百谷之王。统治者想要凌驾于黎民百姓之上，必须在言辞上处于谦恭的地位。”是以不争，故天下莫能与之争。\n* 法则7：让自己的想法变成别人的。\n\n#### 第8章 站在对方的立场上思考\n\n* 站在别人的立场，就应该问自己：“在那种情况下，我该作何反应？”懂得这一点，您就会甩掉大堆烦恼，省下大笔宝贵时间。很简单，只要对引发事情的原因做细致调查，就不会对结果感到茫然，处理起人际关系，技巧会更加圆滑。\n* 莫要着急，掂量一下你对别人的关心程度，你就会立刻明白：察己而知人，对待别人什么态度，别人也会对你什么态度。\n* 要把别人的观点、想法看成和自己的一样重要。只要做到这一点，那么彼此的交谈就会变得非常轻松愉快。尽量去了解别人的意图，做好聆听者，不要滔滔不绝讲个不停。只要对方认可了你，他就会受到鼓励，就会敞开心扉，而你的话也会更容易被接受。\n* 与人会谈前，我宁愿在别人的办公室楼前多走两个小时，而不是急匆匆地推门而入。因为这样，我就有时间反复从各个角度，从对方和我的立场上，把需求和结果都想透彻。\n* 法则8：真正做到换位思考。\n\n#### 第9章 同情他人的想法和愿望\n\n* 我理解你的感受，我不会责怪你。因为如果我是你，也会是一样的。\n* 法则9：同情并理解别人。\n\n#### 第10章 激发对方的高尚动机\n\n* 每个人都觉得自己是从事实出发，这不理解。同时，每个人都有一个理想化的自己，追求美誉和好名声。要改变人，就要满足对它们理想的追求。\n* 法则10：激发他人内心的高尚动机。\n\n#### 第11章 戏剧性地表达你的想法\n\n* 法则11：学会运用戏剧化的表达方式。\n\n#### 第12章 让他人不断面临挑战\n\n* 人人都会有所畏惧，只有勇者敢于漠视畏惧，继续前进。前进或许会走向毁灭，但是绝大多数人会迎来胜利。\n* 竞争、实现自我、证明个人价值、激发斗志、超越对手，最终方能获取成功。实现突破，是一种美妙的感觉，也是成功者一直所热衷的。\n* 法则12：让他人不断面临挑战。\n","source":"_posts/人性的弱点-如何赢得友谊并影响他人.md","raw":"---\ntitle: '人性的弱点:如何赢得友谊并影响他人'\ndate: 2020-03-11 21:24:58\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 人际交往\n---\n“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”\n<!-- more -->\n\n### 第一篇 人际关系的3大技巧\n\n#### 第1章 想采蜜就请善待蜂巢\n\n* 指责和批评，不能让人长久地改变，反而会招来怨恨。\n* 人际交往中，您一定要明白：我们不是和理性打交道，而是和有情感、有偏见、骄傲、虚荣、活生生的人在打交道。\n* 批评、指责和抱怨，傻子都懂，且大多数傻子还会做；理解和宽容则需要良好的修养和自制力。\n* 法则1:避免批评、指责或抱怨。\n\n#### 第2章 人际交往的秘诀\n\n* 按照西格蒙德·弗洛伊德的说法，一个人做事的动机源自两点：“对性和成功的欲望”。美国著名哲学家约翰·杜威的观点有所不同。他说：人类内心深处最重要的欲望是实现“对重视的渴求”。\n* “凡爱心、善行，应即刻兑现。不要迟疑，不要停留。光阴易逝，时不我待，人生只有一次。”\n* 法则2：诚挚地赞美别人。\n\n#### 第3章 换位思考\n\n* 明天，也许您要请某人办什么事情。切莫着急，开口前请问问自己：“我怎么做，才能让对方有兴趣，并按我的意图去做？”\n* 成功的秘诀是什么？理解他人，站在他人的角度看问题，就当是自己的问题一样。\n* 想要说服别人，首先要激发别人的认可和需求欲望。\n* 法则3：激发他人的主动性。\n\n### 第二篇 受人欢迎的6种方法\n\n#### 第1章 怎样成为“万人迷”\n\n* 对他人漠不关心的人，命运注定多舛，也会给他人造成伤害，正是因为这类人，世界才充满苦难。\n* 一个人只要做到对他人真诚关怀，不管这人有多繁忙，多高不可攀，您总会得到他的反馈，赢得谈话机会与合作。\n* 法则1：用一颗真诚的心去关心别人。\n\n#### 第2章 怎样建立美好的第一印象\n\n* “人的行为和情感几乎同步，行为能影响情感。只要有意识地控制行为，积极的行为就会改变情感，使人变的积极向上。”\n* 幸福不因您获得什么，成为什么样的人，身在何处，做过什么事，幸福在于您的想法。\n* 每当我出门，我都要放低下巴，抬头挺胸，深呼吸。走在阳光中，我微笑着和每一个人打招呼。每次握手都要坚定有力，不必担心误解，不必把时间浪费在恩仇、得失上。我应该坚定我的理想。并炽之翼，不畏艰难，勇往直前，直到实现宏伟目标。时光荏苒。不知不觉中，机会自然而来，抓住它，实现我的理想，像珊瑚从浪花中汲取养料一样。在我脑海中，始终会浮现成功的样子。我一定会成为干练、诚实、大有作为的人。我的思想将引领一切，也会不断修正，让我逐步接近梦想。我要坚守正确的价值观，保持勇敢、诚实和积极的态度。我的理想指引着我的道路，一切都源于此，当我发自内心去祈祷，一切美好都会实现。内心希望什么，就会发生什么。放低下巴，抬头挺胸，我将脱颖而出。\n* 法则2：保持微笑。\n\n#### 第3章 记住别人的名字\n\n* 记住一个人的名字，能让人感到重视，是最简单、最直接获取好感的方法。\n* 法则3：姓名是一个最重要的声音符号，牢记别人的姓名。\n\n#### 第4章 怎样做到“妙语连珠”\n\n* 如果想要展开一场愉快的谈话，可以从别人喜欢的话题开始，引导并鼓励他们，多谈一些别人的生活、成就等事情。切记，不论您与谁谈话，他对自身的需求、问题的兴趣，远远高于对您的兴趣。\n* 法则4：善于聆听，鼓励别人谈论自己。\n\n#### 第5章 怎样引起他人的兴趣\n\n* 找出让人感兴趣的话题，技能让双方从中获益，又能让生活变得充实。\n* 法则5：谈论对方感兴趣的话题。\n\n#### 第6章 怎样才能收获真正的友谊\n\n* 让他人感到自己重要。\n* 您要别人怎么待您，就得先怎样待别人。\n* 法则6：真心实意地让对方知道自己有多重要。\n\n### 第三篇 获取赞同的12条法则\n\n#### 第1章 不做无意义的争辩\n\n* 世界上不存在赢得辩论的技巧。唯一可以做的是避免任何辩论，就像对毒虫猛兽一样远远躲开。\n* 避免争论的建议：\n\n    1. 欢迎不同的声音。如果合作双方意见一致，那么其中一方就没有存在的必要。一方提出不同意见，你首先要表示感谢，也许这个意见会让你避免犯下大错。\n    2. 不要跟着感觉走。别人提出反对也很正常，这是人类出于防卫的本能。但要注意：一定要保持平静，不要被第一反应左右，这样会导致重大错误，错过明智的判断。\n    3. 控制情绪。一个人脾气的大小，决定了这个人的气量和将来可能取得的成就。\n    4. 学会聆听。让不同意见得以表达，不要阻止别人发言。不要出于维护颜面而争执，那样只能加深误解和矛盾。应积极努力沟通，而不是反过来争执。\n    5. 求同存异。别人有不同意见，你应该想想哪些对你有用，哪些你可以同意。\n    6. 以诚待人。不怕承认错误，做个诚实的人。有错误，就应该向别人真诚道歉，这样有利于彼此间的理解和沟通。\n    7. 重视不同意见，并认真思考。反对意见可能是明智之举。不然，当事实证明别人是对的，那是你将无地自容。\n    8. 感谢反对意见。提出反对意见，就说明别人和你一样，关心某事。如果你视反对意见为一种善意的帮助，那么你很快就会收获新的朋友。\n    9. 谨言慎行。如果你要推迟谈论，那么下次谈论前一定要把问题想清楚。你需要向自己这些问题：“反对意见是否全有道理？还是部分有？对方的立场是否站得住脚？我的反应是就事论事，还是夹杂有个人情绪？是否让对方感到不舒服？是否还能让对方给出更多建议？讨论会成功，还是失败？代价是什么？我如果保持沉默，反对意见会消失吗？这是否意味着新的机会？”\n\n* 法则1：避免争论，是赢得争论的唯一途径。\n\n#### 第2章 如何避免得罪人\n\n* 绝对不伤害别人的感情，不冒失武断，甚至在措辞中也避免使用带有绝对、肯定性的字眼，如：“当然”、“毋庸置疑”等。一件事情不能下定论，或者从目前情况来看，应该是“这样的”。他会说：“我想”、“我觉得”、“我估计”。别人出现明显的错误，他也不会直截了当地反驳，而是用：“从某种意义上讲，您的观点是正确的；但是在现在这种情形下，我觉得或许是......”\n* 用谦虚的态度与人交谈，不仅容易让人接受，而且避免了很多无意义的争执。即使犯错了，也不至于让自己太尴尬；当恰好说对了，对方也不会固执己见，容易接受并赞同您。\n* 法则2：尊重别人，不轻易指责别人的过失。\n\n#### 第3章 认错并不丢人\n\n* 当能预见到要被批评，您可以先发制人地把别人要说的话抢先说出来。十有八九，别人会改变主意，用比较宽大的胸怀去原谅你。\n* 勇敢而真诚地面对并承认错误，不去辩解，不仅能够让您的精神得到放松、消减罪恶感，而且有利于问题的解决。\n* 争胜好强，不能帮你取得胜利，您可以下次试一试。\n* 法则3：及时、诚恳地承认错误。\n\n#### 第4章 与人为善\n\n* 如果有人对您不满并怀有恶意，那么您无论如何也不能得到他们的赞同。您应该明白，责怪父母、上司、丈夫或喋喋不休的妻子，绝对不会改变他们的初衷，强制手段更不会让他们认同。但换一种温和、友善的态度，您就能引导他们与您的意见趋同。\n* “一句古话这么说：‘一滴蜂蜜比一滴胆汁更能吸引苍蝇’。人也一样。如果想让别人同意您，首先你们得是朋友。朋友，就像一滴蜂蜜，能赢得人心，能让人理智。”\n* 法则4：百事善为先。\n\n#### 第5章 苏格拉底式说服术\n\n* 与人谈话，不要开口就谈分歧，应该自始至终，不断地强调双方都赞同的事情，强调彼此目标一致，在适当情况下，再谈方式、方法上的差异。\n* 善于谈话的高手，通常开始就获得对方“是”的态度，从而引导对方向积极的一面思考。像打桌球，一旦击球后，方向就很难逆转，想回到原来位置就要付出更大气力。\n* 这个方法就让听话人的直接反应为“是、是、是”。他提出问题，反对者都会同意，并持续不断地肯定。一个又一个“是”，在接连不断的发问下，神不知鬼不觉之中，反对者突然发现：前一刻反对的事情，现在已经表示赞同。\n* 法则5：让别人说“是”。\n\n#### 第6章 给他人说话的机会\n\n* 想要结仇，那就努力在别人面前表现得更出色；想要交友，就让别人显得比你出色。\n* 只有别人超越我们时，他们会觉得自己很重要；反之，我们只能让别人感到自卑和嫉妒。\n* 法则6：鼓励别人多说。\n\n#### 第7章 怎样取得合作\n\n* 自己领悟的道理永远比别人教给您的要深刻。即使别人把这些道理用银盘子托着盛意送您，您也不见得领情。同样的道理，把自己的想法强加于人显然不合适。换个方式，只给建议，让别人总结出结论，效果不是更好？\n* “江海之所以能成为百川百谷之王，是因为江海能够自处于谦下的位置，河川自然流向大海，江海也自然能够成为百谷之王。统治者想要凌驾于黎民百姓之上，必须在言辞上处于谦恭的地位。”是以不争，故天下莫能与之争。\n* 法则7：让自己的想法变成别人的。\n\n#### 第8章 站在对方的立场上思考\n\n* 站在别人的立场，就应该问自己：“在那种情况下，我该作何反应？”懂得这一点，您就会甩掉大堆烦恼，省下大笔宝贵时间。很简单，只要对引发事情的原因做细致调查，就不会对结果感到茫然，处理起人际关系，技巧会更加圆滑。\n* 莫要着急，掂量一下你对别人的关心程度，你就会立刻明白：察己而知人，对待别人什么态度，别人也会对你什么态度。\n* 要把别人的观点、想法看成和自己的一样重要。只要做到这一点，那么彼此的交谈就会变得非常轻松愉快。尽量去了解别人的意图，做好聆听者，不要滔滔不绝讲个不停。只要对方认可了你，他就会受到鼓励，就会敞开心扉，而你的话也会更容易被接受。\n* 与人会谈前，我宁愿在别人的办公室楼前多走两个小时，而不是急匆匆地推门而入。因为这样，我就有时间反复从各个角度，从对方和我的立场上，把需求和结果都想透彻。\n* 法则8：真正做到换位思考。\n\n#### 第9章 同情他人的想法和愿望\n\n* 我理解你的感受，我不会责怪你。因为如果我是你，也会是一样的。\n* 法则9：同情并理解别人。\n\n#### 第10章 激发对方的高尚动机\n\n* 每个人都觉得自己是从事实出发，这不理解。同时，每个人都有一个理想化的自己，追求美誉和好名声。要改变人，就要满足对它们理想的追求。\n* 法则10：激发他人内心的高尚动机。\n\n#### 第11章 戏剧性地表达你的想法\n\n* 法则11：学会运用戏剧化的表达方式。\n\n#### 第12章 让他人不断面临挑战\n\n* 人人都会有所畏惧，只有勇者敢于漠视畏惧，继续前进。前进或许会走向毁灭，但是绝大多数人会迎来胜利。\n* 竞争、实现自我、证明个人价值、激发斗志、超越对手，最终方能获取成功。实现突破，是一种美妙的感觉，也是成功者一直所热衷的。\n* 法则12：让他人不断面临挑战。\n","slug":"人性的弱点-如何赢得友谊并影响他人","published":1,"updated":"2021-03-30T03:24:16.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0n004mvcuafgir3bsn","content":"<p>“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”</p>\n<span id=\"more\"></span>\n\n<h3 id=\"第一篇-人际关系的3大技巧\"><a href=\"#第一篇-人际关系的3大技巧\" class=\"headerlink\" title=\"第一篇 人际关系的3大技巧\"></a>第一篇 人际关系的3大技巧</h3><h4 id=\"第1章-想采蜜就请善待蜂巢\"><a href=\"#第1章-想采蜜就请善待蜂巢\" class=\"headerlink\" title=\"第1章 想采蜜就请善待蜂巢\"></a>第1章 想采蜜就请善待蜂巢</h4><ul>\n<li>指责和批评，不能让人长久地改变，反而会招来怨恨。</li>\n<li>人际交往中，您一定要明白：我们不是和理性打交道，而是和有情感、有偏见、骄傲、虚荣、活生生的人在打交道。</li>\n<li>批评、指责和抱怨，傻子都懂，且大多数傻子还会做；理解和宽容则需要良好的修养和自制力。</li>\n<li>法则1:避免批评、指责或抱怨。</li>\n</ul>\n<h4 id=\"第2章-人际交往的秘诀\"><a href=\"#第2章-人际交往的秘诀\" class=\"headerlink\" title=\"第2章 人际交往的秘诀\"></a>第2章 人际交往的秘诀</h4><ul>\n<li>按照西格蒙德·弗洛伊德的说法，一个人做事的动机源自两点：“对性和成功的欲望”。美国著名哲学家约翰·杜威的观点有所不同。他说：人类内心深处最重要的欲望是实现“对重视的渴求”。</li>\n<li>“凡爱心、善行，应即刻兑现。不要迟疑，不要停留。光阴易逝，时不我待，人生只有一次。”</li>\n<li>法则2：诚挚地赞美别人。</li>\n</ul>\n<h4 id=\"第3章-换位思考\"><a href=\"#第3章-换位思考\" class=\"headerlink\" title=\"第3章 换位思考\"></a>第3章 换位思考</h4><ul>\n<li>明天，也许您要请某人办什么事情。切莫着急，开口前请问问自己：“我怎么做，才能让对方有兴趣，并按我的意图去做？”</li>\n<li>成功的秘诀是什么？理解他人，站在他人的角度看问题，就当是自己的问题一样。</li>\n<li>想要说服别人，首先要激发别人的认可和需求欲望。</li>\n<li>法则3：激发他人的主动性。</li>\n</ul>\n<h3 id=\"第二篇-受人欢迎的6种方法\"><a href=\"#第二篇-受人欢迎的6种方法\" class=\"headerlink\" title=\"第二篇 受人欢迎的6种方法\"></a>第二篇 受人欢迎的6种方法</h3><h4 id=\"第1章-怎样成为“万人迷”\"><a href=\"#第1章-怎样成为“万人迷”\" class=\"headerlink\" title=\"第1章 怎样成为“万人迷”\"></a>第1章 怎样成为“万人迷”</h4><ul>\n<li>对他人漠不关心的人，命运注定多舛，也会给他人造成伤害，正是因为这类人，世界才充满苦难。</li>\n<li>一个人只要做到对他人真诚关怀，不管这人有多繁忙，多高不可攀，您总会得到他的反馈，赢得谈话机会与合作。</li>\n<li>法则1：用一颗真诚的心去关心别人。</li>\n</ul>\n<h4 id=\"第2章-怎样建立美好的第一印象\"><a href=\"#第2章-怎样建立美好的第一印象\" class=\"headerlink\" title=\"第2章 怎样建立美好的第一印象\"></a>第2章 怎样建立美好的第一印象</h4><ul>\n<li>“人的行为和情感几乎同步，行为能影响情感。只要有意识地控制行为，积极的行为就会改变情感，使人变的积极向上。”</li>\n<li>幸福不因您获得什么，成为什么样的人，身在何处，做过什么事，幸福在于您的想法。</li>\n<li>每当我出门，我都要放低下巴，抬头挺胸，深呼吸。走在阳光中，我微笑着和每一个人打招呼。每次握手都要坚定有力，不必担心误解，不必把时间浪费在恩仇、得失上。我应该坚定我的理想。并炽之翼，不畏艰难，勇往直前，直到实现宏伟目标。时光荏苒。不知不觉中，机会自然而来，抓住它，实现我的理想，像珊瑚从浪花中汲取养料一样。在我脑海中，始终会浮现成功的样子。我一定会成为干练、诚实、大有作为的人。我的思想将引领一切，也会不断修正，让我逐步接近梦想。我要坚守正确的价值观，保持勇敢、诚实和积极的态度。我的理想指引着我的道路，一切都源于此，当我发自内心去祈祷，一切美好都会实现。内心希望什么，就会发生什么。放低下巴，抬头挺胸，我将脱颖而出。</li>\n<li>法则2：保持微笑。</li>\n</ul>\n<h4 id=\"第3章-记住别人的名字\"><a href=\"#第3章-记住别人的名字\" class=\"headerlink\" title=\"第3章 记住别人的名字\"></a>第3章 记住别人的名字</h4><ul>\n<li>记住一个人的名字，能让人感到重视，是最简单、最直接获取好感的方法。</li>\n<li>法则3：姓名是一个最重要的声音符号，牢记别人的姓名。</li>\n</ul>\n<h4 id=\"第4章-怎样做到“妙语连珠”\"><a href=\"#第4章-怎样做到“妙语连珠”\" class=\"headerlink\" title=\"第4章 怎样做到“妙语连珠”\"></a>第4章 怎样做到“妙语连珠”</h4><ul>\n<li>如果想要展开一场愉快的谈话，可以从别人喜欢的话题开始，引导并鼓励他们，多谈一些别人的生活、成就等事情。切记，不论您与谁谈话，他对自身的需求、问题的兴趣，远远高于对您的兴趣。</li>\n<li>法则4：善于聆听，鼓励别人谈论自己。</li>\n</ul>\n<h4 id=\"第5章-怎样引起他人的兴趣\"><a href=\"#第5章-怎样引起他人的兴趣\" class=\"headerlink\" title=\"第5章 怎样引起他人的兴趣\"></a>第5章 怎样引起他人的兴趣</h4><ul>\n<li>找出让人感兴趣的话题，技能让双方从中获益，又能让生活变得充实。</li>\n<li>法则5：谈论对方感兴趣的话题。</li>\n</ul>\n<h4 id=\"第6章-怎样才能收获真正的友谊\"><a href=\"#第6章-怎样才能收获真正的友谊\" class=\"headerlink\" title=\"第6章 怎样才能收获真正的友谊\"></a>第6章 怎样才能收获真正的友谊</h4><ul>\n<li>让他人感到自己重要。</li>\n<li>您要别人怎么待您，就得先怎样待别人。</li>\n<li>法则6：真心实意地让对方知道自己有多重要。</li>\n</ul>\n<h3 id=\"第三篇-获取赞同的12条法则\"><a href=\"#第三篇-获取赞同的12条法则\" class=\"headerlink\" title=\"第三篇 获取赞同的12条法则\"></a>第三篇 获取赞同的12条法则</h3><h4 id=\"第1章-不做无意义的争辩\"><a href=\"#第1章-不做无意义的争辩\" class=\"headerlink\" title=\"第1章 不做无意义的争辩\"></a>第1章 不做无意义的争辩</h4><ul>\n<li><p>世界上不存在赢得辩论的技巧。唯一可以做的是避免任何辩论，就像对毒虫猛兽一样远远躲开。</p>\n</li>\n<li><p>避免争论的建议：</p>\n<ol>\n<li>欢迎不同的声音。如果合作双方意见一致，那么其中一方就没有存在的必要。一方提出不同意见，你首先要表示感谢，也许这个意见会让你避免犯下大错。</li>\n<li>不要跟着感觉走。别人提出反对也很正常，这是人类出于防卫的本能。但要注意：一定要保持平静，不要被第一反应左右，这样会导致重大错误，错过明智的判断。</li>\n<li>控制情绪。一个人脾气的大小，决定了这个人的气量和将来可能取得的成就。</li>\n<li>学会聆听。让不同意见得以表达，不要阻止别人发言。不要出于维护颜面而争执，那样只能加深误解和矛盾。应积极努力沟通，而不是反过来争执。</li>\n<li>求同存异。别人有不同意见，你应该想想哪些对你有用，哪些你可以同意。</li>\n<li>以诚待人。不怕承认错误，做个诚实的人。有错误，就应该向别人真诚道歉，这样有利于彼此间的理解和沟通。</li>\n<li>重视不同意见，并认真思考。反对意见可能是明智之举。不然，当事实证明别人是对的，那是你将无地自容。</li>\n<li>感谢反对意见。提出反对意见，就说明别人和你一样，关心某事。如果你视反对意见为一种善意的帮助，那么你很快就会收获新的朋友。</li>\n<li>谨言慎行。如果你要推迟谈论，那么下次谈论前一定要把问题想清楚。你需要向自己这些问题：“反对意见是否全有道理？还是部分有？对方的立场是否站得住脚？我的反应是就事论事，还是夹杂有个人情绪？是否让对方感到不舒服？是否还能让对方给出更多建议？讨论会成功，还是失败？代价是什么？我如果保持沉默，反对意见会消失吗？这是否意味着新的机会？”</li>\n</ol>\n</li>\n<li><p>法则1：避免争论，是赢得争论的唯一途径。</p>\n</li>\n</ul>\n<h4 id=\"第2章-如何避免得罪人\"><a href=\"#第2章-如何避免得罪人\" class=\"headerlink\" title=\"第2章 如何避免得罪人\"></a>第2章 如何避免得罪人</h4><ul>\n<li>绝对不伤害别人的感情，不冒失武断，甚至在措辞中也避免使用带有绝对、肯定性的字眼，如：“当然”、“毋庸置疑”等。一件事情不能下定论，或者从目前情况来看，应该是“这样的”。他会说：“我想”、“我觉得”、“我估计”。别人出现明显的错误，他也不会直截了当地反驳，而是用：“从某种意义上讲，您的观点是正确的；但是在现在这种情形下，我觉得或许是……”</li>\n<li>用谦虚的态度与人交谈，不仅容易让人接受，而且避免了很多无意义的争执。即使犯错了，也不至于让自己太尴尬；当恰好说对了，对方也不会固执己见，容易接受并赞同您。</li>\n<li>法则2：尊重别人，不轻易指责别人的过失。</li>\n</ul>\n<h4 id=\"第3章-认错并不丢人\"><a href=\"#第3章-认错并不丢人\" class=\"headerlink\" title=\"第3章 认错并不丢人\"></a>第3章 认错并不丢人</h4><ul>\n<li>当能预见到要被批评，您可以先发制人地把别人要说的话抢先说出来。十有八九，别人会改变主意，用比较宽大的胸怀去原谅你。</li>\n<li>勇敢而真诚地面对并承认错误，不去辩解，不仅能够让您的精神得到放松、消减罪恶感，而且有利于问题的解决。</li>\n<li>争胜好强，不能帮你取得胜利，您可以下次试一试。</li>\n<li>法则3：及时、诚恳地承认错误。</li>\n</ul>\n<h4 id=\"第4章-与人为善\"><a href=\"#第4章-与人为善\" class=\"headerlink\" title=\"第4章 与人为善\"></a>第4章 与人为善</h4><ul>\n<li>如果有人对您不满并怀有恶意，那么您无论如何也不能得到他们的赞同。您应该明白，责怪父母、上司、丈夫或喋喋不休的妻子，绝对不会改变他们的初衷，强制手段更不会让他们认同。但换一种温和、友善的态度，您就能引导他们与您的意见趋同。</li>\n<li>“一句古话这么说：‘一滴蜂蜜比一滴胆汁更能吸引苍蝇’。人也一样。如果想让别人同意您，首先你们得是朋友。朋友，就像一滴蜂蜜，能赢得人心，能让人理智。”</li>\n<li>法则4：百事善为先。</li>\n</ul>\n<h4 id=\"第5章-苏格拉底式说服术\"><a href=\"#第5章-苏格拉底式说服术\" class=\"headerlink\" title=\"第5章 苏格拉底式说服术\"></a>第5章 苏格拉底式说服术</h4><ul>\n<li>与人谈话，不要开口就谈分歧，应该自始至终，不断地强调双方都赞同的事情，强调彼此目标一致，在适当情况下，再谈方式、方法上的差异。</li>\n<li>善于谈话的高手，通常开始就获得对方“是”的态度，从而引导对方向积极的一面思考。像打桌球，一旦击球后，方向就很难逆转，想回到原来位置就要付出更大气力。</li>\n<li>这个方法就让听话人的直接反应为“是、是、是”。他提出问题，反对者都会同意，并持续不断地肯定。一个又一个“是”，在接连不断的发问下，神不知鬼不觉之中，反对者突然发现：前一刻反对的事情，现在已经表示赞同。</li>\n<li>法则5：让别人说“是”。</li>\n</ul>\n<h4 id=\"第6章-给他人说话的机会\"><a href=\"#第6章-给他人说话的机会\" class=\"headerlink\" title=\"第6章 给他人说话的机会\"></a>第6章 给他人说话的机会</h4><ul>\n<li>想要结仇，那就努力在别人面前表现得更出色；想要交友，就让别人显得比你出色。</li>\n<li>只有别人超越我们时，他们会觉得自己很重要；反之，我们只能让别人感到自卑和嫉妒。</li>\n<li>法则6：鼓励别人多说。</li>\n</ul>\n<h4 id=\"第7章-怎样取得合作\"><a href=\"#第7章-怎样取得合作\" class=\"headerlink\" title=\"第7章 怎样取得合作\"></a>第7章 怎样取得合作</h4><ul>\n<li>自己领悟的道理永远比别人教给您的要深刻。即使别人把这些道理用银盘子托着盛意送您，您也不见得领情。同样的道理，把自己的想法强加于人显然不合适。换个方式，只给建议，让别人总结出结论，效果不是更好？</li>\n<li>“江海之所以能成为百川百谷之王，是因为江海能够自处于谦下的位置，河川自然流向大海，江海也自然能够成为百谷之王。统治者想要凌驾于黎民百姓之上，必须在言辞上处于谦恭的地位。”是以不争，故天下莫能与之争。</li>\n<li>法则7：让自己的想法变成别人的。</li>\n</ul>\n<h4 id=\"第8章-站在对方的立场上思考\"><a href=\"#第8章-站在对方的立场上思考\" class=\"headerlink\" title=\"第8章 站在对方的立场上思考\"></a>第8章 站在对方的立场上思考</h4><ul>\n<li>站在别人的立场，就应该问自己：“在那种情况下，我该作何反应？”懂得这一点，您就会甩掉大堆烦恼，省下大笔宝贵时间。很简单，只要对引发事情的原因做细致调查，就不会对结果感到茫然，处理起人际关系，技巧会更加圆滑。</li>\n<li>莫要着急，掂量一下你对别人的关心程度，你就会立刻明白：察己而知人，对待别人什么态度，别人也会对你什么态度。</li>\n<li>要把别人的观点、想法看成和自己的一样重要。只要做到这一点，那么彼此的交谈就会变得非常轻松愉快。尽量去了解别人的意图，做好聆听者，不要滔滔不绝讲个不停。只要对方认可了你，他就会受到鼓励，就会敞开心扉，而你的话也会更容易被接受。</li>\n<li>与人会谈前，我宁愿在别人的办公室楼前多走两个小时，而不是急匆匆地推门而入。因为这样，我就有时间反复从各个角度，从对方和我的立场上，把需求和结果都想透彻。</li>\n<li>法则8：真正做到换位思考。</li>\n</ul>\n<h4 id=\"第9章-同情他人的想法和愿望\"><a href=\"#第9章-同情他人的想法和愿望\" class=\"headerlink\" title=\"第9章 同情他人的想法和愿望\"></a>第9章 同情他人的想法和愿望</h4><ul>\n<li>我理解你的感受，我不会责怪你。因为如果我是你，也会是一样的。</li>\n<li>法则9：同情并理解别人。</li>\n</ul>\n<h4 id=\"第10章-激发对方的高尚动机\"><a href=\"#第10章-激发对方的高尚动机\" class=\"headerlink\" title=\"第10章 激发对方的高尚动机\"></a>第10章 激发对方的高尚动机</h4><ul>\n<li>每个人都觉得自己是从事实出发，这不理解。同时，每个人都有一个理想化的自己，追求美誉和好名声。要改变人，就要满足对它们理想的追求。</li>\n<li>法则10：激发他人内心的高尚动机。</li>\n</ul>\n<h4 id=\"第11章-戏剧性地表达你的想法\"><a href=\"#第11章-戏剧性地表达你的想法\" class=\"headerlink\" title=\"第11章 戏剧性地表达你的想法\"></a>第11章 戏剧性地表达你的想法</h4><ul>\n<li>法则11：学会运用戏剧化的表达方式。</li>\n</ul>\n<h4 id=\"第12章-让他人不断面临挑战\"><a href=\"#第12章-让他人不断面临挑战\" class=\"headerlink\" title=\"第12章 让他人不断面临挑战\"></a>第12章 让他人不断面临挑战</h4><ul>\n<li>人人都会有所畏惧，只有勇者敢于漠视畏惧，继续前进。前进或许会走向毁灭，但是绝大多数人会迎来胜利。</li>\n<li>竞争、实现自我、证明个人价值、激发斗志、超越对手，最终方能获取成功。实现突破，是一种美妙的感觉，也是成功者一直所热衷的。</li>\n<li>法则12：让他人不断面临挑战。</li>\n</ul>\n","site":{"data":{}},"length":3944,"excerpt":"<p>“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”</p>","more":"<h3 id=\"第一篇-人际关系的3大技巧\"><a href=\"#第一篇-人际关系的3大技巧\" class=\"headerlink\" title=\"第一篇 人际关系的3大技巧\"></a>第一篇 人际关系的3大技巧</h3><h4 id=\"第1章-想采蜜就请善待蜂巢\"><a href=\"#第1章-想采蜜就请善待蜂巢\" class=\"headerlink\" title=\"第1章 想采蜜就请善待蜂巢\"></a>第1章 想采蜜就请善待蜂巢</h4><ul>\n<li>指责和批评，不能让人长久地改变，反而会招来怨恨。</li>\n<li>人际交往中，您一定要明白：我们不是和理性打交道，而是和有情感、有偏见、骄傲、虚荣、活生生的人在打交道。</li>\n<li>批评、指责和抱怨，傻子都懂，且大多数傻子还会做；理解和宽容则需要良好的修养和自制力。</li>\n<li>法则1:避免批评、指责或抱怨。</li>\n</ul>\n<h4 id=\"第2章-人际交往的秘诀\"><a href=\"#第2章-人际交往的秘诀\" class=\"headerlink\" title=\"第2章 人际交往的秘诀\"></a>第2章 人际交往的秘诀</h4><ul>\n<li>按照西格蒙德·弗洛伊德的说法，一个人做事的动机源自两点：“对性和成功的欲望”。美国著名哲学家约翰·杜威的观点有所不同。他说：人类内心深处最重要的欲望是实现“对重视的渴求”。</li>\n<li>“凡爱心、善行，应即刻兑现。不要迟疑，不要停留。光阴易逝，时不我待，人生只有一次。”</li>\n<li>法则2：诚挚地赞美别人。</li>\n</ul>\n<h4 id=\"第3章-换位思考\"><a href=\"#第3章-换位思考\" class=\"headerlink\" title=\"第3章 换位思考\"></a>第3章 换位思考</h4><ul>\n<li>明天，也许您要请某人办什么事情。切莫着急，开口前请问问自己：“我怎么做，才能让对方有兴趣，并按我的意图去做？”</li>\n<li>成功的秘诀是什么？理解他人，站在他人的角度看问题，就当是自己的问题一样。</li>\n<li>想要说服别人，首先要激发别人的认可和需求欲望。</li>\n<li>法则3：激发他人的主动性。</li>\n</ul>\n<h3 id=\"第二篇-受人欢迎的6种方法\"><a href=\"#第二篇-受人欢迎的6种方法\" class=\"headerlink\" title=\"第二篇 受人欢迎的6种方法\"></a>第二篇 受人欢迎的6种方法</h3><h4 id=\"第1章-怎样成为“万人迷”\"><a href=\"#第1章-怎样成为“万人迷”\" class=\"headerlink\" title=\"第1章 怎样成为“万人迷”\"></a>第1章 怎样成为“万人迷”</h4><ul>\n<li>对他人漠不关心的人，命运注定多舛，也会给他人造成伤害，正是因为这类人，世界才充满苦难。</li>\n<li>一个人只要做到对他人真诚关怀，不管这人有多繁忙，多高不可攀，您总会得到他的反馈，赢得谈话机会与合作。</li>\n<li>法则1：用一颗真诚的心去关心别人。</li>\n</ul>\n<h4 id=\"第2章-怎样建立美好的第一印象\"><a href=\"#第2章-怎样建立美好的第一印象\" class=\"headerlink\" title=\"第2章 怎样建立美好的第一印象\"></a>第2章 怎样建立美好的第一印象</h4><ul>\n<li>“人的行为和情感几乎同步，行为能影响情感。只要有意识地控制行为，积极的行为就会改变情感，使人变的积极向上。”</li>\n<li>幸福不因您获得什么，成为什么样的人，身在何处，做过什么事，幸福在于您的想法。</li>\n<li>每当我出门，我都要放低下巴，抬头挺胸，深呼吸。走在阳光中，我微笑着和每一个人打招呼。每次握手都要坚定有力，不必担心误解，不必把时间浪费在恩仇、得失上。我应该坚定我的理想。并炽之翼，不畏艰难，勇往直前，直到实现宏伟目标。时光荏苒。不知不觉中，机会自然而来，抓住它，实现我的理想，像珊瑚从浪花中汲取养料一样。在我脑海中，始终会浮现成功的样子。我一定会成为干练、诚实、大有作为的人。我的思想将引领一切，也会不断修正，让我逐步接近梦想。我要坚守正确的价值观，保持勇敢、诚实和积极的态度。我的理想指引着我的道路，一切都源于此，当我发自内心去祈祷，一切美好都会实现。内心希望什么，就会发生什么。放低下巴，抬头挺胸，我将脱颖而出。</li>\n<li>法则2：保持微笑。</li>\n</ul>\n<h4 id=\"第3章-记住别人的名字\"><a href=\"#第3章-记住别人的名字\" class=\"headerlink\" title=\"第3章 记住别人的名字\"></a>第3章 记住别人的名字</h4><ul>\n<li>记住一个人的名字，能让人感到重视，是最简单、最直接获取好感的方法。</li>\n<li>法则3：姓名是一个最重要的声音符号，牢记别人的姓名。</li>\n</ul>\n<h4 id=\"第4章-怎样做到“妙语连珠”\"><a href=\"#第4章-怎样做到“妙语连珠”\" class=\"headerlink\" title=\"第4章 怎样做到“妙语连珠”\"></a>第4章 怎样做到“妙语连珠”</h4><ul>\n<li>如果想要展开一场愉快的谈话，可以从别人喜欢的话题开始，引导并鼓励他们，多谈一些别人的生活、成就等事情。切记，不论您与谁谈话，他对自身的需求、问题的兴趣，远远高于对您的兴趣。</li>\n<li>法则4：善于聆听，鼓励别人谈论自己。</li>\n</ul>\n<h4 id=\"第5章-怎样引起他人的兴趣\"><a href=\"#第5章-怎样引起他人的兴趣\" class=\"headerlink\" title=\"第5章 怎样引起他人的兴趣\"></a>第5章 怎样引起他人的兴趣</h4><ul>\n<li>找出让人感兴趣的话题，技能让双方从中获益，又能让生活变得充实。</li>\n<li>法则5：谈论对方感兴趣的话题。</li>\n</ul>\n<h4 id=\"第6章-怎样才能收获真正的友谊\"><a href=\"#第6章-怎样才能收获真正的友谊\" class=\"headerlink\" title=\"第6章 怎样才能收获真正的友谊\"></a>第6章 怎样才能收获真正的友谊</h4><ul>\n<li>让他人感到自己重要。</li>\n<li>您要别人怎么待您，就得先怎样待别人。</li>\n<li>法则6：真心实意地让对方知道自己有多重要。</li>\n</ul>\n<h3 id=\"第三篇-获取赞同的12条法则\"><a href=\"#第三篇-获取赞同的12条法则\" class=\"headerlink\" title=\"第三篇 获取赞同的12条法则\"></a>第三篇 获取赞同的12条法则</h3><h4 id=\"第1章-不做无意义的争辩\"><a href=\"#第1章-不做无意义的争辩\" class=\"headerlink\" title=\"第1章 不做无意义的争辩\"></a>第1章 不做无意义的争辩</h4><ul>\n<li><p>世界上不存在赢得辩论的技巧。唯一可以做的是避免任何辩论，就像对毒虫猛兽一样远远躲开。</p>\n</li>\n<li><p>避免争论的建议：</p>\n<ol>\n<li>欢迎不同的声音。如果合作双方意见一致，那么其中一方就没有存在的必要。一方提出不同意见，你首先要表示感谢，也许这个意见会让你避免犯下大错。</li>\n<li>不要跟着感觉走。别人提出反对也很正常，这是人类出于防卫的本能。但要注意：一定要保持平静，不要被第一反应左右，这样会导致重大错误，错过明智的判断。</li>\n<li>控制情绪。一个人脾气的大小，决定了这个人的气量和将来可能取得的成就。</li>\n<li>学会聆听。让不同意见得以表达，不要阻止别人发言。不要出于维护颜面而争执，那样只能加深误解和矛盾。应积极努力沟通，而不是反过来争执。</li>\n<li>求同存异。别人有不同意见，你应该想想哪些对你有用，哪些你可以同意。</li>\n<li>以诚待人。不怕承认错误，做个诚实的人。有错误，就应该向别人真诚道歉，这样有利于彼此间的理解和沟通。</li>\n<li>重视不同意见，并认真思考。反对意见可能是明智之举。不然，当事实证明别人是对的，那是你将无地自容。</li>\n<li>感谢反对意见。提出反对意见，就说明别人和你一样，关心某事。如果你视反对意见为一种善意的帮助，那么你很快就会收获新的朋友。</li>\n<li>谨言慎行。如果你要推迟谈论，那么下次谈论前一定要把问题想清楚。你需要向自己这些问题：“反对意见是否全有道理？还是部分有？对方的立场是否站得住脚？我的反应是就事论事，还是夹杂有个人情绪？是否让对方感到不舒服？是否还能让对方给出更多建议？讨论会成功，还是失败？代价是什么？我如果保持沉默，反对意见会消失吗？这是否意味着新的机会？”</li>\n</ol>\n</li>\n<li><p>法则1：避免争论，是赢得争论的唯一途径。</p>\n</li>\n</ul>\n<h4 id=\"第2章-如何避免得罪人\"><a href=\"#第2章-如何避免得罪人\" class=\"headerlink\" title=\"第2章 如何避免得罪人\"></a>第2章 如何避免得罪人</h4><ul>\n<li>绝对不伤害别人的感情，不冒失武断，甚至在措辞中也避免使用带有绝对、肯定性的字眼，如：“当然”、“毋庸置疑”等。一件事情不能下定论，或者从目前情况来看，应该是“这样的”。他会说：“我想”、“我觉得”、“我估计”。别人出现明显的错误，他也不会直截了当地反驳，而是用：“从某种意义上讲，您的观点是正确的；但是在现在这种情形下，我觉得或许是……”</li>\n<li>用谦虚的态度与人交谈，不仅容易让人接受，而且避免了很多无意义的争执。即使犯错了，也不至于让自己太尴尬；当恰好说对了，对方也不会固执己见，容易接受并赞同您。</li>\n<li>法则2：尊重别人，不轻易指责别人的过失。</li>\n</ul>\n<h4 id=\"第3章-认错并不丢人\"><a href=\"#第3章-认错并不丢人\" class=\"headerlink\" title=\"第3章 认错并不丢人\"></a>第3章 认错并不丢人</h4><ul>\n<li>当能预见到要被批评，您可以先发制人地把别人要说的话抢先说出来。十有八九，别人会改变主意，用比较宽大的胸怀去原谅你。</li>\n<li>勇敢而真诚地面对并承认错误，不去辩解，不仅能够让您的精神得到放松、消减罪恶感，而且有利于问题的解决。</li>\n<li>争胜好强，不能帮你取得胜利，您可以下次试一试。</li>\n<li>法则3：及时、诚恳地承认错误。</li>\n</ul>\n<h4 id=\"第4章-与人为善\"><a href=\"#第4章-与人为善\" class=\"headerlink\" title=\"第4章 与人为善\"></a>第4章 与人为善</h4><ul>\n<li>如果有人对您不满并怀有恶意，那么您无论如何也不能得到他们的赞同。您应该明白，责怪父母、上司、丈夫或喋喋不休的妻子，绝对不会改变他们的初衷，强制手段更不会让他们认同。但换一种温和、友善的态度，您就能引导他们与您的意见趋同。</li>\n<li>“一句古话这么说：‘一滴蜂蜜比一滴胆汁更能吸引苍蝇’。人也一样。如果想让别人同意您，首先你们得是朋友。朋友，就像一滴蜂蜜，能赢得人心，能让人理智。”</li>\n<li>法则4：百事善为先。</li>\n</ul>\n<h4 id=\"第5章-苏格拉底式说服术\"><a href=\"#第5章-苏格拉底式说服术\" class=\"headerlink\" title=\"第5章 苏格拉底式说服术\"></a>第5章 苏格拉底式说服术</h4><ul>\n<li>与人谈话，不要开口就谈分歧，应该自始至终，不断地强调双方都赞同的事情，强调彼此目标一致，在适当情况下，再谈方式、方法上的差异。</li>\n<li>善于谈话的高手，通常开始就获得对方“是”的态度，从而引导对方向积极的一面思考。像打桌球，一旦击球后，方向就很难逆转，想回到原来位置就要付出更大气力。</li>\n<li>这个方法就让听话人的直接反应为“是、是、是”。他提出问题，反对者都会同意，并持续不断地肯定。一个又一个“是”，在接连不断的发问下，神不知鬼不觉之中，反对者突然发现：前一刻反对的事情，现在已经表示赞同。</li>\n<li>法则5：让别人说“是”。</li>\n</ul>\n<h4 id=\"第6章-给他人说话的机会\"><a href=\"#第6章-给他人说话的机会\" class=\"headerlink\" title=\"第6章 给他人说话的机会\"></a>第6章 给他人说话的机会</h4><ul>\n<li>想要结仇，那就努力在别人面前表现得更出色；想要交友，就让别人显得比你出色。</li>\n<li>只有别人超越我们时，他们会觉得自己很重要；反之，我们只能让别人感到自卑和嫉妒。</li>\n<li>法则6：鼓励别人多说。</li>\n</ul>\n<h4 id=\"第7章-怎样取得合作\"><a href=\"#第7章-怎样取得合作\" class=\"headerlink\" title=\"第7章 怎样取得合作\"></a>第7章 怎样取得合作</h4><ul>\n<li>自己领悟的道理永远比别人教给您的要深刻。即使别人把这些道理用银盘子托着盛意送您，您也不见得领情。同样的道理，把自己的想法强加于人显然不合适。换个方式，只给建议，让别人总结出结论，效果不是更好？</li>\n<li>“江海之所以能成为百川百谷之王，是因为江海能够自处于谦下的位置，河川自然流向大海，江海也自然能够成为百谷之王。统治者想要凌驾于黎民百姓之上，必须在言辞上处于谦恭的地位。”是以不争，故天下莫能与之争。</li>\n<li>法则7：让自己的想法变成别人的。</li>\n</ul>\n<h4 id=\"第8章-站在对方的立场上思考\"><a href=\"#第8章-站在对方的立场上思考\" class=\"headerlink\" title=\"第8章 站在对方的立场上思考\"></a>第8章 站在对方的立场上思考</h4><ul>\n<li>站在别人的立场，就应该问自己：“在那种情况下，我该作何反应？”懂得这一点，您就会甩掉大堆烦恼，省下大笔宝贵时间。很简单，只要对引发事情的原因做细致调查，就不会对结果感到茫然，处理起人际关系，技巧会更加圆滑。</li>\n<li>莫要着急，掂量一下你对别人的关心程度，你就会立刻明白：察己而知人，对待别人什么态度，别人也会对你什么态度。</li>\n<li>要把别人的观点、想法看成和自己的一样重要。只要做到这一点，那么彼此的交谈就会变得非常轻松愉快。尽量去了解别人的意图，做好聆听者，不要滔滔不绝讲个不停。只要对方认可了你，他就会受到鼓励，就会敞开心扉，而你的话也会更容易被接受。</li>\n<li>与人会谈前，我宁愿在别人的办公室楼前多走两个小时，而不是急匆匆地推门而入。因为这样，我就有时间反复从各个角度，从对方和我的立场上，把需求和结果都想透彻。</li>\n<li>法则8：真正做到换位思考。</li>\n</ul>\n<h4 id=\"第9章-同情他人的想法和愿望\"><a href=\"#第9章-同情他人的想法和愿望\" class=\"headerlink\" title=\"第9章 同情他人的想法和愿望\"></a>第9章 同情他人的想法和愿望</h4><ul>\n<li>我理解你的感受，我不会责怪你。因为如果我是你，也会是一样的。</li>\n<li>法则9：同情并理解别人。</li>\n</ul>\n<h4 id=\"第10章-激发对方的高尚动机\"><a href=\"#第10章-激发对方的高尚动机\" class=\"headerlink\" title=\"第10章 激发对方的高尚动机\"></a>第10章 激发对方的高尚动机</h4><ul>\n<li>每个人都觉得自己是从事实出发，这不理解。同时，每个人都有一个理想化的自己，追求美誉和好名声。要改变人，就要满足对它们理想的追求。</li>\n<li>法则10：激发他人内心的高尚动机。</li>\n</ul>\n<h4 id=\"第11章-戏剧性地表达你的想法\"><a href=\"#第11章-戏剧性地表达你的想法\" class=\"headerlink\" title=\"第11章 戏剧性地表达你的想法\"></a>第11章 戏剧性地表达你的想法</h4><ul>\n<li>法则11：学会运用戏剧化的表达方式。</li>\n</ul>\n<h4 id=\"第12章-让他人不断面临挑战\"><a href=\"#第12章-让他人不断面临挑战\" class=\"headerlink\" title=\"第12章 让他人不断面临挑战\"></a>第12章 让他人不断面临挑战</h4><ul>\n<li>人人都会有所畏惧，只有勇者敢于漠视畏惧，继续前进。前进或许会走向毁灭，但是绝大多数人会迎来胜利。</li>\n<li>竞争、实现自我、证明个人价值、激发斗志、超越对手，最终方能获取成功。实现突破，是一种美妙的感觉，也是成功者一直所热衷的。</li>\n<li>法则12：让他人不断面临挑战。</li>\n</ul>"},{"title":"值类型与引用类型","date":"2019-03-28T15:33:57.000Z","_content":"### 引用类型\n* 内存必须从托管堆分配\n* 堆上分配的每个对象都有一些额外成员,这些成员必须初始化\n* 对象中的其他字节总是设为零\n* 从托管堆分配对象时,可能强制执行一次垃圾回收\n<!--more-->\n### 值类型\n* 类型具有基元类型的行为\n* 类型不需要从其他任何类型继承\n* 类型也不派生出其他类型\n* 类型的实例较小(小于等于16字节)\n* 类型的实例较大(大于16字节),但不作为方法实参传递,也不从方法返回.\n* 不作为对象在托管堆上分配\n\n### 值类型和引用类型的一些区别\n* 值类型对象有两种表示形式:未装箱和已装箱,引用类型总是处于已装箱形式\n* 值类型从System.ValueType派生,System.ValueType重写了Equals方法和GetHashCode方法,所以定义自己的值类型时,应重写Equals方法和GetHashCode方法,并提供它们的显示实现.\n* 由于不能将值类型作为基类型来定义新的值类型和引用类型,所以不应再值类型中引入任何新的虚方法.所有方法都不能是抽象的,都隐式密封.\n* 引用类型的变量包含堆中对象的地址,创建时默认初始化为null,表示当前不指向有效对象,试图使用null的引用类型变量会抛出NullReferenceException异常;值类型的变量总是包含其基础类型的一个值,初始化为0,一般不会抛出NullReferenceException异常.\n* 值类型变量赋值到另一个值类型变量,会逐字段复制,引用类型赋值只复制内存地址\n* 两个或多个引用类型变量能引用堆中同一个对象,对一个变量执行的操作可能对影响另一个变量引用的对象,值类型之间不会互相影响.\n* 由于未装箱的值类型不在堆上分配,一旦定义了该类型的一个实例方法不再活动,为它们分配的存储就会被释放,而不是等着进行垃圾回收","source":"_posts/值类型与引用类型.md","raw":"---\ntitle: 值类型与引用类型\ndate: 2019-03-28 23:33:57\ncategories: C# \ntags: \n - 基础\n - C#\n---\n### 引用类型\n* 内存必须从托管堆分配\n* 堆上分配的每个对象都有一些额外成员,这些成员必须初始化\n* 对象中的其他字节总是设为零\n* 从托管堆分配对象时,可能强制执行一次垃圾回收\n<!--more-->\n### 值类型\n* 类型具有基元类型的行为\n* 类型不需要从其他任何类型继承\n* 类型也不派生出其他类型\n* 类型的实例较小(小于等于16字节)\n* 类型的实例较大(大于16字节),但不作为方法实参传递,也不从方法返回.\n* 不作为对象在托管堆上分配\n\n### 值类型和引用类型的一些区别\n* 值类型对象有两种表示形式:未装箱和已装箱,引用类型总是处于已装箱形式\n* 值类型从System.ValueType派生,System.ValueType重写了Equals方法和GetHashCode方法,所以定义自己的值类型时,应重写Equals方法和GetHashCode方法,并提供它们的显示实现.\n* 由于不能将值类型作为基类型来定义新的值类型和引用类型,所以不应再值类型中引入任何新的虚方法.所有方法都不能是抽象的,都隐式密封.\n* 引用类型的变量包含堆中对象的地址,创建时默认初始化为null,表示当前不指向有效对象,试图使用null的引用类型变量会抛出NullReferenceException异常;值类型的变量总是包含其基础类型的一个值,初始化为0,一般不会抛出NullReferenceException异常.\n* 值类型变量赋值到另一个值类型变量,会逐字段复制,引用类型赋值只复制内存地址\n* 两个或多个引用类型变量能引用堆中同一个对象,对一个变量执行的操作可能对影响另一个变量引用的对象,值类型之间不会互相影响.\n* 由于未装箱的值类型不在堆上分配,一旦定义了该类型的一个实例方法不再活动,为它们分配的存储就会被释放,而不是等着进行垃圾回收","slug":"值类型与引用类型","published":1,"updated":"2021-03-30T03:24:16.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0o004qvcuaclg70arz","content":"<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><ul>\n<li>内存必须从托管堆分配</li>\n<li>堆上分配的每个对象都有一些额外成员,这些成员必须初始化</li>\n<li>对象中的其他字节总是设为零</li>\n<li>从托管堆分配对象时,可能强制执行一次垃圾回收<span id=\"more\"></span>\n<h3 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h3></li>\n<li>类型具有基元类型的行为</li>\n<li>类型不需要从其他任何类型继承</li>\n<li>类型也不派生出其他类型</li>\n<li>类型的实例较小(小于等于16字节)</li>\n<li>类型的实例较大(大于16字节),但不作为方法实参传递,也不从方法返回.</li>\n<li>不作为对象在托管堆上分配</li>\n</ul>\n<h3 id=\"值类型和引用类型的一些区别\"><a href=\"#值类型和引用类型的一些区别\" class=\"headerlink\" title=\"值类型和引用类型的一些区别\"></a>值类型和引用类型的一些区别</h3><ul>\n<li>值类型对象有两种表示形式:未装箱和已装箱,引用类型总是处于已装箱形式</li>\n<li>值类型从System.ValueType派生,System.ValueType重写了Equals方法和GetHashCode方法,所以定义自己的值类型时,应重写Equals方法和GetHashCode方法,并提供它们的显示实现.</li>\n<li>由于不能将值类型作为基类型来定义新的值类型和引用类型,所以不应再值类型中引入任何新的虚方法.所有方法都不能是抽象的,都隐式密封.</li>\n<li>引用类型的变量包含堆中对象的地址,创建时默认初始化为null,表示当前不指向有效对象,试图使用null的引用类型变量会抛出NullReferenceException异常;值类型的变量总是包含其基础类型的一个值,初始化为0,一般不会抛出NullReferenceException异常.</li>\n<li>值类型变量赋值到另一个值类型变量,会逐字段复制,引用类型赋值只复制内存地址</li>\n<li>两个或多个引用类型变量能引用堆中同一个对象,对一个变量执行的操作可能对影响另一个变量引用的对象,值类型之间不会互相影响.</li>\n<li>由于未装箱的值类型不在堆上分配,一旦定义了该类型的一个实例方法不再活动,为它们分配的存储就会被释放,而不是等着进行垃圾回收</li>\n</ul>\n","site":{"data":{}},"length":705,"excerpt":"<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><ul>\n<li>内存必须从托管堆分配</li>\n<li>堆上分配的每个对象都有一些额外成员,这些成员必须初始化</li>\n<li>对象中的其他字节总是设为零</li>\n<li>从托管堆分配对象时,可能强制执行一次垃圾回收","more":"<h3 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h3></li>\n<li>类型具有基元类型的行为</li>\n<li>类型不需要从其他任何类型继承</li>\n<li>类型也不派生出其他类型</li>\n<li>类型的实例较小(小于等于16字节)</li>\n<li>类型的实例较大(大于16字节),但不作为方法实参传递,也不从方法返回.</li>\n<li>不作为对象在托管堆上分配</li>\n</ul>\n<h3 id=\"值类型和引用类型的一些区别\"><a href=\"#值类型和引用类型的一些区别\" class=\"headerlink\" title=\"值类型和引用类型的一些区别\"></a>值类型和引用类型的一些区别</h3><ul>\n<li>值类型对象有两种表示形式:未装箱和已装箱,引用类型总是处于已装箱形式</li>\n<li>值类型从System.ValueType派生,System.ValueType重写了Equals方法和GetHashCode方法,所以定义自己的值类型时,应重写Equals方法和GetHashCode方法,并提供它们的显示实现.</li>\n<li>由于不能将值类型作为基类型来定义新的值类型和引用类型,所以不应再值类型中引入任何新的虚方法.所有方法都不能是抽象的,都隐式密封.</li>\n<li>引用类型的变量包含堆中对象的地址,创建时默认初始化为null,表示当前不指向有效对象,试图使用null的引用类型变量会抛出NullReferenceException异常;值类型的变量总是包含其基础类型的一个值,初始化为0,一般不会抛出NullReferenceException异常.</li>\n<li>值类型变量赋值到另一个值类型变量,会逐字段复制,引用类型赋值只复制内存地址</li>\n<li>两个或多个引用类型变量能引用堆中同一个对象,对一个变量执行的操作可能对影响另一个变量引用的对象,值类型之间不会互相影响.</li>\n<li>由于未装箱的值类型不在堆上分配,一旦定义了该类型的一个实例方法不再活动,为它们分配的存储就会被释放,而不是等着进行垃圾回收</li>\n</ul>"},{"title":"关于Winform窗体的快速复制","date":"2019-03-21T14:55:57.000Z","_content":"## 起因\n最近接手了一个新项目的开发,里面有很多窗体都是直接从其他项目上复制过来的,或者创建一个以后,可以复制成用于不用的需求,这时候就会涉及到winform窗体的复制了,下面分享自己的经验\n<!--more-->\n## 项目中不存在同名窗体\n直接复制窗体对应的cs、designer.cs、resx的三个文件到对应的目录,在VS中直接添加现有项目,选择cs文件,将窗体添加到项目中,然后修改命名空间就可以了.\n\n## 项目中已存在同名窗体\n* 重命名cs、designer.cs、resx三个文件\n* 打开窗体代码，修改public partial class XXXX : Form中的XXXX为新窗体类名YYYY。\n* 重要：窗体初始化模块中的XXXX也相应修改为YYYY\n    ``` cs\n    public XXXX()\n    {\n        InitializeComponent();\n    }\n    ```\n* 异常重要：\n    打开窗体设计器代码YYYY.Designer.cs，修改partial class XXXX : Form 中的XXXX为新窗体类名YYYY。\n* 更重要而不易找到的问题： \n    修改private void InitializeComponent() 中System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(XXXX))一行中的XXXX为YYYY；","source":"_posts/关于Winform窗体的快速复制.md","raw":"---\ntitle: 关于Winform窗体的快速复制\ndate: 2019-03-21 22:55:57\ncategories: C# \ntags: \n - 复制\n - C#\n---\n## 起因\n最近接手了一个新项目的开发,里面有很多窗体都是直接从其他项目上复制过来的,或者创建一个以后,可以复制成用于不用的需求,这时候就会涉及到winform窗体的复制了,下面分享自己的经验\n<!--more-->\n## 项目中不存在同名窗体\n直接复制窗体对应的cs、designer.cs、resx的三个文件到对应的目录,在VS中直接添加现有项目,选择cs文件,将窗体添加到项目中,然后修改命名空间就可以了.\n\n## 项目中已存在同名窗体\n* 重命名cs、designer.cs、resx三个文件\n* 打开窗体代码，修改public partial class XXXX : Form中的XXXX为新窗体类名YYYY。\n* 重要：窗体初始化模块中的XXXX也相应修改为YYYY\n    ``` cs\n    public XXXX()\n    {\n        InitializeComponent();\n    }\n    ```\n* 异常重要：\n    打开窗体设计器代码YYYY.Designer.cs，修改partial class XXXX : Form 中的XXXX为新窗体类名YYYY。\n* 更重要而不易找到的问题： \n    修改private void InitializeComponent() 中System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(XXXX))一行中的XXXX为YYYY；","slug":"关于Winform窗体的快速复制","published":1,"updated":"2021-03-30T03:24:16.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0p004tvcuafd2e19ct","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近接手了一个新项目的开发,里面有很多窗体都是直接从其他项目上复制过来的,或者创建一个以后,可以复制成用于不用的需求,这时候就会涉及到winform窗体的复制了,下面分享自己的经验</p>\n<span id=\"more\"></span>\n<h2 id=\"项目中不存在同名窗体\"><a href=\"#项目中不存在同名窗体\" class=\"headerlink\" title=\"项目中不存在同名窗体\"></a>项目中不存在同名窗体</h2><p>直接复制窗体对应的cs、designer.cs、resx的三个文件到对应的目录,在VS中直接添加现有项目,选择cs文件,将窗体添加到项目中,然后修改命名空间就可以了.</p>\n<h2 id=\"项目中已存在同名窗体\"><a href=\"#项目中已存在同名窗体\" class=\"headerlink\" title=\"项目中已存在同名窗体\"></a>项目中已存在同名窗体</h2><ul>\n<li>重命名cs、designer.cs、resx三个文件</li>\n<li>打开窗体代码，修改public partial class XXXX : Form中的XXXX为新窗体类名YYYY。</li>\n<li>重要：窗体初始化模块中的XXXX也相应修改为YYYY  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XXXX</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    InitializeComponent();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>异常重要：<br>  打开窗体设计器代码YYYY.Designer.cs，修改partial class XXXX : Form 中的XXXX为新窗体类名YYYY。</li>\n<li>更重要而不易找到的问题：<br>  修改private void InitializeComponent() 中System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(XXXX))一行中的XXXX为YYYY；</li>\n</ul>\n","site":{"data":{}},"length":601,"excerpt":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近接手了一个新项目的开发,里面有很多窗体都是直接从其他项目上复制过来的,或者创建一个以后,可以复制成用于不用的需求,这时候就会涉及到winform窗体的复制了,下面分享自己的经验</p>","more":"<h2 id=\"项目中不存在同名窗体\"><a href=\"#项目中不存在同名窗体\" class=\"headerlink\" title=\"项目中不存在同名窗体\"></a>项目中不存在同名窗体</h2><p>直接复制窗体对应的cs、designer.cs、resx的三个文件到对应的目录,在VS中直接添加现有项目,选择cs文件,将窗体添加到项目中,然后修改命名空间就可以了.</p>\n<h2 id=\"项目中已存在同名窗体\"><a href=\"#项目中已存在同名窗体\" class=\"headerlink\" title=\"项目中已存在同名窗体\"></a>项目中已存在同名窗体</h2><ul>\n<li>重命名cs、designer.cs、resx三个文件</li>\n<li>打开窗体代码，修改public partial class XXXX : Form中的XXXX为新窗体类名YYYY。</li>\n<li>重要：窗体初始化模块中的XXXX也相应修改为YYYY  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XXXX</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    InitializeComponent();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>异常重要：<br>  打开窗体设计器代码YYYY.Designer.cs，修改partial class XXXX : Form 中的XXXX为新窗体类名YYYY。</li>\n<li>更重要而不易找到的问题：<br>  修改private void InitializeComponent() 中System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(XXXX))一行中的XXXX为YYYY；</li>\n</ul>"},{"title":"关于毕业设计的整理","date":"2018-06-05T15:38:39.000Z","_content":"#### 关于毕业设计的想法\n在毕业设计的题目,我是比较纠结的,有想过利用.Net Core和Google Optimization Tools去做一个智能调度排班系统的,但后来经过深入的了解,发现智能调度排班系统并没有那么容易实现.回忆大学生涯,学生网管这个工作其实还在给我带来了不少的回忆.于是就决定开发一个网络故障报修系统.\n<!--more-->\n\n#### 采用的架构\n一直有开发一个前后端分离的系统的想法,刚好借这个机会去尝试一下,就决定采用前后端分离的开发模式.服务端采用Asp.Net Core WebApi,前端采用Vue+Router+Element ui+axios.\n\n#### 关于跨域\n##### 问题原因\n既然使用了前后端分离的架构,不可避免的就是跨域访问的问题.前后端可能不在同个server上,即便是在同个server上,由于前后端分离,前后端对应的端口号也可能是不一样的,所以跨域访问是必须的.\n##### 解决方案\n服务端是基于Asp.Net Core开发的WebApi,支持cors非常方便,只需要引入Microsoft.AspNetCore.Cors,问题就很轻易的解决了.\n在Startup.cs中ConfigureServices方法中添加Cors服务,在Configure方法中使用Cors服务\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options => options.AddPolicy(\"Domain\", builder => builder.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin().AllowCredentials()));\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseCors(\"Domain\");\n}\n```\n\n#### 关于用户权限\n##### 问题原因\n在系统中涉及到不同的角色,它们之间的权限不一样,对应的菜单也就存在着差异.关于权限的部分,有着几种不同的解决方案,一种是在前端预设写死页面的权限设置,前端通过后台返回的角色信息,生成对应的菜单,另一种则是在后台动态配置权限,当用户登录时,根据角色信息,后端返回一个对应的权限表,前端通过权限表生成对应的菜单.\n##### 解决方案\n在本系统中,采用的是后一种解决方案,前端中存在完整的路由表,用户在登录后,获得相应的路由信息,根据路由信息去比对完整的路由表,生成当前用户可访问的页面,通过router.addRoutes动态挂载到router上.\n\n#### 关于前端\n系统的前端是基于[vueAdmin-template](https://github.com/PanJiaChen/vueAdmin-template)进行二次开发,修改了其关于用户权限的设置\n\n#### 关于服务端\n系统的后端采用的是Asp.Net Core WebApi,MVC模式,架构分为BLL(业务层)-Dal(数据访问层),数据库访问是通过EF Core实现.使用EF Core Code Frist 创建数据库,使用Migrations完成对数据库的迁移.[.Net Core MVC三层架构框架](https://chcaty.github.io/2018/03/06/Net-Core-MVC-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/)里面架构进行了详细介绍.\n\n#### Token\n系统中,登录成功后，服务端会返回一个 token（该token的是一个能唯一标示用户身份的一个key），之后我们将token存储在本地cookie之中，这样下次打开页面或者刷新页面的时候能记住用户的登录状态，不用再去登录页面重新登录了。\n##### 实现方案\nLoginControllers.cs\n```cs\nusing Microsoft.IdentityModel.Tokens;\nusing System.Security.Claims;\nusing Microsoft.Extensions.Configuration;\n\npublic class LoginController : Controller\n{\n    private readonly IConfiguration _configuration;\n    public LoginController(IConfiguration configuration)\n    {\n         _configuration = configuration;\n    }\n    \n    public string RequestToken([FromBody] TokenRequest request, string token, int expires_in)\n    {\n        var claims = new[]\n        {\n             new Claim(ClaimTypes.Name, request.Username)\n        };\n        \n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[\"SecurityKey\"]));\n        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        /**\n            * Claims (Payload)\n            Claims 部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，下面节选一些字段:\n            iss: The issuer of the token，token 是给谁的\n            sub: The subject of the token，token 主题\n            exp: Expiration Time。 token 过期时间，Unix 时间戳格式\n            iat: Issued At。 token 创建时间， Unix 时间戳格式\n            jti: JWT ID。针对当前 token 的唯一标识\n            除了规定的字段外，可以包含其他任何 JSON 兼容的字段。\n         * */\n        var tokens = new JwtSecurityToken(\n            issuer: \"yourdomain.com\",\n            audience: \"yourdomain.com\",\n            claims: claims,\n            expires: DateTime.Now.AddMinutes(10),\n            signingCredentials: creds);\n\n        return token = new JwtSecurityTokenHandler().WriteToken(tokens);\n    }\n\n\n    public class TokenRequest\n    {\n        public string Username { get; set; }\n        public string Password { get; set; }\n    }\n}\n```\nappsettings.json\n```cs\n{\n    \"SecurityKey\": \"dd%88*377f6d&f£$$£$FdddFF33fssDG^!3\"\n}\n```\n#### GitHub地址\n[网络故障报修管理系统](https://github.com/chcaty/IRS)\n","source":"_posts/关于毕业设计的整理.md","raw":"---\ntitle: 关于毕业设计的整理\ndate: 2018-06-05 23:38:39\ncategories: .Net Core\ntags:\n - .Net Core\n - Vue.js\n---\n#### 关于毕业设计的想法\n在毕业设计的题目,我是比较纠结的,有想过利用.Net Core和Google Optimization Tools去做一个智能调度排班系统的,但后来经过深入的了解,发现智能调度排班系统并没有那么容易实现.回忆大学生涯,学生网管这个工作其实还在给我带来了不少的回忆.于是就决定开发一个网络故障报修系统.\n<!--more-->\n\n#### 采用的架构\n一直有开发一个前后端分离的系统的想法,刚好借这个机会去尝试一下,就决定采用前后端分离的开发模式.服务端采用Asp.Net Core WebApi,前端采用Vue+Router+Element ui+axios.\n\n#### 关于跨域\n##### 问题原因\n既然使用了前后端分离的架构,不可避免的就是跨域访问的问题.前后端可能不在同个server上,即便是在同个server上,由于前后端分离,前后端对应的端口号也可能是不一样的,所以跨域访问是必须的.\n##### 解决方案\n服务端是基于Asp.Net Core开发的WebApi,支持cors非常方便,只需要引入Microsoft.AspNetCore.Cors,问题就很轻易的解决了.\n在Startup.cs中ConfigureServices方法中添加Cors服务,在Configure方法中使用Cors服务\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options => options.AddPolicy(\"Domain\", builder => builder.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin().AllowCredentials()));\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseCors(\"Domain\");\n}\n```\n\n#### 关于用户权限\n##### 问题原因\n在系统中涉及到不同的角色,它们之间的权限不一样,对应的菜单也就存在着差异.关于权限的部分,有着几种不同的解决方案,一种是在前端预设写死页面的权限设置,前端通过后台返回的角色信息,生成对应的菜单,另一种则是在后台动态配置权限,当用户登录时,根据角色信息,后端返回一个对应的权限表,前端通过权限表生成对应的菜单.\n##### 解决方案\n在本系统中,采用的是后一种解决方案,前端中存在完整的路由表,用户在登录后,获得相应的路由信息,根据路由信息去比对完整的路由表,生成当前用户可访问的页面,通过router.addRoutes动态挂载到router上.\n\n#### 关于前端\n系统的前端是基于[vueAdmin-template](https://github.com/PanJiaChen/vueAdmin-template)进行二次开发,修改了其关于用户权限的设置\n\n#### 关于服务端\n系统的后端采用的是Asp.Net Core WebApi,MVC模式,架构分为BLL(业务层)-Dal(数据访问层),数据库访问是通过EF Core实现.使用EF Core Code Frist 创建数据库,使用Migrations完成对数据库的迁移.[.Net Core MVC三层架构框架](https://chcaty.github.io/2018/03/06/Net-Core-MVC-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/)里面架构进行了详细介绍.\n\n#### Token\n系统中,登录成功后，服务端会返回一个 token（该token的是一个能唯一标示用户身份的一个key），之后我们将token存储在本地cookie之中，这样下次打开页面或者刷新页面的时候能记住用户的登录状态，不用再去登录页面重新登录了。\n##### 实现方案\nLoginControllers.cs\n```cs\nusing Microsoft.IdentityModel.Tokens;\nusing System.Security.Claims;\nusing Microsoft.Extensions.Configuration;\n\npublic class LoginController : Controller\n{\n    private readonly IConfiguration _configuration;\n    public LoginController(IConfiguration configuration)\n    {\n         _configuration = configuration;\n    }\n    \n    public string RequestToken([FromBody] TokenRequest request, string token, int expires_in)\n    {\n        var claims = new[]\n        {\n             new Claim(ClaimTypes.Name, request.Username)\n        };\n        \n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[\"SecurityKey\"]));\n        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        /**\n            * Claims (Payload)\n            Claims 部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，下面节选一些字段:\n            iss: The issuer of the token，token 是给谁的\n            sub: The subject of the token，token 主题\n            exp: Expiration Time。 token 过期时间，Unix 时间戳格式\n            iat: Issued At。 token 创建时间， Unix 时间戳格式\n            jti: JWT ID。针对当前 token 的唯一标识\n            除了规定的字段外，可以包含其他任何 JSON 兼容的字段。\n         * */\n        var tokens = new JwtSecurityToken(\n            issuer: \"yourdomain.com\",\n            audience: \"yourdomain.com\",\n            claims: claims,\n            expires: DateTime.Now.AddMinutes(10),\n            signingCredentials: creds);\n\n        return token = new JwtSecurityTokenHandler().WriteToken(tokens);\n    }\n\n\n    public class TokenRequest\n    {\n        public string Username { get; set; }\n        public string Password { get; set; }\n    }\n}\n```\nappsettings.json\n```cs\n{\n    \"SecurityKey\": \"dd%88*377f6d&f£$$£$FdddFF33fssDG^!3\"\n}\n```\n#### GitHub地址\n[网络故障报修管理系统](https://github.com/chcaty/IRS)\n","slug":"关于毕业设计的整理","published":1,"updated":"2021-03-30T03:24:16.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0r004xvcua42xhcny5","content":"<h4 id=\"关于毕业设计的想法\"><a href=\"#关于毕业设计的想法\" class=\"headerlink\" title=\"关于毕业设计的想法\"></a>关于毕业设计的想法</h4><p>在毕业设计的题目,我是比较纠结的,有想过利用.Net Core和Google Optimization Tools去做一个智能调度排班系统的,但后来经过深入的了解,发现智能调度排班系统并没有那么容易实现.回忆大学生涯,学生网管这个工作其实还在给我带来了不少的回忆.于是就决定开发一个网络故障报修系统.</p>\n<span id=\"more\"></span>\n\n<h4 id=\"采用的架构\"><a href=\"#采用的架构\" class=\"headerlink\" title=\"采用的架构\"></a>采用的架构</h4><p>一直有开发一个前后端分离的系统的想法,刚好借这个机会去尝试一下,就决定采用前后端分离的开发模式.服务端采用Asp.Net Core WebApi,前端采用Vue+Router+Element ui+axios.</p>\n<h4 id=\"关于跨域\"><a href=\"#关于跨域\" class=\"headerlink\" title=\"关于跨域\"></a>关于跨域</h4><h5 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h5><p>既然使用了前后端分离的架构,不可避免的就是跨域访问的问题.前后端可能不在同个server上,即便是在同个server上,由于前后端分离,前后端对应的端口号也可能是不一样的,所以跨域访问是必须的.</p>\n<h5 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><p>服务端是基于Asp.Net Core开发的WebApi,支持cors非常方便,只需要引入Microsoft.AspNetCore.Cors,问题就很轻易的解决了.<br>在Startup.cs中ConfigureServices方法中添加Cors服务,在Configure方法中使用Cors服务</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddCors(options =&gt; options.AddPolicy(<span class=\"string\">&quot;Domain&quot;</span>, builder =&gt; builder.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin().AllowCredentials()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    app.UseCors(<span class=\"string\">&quot;Domain&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关于用户权限\"><a href=\"#关于用户权限\" class=\"headerlink\" title=\"关于用户权限\"></a>关于用户权限</h4><h5 id=\"问题原因-1\"><a href=\"#问题原因-1\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h5><p>在系统中涉及到不同的角色,它们之间的权限不一样,对应的菜单也就存在着差异.关于权限的部分,有着几种不同的解决方案,一种是在前端预设写死页面的权限设置,前端通过后台返回的角色信息,生成对应的菜单,另一种则是在后台动态配置权限,当用户登录时,根据角色信息,后端返回一个对应的权限表,前端通过权限表生成对应的菜单.</p>\n<h5 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><p>在本系统中,采用的是后一种解决方案,前端中存在完整的路由表,用户在登录后,获得相应的路由信息,根据路由信息去比对完整的路由表,生成当前用户可访问的页面,通过router.addRoutes动态挂载到router上.</p>\n<h4 id=\"关于前端\"><a href=\"#关于前端\" class=\"headerlink\" title=\"关于前端\"></a>关于前端</h4><p>系统的前端是基于<a href=\"https://github.com/PanJiaChen/vueAdmin-template\">vueAdmin-template</a>进行二次开发,修改了其关于用户权限的设置</p>\n<h4 id=\"关于服务端\"><a href=\"#关于服务端\" class=\"headerlink\" title=\"关于服务端\"></a>关于服务端</h4><p>系统的后端采用的是Asp.Net Core WebApi,MVC模式,架构分为BLL(业务层)-Dal(数据访问层),数据库访问是通过EF Core实现.使用EF Core Code Frist 创建数据库,使用Migrations完成对数据库的迁移.<a href=\"https://chcaty.github.io/2018/03/06/Net-Core-MVC-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/\">.Net Core MVC三层架构框架</a>里面架构进行了详细介绍.</p>\n<h4 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h4><p>系统中,登录成功后，服务端会返回一个 token（该token的是一个能唯一标示用户身份的一个key），之后我们将token存储在本地cookie之中，这样下次打开页面或者刷新页面的时候能记住用户的登录状态，不用再去登录页面重新登录了。</p>\n<h5 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h5><p>LoginControllers.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.IdentityModel.Tokens;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Claims;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IConfiguration _configuration;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginController</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">         _configuration = configuration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">RequestToken</span>(<span class=\"params\">[FromBody] TokenRequest request, <span class=\"built_in\">string</span> token, <span class=\"built_in\">int</span> expires_in</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> claims = <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">             <span class=\"keyword\">new</span> Claim(ClaimTypes.Name, request.Username)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[<span class=\"string\">&quot;SecurityKey&quot;</span>]));</span><br><span class=\"line\">        <span class=\"keyword\">var</span> creds = <span class=\"keyword\">new</span> SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">            * Claims (Payload)</span></span><br><span class=\"line\"><span class=\"comment\">            Claims 部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，下面节选一些字段:</span></span><br><span class=\"line\"><span class=\"comment\">            iss: The issuer of the token，token 是给谁的</span></span><br><span class=\"line\"><span class=\"comment\">            sub: The subject of the token，token 主题</span></span><br><span class=\"line\"><span class=\"comment\">            exp: Expiration Time。 token 过期时间，Unix 时间戳格式</span></span><br><span class=\"line\"><span class=\"comment\">            iat: Issued At。 token 创建时间， Unix 时间戳格式</span></span><br><span class=\"line\"><span class=\"comment\">            jti: JWT ID。针对当前 token 的唯一标识</span></span><br><span class=\"line\"><span class=\"comment\">            除了规定的字段外，可以包含其他任何 JSON 兼容的字段。</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tokens = <span class=\"keyword\">new</span> JwtSecurityToken(</span><br><span class=\"line\">            issuer: <span class=\"string\">&quot;yourdomain.com&quot;</span>,</span><br><span class=\"line\">            audience: <span class=\"string\">&quot;yourdomain.com&quot;</span>,</span><br><span class=\"line\">            claims: claims,</span><br><span class=\"line\">            expires: DateTime.Now.AddMinutes(<span class=\"number\">10</span>),</span><br><span class=\"line\">            signingCredentials: creds);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> token = <span class=\"keyword\">new</span> JwtSecurityTokenHandler().WriteToken(tokens);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TokenRequest</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Username &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Password &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>appsettings.json</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;SecurityKey&quot;</span>: <span class=\"string\">&quot;dd%88*377f6d&amp;f£$$£$FdddFF33fssDG^!3&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"GitHub地址\"><a href=\"#GitHub地址\" class=\"headerlink\" title=\"GitHub地址\"></a>GitHub地址</h4><p><a href=\"https://github.com/chcaty/IRS\">网络故障报修管理系统</a></p>\n","site":{"data":{}},"length":2916,"excerpt":"<h4 id=\"关于毕业设计的想法\"><a href=\"#关于毕业设计的想法\" class=\"headerlink\" title=\"关于毕业设计的想法\"></a>关于毕业设计的想法</h4><p>在毕业设计的题目,我是比较纠结的,有想过利用.Net Core和Google Optimization Tools去做一个智能调度排班系统的,但后来经过深入的了解,发现智能调度排班系统并没有那么容易实现.回忆大学生涯,学生网管这个工作其实还在给我带来了不少的回忆.于是就决定开发一个网络故障报修系统.</p>","more":"<h4 id=\"采用的架构\"><a href=\"#采用的架构\" class=\"headerlink\" title=\"采用的架构\"></a>采用的架构</h4><p>一直有开发一个前后端分离的系统的想法,刚好借这个机会去尝试一下,就决定采用前后端分离的开发模式.服务端采用Asp.Net Core WebApi,前端采用Vue+Router+Element ui+axios.</p>\n<h4 id=\"关于跨域\"><a href=\"#关于跨域\" class=\"headerlink\" title=\"关于跨域\"></a>关于跨域</h4><h5 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h5><p>既然使用了前后端分离的架构,不可避免的就是跨域访问的问题.前后端可能不在同个server上,即便是在同个server上,由于前后端分离,前后端对应的端口号也可能是不一样的,所以跨域访问是必须的.</p>\n<h5 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><p>服务端是基于Asp.Net Core开发的WebApi,支持cors非常方便,只需要引入Microsoft.AspNetCore.Cors,问题就很轻易的解决了.<br>在Startup.cs中ConfigureServices方法中添加Cors服务,在Configure方法中使用Cors服务</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddCors(options =&gt; options.AddPolicy(<span class=\"string\">&quot;Domain&quot;</span>, builder =&gt; builder.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin().AllowCredentials()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    app.UseCors(<span class=\"string\">&quot;Domain&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关于用户权限\"><a href=\"#关于用户权限\" class=\"headerlink\" title=\"关于用户权限\"></a>关于用户权限</h4><h5 id=\"问题原因-1\"><a href=\"#问题原因-1\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h5><p>在系统中涉及到不同的角色,它们之间的权限不一样,对应的菜单也就存在着差异.关于权限的部分,有着几种不同的解决方案,一种是在前端预设写死页面的权限设置,前端通过后台返回的角色信息,生成对应的菜单,另一种则是在后台动态配置权限,当用户登录时,根据角色信息,后端返回一个对应的权限表,前端通过权限表生成对应的菜单.</p>\n<h5 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><p>在本系统中,采用的是后一种解决方案,前端中存在完整的路由表,用户在登录后,获得相应的路由信息,根据路由信息去比对完整的路由表,生成当前用户可访问的页面,通过router.addRoutes动态挂载到router上.</p>\n<h4 id=\"关于前端\"><a href=\"#关于前端\" class=\"headerlink\" title=\"关于前端\"></a>关于前端</h4><p>系统的前端是基于<a href=\"https://github.com/PanJiaChen/vueAdmin-template\">vueAdmin-template</a>进行二次开发,修改了其关于用户权限的设置</p>\n<h4 id=\"关于服务端\"><a href=\"#关于服务端\" class=\"headerlink\" title=\"关于服务端\"></a>关于服务端</h4><p>系统的后端采用的是Asp.Net Core WebApi,MVC模式,架构分为BLL(业务层)-Dal(数据访问层),数据库访问是通过EF Core实现.使用EF Core Code Frist 创建数据库,使用Migrations完成对数据库的迁移.<a href=\"https://chcaty.github.io/2018/03/06/Net-Core-MVC-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/\">.Net Core MVC三层架构框架</a>里面架构进行了详细介绍.</p>\n<h4 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h4><p>系统中,登录成功后，服务端会返回一个 token（该token的是一个能唯一标示用户身份的一个key），之后我们将token存储在本地cookie之中，这样下次打开页面或者刷新页面的时候能记住用户的登录状态，不用再去登录页面重新登录了。</p>\n<h5 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h5><p>LoginControllers.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.IdentityModel.Tokens;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Claims;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IConfiguration _configuration;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginController</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">         _configuration = configuration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">RequestToken</span>(<span class=\"params\">[FromBody] TokenRequest request, <span class=\"built_in\">string</span> token, <span class=\"built_in\">int</span> expires_in</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> claims = <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">             <span class=\"keyword\">new</span> Claim(ClaimTypes.Name, request.Username)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[<span class=\"string\">&quot;SecurityKey&quot;</span>]));</span><br><span class=\"line\">        <span class=\"keyword\">var</span> creds = <span class=\"keyword\">new</span> SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">            * Claims (Payload)</span></span><br><span class=\"line\"><span class=\"comment\">            Claims 部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，下面节选一些字段:</span></span><br><span class=\"line\"><span class=\"comment\">            iss: The issuer of the token，token 是给谁的</span></span><br><span class=\"line\"><span class=\"comment\">            sub: The subject of the token，token 主题</span></span><br><span class=\"line\"><span class=\"comment\">            exp: Expiration Time。 token 过期时间，Unix 时间戳格式</span></span><br><span class=\"line\"><span class=\"comment\">            iat: Issued At。 token 创建时间， Unix 时间戳格式</span></span><br><span class=\"line\"><span class=\"comment\">            jti: JWT ID。针对当前 token 的唯一标识</span></span><br><span class=\"line\"><span class=\"comment\">            除了规定的字段外，可以包含其他任何 JSON 兼容的字段。</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tokens = <span class=\"keyword\">new</span> JwtSecurityToken(</span><br><span class=\"line\">            issuer: <span class=\"string\">&quot;yourdomain.com&quot;</span>,</span><br><span class=\"line\">            audience: <span class=\"string\">&quot;yourdomain.com&quot;</span>,</span><br><span class=\"line\">            claims: claims,</span><br><span class=\"line\">            expires: DateTime.Now.AddMinutes(<span class=\"number\">10</span>),</span><br><span class=\"line\">            signingCredentials: creds);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> token = <span class=\"keyword\">new</span> JwtSecurityTokenHandler().WriteToken(tokens);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TokenRequest</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Username &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Password &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>appsettings.json</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;SecurityKey&quot;</span>: <span class=\"string\">&quot;dd%88*377f6d&amp;f£$$£$FdddFF33fssDG^!3&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"GitHub地址\"><a href=\"#GitHub地址\" class=\"headerlink\" title=\"GitHub地址\"></a>GitHub地址</h4><p><a href=\"https://github.com/chcaty/IRS\">网络故障报修管理系统</a></p>"},{"title":"关于选择聚会地点的软件","date":"2019-03-17T13:59:59.000Z","_content":"#### 关于设计选择聚会地点软件的想法\n前几天,偶然听小伙伴提出这个想法,感觉很有意思就打算研究一下.也可以顺便练习一下.\n<!--more-->\n\n#### 第一版百度地图API+经纬度计算出中心点周边的地铁站\n* 先申请百度地图 API的KEY\n* 思路,获取输入的地铁站的经纬度,然后计算出多个地铁站的中心点的经纬度,获取附近最近的地铁站\n* 代码如下\nindex.html\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\" />\n    <style type=\"text/css\">\n        body, html{width: 100%;height: 100%;margin:0;font-family:\"微软雅黑\";font-size:14px;}\n        #l-map{height:400px;width:100%;}\n        #r-result{width:100%;}\n    </style>\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=你的ak\"></script>\n    <title>关键字输入</title>\n</head>\n<body>\n    <div id=\"l-map\"></div>\n    <div id=\"r-result\">请输入:<input type=\"text\" id=\"suggestId\" size=\"20\" value=\"\" style=\"width:150px;\" /></div>\n    <div id=\"searchResultPanel\" style=\"border:1px solid #C0C0C0;width:150px;height:auto; display:none;\"></div>\n    <button type=\"button\" id=\"calc\">计算中间点</button>\n    <table id=\"tblGrid\" style=\"table-layout:fixed\">\n        <tr>\n         <td width=\"250px\">地址</td>\n         <td width=\"150px\">经度</td>\n         <td width=\"150px\">纬度</td>\n        </tr>\n    </table>\n</body>\n</html>\n<script type=\"text/javascript\">\n    // 百度地图API功能\n    function G(id) {\n        return document.getElementById(id);\n    }\n \n    var map = new BMap.Map(\"l-map\"); \n    // 百度坐标系坐标(地图中需要使用这个)\n    var bPoints = new Array();\n    map.centerAndZoom(\"广州\",12);                   // 初始化地图,设置城市和地图级别。\n    map.enableScrollWheelZoom(true);\n \n    var ac = new BMap.Autocomplete(    //建立一个自动完成的对象\n        {\"input\" : \"suggestId\"\n        ,\"location\" : map\n    });\n \n    ac.addEventListener(\"onhighlight\", function(e) {  //鼠标放在下拉列表上的事件\n    var str = \"\";\n        var _value = e.fromitem.value;\n        var value = \"\";\n        if (e.fromitem.index > -1) {\n            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        }    \n        str = \"FromItem<br />index = \" + e.fromitem.index + \"<br />value = \" + value;\n        \n        value = \"\";\n        if (e.toitem.index > -1) {\n            _value = e.toitem.value;\n            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        }    \n        str += \"<br />ToItem<br />index = \" + e.toitem.index + \"<br />value = \" + value;\n        //alert(\"onhighlight\");\n        G(\"searchResultPanel\").innerHTML = str;\n    });\n \n    var myValue;\n    ac.addEventListener(\"onconfirm\", function(e) {    //鼠标点击下拉列表后的事件\n        var _value = e.item.value;\n        myValue = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        G(\"searchResultPanel\").innerHTML =\"onconfirm<br />index = \" + e.item.index + \"<br />myValue = \" + myValue;  \n        //alert(\"onconfirm\");      \n        setPlace();\n    });\n \n    function setPlace(){\n        //map.clearOverlays();    //清除地图上所有覆盖物\n        function showInfo(e) {\n            alert(e.point.lng+\",\"+e.point.lat);\n        }\n        function myFun(){\n            if(confirm('确认要将该地点纳入路线图吗？')) {\n                var current = local.getResults().getPoi(0);\n                console.log(current);\n                var point = {};\n                if (typeof(current) == \"object\" && current.title !=\"\") {\n                    // point.name = current.title;\n                    point.name = myValue;\n                } \n                var pp = current.point;    //获取第一个智能搜索的结果\n                console.log(pp);\n                point.lng = pp.lng;\n                point.lat = pp.lat;\n                console.log(point);\n                bPoints.push(point); // 添加到百度坐标数组 用于自动调整缩放级别\n \n                //如果选中了，可以考虑将此地址以及坐标保存起来。\n                var newRow = document.all(\"tblGrid\").insertRow();\n                //得到表的对象并插入一行，下面是插入了行以后，填充相应的列节点，如下面所示\n                var oCell = newRow.insertCell();//插入列的节点\n                oCell.innerHTML = point.name;//列里面填充的值，innerHtml值列内的所有元素    \n                oCell = newRow.insertCell();\n                oCell.innerHTML = point.lng; \n                oCell = newRow.insertCell();\n                oCell.innerHTML = point.lat;\n\n                map.centerAndZoom(pp, 18);\n                map.addOverlay(new BMap.Marker(pp));    //添加标注\n                //添加文本标注\n                var opts = {position:pp,offset:new BMap.Size(10,-30)};\n                var label = new BMap.Label(current.title, opts);\n                label.setStyle({\n                    color:\"red\",\n                    fontSize:\"12px\",\n                    height:\"20px\",\n                    lineheight:\"20px\",\n                    fontFamily:\"微软雅黑\"\n                });\n                map.addOverlay(label);\n                // map.addEventListener('click',showInfo);\n            }\n        }\n        var local = new BMap.LocalSearch(map, { //智能搜索\n          onSearchComplete: myFun\n        });\n        local.search(myValue);\n    }\n\n    // 根据点的数组自动调整缩放级别\n    function setZoom(bPoints) {\n        var view = map.getViewport(eval(bPoints));\n        var mapZoom = view.zoom;\n        var centerPoint = view.center;\n        map.centerAndZoom(centerPoint, mapZoom);\n    }\n\n    document.getElementById('calc').onclick = function () {  \n        var tab=document.getElementById(\"tblGrid\");\n        var rows=tab.rows;\n        var totallng =0,totallat=0;\n        for(var i=1;i<rows.length;i++)//遍历表格的行\n        { \n            var a =rows[i].cells[1].innerHTML;\n            totallng = Number(totallng) + Number(rows[i].cells[1].innerHTML);\n            totallat = Number(totallat) + Number(rows[i].cells[2].innerHTML);\n        }\n        var point = new BMap.Point(Number(totallng) / Number(Number(rows.length)-1),Number(totallat) / Number(Number(rows.length)-1));\n        var marker = new BMap.Marker(point);  // 创建标注\n\t\tmap.addOverlay(marker);              // 将标注添加到地图中\n\t\tmap.panTo(point);\n        var local = new BMap.LocalSearch(map, {\n            renderOptions:{map: map}\n        });\n        local.search(\"地铁站\");\n    }  \n\n    setTimeout(function () {\n        setZoom(bPoints);\n    }, 1000)\n</script>\n```\n\n#### 第二版 广州地铁API\n* 通过调用API接口获得全部站点数据\n 1. 接口\n```\nhttps://app.gzmtr.cn:7400//line/qryStages?callback=&_=\n```\n 2. 数据格式如下\n```json\n{\n    \"stateId\": 0,\n    \"data\": [\n        {\n            \"number\": 1,\n            \"lineRelateId\": \"001\",\n            \"lineNo\": \"1\",\n            \"lineCn\": \"一号线\",\n            \"lineEn\": \"Line 1\",\n            \"color\": \"edcf3dff\",\n            \"averageIntervalTime\": 450,\n            \"lastModifyTime\": 1482485159,\n            \"version\": 22646,\n            \"status\": 1,\n            \"lineOrder\": 1,\n            \"stations\": [\n                {\n                    \"lineNo\": \"1\",\n                    \"stationId\": 1,\n                    \"stationRelateId\": \"00101\",\n                    \"stageseq\": \"01\",\n                    \"nameCn\": \"西塱\",\n                    \"nameEn\": \"Xilang\"\n                },\n                {\n                    \"lineNo\": \"1\",\n                    \"stationId\": 3,\n                    \"stationRelateId\": \"00102\",\n                    \"stageseq\": \"02\",\n                    \"nameCn\": \"坑口\",\n                    \"nameEn\": \"Kengkou\"\n                }\n            ]\n        }\n    ]\n}\n```\n* 通过调用接口获得两个站点之间的通勤时间,费用\n 1. 接口地址\n```\nhttp://cs.gzmtr.com/base/doSearchPathLine.do?callback=&startStation=%25E4%25BD%2593%25E8%2582%25B2%25E4%25B8%25AD%25E5%25BF%2583&endStation=%25E9%25A6%2599%25E9%259B%25AA&startId=&endId=&_=\n// startStation为起始站点的两次uri编码\n// endStation为终点站点的两次uri编码\n```\n  2. 数据类型如下\n```json\n{\n    \"count\": 15,\n    \"spendTime\": \"52\",\n    \"lines\": [\n        {\n            \"lineName\": \"一号线\",\n            \"stationName\": \"体育中心\",\n            \"stationCode\": \"115\"\n        },\n        {\n            \"lineName\": \"三北线\",\n            \"stationName\": \"广州东站\",\n            \"stationCode\": \"318\"\n        },\n        {\n            \"lineName\": \"六号线\",\n            \"stationName\": \"燕塘\",\n            \"stationCode\": \"620\"\n        },\n        {\n            \"stationName\": \"香雪\",\n            \"stationCode\": \"632\"\n        }\n    ],\n    \"price\": 7,\n    \"stations\": [\n        {\n            \"endtime\": \"23:22\",\n            \"linecode\": \"1\",\n            \"starttime\": \"6:22\",\n            \"endstage\": \"广州东站\",\n            \"lineid\": \"1\",\n            \"startstage\": \"体育中心\",\n            \"sgk\": \"101\"\n        },\n        {\n            \"endtime\": \"23:32\",\n            \"linecode\": \"1\",\n            \"starttime\": \"6:12\",\n            \"endstage\": \"西朗\",\n            \"lineid\": \"1\",\n            \"startstage\": \"体育中心\",\n            \"sgk\": \"101\"\n        }\n    ]\n}\n```\n* 通过穷举输入站点与其他站点的计算,获取多个站点到某一站点的时间相近或是费用最近的","source":"_posts/关于选择聚会地点的软件.md","raw":"---\ntitle: 关于选择聚会地点的软件\ndate: 2019-03-17 21:59:59\ncategories: API\ntags:\n - API\n---\n#### 关于设计选择聚会地点软件的想法\n前几天,偶然听小伙伴提出这个想法,感觉很有意思就打算研究一下.也可以顺便练习一下.\n<!--more-->\n\n#### 第一版百度地图API+经纬度计算出中心点周边的地铁站\n* 先申请百度地图 API的KEY\n* 思路,获取输入的地铁站的经纬度,然后计算出多个地铁站的中心点的经纬度,获取附近最近的地铁站\n* 代码如下\nindex.html\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\" />\n    <style type=\"text/css\">\n        body, html{width: 100%;height: 100%;margin:0;font-family:\"微软雅黑\";font-size:14px;}\n        #l-map{height:400px;width:100%;}\n        #r-result{width:100%;}\n    </style>\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=你的ak\"></script>\n    <title>关键字输入</title>\n</head>\n<body>\n    <div id=\"l-map\"></div>\n    <div id=\"r-result\">请输入:<input type=\"text\" id=\"suggestId\" size=\"20\" value=\"\" style=\"width:150px;\" /></div>\n    <div id=\"searchResultPanel\" style=\"border:1px solid #C0C0C0;width:150px;height:auto; display:none;\"></div>\n    <button type=\"button\" id=\"calc\">计算中间点</button>\n    <table id=\"tblGrid\" style=\"table-layout:fixed\">\n        <tr>\n         <td width=\"250px\">地址</td>\n         <td width=\"150px\">经度</td>\n         <td width=\"150px\">纬度</td>\n        </tr>\n    </table>\n</body>\n</html>\n<script type=\"text/javascript\">\n    // 百度地图API功能\n    function G(id) {\n        return document.getElementById(id);\n    }\n \n    var map = new BMap.Map(\"l-map\"); \n    // 百度坐标系坐标(地图中需要使用这个)\n    var bPoints = new Array();\n    map.centerAndZoom(\"广州\",12);                   // 初始化地图,设置城市和地图级别。\n    map.enableScrollWheelZoom(true);\n \n    var ac = new BMap.Autocomplete(    //建立一个自动完成的对象\n        {\"input\" : \"suggestId\"\n        ,\"location\" : map\n    });\n \n    ac.addEventListener(\"onhighlight\", function(e) {  //鼠标放在下拉列表上的事件\n    var str = \"\";\n        var _value = e.fromitem.value;\n        var value = \"\";\n        if (e.fromitem.index > -1) {\n            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        }    \n        str = \"FromItem<br />index = \" + e.fromitem.index + \"<br />value = \" + value;\n        \n        value = \"\";\n        if (e.toitem.index > -1) {\n            _value = e.toitem.value;\n            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        }    \n        str += \"<br />ToItem<br />index = \" + e.toitem.index + \"<br />value = \" + value;\n        //alert(\"onhighlight\");\n        G(\"searchResultPanel\").innerHTML = str;\n    });\n \n    var myValue;\n    ac.addEventListener(\"onconfirm\", function(e) {    //鼠标点击下拉列表后的事件\n        var _value = e.item.value;\n        myValue = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        G(\"searchResultPanel\").innerHTML =\"onconfirm<br />index = \" + e.item.index + \"<br />myValue = \" + myValue;  \n        //alert(\"onconfirm\");      \n        setPlace();\n    });\n \n    function setPlace(){\n        //map.clearOverlays();    //清除地图上所有覆盖物\n        function showInfo(e) {\n            alert(e.point.lng+\",\"+e.point.lat);\n        }\n        function myFun(){\n            if(confirm('确认要将该地点纳入路线图吗？')) {\n                var current = local.getResults().getPoi(0);\n                console.log(current);\n                var point = {};\n                if (typeof(current) == \"object\" && current.title !=\"\") {\n                    // point.name = current.title;\n                    point.name = myValue;\n                } \n                var pp = current.point;    //获取第一个智能搜索的结果\n                console.log(pp);\n                point.lng = pp.lng;\n                point.lat = pp.lat;\n                console.log(point);\n                bPoints.push(point); // 添加到百度坐标数组 用于自动调整缩放级别\n \n                //如果选中了，可以考虑将此地址以及坐标保存起来。\n                var newRow = document.all(\"tblGrid\").insertRow();\n                //得到表的对象并插入一行，下面是插入了行以后，填充相应的列节点，如下面所示\n                var oCell = newRow.insertCell();//插入列的节点\n                oCell.innerHTML = point.name;//列里面填充的值，innerHtml值列内的所有元素    \n                oCell = newRow.insertCell();\n                oCell.innerHTML = point.lng; \n                oCell = newRow.insertCell();\n                oCell.innerHTML = point.lat;\n\n                map.centerAndZoom(pp, 18);\n                map.addOverlay(new BMap.Marker(pp));    //添加标注\n                //添加文本标注\n                var opts = {position:pp,offset:new BMap.Size(10,-30)};\n                var label = new BMap.Label(current.title, opts);\n                label.setStyle({\n                    color:\"red\",\n                    fontSize:\"12px\",\n                    height:\"20px\",\n                    lineheight:\"20px\",\n                    fontFamily:\"微软雅黑\"\n                });\n                map.addOverlay(label);\n                // map.addEventListener('click',showInfo);\n            }\n        }\n        var local = new BMap.LocalSearch(map, { //智能搜索\n          onSearchComplete: myFun\n        });\n        local.search(myValue);\n    }\n\n    // 根据点的数组自动调整缩放级别\n    function setZoom(bPoints) {\n        var view = map.getViewport(eval(bPoints));\n        var mapZoom = view.zoom;\n        var centerPoint = view.center;\n        map.centerAndZoom(centerPoint, mapZoom);\n    }\n\n    document.getElementById('calc').onclick = function () {  \n        var tab=document.getElementById(\"tblGrid\");\n        var rows=tab.rows;\n        var totallng =0,totallat=0;\n        for(var i=1;i<rows.length;i++)//遍历表格的行\n        { \n            var a =rows[i].cells[1].innerHTML;\n            totallng = Number(totallng) + Number(rows[i].cells[1].innerHTML);\n            totallat = Number(totallat) + Number(rows[i].cells[2].innerHTML);\n        }\n        var point = new BMap.Point(Number(totallng) / Number(Number(rows.length)-1),Number(totallat) / Number(Number(rows.length)-1));\n        var marker = new BMap.Marker(point);  // 创建标注\n\t\tmap.addOverlay(marker);              // 将标注添加到地图中\n\t\tmap.panTo(point);\n        var local = new BMap.LocalSearch(map, {\n            renderOptions:{map: map}\n        });\n        local.search(\"地铁站\");\n    }  \n\n    setTimeout(function () {\n        setZoom(bPoints);\n    }, 1000)\n</script>\n```\n\n#### 第二版 广州地铁API\n* 通过调用API接口获得全部站点数据\n 1. 接口\n```\nhttps://app.gzmtr.cn:7400//line/qryStages?callback=&_=\n```\n 2. 数据格式如下\n```json\n{\n    \"stateId\": 0,\n    \"data\": [\n        {\n            \"number\": 1,\n            \"lineRelateId\": \"001\",\n            \"lineNo\": \"1\",\n            \"lineCn\": \"一号线\",\n            \"lineEn\": \"Line 1\",\n            \"color\": \"edcf3dff\",\n            \"averageIntervalTime\": 450,\n            \"lastModifyTime\": 1482485159,\n            \"version\": 22646,\n            \"status\": 1,\n            \"lineOrder\": 1,\n            \"stations\": [\n                {\n                    \"lineNo\": \"1\",\n                    \"stationId\": 1,\n                    \"stationRelateId\": \"00101\",\n                    \"stageseq\": \"01\",\n                    \"nameCn\": \"西塱\",\n                    \"nameEn\": \"Xilang\"\n                },\n                {\n                    \"lineNo\": \"1\",\n                    \"stationId\": 3,\n                    \"stationRelateId\": \"00102\",\n                    \"stageseq\": \"02\",\n                    \"nameCn\": \"坑口\",\n                    \"nameEn\": \"Kengkou\"\n                }\n            ]\n        }\n    ]\n}\n```\n* 通过调用接口获得两个站点之间的通勤时间,费用\n 1. 接口地址\n```\nhttp://cs.gzmtr.com/base/doSearchPathLine.do?callback=&startStation=%25E4%25BD%2593%25E8%2582%25B2%25E4%25B8%25AD%25E5%25BF%2583&endStation=%25E9%25A6%2599%25E9%259B%25AA&startId=&endId=&_=\n// startStation为起始站点的两次uri编码\n// endStation为终点站点的两次uri编码\n```\n  2. 数据类型如下\n```json\n{\n    \"count\": 15,\n    \"spendTime\": \"52\",\n    \"lines\": [\n        {\n            \"lineName\": \"一号线\",\n            \"stationName\": \"体育中心\",\n            \"stationCode\": \"115\"\n        },\n        {\n            \"lineName\": \"三北线\",\n            \"stationName\": \"广州东站\",\n            \"stationCode\": \"318\"\n        },\n        {\n            \"lineName\": \"六号线\",\n            \"stationName\": \"燕塘\",\n            \"stationCode\": \"620\"\n        },\n        {\n            \"stationName\": \"香雪\",\n            \"stationCode\": \"632\"\n        }\n    ],\n    \"price\": 7,\n    \"stations\": [\n        {\n            \"endtime\": \"23:22\",\n            \"linecode\": \"1\",\n            \"starttime\": \"6:22\",\n            \"endstage\": \"广州东站\",\n            \"lineid\": \"1\",\n            \"startstage\": \"体育中心\",\n            \"sgk\": \"101\"\n        },\n        {\n            \"endtime\": \"23:32\",\n            \"linecode\": \"1\",\n            \"starttime\": \"6:12\",\n            \"endstage\": \"西朗\",\n            \"lineid\": \"1\",\n            \"startstage\": \"体育中心\",\n            \"sgk\": \"101\"\n        }\n    ]\n}\n```\n* 通过穷举输入站点与其他站点的计算,获取多个站点到某一站点的时间相近或是费用最近的","slug":"关于选择聚会地点的软件","published":1,"updated":"2021-03-30T03:24:16.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0s0050vcua7wlxfvkz","content":"<h4 id=\"关于设计选择聚会地点软件的想法\"><a href=\"#关于设计选择聚会地点软件的想法\" class=\"headerlink\" title=\"关于设计选择聚会地点软件的想法\"></a>关于设计选择聚会地点软件的想法</h4><p>前几天,偶然听小伙伴提出这个想法,感觉很有意思就打算研究一下.也可以顺便练习一下.</p>\n<span id=\"more\"></span>\n\n<h4 id=\"第一版百度地图API-经纬度计算出中心点周边的地铁站\"><a href=\"#第一版百度地图API-经纬度计算出中心点周边的地铁站\" class=\"headerlink\" title=\"第一版百度地图API+经纬度计算出中心点周边的地铁站\"></a>第一版百度地图API+经纬度计算出中心点周边的地铁站</h4><ul>\n<li>先申请百度地图 API的KEY</li>\n<li>思路,获取输入的地铁站的经纬度,然后计算出多个地铁站的中心点的经纬度,获取附近最近的地铁站</li>\n<li>代码如下<br>index.html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;initial-scale=1.0, user-scalable=no&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;<span class=\"attribute\">font-family</span>:<span class=\"string\">&quot;微软雅黑&quot;</span>;<span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;&#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#l-map</span>&#123;<span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;<span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;&#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#r-result</span>&#123;<span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;&#125;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=你的ak&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>关键字输入<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;l-map&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;r-result&quot;</span>&gt;</span>请输入:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;suggestId&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:150px;&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;searchResultPanel&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;border:1px solid #C0C0C0;width:150px;height:auto; display:none;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;calc&quot;</span>&gt;</span>计算中间点<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;tblGrid&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;table-layout:fixed&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;250px&quot;</span>&gt;</span>地址<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;150px&quot;</span>&gt;</span>经度<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;150px&quot;</span>&gt;</span>纬度<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 百度地图API功能</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">G</span>(<span class=\"params\">id</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(<span class=\"string\">&quot;l-map&quot;</span>); </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 百度坐标系坐标(地图中需要使用这个)</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> bPoints = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span></span><br><span class=\"line\"><span class=\"javascript\">    map.centerAndZoom(<span class=\"string\">&quot;广州&quot;</span>,<span class=\"number\">12</span>);                   <span class=\"comment\">// 初始化地图,设置城市和地图级别。</span></span></span><br><span class=\"line\"><span class=\"javascript\">    map.enableScrollWheelZoom(<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> ac = <span class=\"keyword\">new</span> BMap.Autocomplete(    <span class=\"comment\">//建立一个自动完成的对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &#123;<span class=\"string\">&quot;input&quot;</span> : <span class=\"string\">&quot;suggestId&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        ,<span class=\"string\">&quot;location&quot;</span> : map</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    ac.addEventListener(<span class=\"string\">&quot;onhighlight&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;  <span class=\"comment\">//鼠标放在下拉列表上的事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> _value = e.fromitem.value;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> value = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\">        if (e.fromitem.index &gt; -1) &#123;</span><br><span class=\"line\">            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\"><span class=\"javascript\">        str = <span class=\"string\">&quot;FromItem&lt;br /&gt;index = &quot;</span> + e.fromitem.index + <span class=\"string\">&quot;&lt;br /&gt;value = &quot;</span> + value;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"javascript\">        value = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\">        if (e.toitem.index &gt; -1) &#123;</span><br><span class=\"line\">            _value = e.toitem.value;</span><br><span class=\"line\">            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">        str += &quot;<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>ToItem<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>index = &quot; + e.toitem.index + &quot;<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>value = &quot; + value;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//alert(&quot;onhighlight&quot;);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        G(<span class=\"string\">&quot;searchResultPanel&quot;</span>).innerHTML = str;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> myValue;</span></span><br><span class=\"line\"><span class=\"javascript\">    ac.addEventListener(<span class=\"string\">&quot;onconfirm&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;    <span class=\"comment\">//鼠标点击下拉列表后的事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> _value = e.item.value;</span></span><br><span class=\"line\">        myValue = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span><br><span class=\"line\"><span class=\"javascript\">        G(<span class=\"string\">&quot;searchResultPanel&quot;</span>).innerHTML =<span class=\"string\">&quot;onconfirm&lt;br /&gt;index = &quot;</span> + e.item.index + <span class=\"string\">&quot;&lt;br /&gt;myValue = &quot;</span> + myValue;  </span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//alert(&quot;onconfirm&quot;);      </span></span></span><br><span class=\"line\">        setPlace();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPlace</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//map.clearOverlays();    //清除地图上所有覆盖物</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showInfo</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(e.point.lng+<span class=\"string\">&quot;,&quot;</span>+e.point.lat);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFun</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(confirm(<span class=\"string\">&#x27;确认要将该地点纳入路线图吗？&#x27;</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> current = local.getResults().getPoi(<span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(current);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> point = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(current) == <span class=\"string\">&quot;object&quot;</span> &amp;&amp; current.title !=<span class=\"string\">&quot;&quot;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"comment\">// point.name = current.title;</span></span></span><br><span class=\"line\">                    point.name = myValue;</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> pp = current.point;    <span class=\"comment\">//获取第一个智能搜索的结果</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(pp);</span></span><br><span class=\"line\">                point.lng = pp.lng;</span><br><span class=\"line\">                point.lat = pp.lat;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(point);</span></span><br><span class=\"line\"><span class=\"javascript\">                bPoints.push(point); <span class=\"comment\">// 添加到百度坐标数组 用于自动调整缩放级别</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//如果选中了，可以考虑将此地址以及坐标保存起来。</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> newRow = <span class=\"built_in\">document</span>.all(<span class=\"string\">&quot;tblGrid&quot;</span>).insertRow();</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//得到表的对象并插入一行，下面是插入了行以后，填充相应的列节点，如下面所示</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> oCell = newRow.insertCell();<span class=\"comment\">//插入列的节点</span></span></span><br><span class=\"line\"><span class=\"javascript\">                oCell.innerHTML = point.name;<span class=\"comment\">//列里面填充的值，innerHtml值列内的所有元素    </span></span></span><br><span class=\"line\">                oCell = newRow.insertCell();</span><br><span class=\"line\">                oCell.innerHTML = point.lng; </span><br><span class=\"line\">                oCell = newRow.insertCell();</span><br><span class=\"line\">                oCell.innerHTML = point.lat;</span><br><span class=\"line\"></span><br><span class=\"line\">                map.centerAndZoom(pp, 18);</span><br><span class=\"line\"><span class=\"javascript\">                map.addOverlay(<span class=\"keyword\">new</span> BMap.Marker(pp));    <span class=\"comment\">//添加标注</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//添加文本标注</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> opts = &#123;<span class=\"attr\">position</span>:pp,<span class=\"attr\">offset</span>:<span class=\"keyword\">new</span> BMap.Size(<span class=\"number\">10</span>,-<span class=\"number\">30</span>)&#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> label = <span class=\"keyword\">new</span> BMap.Label(current.title, opts);</span></span><br><span class=\"line\">                label.setStyle(&#123;</span><br><span class=\"line\"><span class=\"javascript\">                    color:<span class=\"string\">&quot;red&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    fontSize:<span class=\"string\">&quot;12px&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    height:<span class=\"string\">&quot;20px&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    lineheight:<span class=\"string\">&quot;20px&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    fontFamily:<span class=\"string\">&quot;微软雅黑&quot;</span></span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                map.addOverlay(label);</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// map.addEventListener(&#x27;click&#x27;,showInfo);</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> local = <span class=\"keyword\">new</span> BMap.LocalSearch(map, &#123; <span class=\"comment\">//智能搜索</span></span></span><br><span class=\"line\">          onSearchComplete: myFun</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        local.search(myValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 根据点的数组自动调整缩放级别</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setZoom</span>(<span class=\"params\">bPoints</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> view = map.getViewport(<span class=\"built_in\">eval</span>(bPoints));</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> mapZoom = view.zoom;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> centerPoint = view.center;</span></span><br><span class=\"line\">        map.centerAndZoom(centerPoint, mapZoom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;calc&#x27;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> tab=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;tblGrid&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> rows=tab.rows;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> totallng =<span class=\"number\">0</span>,totallat=<span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;rows.length;i++)<span class=\"comment\">//遍历表格的行</span></span></span><br><span class=\"line\">        &#123; </span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> a =rows[i].cells[<span class=\"number\">1</span>].innerHTML;</span></span><br><span class=\"line\"><span class=\"javascript\">            totallng = <span class=\"built_in\">Number</span>(totallng) + <span class=\"built_in\">Number</span>(rows[i].cells[<span class=\"number\">1</span>].innerHTML);</span></span><br><span class=\"line\"><span class=\"javascript\">            totallat = <span class=\"built_in\">Number</span>(totallat) + <span class=\"built_in\">Number</span>(rows[i].cells[<span class=\"number\">2</span>].innerHTML);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> BMap.Point(<span class=\"built_in\">Number</span>(totallng) / <span class=\"built_in\">Number</span>(<span class=\"built_in\">Number</span>(rows.length)-<span class=\"number\">1</span>),<span class=\"built_in\">Number</span>(totallat) / <span class=\"built_in\">Number</span>(<span class=\"built_in\">Number</span>(rows.length)-<span class=\"number\">1</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> marker = <span class=\"keyword\">new</span> BMap.Marker(point);  <span class=\"comment\">// 创建标注</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\tmap.addOverlay(marker);              <span class=\"comment\">// 将标注添加到地图中</span></span></span><br><span class=\"line\">\t\tmap.panTo(point);</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> local = <span class=\"keyword\">new</span> BMap.LocalSearch(map, &#123;</span></span><br><span class=\"line\">            renderOptions:&#123;map: map&#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"><span class=\"javascript\">        local.search(<span class=\"string\">&quot;地铁站&quot;</span>);</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        setZoom(bPoints);</span><br><span class=\"line\">    &#125;, 1000)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"第二版-广州地铁API\"><a href=\"#第二版-广州地铁API\" class=\"headerlink\" title=\"第二版 广州地铁API\"></a>第二版 广州地铁API</h4><ul>\n<li>通过调用API接口获得全部站点数据</li>\n</ul>\n<ol>\n<li>接口<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;app.gzmtr.cn:7400&#x2F;&#x2F;line&#x2F;qryStages?callback&#x3D;&amp;_&#x3D;</span><br></pre></td></tr></table></figure></li>\n<li>数据格式如下<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;stateId&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;data&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;number&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineRelateId&quot;</span>: <span class=\"string\">&quot;001&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineNo&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineCn&quot;</span>: <span class=\"string\">&quot;一号线&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineEn&quot;</span>: <span class=\"string\">&quot;Line 1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;color&quot;</span>: <span class=\"string\">&quot;edcf3dff&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;averageIntervalTime&quot;</span>: <span class=\"number\">450</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lastModifyTime&quot;</span>: <span class=\"number\">1482485159</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;version&quot;</span>: <span class=\"number\">22646</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;status&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineOrder&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stations&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;lineNo&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stationId&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stationRelateId&quot;</span>: <span class=\"string\">&quot;00101&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stageseq&quot;</span>: <span class=\"string\">&quot;01&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;nameCn&quot;</span>: <span class=\"string\">&quot;西塱&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;nameEn&quot;</span>: <span class=\"string\">&quot;Xilang&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;lineNo&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stationId&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stationRelateId&quot;</span>: <span class=\"string\">&quot;00102&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stageseq&quot;</span>: <span class=\"string\">&quot;02&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;nameCn&quot;</span>: <span class=\"string\">&quot;坑口&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;nameEn&quot;</span>: <span class=\"string\">&quot;Kengkou&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>通过调用接口获得两个站点之间的通勤时间,费用</li>\n</ul>\n<ol>\n<li>接口地址<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;cs.gzmtr.com&#x2F;base&#x2F;doSearchPathLine.do?callback&#x3D;&amp;startStation&#x3D;%25E4%25BD%2593%25E8%2582%25B2%25E4%25B8%25AD%25E5%25BF%2583&amp;endStation&#x3D;%25E9%25A6%2599%25E9%259B%25AA&amp;startId&#x3D;&amp;endId&#x3D;&amp;_&#x3D;</span><br><span class=\"line\">&#x2F;&#x2F; startStation为起始站点的两次uri编码</span><br><span class=\"line\">&#x2F;&#x2F; endStation为终点站点的两次uri编码</span><br></pre></td></tr></table></figure></li>\n<li>数据类型如下<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;count&quot;</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;spendTime&quot;</span>: <span class=\"string\">&quot;52&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;lines&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineName&quot;</span>: <span class=\"string\">&quot;一号线&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationName&quot;</span>: <span class=\"string\">&quot;体育中心&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationCode&quot;</span>: <span class=\"string\">&quot;115&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineName&quot;</span>: <span class=\"string\">&quot;三北线&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationName&quot;</span>: <span class=\"string\">&quot;广州东站&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationCode&quot;</span>: <span class=\"string\">&quot;318&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineName&quot;</span>: <span class=\"string\">&quot;六号线&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationName&quot;</span>: <span class=\"string\">&quot;燕塘&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationCode&quot;</span>: <span class=\"string\">&quot;620&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationName&quot;</span>: <span class=\"string\">&quot;香雪&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationCode&quot;</span>: <span class=\"string\">&quot;632&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;price&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;stations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;endtime&quot;</span>: <span class=\"string\">&quot;23:22&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;linecode&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;starttime&quot;</span>: <span class=\"string\">&quot;6:22&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;endstage&quot;</span>: <span class=\"string\">&quot;广州东站&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineid&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;startstage&quot;</span>: <span class=\"string\">&quot;体育中心&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;sgk&quot;</span>: <span class=\"string\">&quot;101&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;endtime&quot;</span>: <span class=\"string\">&quot;23:32&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;linecode&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;starttime&quot;</span>: <span class=\"string\">&quot;6:12&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;endstage&quot;</span>: <span class=\"string\">&quot;西朗&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineid&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;startstage&quot;</span>: <span class=\"string\">&quot;体育中心&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;sgk&quot;</span>: <span class=\"string\">&quot;101&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>通过穷举输入站点与其他站点的计算,获取多个站点到某一站点的时间相近或是费用最近的</li>\n</ul>\n","site":{"data":{}},"length":8369,"excerpt":"<h4 id=\"关于设计选择聚会地点软件的想法\"><a href=\"#关于设计选择聚会地点软件的想法\" class=\"headerlink\" title=\"关于设计选择聚会地点软件的想法\"></a>关于设计选择聚会地点软件的想法</h4><p>前几天,偶然听小伙伴提出这个想法,感觉很有意思就打算研究一下.也可以顺便练习一下.</p>","more":"<h4 id=\"第一版百度地图API-经纬度计算出中心点周边的地铁站\"><a href=\"#第一版百度地图API-经纬度计算出中心点周边的地铁站\" class=\"headerlink\" title=\"第一版百度地图API+经纬度计算出中心点周边的地铁站\"></a>第一版百度地图API+经纬度计算出中心点周边的地铁站</h4><ul>\n<li>先申请百度地图 API的KEY</li>\n<li>思路,获取输入的地铁站的经纬度,然后计算出多个地铁站的中心点的经纬度,获取附近最近的地铁站</li>\n<li>代码如下<br>index.html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;initial-scale=1.0, user-scalable=no&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;<span class=\"attribute\">font-family</span>:<span class=\"string\">&quot;微软雅黑&quot;</span>;<span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;&#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#l-map</span>&#123;<span class=\"attribute\">height</span>:<span class=\"number\">400px</span>;<span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;&#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-id\">#r-result</span>&#123;<span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;&#125;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=你的ak&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>关键字输入<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;l-map&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;r-result&quot;</span>&gt;</span>请输入:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;suggestId&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:150px;&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;searchResultPanel&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;border:1px solid #C0C0C0;width:150px;height:auto; display:none;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;calc&quot;</span>&gt;</span>计算中间点<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;tblGrid&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;table-layout:fixed&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;250px&quot;</span>&gt;</span>地址<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;150px&quot;</span>&gt;</span>经度<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;150px&quot;</span>&gt;</span>纬度<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 百度地图API功能</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">G</span>(<span class=\"params\">id</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(<span class=\"string\">&quot;l-map&quot;</span>); </span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 百度坐标系坐标(地图中需要使用这个)</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> bPoints = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span></span><br><span class=\"line\"><span class=\"javascript\">    map.centerAndZoom(<span class=\"string\">&quot;广州&quot;</span>,<span class=\"number\">12</span>);                   <span class=\"comment\">// 初始化地图,设置城市和地图级别。</span></span></span><br><span class=\"line\"><span class=\"javascript\">    map.enableScrollWheelZoom(<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> ac = <span class=\"keyword\">new</span> BMap.Autocomplete(    <span class=\"comment\">//建立一个自动完成的对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &#123;<span class=\"string\">&quot;input&quot;</span> : <span class=\"string\">&quot;suggestId&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        ,<span class=\"string\">&quot;location&quot;</span> : map</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    ac.addEventListener(<span class=\"string\">&quot;onhighlight&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;  <span class=\"comment\">//鼠标放在下拉列表上的事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> str = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> _value = e.fromitem.value;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> value = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\">        if (e.fromitem.index &gt; -1) &#123;</span><br><span class=\"line\">            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\"><span class=\"javascript\">        str = <span class=\"string\">&quot;FromItem&lt;br /&gt;index = &quot;</span> + e.fromitem.index + <span class=\"string\">&quot;&lt;br /&gt;value = &quot;</span> + value;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"javascript\">        value = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\">        if (e.toitem.index &gt; -1) &#123;</span><br><span class=\"line\">            _value = e.toitem.value;</span><br><span class=\"line\">            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">        str += &quot;<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>ToItem<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>index = &quot; + e.toitem.index + &quot;<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>value = &quot; + value;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//alert(&quot;onhighlight&quot;);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        G(<span class=\"string\">&quot;searchResultPanel&quot;</span>).innerHTML = str;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> myValue;</span></span><br><span class=\"line\"><span class=\"javascript\">    ac.addEventListener(<span class=\"string\">&quot;onconfirm&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;    <span class=\"comment\">//鼠标点击下拉列表后的事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> _value = e.item.value;</span></span><br><span class=\"line\">        myValue = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span><br><span class=\"line\"><span class=\"javascript\">        G(<span class=\"string\">&quot;searchResultPanel&quot;</span>).innerHTML =<span class=\"string\">&quot;onconfirm&lt;br /&gt;index = &quot;</span> + e.item.index + <span class=\"string\">&quot;&lt;br /&gt;myValue = &quot;</span> + myValue;  </span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//alert(&quot;onconfirm&quot;);      </span></span></span><br><span class=\"line\">        setPlace();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPlace</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//map.clearOverlays();    //清除地图上所有覆盖物</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showInfo</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(e.point.lng+<span class=\"string\">&quot;,&quot;</span>+e.point.lat);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFun</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(confirm(<span class=\"string\">&#x27;确认要将该地点纳入路线图吗？&#x27;</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> current = local.getResults().getPoi(<span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(current);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> point = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(current) == <span class=\"string\">&quot;object&quot;</span> &amp;&amp; current.title !=<span class=\"string\">&quot;&quot;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"comment\">// point.name = current.title;</span></span></span><br><span class=\"line\">                    point.name = myValue;</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> pp = current.point;    <span class=\"comment\">//获取第一个智能搜索的结果</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(pp);</span></span><br><span class=\"line\">                point.lng = pp.lng;</span><br><span class=\"line\">                point.lat = pp.lat;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(point);</span></span><br><span class=\"line\"><span class=\"javascript\">                bPoints.push(point); <span class=\"comment\">// 添加到百度坐标数组 用于自动调整缩放级别</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//如果选中了，可以考虑将此地址以及坐标保存起来。</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> newRow = <span class=\"built_in\">document</span>.all(<span class=\"string\">&quot;tblGrid&quot;</span>).insertRow();</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//得到表的对象并插入一行，下面是插入了行以后，填充相应的列节点，如下面所示</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> oCell = newRow.insertCell();<span class=\"comment\">//插入列的节点</span></span></span><br><span class=\"line\"><span class=\"javascript\">                oCell.innerHTML = point.name;<span class=\"comment\">//列里面填充的值，innerHtml值列内的所有元素    </span></span></span><br><span class=\"line\">                oCell = newRow.insertCell();</span><br><span class=\"line\">                oCell.innerHTML = point.lng; </span><br><span class=\"line\">                oCell = newRow.insertCell();</span><br><span class=\"line\">                oCell.innerHTML = point.lat;</span><br><span class=\"line\"></span><br><span class=\"line\">                map.centerAndZoom(pp, 18);</span><br><span class=\"line\"><span class=\"javascript\">                map.addOverlay(<span class=\"keyword\">new</span> BMap.Marker(pp));    <span class=\"comment\">//添加标注</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//添加文本标注</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> opts = &#123;<span class=\"attr\">position</span>:pp,<span class=\"attr\">offset</span>:<span class=\"keyword\">new</span> BMap.Size(<span class=\"number\">10</span>,-<span class=\"number\">30</span>)&#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> label = <span class=\"keyword\">new</span> BMap.Label(current.title, opts);</span></span><br><span class=\"line\">                label.setStyle(&#123;</span><br><span class=\"line\"><span class=\"javascript\">                    color:<span class=\"string\">&quot;red&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    fontSize:<span class=\"string\">&quot;12px&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    height:<span class=\"string\">&quot;20px&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    lineheight:<span class=\"string\">&quot;20px&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    fontFamily:<span class=\"string\">&quot;微软雅黑&quot;</span></span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                map.addOverlay(label);</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// map.addEventListener(&#x27;click&#x27;,showInfo);</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> local = <span class=\"keyword\">new</span> BMap.LocalSearch(map, &#123; <span class=\"comment\">//智能搜索</span></span></span><br><span class=\"line\">          onSearchComplete: myFun</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        local.search(myValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 根据点的数组自动调整缩放级别</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setZoom</span>(<span class=\"params\">bPoints</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> view = map.getViewport(<span class=\"built_in\">eval</span>(bPoints));</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> mapZoom = view.zoom;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> centerPoint = view.center;</span></span><br><span class=\"line\">        map.centerAndZoom(centerPoint, mapZoom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;calc&#x27;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> tab=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;tblGrid&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> rows=tab.rows;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> totallng =<span class=\"number\">0</span>,totallat=<span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;rows.length;i++)<span class=\"comment\">//遍历表格的行</span></span></span><br><span class=\"line\">        &#123; </span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> a =rows[i].cells[<span class=\"number\">1</span>].innerHTML;</span></span><br><span class=\"line\"><span class=\"javascript\">            totallng = <span class=\"built_in\">Number</span>(totallng) + <span class=\"built_in\">Number</span>(rows[i].cells[<span class=\"number\">1</span>].innerHTML);</span></span><br><span class=\"line\"><span class=\"javascript\">            totallat = <span class=\"built_in\">Number</span>(totallat) + <span class=\"built_in\">Number</span>(rows[i].cells[<span class=\"number\">2</span>].innerHTML);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> BMap.Point(<span class=\"built_in\">Number</span>(totallng) / <span class=\"built_in\">Number</span>(<span class=\"built_in\">Number</span>(rows.length)-<span class=\"number\">1</span>),<span class=\"built_in\">Number</span>(totallat) / <span class=\"built_in\">Number</span>(<span class=\"built_in\">Number</span>(rows.length)-<span class=\"number\">1</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> marker = <span class=\"keyword\">new</span> BMap.Marker(point);  <span class=\"comment\">// 创建标注</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\tmap.addOverlay(marker);              <span class=\"comment\">// 将标注添加到地图中</span></span></span><br><span class=\"line\">\t\tmap.panTo(point);</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> local = <span class=\"keyword\">new</span> BMap.LocalSearch(map, &#123;</span></span><br><span class=\"line\">            renderOptions:&#123;map: map&#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"><span class=\"javascript\">        local.search(<span class=\"string\">&quot;地铁站&quot;</span>);</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">        setZoom(bPoints);</span><br><span class=\"line\">    &#125;, 1000)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"第二版-广州地铁API\"><a href=\"#第二版-广州地铁API\" class=\"headerlink\" title=\"第二版 广州地铁API\"></a>第二版 广州地铁API</h4><ul>\n<li>通过调用API接口获得全部站点数据</li>\n</ul>\n<ol>\n<li>接口<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;app.gzmtr.cn:7400&#x2F;&#x2F;line&#x2F;qryStages?callback&#x3D;&amp;_&#x3D;</span><br></pre></td></tr></table></figure></li>\n<li>数据格式如下<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;stateId&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;data&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;number&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineRelateId&quot;</span>: <span class=\"string\">&quot;001&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineNo&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineCn&quot;</span>: <span class=\"string\">&quot;一号线&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineEn&quot;</span>: <span class=\"string\">&quot;Line 1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;color&quot;</span>: <span class=\"string\">&quot;edcf3dff&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;averageIntervalTime&quot;</span>: <span class=\"number\">450</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lastModifyTime&quot;</span>: <span class=\"number\">1482485159</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;version&quot;</span>: <span class=\"number\">22646</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;status&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineOrder&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stations&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;lineNo&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stationId&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stationRelateId&quot;</span>: <span class=\"string\">&quot;00101&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stageseq&quot;</span>: <span class=\"string\">&quot;01&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;nameCn&quot;</span>: <span class=\"string\">&quot;西塱&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;nameEn&quot;</span>: <span class=\"string\">&quot;Xilang&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;lineNo&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stationId&quot;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stationRelateId&quot;</span>: <span class=\"string\">&quot;00102&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;stageseq&quot;</span>: <span class=\"string\">&quot;02&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;nameCn&quot;</span>: <span class=\"string\">&quot;坑口&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;nameEn&quot;</span>: <span class=\"string\">&quot;Kengkou&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>通过调用接口获得两个站点之间的通勤时间,费用</li>\n</ul>\n<ol>\n<li>接口地址<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;cs.gzmtr.com&#x2F;base&#x2F;doSearchPathLine.do?callback&#x3D;&amp;startStation&#x3D;%25E4%25BD%2593%25E8%2582%25B2%25E4%25B8%25AD%25E5%25BF%2583&amp;endStation&#x3D;%25E9%25A6%2599%25E9%259B%25AA&amp;startId&#x3D;&amp;endId&#x3D;&amp;_&#x3D;</span><br><span class=\"line\">&#x2F;&#x2F; startStation为起始站点的两次uri编码</span><br><span class=\"line\">&#x2F;&#x2F; endStation为终点站点的两次uri编码</span><br></pre></td></tr></table></figure></li>\n<li>数据类型如下<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;count&quot;</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;spendTime&quot;</span>: <span class=\"string\">&quot;52&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;lines&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineName&quot;</span>: <span class=\"string\">&quot;一号线&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationName&quot;</span>: <span class=\"string\">&quot;体育中心&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationCode&quot;</span>: <span class=\"string\">&quot;115&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineName&quot;</span>: <span class=\"string\">&quot;三北线&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationName&quot;</span>: <span class=\"string\">&quot;广州东站&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationCode&quot;</span>: <span class=\"string\">&quot;318&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineName&quot;</span>: <span class=\"string\">&quot;六号线&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationName&quot;</span>: <span class=\"string\">&quot;燕塘&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationCode&quot;</span>: <span class=\"string\">&quot;620&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationName&quot;</span>: <span class=\"string\">&quot;香雪&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;stationCode&quot;</span>: <span class=\"string\">&quot;632&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;price&quot;</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;stations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;endtime&quot;</span>: <span class=\"string\">&quot;23:22&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;linecode&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;starttime&quot;</span>: <span class=\"string\">&quot;6:22&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;endstage&quot;</span>: <span class=\"string\">&quot;广州东站&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineid&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;startstage&quot;</span>: <span class=\"string\">&quot;体育中心&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;sgk&quot;</span>: <span class=\"string\">&quot;101&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;endtime&quot;</span>: <span class=\"string\">&quot;23:32&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;linecode&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;starttime&quot;</span>: <span class=\"string\">&quot;6:12&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;endstage&quot;</span>: <span class=\"string\">&quot;西朗&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;lineid&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;startstage&quot;</span>: <span class=\"string\">&quot;体育中心&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;sgk&quot;</span>: <span class=\"string\">&quot;101&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>通过穷举输入站点与其他站点的计算,获取多个站点到某一站点的时间相近或是费用最近的</li>\n</ul>"},{"title":"去当你想当的任何人吧 : 寻找自我的魔法","date":"2020-03-10T02:44:59.000Z","_content":"\n#### 第一部分 我们都需要勇气\n\n一个人要是没有勇气,就永远无法意识到自己的能力到底有多大.一个人要是没有勇气,就永远无法挖掘出这渴望被认识的世界的丰富多彩.一个人要是没有勇气,他的人生就注定是渺小的--或许要比他所期望的还要渺小很多.\n\n虽然不同的人可能会走出截然不同的创意生活之路,并得到相去甚远的结果,但我能向大家保证:创意生活意味着拥有一种放大的人生,这是一种更广博、更欢愉、更有跨度且更有乐趣的人生.坚持不懈、持续不断地将体内埋藏着的宝藏挖掘出来,这样的生活方式本身就是一门艺术.\n\n亲爱的恐惧:我要和创意一起开启公路旅行了,我知道你会与我们同行,因为这是你的一贯作风.你认为,你在我的生命中担负着重要的职责,而且你对自己的职责一丝不苟.这些我都知道,显然,你的职责就是在我即将着手有趣的任务时给我带来巨大的恐惧,容我说一句,\"你可真是尽职尽责呀\".所以,如果你必须尽责的话,那就尽管继续做你的工作吧.但在公路旅行的途中,我也会做好我的工作,那就是全力以赴、专心致志.而且,创意也会做好它的本职工作,那就是给我提供源源不断的刺激和灵感.汽车里的空间足够容纳我们仨的,所以,请不要拘谨,同时也请你理解,在旅途中,只有我和创意才能够做决策.你是这个家庭中的一员,我明白这一点,也会尊重这个事实.因此,我绝不会把你排除在我们的任何活动之外,即便如此,我们也绝不会听取你的意见.你有你的一席之地,你也可以发表你的见解,但你没有投票表决的权力.你不能碰公路地图,不能建议我们绕路,也不能调节车内的温度.老兄,你甚至连收音机都不能碰.我亲爱且熟悉的老兄啊,最重要的是,你是绝对不能开车的.\n\n如果你不学会与恐惧并肩旅行,那么你就永远无法到达任何有趣的地方或尝试任何有趣的事情.\n\n#### 第二部分 创意大魔法\n\n创意会通过你的生理和情绪放射出常见的灵感信号(比如.双臂的凉意、后颈的毛发立起的感觉、胃部翻腾、大脑嗡嗡作响,以及坠入爱河或痴迷的感觉),它还会在路上布下种种巧合和征兆,好让你保持强烈的兴趣.你会意识到,各种各样的标志都将你引向这个创意.这个创意会让你在半夜醒来,也会让你在日常生活中为此分心.\n\n你既不是灵感的奴隶也不是它的主人,而是扮演着\"合作伙伴\"这个更有趣的角色.你用该与灵感携手共事,实现既令人兴奋又有意义的目标;你可以一辈子都去做特别酷的事情,以此度过漫长的一生;凭借你的梦想不一定能谋生,但你将认识到谋生并不是梦想的意义所在,待人生走到尽头的时候,你可以感谢创意保佑你度过了神奇、有趣、激情满满的一生.\n\n你看,无论有没有得到神助,我都会将工作进行到底.如果你想拥有完整的创意生活,那么这就是你的必经之路.我持之以恒地工作着,并且永远不忘记对这个过程表达我的感恩.无论我有没有受到神力的眷顾,能有幸接触到创意,我已心存感恩.\n\n#### 第三部分 我的人生我做主\n\n想要拥有创意生活,你不需要经过任何人的准许.\n\n我和其他人一样,都是上帝之子.我是宇宙的一个组成部分,我拥有信任我、与我一起并肩努力的隐形灵魂导师.我存在于世上,这就是我有权生活在世上的铁证.我有权拥有自己的声音和观点,我有权与创意合作.我肩负着表达艺术的使命,所以,别再束缚我了.\n\n追求独创性往往让人感觉是刻意的行为,但真实性所带来的静默却有着震撼人心的效果,每次都能让我心潮澎湃.所以,尽情地说出你的心声吧,全心全意地表达吧.将你想要分享的东西与大家分享吧.相信我,如果你表达的内容足够真实,就一定会让人感到新颖别致.\n\n抓住你的不安和恐惧,倒提着它们的脚脖子,把那种\"只有在具备某些条件(并且花费了一定钱财)后才能进行创作\"的陈旧想法甩掉吧.我要告诉你,只要你活在这个世界上,你就已经具备了创作的资质.\n\n\"一切都要靠自己\"--你越早接受这个理念,你就会越早受益.\n\n若要拥有更富创意的生活,你就必须停止抱怨,理由如下:\n\n    1. 抱怨找人厌烦\n    2. 创作有难度是理所应当的.如果创作压根没有困难、人人都能做的话,也就谈不上什么独特和趣味了\n    3. 没有谁会真心听取他人的抱怨,因为每个人都陷在自己的烦恼之中\n    4. 也是最重要的一点:你的抱怨会把灵感吓跑.\n\n#### 第四部分 坚毅,再坚毅\n\n只要坚持练习,就能在你从事的领域内获得进步,这是生活中一条简单又慷慨的定律.比如说:如果我在20多岁时每天都练习打篮球、制作生面团或是学习汽车维修,那么现在的我估计已经成为投球、制作面点或是修车的行家里手了.\n\n如果你能在任何领域孜孜不倦地耕耘10年,你便足以成为一名专家.\n\n\"任何事情都偶有糟糕的一面.\"而你必须选择解除哪种阴暗面.因此,我们的问题并不是\"你对什么感兴趣\",而是\"你的兴趣是否足以支撑你忍受其中最令人讨厌的部分\".\n\n我们必须明白,对完美主义的追求只是一种对时间的靡费,因为完美是不存在的.无论你花了多少时间试着将事情做到完美,总有人能从中挑出毛病.总有一天,你要完成你的作品,然后不假思索地把作品推给大众,就算是为了让自己用愉悦且坚定的心态继续完成任务,也是值得的.\n\n无论结果是成是败,你都要将心中的想法表达出来.无论最终的产物(也就是你的纪念品)是垃圾还是珍宝,无论评论家对你是否认可,无论人们是否理解你的作品,你都要把心里的想法表达出来.你所表达的内容不必无懈可击,你不必成为柏拉图那样的大师.你表达的创意只是一种直觉、一次尝试、一个无解之谜而已.\n\n大多数人都在为自己的事情做打算,他们没有时间去考虑你在做什么或是你做得怎样,因为它们都忙着自己的事情呢.你或许会在短时间内吸引他人的注意(比如当你的人生大放异彩、一败涂地或是经历大起大落的时候).但是,这种关注没过多久就会重新回到老地方,也就是人们仍会关注自己的事以及他们自身.\n\n由于正确的时机是无法预测的,因此我们必须把机遇最大化.要好好把握机会,不懈地为自己加油鼓劲,一次次地让自己不断往前冲......\n","source":"_posts/去当你想当的任何人吧-寻找自我的魔法.md","raw":"---\ntitle: '去当你想当的任何人吧 : 寻找自我的魔法'\ndate: 2020-03-10 10:44:59\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 自我\n---\n\n#### 第一部分 我们都需要勇气\n\n一个人要是没有勇气,就永远无法意识到自己的能力到底有多大.一个人要是没有勇气,就永远无法挖掘出这渴望被认识的世界的丰富多彩.一个人要是没有勇气,他的人生就注定是渺小的--或许要比他所期望的还要渺小很多.\n\n虽然不同的人可能会走出截然不同的创意生活之路,并得到相去甚远的结果,但我能向大家保证:创意生活意味着拥有一种放大的人生,这是一种更广博、更欢愉、更有跨度且更有乐趣的人生.坚持不懈、持续不断地将体内埋藏着的宝藏挖掘出来,这样的生活方式本身就是一门艺术.\n\n亲爱的恐惧:我要和创意一起开启公路旅行了,我知道你会与我们同行,因为这是你的一贯作风.你认为,你在我的生命中担负着重要的职责,而且你对自己的职责一丝不苟.这些我都知道,显然,你的职责就是在我即将着手有趣的任务时给我带来巨大的恐惧,容我说一句,\"你可真是尽职尽责呀\".所以,如果你必须尽责的话,那就尽管继续做你的工作吧.但在公路旅行的途中,我也会做好我的工作,那就是全力以赴、专心致志.而且,创意也会做好它的本职工作,那就是给我提供源源不断的刺激和灵感.汽车里的空间足够容纳我们仨的,所以,请不要拘谨,同时也请你理解,在旅途中,只有我和创意才能够做决策.你是这个家庭中的一员,我明白这一点,也会尊重这个事实.因此,我绝不会把你排除在我们的任何活动之外,即便如此,我们也绝不会听取你的意见.你有你的一席之地,你也可以发表你的见解,但你没有投票表决的权力.你不能碰公路地图,不能建议我们绕路,也不能调节车内的温度.老兄,你甚至连收音机都不能碰.我亲爱且熟悉的老兄啊,最重要的是,你是绝对不能开车的.\n\n如果你不学会与恐惧并肩旅行,那么你就永远无法到达任何有趣的地方或尝试任何有趣的事情.\n\n#### 第二部分 创意大魔法\n\n创意会通过你的生理和情绪放射出常见的灵感信号(比如.双臂的凉意、后颈的毛发立起的感觉、胃部翻腾、大脑嗡嗡作响,以及坠入爱河或痴迷的感觉),它还会在路上布下种种巧合和征兆,好让你保持强烈的兴趣.你会意识到,各种各样的标志都将你引向这个创意.这个创意会让你在半夜醒来,也会让你在日常生活中为此分心.\n\n你既不是灵感的奴隶也不是它的主人,而是扮演着\"合作伙伴\"这个更有趣的角色.你用该与灵感携手共事,实现既令人兴奋又有意义的目标;你可以一辈子都去做特别酷的事情,以此度过漫长的一生;凭借你的梦想不一定能谋生,但你将认识到谋生并不是梦想的意义所在,待人生走到尽头的时候,你可以感谢创意保佑你度过了神奇、有趣、激情满满的一生.\n\n你看,无论有没有得到神助,我都会将工作进行到底.如果你想拥有完整的创意生活,那么这就是你的必经之路.我持之以恒地工作着,并且永远不忘记对这个过程表达我的感恩.无论我有没有受到神力的眷顾,能有幸接触到创意,我已心存感恩.\n\n#### 第三部分 我的人生我做主\n\n想要拥有创意生活,你不需要经过任何人的准许.\n\n我和其他人一样,都是上帝之子.我是宇宙的一个组成部分,我拥有信任我、与我一起并肩努力的隐形灵魂导师.我存在于世上,这就是我有权生活在世上的铁证.我有权拥有自己的声音和观点,我有权与创意合作.我肩负着表达艺术的使命,所以,别再束缚我了.\n\n追求独创性往往让人感觉是刻意的行为,但真实性所带来的静默却有着震撼人心的效果,每次都能让我心潮澎湃.所以,尽情地说出你的心声吧,全心全意地表达吧.将你想要分享的东西与大家分享吧.相信我,如果你表达的内容足够真实,就一定会让人感到新颖别致.\n\n抓住你的不安和恐惧,倒提着它们的脚脖子,把那种\"只有在具备某些条件(并且花费了一定钱财)后才能进行创作\"的陈旧想法甩掉吧.我要告诉你,只要你活在这个世界上,你就已经具备了创作的资质.\n\n\"一切都要靠自己\"--你越早接受这个理念,你就会越早受益.\n\n若要拥有更富创意的生活,你就必须停止抱怨,理由如下:\n\n    1. 抱怨找人厌烦\n    2. 创作有难度是理所应当的.如果创作压根没有困难、人人都能做的话,也就谈不上什么独特和趣味了\n    3. 没有谁会真心听取他人的抱怨,因为每个人都陷在自己的烦恼之中\n    4. 也是最重要的一点:你的抱怨会把灵感吓跑.\n\n#### 第四部分 坚毅,再坚毅\n\n只要坚持练习,就能在你从事的领域内获得进步,这是生活中一条简单又慷慨的定律.比如说:如果我在20多岁时每天都练习打篮球、制作生面团或是学习汽车维修,那么现在的我估计已经成为投球、制作面点或是修车的行家里手了.\n\n如果你能在任何领域孜孜不倦地耕耘10年,你便足以成为一名专家.\n\n\"任何事情都偶有糟糕的一面.\"而你必须选择解除哪种阴暗面.因此,我们的问题并不是\"你对什么感兴趣\",而是\"你的兴趣是否足以支撑你忍受其中最令人讨厌的部分\".\n\n我们必须明白,对完美主义的追求只是一种对时间的靡费,因为完美是不存在的.无论你花了多少时间试着将事情做到完美,总有人能从中挑出毛病.总有一天,你要完成你的作品,然后不假思索地把作品推给大众,就算是为了让自己用愉悦且坚定的心态继续完成任务,也是值得的.\n\n无论结果是成是败,你都要将心中的想法表达出来.无论最终的产物(也就是你的纪念品)是垃圾还是珍宝,无论评论家对你是否认可,无论人们是否理解你的作品,你都要把心里的想法表达出来.你所表达的内容不必无懈可击,你不必成为柏拉图那样的大师.你表达的创意只是一种直觉、一次尝试、一个无解之谜而已.\n\n大多数人都在为自己的事情做打算,他们没有时间去考虑你在做什么或是你做得怎样,因为它们都忙着自己的事情呢.你或许会在短时间内吸引他人的注意(比如当你的人生大放异彩、一败涂地或是经历大起大落的时候).但是,这种关注没过多久就会重新回到老地方,也就是人们仍会关注自己的事以及他们自身.\n\n由于正确的时机是无法预测的,因此我们必须把机遇最大化.要好好把握机会,不懈地为自己加油鼓劲,一次次地让自己不断往前冲......\n","slug":"去当你想当的任何人吧-寻找自我的魔法","published":1,"updated":"2021-03-30T03:24:16.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0t0054vcua52jnfdul","content":"<h4 id=\"第一部分-我们都需要勇气\"><a href=\"#第一部分-我们都需要勇气\" class=\"headerlink\" title=\"第一部分 我们都需要勇气\"></a>第一部分 我们都需要勇气</h4><p>一个人要是没有勇气,就永远无法意识到自己的能力到底有多大.一个人要是没有勇气,就永远无法挖掘出这渴望被认识的世界的丰富多彩.一个人要是没有勇气,他的人生就注定是渺小的–或许要比他所期望的还要渺小很多.</p>\n<p>虽然不同的人可能会走出截然不同的创意生活之路,并得到相去甚远的结果,但我能向大家保证:创意生活意味着拥有一种放大的人生,这是一种更广博、更欢愉、更有跨度且更有乐趣的人生.坚持不懈、持续不断地将体内埋藏着的宝藏挖掘出来,这样的生活方式本身就是一门艺术.</p>\n<p>亲爱的恐惧:我要和创意一起开启公路旅行了,我知道你会与我们同行,因为这是你的一贯作风.你认为,你在我的生命中担负着重要的职责,而且你对自己的职责一丝不苟.这些我都知道,显然,你的职责就是在我即将着手有趣的任务时给我带来巨大的恐惧,容我说一句,”你可真是尽职尽责呀”.所以,如果你必须尽责的话,那就尽管继续做你的工作吧.但在公路旅行的途中,我也会做好我的工作,那就是全力以赴、专心致志.而且,创意也会做好它的本职工作,那就是给我提供源源不断的刺激和灵感.汽车里的空间足够容纳我们仨的,所以,请不要拘谨,同时也请你理解,在旅途中,只有我和创意才能够做决策.你是这个家庭中的一员,我明白这一点,也会尊重这个事实.因此,我绝不会把你排除在我们的任何活动之外,即便如此,我们也绝不会听取你的意见.你有你的一席之地,你也可以发表你的见解,但你没有投票表决的权力.你不能碰公路地图,不能建议我们绕路,也不能调节车内的温度.老兄,你甚至连收音机都不能碰.我亲爱且熟悉的老兄啊,最重要的是,你是绝对不能开车的.</p>\n<p>如果你不学会与恐惧并肩旅行,那么你就永远无法到达任何有趣的地方或尝试任何有趣的事情.</p>\n<h4 id=\"第二部分-创意大魔法\"><a href=\"#第二部分-创意大魔法\" class=\"headerlink\" title=\"第二部分 创意大魔法\"></a>第二部分 创意大魔法</h4><p>创意会通过你的生理和情绪放射出常见的灵感信号(比如.双臂的凉意、后颈的毛发立起的感觉、胃部翻腾、大脑嗡嗡作响,以及坠入爱河或痴迷的感觉),它还会在路上布下种种巧合和征兆,好让你保持强烈的兴趣.你会意识到,各种各样的标志都将你引向这个创意.这个创意会让你在半夜醒来,也会让你在日常生活中为此分心.</p>\n<p>你既不是灵感的奴隶也不是它的主人,而是扮演着”合作伙伴”这个更有趣的角色.你用该与灵感携手共事,实现既令人兴奋又有意义的目标;你可以一辈子都去做特别酷的事情,以此度过漫长的一生;凭借你的梦想不一定能谋生,但你将认识到谋生并不是梦想的意义所在,待人生走到尽头的时候,你可以感谢创意保佑你度过了神奇、有趣、激情满满的一生.</p>\n<p>你看,无论有没有得到神助,我都会将工作进行到底.如果你想拥有完整的创意生活,那么这就是你的必经之路.我持之以恒地工作着,并且永远不忘记对这个过程表达我的感恩.无论我有没有受到神力的眷顾,能有幸接触到创意,我已心存感恩.</p>\n<h4 id=\"第三部分-我的人生我做主\"><a href=\"#第三部分-我的人生我做主\" class=\"headerlink\" title=\"第三部分 我的人生我做主\"></a>第三部分 我的人生我做主</h4><p>想要拥有创意生活,你不需要经过任何人的准许.</p>\n<p>我和其他人一样,都是上帝之子.我是宇宙的一个组成部分,我拥有信任我、与我一起并肩努力的隐形灵魂导师.我存在于世上,这就是我有权生活在世上的铁证.我有权拥有自己的声音和观点,我有权与创意合作.我肩负着表达艺术的使命,所以,别再束缚我了.</p>\n<p>追求独创性往往让人感觉是刻意的行为,但真实性所带来的静默却有着震撼人心的效果,每次都能让我心潮澎湃.所以,尽情地说出你的心声吧,全心全意地表达吧.将你想要分享的东西与大家分享吧.相信我,如果你表达的内容足够真实,就一定会让人感到新颖别致.</p>\n<p>抓住你的不安和恐惧,倒提着它们的脚脖子,把那种”只有在具备某些条件(并且花费了一定钱财)后才能进行创作”的陈旧想法甩掉吧.我要告诉你,只要你活在这个世界上,你就已经具备了创作的资质.</p>\n<p>“一切都要靠自己”–你越早接受这个理念,你就会越早受益.</p>\n<p>若要拥有更富创意的生活,你就必须停止抱怨,理由如下:</p>\n<pre><code>1. 抱怨找人厌烦\n2. 创作有难度是理所应当的.如果创作压根没有困难、人人都能做的话,也就谈不上什么独特和趣味了\n3. 没有谁会真心听取他人的抱怨,因为每个人都陷在自己的烦恼之中\n4. 也是最重要的一点:你的抱怨会把灵感吓跑.\n</code></pre>\n<h4 id=\"第四部分-坚毅-再坚毅\"><a href=\"#第四部分-坚毅-再坚毅\" class=\"headerlink\" title=\"第四部分 坚毅,再坚毅\"></a>第四部分 坚毅,再坚毅</h4><p>只要坚持练习,就能在你从事的领域内获得进步,这是生活中一条简单又慷慨的定律.比如说:如果我在20多岁时每天都练习打篮球、制作生面团或是学习汽车维修,那么现在的我估计已经成为投球、制作面点或是修车的行家里手了.</p>\n<p>如果你能在任何领域孜孜不倦地耕耘10年,你便足以成为一名专家.</p>\n<p>“任何事情都偶有糟糕的一面.”而你必须选择解除哪种阴暗面.因此,我们的问题并不是”你对什么感兴趣”,而是”你的兴趣是否足以支撑你忍受其中最令人讨厌的部分”.</p>\n<p>我们必须明白,对完美主义的追求只是一种对时间的靡费,因为完美是不存在的.无论你花了多少时间试着将事情做到完美,总有人能从中挑出毛病.总有一天,你要完成你的作品,然后不假思索地把作品推给大众,就算是为了让自己用愉悦且坚定的心态继续完成任务,也是值得的.</p>\n<p>无论结果是成是败,你都要将心中的想法表达出来.无论最终的产物(也就是你的纪念品)是垃圾还是珍宝,无论评论家对你是否认可,无论人们是否理解你的作品,你都要把心里的想法表达出来.你所表达的内容不必无懈可击,你不必成为柏拉图那样的大师.你表达的创意只是一种直觉、一次尝试、一个无解之谜而已.</p>\n<p>大多数人都在为自己的事情做打算,他们没有时间去考虑你在做什么或是你做得怎样,因为它们都忙着自己的事情呢.你或许会在短时间内吸引他人的注意(比如当你的人生大放异彩、一败涂地或是经历大起大落的时候).但是,这种关注没过多久就会重新回到老地方,也就是人们仍会关注自己的事以及他们自身.</p>\n<p>由于正确的时机是无法预测的,因此我们必须把机遇最大化.要好好把握机会,不懈地为自己加油鼓劲,一次次地让自己不断往前冲……</p>\n","site":{"data":{}},"length":2358,"excerpt":"","more":"<h4 id=\"第一部分-我们都需要勇气\"><a href=\"#第一部分-我们都需要勇气\" class=\"headerlink\" title=\"第一部分 我们都需要勇气\"></a>第一部分 我们都需要勇气</h4><p>一个人要是没有勇气,就永远无法意识到自己的能力到底有多大.一个人要是没有勇气,就永远无法挖掘出这渴望被认识的世界的丰富多彩.一个人要是没有勇气,他的人生就注定是渺小的–或许要比他所期望的还要渺小很多.</p>\n<p>虽然不同的人可能会走出截然不同的创意生活之路,并得到相去甚远的结果,但我能向大家保证:创意生活意味着拥有一种放大的人生,这是一种更广博、更欢愉、更有跨度且更有乐趣的人生.坚持不懈、持续不断地将体内埋藏着的宝藏挖掘出来,这样的生活方式本身就是一门艺术.</p>\n<p>亲爱的恐惧:我要和创意一起开启公路旅行了,我知道你会与我们同行,因为这是你的一贯作风.你认为,你在我的生命中担负着重要的职责,而且你对自己的职责一丝不苟.这些我都知道,显然,你的职责就是在我即将着手有趣的任务时给我带来巨大的恐惧,容我说一句,”你可真是尽职尽责呀”.所以,如果你必须尽责的话,那就尽管继续做你的工作吧.但在公路旅行的途中,我也会做好我的工作,那就是全力以赴、专心致志.而且,创意也会做好它的本职工作,那就是给我提供源源不断的刺激和灵感.汽车里的空间足够容纳我们仨的,所以,请不要拘谨,同时也请你理解,在旅途中,只有我和创意才能够做决策.你是这个家庭中的一员,我明白这一点,也会尊重这个事实.因此,我绝不会把你排除在我们的任何活动之外,即便如此,我们也绝不会听取你的意见.你有你的一席之地,你也可以发表你的见解,但你没有投票表决的权力.你不能碰公路地图,不能建议我们绕路,也不能调节车内的温度.老兄,你甚至连收音机都不能碰.我亲爱且熟悉的老兄啊,最重要的是,你是绝对不能开车的.</p>\n<p>如果你不学会与恐惧并肩旅行,那么你就永远无法到达任何有趣的地方或尝试任何有趣的事情.</p>\n<h4 id=\"第二部分-创意大魔法\"><a href=\"#第二部分-创意大魔法\" class=\"headerlink\" title=\"第二部分 创意大魔法\"></a>第二部分 创意大魔法</h4><p>创意会通过你的生理和情绪放射出常见的灵感信号(比如.双臂的凉意、后颈的毛发立起的感觉、胃部翻腾、大脑嗡嗡作响,以及坠入爱河或痴迷的感觉),它还会在路上布下种种巧合和征兆,好让你保持强烈的兴趣.你会意识到,各种各样的标志都将你引向这个创意.这个创意会让你在半夜醒来,也会让你在日常生活中为此分心.</p>\n<p>你既不是灵感的奴隶也不是它的主人,而是扮演着”合作伙伴”这个更有趣的角色.你用该与灵感携手共事,实现既令人兴奋又有意义的目标;你可以一辈子都去做特别酷的事情,以此度过漫长的一生;凭借你的梦想不一定能谋生,但你将认识到谋生并不是梦想的意义所在,待人生走到尽头的时候,你可以感谢创意保佑你度过了神奇、有趣、激情满满的一生.</p>\n<p>你看,无论有没有得到神助,我都会将工作进行到底.如果你想拥有完整的创意生活,那么这就是你的必经之路.我持之以恒地工作着,并且永远不忘记对这个过程表达我的感恩.无论我有没有受到神力的眷顾,能有幸接触到创意,我已心存感恩.</p>\n<h4 id=\"第三部分-我的人生我做主\"><a href=\"#第三部分-我的人生我做主\" class=\"headerlink\" title=\"第三部分 我的人生我做主\"></a>第三部分 我的人生我做主</h4><p>想要拥有创意生活,你不需要经过任何人的准许.</p>\n<p>我和其他人一样,都是上帝之子.我是宇宙的一个组成部分,我拥有信任我、与我一起并肩努力的隐形灵魂导师.我存在于世上,这就是我有权生活在世上的铁证.我有权拥有自己的声音和观点,我有权与创意合作.我肩负着表达艺术的使命,所以,别再束缚我了.</p>\n<p>追求独创性往往让人感觉是刻意的行为,但真实性所带来的静默却有着震撼人心的效果,每次都能让我心潮澎湃.所以,尽情地说出你的心声吧,全心全意地表达吧.将你想要分享的东西与大家分享吧.相信我,如果你表达的内容足够真实,就一定会让人感到新颖别致.</p>\n<p>抓住你的不安和恐惧,倒提着它们的脚脖子,把那种”只有在具备某些条件(并且花费了一定钱财)后才能进行创作”的陈旧想法甩掉吧.我要告诉你,只要你活在这个世界上,你就已经具备了创作的资质.</p>\n<p>“一切都要靠自己”–你越早接受这个理念,你就会越早受益.</p>\n<p>若要拥有更富创意的生活,你就必须停止抱怨,理由如下:</p>\n<pre><code>1. 抱怨找人厌烦\n2. 创作有难度是理所应当的.如果创作压根没有困难、人人都能做的话,也就谈不上什么独特和趣味了\n3. 没有谁会真心听取他人的抱怨,因为每个人都陷在自己的烦恼之中\n4. 也是最重要的一点:你的抱怨会把灵感吓跑.\n</code></pre>\n<h4 id=\"第四部分-坚毅-再坚毅\"><a href=\"#第四部分-坚毅-再坚毅\" class=\"headerlink\" title=\"第四部分 坚毅,再坚毅\"></a>第四部分 坚毅,再坚毅</h4><p>只要坚持练习,就能在你从事的领域内获得进步,这是生活中一条简单又慷慨的定律.比如说:如果我在20多岁时每天都练习打篮球、制作生面团或是学习汽车维修,那么现在的我估计已经成为投球、制作面点或是修车的行家里手了.</p>\n<p>如果你能在任何领域孜孜不倦地耕耘10年,你便足以成为一名专家.</p>\n<p>“任何事情都偶有糟糕的一面.”而你必须选择解除哪种阴暗面.因此,我们的问题并不是”你对什么感兴趣”,而是”你的兴趣是否足以支撑你忍受其中最令人讨厌的部分”.</p>\n<p>我们必须明白,对完美主义的追求只是一种对时间的靡费,因为完美是不存在的.无论你花了多少时间试着将事情做到完美,总有人能从中挑出毛病.总有一天,你要完成你的作品,然后不假思索地把作品推给大众,就算是为了让自己用愉悦且坚定的心态继续完成任务,也是值得的.</p>\n<p>无论结果是成是败,你都要将心中的想法表达出来.无论最终的产物(也就是你的纪念品)是垃圾还是珍宝,无论评论家对你是否认可,无论人们是否理解你的作品,你都要把心里的想法表达出来.你所表达的内容不必无懈可击,你不必成为柏拉图那样的大师.你表达的创意只是一种直觉、一次尝试、一个无解之谜而已.</p>\n<p>大多数人都在为自己的事情做打算,他们没有时间去考虑你在做什么或是你做得怎样,因为它们都忙着自己的事情呢.你或许会在短时间内吸引他人的注意(比如当你的人生大放异彩、一败涂地或是经历大起大落的时候).但是,这种关注没过多久就会重新回到老地方,也就是人们仍会关注自己的事以及他们自身.</p>\n<p>由于正确的时机是无法预测的,因此我们必须把机遇最大化.要好好把握机会,不懈地为自己加油鼓劲,一次次地让自己不断往前冲……</p>\n"},{"title":"夏洛特烦恼观影随想","date":"2019-11-10T15:13:06.000Z","_content":"#### 缘由\n\n今夜无事,就又看了一次夏洛特烦恼,可能是心境遭遇不一样了,想法也有点不同了.\n\n#### 想法\n\n1. 不合适在一起的人就算勉强在一起也不会有什么好结果的\n\n2. 适合在一起的不去珍惜,最后也将不再属于你\n","source":"_posts/夏洛特烦恼观影随想.md","raw":"---\ntitle: 夏洛特烦恼观影随想\ndate: 2019-11-10 23:13:06\ncategories: 随笔\ntags:\n - 随笔\n---\n#### 缘由\n\n今夜无事,就又看了一次夏洛特烦恼,可能是心境遭遇不一样了,想法也有点不同了.\n\n#### 想法\n\n1. 不合适在一起的人就算勉强在一起也不会有什么好结果的\n\n2. 适合在一起的不去珍惜,最后也将不再属于你\n","slug":"夏洛特烦恼观影随想","published":1,"updated":"2021-03-30T03:24:16.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0u0057vcua79yoabus","content":"<h4 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h4><p>今夜无事,就又看了一次夏洛特烦恼,可能是心境遭遇不一样了,想法也有点不同了.</p>\n<h4 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h4><ol>\n<li><p>不合适在一起的人就算勉强在一起也不会有什么好结果的</p>\n</li>\n<li><p>适合在一起的不去珍惜,最后也将不再属于你</p>\n</li>\n</ol>\n","site":{"data":{}},"length":87,"excerpt":"","more":"<h4 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h4><p>今夜无事,就又看了一次夏洛特烦恼,可能是心境遭遇不一样了,想法也有点不同了.</p>\n<h4 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h4><ol>\n<li><p>不合适在一起的人就算勉强在一起也不会有什么好结果的</p>\n</li>\n<li><p>适合在一起的不去珍惜,最后也将不再属于你</p>\n</li>\n</ol>\n"},{"title":"多种仓储模式","date":"2019-03-04T13:41:49.000Z","_content":"### 多种仓储模式\n#### IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)\n* IRepository接口包含了基本的CRUD操作，如果业务中还需要扩展其他操作，只需在IRepository接口中添加。\n* Repository实现了IRepository接口。其中ISqlHelp接口包含获取数据库链接字符串的功能，_context为EF或EF Core类库。\n* 优点是简单、快速，缺点是扩展性差且违反开放-关闭原则（Open-Close Principle）\n<!--more-->\n##### IBaseRepository.cs\n```cs\npublic interface IBaseRepository<T> where T : class, new()\n{     \n    T Create(T model);\n    T Update(T model);\n    T Query(Guid guid);\n    T Query(Espression<Func<T, bool>> expression);\n    int Delete(Guid guid);\n    int BatchDelete(IList<Guid> guids);\n    List<T> GetAll();\n    List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total);\n}\n```\n##### BaseRepository.cs\n```cs\npublic class BaseRepository<T> : IBaseRepository<T> where T : class, new() \n{\n    //数据上下文\n    internal DbContext _context;\n\n    public BaseRepository(DbContext context) \n    {\n        _context = context\n    }\n\n    public T Create(T model) \n    {\n        _context.Entry(model).State = EntityState.Added;\n        var createRowCount = _context.SaveChanges();\n        return createRowCount > 0 ? model : null;\n    }\n\n    public T Update(T model)\n    {\n        _context.Entry(model).State = EntityState.Modified;\n        var updateRowAcount = _context.SaveChanges();\n        return updateRowAcount > 0 ? model : null;\n    }\n\n    public T Query(Guid guid)\n    {\n        return _context.Set<T>().Find(guid);\n    }\n\n    public T Query(Expression<Func<T, bool>> expression)\n    {\n        return _context.Set<T>().FirstOrDefault(expression);\n    }\n\n    public int Delete(Guid guid)\n    {\n        var model = _context.Set<T>().Find(guid);\n        if (model == null) \n        {\n            throw new ArgumentOutOfRangeException(nameof(guid));\n        }\n        _context.Entry(model).State = EntityState.Deleted;\n        return _context.SaveChanges();\n    }\n\n    public int BatchDelete(IList<Guid> guids)\n    {\n        foreach (var item in guids)\n        {\n            var model = _context.Set<T>().Find(item);\n            _context.Entry(model).State = EntityState.Deleted;\n        }\n        return _context.SaveChanges();\n    }\n\n    public List<T> GetAll()\n    {\n        return _context.Set<T>().Where(q => true).ToList();\n    }\n\n    public List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total)\n    {\n        total = _context.Set<T>().Where(expression).Count();\n        switch (sortOrder)\n        {\n            case SortOrder.Ascending:\n                return _context.Set<T>().Where(expression).OrderBy(sortPredicate).Skip(skip).Take(take).ToList();\n                    \n            case SortOrder.Descending:\n                return _context.Set<T>().Where(expression).OrderByDescending(sortPredicate).Skip(skip).Take(take).ToList();\n        }\n        throw new InvalidOperationException(\"分页查询必须指定排序字段和排序顺序。\");\n    }\n}\n```\n##### AdminServer.cs\n```cs\npublic sealed class AdminServer\n{\n    private readonly IBaseRepository<User> _adminRepository;\n\n    public AdminServer(IBaseRepository<User> adminRepository)\n    {\n        _adminRepository = adminRepository;\n    }\n\n    public void CreateUser()\n    {\n        var admin = new User();\n        _adminRepository.Create(admin);\n    }\n}\n```\n#### IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)\n* 将BaseRepository.cs的实现方法上加上virtual关键字,使方法可以重载,每添加一个实体，需要添加对应的接口和实现\n##### BaseRepository.cs\n```cs\npublic class BaseRepository<T> : IBaseRepository<T> where T : class, new() \n{\n    //数据上下文    \n    internal DbContext _context;\n    \n    public BaseRepository(DbContext context) \n    {\n        _context = context\n    }\n    \n\n    public virtual T Create(T model) \n    {\n        //略\n    }\n\n    public virtual T Update(T model)\n    {\n        //略\n    }\n\n    public virtual T Query(Guid guid)\n    {\n        //略\n    }\n\n    public virtual T Query(Expression<Func<T, bool>> expression)\n    {\n        //略\n    }\n\n    public virtual int Delete(Guid guid)\n    {\n        //略\n    }\n\n    public virtual int BatchDelete(IList<Guid> guids)\n    {\n        //略\n    }\n\n    public virtual List<T> GetAll()\n    {\n        //略\n    }\n\n    public virtual List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total)\n    {\n        //略\n    }\n}\n```\n##### IRepository.cs\n```cs\npublic partial interface IAdminRepository : IBaseRepository<Admin>\n{\n    bool IsExist(Admin admin);\n}\npublic partial interface IUserRepository : IBaseRepository<User>\n{\n\n}\n```\n##### Repository.cs\n```cs\npublic partial class AdminRepository : BaseRepository<Admin>,IAdminRepository\n{\n    public AdminRepository(ISqlHelp sqlHelp) : base(sqlHelp)\n    {\n\n    }\n    public bool IsExist(Admin admin)\n    {\n        //略\n    }\n}\npublic partial class UserRepository : BaseRepository<User>,IUserRepository\n{\n    public UserRepository(ISqlHelp sqlHelp) : base(sqlHelp)\n    {\n\n    }\n}\n```\n##### AdminServer.cs\n```cs\npublic sealed class AdminServer\n{\n    private readonly IAdminRepository _adminRepository;\n\n    public AdminServer(IAdminRepository adminRepository)\n    {\n        _adminRepository = adminRepository;\n    }\n\n    public void CreateUser()\n    {\n        var admin = new User();\n        _adminRepository.Create(admin);\n    }\n\n    public bool IsExist(Admin admin)\n    {\n        return _adminRepository.IsExist(admin);\n    }\n}\n```\n#### 仓储模式+工作单元模式(扩展性高，有并发处理需求)\n* 使用工作单元的原因是可以提高数据库写操作负载，并且在仓储模式中可以根据不同的数据库链接字符串读不同的库。\n##### IUnitOfWork.cs\n```cs\npublic interface IUnitOfWork : IDisposable\n    {\n        _context _context { get; set; }\n\n        /// <summary>\n        /// 提交所有更改\n        /// </summary>\n        Task CommitAsync();\n        \n        #region Methods\n        /// <summary>\n        /// 将指定的聚合根标注为“新建”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterNew<T>(T obj)\n            where T : class, IEntity;\n        /// <summary>\n        /// 将指定的聚合根标注为“更改”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterModified<T>(T obj)\n            where T : class;\n        /// <summary>\n        /// 将指定的聚合根标注为“删除”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterDeleted<T>(T obj)\n            where T : class;\n        #endregion\n    }\n```\n##### UnitOfWork.cs\n```cs\npublic class UnitOfWork : IUnitOfWork\n{\n    public _context _context { get; set; }\n    public UnitOfWork(IContextHelper contextHelp)\n    {\n        _context = contextHelp._context;\n    }\n    private AdminRepository _adminRepository;\n\n    public AdminRepository AdminRepository\n    {\n        get\n        {\n            return _adminRepository ?? new AdminRepository(_context);\n        }\n    }\n\n    public virtual async Task CommitAsync()\n    {\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateConcurrencyException ex)\n        {\n            ex.Entries.Single().Reload();\n        }\n    }\n    \n    public virtual void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n    \n    private void Dispose(bool disposing)\n    {\n        if (!disposing) \n        {\n            return;\n        }\n        if (_context == null) \n        {\n            return;\n        }\n        _context.Dispose();\n        _context = null;\n    }\n\n    public virtual void RegisterNew<TEntity>(TEntity obj) where TEntity : class, IEntity\n    {\n        _context.Set<TEntity>().Add(obj);\n    }\n\n    public virtual void RegisterModified<TEntity>(TEntity obj) where TEntity : class\n    {\n        _context.Entry(obj).State = EntityState.Modified;\n    }\n\n    public virtual void RegisterDeleted<TEntity>(TEntity obj) where TEntity : class\n    {\n        _context.Entry(obj).State = EntityState.Deleted;\n    }\n\n}\n```\n##### AdminServer.cs\n```cs\npublic class AdminServer\n{\n    private UnitOfWork unit;\n\n    public AdminServer(UnitOfWork unitOfWork)\n    {\n        unit = unitOfWork;\n    }\n\n    public IEnumerable Get()\n    {\n        return unit.AdminRepository.GetAll();\n    }\n```","source":"_posts/多种仓储模式.md","raw":"---\ntitle: 多种仓储模式\ndate: 2019-03-04 21:41:49\ncategories: .Net\ntags:\n - .Net\n - 架构\n---\n### 多种仓储模式\n#### IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)\n* IRepository接口包含了基本的CRUD操作，如果业务中还需要扩展其他操作，只需在IRepository接口中添加。\n* Repository实现了IRepository接口。其中ISqlHelp接口包含获取数据库链接字符串的功能，_context为EF或EF Core类库。\n* 优点是简单、快速，缺点是扩展性差且违反开放-关闭原则（Open-Close Principle）\n<!--more-->\n##### IBaseRepository.cs\n```cs\npublic interface IBaseRepository<T> where T : class, new()\n{     \n    T Create(T model);\n    T Update(T model);\n    T Query(Guid guid);\n    T Query(Espression<Func<T, bool>> expression);\n    int Delete(Guid guid);\n    int BatchDelete(IList<Guid> guids);\n    List<T> GetAll();\n    List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total);\n}\n```\n##### BaseRepository.cs\n```cs\npublic class BaseRepository<T> : IBaseRepository<T> where T : class, new() \n{\n    //数据上下文\n    internal DbContext _context;\n\n    public BaseRepository(DbContext context) \n    {\n        _context = context\n    }\n\n    public T Create(T model) \n    {\n        _context.Entry(model).State = EntityState.Added;\n        var createRowCount = _context.SaveChanges();\n        return createRowCount > 0 ? model : null;\n    }\n\n    public T Update(T model)\n    {\n        _context.Entry(model).State = EntityState.Modified;\n        var updateRowAcount = _context.SaveChanges();\n        return updateRowAcount > 0 ? model : null;\n    }\n\n    public T Query(Guid guid)\n    {\n        return _context.Set<T>().Find(guid);\n    }\n\n    public T Query(Expression<Func<T, bool>> expression)\n    {\n        return _context.Set<T>().FirstOrDefault(expression);\n    }\n\n    public int Delete(Guid guid)\n    {\n        var model = _context.Set<T>().Find(guid);\n        if (model == null) \n        {\n            throw new ArgumentOutOfRangeException(nameof(guid));\n        }\n        _context.Entry(model).State = EntityState.Deleted;\n        return _context.SaveChanges();\n    }\n\n    public int BatchDelete(IList<Guid> guids)\n    {\n        foreach (var item in guids)\n        {\n            var model = _context.Set<T>().Find(item);\n            _context.Entry(model).State = EntityState.Deleted;\n        }\n        return _context.SaveChanges();\n    }\n\n    public List<T> GetAll()\n    {\n        return _context.Set<T>().Where(q => true).ToList();\n    }\n\n    public List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total)\n    {\n        total = _context.Set<T>().Where(expression).Count();\n        switch (sortOrder)\n        {\n            case SortOrder.Ascending:\n                return _context.Set<T>().Where(expression).OrderBy(sortPredicate).Skip(skip).Take(take).ToList();\n                    \n            case SortOrder.Descending:\n                return _context.Set<T>().Where(expression).OrderByDescending(sortPredicate).Skip(skip).Take(take).ToList();\n        }\n        throw new InvalidOperationException(\"分页查询必须指定排序字段和排序顺序。\");\n    }\n}\n```\n##### AdminServer.cs\n```cs\npublic sealed class AdminServer\n{\n    private readonly IBaseRepository<User> _adminRepository;\n\n    public AdminServer(IBaseRepository<User> adminRepository)\n    {\n        _adminRepository = adminRepository;\n    }\n\n    public void CreateUser()\n    {\n        var admin = new User();\n        _adminRepository.Create(admin);\n    }\n}\n```\n#### IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)\n* 将BaseRepository.cs的实现方法上加上virtual关键字,使方法可以重载,每添加一个实体，需要添加对应的接口和实现\n##### BaseRepository.cs\n```cs\npublic class BaseRepository<T> : IBaseRepository<T> where T : class, new() \n{\n    //数据上下文    \n    internal DbContext _context;\n    \n    public BaseRepository(DbContext context) \n    {\n        _context = context\n    }\n    \n\n    public virtual T Create(T model) \n    {\n        //略\n    }\n\n    public virtual T Update(T model)\n    {\n        //略\n    }\n\n    public virtual T Query(Guid guid)\n    {\n        //略\n    }\n\n    public virtual T Query(Expression<Func<T, bool>> expression)\n    {\n        //略\n    }\n\n    public virtual int Delete(Guid guid)\n    {\n        //略\n    }\n\n    public virtual int BatchDelete(IList<Guid> guids)\n    {\n        //略\n    }\n\n    public virtual List<T> GetAll()\n    {\n        //略\n    }\n\n    public virtual List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total)\n    {\n        //略\n    }\n}\n```\n##### IRepository.cs\n```cs\npublic partial interface IAdminRepository : IBaseRepository<Admin>\n{\n    bool IsExist(Admin admin);\n}\npublic partial interface IUserRepository : IBaseRepository<User>\n{\n\n}\n```\n##### Repository.cs\n```cs\npublic partial class AdminRepository : BaseRepository<Admin>,IAdminRepository\n{\n    public AdminRepository(ISqlHelp sqlHelp) : base(sqlHelp)\n    {\n\n    }\n    public bool IsExist(Admin admin)\n    {\n        //略\n    }\n}\npublic partial class UserRepository : BaseRepository<User>,IUserRepository\n{\n    public UserRepository(ISqlHelp sqlHelp) : base(sqlHelp)\n    {\n\n    }\n}\n```\n##### AdminServer.cs\n```cs\npublic sealed class AdminServer\n{\n    private readonly IAdminRepository _adminRepository;\n\n    public AdminServer(IAdminRepository adminRepository)\n    {\n        _adminRepository = adminRepository;\n    }\n\n    public void CreateUser()\n    {\n        var admin = new User();\n        _adminRepository.Create(admin);\n    }\n\n    public bool IsExist(Admin admin)\n    {\n        return _adminRepository.IsExist(admin);\n    }\n}\n```\n#### 仓储模式+工作单元模式(扩展性高，有并发处理需求)\n* 使用工作单元的原因是可以提高数据库写操作负载，并且在仓储模式中可以根据不同的数据库链接字符串读不同的库。\n##### IUnitOfWork.cs\n```cs\npublic interface IUnitOfWork : IDisposable\n    {\n        _context _context { get; set; }\n\n        /// <summary>\n        /// 提交所有更改\n        /// </summary>\n        Task CommitAsync();\n        \n        #region Methods\n        /// <summary>\n        /// 将指定的聚合根标注为“新建”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterNew<T>(T obj)\n            where T : class, IEntity;\n        /// <summary>\n        /// 将指定的聚合根标注为“更改”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterModified<T>(T obj)\n            where T : class;\n        /// <summary>\n        /// 将指定的聚合根标注为“删除”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterDeleted<T>(T obj)\n            where T : class;\n        #endregion\n    }\n```\n##### UnitOfWork.cs\n```cs\npublic class UnitOfWork : IUnitOfWork\n{\n    public _context _context { get; set; }\n    public UnitOfWork(IContextHelper contextHelp)\n    {\n        _context = contextHelp._context;\n    }\n    private AdminRepository _adminRepository;\n\n    public AdminRepository AdminRepository\n    {\n        get\n        {\n            return _adminRepository ?? new AdminRepository(_context);\n        }\n    }\n\n    public virtual async Task CommitAsync()\n    {\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateConcurrencyException ex)\n        {\n            ex.Entries.Single().Reload();\n        }\n    }\n    \n    public virtual void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n    \n    private void Dispose(bool disposing)\n    {\n        if (!disposing) \n        {\n            return;\n        }\n        if (_context == null) \n        {\n            return;\n        }\n        _context.Dispose();\n        _context = null;\n    }\n\n    public virtual void RegisterNew<TEntity>(TEntity obj) where TEntity : class, IEntity\n    {\n        _context.Set<TEntity>().Add(obj);\n    }\n\n    public virtual void RegisterModified<TEntity>(TEntity obj) where TEntity : class\n    {\n        _context.Entry(obj).State = EntityState.Modified;\n    }\n\n    public virtual void RegisterDeleted<TEntity>(TEntity obj) where TEntity : class\n    {\n        _context.Entry(obj).State = EntityState.Deleted;\n    }\n\n}\n```\n##### AdminServer.cs\n```cs\npublic class AdminServer\n{\n    private UnitOfWork unit;\n\n    public AdminServer(UnitOfWork unitOfWork)\n    {\n        unit = unitOfWork;\n    }\n\n    public IEnumerable Get()\n    {\n        return unit.AdminRepository.GetAll();\n    }\n```","slug":"多种仓储模式","published":1,"updated":"2021-03-30T03:24:16.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0v005avcuab4sg9s77","content":"<h3 id=\"多种仓储模式\"><a href=\"#多种仓储模式\" class=\"headerlink\" title=\"多种仓储模式\"></a>多种仓储模式</h3><h4 id=\"IBaseRepository-BaseRepository-模式-适用于小项目-扩展性差\"><a href=\"#IBaseRepository-BaseRepository-模式-适用于小项目-扩展性差\" class=\"headerlink\" title=\"IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)\"></a>IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)</h4><ul>\n<li>IRepository接口包含了基本的CRUD操作，如果业务中还需要扩展其他操作，只需在IRepository接口中添加。</li>\n<li>Repository实现了IRepository接口。其中ISqlHelp接口包含获取数据库链接字符串的功能，_context为EF或EF Core类库。</li>\n<li>优点是简单、快速，缺点是扩展性差且违反开放-关闭原则（Open-Close Principle）<span id=\"more\"></span>\n<h5 id=\"IBaseRepository-cs\"><a href=\"#IBaseRepository-cs\" class=\"headerlink\" title=\"IBaseRepository.cs\"></a>IBaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IBaseRepository&lt;T&gt; where T : class, new()</span><br><span class=\"line\">&#123;     </span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Query</span>(<span class=\"params\">Espression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"built_in\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"built_in\">int</span> skip, <span class=\"built_in\">int</span> take, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> total</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"BaseRepository-cs\"><a href=\"#BaseRepository-cs\" class=\"headerlink\" title=\"BaseRepository.cs\"></a>BaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseRepository&lt;T&gt; : IBaseRepository&lt;T&gt; where T : class, new() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> DbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseRepository</span>(<span class=\"params\">DbContext context</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context = context</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Added;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> createRowCount = _context.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> createRowCount &gt; <span class=\"number\">0</span> ? model : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> updateRowAcount = _context.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateRowAcount &gt; <span class=\"number\">0</span> ? model : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Find(guid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Query</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().FirstOrDefault(expression);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> model = _context.Set&lt;T&gt;().Find(guid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (model == <span class=\"literal\">null</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(guid));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.SaveChanges();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> guids)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> model = _context.Set&lt;T&gt;().Find(item);</span><br><span class=\"line\">            _context.Entry(model).State = EntityState.Deleted;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.SaveChanges();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(q =&gt; <span class=\"literal\">true</span>).ToList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"built_in\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"built_in\">int</span> skip, <span class=\"built_in\">int</span> take, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> total</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        total = _context.Set&lt;T&gt;().Where(expression).Count();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (sortOrder)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SortOrder.Ascending:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(expression).OrderBy(sortPredicate).Skip(skip).Take(take).ToList();</span><br><span class=\"line\">                    </span><br><span class=\"line\">            <span class=\"keyword\">case</span> SortOrder.Descending:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(expression).OrderByDescending(sortPredicate).Skip(skip).Take(take).ToList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">&quot;分页查询必须指定排序字段和排序顺序。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"AdminServer-cs\"><a href=\"#AdminServer-cs\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IBaseRepository&lt;User&gt; _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">IBaseRepository&lt;User&gt; adminRepository</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _adminRepository = adminRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateUser</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> admin = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        _adminRepository.Create(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IBaseRepository-BaseRepository-IRepository-Repository-可扩展性好-未处理并发\"><a href=\"#IBaseRepository-BaseRepository-IRepository-Repository-可扩展性好-未处理并发\" class=\"headerlink\" title=\"IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)\"></a>IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)</h4></li>\n<li>将BaseRepository.cs的实现方法上加上virtual关键字,使方法可以重载,每添加一个实体，需要添加对应的接口和实现<h5 id=\"BaseRepository-cs-1\"><a href=\"#BaseRepository-cs-1\" class=\"headerlink\" title=\"BaseRepository.cs\"></a>BaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseRepository&lt;T&gt; : IBaseRepository&lt;T&gt; where T : class, new() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据上下文    </span></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> DbContext _context;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseRepository</span>(<span class=\"params\">DbContext context</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context = context</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Query</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"built_in\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"built_in\">int</span> skip, <span class=\"built_in\">int</span> take, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> total</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"IRepository-cs\"><a href=\"#IRepository-cs\" class=\"headerlink\" title=\"IRepository.cs\"></a>IRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IAdminRepository</span> : <span class=\"title\">IBaseRepository</span>&lt;<span class=\"title\">Admin</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUserRepository</span> : <span class=\"title\">IBaseRepository</span>&lt;<span class=\"title\">User</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Repository-cs\"><a href=\"#Repository-cs\" class=\"headerlink\" title=\"Repository.cs\"></a>Repository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminRepository</span> : <span class=\"title\">BaseRepository</span>&lt;<span class=\"title\">Admin</span>&gt;,<span class=\"title\">IAdminRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminRepository</span>(<span class=\"params\">ISqlHelp sqlHelp</span>) : <span class=\"title\">base</span>(<span class=\"params\">sqlHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">UserRepository</span> : <span class=\"title\">BaseRepository</span>&lt;<span class=\"title\">User</span>&gt;,<span class=\"title\">IUserRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserRepository</span>(<span class=\"params\">ISqlHelp sqlHelp</span>) : <span class=\"title\">base</span>(<span class=\"params\">sqlHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"AdminServer-cs-1\"><a href=\"#AdminServer-cs-1\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IAdminRepository _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">IAdminRepository adminRepository</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _adminRepository = adminRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateUser</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> admin = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        _adminRepository.Create(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _adminRepository.IsExist(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"仓储模式-工作单元模式-扩展性高，有并发处理需求\"><a href=\"#仓储模式-工作单元模式-扩展性高，有并发处理需求\" class=\"headerlink\" title=\"仓储模式+工作单元模式(扩展性高，有并发处理需求)\"></a>仓储模式+工作单元模式(扩展性高，有并发处理需求)</h4></li>\n<li>使用工作单元的原因是可以提高数据库写操作负载，并且在仓储模式中可以根据不同的数据库链接字符串读不同的库。<h5 id=\"IUnitOfWork-cs\"><a href=\"#IUnitOfWork-cs\" class=\"headerlink\" title=\"IUnitOfWork.cs\"></a>IUnitOfWork.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUnitOfWork</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context _context &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 提交所有更改</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">Task <span class=\"title\">CommitAsync</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Methods</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“新建”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;obj&quot;&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RegisterNew</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T obj</span>)</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span>, IEntity</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“更改”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;obj&quot;&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RegisterModified</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T obj</span>)</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“删除”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;obj&quot;&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RegisterDeleted</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T obj</span>)</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span>;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"UnitOfWork-cs\"><a href=\"#UnitOfWork-cs\" class=\"headerlink\" title=\"UnitOfWork.cs\"></a>UnitOfWork.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UnitOfWork</span> : <span class=\"title\">IUnitOfWork</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> _context _context &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnitOfWork</span>(<span class=\"params\">IContextHelper contextHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context = contextHelp._context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AdminRepository _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AdminRepository AdminRepository</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _adminRepository ?? <span class=\"keyword\">new</span> AdminRepository(_context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">async</span> Task <span class=\"title\">CommitAsync</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _context.SaveChangesAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (DbUpdateConcurrencyException ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ex.Entries.Single().Reload();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"built_in\">bool</span> disposing</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!disposing) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_context == <span class=\"literal\">null</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _context.Dispose();</span><br><span class=\"line\">        _context = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">RegisterNew</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\">TEntity obj</span>) <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span>, IEntity</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Set&lt;TEntity&gt;().Add(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">RegisterModified</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\">TEntity obj</span>) <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Entry(obj).State = EntityState.Modified;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">RegisterDeleted</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\">TEntity obj</span>) <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Entry(obj).State = EntityState.Deleted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"AdminServer-cs-2\"><a href=\"#AdminServer-cs-2\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UnitOfWork unit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">UnitOfWork unitOfWork</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        unit = unitOfWork;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unit.AdminRepository.GetAll();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"length":7511,"excerpt":"<h3 id=\"多种仓储模式\"><a href=\"#多种仓储模式\" class=\"headerlink\" title=\"多种仓储模式\"></a>多种仓储模式</h3><h4 id=\"IBaseRepository-BaseRepository-模式-适用于小项目-扩展性差\"><a href=\"#IBaseRepository-BaseRepository-模式-适用于小项目-扩展性差\" class=\"headerlink\" title=\"IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)\"></a>IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)</h4><ul>\n<li>IRepository接口包含了基本的CRUD操作，如果业务中还需要扩展其他操作，只需在IRepository接口中添加。</li>\n<li>Repository实现了IRepository接口。其中ISqlHelp接口包含获取数据库链接字符串的功能，_context为EF或EF Core类库。</li>\n<li>优点是简单、快速，缺点是扩展性差且违反开放-关闭原则（Open-Close Principle）","more":"<h5 id=\"IBaseRepository-cs\"><a href=\"#IBaseRepository-cs\" class=\"headerlink\" title=\"IBaseRepository.cs\"></a>IBaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IBaseRepository&lt;T&gt; where T : class, new()</span><br><span class=\"line\">&#123;     </span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Query</span>(<span class=\"params\">Espression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"built_in\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"built_in\">int</span> skip, <span class=\"built_in\">int</span> take, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> total</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"BaseRepository-cs\"><a href=\"#BaseRepository-cs\" class=\"headerlink\" title=\"BaseRepository.cs\"></a>BaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseRepository&lt;T&gt; : IBaseRepository&lt;T&gt; where T : class, new() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> DbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseRepository</span>(<span class=\"params\">DbContext context</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context = context</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Added;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> createRowCount = _context.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> createRowCount &gt; <span class=\"number\">0</span> ? model : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> updateRowAcount = _context.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateRowAcount &gt; <span class=\"number\">0</span> ? model : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Find(guid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Query</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().FirstOrDefault(expression);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> model = _context.Set&lt;T&gt;().Find(guid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (model == <span class=\"literal\">null</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(guid));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.SaveChanges();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> guids)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> model = _context.Set&lt;T&gt;().Find(item);</span><br><span class=\"line\">            _context.Entry(model).State = EntityState.Deleted;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.SaveChanges();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(q =&gt; <span class=\"literal\">true</span>).ToList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"built_in\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"built_in\">int</span> skip, <span class=\"built_in\">int</span> take, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> total</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        total = _context.Set&lt;T&gt;().Where(expression).Count();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (sortOrder)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SortOrder.Ascending:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(expression).OrderBy(sortPredicate).Skip(skip).Take(take).ToList();</span><br><span class=\"line\">                    </span><br><span class=\"line\">            <span class=\"keyword\">case</span> SortOrder.Descending:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(expression).OrderByDescending(sortPredicate).Skip(skip).Take(take).ToList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">&quot;分页查询必须指定排序字段和排序顺序。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"AdminServer-cs\"><a href=\"#AdminServer-cs\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IBaseRepository&lt;User&gt; _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">IBaseRepository&lt;User&gt; adminRepository</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _adminRepository = adminRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateUser</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> admin = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        _adminRepository.Create(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IBaseRepository-BaseRepository-IRepository-Repository-可扩展性好-未处理并发\"><a href=\"#IBaseRepository-BaseRepository-IRepository-Repository-可扩展性好-未处理并发\" class=\"headerlink\" title=\"IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)\"></a>IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)</h4></li>\n<li>将BaseRepository.cs的实现方法上加上virtual关键字,使方法可以重载,每添加一个实体，需要添加对应的接口和实现<h5 id=\"BaseRepository-cs-1\"><a href=\"#BaseRepository-cs-1\" class=\"headerlink\" title=\"BaseRepository.cs\"></a>BaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseRepository&lt;T&gt; : IBaseRepository&lt;T&gt; where T : class, new() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据上下文    </span></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> DbContext _context;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseRepository</span>(<span class=\"params\">DbContext context</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context = context</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Query</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"built_in\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"built_in\">int</span> skip, <span class=\"built_in\">int</span> take, <span class=\"keyword\">out</span> <span class=\"built_in\">int</span> total</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"IRepository-cs\"><a href=\"#IRepository-cs\" class=\"headerlink\" title=\"IRepository.cs\"></a>IRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IAdminRepository</span> : <span class=\"title\">IBaseRepository</span>&lt;<span class=\"title\">Admin</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUserRepository</span> : <span class=\"title\">IBaseRepository</span>&lt;<span class=\"title\">User</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Repository-cs\"><a href=\"#Repository-cs\" class=\"headerlink\" title=\"Repository.cs\"></a>Repository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminRepository</span> : <span class=\"title\">BaseRepository</span>&lt;<span class=\"title\">Admin</span>&gt;,<span class=\"title\">IAdminRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminRepository</span>(<span class=\"params\">ISqlHelp sqlHelp</span>) : <span class=\"title\">base</span>(<span class=\"params\">sqlHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">UserRepository</span> : <span class=\"title\">BaseRepository</span>&lt;<span class=\"title\">User</span>&gt;,<span class=\"title\">IUserRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserRepository</span>(<span class=\"params\">ISqlHelp sqlHelp</span>) : <span class=\"title\">base</span>(<span class=\"params\">sqlHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"AdminServer-cs-1\"><a href=\"#AdminServer-cs-1\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IAdminRepository _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">IAdminRepository adminRepository</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _adminRepository = adminRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateUser</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> admin = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        _adminRepository.Create(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _adminRepository.IsExist(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"仓储模式-工作单元模式-扩展性高，有并发处理需求\"><a href=\"#仓储模式-工作单元模式-扩展性高，有并发处理需求\" class=\"headerlink\" title=\"仓储模式+工作单元模式(扩展性高，有并发处理需求)\"></a>仓储模式+工作单元模式(扩展性高，有并发处理需求)</h4></li>\n<li>使用工作单元的原因是可以提高数据库写操作负载，并且在仓储模式中可以根据不同的数据库链接字符串读不同的库。<h5 id=\"IUnitOfWork-cs\"><a href=\"#IUnitOfWork-cs\" class=\"headerlink\" title=\"IUnitOfWork.cs\"></a>IUnitOfWork.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUnitOfWork</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context _context &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 提交所有更改</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">Task <span class=\"title\">CommitAsync</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Methods</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“新建”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;obj&quot;&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RegisterNew</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T obj</span>)</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span>, IEntity</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“更改”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;obj&quot;&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RegisterModified</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T obj</span>)</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“删除”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;obj&quot;&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RegisterDeleted</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T obj</span>)</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span>;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"UnitOfWork-cs\"><a href=\"#UnitOfWork-cs\" class=\"headerlink\" title=\"UnitOfWork.cs\"></a>UnitOfWork.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UnitOfWork</span> : <span class=\"title\">IUnitOfWork</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> _context _context &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnitOfWork</span>(<span class=\"params\">IContextHelper contextHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context = contextHelp._context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AdminRepository _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AdminRepository AdminRepository</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _adminRepository ?? <span class=\"keyword\">new</span> AdminRepository(_context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">async</span> Task <span class=\"title\">CommitAsync</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _context.SaveChangesAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (DbUpdateConcurrencyException ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ex.Entries.Single().Reload();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"built_in\">bool</span> disposing</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!disposing) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_context == <span class=\"literal\">null</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _context.Dispose();</span><br><span class=\"line\">        _context = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">RegisterNew</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\">TEntity obj</span>) <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span>, IEntity</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Set&lt;TEntity&gt;().Add(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">RegisterModified</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\">TEntity obj</span>) <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Entry(obj).State = EntityState.Modified;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">RegisterDeleted</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\">TEntity obj</span>) <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _context.Entry(obj).State = EntityState.Deleted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"AdminServer-cs-2\"><a href=\"#AdminServer-cs-2\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UnitOfWork unit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">UnitOfWork unitOfWork</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        unit = unitOfWork;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unit.AdminRepository.GetAll();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"小猫的胡言乱语","date":"2019-07-13T13:41:15.000Z","_content":"#### 阴霾\n最近公司的事情不是很多,于是有时间开始胡思乱想了.\n<!--more-->\n在现在公司也快一年了,一开始进来的时候,说是满一年会有调薪,但是今年开年后,公司的许多制度都在调整改变,那么加薪制度自然也是难逃魔爪.私下和同事的了解,发现有些比我早几个月进公司的人也还没有加薪,这样心中难免会有一丝阴霾.毕竟当初进来有一部分也是冲着那允诺不低的加薪政策.\n\n另一方面也是感觉现在的公司更重视的业务而非技术,并不需要你的技术能力有多强,因为大部分的系统界面和功能都是可以直接从其他系统复制粘贴,再修改细节和逻辑就好了.感觉这并不算是我想要的生活\n\n#### 阳光\n感到了迷茫,感觉自己的努力不知道有什么用.此时身边的小伙伴说了句,改变不是说一定会给你带来什么，但是一定不会是现在这样,最不济也是和现在一样.听到这句话,想起了自己最喜欢的一本网游小说的一段话\n> 努力，只不过是获得一次机会。\n若是将出身看成是人生的第一次掷骰子，掷到平凡，你别无选择，那么努力，并非是让你马上掷到富贵、成名与成功，而是从老天那里获得再掷一次的机会。\n这个再掷一次的结果，有可能还是平凡，也有可能就是获得你想要的。\n\n就是这样的,你只管往前走，天自己会亮！\n\n#### 布里丹毛驴效应\n选择之前不犹豫,选择之后不后悔.\n\n现在我还没有打算选择,可能在加薪政策出来以后就会有一次选择了吧,那时的我应该不会再犹豫了,因为最差不过就是打回原形吧.","source":"_posts/小猫的胡言乱语.md","raw":"---\ntitle: 小猫的胡言乱语\ndate: 2019-07-13 21:41:15\ncategories: 随笔\ntags:\n - 随笔\n---\n#### 阴霾\n最近公司的事情不是很多,于是有时间开始胡思乱想了.\n<!--more-->\n在现在公司也快一年了,一开始进来的时候,说是满一年会有调薪,但是今年开年后,公司的许多制度都在调整改变,那么加薪制度自然也是难逃魔爪.私下和同事的了解,发现有些比我早几个月进公司的人也还没有加薪,这样心中难免会有一丝阴霾.毕竟当初进来有一部分也是冲着那允诺不低的加薪政策.\n\n另一方面也是感觉现在的公司更重视的业务而非技术,并不需要你的技术能力有多强,因为大部分的系统界面和功能都是可以直接从其他系统复制粘贴,再修改细节和逻辑就好了.感觉这并不算是我想要的生活\n\n#### 阳光\n感到了迷茫,感觉自己的努力不知道有什么用.此时身边的小伙伴说了句,改变不是说一定会给你带来什么，但是一定不会是现在这样,最不济也是和现在一样.听到这句话,想起了自己最喜欢的一本网游小说的一段话\n> 努力，只不过是获得一次机会。\n若是将出身看成是人生的第一次掷骰子，掷到平凡，你别无选择，那么努力，并非是让你马上掷到富贵、成名与成功，而是从老天那里获得再掷一次的机会。\n这个再掷一次的结果，有可能还是平凡，也有可能就是获得你想要的。\n\n就是这样的,你只管往前走，天自己会亮！\n\n#### 布里丹毛驴效应\n选择之前不犹豫,选择之后不后悔.\n\n现在我还没有打算选择,可能在加薪政策出来以后就会有一次选择了吧,那时的我应该不会再犹豫了,因为最差不过就是打回原形吧.","slug":"小猫的胡言乱语","published":1,"updated":"2021-03-30T03:24:16.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0w005dvcua03k5a13w","content":"<h4 id=\"阴霾\"><a href=\"#阴霾\" class=\"headerlink\" title=\"阴霾\"></a>阴霾</h4><p>最近公司的事情不是很多,于是有时间开始胡思乱想了.</p>\n<span id=\"more\"></span>\n<p>在现在公司也快一年了,一开始进来的时候,说是满一年会有调薪,但是今年开年后,公司的许多制度都在调整改变,那么加薪制度自然也是难逃魔爪.私下和同事的了解,发现有些比我早几个月进公司的人也还没有加薪,这样心中难免会有一丝阴霾.毕竟当初进来有一部分也是冲着那允诺不低的加薪政策.</p>\n<p>另一方面也是感觉现在的公司更重视的业务而非技术,并不需要你的技术能力有多强,因为大部分的系统界面和功能都是可以直接从其他系统复制粘贴,再修改细节和逻辑就好了.感觉这并不算是我想要的生活</p>\n<h4 id=\"阳光\"><a href=\"#阳光\" class=\"headerlink\" title=\"阳光\"></a>阳光</h4><p>感到了迷茫,感觉自己的努力不知道有什么用.此时身边的小伙伴说了句,改变不是说一定会给你带来什么，但是一定不会是现在这样,最不济也是和现在一样.听到这句话,想起了自己最喜欢的一本网游小说的一段话</p>\n<blockquote>\n<p>努力，只不过是获得一次机会。<br>若是将出身看成是人生的第一次掷骰子，掷到平凡，你别无选择，那么努力，并非是让你马上掷到富贵、成名与成功，而是从老天那里获得再掷一次的机会。<br>这个再掷一次的结果，有可能还是平凡，也有可能就是获得你想要的。</p>\n</blockquote>\n<p>就是这样的,你只管往前走，天自己会亮！</p>\n<h4 id=\"布里丹毛驴效应\"><a href=\"#布里丹毛驴效应\" class=\"headerlink\" title=\"布里丹毛驴效应\"></a>布里丹毛驴效应</h4><p>选择之前不犹豫,选择之后不后悔.</p>\n<p>现在我还没有打算选择,可能在加薪政策出来以后就会有一次选择了吧,那时的我应该不会再犹豫了,因为最差不过就是打回原形吧.</p>\n","site":{"data":{}},"length":568,"excerpt":"<h4 id=\"阴霾\"><a href=\"#阴霾\" class=\"headerlink\" title=\"阴霾\"></a>阴霾</h4><p>最近公司的事情不是很多,于是有时间开始胡思乱想了.</p>","more":"<p>在现在公司也快一年了,一开始进来的时候,说是满一年会有调薪,但是今年开年后,公司的许多制度都在调整改变,那么加薪制度自然也是难逃魔爪.私下和同事的了解,发现有些比我早几个月进公司的人也还没有加薪,这样心中难免会有一丝阴霾.毕竟当初进来有一部分也是冲着那允诺不低的加薪政策.</p>\n<p>另一方面也是感觉现在的公司更重视的业务而非技术,并不需要你的技术能力有多强,因为大部分的系统界面和功能都是可以直接从其他系统复制粘贴,再修改细节和逻辑就好了.感觉这并不算是我想要的生活</p>\n<h4 id=\"阳光\"><a href=\"#阳光\" class=\"headerlink\" title=\"阳光\"></a>阳光</h4><p>感到了迷茫,感觉自己的努力不知道有什么用.此时身边的小伙伴说了句,改变不是说一定会给你带来什么，但是一定不会是现在这样,最不济也是和现在一样.听到这句话,想起了自己最喜欢的一本网游小说的一段话</p>\n<blockquote>\n<p>努力，只不过是获得一次机会。<br>若是将出身看成是人生的第一次掷骰子，掷到平凡，你别无选择，那么努力，并非是让你马上掷到富贵、成名与成功，而是从老天那里获得再掷一次的机会。<br>这个再掷一次的结果，有可能还是平凡，也有可能就是获得你想要的。</p>\n</blockquote>\n<p>就是这样的,你只管往前走，天自己会亮！</p>\n<h4 id=\"布里丹毛驴效应\"><a href=\"#布里丹毛驴效应\" class=\"headerlink\" title=\"布里丹毛驴效应\"></a>布里丹毛驴效应</h4><p>选择之前不犹豫,选择之后不后悔.</p>\n<p>现在我还没有打算选择,可能在加薪政策出来以后就会有一次选择了吧,那时的我应该不会再犹豫了,因为最差不过就是打回原形吧.</p>"},{"title":"微服务-Consul学习(二)","date":"2019-03-11T15:43:58.000Z","_content":"上一次学习到了在命令行如何去启动和注册服务.今天学习如何通过Consul Api 接口注册服务.\n<!--more-->\n#### 创建一个.Net Core WebApi项目\n模板选择Api.\n#### 创建HealthController,用于Consul的健康检查\nHealthController.cs\n``` cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace ConsulApiTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class HealthController : ControllerBase\n    {\n        [HttpGet]\n        public IActionResult Get() => Ok(\"ok\");\n    }\n}\n```\n#### 创建ConsulBuilderExtensions,用于注册服务\nConsulBuilderExtensions.cs\n```cs\nusing Consul;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing System;\n\nnamespace ConsulApiTest\n{\n    public static class  ConsulBuilderExtensions\n    {\n        public static IApplicationBuilder RegisterConsul(this IApplicationBuilder app, IApplicationLifetime lifetime, ServiceEntity serviceEntity)\n        {\n            var consulClient = new ConsulClient(x => x.Address = new Uri($\"http://{serviceEntity.ConsulIP}:{serviceEntity.ConsulPort}\"));//请求注册的 Consul 地址\n            var httpCheck = new AgentServiceCheck()\n            {\n                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(5),//服务启动多久后注册\n                Interval = TimeSpan.FromSeconds(10),//健康检查时间间隔，或者称为心跳间隔\n                HTTP = $\"https://{serviceEntity.IP}:{serviceEntity.Port}/api/health\",//健康检查地址 (如果项目没有勾选https的话,把https换成http)\n                Timeout = TimeSpan.FromSeconds(5)\n            };\n\n            // Register service with consul\n            var registration = new AgentServiceRegistration()\n            {\n                Checks = new[] { httpCheck },\n                ID = serviceEntity.ServiceName + \"_\" + serviceEntity.Port,\n                Name = serviceEntity.ServiceName,\n                Address = serviceEntity.IP,\n                Port = serviceEntity.Port,\n                Tags = new[] { $\"urlprefix-/{serviceEntity.ServiceName}\" }//添加 urlprefix-/servicename 格式的 tag 标签，以便 Fabio 识别\n            };\n            consulClient.Agent.ServiceRegister(registration).Wait();//服务启动时注册，内部实现其实就是使用 Consul API 进行注册（HttpClient发起）\n            lifetime.ApplicationStopping.Register(() =>\n            {\n                consulClient.Agent.ServiceDeregister(registration.ID).Wait();//服务停止时取消注册\n            });\n            return app;\n        }\n    }\n}\n```\n##### 注意:\n1. 需引入Consul包\n2. ServiceEntity类,定义如下\nServiceEntity.cs\n```cs\nnamespace ConsulApiTest\n{\n    public class ServiceEntity\n    {\n        public string IP { get; set; }\n        public int Port { get; set; }\n        public string ServiceName { get; set; }\n        public string ConsulIP { get; set; }\n        public int ConsulPort { get; set; }\n    }\n}\n```\n3. appSettings.json配置文件 定义如下\nappSettings.json\n```cs\n{\n  \"Service\": {\n    \"Name\": \"DMSWebAPITest\",\n    \"IP\": \"localhost\",\n    \"Port\": \"44330\"//这里需换成项目运行所使用的端口\n  },\n  \"Consul\": {\n    \"IP\": \"localhost\",\n    \"Port\": \"8500\"\n  }\n}\n```\n#### 在Startup.cs中,调用ConsulBuilderExtensions拓展方法\nStartup.cs\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\n\nnamespace ConsulApiTest\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n        }\n\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseHsts();\n            }\n\n            app.UseHttpsRedirection();\n            app.UseMvc();\n            // 服务注册\n            ServiceEntity serviceEntity = new ServiceEntity\n            {\n                IP = Configuration[\"Service:IP\"],\n                Port = Convert.ToInt32(Configuration[\"Service:Port\"]),  \n                ServiceName = Configuration[\"Service:Name\"],\n                ConsulIP = Configuration[\"Consul:IP\"],\n                ConsulPort = Convert.ToInt32(Configuration[\"Consul:Port\"])\n            };\n            app.RegisterConsul(lifetime, serviceEntity);\n        }\n    }\n}\n\n```\n#### 小结\n* 在学习过程还是遇到一些问题,不过最终还是处理好了,有时候可能需要细心一点\n* 以上实现了通过配置文件注册，API接口注册到Consul实例，后续加入Ocelot构建API网关，到时会结合Consul进行进一步的集成，另外，还会尝试Polly进行熔断降级。","source":"_posts/微服务-Consul学习(二).md","raw":"---\ntitle: 微服务-Consul学习(二)\ndate: 2019-03-11 23:43:58\ncategories: 微服务\ntags: \n - .Net Core\n - 微服务\n---\n上一次学习到了在命令行如何去启动和注册服务.今天学习如何通过Consul Api 接口注册服务.\n<!--more-->\n#### 创建一个.Net Core WebApi项目\n模板选择Api.\n#### 创建HealthController,用于Consul的健康检查\nHealthController.cs\n``` cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace ConsulApiTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class HealthController : ControllerBase\n    {\n        [HttpGet]\n        public IActionResult Get() => Ok(\"ok\");\n    }\n}\n```\n#### 创建ConsulBuilderExtensions,用于注册服务\nConsulBuilderExtensions.cs\n```cs\nusing Consul;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing System;\n\nnamespace ConsulApiTest\n{\n    public static class  ConsulBuilderExtensions\n    {\n        public static IApplicationBuilder RegisterConsul(this IApplicationBuilder app, IApplicationLifetime lifetime, ServiceEntity serviceEntity)\n        {\n            var consulClient = new ConsulClient(x => x.Address = new Uri($\"http://{serviceEntity.ConsulIP}:{serviceEntity.ConsulPort}\"));//请求注册的 Consul 地址\n            var httpCheck = new AgentServiceCheck()\n            {\n                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(5),//服务启动多久后注册\n                Interval = TimeSpan.FromSeconds(10),//健康检查时间间隔，或者称为心跳间隔\n                HTTP = $\"https://{serviceEntity.IP}:{serviceEntity.Port}/api/health\",//健康检查地址 (如果项目没有勾选https的话,把https换成http)\n                Timeout = TimeSpan.FromSeconds(5)\n            };\n\n            // Register service with consul\n            var registration = new AgentServiceRegistration()\n            {\n                Checks = new[] { httpCheck },\n                ID = serviceEntity.ServiceName + \"_\" + serviceEntity.Port,\n                Name = serviceEntity.ServiceName,\n                Address = serviceEntity.IP,\n                Port = serviceEntity.Port,\n                Tags = new[] { $\"urlprefix-/{serviceEntity.ServiceName}\" }//添加 urlprefix-/servicename 格式的 tag 标签，以便 Fabio 识别\n            };\n            consulClient.Agent.ServiceRegister(registration).Wait();//服务启动时注册，内部实现其实就是使用 Consul API 进行注册（HttpClient发起）\n            lifetime.ApplicationStopping.Register(() =>\n            {\n                consulClient.Agent.ServiceDeregister(registration.ID).Wait();//服务停止时取消注册\n            });\n            return app;\n        }\n    }\n}\n```\n##### 注意:\n1. 需引入Consul包\n2. ServiceEntity类,定义如下\nServiceEntity.cs\n```cs\nnamespace ConsulApiTest\n{\n    public class ServiceEntity\n    {\n        public string IP { get; set; }\n        public int Port { get; set; }\n        public string ServiceName { get; set; }\n        public string ConsulIP { get; set; }\n        public int ConsulPort { get; set; }\n    }\n}\n```\n3. appSettings.json配置文件 定义如下\nappSettings.json\n```cs\n{\n  \"Service\": {\n    \"Name\": \"DMSWebAPITest\",\n    \"IP\": \"localhost\",\n    \"Port\": \"44330\"//这里需换成项目运行所使用的端口\n  },\n  \"Consul\": {\n    \"IP\": \"localhost\",\n    \"Port\": \"8500\"\n  }\n}\n```\n#### 在Startup.cs中,调用ConsulBuilderExtensions拓展方法\nStartup.cs\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\n\nnamespace ConsulApiTest\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n        }\n\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseHsts();\n            }\n\n            app.UseHttpsRedirection();\n            app.UseMvc();\n            // 服务注册\n            ServiceEntity serviceEntity = new ServiceEntity\n            {\n                IP = Configuration[\"Service:IP\"],\n                Port = Convert.ToInt32(Configuration[\"Service:Port\"]),  \n                ServiceName = Configuration[\"Service:Name\"],\n                ConsulIP = Configuration[\"Consul:IP\"],\n                ConsulPort = Convert.ToInt32(Configuration[\"Consul:Port\"])\n            };\n            app.RegisterConsul(lifetime, serviceEntity);\n        }\n    }\n}\n\n```\n#### 小结\n* 在学习过程还是遇到一些问题,不过最终还是处理好了,有时候可能需要细心一点\n* 以上实现了通过配置文件注册，API接口注册到Consul实例，后续加入Ocelot构建API网关，到时会结合Consul进行进一步的集成，另外，还会尝试Polly进行熔断降级。","slug":"微服务-Consul学习(二)","published":1,"updated":"2021-03-30T03:24:16.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0x005ivcua738nb1un","content":"<p>上一次学习到了在命令行如何去启动和注册服务.今天学习如何通过Consul Api 接口注册服务.</p>\n<span id=\"more\"></span>\n<h4 id=\"创建一个-Net-Core-WebApi项目\"><a href=\"#创建一个-Net-Core-WebApi项目\" class=\"headerlink\" title=\"创建一个.Net Core WebApi项目\"></a>创建一个.Net Core WebApi项目</h4><p>模板选择Api.</p>\n<h4 id=\"创建HealthController-用于Consul的健康检查\"><a href=\"#创建HealthController-用于Consul的健康检查\" class=\"headerlink\" title=\"创建HealthController,用于Consul的健康检查\"></a>创建HealthController,用于Consul的健康检查</h4><p>HealthController.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HealthController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span> =&gt; Ok(<span class=\"string\">&quot;ok&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建ConsulBuilderExtensions-用于注册服务\"><a href=\"#创建ConsulBuilderExtensions-用于注册服务\" class=\"headerlink\" title=\"创建ConsulBuilderExtensions,用于注册服务\"></a>创建ConsulBuilderExtensions,用于注册服务</h4><p>ConsulBuilderExtensions.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Consul;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span>  <span class=\"title\">ConsulBuilderExtensions</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">RegisterConsul</span>(<span class=\"params\"><span class=\"keyword\">this</span> IApplicationBuilder app, IApplicationLifetime lifetime, ServiceEntity serviceEntity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> consulClient = <span class=\"keyword\">new</span> ConsulClient(x =&gt; x.Address = <span class=\"keyword\">new</span> Uri(<span class=\"string\">$&quot;http://<span class=\"subst\">&#123;serviceEntity.ConsulIP&#125;</span>:<span class=\"subst\">&#123;serviceEntity.ConsulPort&#125;</span>&quot;</span>));<span class=\"comment\">//请求注册的 Consul 地址</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> httpCheck = <span class=\"keyword\">new</span> AgentServiceCheck()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(<span class=\"number\">5</span>),<span class=\"comment\">//服务启动多久后注册</span></span><br><span class=\"line\">                Interval = TimeSpan.FromSeconds(<span class=\"number\">10</span>),<span class=\"comment\">//健康检查时间间隔，或者称为心跳间隔</span></span><br><span class=\"line\">                HTTP = <span class=\"string\">$&quot;https://<span class=\"subst\">&#123;serviceEntity.IP&#125;</span>:<span class=\"subst\">&#123;serviceEntity.Port&#125;</span>/api/health&quot;</span>,<span class=\"comment\">//健康检查地址 (如果项目没有勾选https的话,把https换成http)</span></span><br><span class=\"line\">                Timeout = TimeSpan.FromSeconds(<span class=\"number\">5</span>)</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Register service with consul</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> registration = <span class=\"keyword\">new</span> AgentServiceRegistration()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Checks = <span class=\"keyword\">new</span>[] &#123; httpCheck &#125;,</span><br><span class=\"line\">                ID = serviceEntity.ServiceName + <span class=\"string\">&quot;_&quot;</span> + serviceEntity.Port,</span><br><span class=\"line\">                Name = serviceEntity.ServiceName,</span><br><span class=\"line\">                Address = serviceEntity.IP,</span><br><span class=\"line\">                Port = serviceEntity.Port,</span><br><span class=\"line\">                Tags = <span class=\"keyword\">new</span>[] &#123; <span class=\"string\">$&quot;urlprefix-/<span class=\"subst\">&#123;serviceEntity.ServiceName&#125;</span>&quot;</span> &#125;<span class=\"comment\">//添加 urlprefix-/servicename 格式的 tag 标签，以便 Fabio 识别</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            consulClient.Agent.ServiceRegister(registration).Wait();<span class=\"comment\">//服务启动时注册，内部实现其实就是使用 Consul API 进行注册（HttpClient发起）</span></span><br><span class=\"line\">            lifetime.ApplicationStopping.Register(() =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                consulClient.Agent.ServiceDeregister(registration.ID).Wait();<span class=\"comment\">//服务停止时取消注册</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> app;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h5><ol>\n<li>需引入Consul包</li>\n<li>ServiceEntity类,定义如下<br>ServiceEntity.cs<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ServiceEntity</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> IP &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Port &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ServiceName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ConsulIP &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ConsulPort &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>appSettings.json配置文件 定义如下<br>appSettings.json<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Service&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Name&quot;</span>: <span class=\"string\">&quot;DMSWebAPITest&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;IP&quot;</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Port&quot;</span>: <span class=\"string\">&quot;44330&quot;</span><span class=\"comment\">//这里需换成项目运行所使用的端口</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;Consul&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;IP&quot;</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Port&quot;</span>: <span class=\"string\">&quot;8500&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在Startup-cs中-调用ConsulBuilderExtensions拓展方法\"><a href=\"#在Startup-cs中-调用ConsulBuilderExtensions拓展方法\" class=\"headerlink\" title=\"在Startup.cs中,调用ConsulBuilderExtensions拓展方法\"></a>在Startup.cs中,调用ConsulBuilderExtensions拓展方法</h4>Startup.cs<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Configuration = configuration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseDeveloperExceptionPage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseHsts();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            app.UseHttpsRedirection();</span><br><span class=\"line\">            app.UseMvc();</span><br><span class=\"line\">            <span class=\"comment\">// 服务注册</span></span><br><span class=\"line\">            ServiceEntity serviceEntity = <span class=\"keyword\">new</span> ServiceEntity</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                IP = Configuration[<span class=\"string\">&quot;Service:IP&quot;</span>],</span><br><span class=\"line\">                Port = Convert.ToInt32(Configuration[<span class=\"string\">&quot;Service:Port&quot;</span>]),  </span><br><span class=\"line\">                ServiceName = Configuration[<span class=\"string\">&quot;Service:Name&quot;</span>],</span><br><span class=\"line\">                ConsulIP = Configuration[<span class=\"string\">&quot;Consul:IP&quot;</span>],</span><br><span class=\"line\">                ConsulPort = Convert.ToInt32(Configuration[<span class=\"string\">&quot;Consul:Port&quot;</span>])</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            app.RegisterConsul(lifetime, serviceEntity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4></li>\n</ol>\n<ul>\n<li>在学习过程还是遇到一些问题,不过最终还是处理好了,有时候可能需要细心一点</li>\n<li>以上实现了通过配置文件注册，API接口注册到Consul实例，后续加入Ocelot构建API网关，到时会结合Consul进行进一步的集成，另外，还会尝试Polly进行熔断降级。</li>\n</ul>\n","site":{"data":{}},"length":4100,"excerpt":"<p>上一次学习到了在命令行如何去启动和注册服务.今天学习如何通过Consul Api 接口注册服务.</p>","more":"<h4 id=\"创建一个-Net-Core-WebApi项目\"><a href=\"#创建一个-Net-Core-WebApi项目\" class=\"headerlink\" title=\"创建一个.Net Core WebApi项目\"></a>创建一个.Net Core WebApi项目</h4><p>模板选择Api.</p>\n<h4 id=\"创建HealthController-用于Consul的健康检查\"><a href=\"#创建HealthController-用于Consul的健康检查\" class=\"headerlink\" title=\"创建HealthController,用于Consul的健康检查\"></a>创建HealthController,用于Consul的健康检查</h4><p>HealthController.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HealthController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span> =&gt; Ok(<span class=\"string\">&quot;ok&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建ConsulBuilderExtensions-用于注册服务\"><a href=\"#创建ConsulBuilderExtensions-用于注册服务\" class=\"headerlink\" title=\"创建ConsulBuilderExtensions,用于注册服务\"></a>创建ConsulBuilderExtensions,用于注册服务</h4><p>ConsulBuilderExtensions.cs</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Consul;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span>  <span class=\"title\">ConsulBuilderExtensions</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">RegisterConsul</span>(<span class=\"params\"><span class=\"keyword\">this</span> IApplicationBuilder app, IApplicationLifetime lifetime, ServiceEntity serviceEntity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> consulClient = <span class=\"keyword\">new</span> ConsulClient(x =&gt; x.Address = <span class=\"keyword\">new</span> Uri(<span class=\"string\">$&quot;http://<span class=\"subst\">&#123;serviceEntity.ConsulIP&#125;</span>:<span class=\"subst\">&#123;serviceEntity.ConsulPort&#125;</span>&quot;</span>));<span class=\"comment\">//请求注册的 Consul 地址</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> httpCheck = <span class=\"keyword\">new</span> AgentServiceCheck()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(<span class=\"number\">5</span>),<span class=\"comment\">//服务启动多久后注册</span></span><br><span class=\"line\">                Interval = TimeSpan.FromSeconds(<span class=\"number\">10</span>),<span class=\"comment\">//健康检查时间间隔，或者称为心跳间隔</span></span><br><span class=\"line\">                HTTP = <span class=\"string\">$&quot;https://<span class=\"subst\">&#123;serviceEntity.IP&#125;</span>:<span class=\"subst\">&#123;serviceEntity.Port&#125;</span>/api/health&quot;</span>,<span class=\"comment\">//健康检查地址 (如果项目没有勾选https的话,把https换成http)</span></span><br><span class=\"line\">                Timeout = TimeSpan.FromSeconds(<span class=\"number\">5</span>)</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Register service with consul</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> registration = <span class=\"keyword\">new</span> AgentServiceRegistration()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Checks = <span class=\"keyword\">new</span>[] &#123; httpCheck &#125;,</span><br><span class=\"line\">                ID = serviceEntity.ServiceName + <span class=\"string\">&quot;_&quot;</span> + serviceEntity.Port,</span><br><span class=\"line\">                Name = serviceEntity.ServiceName,</span><br><span class=\"line\">                Address = serviceEntity.IP,</span><br><span class=\"line\">                Port = serviceEntity.Port,</span><br><span class=\"line\">                Tags = <span class=\"keyword\">new</span>[] &#123; <span class=\"string\">$&quot;urlprefix-/<span class=\"subst\">&#123;serviceEntity.ServiceName&#125;</span>&quot;</span> &#125;<span class=\"comment\">//添加 urlprefix-/servicename 格式的 tag 标签，以便 Fabio 识别</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            consulClient.Agent.ServiceRegister(registration).Wait();<span class=\"comment\">//服务启动时注册，内部实现其实就是使用 Consul API 进行注册（HttpClient发起）</span></span><br><span class=\"line\">            lifetime.ApplicationStopping.Register(() =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                consulClient.Agent.ServiceDeregister(registration.ID).Wait();<span class=\"comment\">//服务停止时取消注册</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> app;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h5><ol>\n<li>需引入Consul包</li>\n<li>ServiceEntity类,定义如下<br>ServiceEntity.cs<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ServiceEntity</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> IP &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Port &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ServiceName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ConsulIP &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ConsulPort &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>appSettings.json配置文件 定义如下<br>appSettings.json<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Service&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Name&quot;</span>: <span class=\"string\">&quot;DMSWebAPITest&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;IP&quot;</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Port&quot;</span>: <span class=\"string\">&quot;44330&quot;</span><span class=\"comment\">//这里需换成项目运行所使用的端口</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;Consul&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;IP&quot;</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Port&quot;</span>: <span class=\"string\">&quot;8500&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在Startup-cs中-调用ConsulBuilderExtensions拓展方法\"><a href=\"#在Startup-cs中-调用ConsulBuilderExtensions拓展方法\" class=\"headerlink\" title=\"在Startup.cs中,调用ConsulBuilderExtensions拓展方法\"></a>在Startup.cs中,调用ConsulBuilderExtensions拓展方法</h4>Startup.cs<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Configuration = configuration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseDeveloperExceptionPage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseHsts();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            app.UseHttpsRedirection();</span><br><span class=\"line\">            app.UseMvc();</span><br><span class=\"line\">            <span class=\"comment\">// 服务注册</span></span><br><span class=\"line\">            ServiceEntity serviceEntity = <span class=\"keyword\">new</span> ServiceEntity</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                IP = Configuration[<span class=\"string\">&quot;Service:IP&quot;</span>],</span><br><span class=\"line\">                Port = Convert.ToInt32(Configuration[<span class=\"string\">&quot;Service:Port&quot;</span>]),  </span><br><span class=\"line\">                ServiceName = Configuration[<span class=\"string\">&quot;Service:Name&quot;</span>],</span><br><span class=\"line\">                ConsulIP = Configuration[<span class=\"string\">&quot;Consul:IP&quot;</span>],</span><br><span class=\"line\">                ConsulPort = Convert.ToInt32(Configuration[<span class=\"string\">&quot;Consul:Port&quot;</span>])</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            app.RegisterConsul(lifetime, serviceEntity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4></li>\n</ol>\n<ul>\n<li>在学习过程还是遇到一些问题,不过最终还是处理好了,有时候可能需要细心一点</li>\n<li>以上实现了通过配置文件注册，API接口注册到Consul实例，后续加入Ocelot构建API网关，到时会结合Consul进行进一步的集成，另外，还会尝试Polly进行熔断降级。</li>\n</ul>"},{"title":"微服务-Consul学习","date":"2019-03-05T15:18:12.000Z","_content":"#### Consul介绍：\n> Consul 是由 HashiCorp 公司推出的开源软件，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。Consul使用Go语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与Docker等轻量级容器可无缝配合 。\n<!--more-->\n#### Consul安装\n从consul官网 https://www.consul.io/downloads.html 进行下载就好（选择好OS和位数）\n1. 解压下载好的压缩文件\n2. Windows需配置环境变量path.\n3. 查看是否安装成功\n直接在家目录下执行consul命令即可。出现usage: consul [--version] [--help] <command> [<args>]等字样，表示安装成功。\n#### Consul启动\n1. 运行命令\n```\nconsul agent -dev //-dev表示开发模式运行，-server表示服务模式运行\n```\n2. 查看consul cluster中的每一个consul节点的信息\n```\nconsul members //信息说明 Address：节点地址 Status：alive表示节点健康 Type：server运行状态是server状态 DC：dc1表示该节点属于DataCenter1 \n```\n3. 访问Consul\nhttp://127.0.0.1:8500/ui/\n4. 停止服务\nCTRL+C\n#### 常用命令\n\n| 命令 | 说明 | 示例 |\n| :------: | :------: | :------: |\n| agent | 运行一个consul agent | consul agent -dev |\n| join | 将agent加入到consul集群 | consul join IP |\n| agent | 列出consul cluster集群中的节点 | consul members |\n| agent | 将节点移除所在集群 | consul leave |\n#### consul agent 命令常用选项\n* -data-dir 指定agent储存状态的数据目录(必须)\n* -config-dir 指定service的配置文件和检查定义所在的位置\n* -config-file 指定一个要装载的配置文件\n* -dev 创建开发环境的server节点\n* -bootstrap-expect 预加入的server节点个数,在指定数量节点加入后启动\n* -node 指定节点在集群的名称\n* -bind 指定节点IP地址\n* -server 指定节点为server\n* -client 指定节点为client(后面接IP 可指定允许客户端使用什么IP去访问)\n* -join 将节点加入集群\n* -datecenter 指点节点加入哪个数据中心\n","source":"_posts/微服务-Consul学习.md","raw":"---\ntitle: 微服务-Consul学习\ndate: 2019-03-05 23:18:12\ncategories: 微服务\ntags: \n - .Net Core\n - 微服务\n---\n#### Consul介绍：\n> Consul 是由 HashiCorp 公司推出的开源软件，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。Consul使用Go语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与Docker等轻量级容器可无缝配合 。\n<!--more-->\n#### Consul安装\n从consul官网 https://www.consul.io/downloads.html 进行下载就好（选择好OS和位数）\n1. 解压下载好的压缩文件\n2. Windows需配置环境变量path.\n3. 查看是否安装成功\n直接在家目录下执行consul命令即可。出现usage: consul [--version] [--help] <command> [<args>]等字样，表示安装成功。\n#### Consul启动\n1. 运行命令\n```\nconsul agent -dev //-dev表示开发模式运行，-server表示服务模式运行\n```\n2. 查看consul cluster中的每一个consul节点的信息\n```\nconsul members //信息说明 Address：节点地址 Status：alive表示节点健康 Type：server运行状态是server状态 DC：dc1表示该节点属于DataCenter1 \n```\n3. 访问Consul\nhttp://127.0.0.1:8500/ui/\n4. 停止服务\nCTRL+C\n#### 常用命令\n\n| 命令 | 说明 | 示例 |\n| :------: | :------: | :------: |\n| agent | 运行一个consul agent | consul agent -dev |\n| join | 将agent加入到consul集群 | consul join IP |\n| agent | 列出consul cluster集群中的节点 | consul members |\n| agent | 将节点移除所在集群 | consul leave |\n#### consul agent 命令常用选项\n* -data-dir 指定agent储存状态的数据目录(必须)\n* -config-dir 指定service的配置文件和检查定义所在的位置\n* -config-file 指定一个要装载的配置文件\n* -dev 创建开发环境的server节点\n* -bootstrap-expect 预加入的server节点个数,在指定数量节点加入后启动\n* -node 指定节点在集群的名称\n* -bind 指定节点IP地址\n* -server 指定节点为server\n* -client 指定节点为client(后面接IP 可指定允许客户端使用什么IP去访问)\n* -join 将节点加入集群\n* -datecenter 指点节点加入哪个数据中心\n","slug":"微服务-Consul学习","published":1,"updated":"2021-03-30T03:24:16.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx0y005kvcua14t3cujf","content":"<h4 id=\"Consul介绍：\"><a href=\"#Consul介绍：\" class=\"headerlink\" title=\"Consul介绍：\"></a>Consul介绍：</h4><blockquote>\n<p>Consul 是由 HashiCorp 公司推出的开源软件，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。Consul使用Go语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与Docker等轻量级容器可无缝配合 。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h4 id=\"Consul安装\"><a href=\"#Consul安装\" class=\"headerlink\" title=\"Consul安装\"></a>Consul安装</h4><p>从consul官网 <a href=\"https://www.consul.io/downloads.html\">https://www.consul.io/downloads.html</a> 进行下载就好（选择好OS和位数）</p>\n<ol>\n<li>解压下载好的压缩文件</li>\n<li>Windows需配置环境变量path.</li>\n<li>查看是否安装成功<br>直接在家目录下执行consul命令即可。出现usage: consul [–version] [–help] <command> [<args>]等字样，表示安装成功。<h4 id=\"Consul启动\"><a href=\"#Consul启动\" class=\"headerlink\" title=\"Consul启动\"></a>Consul启动</h4></li>\n<li>运行命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent -dev &#x2F;&#x2F;-dev表示开发模式运行，-server表示服务模式运行</span><br></pre></td></tr></table></figure></li>\n<li>查看consul cluster中的每一个consul节点的信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul members &#x2F;&#x2F;信息说明 Address：节点地址 Status：alive表示节点健康 Type：server运行状态是server状态 DC：dc1表示该节点属于DataCenter1 </span><br></pre></td></tr></table></figure></li>\n<li>访问Consul<br><a href=\"http://127.0.0.1:8500/ui/\">http://127.0.0.1:8500/ui/</a></li>\n<li>停止服务<br>CTRL+C<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">agent</td>\n<td align=\"center\">运行一个consul agent</td>\n<td align=\"center\">consul agent -dev</td>\n</tr>\n<tr>\n<td align=\"center\">join</td>\n<td align=\"center\">将agent加入到consul集群</td>\n<td align=\"center\">consul join IP</td>\n</tr>\n<tr>\n<td align=\"center\">agent</td>\n<td align=\"center\">列出consul cluster集群中的节点</td>\n<td align=\"center\">consul members</td>\n</tr>\n<tr>\n<td align=\"center\">agent</td>\n<td align=\"center\">将节点移除所在集群</td>\n<td align=\"center\">consul leave</td>\n</tr>\n</tbody></table>\n<h4 id=\"consul-agent-命令常用选项\"><a href=\"#consul-agent-命令常用选项\" class=\"headerlink\" title=\"consul agent 命令常用选项\"></a>consul agent 命令常用选项</h4><ul>\n<li>-data-dir 指定agent储存状态的数据目录(必须)</li>\n<li>-config-dir 指定service的配置文件和检查定义所在的位置</li>\n<li>-config-file 指定一个要装载的配置文件</li>\n<li>-dev 创建开发环境的server节点</li>\n<li>-bootstrap-expect 预加入的server节点个数,在指定数量节点加入后启动</li>\n<li>-node 指定节点在集群的名称</li>\n<li>-bind 指定节点IP地址</li>\n<li>-server 指定节点为server</li>\n<li>-client 指定节点为client(后面接IP 可指定允许客户端使用什么IP去访问)</li>\n<li>-join 将节点加入集群</li>\n<li>-datecenter 指点节点加入哪个数据中心</li>\n</ul>\n","site":{"data":{}},"length":1111,"excerpt":"<h4 id=\"Consul介绍：\"><a href=\"#Consul介绍：\" class=\"headerlink\" title=\"Consul介绍：\"></a>Consul介绍：</h4><blockquote>\n<p>Consul 是由 HashiCorp 公司推出的开源软件，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。Consul使用Go语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与Docker等轻量级容器可无缝配合 。</p>\n</blockquote>","more":"<h4 id=\"Consul安装\"><a href=\"#Consul安装\" class=\"headerlink\" title=\"Consul安装\"></a>Consul安装</h4><p>从consul官网 <a href=\"https://www.consul.io/downloads.html\">https://www.consul.io/downloads.html</a> 进行下载就好（选择好OS和位数）</p>\n<ol>\n<li>解压下载好的压缩文件</li>\n<li>Windows需配置环境变量path.</li>\n<li>查看是否安装成功<br>直接在家目录下执行consul命令即可。出现usage: consul [–version] [–help] <command> [<args>]等字样，表示安装成功。<h4 id=\"Consul启动\"><a href=\"#Consul启动\" class=\"headerlink\" title=\"Consul启动\"></a>Consul启动</h4></li>\n<li>运行命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent -dev &#x2F;&#x2F;-dev表示开发模式运行，-server表示服务模式运行</span><br></pre></td></tr></table></figure></li>\n<li>查看consul cluster中的每一个consul节点的信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul members &#x2F;&#x2F;信息说明 Address：节点地址 Status：alive表示节点健康 Type：server运行状态是server状态 DC：dc1表示该节点属于DataCenter1 </span><br></pre></td></tr></table></figure></li>\n<li>访问Consul<br><a href=\"http://127.0.0.1:8500/ui/\">http://127.0.0.1:8500/ui/</a></li>\n<li>停止服务<br>CTRL+C<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">agent</td>\n<td align=\"center\">运行一个consul agent</td>\n<td align=\"center\">consul agent -dev</td>\n</tr>\n<tr>\n<td align=\"center\">join</td>\n<td align=\"center\">将agent加入到consul集群</td>\n<td align=\"center\">consul join IP</td>\n</tr>\n<tr>\n<td align=\"center\">agent</td>\n<td align=\"center\">列出consul cluster集群中的节点</td>\n<td align=\"center\">consul members</td>\n</tr>\n<tr>\n<td align=\"center\">agent</td>\n<td align=\"center\">将节点移除所在集群</td>\n<td align=\"center\">consul leave</td>\n</tr>\n</tbody></table>\n<h4 id=\"consul-agent-命令常用选项\"><a href=\"#consul-agent-命令常用选项\" class=\"headerlink\" title=\"consul agent 命令常用选项\"></a>consul agent 命令常用选项</h4><ul>\n<li>-data-dir 指定agent储存状态的数据目录(必须)</li>\n<li>-config-dir 指定service的配置文件和检查定义所在的位置</li>\n<li>-config-file 指定一个要装载的配置文件</li>\n<li>-dev 创建开发环境的server节点</li>\n<li>-bootstrap-expect 预加入的server节点个数,在指定数量节点加入后启动</li>\n<li>-node 指定节点在集群的名称</li>\n<li>-bind 指定节点IP地址</li>\n<li>-server 指定节点为server</li>\n<li>-client 指定节点为client(后面接IP 可指定允许客户端使用什么IP去访问)</li>\n<li>-join 将节点加入集群</li>\n<li>-datecenter 指点节点加入哪个数据中心</li>\n</ul>"},{"title":"掌握习惯--原子习惯:细微改变带来巨大成就的实证法则(二)","date":"2020-03-09T23:04:09.000Z","_content":"\n昨天学习完前面的三大定律,今天继续第四定律的阅读和高级战术.\n<!---more-->\n\n### 第四定律 让它令人愉悦\n\n#### 第15章 行为转变的基本准则\n\n* 行为转变的第四条定律是让它令人愉悦.\n\n* 当体验令人愉悦时,我们更有可能重复一种行为.\n\n* 人脑进化为优先考虑即时奖励而不是延迟奖励.\n\n* 行为转变的基本准则:重复有即时回报的行为;避免受即时惩罚的动作.\n\n* 要保持一个习惯,你需要有即时成就感,即使它体现在细微之处.\n\n* 行为转变的前三条定律--让它显而易见,让它有吸引力,让它简便易行--提高了这种行为当即发生的概率.行为转变的第四定律--让它令人愉悦--提高了这种行为得以重复的可能性.\n\n#### 第16章 怎样天天保持好习惯\n\n* 最令人满意的感觉之一是进步的感觉.\n\n* 习惯追踪法是衡量你是否养成了习惯的简单方法,比如在日历上打叉.\n\n* 习惯追踪法和其他视觉度量形式可以清晰无误地证明你取得的进步,从而让你对自己培养习惯的进程感到满意.\n\n* 不要中断培养习惯的进程,要坚持不懈.\n\n* 习惯叠加+习惯追踪公式是:在[当前习惯]之后,我将[追踪我的习惯].\n\n* 绝不错过两次.如果你错过了一天,试着尽快恢复固有的做事节奏.\n\n* 仅仅因为你能测量一些东西并不意味着它们最重要.\n\n#### 第17章 问责伙伴何以能改变一切\n\n* 行为转变第四定律倒过来用就是让它令人厌恶.\n\n* 如果不良习惯附加着令人痛苦或不愉快的感受,我们就不太可能重复它.\n\n* 问责伙伴可以对无所事事带来及时成本.我们非常在意别人对我们的看法,极不情愿感受别人的鄙视.\n\n* 习惯契约可被用来增加任何行为的社会成本,它使得违背承诺的代价公开而痛苦.\n\n* 知道别人在看着你,可以成为一种强大的动力.\n\n#### 汇总\n\n怎么养成好习惯\n| 定律  | 描述 |\n|:-----:|:-----|\n| 第一定律 | 让它显而易见 |\n| 1.1 | 填写\"习惯积分卡\":记下你当前的习惯并留意它们 |\n| 1.2 | 应用执行意图:\"我将于[时间]在[地点][行为].\" |\n| 1.3 | 应用习惯叠加:\"继[当前习惯]之后,我将会[新习惯].\" |\n| 1.4 | 设计你的环境,让好习惯的提示清晰明了\" |\n| 第二定律 | 让它有吸引力 |\n| 2.1 | 利用喜好绑定.用你喜好的行为强化你需要的动作 |\n| 2.2 | 加入把你喜好的行为视为正常行为的文化群体 |\n| 2.3 | 创设一种激励仪式.在实施低频行动之前先做一件你特别喜好的事 |\n| 第三定律 | 让它简便易行 |\n| 3.1 | 减少阻力.减少培养好习惯的步骤 |\n| 3.2 | 备好环境.创造一种有利于未来行为的环境 |\n| 3.3 | 把握好决定性时刻.优化可以产生重大影响的小选择 |\n| 3.4 | 利用两分钟准则.缩短你的习惯所占用的时间,争取只需要两分钟甚至更少 |\n| 3.5 | 自动化你的习惯.在能够锁定你未来行为和技术和物品上有所投入 |\n| 第四定律 | 让它令人预约 |\n| 4.1 | 利用增强法.完成一套习惯动作后立即奖励自己 |\n| 4.2 | 让\"无所事事\"变得愉快.当避免坏习惯时,设计一种让由此带来的好处显而易见的方式 |\n| 4.3 | 利用习惯追踪法.记录习惯倾向,不要中断 |\n| 4.4 | 绝不连续错过两次.如果你忘了做,一定要尽快补救 |\n\n怎么戒除坏习惯\n| 定律  | 描述 |\n|:-----:|:-----|\n| 第一定律反用 | 让它脱离视线 |\n| 1.5 | 降低出现频率.把坏习惯的提示清除出你所在的环境 |\n| 第二定律反用 | 让它缺乏吸引力 |\n| 2.4 | 重新梳理你的思路.罗列出戒除坏习惯所带来的益处 |\n| 第三定律反用 | 让它难以施行 |\n| 3.6 | 增大阻力.增加实行坏习惯的步骤 |\n| 3.7 | 利用承诺机制.锁定未来会有利于你的选择项 |\n| 第四定律反用 | 让它令人厌恶 |\n| 4.5 | 找一个问责伙伴.请人监督你的行为 |\n| 4.6 | 创立习惯契约.让坏习惯的恶果公开化并令人难以忍受 |\n\n### 高级战术 怎么从单纯的好转向真正的伟大\n\n#### 第18章 揭秘天才(当基因重要和无关紧要时)\n\n* 最大限度地提高成功概率的秘诀是选对你参与竞争的领域.\n\n* 习惯选择正确,进步易如反掌.习惯选择错误,生活就步步维艰.\n\n* 基因难以改变,这意味着环境有利时,它们让你享有强大的优势;环境不利时,它们带给你明显的劣势.\n\n* 当你的习惯与天赋相匹配时,你就容易养成并维持那种习惯.选择最适合你的习惯,\n\n* 选择能发扬你的长处的游戏.如果你找不到,就自创一个.\n\n* 基因并不能排除艰苦努力的需要.它们只会帮着甄别,告诉我们该努力做什么事.\n\n#### 第19章 金发女孩准则:如何在生活和工作中保持充沛动力\n\n* 金发女孩准则提出,人们在处理其能力可及的事务时积极性最高.\n\n* 成功的最大威胁不是失败,而是倦怠.\n\n* 随着习惯称为常规,它们变得不那么有趣,也不那么令人满意.我们开始感到无聊.\n\n* 每个人受到激励时都能努力工作.但当工作不那么令人兴奋时,仍能继续奋进的则是人中佼佼者.\n\n* 专业人员依照既定计划行事,毫不动摇;业余爱好者则随波逐流,任性而为.\n\n#### 第20章 培养好习惯的负面影响\n\n* 习惯的好处是我们可以不假思索地行事,缺点是我们不再关注小错误.\n\n* 习惯动作+刻意练习=精通\n\n* 反思和回顾是一个过程,使你能够时刻关注自己的表现\n\n* 我们越是执着于一个身份,就越难超越它.避免让你身份的任何单一属性主导你的为人处事.\n\n#### 结论 获得持久成果的秘诀\n\n一个小小的改变能改变你的人生吗?你不太可能说是的.但是如果你又做了一个呢?又做了另一个呢?接着又做了另一个呢?在某个时刻.你会不得不承认你的人生被一个小小的变化改变了?习惯转变的\"圣杯\"不是单个1%的改进,而是成千个.他是无数微习惯堆积起来的结果,其中每个微习惯都是构成整个系统的基本单元.\n\n有时候一个习惯很难记住,你需要让它显而易见.其他时候,你不想开始培养习惯,你需要让它有吸引力.在许多情况下,你可能会发现太难养成习惯,你需要让它简便易行.有时候,你不想坚持下去,你需要让它令人愉悦.\n\n每当你想要自我提高时,你都可以围绕行为转变四定律循序渐进地发展,知道你发现下一个瓶颈.让它显而易见.让它有吸引力.让它简便易行,让它令人愉悦.一圈又一圈地循环发展.不停地寻求用来获得1%的进步的新方法.\n\n获得持久成果的秘诀是不断进步,永不停歇.只要你一刻不停,坚持下去,你难以想象自己能去的多么伟大的成就.小习惯不会简单相加,它们会复合.\n","source":"_posts/掌握习惯-原子习惯-细微改变带来巨大成就的实证法则-二.md","raw":"---\ntitle: '掌握习惯--原子习惯:细微改变带来巨大成就的实证法则(二)'\ndate: 2020-03-10 07:04:09\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 习惯\n---\n\n昨天学习完前面的三大定律,今天继续第四定律的阅读和高级战术.\n<!---more-->\n\n### 第四定律 让它令人愉悦\n\n#### 第15章 行为转变的基本准则\n\n* 行为转变的第四条定律是让它令人愉悦.\n\n* 当体验令人愉悦时,我们更有可能重复一种行为.\n\n* 人脑进化为优先考虑即时奖励而不是延迟奖励.\n\n* 行为转变的基本准则:重复有即时回报的行为;避免受即时惩罚的动作.\n\n* 要保持一个习惯,你需要有即时成就感,即使它体现在细微之处.\n\n* 行为转变的前三条定律--让它显而易见,让它有吸引力,让它简便易行--提高了这种行为当即发生的概率.行为转变的第四定律--让它令人愉悦--提高了这种行为得以重复的可能性.\n\n#### 第16章 怎样天天保持好习惯\n\n* 最令人满意的感觉之一是进步的感觉.\n\n* 习惯追踪法是衡量你是否养成了习惯的简单方法,比如在日历上打叉.\n\n* 习惯追踪法和其他视觉度量形式可以清晰无误地证明你取得的进步,从而让你对自己培养习惯的进程感到满意.\n\n* 不要中断培养习惯的进程,要坚持不懈.\n\n* 习惯叠加+习惯追踪公式是:在[当前习惯]之后,我将[追踪我的习惯].\n\n* 绝不错过两次.如果你错过了一天,试着尽快恢复固有的做事节奏.\n\n* 仅仅因为你能测量一些东西并不意味着它们最重要.\n\n#### 第17章 问责伙伴何以能改变一切\n\n* 行为转变第四定律倒过来用就是让它令人厌恶.\n\n* 如果不良习惯附加着令人痛苦或不愉快的感受,我们就不太可能重复它.\n\n* 问责伙伴可以对无所事事带来及时成本.我们非常在意别人对我们的看法,极不情愿感受别人的鄙视.\n\n* 习惯契约可被用来增加任何行为的社会成本,它使得违背承诺的代价公开而痛苦.\n\n* 知道别人在看着你,可以成为一种强大的动力.\n\n#### 汇总\n\n怎么养成好习惯\n| 定律  | 描述 |\n|:-----:|:-----|\n| 第一定律 | 让它显而易见 |\n| 1.1 | 填写\"习惯积分卡\":记下你当前的习惯并留意它们 |\n| 1.2 | 应用执行意图:\"我将于[时间]在[地点][行为].\" |\n| 1.3 | 应用习惯叠加:\"继[当前习惯]之后,我将会[新习惯].\" |\n| 1.4 | 设计你的环境,让好习惯的提示清晰明了\" |\n| 第二定律 | 让它有吸引力 |\n| 2.1 | 利用喜好绑定.用你喜好的行为强化你需要的动作 |\n| 2.2 | 加入把你喜好的行为视为正常行为的文化群体 |\n| 2.3 | 创设一种激励仪式.在实施低频行动之前先做一件你特别喜好的事 |\n| 第三定律 | 让它简便易行 |\n| 3.1 | 减少阻力.减少培养好习惯的步骤 |\n| 3.2 | 备好环境.创造一种有利于未来行为的环境 |\n| 3.3 | 把握好决定性时刻.优化可以产生重大影响的小选择 |\n| 3.4 | 利用两分钟准则.缩短你的习惯所占用的时间,争取只需要两分钟甚至更少 |\n| 3.5 | 自动化你的习惯.在能够锁定你未来行为和技术和物品上有所投入 |\n| 第四定律 | 让它令人预约 |\n| 4.1 | 利用增强法.完成一套习惯动作后立即奖励自己 |\n| 4.2 | 让\"无所事事\"变得愉快.当避免坏习惯时,设计一种让由此带来的好处显而易见的方式 |\n| 4.3 | 利用习惯追踪法.记录习惯倾向,不要中断 |\n| 4.4 | 绝不连续错过两次.如果你忘了做,一定要尽快补救 |\n\n怎么戒除坏习惯\n| 定律  | 描述 |\n|:-----:|:-----|\n| 第一定律反用 | 让它脱离视线 |\n| 1.5 | 降低出现频率.把坏习惯的提示清除出你所在的环境 |\n| 第二定律反用 | 让它缺乏吸引力 |\n| 2.4 | 重新梳理你的思路.罗列出戒除坏习惯所带来的益处 |\n| 第三定律反用 | 让它难以施行 |\n| 3.6 | 增大阻力.增加实行坏习惯的步骤 |\n| 3.7 | 利用承诺机制.锁定未来会有利于你的选择项 |\n| 第四定律反用 | 让它令人厌恶 |\n| 4.5 | 找一个问责伙伴.请人监督你的行为 |\n| 4.6 | 创立习惯契约.让坏习惯的恶果公开化并令人难以忍受 |\n\n### 高级战术 怎么从单纯的好转向真正的伟大\n\n#### 第18章 揭秘天才(当基因重要和无关紧要时)\n\n* 最大限度地提高成功概率的秘诀是选对你参与竞争的领域.\n\n* 习惯选择正确,进步易如反掌.习惯选择错误,生活就步步维艰.\n\n* 基因难以改变,这意味着环境有利时,它们让你享有强大的优势;环境不利时,它们带给你明显的劣势.\n\n* 当你的习惯与天赋相匹配时,你就容易养成并维持那种习惯.选择最适合你的习惯,\n\n* 选择能发扬你的长处的游戏.如果你找不到,就自创一个.\n\n* 基因并不能排除艰苦努力的需要.它们只会帮着甄别,告诉我们该努力做什么事.\n\n#### 第19章 金发女孩准则:如何在生活和工作中保持充沛动力\n\n* 金发女孩准则提出,人们在处理其能力可及的事务时积极性最高.\n\n* 成功的最大威胁不是失败,而是倦怠.\n\n* 随着习惯称为常规,它们变得不那么有趣,也不那么令人满意.我们开始感到无聊.\n\n* 每个人受到激励时都能努力工作.但当工作不那么令人兴奋时,仍能继续奋进的则是人中佼佼者.\n\n* 专业人员依照既定计划行事,毫不动摇;业余爱好者则随波逐流,任性而为.\n\n#### 第20章 培养好习惯的负面影响\n\n* 习惯的好处是我们可以不假思索地行事,缺点是我们不再关注小错误.\n\n* 习惯动作+刻意练习=精通\n\n* 反思和回顾是一个过程,使你能够时刻关注自己的表现\n\n* 我们越是执着于一个身份,就越难超越它.避免让你身份的任何单一属性主导你的为人处事.\n\n#### 结论 获得持久成果的秘诀\n\n一个小小的改变能改变你的人生吗?你不太可能说是的.但是如果你又做了一个呢?又做了另一个呢?接着又做了另一个呢?在某个时刻.你会不得不承认你的人生被一个小小的变化改变了?习惯转变的\"圣杯\"不是单个1%的改进,而是成千个.他是无数微习惯堆积起来的结果,其中每个微习惯都是构成整个系统的基本单元.\n\n有时候一个习惯很难记住,你需要让它显而易见.其他时候,你不想开始培养习惯,你需要让它有吸引力.在许多情况下,你可能会发现太难养成习惯,你需要让它简便易行.有时候,你不想坚持下去,你需要让它令人愉悦.\n\n每当你想要自我提高时,你都可以围绕行为转变四定律循序渐进地发展,知道你发现下一个瓶颈.让它显而易见.让它有吸引力.让它简便易行,让它令人愉悦.一圈又一圈地循环发展.不停地寻求用来获得1%的进步的新方法.\n\n获得持久成果的秘诀是不断进步,永不停歇.只要你一刻不停,坚持下去,你难以想象自己能去的多么伟大的成就.小习惯不会简单相加,它们会复合.\n","slug":"掌握习惯-原子习惯-细微改变带来巨大成就的实证法则-二","published":1,"updated":"2021-03-30T03:24:16.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx10005ovcuaa5up5i5u","content":"<p>昨天学习完前面的三大定律,今天继续第四定律的阅读和高级战术.</p>\n<!---more-->\n\n<h3 id=\"第四定律-让它令人愉悦\"><a href=\"#第四定律-让它令人愉悦\" class=\"headerlink\" title=\"第四定律 让它令人愉悦\"></a>第四定律 让它令人愉悦</h3><h4 id=\"第15章-行为转变的基本准则\"><a href=\"#第15章-行为转变的基本准则\" class=\"headerlink\" title=\"第15章 行为转变的基本准则\"></a>第15章 行为转变的基本准则</h4><ul>\n<li><p>行为转变的第四条定律是让它令人愉悦.</p>\n</li>\n<li><p>当体验令人愉悦时,我们更有可能重复一种行为.</p>\n</li>\n<li><p>人脑进化为优先考虑即时奖励而不是延迟奖励.</p>\n</li>\n<li><p>行为转变的基本准则:重复有即时回报的行为;避免受即时惩罚的动作.</p>\n</li>\n<li><p>要保持一个习惯,你需要有即时成就感,即使它体现在细微之处.</p>\n</li>\n<li><p>行为转变的前三条定律–让它显而易见,让它有吸引力,让它简便易行–提高了这种行为当即发生的概率.行为转变的第四定律–让它令人愉悦–提高了这种行为得以重复的可能性.</p>\n</li>\n</ul>\n<h4 id=\"第16章-怎样天天保持好习惯\"><a href=\"#第16章-怎样天天保持好习惯\" class=\"headerlink\" title=\"第16章 怎样天天保持好习惯\"></a>第16章 怎样天天保持好习惯</h4><ul>\n<li><p>最令人满意的感觉之一是进步的感觉.</p>\n</li>\n<li><p>习惯追踪法是衡量你是否养成了习惯的简单方法,比如在日历上打叉.</p>\n</li>\n<li><p>习惯追踪法和其他视觉度量形式可以清晰无误地证明你取得的进步,从而让你对自己培养习惯的进程感到满意.</p>\n</li>\n<li><p>不要中断培养习惯的进程,要坚持不懈.</p>\n</li>\n<li><p>习惯叠加+习惯追踪公式是:在[当前习惯]之后,我将[追踪我的习惯].</p>\n</li>\n<li><p>绝不错过两次.如果你错过了一天,试着尽快恢复固有的做事节奏.</p>\n</li>\n<li><p>仅仅因为你能测量一些东西并不意味着它们最重要.</p>\n</li>\n</ul>\n<h4 id=\"第17章-问责伙伴何以能改变一切\"><a href=\"#第17章-问责伙伴何以能改变一切\" class=\"headerlink\" title=\"第17章 问责伙伴何以能改变一切\"></a>第17章 问责伙伴何以能改变一切</h4><ul>\n<li><p>行为转变第四定律倒过来用就是让它令人厌恶.</p>\n</li>\n<li><p>如果不良习惯附加着令人痛苦或不愉快的感受,我们就不太可能重复它.</p>\n</li>\n<li><p>问责伙伴可以对无所事事带来及时成本.我们非常在意别人对我们的看法,极不情愿感受别人的鄙视.</p>\n</li>\n<li><p>习惯契约可被用来增加任何行为的社会成本,它使得违背承诺的代价公开而痛苦.</p>\n</li>\n<li><p>知道别人在看着你,可以成为一种强大的动力.</p>\n</li>\n</ul>\n<h4 id=\"汇总\"><a href=\"#汇总\" class=\"headerlink\" title=\"汇总\"></a>汇总</h4><p>怎么养成好习惯<br>| 定律  | 描述 |<br>|:—–:|:—–|<br>| 第一定律 | 让它显而易见 |<br>| 1.1 | 填写”习惯积分卡”:记下你当前的习惯并留意它们 |<br>| 1.2 | 应用执行意图:”我将于[时间]在[地点][行为].” |<br>| 1.3 | 应用习惯叠加:”继[当前习惯]之后,我将会[新习惯].” |<br>| 1.4 | 设计你的环境,让好习惯的提示清晰明了” |<br>| 第二定律 | 让它有吸引力 |<br>| 2.1 | 利用喜好绑定.用你喜好的行为强化你需要的动作 |<br>| 2.2 | 加入把你喜好的行为视为正常行为的文化群体 |<br>| 2.3 | 创设一种激励仪式.在实施低频行动之前先做一件你特别喜好的事 |<br>| 第三定律 | 让它简便易行 |<br>| 3.1 | 减少阻力.减少培养好习惯的步骤 |<br>| 3.2 | 备好环境.创造一种有利于未来行为的环境 |<br>| 3.3 | 把握好决定性时刻.优化可以产生重大影响的小选择 |<br>| 3.4 | 利用两分钟准则.缩短你的习惯所占用的时间,争取只需要两分钟甚至更少 |<br>| 3.5 | 自动化你的习惯.在能够锁定你未来行为和技术和物品上有所投入 |<br>| 第四定律 | 让它令人预约 |<br>| 4.1 | 利用增强法.完成一套习惯动作后立即奖励自己 |<br>| 4.2 | 让”无所事事”变得愉快.当避免坏习惯时,设计一种让由此带来的好处显而易见的方式 |<br>| 4.3 | 利用习惯追踪法.记录习惯倾向,不要中断 |<br>| 4.4 | 绝不连续错过两次.如果你忘了做,一定要尽快补救 |</p>\n<p>怎么戒除坏习惯<br>| 定律  | 描述 |<br>|:—–:|:—–|<br>| 第一定律反用 | 让它脱离视线 |<br>| 1.5 | 降低出现频率.把坏习惯的提示清除出你所在的环境 |<br>| 第二定律反用 | 让它缺乏吸引力 |<br>| 2.4 | 重新梳理你的思路.罗列出戒除坏习惯所带来的益处 |<br>| 第三定律反用 | 让它难以施行 |<br>| 3.6 | 增大阻力.增加实行坏习惯的步骤 |<br>| 3.7 | 利用承诺机制.锁定未来会有利于你的选择项 |<br>| 第四定律反用 | 让它令人厌恶 |<br>| 4.5 | 找一个问责伙伴.请人监督你的行为 |<br>| 4.6 | 创立习惯契约.让坏习惯的恶果公开化并令人难以忍受 |</p>\n<h3 id=\"高级战术-怎么从单纯的好转向真正的伟大\"><a href=\"#高级战术-怎么从单纯的好转向真正的伟大\" class=\"headerlink\" title=\"高级战术 怎么从单纯的好转向真正的伟大\"></a>高级战术 怎么从单纯的好转向真正的伟大</h3><h4 id=\"第18章-揭秘天才-当基因重要和无关紧要时\"><a href=\"#第18章-揭秘天才-当基因重要和无关紧要时\" class=\"headerlink\" title=\"第18章 揭秘天才(当基因重要和无关紧要时)\"></a>第18章 揭秘天才(当基因重要和无关紧要时)</h4><ul>\n<li><p>最大限度地提高成功概率的秘诀是选对你参与竞争的领域.</p>\n</li>\n<li><p>习惯选择正确,进步易如反掌.习惯选择错误,生活就步步维艰.</p>\n</li>\n<li><p>基因难以改变,这意味着环境有利时,它们让你享有强大的优势;环境不利时,它们带给你明显的劣势.</p>\n</li>\n<li><p>当你的习惯与天赋相匹配时,你就容易养成并维持那种习惯.选择最适合你的习惯,</p>\n</li>\n<li><p>选择能发扬你的长处的游戏.如果你找不到,就自创一个.</p>\n</li>\n<li><p>基因并不能排除艰苦努力的需要.它们只会帮着甄别,告诉我们该努力做什么事.</p>\n</li>\n</ul>\n<h4 id=\"第19章-金发女孩准则-如何在生活和工作中保持充沛动力\"><a href=\"#第19章-金发女孩准则-如何在生活和工作中保持充沛动力\" class=\"headerlink\" title=\"第19章 金发女孩准则:如何在生活和工作中保持充沛动力\"></a>第19章 金发女孩准则:如何在生活和工作中保持充沛动力</h4><ul>\n<li><p>金发女孩准则提出,人们在处理其能力可及的事务时积极性最高.</p>\n</li>\n<li><p>成功的最大威胁不是失败,而是倦怠.</p>\n</li>\n<li><p>随着习惯称为常规,它们变得不那么有趣,也不那么令人满意.我们开始感到无聊.</p>\n</li>\n<li><p>每个人受到激励时都能努力工作.但当工作不那么令人兴奋时,仍能继续奋进的则是人中佼佼者.</p>\n</li>\n<li><p>专业人员依照既定计划行事,毫不动摇;业余爱好者则随波逐流,任性而为.</p>\n</li>\n</ul>\n<h4 id=\"第20章-培养好习惯的负面影响\"><a href=\"#第20章-培养好习惯的负面影响\" class=\"headerlink\" title=\"第20章 培养好习惯的负面影响\"></a>第20章 培养好习惯的负面影响</h4><ul>\n<li><p>习惯的好处是我们可以不假思索地行事,缺点是我们不再关注小错误.</p>\n</li>\n<li><p>习惯动作+刻意练习=精通</p>\n</li>\n<li><p>反思和回顾是一个过程,使你能够时刻关注自己的表现</p>\n</li>\n<li><p>我们越是执着于一个身份,就越难超越它.避免让你身份的任何单一属性主导你的为人处事.</p>\n</li>\n</ul>\n<h4 id=\"结论-获得持久成果的秘诀\"><a href=\"#结论-获得持久成果的秘诀\" class=\"headerlink\" title=\"结论 获得持久成果的秘诀\"></a>结论 获得持久成果的秘诀</h4><p>一个小小的改变能改变你的人生吗?你不太可能说是的.但是如果你又做了一个呢?又做了另一个呢?接着又做了另一个呢?在某个时刻.你会不得不承认你的人生被一个小小的变化改变了?习惯转变的”圣杯”不是单个1%的改进,而是成千个.他是无数微习惯堆积起来的结果,其中每个微习惯都是构成整个系统的基本单元.</p>\n<p>有时候一个习惯很难记住,你需要让它显而易见.其他时候,你不想开始培养习惯,你需要让它有吸引力.在许多情况下,你可能会发现太难养成习惯,你需要让它简便易行.有时候,你不想坚持下去,你需要让它令人愉悦.</p>\n<p>每当你想要自我提高时,你都可以围绕行为转变四定律循序渐进地发展,知道你发现下一个瓶颈.让它显而易见.让它有吸引力.让它简便易行,让它令人愉悦.一圈又一圈地循环发展.不停地寻求用来获得1%的进步的新方法.</p>\n<p>获得持久成果的秘诀是不断进步,永不停歇.只要你一刻不停,坚持下去,你难以想象自己能去的多么伟大的成就.小习惯不会简单相加,它们会复合.</p>\n","site":{"data":{}},"length":2414,"excerpt":"","more":"<p>昨天学习完前面的三大定律,今天继续第四定律的阅读和高级战术.</p>\n<!---more-->\n\n<h3 id=\"第四定律-让它令人愉悦\"><a href=\"#第四定律-让它令人愉悦\" class=\"headerlink\" title=\"第四定律 让它令人愉悦\"></a>第四定律 让它令人愉悦</h3><h4 id=\"第15章-行为转变的基本准则\"><a href=\"#第15章-行为转变的基本准则\" class=\"headerlink\" title=\"第15章 行为转变的基本准则\"></a>第15章 行为转变的基本准则</h4><ul>\n<li><p>行为转变的第四条定律是让它令人愉悦.</p>\n</li>\n<li><p>当体验令人愉悦时,我们更有可能重复一种行为.</p>\n</li>\n<li><p>人脑进化为优先考虑即时奖励而不是延迟奖励.</p>\n</li>\n<li><p>行为转变的基本准则:重复有即时回报的行为;避免受即时惩罚的动作.</p>\n</li>\n<li><p>要保持一个习惯,你需要有即时成就感,即使它体现在细微之处.</p>\n</li>\n<li><p>行为转变的前三条定律–让它显而易见,让它有吸引力,让它简便易行–提高了这种行为当即发生的概率.行为转变的第四定律–让它令人愉悦–提高了这种行为得以重复的可能性.</p>\n</li>\n</ul>\n<h4 id=\"第16章-怎样天天保持好习惯\"><a href=\"#第16章-怎样天天保持好习惯\" class=\"headerlink\" title=\"第16章 怎样天天保持好习惯\"></a>第16章 怎样天天保持好习惯</h4><ul>\n<li><p>最令人满意的感觉之一是进步的感觉.</p>\n</li>\n<li><p>习惯追踪法是衡量你是否养成了习惯的简单方法,比如在日历上打叉.</p>\n</li>\n<li><p>习惯追踪法和其他视觉度量形式可以清晰无误地证明你取得的进步,从而让你对自己培养习惯的进程感到满意.</p>\n</li>\n<li><p>不要中断培养习惯的进程,要坚持不懈.</p>\n</li>\n<li><p>习惯叠加+习惯追踪公式是:在[当前习惯]之后,我将[追踪我的习惯].</p>\n</li>\n<li><p>绝不错过两次.如果你错过了一天,试着尽快恢复固有的做事节奏.</p>\n</li>\n<li><p>仅仅因为你能测量一些东西并不意味着它们最重要.</p>\n</li>\n</ul>\n<h4 id=\"第17章-问责伙伴何以能改变一切\"><a href=\"#第17章-问责伙伴何以能改变一切\" class=\"headerlink\" title=\"第17章 问责伙伴何以能改变一切\"></a>第17章 问责伙伴何以能改变一切</h4><ul>\n<li><p>行为转变第四定律倒过来用就是让它令人厌恶.</p>\n</li>\n<li><p>如果不良习惯附加着令人痛苦或不愉快的感受,我们就不太可能重复它.</p>\n</li>\n<li><p>问责伙伴可以对无所事事带来及时成本.我们非常在意别人对我们的看法,极不情愿感受别人的鄙视.</p>\n</li>\n<li><p>习惯契约可被用来增加任何行为的社会成本,它使得违背承诺的代价公开而痛苦.</p>\n</li>\n<li><p>知道别人在看着你,可以成为一种强大的动力.</p>\n</li>\n</ul>\n<h4 id=\"汇总\"><a href=\"#汇总\" class=\"headerlink\" title=\"汇总\"></a>汇总</h4><p>怎么养成好习惯<br>| 定律  | 描述 |<br>|:—–:|:—–|<br>| 第一定律 | 让它显而易见 |<br>| 1.1 | 填写”习惯积分卡”:记下你当前的习惯并留意它们 |<br>| 1.2 | 应用执行意图:”我将于[时间]在[地点][行为].” |<br>| 1.3 | 应用习惯叠加:”继[当前习惯]之后,我将会[新习惯].” |<br>| 1.4 | 设计你的环境,让好习惯的提示清晰明了” |<br>| 第二定律 | 让它有吸引力 |<br>| 2.1 | 利用喜好绑定.用你喜好的行为强化你需要的动作 |<br>| 2.2 | 加入把你喜好的行为视为正常行为的文化群体 |<br>| 2.3 | 创设一种激励仪式.在实施低频行动之前先做一件你特别喜好的事 |<br>| 第三定律 | 让它简便易行 |<br>| 3.1 | 减少阻力.减少培养好习惯的步骤 |<br>| 3.2 | 备好环境.创造一种有利于未来行为的环境 |<br>| 3.3 | 把握好决定性时刻.优化可以产生重大影响的小选择 |<br>| 3.4 | 利用两分钟准则.缩短你的习惯所占用的时间,争取只需要两分钟甚至更少 |<br>| 3.5 | 自动化你的习惯.在能够锁定你未来行为和技术和物品上有所投入 |<br>| 第四定律 | 让它令人预约 |<br>| 4.1 | 利用增强法.完成一套习惯动作后立即奖励自己 |<br>| 4.2 | 让”无所事事”变得愉快.当避免坏习惯时,设计一种让由此带来的好处显而易见的方式 |<br>| 4.3 | 利用习惯追踪法.记录习惯倾向,不要中断 |<br>| 4.4 | 绝不连续错过两次.如果你忘了做,一定要尽快补救 |</p>\n<p>怎么戒除坏习惯<br>| 定律  | 描述 |<br>|:—–:|:—–|<br>| 第一定律反用 | 让它脱离视线 |<br>| 1.5 | 降低出现频率.把坏习惯的提示清除出你所在的环境 |<br>| 第二定律反用 | 让它缺乏吸引力 |<br>| 2.4 | 重新梳理你的思路.罗列出戒除坏习惯所带来的益处 |<br>| 第三定律反用 | 让它难以施行 |<br>| 3.6 | 增大阻力.增加实行坏习惯的步骤 |<br>| 3.7 | 利用承诺机制.锁定未来会有利于你的选择项 |<br>| 第四定律反用 | 让它令人厌恶 |<br>| 4.5 | 找一个问责伙伴.请人监督你的行为 |<br>| 4.6 | 创立习惯契约.让坏习惯的恶果公开化并令人难以忍受 |</p>\n<h3 id=\"高级战术-怎么从单纯的好转向真正的伟大\"><a href=\"#高级战术-怎么从单纯的好转向真正的伟大\" class=\"headerlink\" title=\"高级战术 怎么从单纯的好转向真正的伟大\"></a>高级战术 怎么从单纯的好转向真正的伟大</h3><h4 id=\"第18章-揭秘天才-当基因重要和无关紧要时\"><a href=\"#第18章-揭秘天才-当基因重要和无关紧要时\" class=\"headerlink\" title=\"第18章 揭秘天才(当基因重要和无关紧要时)\"></a>第18章 揭秘天才(当基因重要和无关紧要时)</h4><ul>\n<li><p>最大限度地提高成功概率的秘诀是选对你参与竞争的领域.</p>\n</li>\n<li><p>习惯选择正确,进步易如反掌.习惯选择错误,生活就步步维艰.</p>\n</li>\n<li><p>基因难以改变,这意味着环境有利时,它们让你享有强大的优势;环境不利时,它们带给你明显的劣势.</p>\n</li>\n<li><p>当你的习惯与天赋相匹配时,你就容易养成并维持那种习惯.选择最适合你的习惯,</p>\n</li>\n<li><p>选择能发扬你的长处的游戏.如果你找不到,就自创一个.</p>\n</li>\n<li><p>基因并不能排除艰苦努力的需要.它们只会帮着甄别,告诉我们该努力做什么事.</p>\n</li>\n</ul>\n<h4 id=\"第19章-金发女孩准则-如何在生活和工作中保持充沛动力\"><a href=\"#第19章-金发女孩准则-如何在生活和工作中保持充沛动力\" class=\"headerlink\" title=\"第19章 金发女孩准则:如何在生活和工作中保持充沛动力\"></a>第19章 金发女孩准则:如何在生活和工作中保持充沛动力</h4><ul>\n<li><p>金发女孩准则提出,人们在处理其能力可及的事务时积极性最高.</p>\n</li>\n<li><p>成功的最大威胁不是失败,而是倦怠.</p>\n</li>\n<li><p>随着习惯称为常规,它们变得不那么有趣,也不那么令人满意.我们开始感到无聊.</p>\n</li>\n<li><p>每个人受到激励时都能努力工作.但当工作不那么令人兴奋时,仍能继续奋进的则是人中佼佼者.</p>\n</li>\n<li><p>专业人员依照既定计划行事,毫不动摇;业余爱好者则随波逐流,任性而为.</p>\n</li>\n</ul>\n<h4 id=\"第20章-培养好习惯的负面影响\"><a href=\"#第20章-培养好习惯的负面影响\" class=\"headerlink\" title=\"第20章 培养好习惯的负面影响\"></a>第20章 培养好习惯的负面影响</h4><ul>\n<li><p>习惯的好处是我们可以不假思索地行事,缺点是我们不再关注小错误.</p>\n</li>\n<li><p>习惯动作+刻意练习=精通</p>\n</li>\n<li><p>反思和回顾是一个过程,使你能够时刻关注自己的表现</p>\n</li>\n<li><p>我们越是执着于一个身份,就越难超越它.避免让你身份的任何单一属性主导你的为人处事.</p>\n</li>\n</ul>\n<h4 id=\"结论-获得持久成果的秘诀\"><a href=\"#结论-获得持久成果的秘诀\" class=\"headerlink\" title=\"结论 获得持久成果的秘诀\"></a>结论 获得持久成果的秘诀</h4><p>一个小小的改变能改变你的人生吗?你不太可能说是的.但是如果你又做了一个呢?又做了另一个呢?接着又做了另一个呢?在某个时刻.你会不得不承认你的人生被一个小小的变化改变了?习惯转变的”圣杯”不是单个1%的改进,而是成千个.他是无数微习惯堆积起来的结果,其中每个微习惯都是构成整个系统的基本单元.</p>\n<p>有时候一个习惯很难记住,你需要让它显而易见.其他时候,你不想开始培养习惯,你需要让它有吸引力.在许多情况下,你可能会发现太难养成习惯,你需要让它简便易行.有时候,你不想坚持下去,你需要让它令人愉悦.</p>\n<p>每当你想要自我提高时,你都可以围绕行为转变四定律循序渐进地发展,知道你发现下一个瓶颈.让它显而易见.让它有吸引力.让它简便易行,让它令人愉悦.一圈又一圈地循环发展.不停地寻求用来获得1%的进步的新方法.</p>\n<p>获得持久成果的秘诀是不断进步,永不停歇.只要你一刻不停,坚持下去,你难以想象自己能去的多么伟大的成就.小习惯不会简单相加,它们会复合.</p>\n"},{"title":"智识分子 做个复杂的现代人","date":"2020-07-12T09:53:02.000Z","_content":"### 自序--做个复杂的现代人三个趋势\n\n1. 世界越来越复杂\n2. 人工智能正在慢慢取代人的工作\n3. 尽管所有人的物质生活都在改善，整个社会阶级分层却正在扩大。\n<!--more-->\n如何听取理工科专家的意见复杂世界中很少哪个实际问题是只用一方面的知识就能解决的。所以对待理工科专家，最好的办法是把他们的意见当成决策的参考。你可以在你的专业范围内给我提供最好的论点数据，但具体怎么决策，我还得再听听别人的论点和数据。理念和算数认准一个方向毫不动摇，是理念，是派系斗争，是意识形态，是情怀。知道过犹不及，该左左该右右，时刻为寻找最优值进行调整，才是理性态度。解决问题的关键往往不在于你有没有一个高大上的理念，而在于“度”。在于数字。复杂世界中几乎任何东西都是有利有弊，用与不用不仅仅要看这个东西好不好，还要看你能承受多大代价。想要学会寻找合适的“度”，你至少需要掌握两个不同的理念。狐狸和刺猬刺猬式的思维方式是进取的，只知一件大事，在简约的名义下，寻求和扩大此事的解释力，以“掩盖”新的案例；狐狸式的思维方式更加折中，知道很多小事，与瞬息万变的世界保持同步，满足于根据时代找出合适的解决之道。现代化的道理千头万绪，唯有此事最为关键：不要被自己心中的“大主意”劫持。狐狸思维的种种特点\n\n* 狐狸乐于接受新的信息；\n* 狐狸对自己决策的信息远小于刺猬；\n* 即使做过决定之后，狐狸仍然想从不同的视角进行再思考；\n* 狐狸总爱不断修正自己的预测；\n* 狐狸也许并不像刺猬一样对某个特定领域无比内行，但是他的知识面宽得多，了解很多事；\n* 狐狸对很多事情持怀疑态度；\n* 当考虑冲突的时候，狐狸能看到双方可能正确的方面；\n* 狐狸喜欢与观点不同的人打交道；\n* 狐狸在工作中并不追求明确的规则和秩序；\n* 狐狸喜欢有多个答案的问题，他们在解决问题的时候常常能发现多个选择；\n* 总而言之，狐狸眼中的世界是复杂的。\n\n十八般武艺我们不能满足于当某一方面的“专才”，而应该广泛学习各种知识，掌握“通识”。想要解决社会、经济和生活问题。不能追求掌握一个一劳永逸的“正确”理论，而应该追求掌握一系列不同流派的思维方法，十八般武艺，多多益善。严肃文学可以让人学会体察他人的感受，了解真实世界中不同类型人的生活。逻辑可以让人学会推理和辩论。文法修辞可以让人学会怎么用语言争取别人的支持。历史可以让人学会借鉴前人的经验。数学可以让人学会取舍。天文学可以让人对世界的自然规律产生敬畏。这些学问不是什么用于打扮自己、被别人审美的“教养”，这些都是大人物办大事的实用技能！博雅之学，并不是告诉我们什么放诸四海而皆准的真理，而是提供一些寓言故事、名人典故和思维套路。你掌握的套路越多，办事的时候可供选择的思路就越多。至于遇到什么事应该用哪个套路去解决，这没有任何程序性固定办法，是一种艺术，只能自己选择。Part 1 世界观祛魅很庆幸，我们生活在一个受限制的世界。这个世界有很多好东西，是人人都想要，但是未必能得到的。想要得到这样的东西，你必须付出代价。别用“常识”理解复杂世界常识只是特别善于在事后“解释”事件，这种解释根本谈不上真正的理解。要想从复杂的随机事件中看到真正的规律，最好的办法是像搞自然科学一样进行大规模的重复实验。一个更实用的历史观是放弃“一切都是注定的”这个思想，把历史事件当成众多可能性中的一种，把未来当成一个概率分布，然后尽可能地使用统计方法，通过历史事件去计算未来事件的概率。与其追求用各种想当然的常识指导未来，不如把历史当作一个数据库，从中发掘统计规律。模仿的雪崩效应人是善于模仿的动物，因为相对于自己分析各种因素再决策而言，直接模仿别人是一条思维捷径。但骚乱的故事告诉我们，人在很多情况下不是因为被别人的行为提醒后为了自身原因采取行动，而是为了模仿而模仿。\n为了模仿而模仿，是最大的不稳定因素，因为它让原本无关的人参与到事件之中，导致事态以爆炸的速度迅速扩大。\n但这个雪崩其实是不可靠的：只要我们把初期的几个人拿掉任意一个，那么骚乱反应就会早早断裂，而避免大规模事件。\n一个大规模事件的走向很可能跟这个事件的起因没有关系。\n凡夫畏果，菩萨畏因，但维稳的关键既不是最开始的起因也不是事态扩大以后的结果，而是事件初期的几步。\n\n#### 最简单经济学的五个智慧\n\n当一个人阅历越来越多，慢慢变成熟，他的思想可能会更加右倾保守。\n\n1. 国家不是家庭\n\n    人们在家庭中接受这种不平等是出于爱和关怀，而这对陌生人不适用。在陌生人之间，双方除了诚实守信互不侵犯之外没有更多的义务的感情，才讲平等。所以家庭讲感情，国家应该讲利益和效率。\n什么叫“升米恩，斗米仇”？关键不是什么心理学，而是事情的性质变了。遇到饥饿的人随手请他吃顿饭，这是个人的友善行为；长期、成体系或大规模地发放馒头，这就成了公共事务和经济行为了。\n要求对富人持续性加税，乃至产生均贫富的思想，这都是用家庭的眼光去看国家。考虑此类问题的正确出发点不应该是“都是一个国家的人，贫富差距这么大是否道德”，而应该是“什么样的税收制度有利于经济增长”。\n\n2. 没有免费的午餐\n\n    心灵鸡汤有两大论点：\n    1. 不管你面对什么条件，只要你努力，甚至只要你愿意做个好人，就一切皆有可能。\n    2. 哪怕你不努力不做好人也没关系，反正“世界上最美好的东西都是免费的”\n\n    所以心灵鸡汤要求我们关注自己而不必关注外部条件，暗示我们享受已有的而不要去追求别的东西。\n哪怕这个东西再好，如果它要求的代价太高，那我们就应该不要。反过来说，哪怕要付出一个代价，只要换来的东西价值更大，那就可以付出。\n边际分析是指你不用考虑总的效果，你只要考虑做下一步的临界效果就行了。比如你要生产某个产品，它有价格收益和成本，这两个数字都在随着市场变化。你不必管已经生产了多少这个产品，只要你生产的下一个这个产品的收益大于成本，你就可以继续生产。如果下一个产品的成本正好等于收益，你就应该停止生产-----------。\n边际效应常常递减。可能你投入的钱越来越多，但是效果却越来越不明显。\n\n3. 人会对激励作出反应\n\n    激励这个方法的好处在于，只要你的激励制度设计得好，人们就会心甘情愿地做你想让他们做的事。\n改变人的行为，最好的方法就是改变激励。\n\n    不过激励如果设计得不好，有可能适得其反。\n\n    给个自上而下的单方面外部激励政策，是经济学家解决问题最爱用的两个办法之一。另一个办法是市场化。\n4. 市场是一种激励信号的传递方式\n\n    通过价格信号，市场可以让最该办的事儿优先办，而且可以让做这件事做得最好的人去做这件事。如果不用市场机制，什么事儿应该办，让谁去办，这两个问题都非常难以回答。这样说来，市场最大的好处是解决了信号的问题，能把资源合理地配置给企业。\n\n    如果某个好东西暂时是稀缺的，但是只要人们愿意生产就能大量生产出来，市场就可能是解决这个问题的最佳手段。\n\n    私有化产权仅仅是一个基础条件。有价格这个激励信号，才是市场的关键。如果产权私有但是信号并不畅通，市场就会失灵。\n\n    所以市场经济绝不仅仅是产权改革这么简单的事。你必须有足够好的基础设施能确保信号有效传递，才叫真正的市场经济。\n\n5. 结果可能出乎意料\n\n    复杂系统的行为往往难以预料。你让蝴蝶在这里扇动一下翅膀，虽然非常不可能、但也许就可能，在千里之外的某个地方造成一场飓风。你发布一个什么政策，造成的影响可能一波推一波，最后结果也许完全出乎你的意料。\n\n    任何大型社会项目的任何效果评估的预期值等于0\n\n    所以不到万不得已，最好别轻易按你自己凭空想出来的什么史无前例的大招去扰动复杂系统，你根本不知道最后会导致什么！你很可能是小孩玩火！这叫“皇帝做不得快意事”。\n\n    这也说明阴谋论根本不靠谱，各种停留在纸面上的假想实验更不靠谱。我们生活的是一个太过复杂的世界，没有人能控制得了这个世界。\n\n#### 选民的大脑想要什么\n\n    很多人心目中最理想的民主选举制度，是假说每个选民都能清晰理解候选人许诺的各项制度，并且能理智地对候选人能力和这些政策的好坏做出判断，在这种情况下，大多数人的意见很可能就是最好的意见，民主就是有效的。\n选民的无知不是随机分布的，他们的整体意见存在系统偏见。在四个关键问题上，一般公众与经济学家的意见相反，真理不幸掌握在少数人手中。\n\n1. 经济学家非常相信市场，相信看不见的手；而一般公众很难理解纵容私人公司的贪婪怎么能给社会带来整体利益。公众只看到公司赚钱了，却看不到利润对公司提高效率和服务的激励作用。\n\n2. 经济学家支持自由贸易，而公众则本能地反感外国货，支持本国货。公众总是低估对外贸易的好处，总是认为外国在抢夺本国的就业机会。\n\n3. 公众过分害怕裁员。如果一项新技术可以节省人力，公众的态度往往会认为这个技术不但不是进步，而且还是个危险。而在经济学家看来，一个人的工作只有在他生产的产品能卖出去的情况下才有意义。\n\n4. 公众往往过高估计当前社会问题的严重性，过低估计经济的表现。不好的东西总是比好的东西更能给人留下深刻印象。\n\n##### 选民想要的东西，叫做“小故事”\n\n    认知学家发现，人脑认识复杂的外部世界，是通过“小故事”（narrative）去解读的。\n    小故事的重要特点是它能调动人的感情，在一个小故事里，人脑的两个感情区域（一个正面感情，一个是负面感情，在不同区域）被随时激活。我们总是会对故事中的人和事有一个好坏评价。\n    懂行的政客从来不给选民上经济课，他们专门给选民讲故事。\n    选民最喜欢的两个小故事，一个是“不怕敌人的勇敢故事”，另一个事“自我救赎的奋斗故事”。哪个候选人会讲这两个故事，哪个候选人就会当选。\n    当一个选民投票，他根本不是在选择自己的未来利益，他是在根据自己大脑中的小故事来宣泄自己的感情。\n\n#### 高效能任性\n\n##### 高效能人士的一个习惯\n\n    以原则为重心去做事，你得有一种使命感，给自己的人生找个愿景和方向。这种愿景不是什么成功了之后去找一个岛退休之类，而是个人的最终期许和价值观这种比较高级的东西，比如改变世界--或者说，将来盖棺定论时你希望获得什么评价。你应该根据这个使命感给自己设定一套宪法般的原则，时刻谨记在心，一举一动都是为了这个愿景。\n\n##### 谁更自私\n\n    人们普遍相信真正的精英都是这样和蔼可亲甚至道骨仙风，他们的成功根本不是靠投机钻营，而是靠正大光明的软实力。\n    这些研究都表明，富人和所谓上流社会的道德水准不但不比普通人高，而且比普通人低。\n    社会经济地位高的人群比普通人更自私。\n\n##### 公平世界假设\n\n    我们认为世界是公平的。但这恰恰是个错误的世界观。事实上，心理学家甚至对这个错误有个专有名词，叫做“公平世界假设”（just-world hypothesis，也叫just-world fallacy）。\n    世界其实并不公平。公平只是小说和电影给我们的幻觉，那些剧情的结局公平只不过是因为我们喜欢看公平结局。\n    相信公平世界假设对你有三个害处：\n        1. 你不能从别人的成功中学到东西。有人靠不择手段成功了，你很不喜欢，所以你就不愿意跟他学，你就学不到更多经验。其实这个人值不值得学习，跟你喜不喜欢她一点关系都没有。\n        2. 你以为做好自己的事情就行了，你会低估世界上发生的坏事。你会发现你想做成一点事非常难，感觉别人整天跟你作对。\n        3. 更有甚者，你会认为取得成功的人必有长处，失败的人必有可恨之处。\n\n#### 到底怎么才能在这个世界成功？\n\n1. 一个人能不能获得权力，能不能得到甚至，他的工作业绩是一个不重要的因素。\n2. 决定你升职的最重要因素，是你跟上级的关系。想搞好跟上级的关系，Pfeffer讲了三招：在上级面前吹嘘自己，充分领会上级意图，以及对上级阿谀奉承。\n\n其实从经济学角度，你应该做一个“理性的人”--这意味着你应该从自利的角度出发做事，而不是“好人”。\n\n##### 康德式任性\n\n真正的积极主动，是你的行为完全取决于自身，而不被外界刺激所左右。你的自由意志独立于外界限制，在刺激和回应之间，你有选择和回应的自由和能力。\n你做这件事纯粹是出于任性，而康德认为，只有出于任性--也就是自由意志--而去做一件事，才是真正的自由选择。\n\n##### 有一种歧视叫自利\n\n歧视有两种。一种是“敌意歧视”，损人不利己，宁可不赚你的钱也不跟你打交道，甚至还要故意黑你。另一种则是“经济歧视”。对某一人群的区别对待无关个人感情，纯粹是出于自利。\n时至今日，除了个别特别愚蠢的人拿别人的种族找自己的优越感之外，真正恶意的歧视已经不多见了。经济歧视，才最值得关注。坏消息是想要消除针对某个群体的经济歧视非常困难。好消息是对个人来说经济歧视是有解的。\n想要强行改变一个群体的整体形象，可以使用大规模宣传和教育的办法，例如好莱坞电影中尽量给黑人正面的形象。\n\n#### 人的正义思想是从哪里来的\n\n道德问题的正不正义，往往比一件事具体做法的正确不正确更容易引起争论。\n\n所以判断一件事是否道德很容易，而为自己的判断找到理由则需要思考时间。科学家相信人的道德判断是直觉式的、感性的快速判断，并非来自理性计算。人的理性，只不过为自己的感情服务而已，是先有了答案再去想办法找证据。\n\n所以道德判断的确是从天上掉下来的。如果有人非说一件事是不道德，他一定能找到各种理由，他可能根本不知道他做这个判断的真正原因只是自己的一种微妙直觉。\n\n模式识别，我们的大脑中安装了各种模块，一旦识别到符合某个模式的东西就会立即反应。\n\n这些模式识别能力并非是后天被人撞过或者被蛇咬过之后才习得，而是写在基因之中，一出生就会，是进化带给我们的本能。\n\n##### 海特的六个道德模块\n\n1. 关爱/伤害 对应中国人说的“仁”。我们看到小孩受苦就会想要帮助他，这是哺乳动物的本能。\n2. 公平/作弊 对应中国人说的“信”。这是与他人合作中的一种互惠机制，人们自然地认为合作产生的共同利益应该公平分配，如果有人作弊多占，我们就会愤怒。\n3. 忠诚/背叛 对应中国人说的“义”，或者至少相当于江湖的“义气”。有多个实验证明人有一种天生的群体归属意识。忠诚感带来的凝聚力对团队竞争很有帮助，而且对外来威胁非常敏感。\n4. 权威/服从 对应中国人说的“礼”。这个道德模块的表现是对长辈和地位高的人的尊敬。\n5. 圣洁/堕落 这是一个有点宗教味道的道德模块，中国传统道德对此强调不多，但我们也都有这个模块。它对应的感觉就是“恶心”，是一种厌恶不洁之物的进化本能。\n6. 自由/压迫 中国儒家对此似乎不太看重，但是道家很讲自由。不论如何，每个人都认为自由很好，压迫不好，不管是对自己还是对别人。\n\n人一出生，大脑中在政治上的侧重点就已经种下了种子。这些特性将会指引你的人生方向，特定的基因会让你主动去寻找适合这个基因发展的环境。\n\n人生的阅历和重大变故也许可以改变一个人的意识形态，但先天因素绝对非常重要。\n\n#### 放诸古今皆准的权力规则\n\n不管是国家、公司还是国际组织，其政治格局不能简单以“民主”和“独裁”来划分，而必须用三个数字来描写。以国家为例，这个“三围”就是层层嵌套的三种人的人数：\n\n* 名义选民：在名义上有选举权和被选举权的全体公民。然而他们中的很多人，可能对谁当领导人根本没有任何影响力。\n* 实际选民：那些真正对谁当领导人有影响力的人。对美国来说这相当于选举这天出来投票的选民，对沙特阿拉伯王国这样的君主国来说他们是皇室成员。\n* 胜利联盟：必须依赖他们，领导人才能维持自己权力的人。对美国总统来说他们在关键选区投出关键一票让你当选的人，对独裁者人来说他们是你在军队和贵族内部的核心支持者。\n\n看一个国家是不是真民主，关键并不在于是否举行选举，而在于胜利联盟的人数。领导人工作的本质是为联盟服务，因为联盟对领导人有推翻权--如果你不能保证我们的利益，我们有能力随时换一个。如果联盟的人很多，那么这个国家就是我们通常所说的民主国家。反过来如果联盟的人数非常少，那么不管这个国家有没有选举，它都是事实上的独裁国家。\n所有领导人，不论什么体制，其做事的终极目的只有两个：第一是获得权力，第二是保住权力。\n\n##### 五个通用的权力规则\n\n1. 要让联盟越小越好。联盟人数越少，收买他们要花的钱就越少。\n2. 要让名义选民越来越好。名义选民多，一旦联盟中有人对你不满，你就可以轻易替换掉他。\n3. 控制收入。领导人必须知道钱在哪，而且必须能控制钱的流动。\n4. 好好回报联盟对你的支持。一定要给够，但是也不要过多。\n5. 绝对不要从联盟口袋里往外拿钱给人民。这意味着任何改革如果伤害到联盟的利益就很难进行。\n\n民主制度就是一种以满足人民短期利益为目标的福利制度。\n\n民主的本质不是选举，而是联盟人数多。所以民主化的根本办法就是扩大联盟人数。\n\n### Part 2 流水线时代的英雄\n\n大多数人会在第一次或者第二次失败的时候放弃、认命，然后跟周围其他人一样过大数据预测的生活。但是有的人却能一直坚持下来。\n\n#### 高中是个把人分类的机器\n\n##### 为什么会有人失业\n\n最理想的市场中不会有失业。如果劳动力完全由市场供求关系决定，你只要愿意拿比别人低的工资，就可以得到任何工作的机会。但是在现实中，只有非常低端的工作才是这样。\n\n哪怕是“谁来了都能干”的工作，企业也不希望“让谁都来干”，而希望员工都有一定的忠诚度和凝聚力，并愿意为此支付一个更高的工资。至于需要专业技能的工作就更是如此。\n\n##### 竞争游戏\n\n名校是一种稀缺资源。只要像进入名校的学生比招生名额多，高考竞争就很激烈。如果所有高中生都不用功备考，大学也要招那么多人；因为每个人都害怕自己考不上而用功，结果就是所有人都投入大量无谓的精力，大学还是只招这么多人。\n国家是因为教育而富强的吗？\n\n一个国家的教育水平其实是在这个国家的经济腾飞以后才起来的。\n\n工作机会必须先走一步来带动教育发展。\n\n##### 穷人和富人：谁更应该上名校？\n\n对聪明学生来说，上不上名校并不重要。你走这条路能成功，走别的路也能成功。这可能是因为社会足够复杂，而市场足够有效，以至于一次没被选中也无所谓。\n低收入家庭的孩子上不上名校对他影响巨大，可以说第一步走错以后想出头就很难了。\n\n#### 精致的利己主义者和常青藤的绵羊\n\n##### 好得像绵羊一样的学生\n\n人们印象中的名校应该不拘一格降人才，每个学生都根据自己的个性选择不同的道路，百花齐放。然而事实是在追求安全不敢冒险的氛围下，学生们互相模仿，生怕跟别人不一样。\n别人怎么要求，他们就怎么反应。不敢冒险，互相模仿。一群群的都往同样的方向走。这不就是绵羊吗？\n\n#### 能把穷人变成正常人的教学法\n\n##### 穷人与教育\n\n贫困，其实是一个复杂系统中多种因素联合造成的结果，你很难简单地使用某个单一办法--帮助就业、直接发钱、让他去更好的学校读书--来让一个人摆脱贫困，你必须多管齐下才行。\n\n自控，是一种反人性的行为。它要求我们做“该做”的事，而不是“想做”的事。现在有句流行的话“以一般人的努力程度之低，根本谈不上拼天赋”，其实是有道理的。一个有自控力的阿仁生活再差也差不到哪儿去，自控力是比想象力更为基本和行之有效的个人素质，事摆脱贫困的关键一步。\n\n#### 美国人说的圣贤之道\n\n##### 怎样成为圣贤\n\n\"人性这根曲木,绝然造不出任何笔直的东西。\"只有当你承认自己是有缺陷的，摆正谦卑的态度，你才有可能跟自己的弱点作斗争，才有可能去完善品格。\n\n不好的情感冲动如果不加以遏制，不防微杜渐，就有可能形成正反馈，越来越大，乃至导致灾难。所以哪怕是小事，也不能掉以轻心--“勿以恶小而为之”。\n\n品格的修炼并不是要消除这些冲动，而是要学会控制这些冲动--“发乎情止乎礼”。\n\n压制自己的情感冲动，要形成习惯才好。这就要求我们平时把任何小事都视为磨炼品格的机会，不能稍有放松--“勿以善小而不为”。\n\n他们不问我想干什么，他们问这个世界需要我干什么。他们不是用做事的方法来满足内心。他们是为了做成这件事，去不断打磨自己的内心。\n\n品格修养的追求目标，并不在于成功，而在于成熟。特别可靠，才能办大事--“可以托六尺之孤，可以寄百里之命······”\n\n##### 中庸之道\n\n中庸不是什么：中庸不是面对两种对立意见采取一个折中的立场，不是盲目地搞平等，也不是对各种不同意见和稀泥。\n中庸，是你要认识到不同理念，不同情感诉求、不同道德标准之间，必然有冲突。这些理念没有哪个是完美的，谁也说服不了谁，谁也消灭不了谁，矛盾永远存在。\n\n所以作为最高领导人，就绝对不能像个二愣子一样全面倒向一种理念然后打压其他理念，试图给个一劳永逸的解决方案。\n所以领导的艺术就如同在风暴中驾驶帆船：太往左偏了就往右调整一下，太往右偏了就往左调整一下。平衡永远是动态的。你就永远这么调啊调，这就是中庸之道。\n\n##### 品格和现代人\n\n在现代社会，这条路根本就不是给普通人准备的。普通人的上限是“精致的利己主义者”--你只要根据社会给你的设定，把自己分内的工作做好，对社会给你的各种经济学刺激做出合理反应就可以了。你左右不了世界，世界也不担心被你破坏。\n只要那些想要办大事的人需要品格。因为这样的人不能单靠本能反应行事。\n\n他们需要动用自由意志去做决策，而且他们的决策会对世界产生影响。他们不能因为自己恰好不喜欢哪个国家就不让哪个国家进入联盟，他们不能因为自己恰好喜欢哪一派理论就按哪派理论制定政策，他们不能因为这么做恰好对自己最有利而不顾整体利益。他们愿意为心中的大事牺牲。\n\n我们知道了当今那些市侩猥琐的公众人物，大概是不太可能干出什么大事来的。\n\n#### 说英雄，谁是英雄\n\n谁说社会成见没意义？成见往往是对的，成见是对历史经验的总结，是对未来必然重演历史的信心。大数据预测，就是用成见预测。\n\n世界上有些人却是统计模型所预测不了的。统计，顾名思义，就是指多数人的行为规律。总有少数人的数据因为距离大多数人的主流数据太远，而被模型视为误差直接忽略。\n\n平凡的人们没有给我太多感动。这些不平凡、不能被模型预测的人，才是真的英雄。\n\n##### 体制\n\n无论是发达国家还是发展中国家的现代化教育体制，只要是一大群学生一起坐在教师里听一个老师讲课，就都是工业化流水线的模式。这种学校教育，对“最普通”的人最有利。\n\n个性学生从来都不是体制的产物，他们主动对抗体制。\n\n##### 美国教育各阶层分析\n\n普通工人阶层的学校强调遵守规章流程，整个教学充满死记硬背的机械式程序，学生几乎没有做选择和做决定的机会。老师教任何东西，哪怕是解数学题，都是用向学生灌输规则的方法。\n\n一般中产阶层的学校强调把事做“对”。有点像中国的应试教育，以学习材料为核心，要求学生必须理解这些材料--你可以用自己的方法理解，只要你能得到正确答案。学校教学很强调课本的权威性，你绝对不能对课本结论提出质疑。\n\n专业人士阶层的学校强调创造性和独立性。\n\n主管精英阶层的学校强调智识，这个阶层的学生学的不是怎么遵守规则，而是怎么制定规则。教育的核心目标，是决策和选择。\n\n大多数情况下，人不太容易超越自己父母的阶层。\n\n##### 中国各阶层的三种教育目标\n\n贫民家庭对教育的期待是培养工具，以找工作为目的。\n\n中产家庭对教育的期待是培养工艺品，以提升个人价值为目的。\n\n上层家庭对教育的期待是培养主人翁，以欣赏、选择和改变周围世界为目的。\n\n家庭收入水平和父母文化水平，直接决定孩子能达到什么层次。\n\n##### 英雄的套路\n\n所谓英雄，就是超越了阶层出身，超越了周围环境、超越了性格局限，拒绝按照任何设定好的程序行事，不能被大数据预测，能给世界带来惊喜，最不想机器人的人。\n\n必须改变自己，重新认识这个世界，然后用全新的方式面对。\n\n#### 使命的召唤\n\n英雄和俗人的根本区别在于，俗人想要适应世界，英雄想要改变世界。\n\n为什么英雄是自由的？因为一个人一旦有了使命感，就有了最彻底的主人翁精神，你就不用管他，也管不住他了。\n\n他们只对自己的使命负责，不受任何外力的限制。他们敢问不该问的问题，敢挑战周围人的共识，不屑于取悦任何人。\n英雄=创新\n\n创新就是打破常规，创新就是意外，创新就是你事先根本没预测到。根据我们队英雄的定义，这就是英雄做的事情。\n\n### Part 3 智识分子的十八般武艺\n\n人类所知非常有限，哪怕是最好的学者花了很多钱做得很好的研究，也可能是错的。科学的最大价值并不在于固定的知识，而在于获得这些知识的研究方法。\n\n#### 为什么高考作文题目是可预测的\n\n用数据分析搞预测的隐含假设是未来事件会继续落入最近流行的俗套。\n\n简单的系统容易预测，因为一个个体哪怕出点预测范围以外的波动，对整个系统也不会有大影响。而如果一个系统中包含各种正反馈机制，它就是不好预测的复杂系统，一个个体的小波动就有可能通过连锁反应层层放大出现蝴蝶效应。\n\n出题者不需要什么反馈，更不需要正反馈！他们要确保那些稍微聪明一点用功一点的孩子都能考上，把偶然因素降到最低。所以他们必然诉诸俗套。俗套最安全。数据分析指向哪里，他们就打向哪里。\n\n#### 大数据带来的主题军备竞赛\n\n##### 锤子和钉子\n\n中国高考作文的出题方法有个固定的套路：给你讲一段小故事，然后让你根据这个故事，想想自己受到什么启发，写篇文章。换句话说，你的作文重点根本不是这个故事，故事只是你要写的主题的一个素材。\n\n同一个素材，个人思考角度不同，可以对应不同的主题。但更重要的是，不同的素材可以对应同样的主题。\n\n只要一个人熟读这六个方面（奋斗、自由、青春、自然、环境和尊敬）各种可能主题的文章，掌握其写作套路，不管高考出什么素材都能应对自如。\n\n##### 主题模型\n\n“隐含狄利克雷分布”（Latent Dirchlet allocation LDA）:计算机认为文章只不过是一些词汇的集合。而每个主题，也只是一些关键词的集合。计算机没必要“理解”每个主题或每个词的意思，甚至根本不用管这些词出现的先后顺序。计算机要做的仅仅是使用一定的数学方法对每篇文章中的词汇进行分析。一篇文章拿过来，你要做的就是把事先设定的所有主题一个一个过一遍，计算这篇文章中的词汇对应每个主题的可能性是多少。计算结果，就是这篇文章说的是每个主题的概率大小。一篇文章甚至可以包含多个主题，这不是问题。关键在于，计算机可以判断一篇文章最有可能说的是什么主题，第二可能说的是什么主题······这就相当于计算机已经“读懂”了这篇文章。\n\n##### 未来\n\n数据分析的真正作用是能让好东西迅速流传开来······然后迅速消亡。\n\n#### 大尺度和硬条件：四万年来谁著史\n\n尺度，是一个重要的思维方式。尺度思维的一个要点在于，当你考虑大尺度问题的时候，小尺度的现象常常可以忽略或者简化。而更为重要的是，从小尺度现象出发往往解释不了大尺度问题。\n\n研究大尺度问题，必须关注一些长期不变的因素，也就是“硬条件”。\n\n有些硬条件构成了历史发展的种种限制，使人们不能恣意而为，而有些硬条件则又是我们的重大机遇。正因为有了这些限制，使人们不能恣意而为，历史的演化才成了带着镣铐跳舞，反而不平淡了。\n\n#### 技术左右天下大势\n\n在技术进步的任何阶段，都不是你想要什么就能研发什么。技术不听我们的，我们得听技术的。\n\n一项技术如果到了“该出来”的时候，它就一定会出来。因为它会被好几个人同时发现。\n\n技术不仅仅是被人类需求或者人类天才创造的推动，它自身就是自身的推动。正如生物进化一样，每一次技术突破都孕育新的技术突破，整个的技术进步是一个自组织和正反馈过程。\n\n#### 一点实用主义的学英语心得\n\n正确的做法是找本托福或者GRE的单词书，每天拿出几个小时的时间，背300-600个单词。\n\n记忆的关键在于间隔式的重复，过一天复习一次，过三天再复习一次，过一周再复习一次，让间隔的时间越来越长。\n\n在背单词的同时，你找一本大学英语课本之类的书，精读其中的文章。这种书的好处是上面有注释和讲解。\n\n#### 信息极客的三个功夫\n\n第一个功夫是阅读学术论文，论文是知识的最前沿，而且是用最优条理的方式整理好的文本。\n\n第二个功夫是直接阅读原始数据，对奇怪的事非常敏感，产生疑问后不是口无凭据地质疑，而是立刻查找数据，拿数据说法。\n\n第三个功夫是主动采集和分析数据，把很多人的个人数据综合起来，可以帮助研究者更好地理解人类行为，所以量化自我也是对社会的贡献。不但如此，个人还能拿自己的数据搞点小研究。\n\n##### “舌战群儒”的技术分析\n\n###### “舌战群儒”的技术\n\n1. 列举事实证据，暗示对方能力不行\n2. 如果比不过事实，比境界\n3. 你别说我如何如何不堪，著名英雄xxx也曾经如此不堪\n\n#### 贝叶斯定理的胆识\n\n“相信不相信”的真正意义，在于给我们自己的决策提供依据。\n\n一般情况下对一般有争议的问题我们都是抱着将信将疑的态度，信念值在0.01%到99.99%之间。而且，我们队大多数事物的信念值都在动态变化。比如有什么特别突兀的新东西出来，我们一开始可能是不信的，随着证据增多，慢慢加强信念。\nA代表我们感兴趣的事件，p(A)表示它发生的概率。B代表一个与之有关的事件，p(A|B)则代表在B发生的情况下，A发生的概率。类似地，p(B|A)表示在A发生的情况下，B发生的概率。\n\n最关键思想是在B发生以后，有了这个新的证据，我们对A的信念需要做一个调整，从p(A)变成p(A|B)了。你可以把A当成你对一般情况的理论预言，把B当成一次实验结果。有了新的实验结果，你就调整自己的理论预言。\n\n如果我们对某件事的信念值非常非常低，那么即使强有力的证据也很难扭转我们的信念。\n\n观点随事实改变，有胆有识，这就是贝叶斯定理的伟大原则。\n\n#### 生猛的进化心理学\n\n人们对进化心理学争论主要是两点。第一，传统社会科学认为人类是高级生命，是特殊的，人不是动物；而进化心理学认为人类跟动物没什么区别，“完全”平等。第二，传统社会科学认为人的性格和思维模式主要是后天环境（包括自然环境和社会环境）影响的结果，而进化心理学认为所谓“人性”，主要是人这个物种长期进化遗传自然选择适应的结果，小孩一生下来他/她的“人性”就已经定好了。\n\n进化心理学有个基础假设，称为“大草原原理”（Savanna principle）。这个原理说，由于人类的进化速度非常慢，而最近几千年人类的生活方式变化极快，以至于人的进化没有跟上人的生活变化的步伐。所以我们这些所谓现代人的性格和思维模式很大程度上仍然停留在史前的水平，比如说石器时代。也就是说，要想理解为什么今天的人会有这样那样的行为，只要对比石器时代就可以了。\n\n进化心理学更多的是解释我们潜意识中的“常识”。有些东西我们都喜欢，但是我们又说不清楚为什么喜欢，这时候就该进化心理学出手了。\n\n进化心理学认为所有两性差异都可以用生育能力的差异来解释。第一个差异是数量级上的差异。一个男人理论上可以有无数个孩子，而一个女人终其一生最多只能有几十个孩子。这就决定了女人一定更重视家庭。第二个差异是女人一定知道自己的孩子是自己的，但史前男人无法确定自己女人生的孩子是不是真的是自己的，正所谓“momma's baby, daday's maybe”。正是因为这个根本原因，导致男人特别不能容忍妻子的不忠。\n\n哪怕进化心理学能够解释传统社会里的很多现象，到了现代社会，有很多人其实是进步了。进化心理学只能说明我们的一个思维趋势，而这些进步了的人可以克服自己不好的趋势，超越进化心理学。\n\n人受教育就是为了超越进化心理学，用理性克服本能！\n\n#### 哪种知识最可靠？\n\n科学的最大价值并不在于固定的知识，而在于获得这些知识的研究方法。\n\n任何数学知识都绝对正确，不容置疑。凡是出发点正确而又是用逻辑推导出来的知识，就必定是正确的。\n\n既然专家的建议不一定好使，我们就千万不要执着于使用某一个特定的理论去做事，最好都抱着试试看的态度，这个理论不行就换另一个理论。\n\n如果有人像个神甫一样说他身怀宇宙真理般的理论，充满自信，最好别信他。\n\n#### 宇航时代为何还未到来？\n\n现阶段的载人航天其实是个形象工程。\n\n形象工程的最主要好处是让人民（包括纳税人）高兴。\n\n大宇航时代什么时候才能到来？我们必须指望将来有一个什么重大发现，发现太阳系深处的某个地方有一种对地球人来说价值连城的东西，值得人们不惜钱财和生命去追求。\n\n### Part4 未来，已经到来\n\n我们即将进入一个“不换思想就换人”的时代。\n\n#### 把工作输给机器人\n\n《与机器竞赛》这本书指出，在与机器进行的这场竞赛中，有三类赢家和三类输家。高技术工人是赢家，而低学历者将是输家，因为机器人将会迅速取代他们的工作。超级明星是赢家，第二名及其他所有人都是输家。资本是赢家，劳动者是输家。\n\n#### 你比机器强在哪儿？\n\n这个世界正在经历深刻的变革：人靠知识谋生的主流方式一变再变。\n人得靠创造新知识来赚钱。机器人会的所有东西，都是跟人学的。写报告也好，提建议也好，诊断病情也好，机器人的能耐在于从已经发生的事情中找到规律，然后把这个规律用于新的事情。机器人，是彻底的经验主义者。\n人的一个任务是打破常规，第二个任务是表达自己的好恶。\n\n#### 带着机器竞赛\n\n这些善于弥补计算机不足、善于利用机器优势、善于发挥人的特点的人，不是在与机器竞赛，而是带着机器竞赛。\n他们的秘密在与知道怎么更好地调教和帮助计算机看得更远。计算机不再是人类的秘书，而是一个有无限潜能的猛兽，取胜的关键在于你会不会使。\n\n#### 怎么杀死海星\n\n传统组织就如同蜘蛛，它的智力集中在大脑，只要你把蜘蛛的头去掉，蜘蛛就会死亡。而去中心化组织就如同海星，海星根本就没有头。它的智能分布在身体各处，一旦你打掉它身体的一部分，那个部分甚至可能自己再长成另一个海星。\n\n把去中心化组织的成员联系在一起的不是领导人，而是某个共同的理念或者需求。有时候组织有一个名义上的领导，但其对整个组织的控制能力极其有限，更多的是一个精神领袖。\n\n不过去中心化组织有个关键的弱点：你很难通过这样的组织赚大钱。分权的产业利润低，只有集权才能获得高利润。\n\n##### 杀死海星的三个策略\n\n1. 改变环境，既然你们是靠一种意识形态联系在一起，我就让你这个意识形态没有市场。\n2. 先把海星变成蜘蛛再杀。\n3. 把自己去中心化。借鉴去中心化组织的分布式智力和灵活多变的特点。\n\n#### 合弄制：一种新的管理方法\n\n合弄制，并不是一般的分权改革，它是一种非常严格，而且相当复杂的组织管理方式。\n\n合弄制的一个核心思想是以工作为本，而不是以人为本。合弄制首先要求你是一个“有目的的组织”。合弄制要求组织中的每个人都要能够判断各项工作是否符合这个目的。\n\n明确了公司的总目的，公司就可以通过管治会议（Governance Meeting）来根据这个目的把工作分块，并把它们变成一个个具体的功用。\n\n管制会议定下功用之后，给每个功用成立一个“圈（Circle）”，同时决定每个圈中需要的“角色（Roles）”。圈就是角色的集合。\n\n传统公司是人员组织结构固定，把工作往人身上分，而合弄制则是工作职责固定，把人往工作上分。每个圈有一个“链长（ LeadLink）”，这是一个具体的人。链长对自己圈的工作没有决定权，他唯一的权力是往自己圈里的角色中放人。他可以在全公司范围内邀请任何人来填充角色，并且有权在认为一个人没有做好自己角色的时候将其从角色上提出。所有圈里的重大决策都由这个圈里所有角色参加的管治会议民主讨论决定。而在日常工作中，每个人则根据自己的角色有相当大的自主权。没有任何人可以命令你干什么。你根据自己的角色的职责和权力自己决定干什么。\n\n每个圈的管治会议还可以根据工作需要在圈中再成立“子圈”，规定每个子圈的功用和子圈中有些什么角色，并由链长指定每个子圈的链长。子圈中还可以又有子圈，如此层层嵌套，就如同人体分为器官、组织、细胞等等。每一个圈的管治会议，由直接属于这个圈的全体角色，以及这个圈直接下属每个子圈的一个代表参加。\n\n如此看来合弄制并非是没有管理或者没有等级的体制。各层圈的上下级关系非常明确。一个圈之内实行民主，但上圈直接决定子圈的目的和角色功用，而且链长有绝对的人事权。但关键在于，这些管理和等级都是针对工作，或者说是针对角色的。而不是针对人的。\n\n合弄制的一个妙处在于每个人可以拥有多个不同的角色！\n\n##### 合弄制的好处\n\n1. 职权非常透明，公司可以变得更有效率。\n2. 公司可以更加容易做出改变，能够对市场做出迅速反应。\n\n#### 该死就死的市场经济\n\n市场的真正关键在于“不知道”。政府计划不行，并不是说政府不够聪明或者政府的计算机不够快，而是政府不知道未来会怎么变--没人知道未来会怎么变。\n\n##### 市场经济，深得生物进化之道\n\n1. 随机变异。\n2. 自由交配\n3. 无情淘汰\n\n参与市场得有这样的精神：想生就生，该死就死。\n\n#### 物质极大丰富的时代\n\n四个论点\n\n1. 产生经济衰退的原因是剩余利润。增加私人投资已经不能带来经济增长，应该靠消费带来增长。\n2. 为扩大消费，应该搞财富的再分配，比如增加社会福利。\n3. 投资应该社会化。决定一个项目是否上马，不应该只看其能带来多少利润，而应该全社会一起评估它的社会价值，也就是说要追求使用价值。\n4. 花钱是道德的，消费文化是个好东西。\n","source":"_posts/智识分子-做个复杂的现代人.md","raw":"---\ntitle: 智识分子 做个复杂的现代人\ndate: 2020-07-12 17:53:02\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 万维钢\n---\n### 自序--做个复杂的现代人三个趋势\n\n1. 世界越来越复杂\n2. 人工智能正在慢慢取代人的工作\n3. 尽管所有人的物质生活都在改善，整个社会阶级分层却正在扩大。\n<!--more-->\n如何听取理工科专家的意见复杂世界中很少哪个实际问题是只用一方面的知识就能解决的。所以对待理工科专家，最好的办法是把他们的意见当成决策的参考。你可以在你的专业范围内给我提供最好的论点数据，但具体怎么决策，我还得再听听别人的论点和数据。理念和算数认准一个方向毫不动摇，是理念，是派系斗争，是意识形态，是情怀。知道过犹不及，该左左该右右，时刻为寻找最优值进行调整，才是理性态度。解决问题的关键往往不在于你有没有一个高大上的理念，而在于“度”。在于数字。复杂世界中几乎任何东西都是有利有弊，用与不用不仅仅要看这个东西好不好，还要看你能承受多大代价。想要学会寻找合适的“度”，你至少需要掌握两个不同的理念。狐狸和刺猬刺猬式的思维方式是进取的，只知一件大事，在简约的名义下，寻求和扩大此事的解释力，以“掩盖”新的案例；狐狸式的思维方式更加折中，知道很多小事，与瞬息万变的世界保持同步，满足于根据时代找出合适的解决之道。现代化的道理千头万绪，唯有此事最为关键：不要被自己心中的“大主意”劫持。狐狸思维的种种特点\n\n* 狐狸乐于接受新的信息；\n* 狐狸对自己决策的信息远小于刺猬；\n* 即使做过决定之后，狐狸仍然想从不同的视角进行再思考；\n* 狐狸总爱不断修正自己的预测；\n* 狐狸也许并不像刺猬一样对某个特定领域无比内行，但是他的知识面宽得多，了解很多事；\n* 狐狸对很多事情持怀疑态度；\n* 当考虑冲突的时候，狐狸能看到双方可能正确的方面；\n* 狐狸喜欢与观点不同的人打交道；\n* 狐狸在工作中并不追求明确的规则和秩序；\n* 狐狸喜欢有多个答案的问题，他们在解决问题的时候常常能发现多个选择；\n* 总而言之，狐狸眼中的世界是复杂的。\n\n十八般武艺我们不能满足于当某一方面的“专才”，而应该广泛学习各种知识，掌握“通识”。想要解决社会、经济和生活问题。不能追求掌握一个一劳永逸的“正确”理论，而应该追求掌握一系列不同流派的思维方法，十八般武艺，多多益善。严肃文学可以让人学会体察他人的感受，了解真实世界中不同类型人的生活。逻辑可以让人学会推理和辩论。文法修辞可以让人学会怎么用语言争取别人的支持。历史可以让人学会借鉴前人的经验。数学可以让人学会取舍。天文学可以让人对世界的自然规律产生敬畏。这些学问不是什么用于打扮自己、被别人审美的“教养”，这些都是大人物办大事的实用技能！博雅之学，并不是告诉我们什么放诸四海而皆准的真理，而是提供一些寓言故事、名人典故和思维套路。你掌握的套路越多，办事的时候可供选择的思路就越多。至于遇到什么事应该用哪个套路去解决，这没有任何程序性固定办法，是一种艺术，只能自己选择。Part 1 世界观祛魅很庆幸，我们生活在一个受限制的世界。这个世界有很多好东西，是人人都想要，但是未必能得到的。想要得到这样的东西，你必须付出代价。别用“常识”理解复杂世界常识只是特别善于在事后“解释”事件，这种解释根本谈不上真正的理解。要想从复杂的随机事件中看到真正的规律，最好的办法是像搞自然科学一样进行大规模的重复实验。一个更实用的历史观是放弃“一切都是注定的”这个思想，把历史事件当成众多可能性中的一种，把未来当成一个概率分布，然后尽可能地使用统计方法，通过历史事件去计算未来事件的概率。与其追求用各种想当然的常识指导未来，不如把历史当作一个数据库，从中发掘统计规律。模仿的雪崩效应人是善于模仿的动物，因为相对于自己分析各种因素再决策而言，直接模仿别人是一条思维捷径。但骚乱的故事告诉我们，人在很多情况下不是因为被别人的行为提醒后为了自身原因采取行动，而是为了模仿而模仿。\n为了模仿而模仿，是最大的不稳定因素，因为它让原本无关的人参与到事件之中，导致事态以爆炸的速度迅速扩大。\n但这个雪崩其实是不可靠的：只要我们把初期的几个人拿掉任意一个，那么骚乱反应就会早早断裂，而避免大规模事件。\n一个大规模事件的走向很可能跟这个事件的起因没有关系。\n凡夫畏果，菩萨畏因，但维稳的关键既不是最开始的起因也不是事态扩大以后的结果，而是事件初期的几步。\n\n#### 最简单经济学的五个智慧\n\n当一个人阅历越来越多，慢慢变成熟，他的思想可能会更加右倾保守。\n\n1. 国家不是家庭\n\n    人们在家庭中接受这种不平等是出于爱和关怀，而这对陌生人不适用。在陌生人之间，双方除了诚实守信互不侵犯之外没有更多的义务的感情，才讲平等。所以家庭讲感情，国家应该讲利益和效率。\n什么叫“升米恩，斗米仇”？关键不是什么心理学，而是事情的性质变了。遇到饥饿的人随手请他吃顿饭，这是个人的友善行为；长期、成体系或大规模地发放馒头，这就成了公共事务和经济行为了。\n要求对富人持续性加税，乃至产生均贫富的思想，这都是用家庭的眼光去看国家。考虑此类问题的正确出发点不应该是“都是一个国家的人，贫富差距这么大是否道德”，而应该是“什么样的税收制度有利于经济增长”。\n\n2. 没有免费的午餐\n\n    心灵鸡汤有两大论点：\n    1. 不管你面对什么条件，只要你努力，甚至只要你愿意做个好人，就一切皆有可能。\n    2. 哪怕你不努力不做好人也没关系，反正“世界上最美好的东西都是免费的”\n\n    所以心灵鸡汤要求我们关注自己而不必关注外部条件，暗示我们享受已有的而不要去追求别的东西。\n哪怕这个东西再好，如果它要求的代价太高，那我们就应该不要。反过来说，哪怕要付出一个代价，只要换来的东西价值更大，那就可以付出。\n边际分析是指你不用考虑总的效果，你只要考虑做下一步的临界效果就行了。比如你要生产某个产品，它有价格收益和成本，这两个数字都在随着市场变化。你不必管已经生产了多少这个产品，只要你生产的下一个这个产品的收益大于成本，你就可以继续生产。如果下一个产品的成本正好等于收益，你就应该停止生产-----------。\n边际效应常常递减。可能你投入的钱越来越多，但是效果却越来越不明显。\n\n3. 人会对激励作出反应\n\n    激励这个方法的好处在于，只要你的激励制度设计得好，人们就会心甘情愿地做你想让他们做的事。\n改变人的行为，最好的方法就是改变激励。\n\n    不过激励如果设计得不好，有可能适得其反。\n\n    给个自上而下的单方面外部激励政策，是经济学家解决问题最爱用的两个办法之一。另一个办法是市场化。\n4. 市场是一种激励信号的传递方式\n\n    通过价格信号，市场可以让最该办的事儿优先办，而且可以让做这件事做得最好的人去做这件事。如果不用市场机制，什么事儿应该办，让谁去办，这两个问题都非常难以回答。这样说来，市场最大的好处是解决了信号的问题，能把资源合理地配置给企业。\n\n    如果某个好东西暂时是稀缺的，但是只要人们愿意生产就能大量生产出来，市场就可能是解决这个问题的最佳手段。\n\n    私有化产权仅仅是一个基础条件。有价格这个激励信号，才是市场的关键。如果产权私有但是信号并不畅通，市场就会失灵。\n\n    所以市场经济绝不仅仅是产权改革这么简单的事。你必须有足够好的基础设施能确保信号有效传递，才叫真正的市场经济。\n\n5. 结果可能出乎意料\n\n    复杂系统的行为往往难以预料。你让蝴蝶在这里扇动一下翅膀，虽然非常不可能、但也许就可能，在千里之外的某个地方造成一场飓风。你发布一个什么政策，造成的影响可能一波推一波，最后结果也许完全出乎你的意料。\n\n    任何大型社会项目的任何效果评估的预期值等于0\n\n    所以不到万不得已，最好别轻易按你自己凭空想出来的什么史无前例的大招去扰动复杂系统，你根本不知道最后会导致什么！你很可能是小孩玩火！这叫“皇帝做不得快意事”。\n\n    这也说明阴谋论根本不靠谱，各种停留在纸面上的假想实验更不靠谱。我们生活的是一个太过复杂的世界，没有人能控制得了这个世界。\n\n#### 选民的大脑想要什么\n\n    很多人心目中最理想的民主选举制度，是假说每个选民都能清晰理解候选人许诺的各项制度，并且能理智地对候选人能力和这些政策的好坏做出判断，在这种情况下，大多数人的意见很可能就是最好的意见，民主就是有效的。\n选民的无知不是随机分布的，他们的整体意见存在系统偏见。在四个关键问题上，一般公众与经济学家的意见相反，真理不幸掌握在少数人手中。\n\n1. 经济学家非常相信市场，相信看不见的手；而一般公众很难理解纵容私人公司的贪婪怎么能给社会带来整体利益。公众只看到公司赚钱了，却看不到利润对公司提高效率和服务的激励作用。\n\n2. 经济学家支持自由贸易，而公众则本能地反感外国货，支持本国货。公众总是低估对外贸易的好处，总是认为外国在抢夺本国的就业机会。\n\n3. 公众过分害怕裁员。如果一项新技术可以节省人力，公众的态度往往会认为这个技术不但不是进步，而且还是个危险。而在经济学家看来，一个人的工作只有在他生产的产品能卖出去的情况下才有意义。\n\n4. 公众往往过高估计当前社会问题的严重性，过低估计经济的表现。不好的东西总是比好的东西更能给人留下深刻印象。\n\n##### 选民想要的东西，叫做“小故事”\n\n    认知学家发现，人脑认识复杂的外部世界，是通过“小故事”（narrative）去解读的。\n    小故事的重要特点是它能调动人的感情，在一个小故事里，人脑的两个感情区域（一个正面感情，一个是负面感情，在不同区域）被随时激活。我们总是会对故事中的人和事有一个好坏评价。\n    懂行的政客从来不给选民上经济课，他们专门给选民讲故事。\n    选民最喜欢的两个小故事，一个是“不怕敌人的勇敢故事”，另一个事“自我救赎的奋斗故事”。哪个候选人会讲这两个故事，哪个候选人就会当选。\n    当一个选民投票，他根本不是在选择自己的未来利益，他是在根据自己大脑中的小故事来宣泄自己的感情。\n\n#### 高效能任性\n\n##### 高效能人士的一个习惯\n\n    以原则为重心去做事，你得有一种使命感，给自己的人生找个愿景和方向。这种愿景不是什么成功了之后去找一个岛退休之类，而是个人的最终期许和价值观这种比较高级的东西，比如改变世界--或者说，将来盖棺定论时你希望获得什么评价。你应该根据这个使命感给自己设定一套宪法般的原则，时刻谨记在心，一举一动都是为了这个愿景。\n\n##### 谁更自私\n\n    人们普遍相信真正的精英都是这样和蔼可亲甚至道骨仙风，他们的成功根本不是靠投机钻营，而是靠正大光明的软实力。\n    这些研究都表明，富人和所谓上流社会的道德水准不但不比普通人高，而且比普通人低。\n    社会经济地位高的人群比普通人更自私。\n\n##### 公平世界假设\n\n    我们认为世界是公平的。但这恰恰是个错误的世界观。事实上，心理学家甚至对这个错误有个专有名词，叫做“公平世界假设”（just-world hypothesis，也叫just-world fallacy）。\n    世界其实并不公平。公平只是小说和电影给我们的幻觉，那些剧情的结局公平只不过是因为我们喜欢看公平结局。\n    相信公平世界假设对你有三个害处：\n        1. 你不能从别人的成功中学到东西。有人靠不择手段成功了，你很不喜欢，所以你就不愿意跟他学，你就学不到更多经验。其实这个人值不值得学习，跟你喜不喜欢她一点关系都没有。\n        2. 你以为做好自己的事情就行了，你会低估世界上发生的坏事。你会发现你想做成一点事非常难，感觉别人整天跟你作对。\n        3. 更有甚者，你会认为取得成功的人必有长处，失败的人必有可恨之处。\n\n#### 到底怎么才能在这个世界成功？\n\n1. 一个人能不能获得权力，能不能得到甚至，他的工作业绩是一个不重要的因素。\n2. 决定你升职的最重要因素，是你跟上级的关系。想搞好跟上级的关系，Pfeffer讲了三招：在上级面前吹嘘自己，充分领会上级意图，以及对上级阿谀奉承。\n\n其实从经济学角度，你应该做一个“理性的人”--这意味着你应该从自利的角度出发做事，而不是“好人”。\n\n##### 康德式任性\n\n真正的积极主动，是你的行为完全取决于自身，而不被外界刺激所左右。你的自由意志独立于外界限制，在刺激和回应之间，你有选择和回应的自由和能力。\n你做这件事纯粹是出于任性，而康德认为，只有出于任性--也就是自由意志--而去做一件事，才是真正的自由选择。\n\n##### 有一种歧视叫自利\n\n歧视有两种。一种是“敌意歧视”，损人不利己，宁可不赚你的钱也不跟你打交道，甚至还要故意黑你。另一种则是“经济歧视”。对某一人群的区别对待无关个人感情，纯粹是出于自利。\n时至今日，除了个别特别愚蠢的人拿别人的种族找自己的优越感之外，真正恶意的歧视已经不多见了。经济歧视，才最值得关注。坏消息是想要消除针对某个群体的经济歧视非常困难。好消息是对个人来说经济歧视是有解的。\n想要强行改变一个群体的整体形象，可以使用大规模宣传和教育的办法，例如好莱坞电影中尽量给黑人正面的形象。\n\n#### 人的正义思想是从哪里来的\n\n道德问题的正不正义，往往比一件事具体做法的正确不正确更容易引起争论。\n\n所以判断一件事是否道德很容易，而为自己的判断找到理由则需要思考时间。科学家相信人的道德判断是直觉式的、感性的快速判断，并非来自理性计算。人的理性，只不过为自己的感情服务而已，是先有了答案再去想办法找证据。\n\n所以道德判断的确是从天上掉下来的。如果有人非说一件事是不道德，他一定能找到各种理由，他可能根本不知道他做这个判断的真正原因只是自己的一种微妙直觉。\n\n模式识别，我们的大脑中安装了各种模块，一旦识别到符合某个模式的东西就会立即反应。\n\n这些模式识别能力并非是后天被人撞过或者被蛇咬过之后才习得，而是写在基因之中，一出生就会，是进化带给我们的本能。\n\n##### 海特的六个道德模块\n\n1. 关爱/伤害 对应中国人说的“仁”。我们看到小孩受苦就会想要帮助他，这是哺乳动物的本能。\n2. 公平/作弊 对应中国人说的“信”。这是与他人合作中的一种互惠机制，人们自然地认为合作产生的共同利益应该公平分配，如果有人作弊多占，我们就会愤怒。\n3. 忠诚/背叛 对应中国人说的“义”，或者至少相当于江湖的“义气”。有多个实验证明人有一种天生的群体归属意识。忠诚感带来的凝聚力对团队竞争很有帮助，而且对外来威胁非常敏感。\n4. 权威/服从 对应中国人说的“礼”。这个道德模块的表现是对长辈和地位高的人的尊敬。\n5. 圣洁/堕落 这是一个有点宗教味道的道德模块，中国传统道德对此强调不多，但我们也都有这个模块。它对应的感觉就是“恶心”，是一种厌恶不洁之物的进化本能。\n6. 自由/压迫 中国儒家对此似乎不太看重，但是道家很讲自由。不论如何，每个人都认为自由很好，压迫不好，不管是对自己还是对别人。\n\n人一出生，大脑中在政治上的侧重点就已经种下了种子。这些特性将会指引你的人生方向，特定的基因会让你主动去寻找适合这个基因发展的环境。\n\n人生的阅历和重大变故也许可以改变一个人的意识形态，但先天因素绝对非常重要。\n\n#### 放诸古今皆准的权力规则\n\n不管是国家、公司还是国际组织，其政治格局不能简单以“民主”和“独裁”来划分，而必须用三个数字来描写。以国家为例，这个“三围”就是层层嵌套的三种人的人数：\n\n* 名义选民：在名义上有选举权和被选举权的全体公民。然而他们中的很多人，可能对谁当领导人根本没有任何影响力。\n* 实际选民：那些真正对谁当领导人有影响力的人。对美国来说这相当于选举这天出来投票的选民，对沙特阿拉伯王国这样的君主国来说他们是皇室成员。\n* 胜利联盟：必须依赖他们，领导人才能维持自己权力的人。对美国总统来说他们在关键选区投出关键一票让你当选的人，对独裁者人来说他们是你在军队和贵族内部的核心支持者。\n\n看一个国家是不是真民主，关键并不在于是否举行选举，而在于胜利联盟的人数。领导人工作的本质是为联盟服务，因为联盟对领导人有推翻权--如果你不能保证我们的利益，我们有能力随时换一个。如果联盟的人很多，那么这个国家就是我们通常所说的民主国家。反过来如果联盟的人数非常少，那么不管这个国家有没有选举，它都是事实上的独裁国家。\n所有领导人，不论什么体制，其做事的终极目的只有两个：第一是获得权力，第二是保住权力。\n\n##### 五个通用的权力规则\n\n1. 要让联盟越小越好。联盟人数越少，收买他们要花的钱就越少。\n2. 要让名义选民越来越好。名义选民多，一旦联盟中有人对你不满，你就可以轻易替换掉他。\n3. 控制收入。领导人必须知道钱在哪，而且必须能控制钱的流动。\n4. 好好回报联盟对你的支持。一定要给够，但是也不要过多。\n5. 绝对不要从联盟口袋里往外拿钱给人民。这意味着任何改革如果伤害到联盟的利益就很难进行。\n\n民主制度就是一种以满足人民短期利益为目标的福利制度。\n\n民主的本质不是选举，而是联盟人数多。所以民主化的根本办法就是扩大联盟人数。\n\n### Part 2 流水线时代的英雄\n\n大多数人会在第一次或者第二次失败的时候放弃、认命，然后跟周围其他人一样过大数据预测的生活。但是有的人却能一直坚持下来。\n\n#### 高中是个把人分类的机器\n\n##### 为什么会有人失业\n\n最理想的市场中不会有失业。如果劳动力完全由市场供求关系决定，你只要愿意拿比别人低的工资，就可以得到任何工作的机会。但是在现实中，只有非常低端的工作才是这样。\n\n哪怕是“谁来了都能干”的工作，企业也不希望“让谁都来干”，而希望员工都有一定的忠诚度和凝聚力，并愿意为此支付一个更高的工资。至于需要专业技能的工作就更是如此。\n\n##### 竞争游戏\n\n名校是一种稀缺资源。只要像进入名校的学生比招生名额多，高考竞争就很激烈。如果所有高中生都不用功备考，大学也要招那么多人；因为每个人都害怕自己考不上而用功，结果就是所有人都投入大量无谓的精力，大学还是只招这么多人。\n国家是因为教育而富强的吗？\n\n一个国家的教育水平其实是在这个国家的经济腾飞以后才起来的。\n\n工作机会必须先走一步来带动教育发展。\n\n##### 穷人和富人：谁更应该上名校？\n\n对聪明学生来说，上不上名校并不重要。你走这条路能成功，走别的路也能成功。这可能是因为社会足够复杂，而市场足够有效，以至于一次没被选中也无所谓。\n低收入家庭的孩子上不上名校对他影响巨大，可以说第一步走错以后想出头就很难了。\n\n#### 精致的利己主义者和常青藤的绵羊\n\n##### 好得像绵羊一样的学生\n\n人们印象中的名校应该不拘一格降人才，每个学生都根据自己的个性选择不同的道路，百花齐放。然而事实是在追求安全不敢冒险的氛围下，学生们互相模仿，生怕跟别人不一样。\n别人怎么要求，他们就怎么反应。不敢冒险，互相模仿。一群群的都往同样的方向走。这不就是绵羊吗？\n\n#### 能把穷人变成正常人的教学法\n\n##### 穷人与教育\n\n贫困，其实是一个复杂系统中多种因素联合造成的结果，你很难简单地使用某个单一办法--帮助就业、直接发钱、让他去更好的学校读书--来让一个人摆脱贫困，你必须多管齐下才行。\n\n自控，是一种反人性的行为。它要求我们做“该做”的事，而不是“想做”的事。现在有句流行的话“以一般人的努力程度之低，根本谈不上拼天赋”，其实是有道理的。一个有自控力的阿仁生活再差也差不到哪儿去，自控力是比想象力更为基本和行之有效的个人素质，事摆脱贫困的关键一步。\n\n#### 美国人说的圣贤之道\n\n##### 怎样成为圣贤\n\n\"人性这根曲木,绝然造不出任何笔直的东西。\"只有当你承认自己是有缺陷的，摆正谦卑的态度，你才有可能跟自己的弱点作斗争，才有可能去完善品格。\n\n不好的情感冲动如果不加以遏制，不防微杜渐，就有可能形成正反馈，越来越大，乃至导致灾难。所以哪怕是小事，也不能掉以轻心--“勿以恶小而为之”。\n\n品格的修炼并不是要消除这些冲动，而是要学会控制这些冲动--“发乎情止乎礼”。\n\n压制自己的情感冲动，要形成习惯才好。这就要求我们平时把任何小事都视为磨炼品格的机会，不能稍有放松--“勿以善小而不为”。\n\n他们不问我想干什么，他们问这个世界需要我干什么。他们不是用做事的方法来满足内心。他们是为了做成这件事，去不断打磨自己的内心。\n\n品格修养的追求目标，并不在于成功，而在于成熟。特别可靠，才能办大事--“可以托六尺之孤，可以寄百里之命······”\n\n##### 中庸之道\n\n中庸不是什么：中庸不是面对两种对立意见采取一个折中的立场，不是盲目地搞平等，也不是对各种不同意见和稀泥。\n中庸，是你要认识到不同理念，不同情感诉求、不同道德标准之间，必然有冲突。这些理念没有哪个是完美的，谁也说服不了谁，谁也消灭不了谁，矛盾永远存在。\n\n所以作为最高领导人，就绝对不能像个二愣子一样全面倒向一种理念然后打压其他理念，试图给个一劳永逸的解决方案。\n所以领导的艺术就如同在风暴中驾驶帆船：太往左偏了就往右调整一下，太往右偏了就往左调整一下。平衡永远是动态的。你就永远这么调啊调，这就是中庸之道。\n\n##### 品格和现代人\n\n在现代社会，这条路根本就不是给普通人准备的。普通人的上限是“精致的利己主义者”--你只要根据社会给你的设定，把自己分内的工作做好，对社会给你的各种经济学刺激做出合理反应就可以了。你左右不了世界，世界也不担心被你破坏。\n只要那些想要办大事的人需要品格。因为这样的人不能单靠本能反应行事。\n\n他们需要动用自由意志去做决策，而且他们的决策会对世界产生影响。他们不能因为自己恰好不喜欢哪个国家就不让哪个国家进入联盟，他们不能因为自己恰好喜欢哪一派理论就按哪派理论制定政策，他们不能因为这么做恰好对自己最有利而不顾整体利益。他们愿意为心中的大事牺牲。\n\n我们知道了当今那些市侩猥琐的公众人物，大概是不太可能干出什么大事来的。\n\n#### 说英雄，谁是英雄\n\n谁说社会成见没意义？成见往往是对的，成见是对历史经验的总结，是对未来必然重演历史的信心。大数据预测，就是用成见预测。\n\n世界上有些人却是统计模型所预测不了的。统计，顾名思义，就是指多数人的行为规律。总有少数人的数据因为距离大多数人的主流数据太远，而被模型视为误差直接忽略。\n\n平凡的人们没有给我太多感动。这些不平凡、不能被模型预测的人，才是真的英雄。\n\n##### 体制\n\n无论是发达国家还是发展中国家的现代化教育体制，只要是一大群学生一起坐在教师里听一个老师讲课，就都是工业化流水线的模式。这种学校教育，对“最普通”的人最有利。\n\n个性学生从来都不是体制的产物，他们主动对抗体制。\n\n##### 美国教育各阶层分析\n\n普通工人阶层的学校强调遵守规章流程，整个教学充满死记硬背的机械式程序，学生几乎没有做选择和做决定的机会。老师教任何东西，哪怕是解数学题，都是用向学生灌输规则的方法。\n\n一般中产阶层的学校强调把事做“对”。有点像中国的应试教育，以学习材料为核心，要求学生必须理解这些材料--你可以用自己的方法理解，只要你能得到正确答案。学校教学很强调课本的权威性，你绝对不能对课本结论提出质疑。\n\n专业人士阶层的学校强调创造性和独立性。\n\n主管精英阶层的学校强调智识，这个阶层的学生学的不是怎么遵守规则，而是怎么制定规则。教育的核心目标，是决策和选择。\n\n大多数情况下，人不太容易超越自己父母的阶层。\n\n##### 中国各阶层的三种教育目标\n\n贫民家庭对教育的期待是培养工具，以找工作为目的。\n\n中产家庭对教育的期待是培养工艺品，以提升个人价值为目的。\n\n上层家庭对教育的期待是培养主人翁，以欣赏、选择和改变周围世界为目的。\n\n家庭收入水平和父母文化水平，直接决定孩子能达到什么层次。\n\n##### 英雄的套路\n\n所谓英雄，就是超越了阶层出身，超越了周围环境、超越了性格局限，拒绝按照任何设定好的程序行事，不能被大数据预测，能给世界带来惊喜，最不想机器人的人。\n\n必须改变自己，重新认识这个世界，然后用全新的方式面对。\n\n#### 使命的召唤\n\n英雄和俗人的根本区别在于，俗人想要适应世界，英雄想要改变世界。\n\n为什么英雄是自由的？因为一个人一旦有了使命感，就有了最彻底的主人翁精神，你就不用管他，也管不住他了。\n\n他们只对自己的使命负责，不受任何外力的限制。他们敢问不该问的问题，敢挑战周围人的共识，不屑于取悦任何人。\n英雄=创新\n\n创新就是打破常规，创新就是意外，创新就是你事先根本没预测到。根据我们队英雄的定义，这就是英雄做的事情。\n\n### Part 3 智识分子的十八般武艺\n\n人类所知非常有限，哪怕是最好的学者花了很多钱做得很好的研究，也可能是错的。科学的最大价值并不在于固定的知识，而在于获得这些知识的研究方法。\n\n#### 为什么高考作文题目是可预测的\n\n用数据分析搞预测的隐含假设是未来事件会继续落入最近流行的俗套。\n\n简单的系统容易预测，因为一个个体哪怕出点预测范围以外的波动，对整个系统也不会有大影响。而如果一个系统中包含各种正反馈机制，它就是不好预测的复杂系统，一个个体的小波动就有可能通过连锁反应层层放大出现蝴蝶效应。\n\n出题者不需要什么反馈，更不需要正反馈！他们要确保那些稍微聪明一点用功一点的孩子都能考上，把偶然因素降到最低。所以他们必然诉诸俗套。俗套最安全。数据分析指向哪里，他们就打向哪里。\n\n#### 大数据带来的主题军备竞赛\n\n##### 锤子和钉子\n\n中国高考作文的出题方法有个固定的套路：给你讲一段小故事，然后让你根据这个故事，想想自己受到什么启发，写篇文章。换句话说，你的作文重点根本不是这个故事，故事只是你要写的主题的一个素材。\n\n同一个素材，个人思考角度不同，可以对应不同的主题。但更重要的是，不同的素材可以对应同样的主题。\n\n只要一个人熟读这六个方面（奋斗、自由、青春、自然、环境和尊敬）各种可能主题的文章，掌握其写作套路，不管高考出什么素材都能应对自如。\n\n##### 主题模型\n\n“隐含狄利克雷分布”（Latent Dirchlet allocation LDA）:计算机认为文章只不过是一些词汇的集合。而每个主题，也只是一些关键词的集合。计算机没必要“理解”每个主题或每个词的意思，甚至根本不用管这些词出现的先后顺序。计算机要做的仅仅是使用一定的数学方法对每篇文章中的词汇进行分析。一篇文章拿过来，你要做的就是把事先设定的所有主题一个一个过一遍，计算这篇文章中的词汇对应每个主题的可能性是多少。计算结果，就是这篇文章说的是每个主题的概率大小。一篇文章甚至可以包含多个主题，这不是问题。关键在于，计算机可以判断一篇文章最有可能说的是什么主题，第二可能说的是什么主题······这就相当于计算机已经“读懂”了这篇文章。\n\n##### 未来\n\n数据分析的真正作用是能让好东西迅速流传开来······然后迅速消亡。\n\n#### 大尺度和硬条件：四万年来谁著史\n\n尺度，是一个重要的思维方式。尺度思维的一个要点在于，当你考虑大尺度问题的时候，小尺度的现象常常可以忽略或者简化。而更为重要的是，从小尺度现象出发往往解释不了大尺度问题。\n\n研究大尺度问题，必须关注一些长期不变的因素，也就是“硬条件”。\n\n有些硬条件构成了历史发展的种种限制，使人们不能恣意而为，而有些硬条件则又是我们的重大机遇。正因为有了这些限制，使人们不能恣意而为，历史的演化才成了带着镣铐跳舞，反而不平淡了。\n\n#### 技术左右天下大势\n\n在技术进步的任何阶段，都不是你想要什么就能研发什么。技术不听我们的，我们得听技术的。\n\n一项技术如果到了“该出来”的时候，它就一定会出来。因为它会被好几个人同时发现。\n\n技术不仅仅是被人类需求或者人类天才创造的推动，它自身就是自身的推动。正如生物进化一样，每一次技术突破都孕育新的技术突破，整个的技术进步是一个自组织和正反馈过程。\n\n#### 一点实用主义的学英语心得\n\n正确的做法是找本托福或者GRE的单词书，每天拿出几个小时的时间，背300-600个单词。\n\n记忆的关键在于间隔式的重复，过一天复习一次，过三天再复习一次，过一周再复习一次，让间隔的时间越来越长。\n\n在背单词的同时，你找一本大学英语课本之类的书，精读其中的文章。这种书的好处是上面有注释和讲解。\n\n#### 信息极客的三个功夫\n\n第一个功夫是阅读学术论文，论文是知识的最前沿，而且是用最优条理的方式整理好的文本。\n\n第二个功夫是直接阅读原始数据，对奇怪的事非常敏感，产生疑问后不是口无凭据地质疑，而是立刻查找数据，拿数据说法。\n\n第三个功夫是主动采集和分析数据，把很多人的个人数据综合起来，可以帮助研究者更好地理解人类行为，所以量化自我也是对社会的贡献。不但如此，个人还能拿自己的数据搞点小研究。\n\n##### “舌战群儒”的技术分析\n\n###### “舌战群儒”的技术\n\n1. 列举事实证据，暗示对方能力不行\n2. 如果比不过事实，比境界\n3. 你别说我如何如何不堪，著名英雄xxx也曾经如此不堪\n\n#### 贝叶斯定理的胆识\n\n“相信不相信”的真正意义，在于给我们自己的决策提供依据。\n\n一般情况下对一般有争议的问题我们都是抱着将信将疑的态度，信念值在0.01%到99.99%之间。而且，我们队大多数事物的信念值都在动态变化。比如有什么特别突兀的新东西出来，我们一开始可能是不信的，随着证据增多，慢慢加强信念。\nA代表我们感兴趣的事件，p(A)表示它发生的概率。B代表一个与之有关的事件，p(A|B)则代表在B发生的情况下，A发生的概率。类似地，p(B|A)表示在A发生的情况下，B发生的概率。\n\n最关键思想是在B发生以后，有了这个新的证据，我们对A的信念需要做一个调整，从p(A)变成p(A|B)了。你可以把A当成你对一般情况的理论预言，把B当成一次实验结果。有了新的实验结果，你就调整自己的理论预言。\n\n如果我们对某件事的信念值非常非常低，那么即使强有力的证据也很难扭转我们的信念。\n\n观点随事实改变，有胆有识，这就是贝叶斯定理的伟大原则。\n\n#### 生猛的进化心理学\n\n人们对进化心理学争论主要是两点。第一，传统社会科学认为人类是高级生命，是特殊的，人不是动物；而进化心理学认为人类跟动物没什么区别，“完全”平等。第二，传统社会科学认为人的性格和思维模式主要是后天环境（包括自然环境和社会环境）影响的结果，而进化心理学认为所谓“人性”，主要是人这个物种长期进化遗传自然选择适应的结果，小孩一生下来他/她的“人性”就已经定好了。\n\n进化心理学有个基础假设，称为“大草原原理”（Savanna principle）。这个原理说，由于人类的进化速度非常慢，而最近几千年人类的生活方式变化极快，以至于人的进化没有跟上人的生活变化的步伐。所以我们这些所谓现代人的性格和思维模式很大程度上仍然停留在史前的水平，比如说石器时代。也就是说，要想理解为什么今天的人会有这样那样的行为，只要对比石器时代就可以了。\n\n进化心理学更多的是解释我们潜意识中的“常识”。有些东西我们都喜欢，但是我们又说不清楚为什么喜欢，这时候就该进化心理学出手了。\n\n进化心理学认为所有两性差异都可以用生育能力的差异来解释。第一个差异是数量级上的差异。一个男人理论上可以有无数个孩子，而一个女人终其一生最多只能有几十个孩子。这就决定了女人一定更重视家庭。第二个差异是女人一定知道自己的孩子是自己的，但史前男人无法确定自己女人生的孩子是不是真的是自己的，正所谓“momma's baby, daday's maybe”。正是因为这个根本原因，导致男人特别不能容忍妻子的不忠。\n\n哪怕进化心理学能够解释传统社会里的很多现象，到了现代社会，有很多人其实是进步了。进化心理学只能说明我们的一个思维趋势，而这些进步了的人可以克服自己不好的趋势，超越进化心理学。\n\n人受教育就是为了超越进化心理学，用理性克服本能！\n\n#### 哪种知识最可靠？\n\n科学的最大价值并不在于固定的知识，而在于获得这些知识的研究方法。\n\n任何数学知识都绝对正确，不容置疑。凡是出发点正确而又是用逻辑推导出来的知识，就必定是正确的。\n\n既然专家的建议不一定好使，我们就千万不要执着于使用某一个特定的理论去做事，最好都抱着试试看的态度，这个理论不行就换另一个理论。\n\n如果有人像个神甫一样说他身怀宇宙真理般的理论，充满自信，最好别信他。\n\n#### 宇航时代为何还未到来？\n\n现阶段的载人航天其实是个形象工程。\n\n形象工程的最主要好处是让人民（包括纳税人）高兴。\n\n大宇航时代什么时候才能到来？我们必须指望将来有一个什么重大发现，发现太阳系深处的某个地方有一种对地球人来说价值连城的东西，值得人们不惜钱财和生命去追求。\n\n### Part4 未来，已经到来\n\n我们即将进入一个“不换思想就换人”的时代。\n\n#### 把工作输给机器人\n\n《与机器竞赛》这本书指出，在与机器进行的这场竞赛中，有三类赢家和三类输家。高技术工人是赢家，而低学历者将是输家，因为机器人将会迅速取代他们的工作。超级明星是赢家，第二名及其他所有人都是输家。资本是赢家，劳动者是输家。\n\n#### 你比机器强在哪儿？\n\n这个世界正在经历深刻的变革：人靠知识谋生的主流方式一变再变。\n人得靠创造新知识来赚钱。机器人会的所有东西，都是跟人学的。写报告也好，提建议也好，诊断病情也好，机器人的能耐在于从已经发生的事情中找到规律，然后把这个规律用于新的事情。机器人，是彻底的经验主义者。\n人的一个任务是打破常规，第二个任务是表达自己的好恶。\n\n#### 带着机器竞赛\n\n这些善于弥补计算机不足、善于利用机器优势、善于发挥人的特点的人，不是在与机器竞赛，而是带着机器竞赛。\n他们的秘密在与知道怎么更好地调教和帮助计算机看得更远。计算机不再是人类的秘书，而是一个有无限潜能的猛兽，取胜的关键在于你会不会使。\n\n#### 怎么杀死海星\n\n传统组织就如同蜘蛛，它的智力集中在大脑，只要你把蜘蛛的头去掉，蜘蛛就会死亡。而去中心化组织就如同海星，海星根本就没有头。它的智能分布在身体各处，一旦你打掉它身体的一部分，那个部分甚至可能自己再长成另一个海星。\n\n把去中心化组织的成员联系在一起的不是领导人，而是某个共同的理念或者需求。有时候组织有一个名义上的领导，但其对整个组织的控制能力极其有限，更多的是一个精神领袖。\n\n不过去中心化组织有个关键的弱点：你很难通过这样的组织赚大钱。分权的产业利润低，只有集权才能获得高利润。\n\n##### 杀死海星的三个策略\n\n1. 改变环境，既然你们是靠一种意识形态联系在一起，我就让你这个意识形态没有市场。\n2. 先把海星变成蜘蛛再杀。\n3. 把自己去中心化。借鉴去中心化组织的分布式智力和灵活多变的特点。\n\n#### 合弄制：一种新的管理方法\n\n合弄制，并不是一般的分权改革，它是一种非常严格，而且相当复杂的组织管理方式。\n\n合弄制的一个核心思想是以工作为本，而不是以人为本。合弄制首先要求你是一个“有目的的组织”。合弄制要求组织中的每个人都要能够判断各项工作是否符合这个目的。\n\n明确了公司的总目的，公司就可以通过管治会议（Governance Meeting）来根据这个目的把工作分块，并把它们变成一个个具体的功用。\n\n管制会议定下功用之后，给每个功用成立一个“圈（Circle）”，同时决定每个圈中需要的“角色（Roles）”。圈就是角色的集合。\n\n传统公司是人员组织结构固定，把工作往人身上分，而合弄制则是工作职责固定，把人往工作上分。每个圈有一个“链长（ LeadLink）”，这是一个具体的人。链长对自己圈的工作没有决定权，他唯一的权力是往自己圈里的角色中放人。他可以在全公司范围内邀请任何人来填充角色，并且有权在认为一个人没有做好自己角色的时候将其从角色上提出。所有圈里的重大决策都由这个圈里所有角色参加的管治会议民主讨论决定。而在日常工作中，每个人则根据自己的角色有相当大的自主权。没有任何人可以命令你干什么。你根据自己的角色的职责和权力自己决定干什么。\n\n每个圈的管治会议还可以根据工作需要在圈中再成立“子圈”，规定每个子圈的功用和子圈中有些什么角色，并由链长指定每个子圈的链长。子圈中还可以又有子圈，如此层层嵌套，就如同人体分为器官、组织、细胞等等。每一个圈的管治会议，由直接属于这个圈的全体角色，以及这个圈直接下属每个子圈的一个代表参加。\n\n如此看来合弄制并非是没有管理或者没有等级的体制。各层圈的上下级关系非常明确。一个圈之内实行民主，但上圈直接决定子圈的目的和角色功用，而且链长有绝对的人事权。但关键在于，这些管理和等级都是针对工作，或者说是针对角色的。而不是针对人的。\n\n合弄制的一个妙处在于每个人可以拥有多个不同的角色！\n\n##### 合弄制的好处\n\n1. 职权非常透明，公司可以变得更有效率。\n2. 公司可以更加容易做出改变，能够对市场做出迅速反应。\n\n#### 该死就死的市场经济\n\n市场的真正关键在于“不知道”。政府计划不行，并不是说政府不够聪明或者政府的计算机不够快，而是政府不知道未来会怎么变--没人知道未来会怎么变。\n\n##### 市场经济，深得生物进化之道\n\n1. 随机变异。\n2. 自由交配\n3. 无情淘汰\n\n参与市场得有这样的精神：想生就生，该死就死。\n\n#### 物质极大丰富的时代\n\n四个论点\n\n1. 产生经济衰退的原因是剩余利润。增加私人投资已经不能带来经济增长，应该靠消费带来增长。\n2. 为扩大消费，应该搞财富的再分配，比如增加社会福利。\n3. 投资应该社会化。决定一个项目是否上马，不应该只看其能带来多少利润，而应该全社会一起评估它的社会价值，也就是说要追求使用价值。\n4. 花钱是道德的，消费文化是个好东西。\n","slug":"智识分子-做个复杂的现代人","published":1,"updated":"2021-03-30T03:24:16.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx11005qvcuac0ki2omg","content":"<h3 id=\"自序–做个复杂的现代人三个趋势\"><a href=\"#自序–做个复杂的现代人三个趋势\" class=\"headerlink\" title=\"自序–做个复杂的现代人三个趋势\"></a>自序–做个复杂的现代人三个趋势</h3><ol>\n<li>世界越来越复杂</li>\n<li>人工智能正在慢慢取代人的工作</li>\n<li>尽管所有人的物质生活都在改善，整个社会阶级分层却正在扩大。<span id=\"more\"></span>\n如何听取理工科专家的意见复杂世界中很少哪个实际问题是只用一方面的知识就能解决的。所以对待理工科专家，最好的办法是把他们的意见当成决策的参考。你可以在你的专业范围内给我提供最好的论点数据，但具体怎么决策，我还得再听听别人的论点和数据。理念和算数认准一个方向毫不动摇，是理念，是派系斗争，是意识形态，是情怀。知道过犹不及，该左左该右右，时刻为寻找最优值进行调整，才是理性态度。解决问题的关键往往不在于你有没有一个高大上的理念，而在于“度”。在于数字。复杂世界中几乎任何东西都是有利有弊，用与不用不仅仅要看这个东西好不好，还要看你能承受多大代价。想要学会寻找合适的“度”，你至少需要掌握两个不同的理念。狐狸和刺猬刺猬式的思维方式是进取的，只知一件大事，在简约的名义下，寻求和扩大此事的解释力，以“掩盖”新的案例；狐狸式的思维方式更加折中，知道很多小事，与瞬息万变的世界保持同步，满足于根据时代找出合适的解决之道。现代化的道理千头万绪，唯有此事最为关键：不要被自己心中的“大主意”劫持。狐狸思维的种种特点</li>\n</ol>\n<ul>\n<li>狐狸乐于接受新的信息；</li>\n<li>狐狸对自己决策的信息远小于刺猬；</li>\n<li>即使做过决定之后，狐狸仍然想从不同的视角进行再思考；</li>\n<li>狐狸总爱不断修正自己的预测；</li>\n<li>狐狸也许并不像刺猬一样对某个特定领域无比内行，但是他的知识面宽得多，了解很多事；</li>\n<li>狐狸对很多事情持怀疑态度；</li>\n<li>当考虑冲突的时候，狐狸能看到双方可能正确的方面；</li>\n<li>狐狸喜欢与观点不同的人打交道；</li>\n<li>狐狸在工作中并不追求明确的规则和秩序；</li>\n<li>狐狸喜欢有多个答案的问题，他们在解决问题的时候常常能发现多个选择；</li>\n<li>总而言之，狐狸眼中的世界是复杂的。</li>\n</ul>\n<p>十八般武艺我们不能满足于当某一方面的“专才”，而应该广泛学习各种知识，掌握“通识”。想要解决社会、经济和生活问题。不能追求掌握一个一劳永逸的“正确”理论，而应该追求掌握一系列不同流派的思维方法，十八般武艺，多多益善。严肃文学可以让人学会体察他人的感受，了解真实世界中不同类型人的生活。逻辑可以让人学会推理和辩论。文法修辞可以让人学会怎么用语言争取别人的支持。历史可以让人学会借鉴前人的经验。数学可以让人学会取舍。天文学可以让人对世界的自然规律产生敬畏。这些学问不是什么用于打扮自己、被别人审美的“教养”，这些都是大人物办大事的实用技能！博雅之学，并不是告诉我们什么放诸四海而皆准的真理，而是提供一些寓言故事、名人典故和思维套路。你掌握的套路越多，办事的时候可供选择的思路就越多。至于遇到什么事应该用哪个套路去解决，这没有任何程序性固定办法，是一种艺术，只能自己选择。Part 1 世界观祛魅很庆幸，我们生活在一个受限制的世界。这个世界有很多好东西，是人人都想要，但是未必能得到的。想要得到这样的东西，你必须付出代价。别用“常识”理解复杂世界常识只是特别善于在事后“解释”事件，这种解释根本谈不上真正的理解。要想从复杂的随机事件中看到真正的规律，最好的办法是像搞自然科学一样进行大规模的重复实验。一个更实用的历史观是放弃“一切都是注定的”这个思想，把历史事件当成众多可能性中的一种，把未来当成一个概率分布，然后尽可能地使用统计方法，通过历史事件去计算未来事件的概率。与其追求用各种想当然的常识指导未来，不如把历史当作一个数据库，从中发掘统计规律。模仿的雪崩效应人是善于模仿的动物，因为相对于自己分析各种因素再决策而言，直接模仿别人是一条思维捷径。但骚乱的故事告诉我们，人在很多情况下不是因为被别人的行为提醒后为了自身原因采取行动，而是为了模仿而模仿。<br>为了模仿而模仿，是最大的不稳定因素，因为它让原本无关的人参与到事件之中，导致事态以爆炸的速度迅速扩大。<br>但这个雪崩其实是不可靠的：只要我们把初期的几个人拿掉任意一个，那么骚乱反应就会早早断裂，而避免大规模事件。<br>一个大规模事件的走向很可能跟这个事件的起因没有关系。<br>凡夫畏果，菩萨畏因，但维稳的关键既不是最开始的起因也不是事态扩大以后的结果，而是事件初期的几步。</p>\n<h4 id=\"最简单经济学的五个智慧\"><a href=\"#最简单经济学的五个智慧\" class=\"headerlink\" title=\"最简单经济学的五个智慧\"></a>最简单经济学的五个智慧</h4><p>当一个人阅历越来越多，慢慢变成熟，他的思想可能会更加右倾保守。</p>\n<ol>\n<li><p>国家不是家庭</p>\n<p> 人们在家庭中接受这种不平等是出于爱和关怀，而这对陌生人不适用。在陌生人之间，双方除了诚实守信互不侵犯之外没有更多的义务的感情，才讲平等。所以家庭讲感情，国家应该讲利益和效率。<br>什么叫“升米恩，斗米仇”？关键不是什么心理学，而是事情的性质变了。遇到饥饿的人随手请他吃顿饭，这是个人的友善行为；长期、成体系或大规模地发放馒头，这就成了公共事务和经济行为了。<br>要求对富人持续性加税，乃至产生均贫富的思想，这都是用家庭的眼光去看国家。考虑此类问题的正确出发点不应该是“都是一个国家的人，贫富差距这么大是否道德”，而应该是“什么样的税收制度有利于经济增长”。</p>\n</li>\n<li><p>没有免费的午餐</p>\n<p> 心灵鸡汤有两大论点：</p>\n<ol>\n<li>不管你面对什么条件，只要你努力，甚至只要你愿意做个好人，就一切皆有可能。</li>\n<li>哪怕你不努力不做好人也没关系，反正“世界上最美好的东西都是免费的”</li>\n</ol>\n<p> 所以心灵鸡汤要求我们关注自己而不必关注外部条件，暗示我们享受已有的而不要去追求别的东西。<br>哪怕这个东西再好，如果它要求的代价太高，那我们就应该不要。反过来说，哪怕要付出一个代价，只要换来的东西价值更大，那就可以付出。<br>边际分析是指你不用考虑总的效果，你只要考虑做下一步的临界效果就行了。比如你要生产某个产品，它有价格收益和成本，这两个数字都在随着市场变化。你不必管已经生产了多少这个产品，只要你生产的下一个这个产品的收益大于成本，你就可以继续生产。如果下一个产品的成本正好等于收益，你就应该停止生产———–。<br>边际效应常常递减。可能你投入的钱越来越多，但是效果却越来越不明显。</p>\n</li>\n<li><p>人会对激励作出反应</p>\n<p> 激励这个方法的好处在于，只要你的激励制度设计得好，人们就会心甘情愿地做你想让他们做的事。<br>改变人的行为，最好的方法就是改变激励。</p>\n<p> 不过激励如果设计得不好，有可能适得其反。</p>\n<p> 给个自上而下的单方面外部激励政策，是经济学家解决问题最爱用的两个办法之一。另一个办法是市场化。</p>\n</li>\n<li><p>市场是一种激励信号的传递方式</p>\n<p> 通过价格信号，市场可以让最该办的事儿优先办，而且可以让做这件事做得最好的人去做这件事。如果不用市场机制，什么事儿应该办，让谁去办，这两个问题都非常难以回答。这样说来，市场最大的好处是解决了信号的问题，能把资源合理地配置给企业。</p>\n<p> 如果某个好东西暂时是稀缺的，但是只要人们愿意生产就能大量生产出来，市场就可能是解决这个问题的最佳手段。</p>\n<p> 私有化产权仅仅是一个基础条件。有价格这个激励信号，才是市场的关键。如果产权私有但是信号并不畅通，市场就会失灵。</p>\n<p> 所以市场经济绝不仅仅是产权改革这么简单的事。你必须有足够好的基础设施能确保信号有效传递，才叫真正的市场经济。</p>\n</li>\n<li><p>结果可能出乎意料</p>\n<p> 复杂系统的行为往往难以预料。你让蝴蝶在这里扇动一下翅膀，虽然非常不可能、但也许就可能，在千里之外的某个地方造成一场飓风。你发布一个什么政策，造成的影响可能一波推一波，最后结果也许完全出乎你的意料。</p>\n<p> 任何大型社会项目的任何效果评估的预期值等于0</p>\n<p> 所以不到万不得已，最好别轻易按你自己凭空想出来的什么史无前例的大招去扰动复杂系统，你根本不知道最后会导致什么！你很可能是小孩玩火！这叫“皇帝做不得快意事”。</p>\n<p> 这也说明阴谋论根本不靠谱，各种停留在纸面上的假想实验更不靠谱。我们生活的是一个太过复杂的世界，没有人能控制得了这个世界。</p>\n</li>\n</ol>\n<h4 id=\"选民的大脑想要什么\"><a href=\"#选民的大脑想要什么\" class=\"headerlink\" title=\"选民的大脑想要什么\"></a>选民的大脑想要什么</h4><pre><code>很多人心目中最理想的民主选举制度，是假说每个选民都能清晰理解候选人许诺的各项制度，并且能理智地对候选人能力和这些政策的好坏做出判断，在这种情况下，大多数人的意见很可能就是最好的意见，民主就是有效的。\n</code></pre>\n<p>选民的无知不是随机分布的，他们的整体意见存在系统偏见。在四个关键问题上，一般公众与经济学家的意见相反，真理不幸掌握在少数人手中。</p>\n<ol>\n<li><p>经济学家非常相信市场，相信看不见的手；而一般公众很难理解纵容私人公司的贪婪怎么能给社会带来整体利益。公众只看到公司赚钱了，却看不到利润对公司提高效率和服务的激励作用。</p>\n</li>\n<li><p>经济学家支持自由贸易，而公众则本能地反感外国货，支持本国货。公众总是低估对外贸易的好处，总是认为外国在抢夺本国的就业机会。</p>\n</li>\n<li><p>公众过分害怕裁员。如果一项新技术可以节省人力，公众的态度往往会认为这个技术不但不是进步，而且还是个危险。而在经济学家看来，一个人的工作只有在他生产的产品能卖出去的情况下才有意义。</p>\n</li>\n<li><p>公众往往过高估计当前社会问题的严重性，过低估计经济的表现。不好的东西总是比好的东西更能给人留下深刻印象。</p>\n</li>\n</ol>\n<h5 id=\"选民想要的东西，叫做“小故事”\"><a href=\"#选民想要的东西，叫做“小故事”\" class=\"headerlink\" title=\"选民想要的东西，叫做“小故事”\"></a>选民想要的东西，叫做“小故事”</h5><pre><code>认知学家发现，人脑认识复杂的外部世界，是通过“小故事”（narrative）去解读的。\n小故事的重要特点是它能调动人的感情，在一个小故事里，人脑的两个感情区域（一个正面感情，一个是负面感情，在不同区域）被随时激活。我们总是会对故事中的人和事有一个好坏评价。\n懂行的政客从来不给选民上经济课，他们专门给选民讲故事。\n选民最喜欢的两个小故事，一个是“不怕敌人的勇敢故事”，另一个事“自我救赎的奋斗故事”。哪个候选人会讲这两个故事，哪个候选人就会当选。\n当一个选民投票，他根本不是在选择自己的未来利益，他是在根据自己大脑中的小故事来宣泄自己的感情。\n</code></pre>\n<h4 id=\"高效能任性\"><a href=\"#高效能任性\" class=\"headerlink\" title=\"高效能任性\"></a>高效能任性</h4><h5 id=\"高效能人士的一个习惯\"><a href=\"#高效能人士的一个习惯\" class=\"headerlink\" title=\"高效能人士的一个习惯\"></a>高效能人士的一个习惯</h5><pre><code>以原则为重心去做事，你得有一种使命感，给自己的人生找个愿景和方向。这种愿景不是什么成功了之后去找一个岛退休之类，而是个人的最终期许和价值观这种比较高级的东西，比如改变世界--或者说，将来盖棺定论时你希望获得什么评价。你应该根据这个使命感给自己设定一套宪法般的原则，时刻谨记在心，一举一动都是为了这个愿景。\n</code></pre>\n<h5 id=\"谁更自私\"><a href=\"#谁更自私\" class=\"headerlink\" title=\"谁更自私\"></a>谁更自私</h5><pre><code>人们普遍相信真正的精英都是这样和蔼可亲甚至道骨仙风，他们的成功根本不是靠投机钻营，而是靠正大光明的软实力。\n这些研究都表明，富人和所谓上流社会的道德水准不但不比普通人高，而且比普通人低。\n社会经济地位高的人群比普通人更自私。\n</code></pre>\n<h5 id=\"公平世界假设\"><a href=\"#公平世界假设\" class=\"headerlink\" title=\"公平世界假设\"></a>公平世界假设</h5><pre><code>我们认为世界是公平的。但这恰恰是个错误的世界观。事实上，心理学家甚至对这个错误有个专有名词，叫做“公平世界假设”（just-world hypothesis，也叫just-world fallacy）。\n世界其实并不公平。公平只是小说和电影给我们的幻觉，那些剧情的结局公平只不过是因为我们喜欢看公平结局。\n相信公平世界假设对你有三个害处：\n    1. 你不能从别人的成功中学到东西。有人靠不择手段成功了，你很不喜欢，所以你就不愿意跟他学，你就学不到更多经验。其实这个人值不值得学习，跟你喜不喜欢她一点关系都没有。\n    2. 你以为做好自己的事情就行了，你会低估世界上发生的坏事。你会发现你想做成一点事非常难，感觉别人整天跟你作对。\n    3. 更有甚者，你会认为取得成功的人必有长处，失败的人必有可恨之处。\n</code></pre>\n<h4 id=\"到底怎么才能在这个世界成功？\"><a href=\"#到底怎么才能在这个世界成功？\" class=\"headerlink\" title=\"到底怎么才能在这个世界成功？\"></a>到底怎么才能在这个世界成功？</h4><ol>\n<li>一个人能不能获得权力，能不能得到甚至，他的工作业绩是一个不重要的因素。</li>\n<li>决定你升职的最重要因素，是你跟上级的关系。想搞好跟上级的关系，Pfeffer讲了三招：在上级面前吹嘘自己，充分领会上级意图，以及对上级阿谀奉承。</li>\n</ol>\n<p>其实从经济学角度，你应该做一个“理性的人”–这意味着你应该从自利的角度出发做事，而不是“好人”。</p>\n<h5 id=\"康德式任性\"><a href=\"#康德式任性\" class=\"headerlink\" title=\"康德式任性\"></a>康德式任性</h5><p>真正的积极主动，是你的行为完全取决于自身，而不被外界刺激所左右。你的自由意志独立于外界限制，在刺激和回应之间，你有选择和回应的自由和能力。<br>你做这件事纯粹是出于任性，而康德认为，只有出于任性–也就是自由意志–而去做一件事，才是真正的自由选择。</p>\n<h5 id=\"有一种歧视叫自利\"><a href=\"#有一种歧视叫自利\" class=\"headerlink\" title=\"有一种歧视叫自利\"></a>有一种歧视叫自利</h5><p>歧视有两种。一种是“敌意歧视”，损人不利己，宁可不赚你的钱也不跟你打交道，甚至还要故意黑你。另一种则是“经济歧视”。对某一人群的区别对待无关个人感情，纯粹是出于自利。<br>时至今日，除了个别特别愚蠢的人拿别人的种族找自己的优越感之外，真正恶意的歧视已经不多见了。经济歧视，才最值得关注。坏消息是想要消除针对某个群体的经济歧视非常困难。好消息是对个人来说经济歧视是有解的。<br>想要强行改变一个群体的整体形象，可以使用大规模宣传和教育的办法，例如好莱坞电影中尽量给黑人正面的形象。</p>\n<h4 id=\"人的正义思想是从哪里来的\"><a href=\"#人的正义思想是从哪里来的\" class=\"headerlink\" title=\"人的正义思想是从哪里来的\"></a>人的正义思想是从哪里来的</h4><p>道德问题的正不正义，往往比一件事具体做法的正确不正确更容易引起争论。</p>\n<p>所以判断一件事是否道德很容易，而为自己的判断找到理由则需要思考时间。科学家相信人的道德判断是直觉式的、感性的快速判断，并非来自理性计算。人的理性，只不过为自己的感情服务而已，是先有了答案再去想办法找证据。</p>\n<p>所以道德判断的确是从天上掉下来的。如果有人非说一件事是不道德，他一定能找到各种理由，他可能根本不知道他做这个判断的真正原因只是自己的一种微妙直觉。</p>\n<p>模式识别，我们的大脑中安装了各种模块，一旦识别到符合某个模式的东西就会立即反应。</p>\n<p>这些模式识别能力并非是后天被人撞过或者被蛇咬过之后才习得，而是写在基因之中，一出生就会，是进化带给我们的本能。</p>\n<h5 id=\"海特的六个道德模块\"><a href=\"#海特的六个道德模块\" class=\"headerlink\" title=\"海特的六个道德模块\"></a>海特的六个道德模块</h5><ol>\n<li>关爱/伤害 对应中国人说的“仁”。我们看到小孩受苦就会想要帮助他，这是哺乳动物的本能。</li>\n<li>公平/作弊 对应中国人说的“信”。这是与他人合作中的一种互惠机制，人们自然地认为合作产生的共同利益应该公平分配，如果有人作弊多占，我们就会愤怒。</li>\n<li>忠诚/背叛 对应中国人说的“义”，或者至少相当于江湖的“义气”。有多个实验证明人有一种天生的群体归属意识。忠诚感带来的凝聚力对团队竞争很有帮助，而且对外来威胁非常敏感。</li>\n<li>权威/服从 对应中国人说的“礼”。这个道德模块的表现是对长辈和地位高的人的尊敬。</li>\n<li>圣洁/堕落 这是一个有点宗教味道的道德模块，中国传统道德对此强调不多，但我们也都有这个模块。它对应的感觉就是“恶心”，是一种厌恶不洁之物的进化本能。</li>\n<li>自由/压迫 中国儒家对此似乎不太看重，但是道家很讲自由。不论如何，每个人都认为自由很好，压迫不好，不管是对自己还是对别人。</li>\n</ol>\n<p>人一出生，大脑中在政治上的侧重点就已经种下了种子。这些特性将会指引你的人生方向，特定的基因会让你主动去寻找适合这个基因发展的环境。</p>\n<p>人生的阅历和重大变故也许可以改变一个人的意识形态，但先天因素绝对非常重要。</p>\n<h4 id=\"放诸古今皆准的权力规则\"><a href=\"#放诸古今皆准的权力规则\" class=\"headerlink\" title=\"放诸古今皆准的权力规则\"></a>放诸古今皆准的权力规则</h4><p>不管是国家、公司还是国际组织，其政治格局不能简单以“民主”和“独裁”来划分，而必须用三个数字来描写。以国家为例，这个“三围”就是层层嵌套的三种人的人数：</p>\n<ul>\n<li>名义选民：在名义上有选举权和被选举权的全体公民。然而他们中的很多人，可能对谁当领导人根本没有任何影响力。</li>\n<li>实际选民：那些真正对谁当领导人有影响力的人。对美国来说这相当于选举这天出来投票的选民，对沙特阿拉伯王国这样的君主国来说他们是皇室成员。</li>\n<li>胜利联盟：必须依赖他们，领导人才能维持自己权力的人。对美国总统来说他们在关键选区投出关键一票让你当选的人，对独裁者人来说他们是你在军队和贵族内部的核心支持者。</li>\n</ul>\n<p>看一个国家是不是真民主，关键并不在于是否举行选举，而在于胜利联盟的人数。领导人工作的本质是为联盟服务，因为联盟对领导人有推翻权–如果你不能保证我们的利益，我们有能力随时换一个。如果联盟的人很多，那么这个国家就是我们通常所说的民主国家。反过来如果联盟的人数非常少，那么不管这个国家有没有选举，它都是事实上的独裁国家。<br>所有领导人，不论什么体制，其做事的终极目的只有两个：第一是获得权力，第二是保住权力。</p>\n<h5 id=\"五个通用的权力规则\"><a href=\"#五个通用的权力规则\" class=\"headerlink\" title=\"五个通用的权力规则\"></a>五个通用的权力规则</h5><ol>\n<li>要让联盟越小越好。联盟人数越少，收买他们要花的钱就越少。</li>\n<li>要让名义选民越来越好。名义选民多，一旦联盟中有人对你不满，你就可以轻易替换掉他。</li>\n<li>控制收入。领导人必须知道钱在哪，而且必须能控制钱的流动。</li>\n<li>好好回报联盟对你的支持。一定要给够，但是也不要过多。</li>\n<li>绝对不要从联盟口袋里往外拿钱给人民。这意味着任何改革如果伤害到联盟的利益就很难进行。</li>\n</ol>\n<p>民主制度就是一种以满足人民短期利益为目标的福利制度。</p>\n<p>民主的本质不是选举，而是联盟人数多。所以民主化的根本办法就是扩大联盟人数。</p>\n<h3 id=\"Part-2-流水线时代的英雄\"><a href=\"#Part-2-流水线时代的英雄\" class=\"headerlink\" title=\"Part 2 流水线时代的英雄\"></a>Part 2 流水线时代的英雄</h3><p>大多数人会在第一次或者第二次失败的时候放弃、认命，然后跟周围其他人一样过大数据预测的生活。但是有的人却能一直坚持下来。</p>\n<h4 id=\"高中是个把人分类的机器\"><a href=\"#高中是个把人分类的机器\" class=\"headerlink\" title=\"高中是个把人分类的机器\"></a>高中是个把人分类的机器</h4><h5 id=\"为什么会有人失业\"><a href=\"#为什么会有人失业\" class=\"headerlink\" title=\"为什么会有人失业\"></a>为什么会有人失业</h5><p>最理想的市场中不会有失业。如果劳动力完全由市场供求关系决定，你只要愿意拿比别人低的工资，就可以得到任何工作的机会。但是在现实中，只有非常低端的工作才是这样。</p>\n<p>哪怕是“谁来了都能干”的工作，企业也不希望“让谁都来干”，而希望员工都有一定的忠诚度和凝聚力，并愿意为此支付一个更高的工资。至于需要专业技能的工作就更是如此。</p>\n<h5 id=\"竞争游戏\"><a href=\"#竞争游戏\" class=\"headerlink\" title=\"竞争游戏\"></a>竞争游戏</h5><p>名校是一种稀缺资源。只要像进入名校的学生比招生名额多，高考竞争就很激烈。如果所有高中生都不用功备考，大学也要招那么多人；因为每个人都害怕自己考不上而用功，结果就是所有人都投入大量无谓的精力，大学还是只招这么多人。<br>国家是因为教育而富强的吗？</p>\n<p>一个国家的教育水平其实是在这个国家的经济腾飞以后才起来的。</p>\n<p>工作机会必须先走一步来带动教育发展。</p>\n<h5 id=\"穷人和富人：谁更应该上名校？\"><a href=\"#穷人和富人：谁更应该上名校？\" class=\"headerlink\" title=\"穷人和富人：谁更应该上名校？\"></a>穷人和富人：谁更应该上名校？</h5><p>对聪明学生来说，上不上名校并不重要。你走这条路能成功，走别的路也能成功。这可能是因为社会足够复杂，而市场足够有效，以至于一次没被选中也无所谓。<br>低收入家庭的孩子上不上名校对他影响巨大，可以说第一步走错以后想出头就很难了。</p>\n<h4 id=\"精致的利己主义者和常青藤的绵羊\"><a href=\"#精致的利己主义者和常青藤的绵羊\" class=\"headerlink\" title=\"精致的利己主义者和常青藤的绵羊\"></a>精致的利己主义者和常青藤的绵羊</h4><h5 id=\"好得像绵羊一样的学生\"><a href=\"#好得像绵羊一样的学生\" class=\"headerlink\" title=\"好得像绵羊一样的学生\"></a>好得像绵羊一样的学生</h5><p>人们印象中的名校应该不拘一格降人才，每个学生都根据自己的个性选择不同的道路，百花齐放。然而事实是在追求安全不敢冒险的氛围下，学生们互相模仿，生怕跟别人不一样。<br>别人怎么要求，他们就怎么反应。不敢冒险，互相模仿。一群群的都往同样的方向走。这不就是绵羊吗？</p>\n<h4 id=\"能把穷人变成正常人的教学法\"><a href=\"#能把穷人变成正常人的教学法\" class=\"headerlink\" title=\"能把穷人变成正常人的教学法\"></a>能把穷人变成正常人的教学法</h4><h5 id=\"穷人与教育\"><a href=\"#穷人与教育\" class=\"headerlink\" title=\"穷人与教育\"></a>穷人与教育</h5><p>贫困，其实是一个复杂系统中多种因素联合造成的结果，你很难简单地使用某个单一办法–帮助就业、直接发钱、让他去更好的学校读书–来让一个人摆脱贫困，你必须多管齐下才行。</p>\n<p>自控，是一种反人性的行为。它要求我们做“该做”的事，而不是“想做”的事。现在有句流行的话“以一般人的努力程度之低，根本谈不上拼天赋”，其实是有道理的。一个有自控力的阿仁生活再差也差不到哪儿去，自控力是比想象力更为基本和行之有效的个人素质，事摆脱贫困的关键一步。</p>\n<h4 id=\"美国人说的圣贤之道\"><a href=\"#美国人说的圣贤之道\" class=\"headerlink\" title=\"美国人说的圣贤之道\"></a>美国人说的圣贤之道</h4><h5 id=\"怎样成为圣贤\"><a href=\"#怎样成为圣贤\" class=\"headerlink\" title=\"怎样成为圣贤\"></a>怎样成为圣贤</h5><p>“人性这根曲木,绝然造不出任何笔直的东西。”只有当你承认自己是有缺陷的，摆正谦卑的态度，你才有可能跟自己的弱点作斗争，才有可能去完善品格。</p>\n<p>不好的情感冲动如果不加以遏制，不防微杜渐，就有可能形成正反馈，越来越大，乃至导致灾难。所以哪怕是小事，也不能掉以轻心–“勿以恶小而为之”。</p>\n<p>品格的修炼并不是要消除这些冲动，而是要学会控制这些冲动–“发乎情止乎礼”。</p>\n<p>压制自己的情感冲动，要形成习惯才好。这就要求我们平时把任何小事都视为磨炼品格的机会，不能稍有放松–“勿以善小而不为”。</p>\n<p>他们不问我想干什么，他们问这个世界需要我干什么。他们不是用做事的方法来满足内心。他们是为了做成这件事，去不断打磨自己的内心。</p>\n<p>品格修养的追求目标，并不在于成功，而在于成熟。特别可靠，才能办大事–“可以托六尺之孤，可以寄百里之命······”</p>\n<h5 id=\"中庸之道\"><a href=\"#中庸之道\" class=\"headerlink\" title=\"中庸之道\"></a>中庸之道</h5><p>中庸不是什么：中庸不是面对两种对立意见采取一个折中的立场，不是盲目地搞平等，也不是对各种不同意见和稀泥。<br>中庸，是你要认识到不同理念，不同情感诉求、不同道德标准之间，必然有冲突。这些理念没有哪个是完美的，谁也说服不了谁，谁也消灭不了谁，矛盾永远存在。</p>\n<p>所以作为最高领导人，就绝对不能像个二愣子一样全面倒向一种理念然后打压其他理念，试图给个一劳永逸的解决方案。<br>所以领导的艺术就如同在风暴中驾驶帆船：太往左偏了就往右调整一下，太往右偏了就往左调整一下。平衡永远是动态的。你就永远这么调啊调，这就是中庸之道。</p>\n<h5 id=\"品格和现代人\"><a href=\"#品格和现代人\" class=\"headerlink\" title=\"品格和现代人\"></a>品格和现代人</h5><p>在现代社会，这条路根本就不是给普通人准备的。普通人的上限是“精致的利己主义者”–你只要根据社会给你的设定，把自己分内的工作做好，对社会给你的各种经济学刺激做出合理反应就可以了。你左右不了世界，世界也不担心被你破坏。<br>只要那些想要办大事的人需要品格。因为这样的人不能单靠本能反应行事。</p>\n<p>他们需要动用自由意志去做决策，而且他们的决策会对世界产生影响。他们不能因为自己恰好不喜欢哪个国家就不让哪个国家进入联盟，他们不能因为自己恰好喜欢哪一派理论就按哪派理论制定政策，他们不能因为这么做恰好对自己最有利而不顾整体利益。他们愿意为心中的大事牺牲。</p>\n<p>我们知道了当今那些市侩猥琐的公众人物，大概是不太可能干出什么大事来的。</p>\n<h4 id=\"说英雄，谁是英雄\"><a href=\"#说英雄，谁是英雄\" class=\"headerlink\" title=\"说英雄，谁是英雄\"></a>说英雄，谁是英雄</h4><p>谁说社会成见没意义？成见往往是对的，成见是对历史经验的总结，是对未来必然重演历史的信心。大数据预测，就是用成见预测。</p>\n<p>世界上有些人却是统计模型所预测不了的。统计，顾名思义，就是指多数人的行为规律。总有少数人的数据因为距离大多数人的主流数据太远，而被模型视为误差直接忽略。</p>\n<p>平凡的人们没有给我太多感动。这些不平凡、不能被模型预测的人，才是真的英雄。</p>\n<h5 id=\"体制\"><a href=\"#体制\" class=\"headerlink\" title=\"体制\"></a>体制</h5><p>无论是发达国家还是发展中国家的现代化教育体制，只要是一大群学生一起坐在教师里听一个老师讲课，就都是工业化流水线的模式。这种学校教育，对“最普通”的人最有利。</p>\n<p>个性学生从来都不是体制的产物，他们主动对抗体制。</p>\n<h5 id=\"美国教育各阶层分析\"><a href=\"#美国教育各阶层分析\" class=\"headerlink\" title=\"美国教育各阶层分析\"></a>美国教育各阶层分析</h5><p>普通工人阶层的学校强调遵守规章流程，整个教学充满死记硬背的机械式程序，学生几乎没有做选择和做决定的机会。老师教任何东西，哪怕是解数学题，都是用向学生灌输规则的方法。</p>\n<p>一般中产阶层的学校强调把事做“对”。有点像中国的应试教育，以学习材料为核心，要求学生必须理解这些材料–你可以用自己的方法理解，只要你能得到正确答案。学校教学很强调课本的权威性，你绝对不能对课本结论提出质疑。</p>\n<p>专业人士阶层的学校强调创造性和独立性。</p>\n<p>主管精英阶层的学校强调智识，这个阶层的学生学的不是怎么遵守规则，而是怎么制定规则。教育的核心目标，是决策和选择。</p>\n<p>大多数情况下，人不太容易超越自己父母的阶层。</p>\n<h5 id=\"中国各阶层的三种教育目标\"><a href=\"#中国各阶层的三种教育目标\" class=\"headerlink\" title=\"中国各阶层的三种教育目标\"></a>中国各阶层的三种教育目标</h5><p>贫民家庭对教育的期待是培养工具，以找工作为目的。</p>\n<p>中产家庭对教育的期待是培养工艺品，以提升个人价值为目的。</p>\n<p>上层家庭对教育的期待是培养主人翁，以欣赏、选择和改变周围世界为目的。</p>\n<p>家庭收入水平和父母文化水平，直接决定孩子能达到什么层次。</p>\n<h5 id=\"英雄的套路\"><a href=\"#英雄的套路\" class=\"headerlink\" title=\"英雄的套路\"></a>英雄的套路</h5><p>所谓英雄，就是超越了阶层出身，超越了周围环境、超越了性格局限，拒绝按照任何设定好的程序行事，不能被大数据预测，能给世界带来惊喜，最不想机器人的人。</p>\n<p>必须改变自己，重新认识这个世界，然后用全新的方式面对。</p>\n<h4 id=\"使命的召唤\"><a href=\"#使命的召唤\" class=\"headerlink\" title=\"使命的召唤\"></a>使命的召唤</h4><p>英雄和俗人的根本区别在于，俗人想要适应世界，英雄想要改变世界。</p>\n<p>为什么英雄是自由的？因为一个人一旦有了使命感，就有了最彻底的主人翁精神，你就不用管他，也管不住他了。</p>\n<p>他们只对自己的使命负责，不受任何外力的限制。他们敢问不该问的问题，敢挑战周围人的共识，不屑于取悦任何人。<br>英雄=创新</p>\n<p>创新就是打破常规，创新就是意外，创新就是你事先根本没预测到。根据我们队英雄的定义，这就是英雄做的事情。</p>\n<h3 id=\"Part-3-智识分子的十八般武艺\"><a href=\"#Part-3-智识分子的十八般武艺\" class=\"headerlink\" title=\"Part 3 智识分子的十八般武艺\"></a>Part 3 智识分子的十八般武艺</h3><p>人类所知非常有限，哪怕是最好的学者花了很多钱做得很好的研究，也可能是错的。科学的最大价值并不在于固定的知识，而在于获得这些知识的研究方法。</p>\n<h4 id=\"为什么高考作文题目是可预测的\"><a href=\"#为什么高考作文题目是可预测的\" class=\"headerlink\" title=\"为什么高考作文题目是可预测的\"></a>为什么高考作文题目是可预测的</h4><p>用数据分析搞预测的隐含假设是未来事件会继续落入最近流行的俗套。</p>\n<p>简单的系统容易预测，因为一个个体哪怕出点预测范围以外的波动，对整个系统也不会有大影响。而如果一个系统中包含各种正反馈机制，它就是不好预测的复杂系统，一个个体的小波动就有可能通过连锁反应层层放大出现蝴蝶效应。</p>\n<p>出题者不需要什么反馈，更不需要正反馈！他们要确保那些稍微聪明一点用功一点的孩子都能考上，把偶然因素降到最低。所以他们必然诉诸俗套。俗套最安全。数据分析指向哪里，他们就打向哪里。</p>\n<h4 id=\"大数据带来的主题军备竞赛\"><a href=\"#大数据带来的主题军备竞赛\" class=\"headerlink\" title=\"大数据带来的主题军备竞赛\"></a>大数据带来的主题军备竞赛</h4><h5 id=\"锤子和钉子\"><a href=\"#锤子和钉子\" class=\"headerlink\" title=\"锤子和钉子\"></a>锤子和钉子</h5><p>中国高考作文的出题方法有个固定的套路：给你讲一段小故事，然后让你根据这个故事，想想自己受到什么启发，写篇文章。换句话说，你的作文重点根本不是这个故事，故事只是你要写的主题的一个素材。</p>\n<p>同一个素材，个人思考角度不同，可以对应不同的主题。但更重要的是，不同的素材可以对应同样的主题。</p>\n<p>只要一个人熟读这六个方面（奋斗、自由、青春、自然、环境和尊敬）各种可能主题的文章，掌握其写作套路，不管高考出什么素材都能应对自如。</p>\n<h5 id=\"主题模型\"><a href=\"#主题模型\" class=\"headerlink\" title=\"主题模型\"></a>主题模型</h5><p>“隐含狄利克雷分布”（Latent Dirchlet allocation LDA）:计算机认为文章只不过是一些词汇的集合。而每个主题，也只是一些关键词的集合。计算机没必要“理解”每个主题或每个词的意思，甚至根本不用管这些词出现的先后顺序。计算机要做的仅仅是使用一定的数学方法对每篇文章中的词汇进行分析。一篇文章拿过来，你要做的就是把事先设定的所有主题一个一个过一遍，计算这篇文章中的词汇对应每个主题的可能性是多少。计算结果，就是这篇文章说的是每个主题的概率大小。一篇文章甚至可以包含多个主题，这不是问题。关键在于，计算机可以判断一篇文章最有可能说的是什么主题，第二可能说的是什么主题······这就相当于计算机已经“读懂”了这篇文章。</p>\n<h5 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h5><p>数据分析的真正作用是能让好东西迅速流传开来······然后迅速消亡。</p>\n<h4 id=\"大尺度和硬条件：四万年来谁著史\"><a href=\"#大尺度和硬条件：四万年来谁著史\" class=\"headerlink\" title=\"大尺度和硬条件：四万年来谁著史\"></a>大尺度和硬条件：四万年来谁著史</h4><p>尺度，是一个重要的思维方式。尺度思维的一个要点在于，当你考虑大尺度问题的时候，小尺度的现象常常可以忽略或者简化。而更为重要的是，从小尺度现象出发往往解释不了大尺度问题。</p>\n<p>研究大尺度问题，必须关注一些长期不变的因素，也就是“硬条件”。</p>\n<p>有些硬条件构成了历史发展的种种限制，使人们不能恣意而为，而有些硬条件则又是我们的重大机遇。正因为有了这些限制，使人们不能恣意而为，历史的演化才成了带着镣铐跳舞，反而不平淡了。</p>\n<h4 id=\"技术左右天下大势\"><a href=\"#技术左右天下大势\" class=\"headerlink\" title=\"技术左右天下大势\"></a>技术左右天下大势</h4><p>在技术进步的任何阶段，都不是你想要什么就能研发什么。技术不听我们的，我们得听技术的。</p>\n<p>一项技术如果到了“该出来”的时候，它就一定会出来。因为它会被好几个人同时发现。</p>\n<p>技术不仅仅是被人类需求或者人类天才创造的推动，它自身就是自身的推动。正如生物进化一样，每一次技术突破都孕育新的技术突破，整个的技术进步是一个自组织和正反馈过程。</p>\n<h4 id=\"一点实用主义的学英语心得\"><a href=\"#一点实用主义的学英语心得\" class=\"headerlink\" title=\"一点实用主义的学英语心得\"></a>一点实用主义的学英语心得</h4><p>正确的做法是找本托福或者GRE的单词书，每天拿出几个小时的时间，背300-600个单词。</p>\n<p>记忆的关键在于间隔式的重复，过一天复习一次，过三天再复习一次，过一周再复习一次，让间隔的时间越来越长。</p>\n<p>在背单词的同时，你找一本大学英语课本之类的书，精读其中的文章。这种书的好处是上面有注释和讲解。</p>\n<h4 id=\"信息极客的三个功夫\"><a href=\"#信息极客的三个功夫\" class=\"headerlink\" title=\"信息极客的三个功夫\"></a>信息极客的三个功夫</h4><p>第一个功夫是阅读学术论文，论文是知识的最前沿，而且是用最优条理的方式整理好的文本。</p>\n<p>第二个功夫是直接阅读原始数据，对奇怪的事非常敏感，产生疑问后不是口无凭据地质疑，而是立刻查找数据，拿数据说法。</p>\n<p>第三个功夫是主动采集和分析数据，把很多人的个人数据综合起来，可以帮助研究者更好地理解人类行为，所以量化自我也是对社会的贡献。不但如此，个人还能拿自己的数据搞点小研究。</p>\n<h5 id=\"“舌战群儒”的技术分析\"><a href=\"#“舌战群儒”的技术分析\" class=\"headerlink\" title=\"“舌战群儒”的技术分析\"></a>“舌战群儒”的技术分析</h5><h6 id=\"“舌战群儒”的技术\"><a href=\"#“舌战群儒”的技术\" class=\"headerlink\" title=\"“舌战群儒”的技术\"></a>“舌战群儒”的技术</h6><ol>\n<li>列举事实证据，暗示对方能力不行</li>\n<li>如果比不过事实，比境界</li>\n<li>你别说我如何如何不堪，著名英雄xxx也曾经如此不堪</li>\n</ol>\n<h4 id=\"贝叶斯定理的胆识\"><a href=\"#贝叶斯定理的胆识\" class=\"headerlink\" title=\"贝叶斯定理的胆识\"></a>贝叶斯定理的胆识</h4><p>“相信不相信”的真正意义，在于给我们自己的决策提供依据。</p>\n<p>一般情况下对一般有争议的问题我们都是抱着将信将疑的态度，信念值在0.01%到99.99%之间。而且，我们队大多数事物的信念值都在动态变化。比如有什么特别突兀的新东西出来，我们一开始可能是不信的，随着证据增多，慢慢加强信念。<br>A代表我们感兴趣的事件，p(A)表示它发生的概率。B代表一个与之有关的事件，p(A|B)则代表在B发生的情况下，A发生的概率。类似地，p(B|A)表示在A发生的情况下，B发生的概率。</p>\n<p>最关键思想是在B发生以后，有了这个新的证据，我们对A的信念需要做一个调整，从p(A)变成p(A|B)了。你可以把A当成你对一般情况的理论预言，把B当成一次实验结果。有了新的实验结果，你就调整自己的理论预言。</p>\n<p>如果我们对某件事的信念值非常非常低，那么即使强有力的证据也很难扭转我们的信念。</p>\n<p>观点随事实改变，有胆有识，这就是贝叶斯定理的伟大原则。</p>\n<h4 id=\"生猛的进化心理学\"><a href=\"#生猛的进化心理学\" class=\"headerlink\" title=\"生猛的进化心理学\"></a>生猛的进化心理学</h4><p>人们对进化心理学争论主要是两点。第一，传统社会科学认为人类是高级生命，是特殊的，人不是动物；而进化心理学认为人类跟动物没什么区别，“完全”平等。第二，传统社会科学认为人的性格和思维模式主要是后天环境（包括自然环境和社会环境）影响的结果，而进化心理学认为所谓“人性”，主要是人这个物种长期进化遗传自然选择适应的结果，小孩一生下来他/她的“人性”就已经定好了。</p>\n<p>进化心理学有个基础假设，称为“大草原原理”（Savanna principle）。这个原理说，由于人类的进化速度非常慢，而最近几千年人类的生活方式变化极快，以至于人的进化没有跟上人的生活变化的步伐。所以我们这些所谓现代人的性格和思维模式很大程度上仍然停留在史前的水平，比如说石器时代。也就是说，要想理解为什么今天的人会有这样那样的行为，只要对比石器时代就可以了。</p>\n<p>进化心理学更多的是解释我们潜意识中的“常识”。有些东西我们都喜欢，但是我们又说不清楚为什么喜欢，这时候就该进化心理学出手了。</p>\n<p>进化心理学认为所有两性差异都可以用生育能力的差异来解释。第一个差异是数量级上的差异。一个男人理论上可以有无数个孩子，而一个女人终其一生最多只能有几十个孩子。这就决定了女人一定更重视家庭。第二个差异是女人一定知道自己的孩子是自己的，但史前男人无法确定自己女人生的孩子是不是真的是自己的，正所谓“momma’s baby, daday’s maybe”。正是因为这个根本原因，导致男人特别不能容忍妻子的不忠。</p>\n<p>哪怕进化心理学能够解释传统社会里的很多现象，到了现代社会，有很多人其实是进步了。进化心理学只能说明我们的一个思维趋势，而这些进步了的人可以克服自己不好的趋势，超越进化心理学。</p>\n<p>人受教育就是为了超越进化心理学，用理性克服本能！</p>\n<h4 id=\"哪种知识最可靠？\"><a href=\"#哪种知识最可靠？\" class=\"headerlink\" title=\"哪种知识最可靠？\"></a>哪种知识最可靠？</h4><p>科学的最大价值并不在于固定的知识，而在于获得这些知识的研究方法。</p>\n<p>任何数学知识都绝对正确，不容置疑。凡是出发点正确而又是用逻辑推导出来的知识，就必定是正确的。</p>\n<p>既然专家的建议不一定好使，我们就千万不要执着于使用某一个特定的理论去做事，最好都抱着试试看的态度，这个理论不行就换另一个理论。</p>\n<p>如果有人像个神甫一样说他身怀宇宙真理般的理论，充满自信，最好别信他。</p>\n<h4 id=\"宇航时代为何还未到来？\"><a href=\"#宇航时代为何还未到来？\" class=\"headerlink\" title=\"宇航时代为何还未到来？\"></a>宇航时代为何还未到来？</h4><p>现阶段的载人航天其实是个形象工程。</p>\n<p>形象工程的最主要好处是让人民（包括纳税人）高兴。</p>\n<p>大宇航时代什么时候才能到来？我们必须指望将来有一个什么重大发现，发现太阳系深处的某个地方有一种对地球人来说价值连城的东西，值得人们不惜钱财和生命去追求。</p>\n<h3 id=\"Part4-未来，已经到来\"><a href=\"#Part4-未来，已经到来\" class=\"headerlink\" title=\"Part4 未来，已经到来\"></a>Part4 未来，已经到来</h3><p>我们即将进入一个“不换思想就换人”的时代。</p>\n<h4 id=\"把工作输给机器人\"><a href=\"#把工作输给机器人\" class=\"headerlink\" title=\"把工作输给机器人\"></a>把工作输给机器人</h4><p>《与机器竞赛》这本书指出，在与机器进行的这场竞赛中，有三类赢家和三类输家。高技术工人是赢家，而低学历者将是输家，因为机器人将会迅速取代他们的工作。超级明星是赢家，第二名及其他所有人都是输家。资本是赢家，劳动者是输家。</p>\n<h4 id=\"你比机器强在哪儿？\"><a href=\"#你比机器强在哪儿？\" class=\"headerlink\" title=\"你比机器强在哪儿？\"></a>你比机器强在哪儿？</h4><p>这个世界正在经历深刻的变革：人靠知识谋生的主流方式一变再变。<br>人得靠创造新知识来赚钱。机器人会的所有东西，都是跟人学的。写报告也好，提建议也好，诊断病情也好，机器人的能耐在于从已经发生的事情中找到规律，然后把这个规律用于新的事情。机器人，是彻底的经验主义者。<br>人的一个任务是打破常规，第二个任务是表达自己的好恶。</p>\n<h4 id=\"带着机器竞赛\"><a href=\"#带着机器竞赛\" class=\"headerlink\" title=\"带着机器竞赛\"></a>带着机器竞赛</h4><p>这些善于弥补计算机不足、善于利用机器优势、善于发挥人的特点的人，不是在与机器竞赛，而是带着机器竞赛。<br>他们的秘密在与知道怎么更好地调教和帮助计算机看得更远。计算机不再是人类的秘书，而是一个有无限潜能的猛兽，取胜的关键在于你会不会使。</p>\n<h4 id=\"怎么杀死海星\"><a href=\"#怎么杀死海星\" class=\"headerlink\" title=\"怎么杀死海星\"></a>怎么杀死海星</h4><p>传统组织就如同蜘蛛，它的智力集中在大脑，只要你把蜘蛛的头去掉，蜘蛛就会死亡。而去中心化组织就如同海星，海星根本就没有头。它的智能分布在身体各处，一旦你打掉它身体的一部分，那个部分甚至可能自己再长成另一个海星。</p>\n<p>把去中心化组织的成员联系在一起的不是领导人，而是某个共同的理念或者需求。有时候组织有一个名义上的领导，但其对整个组织的控制能力极其有限，更多的是一个精神领袖。</p>\n<p>不过去中心化组织有个关键的弱点：你很难通过这样的组织赚大钱。分权的产业利润低，只有集权才能获得高利润。</p>\n<h5 id=\"杀死海星的三个策略\"><a href=\"#杀死海星的三个策略\" class=\"headerlink\" title=\"杀死海星的三个策略\"></a>杀死海星的三个策略</h5><ol>\n<li>改变环境，既然你们是靠一种意识形态联系在一起，我就让你这个意识形态没有市场。</li>\n<li>先把海星变成蜘蛛再杀。</li>\n<li>把自己去中心化。借鉴去中心化组织的分布式智力和灵活多变的特点。</li>\n</ol>\n<h4 id=\"合弄制：一种新的管理方法\"><a href=\"#合弄制：一种新的管理方法\" class=\"headerlink\" title=\"合弄制：一种新的管理方法\"></a>合弄制：一种新的管理方法</h4><p>合弄制，并不是一般的分权改革，它是一种非常严格，而且相当复杂的组织管理方式。</p>\n<p>合弄制的一个核心思想是以工作为本，而不是以人为本。合弄制首先要求你是一个“有目的的组织”。合弄制要求组织中的每个人都要能够判断各项工作是否符合这个目的。</p>\n<p>明确了公司的总目的，公司就可以通过管治会议（Governance Meeting）来根据这个目的把工作分块，并把它们变成一个个具体的功用。</p>\n<p>管制会议定下功用之后，给每个功用成立一个“圈（Circle）”，同时决定每个圈中需要的“角色（Roles）”。圈就是角色的集合。</p>\n<p>传统公司是人员组织结构固定，把工作往人身上分，而合弄制则是工作职责固定，把人往工作上分。每个圈有一个“链长（ LeadLink）”，这是一个具体的人。链长对自己圈的工作没有决定权，他唯一的权力是往自己圈里的角色中放人。他可以在全公司范围内邀请任何人来填充角色，并且有权在认为一个人没有做好自己角色的时候将其从角色上提出。所有圈里的重大决策都由这个圈里所有角色参加的管治会议民主讨论决定。而在日常工作中，每个人则根据自己的角色有相当大的自主权。没有任何人可以命令你干什么。你根据自己的角色的职责和权力自己决定干什么。</p>\n<p>每个圈的管治会议还可以根据工作需要在圈中再成立“子圈”，规定每个子圈的功用和子圈中有些什么角色，并由链长指定每个子圈的链长。子圈中还可以又有子圈，如此层层嵌套，就如同人体分为器官、组织、细胞等等。每一个圈的管治会议，由直接属于这个圈的全体角色，以及这个圈直接下属每个子圈的一个代表参加。</p>\n<p>如此看来合弄制并非是没有管理或者没有等级的体制。各层圈的上下级关系非常明确。一个圈之内实行民主，但上圈直接决定子圈的目的和角色功用，而且链长有绝对的人事权。但关键在于，这些管理和等级都是针对工作，或者说是针对角色的。而不是针对人的。</p>\n<p>合弄制的一个妙处在于每个人可以拥有多个不同的角色！</p>\n<h5 id=\"合弄制的好处\"><a href=\"#合弄制的好处\" class=\"headerlink\" title=\"合弄制的好处\"></a>合弄制的好处</h5><ol>\n<li>职权非常透明，公司可以变得更有效率。</li>\n<li>公司可以更加容易做出改变，能够对市场做出迅速反应。</li>\n</ol>\n<h4 id=\"该死就死的市场经济\"><a href=\"#该死就死的市场经济\" class=\"headerlink\" title=\"该死就死的市场经济\"></a>该死就死的市场经济</h4><p>市场的真正关键在于“不知道”。政府计划不行，并不是说政府不够聪明或者政府的计算机不够快，而是政府不知道未来会怎么变–没人知道未来会怎么变。</p>\n<h5 id=\"市场经济，深得生物进化之道\"><a href=\"#市场经济，深得生物进化之道\" class=\"headerlink\" title=\"市场经济，深得生物进化之道\"></a>市场经济，深得生物进化之道</h5><ol>\n<li>随机变异。</li>\n<li>自由交配</li>\n<li>无情淘汰</li>\n</ol>\n<p>参与市场得有这样的精神：想生就生，该死就死。</p>\n<h4 id=\"物质极大丰富的时代\"><a href=\"#物质极大丰富的时代\" class=\"headerlink\" title=\"物质极大丰富的时代\"></a>物质极大丰富的时代</h4><p>四个论点</p>\n<ol>\n<li>产生经济衰退的原因是剩余利润。增加私人投资已经不能带来经济增长，应该靠消费带来增长。</li>\n<li>为扩大消费，应该搞财富的再分配，比如增加社会福利。</li>\n<li>投资应该社会化。决定一个项目是否上马，不应该只看其能带来多少利润，而应该全社会一起评估它的社会价值，也就是说要追求使用价值。</li>\n<li>花钱是道德的，消费文化是个好东西。</li>\n</ol>\n","site":{"data":{}},"length":14376,"excerpt":"<h3 id=\"自序–做个复杂的现代人三个趋势\"><a href=\"#自序–做个复杂的现代人三个趋势\" class=\"headerlink\" title=\"自序–做个复杂的现代人三个趋势\"></a>自序–做个复杂的现代人三个趋势</h3><ol>\n<li>世界越来越复杂</li>\n<li>人工智能正在慢慢取代人的工作</li>\n<li>尽管所有人的物质生活都在改善，整个社会阶级分层却正在扩大。","more":"如何听取理工科专家的意见复杂世界中很少哪个实际问题是只用一方面的知识就能解决的。所以对待理工科专家，最好的办法是把他们的意见当成决策的参考。你可以在你的专业范围内给我提供最好的论点数据，但具体怎么决策，我还得再听听别人的论点和数据。理念和算数认准一个方向毫不动摇，是理念，是派系斗争，是意识形态，是情怀。知道过犹不及，该左左该右右，时刻为寻找最优值进行调整，才是理性态度。解决问题的关键往往不在于你有没有一个高大上的理念，而在于“度”。在于数字。复杂世界中几乎任何东西都是有利有弊，用与不用不仅仅要看这个东西好不好，还要看你能承受多大代价。想要学会寻找合适的“度”，你至少需要掌握两个不同的理念。狐狸和刺猬刺猬式的思维方式是进取的，只知一件大事，在简约的名义下，寻求和扩大此事的解释力，以“掩盖”新的案例；狐狸式的思维方式更加折中，知道很多小事，与瞬息万变的世界保持同步，满足于根据时代找出合适的解决之道。现代化的道理千头万绪，唯有此事最为关键：不要被自己心中的“大主意”劫持。狐狸思维的种种特点</li>\n</ol>\n<ul>\n<li>狐狸乐于接受新的信息；</li>\n<li>狐狸对自己决策的信息远小于刺猬；</li>\n<li>即使做过决定之后，狐狸仍然想从不同的视角进行再思考；</li>\n<li>狐狸总爱不断修正自己的预测；</li>\n<li>狐狸也许并不像刺猬一样对某个特定领域无比内行，但是他的知识面宽得多，了解很多事；</li>\n<li>狐狸对很多事情持怀疑态度；</li>\n<li>当考虑冲突的时候，狐狸能看到双方可能正确的方面；</li>\n<li>狐狸喜欢与观点不同的人打交道；</li>\n<li>狐狸在工作中并不追求明确的规则和秩序；</li>\n<li>狐狸喜欢有多个答案的问题，他们在解决问题的时候常常能发现多个选择；</li>\n<li>总而言之，狐狸眼中的世界是复杂的。</li>\n</ul>\n<p>十八般武艺我们不能满足于当某一方面的“专才”，而应该广泛学习各种知识，掌握“通识”。想要解决社会、经济和生活问题。不能追求掌握一个一劳永逸的“正确”理论，而应该追求掌握一系列不同流派的思维方法，十八般武艺，多多益善。严肃文学可以让人学会体察他人的感受，了解真实世界中不同类型人的生活。逻辑可以让人学会推理和辩论。文法修辞可以让人学会怎么用语言争取别人的支持。历史可以让人学会借鉴前人的经验。数学可以让人学会取舍。天文学可以让人对世界的自然规律产生敬畏。这些学问不是什么用于打扮自己、被别人审美的“教养”，这些都是大人物办大事的实用技能！博雅之学，并不是告诉我们什么放诸四海而皆准的真理，而是提供一些寓言故事、名人典故和思维套路。你掌握的套路越多，办事的时候可供选择的思路就越多。至于遇到什么事应该用哪个套路去解决，这没有任何程序性固定办法，是一种艺术，只能自己选择。Part 1 世界观祛魅很庆幸，我们生活在一个受限制的世界。这个世界有很多好东西，是人人都想要，但是未必能得到的。想要得到这样的东西，你必须付出代价。别用“常识”理解复杂世界常识只是特别善于在事后“解释”事件，这种解释根本谈不上真正的理解。要想从复杂的随机事件中看到真正的规律，最好的办法是像搞自然科学一样进行大规模的重复实验。一个更实用的历史观是放弃“一切都是注定的”这个思想，把历史事件当成众多可能性中的一种，把未来当成一个概率分布，然后尽可能地使用统计方法，通过历史事件去计算未来事件的概率。与其追求用各种想当然的常识指导未来，不如把历史当作一个数据库，从中发掘统计规律。模仿的雪崩效应人是善于模仿的动物，因为相对于自己分析各种因素再决策而言，直接模仿别人是一条思维捷径。但骚乱的故事告诉我们，人在很多情况下不是因为被别人的行为提醒后为了自身原因采取行动，而是为了模仿而模仿。<br>为了模仿而模仿，是最大的不稳定因素，因为它让原本无关的人参与到事件之中，导致事态以爆炸的速度迅速扩大。<br>但这个雪崩其实是不可靠的：只要我们把初期的几个人拿掉任意一个，那么骚乱反应就会早早断裂，而避免大规模事件。<br>一个大规模事件的走向很可能跟这个事件的起因没有关系。<br>凡夫畏果，菩萨畏因，但维稳的关键既不是最开始的起因也不是事态扩大以后的结果，而是事件初期的几步。</p>\n<h4 id=\"最简单经济学的五个智慧\"><a href=\"#最简单经济学的五个智慧\" class=\"headerlink\" title=\"最简单经济学的五个智慧\"></a>最简单经济学的五个智慧</h4><p>当一个人阅历越来越多，慢慢变成熟，他的思想可能会更加右倾保守。</p>\n<ol>\n<li><p>国家不是家庭</p>\n<p> 人们在家庭中接受这种不平等是出于爱和关怀，而这对陌生人不适用。在陌生人之间，双方除了诚实守信互不侵犯之外没有更多的义务的感情，才讲平等。所以家庭讲感情，国家应该讲利益和效率。<br>什么叫“升米恩，斗米仇”？关键不是什么心理学，而是事情的性质变了。遇到饥饿的人随手请他吃顿饭，这是个人的友善行为；长期、成体系或大规模地发放馒头，这就成了公共事务和经济行为了。<br>要求对富人持续性加税，乃至产生均贫富的思想，这都是用家庭的眼光去看国家。考虑此类问题的正确出发点不应该是“都是一个国家的人，贫富差距这么大是否道德”，而应该是“什么样的税收制度有利于经济增长”。</p>\n</li>\n<li><p>没有免费的午餐</p>\n<p> 心灵鸡汤有两大论点：</p>\n<ol>\n<li>不管你面对什么条件，只要你努力，甚至只要你愿意做个好人，就一切皆有可能。</li>\n<li>哪怕你不努力不做好人也没关系，反正“世界上最美好的东西都是免费的”</li>\n</ol>\n<p> 所以心灵鸡汤要求我们关注自己而不必关注外部条件，暗示我们享受已有的而不要去追求别的东西。<br>哪怕这个东西再好，如果它要求的代价太高，那我们就应该不要。反过来说，哪怕要付出一个代价，只要换来的东西价值更大，那就可以付出。<br>边际分析是指你不用考虑总的效果，你只要考虑做下一步的临界效果就行了。比如你要生产某个产品，它有价格收益和成本，这两个数字都在随着市场变化。你不必管已经生产了多少这个产品，只要你生产的下一个这个产品的收益大于成本，你就可以继续生产。如果下一个产品的成本正好等于收益，你就应该停止生产———–。<br>边际效应常常递减。可能你投入的钱越来越多，但是效果却越来越不明显。</p>\n</li>\n<li><p>人会对激励作出反应</p>\n<p> 激励这个方法的好处在于，只要你的激励制度设计得好，人们就会心甘情愿地做你想让他们做的事。<br>改变人的行为，最好的方法就是改变激励。</p>\n<p> 不过激励如果设计得不好，有可能适得其反。</p>\n<p> 给个自上而下的单方面外部激励政策，是经济学家解决问题最爱用的两个办法之一。另一个办法是市场化。</p>\n</li>\n<li><p>市场是一种激励信号的传递方式</p>\n<p> 通过价格信号，市场可以让最该办的事儿优先办，而且可以让做这件事做得最好的人去做这件事。如果不用市场机制，什么事儿应该办，让谁去办，这两个问题都非常难以回答。这样说来，市场最大的好处是解决了信号的问题，能把资源合理地配置给企业。</p>\n<p> 如果某个好东西暂时是稀缺的，但是只要人们愿意生产就能大量生产出来，市场就可能是解决这个问题的最佳手段。</p>\n<p> 私有化产权仅仅是一个基础条件。有价格这个激励信号，才是市场的关键。如果产权私有但是信号并不畅通，市场就会失灵。</p>\n<p> 所以市场经济绝不仅仅是产权改革这么简单的事。你必须有足够好的基础设施能确保信号有效传递，才叫真正的市场经济。</p>\n</li>\n<li><p>结果可能出乎意料</p>\n<p> 复杂系统的行为往往难以预料。你让蝴蝶在这里扇动一下翅膀，虽然非常不可能、但也许就可能，在千里之外的某个地方造成一场飓风。你发布一个什么政策，造成的影响可能一波推一波，最后结果也许完全出乎你的意料。</p>\n<p> 任何大型社会项目的任何效果评估的预期值等于0</p>\n<p> 所以不到万不得已，最好别轻易按你自己凭空想出来的什么史无前例的大招去扰动复杂系统，你根本不知道最后会导致什么！你很可能是小孩玩火！这叫“皇帝做不得快意事”。</p>\n<p> 这也说明阴谋论根本不靠谱，各种停留在纸面上的假想实验更不靠谱。我们生活的是一个太过复杂的世界，没有人能控制得了这个世界。</p>\n</li>\n</ol>\n<h4 id=\"选民的大脑想要什么\"><a href=\"#选民的大脑想要什么\" class=\"headerlink\" title=\"选民的大脑想要什么\"></a>选民的大脑想要什么</h4><pre><code>很多人心目中最理想的民主选举制度，是假说每个选民都能清晰理解候选人许诺的各项制度，并且能理智地对候选人能力和这些政策的好坏做出判断，在这种情况下，大多数人的意见很可能就是最好的意见，民主就是有效的。\n</code></pre>\n<p>选民的无知不是随机分布的，他们的整体意见存在系统偏见。在四个关键问题上，一般公众与经济学家的意见相反，真理不幸掌握在少数人手中。</p>\n<ol>\n<li><p>经济学家非常相信市场，相信看不见的手；而一般公众很难理解纵容私人公司的贪婪怎么能给社会带来整体利益。公众只看到公司赚钱了，却看不到利润对公司提高效率和服务的激励作用。</p>\n</li>\n<li><p>经济学家支持自由贸易，而公众则本能地反感外国货，支持本国货。公众总是低估对外贸易的好处，总是认为外国在抢夺本国的就业机会。</p>\n</li>\n<li><p>公众过分害怕裁员。如果一项新技术可以节省人力，公众的态度往往会认为这个技术不但不是进步，而且还是个危险。而在经济学家看来，一个人的工作只有在他生产的产品能卖出去的情况下才有意义。</p>\n</li>\n<li><p>公众往往过高估计当前社会问题的严重性，过低估计经济的表现。不好的东西总是比好的东西更能给人留下深刻印象。</p>\n</li>\n</ol>\n<h5 id=\"选民想要的东西，叫做“小故事”\"><a href=\"#选民想要的东西，叫做“小故事”\" class=\"headerlink\" title=\"选民想要的东西，叫做“小故事”\"></a>选民想要的东西，叫做“小故事”</h5><pre><code>认知学家发现，人脑认识复杂的外部世界，是通过“小故事”（narrative）去解读的。\n小故事的重要特点是它能调动人的感情，在一个小故事里，人脑的两个感情区域（一个正面感情，一个是负面感情，在不同区域）被随时激活。我们总是会对故事中的人和事有一个好坏评价。\n懂行的政客从来不给选民上经济课，他们专门给选民讲故事。\n选民最喜欢的两个小故事，一个是“不怕敌人的勇敢故事”，另一个事“自我救赎的奋斗故事”。哪个候选人会讲这两个故事，哪个候选人就会当选。\n当一个选民投票，他根本不是在选择自己的未来利益，他是在根据自己大脑中的小故事来宣泄自己的感情。\n</code></pre>\n<h4 id=\"高效能任性\"><a href=\"#高效能任性\" class=\"headerlink\" title=\"高效能任性\"></a>高效能任性</h4><h5 id=\"高效能人士的一个习惯\"><a href=\"#高效能人士的一个习惯\" class=\"headerlink\" title=\"高效能人士的一个习惯\"></a>高效能人士的一个习惯</h5><pre><code>以原则为重心去做事，你得有一种使命感，给自己的人生找个愿景和方向。这种愿景不是什么成功了之后去找一个岛退休之类，而是个人的最终期许和价值观这种比较高级的东西，比如改变世界--或者说，将来盖棺定论时你希望获得什么评价。你应该根据这个使命感给自己设定一套宪法般的原则，时刻谨记在心，一举一动都是为了这个愿景。\n</code></pre>\n<h5 id=\"谁更自私\"><a href=\"#谁更自私\" class=\"headerlink\" title=\"谁更自私\"></a>谁更自私</h5><pre><code>人们普遍相信真正的精英都是这样和蔼可亲甚至道骨仙风，他们的成功根本不是靠投机钻营，而是靠正大光明的软实力。\n这些研究都表明，富人和所谓上流社会的道德水准不但不比普通人高，而且比普通人低。\n社会经济地位高的人群比普通人更自私。\n</code></pre>\n<h5 id=\"公平世界假设\"><a href=\"#公平世界假设\" class=\"headerlink\" title=\"公平世界假设\"></a>公平世界假设</h5><pre><code>我们认为世界是公平的。但这恰恰是个错误的世界观。事实上，心理学家甚至对这个错误有个专有名词，叫做“公平世界假设”（just-world hypothesis，也叫just-world fallacy）。\n世界其实并不公平。公平只是小说和电影给我们的幻觉，那些剧情的结局公平只不过是因为我们喜欢看公平结局。\n相信公平世界假设对你有三个害处：\n    1. 你不能从别人的成功中学到东西。有人靠不择手段成功了，你很不喜欢，所以你就不愿意跟他学，你就学不到更多经验。其实这个人值不值得学习，跟你喜不喜欢她一点关系都没有。\n    2. 你以为做好自己的事情就行了，你会低估世界上发生的坏事。你会发现你想做成一点事非常难，感觉别人整天跟你作对。\n    3. 更有甚者，你会认为取得成功的人必有长处，失败的人必有可恨之处。\n</code></pre>\n<h4 id=\"到底怎么才能在这个世界成功？\"><a href=\"#到底怎么才能在这个世界成功？\" class=\"headerlink\" title=\"到底怎么才能在这个世界成功？\"></a>到底怎么才能在这个世界成功？</h4><ol>\n<li>一个人能不能获得权力，能不能得到甚至，他的工作业绩是一个不重要的因素。</li>\n<li>决定你升职的最重要因素，是你跟上级的关系。想搞好跟上级的关系，Pfeffer讲了三招：在上级面前吹嘘自己，充分领会上级意图，以及对上级阿谀奉承。</li>\n</ol>\n<p>其实从经济学角度，你应该做一个“理性的人”–这意味着你应该从自利的角度出发做事，而不是“好人”。</p>\n<h5 id=\"康德式任性\"><a href=\"#康德式任性\" class=\"headerlink\" title=\"康德式任性\"></a>康德式任性</h5><p>真正的积极主动，是你的行为完全取决于自身，而不被外界刺激所左右。你的自由意志独立于外界限制，在刺激和回应之间，你有选择和回应的自由和能力。<br>你做这件事纯粹是出于任性，而康德认为，只有出于任性–也就是自由意志–而去做一件事，才是真正的自由选择。</p>\n<h5 id=\"有一种歧视叫自利\"><a href=\"#有一种歧视叫自利\" class=\"headerlink\" title=\"有一种歧视叫自利\"></a>有一种歧视叫自利</h5><p>歧视有两种。一种是“敌意歧视”，损人不利己，宁可不赚你的钱也不跟你打交道，甚至还要故意黑你。另一种则是“经济歧视”。对某一人群的区别对待无关个人感情，纯粹是出于自利。<br>时至今日，除了个别特别愚蠢的人拿别人的种族找自己的优越感之外，真正恶意的歧视已经不多见了。经济歧视，才最值得关注。坏消息是想要消除针对某个群体的经济歧视非常困难。好消息是对个人来说经济歧视是有解的。<br>想要强行改变一个群体的整体形象，可以使用大规模宣传和教育的办法，例如好莱坞电影中尽量给黑人正面的形象。</p>\n<h4 id=\"人的正义思想是从哪里来的\"><a href=\"#人的正义思想是从哪里来的\" class=\"headerlink\" title=\"人的正义思想是从哪里来的\"></a>人的正义思想是从哪里来的</h4><p>道德问题的正不正义，往往比一件事具体做法的正确不正确更容易引起争论。</p>\n<p>所以判断一件事是否道德很容易，而为自己的判断找到理由则需要思考时间。科学家相信人的道德判断是直觉式的、感性的快速判断，并非来自理性计算。人的理性，只不过为自己的感情服务而已，是先有了答案再去想办法找证据。</p>\n<p>所以道德判断的确是从天上掉下来的。如果有人非说一件事是不道德，他一定能找到各种理由，他可能根本不知道他做这个判断的真正原因只是自己的一种微妙直觉。</p>\n<p>模式识别，我们的大脑中安装了各种模块，一旦识别到符合某个模式的东西就会立即反应。</p>\n<p>这些模式识别能力并非是后天被人撞过或者被蛇咬过之后才习得，而是写在基因之中，一出生就会，是进化带给我们的本能。</p>\n<h5 id=\"海特的六个道德模块\"><a href=\"#海特的六个道德模块\" class=\"headerlink\" title=\"海特的六个道德模块\"></a>海特的六个道德模块</h5><ol>\n<li>关爱/伤害 对应中国人说的“仁”。我们看到小孩受苦就会想要帮助他，这是哺乳动物的本能。</li>\n<li>公平/作弊 对应中国人说的“信”。这是与他人合作中的一种互惠机制，人们自然地认为合作产生的共同利益应该公平分配，如果有人作弊多占，我们就会愤怒。</li>\n<li>忠诚/背叛 对应中国人说的“义”，或者至少相当于江湖的“义气”。有多个实验证明人有一种天生的群体归属意识。忠诚感带来的凝聚力对团队竞争很有帮助，而且对外来威胁非常敏感。</li>\n<li>权威/服从 对应中国人说的“礼”。这个道德模块的表现是对长辈和地位高的人的尊敬。</li>\n<li>圣洁/堕落 这是一个有点宗教味道的道德模块，中国传统道德对此强调不多，但我们也都有这个模块。它对应的感觉就是“恶心”，是一种厌恶不洁之物的进化本能。</li>\n<li>自由/压迫 中国儒家对此似乎不太看重，但是道家很讲自由。不论如何，每个人都认为自由很好，压迫不好，不管是对自己还是对别人。</li>\n</ol>\n<p>人一出生，大脑中在政治上的侧重点就已经种下了种子。这些特性将会指引你的人生方向，特定的基因会让你主动去寻找适合这个基因发展的环境。</p>\n<p>人生的阅历和重大变故也许可以改变一个人的意识形态，但先天因素绝对非常重要。</p>\n<h4 id=\"放诸古今皆准的权力规则\"><a href=\"#放诸古今皆准的权力规则\" class=\"headerlink\" title=\"放诸古今皆准的权力规则\"></a>放诸古今皆准的权力规则</h4><p>不管是国家、公司还是国际组织，其政治格局不能简单以“民主”和“独裁”来划分，而必须用三个数字来描写。以国家为例，这个“三围”就是层层嵌套的三种人的人数：</p>\n<ul>\n<li>名义选民：在名义上有选举权和被选举权的全体公民。然而他们中的很多人，可能对谁当领导人根本没有任何影响力。</li>\n<li>实际选民：那些真正对谁当领导人有影响力的人。对美国来说这相当于选举这天出来投票的选民，对沙特阿拉伯王国这样的君主国来说他们是皇室成员。</li>\n<li>胜利联盟：必须依赖他们，领导人才能维持自己权力的人。对美国总统来说他们在关键选区投出关键一票让你当选的人，对独裁者人来说他们是你在军队和贵族内部的核心支持者。</li>\n</ul>\n<p>看一个国家是不是真民主，关键并不在于是否举行选举，而在于胜利联盟的人数。领导人工作的本质是为联盟服务，因为联盟对领导人有推翻权–如果你不能保证我们的利益，我们有能力随时换一个。如果联盟的人很多，那么这个国家就是我们通常所说的民主国家。反过来如果联盟的人数非常少，那么不管这个国家有没有选举，它都是事实上的独裁国家。<br>所有领导人，不论什么体制，其做事的终极目的只有两个：第一是获得权力，第二是保住权力。</p>\n<h5 id=\"五个通用的权力规则\"><a href=\"#五个通用的权力规则\" class=\"headerlink\" title=\"五个通用的权力规则\"></a>五个通用的权力规则</h5><ol>\n<li>要让联盟越小越好。联盟人数越少，收买他们要花的钱就越少。</li>\n<li>要让名义选民越来越好。名义选民多，一旦联盟中有人对你不满，你就可以轻易替换掉他。</li>\n<li>控制收入。领导人必须知道钱在哪，而且必须能控制钱的流动。</li>\n<li>好好回报联盟对你的支持。一定要给够，但是也不要过多。</li>\n<li>绝对不要从联盟口袋里往外拿钱给人民。这意味着任何改革如果伤害到联盟的利益就很难进行。</li>\n</ol>\n<p>民主制度就是一种以满足人民短期利益为目标的福利制度。</p>\n<p>民主的本质不是选举，而是联盟人数多。所以民主化的根本办法就是扩大联盟人数。</p>\n<h3 id=\"Part-2-流水线时代的英雄\"><a href=\"#Part-2-流水线时代的英雄\" class=\"headerlink\" title=\"Part 2 流水线时代的英雄\"></a>Part 2 流水线时代的英雄</h3><p>大多数人会在第一次或者第二次失败的时候放弃、认命，然后跟周围其他人一样过大数据预测的生活。但是有的人却能一直坚持下来。</p>\n<h4 id=\"高中是个把人分类的机器\"><a href=\"#高中是个把人分类的机器\" class=\"headerlink\" title=\"高中是个把人分类的机器\"></a>高中是个把人分类的机器</h4><h5 id=\"为什么会有人失业\"><a href=\"#为什么会有人失业\" class=\"headerlink\" title=\"为什么会有人失业\"></a>为什么会有人失业</h5><p>最理想的市场中不会有失业。如果劳动力完全由市场供求关系决定，你只要愿意拿比别人低的工资，就可以得到任何工作的机会。但是在现实中，只有非常低端的工作才是这样。</p>\n<p>哪怕是“谁来了都能干”的工作，企业也不希望“让谁都来干”，而希望员工都有一定的忠诚度和凝聚力，并愿意为此支付一个更高的工资。至于需要专业技能的工作就更是如此。</p>\n<h5 id=\"竞争游戏\"><a href=\"#竞争游戏\" class=\"headerlink\" title=\"竞争游戏\"></a>竞争游戏</h5><p>名校是一种稀缺资源。只要像进入名校的学生比招生名额多，高考竞争就很激烈。如果所有高中生都不用功备考，大学也要招那么多人；因为每个人都害怕自己考不上而用功，结果就是所有人都投入大量无谓的精力，大学还是只招这么多人。<br>国家是因为教育而富强的吗？</p>\n<p>一个国家的教育水平其实是在这个国家的经济腾飞以后才起来的。</p>\n<p>工作机会必须先走一步来带动教育发展。</p>\n<h5 id=\"穷人和富人：谁更应该上名校？\"><a href=\"#穷人和富人：谁更应该上名校？\" class=\"headerlink\" title=\"穷人和富人：谁更应该上名校？\"></a>穷人和富人：谁更应该上名校？</h5><p>对聪明学生来说，上不上名校并不重要。你走这条路能成功，走别的路也能成功。这可能是因为社会足够复杂，而市场足够有效，以至于一次没被选中也无所谓。<br>低收入家庭的孩子上不上名校对他影响巨大，可以说第一步走错以后想出头就很难了。</p>\n<h4 id=\"精致的利己主义者和常青藤的绵羊\"><a href=\"#精致的利己主义者和常青藤的绵羊\" class=\"headerlink\" title=\"精致的利己主义者和常青藤的绵羊\"></a>精致的利己主义者和常青藤的绵羊</h4><h5 id=\"好得像绵羊一样的学生\"><a href=\"#好得像绵羊一样的学生\" class=\"headerlink\" title=\"好得像绵羊一样的学生\"></a>好得像绵羊一样的学生</h5><p>人们印象中的名校应该不拘一格降人才，每个学生都根据自己的个性选择不同的道路，百花齐放。然而事实是在追求安全不敢冒险的氛围下，学生们互相模仿，生怕跟别人不一样。<br>别人怎么要求，他们就怎么反应。不敢冒险，互相模仿。一群群的都往同样的方向走。这不就是绵羊吗？</p>\n<h4 id=\"能把穷人变成正常人的教学法\"><a href=\"#能把穷人变成正常人的教学法\" class=\"headerlink\" title=\"能把穷人变成正常人的教学法\"></a>能把穷人变成正常人的教学法</h4><h5 id=\"穷人与教育\"><a href=\"#穷人与教育\" class=\"headerlink\" title=\"穷人与教育\"></a>穷人与教育</h5><p>贫困，其实是一个复杂系统中多种因素联合造成的结果，你很难简单地使用某个单一办法–帮助就业、直接发钱、让他去更好的学校读书–来让一个人摆脱贫困，你必须多管齐下才行。</p>\n<p>自控，是一种反人性的行为。它要求我们做“该做”的事，而不是“想做”的事。现在有句流行的话“以一般人的努力程度之低，根本谈不上拼天赋”，其实是有道理的。一个有自控力的阿仁生活再差也差不到哪儿去，自控力是比想象力更为基本和行之有效的个人素质，事摆脱贫困的关键一步。</p>\n<h4 id=\"美国人说的圣贤之道\"><a href=\"#美国人说的圣贤之道\" class=\"headerlink\" title=\"美国人说的圣贤之道\"></a>美国人说的圣贤之道</h4><h5 id=\"怎样成为圣贤\"><a href=\"#怎样成为圣贤\" class=\"headerlink\" title=\"怎样成为圣贤\"></a>怎样成为圣贤</h5><p>“人性这根曲木,绝然造不出任何笔直的东西。”只有当你承认自己是有缺陷的，摆正谦卑的态度，你才有可能跟自己的弱点作斗争，才有可能去完善品格。</p>\n<p>不好的情感冲动如果不加以遏制，不防微杜渐，就有可能形成正反馈，越来越大，乃至导致灾难。所以哪怕是小事，也不能掉以轻心–“勿以恶小而为之”。</p>\n<p>品格的修炼并不是要消除这些冲动，而是要学会控制这些冲动–“发乎情止乎礼”。</p>\n<p>压制自己的情感冲动，要形成习惯才好。这就要求我们平时把任何小事都视为磨炼品格的机会，不能稍有放松–“勿以善小而不为”。</p>\n<p>他们不问我想干什么，他们问这个世界需要我干什么。他们不是用做事的方法来满足内心。他们是为了做成这件事，去不断打磨自己的内心。</p>\n<p>品格修养的追求目标，并不在于成功，而在于成熟。特别可靠，才能办大事–“可以托六尺之孤，可以寄百里之命······”</p>\n<h5 id=\"中庸之道\"><a href=\"#中庸之道\" class=\"headerlink\" title=\"中庸之道\"></a>中庸之道</h5><p>中庸不是什么：中庸不是面对两种对立意见采取一个折中的立场，不是盲目地搞平等，也不是对各种不同意见和稀泥。<br>中庸，是你要认识到不同理念，不同情感诉求、不同道德标准之间，必然有冲突。这些理念没有哪个是完美的，谁也说服不了谁，谁也消灭不了谁，矛盾永远存在。</p>\n<p>所以作为最高领导人，就绝对不能像个二愣子一样全面倒向一种理念然后打压其他理念，试图给个一劳永逸的解决方案。<br>所以领导的艺术就如同在风暴中驾驶帆船：太往左偏了就往右调整一下，太往右偏了就往左调整一下。平衡永远是动态的。你就永远这么调啊调，这就是中庸之道。</p>\n<h5 id=\"品格和现代人\"><a href=\"#品格和现代人\" class=\"headerlink\" title=\"品格和现代人\"></a>品格和现代人</h5><p>在现代社会，这条路根本就不是给普通人准备的。普通人的上限是“精致的利己主义者”–你只要根据社会给你的设定，把自己分内的工作做好，对社会给你的各种经济学刺激做出合理反应就可以了。你左右不了世界，世界也不担心被你破坏。<br>只要那些想要办大事的人需要品格。因为这样的人不能单靠本能反应行事。</p>\n<p>他们需要动用自由意志去做决策，而且他们的决策会对世界产生影响。他们不能因为自己恰好不喜欢哪个国家就不让哪个国家进入联盟，他们不能因为自己恰好喜欢哪一派理论就按哪派理论制定政策，他们不能因为这么做恰好对自己最有利而不顾整体利益。他们愿意为心中的大事牺牲。</p>\n<p>我们知道了当今那些市侩猥琐的公众人物，大概是不太可能干出什么大事来的。</p>\n<h4 id=\"说英雄，谁是英雄\"><a href=\"#说英雄，谁是英雄\" class=\"headerlink\" title=\"说英雄，谁是英雄\"></a>说英雄，谁是英雄</h4><p>谁说社会成见没意义？成见往往是对的，成见是对历史经验的总结，是对未来必然重演历史的信心。大数据预测，就是用成见预测。</p>\n<p>世界上有些人却是统计模型所预测不了的。统计，顾名思义，就是指多数人的行为规律。总有少数人的数据因为距离大多数人的主流数据太远，而被模型视为误差直接忽略。</p>\n<p>平凡的人们没有给我太多感动。这些不平凡、不能被模型预测的人，才是真的英雄。</p>\n<h5 id=\"体制\"><a href=\"#体制\" class=\"headerlink\" title=\"体制\"></a>体制</h5><p>无论是发达国家还是发展中国家的现代化教育体制，只要是一大群学生一起坐在教师里听一个老师讲课，就都是工业化流水线的模式。这种学校教育，对“最普通”的人最有利。</p>\n<p>个性学生从来都不是体制的产物，他们主动对抗体制。</p>\n<h5 id=\"美国教育各阶层分析\"><a href=\"#美国教育各阶层分析\" class=\"headerlink\" title=\"美国教育各阶层分析\"></a>美国教育各阶层分析</h5><p>普通工人阶层的学校强调遵守规章流程，整个教学充满死记硬背的机械式程序，学生几乎没有做选择和做决定的机会。老师教任何东西，哪怕是解数学题，都是用向学生灌输规则的方法。</p>\n<p>一般中产阶层的学校强调把事做“对”。有点像中国的应试教育，以学习材料为核心，要求学生必须理解这些材料–你可以用自己的方法理解，只要你能得到正确答案。学校教学很强调课本的权威性，你绝对不能对课本结论提出质疑。</p>\n<p>专业人士阶层的学校强调创造性和独立性。</p>\n<p>主管精英阶层的学校强调智识，这个阶层的学生学的不是怎么遵守规则，而是怎么制定规则。教育的核心目标，是决策和选择。</p>\n<p>大多数情况下，人不太容易超越自己父母的阶层。</p>\n<h5 id=\"中国各阶层的三种教育目标\"><a href=\"#中国各阶层的三种教育目标\" class=\"headerlink\" title=\"中国各阶层的三种教育目标\"></a>中国各阶层的三种教育目标</h5><p>贫民家庭对教育的期待是培养工具，以找工作为目的。</p>\n<p>中产家庭对教育的期待是培养工艺品，以提升个人价值为目的。</p>\n<p>上层家庭对教育的期待是培养主人翁，以欣赏、选择和改变周围世界为目的。</p>\n<p>家庭收入水平和父母文化水平，直接决定孩子能达到什么层次。</p>\n<h5 id=\"英雄的套路\"><a href=\"#英雄的套路\" class=\"headerlink\" title=\"英雄的套路\"></a>英雄的套路</h5><p>所谓英雄，就是超越了阶层出身，超越了周围环境、超越了性格局限，拒绝按照任何设定好的程序行事，不能被大数据预测，能给世界带来惊喜，最不想机器人的人。</p>\n<p>必须改变自己，重新认识这个世界，然后用全新的方式面对。</p>\n<h4 id=\"使命的召唤\"><a href=\"#使命的召唤\" class=\"headerlink\" title=\"使命的召唤\"></a>使命的召唤</h4><p>英雄和俗人的根本区别在于，俗人想要适应世界，英雄想要改变世界。</p>\n<p>为什么英雄是自由的？因为一个人一旦有了使命感，就有了最彻底的主人翁精神，你就不用管他，也管不住他了。</p>\n<p>他们只对自己的使命负责，不受任何外力的限制。他们敢问不该问的问题，敢挑战周围人的共识，不屑于取悦任何人。<br>英雄=创新</p>\n<p>创新就是打破常规，创新就是意外，创新就是你事先根本没预测到。根据我们队英雄的定义，这就是英雄做的事情。</p>\n<h3 id=\"Part-3-智识分子的十八般武艺\"><a href=\"#Part-3-智识分子的十八般武艺\" class=\"headerlink\" title=\"Part 3 智识分子的十八般武艺\"></a>Part 3 智识分子的十八般武艺</h3><p>人类所知非常有限，哪怕是最好的学者花了很多钱做得很好的研究，也可能是错的。科学的最大价值并不在于固定的知识，而在于获得这些知识的研究方法。</p>\n<h4 id=\"为什么高考作文题目是可预测的\"><a href=\"#为什么高考作文题目是可预测的\" class=\"headerlink\" title=\"为什么高考作文题目是可预测的\"></a>为什么高考作文题目是可预测的</h4><p>用数据分析搞预测的隐含假设是未来事件会继续落入最近流行的俗套。</p>\n<p>简单的系统容易预测，因为一个个体哪怕出点预测范围以外的波动，对整个系统也不会有大影响。而如果一个系统中包含各种正反馈机制，它就是不好预测的复杂系统，一个个体的小波动就有可能通过连锁反应层层放大出现蝴蝶效应。</p>\n<p>出题者不需要什么反馈，更不需要正反馈！他们要确保那些稍微聪明一点用功一点的孩子都能考上，把偶然因素降到最低。所以他们必然诉诸俗套。俗套最安全。数据分析指向哪里，他们就打向哪里。</p>\n<h4 id=\"大数据带来的主题军备竞赛\"><a href=\"#大数据带来的主题军备竞赛\" class=\"headerlink\" title=\"大数据带来的主题军备竞赛\"></a>大数据带来的主题军备竞赛</h4><h5 id=\"锤子和钉子\"><a href=\"#锤子和钉子\" class=\"headerlink\" title=\"锤子和钉子\"></a>锤子和钉子</h5><p>中国高考作文的出题方法有个固定的套路：给你讲一段小故事，然后让你根据这个故事，想想自己受到什么启发，写篇文章。换句话说，你的作文重点根本不是这个故事，故事只是你要写的主题的一个素材。</p>\n<p>同一个素材，个人思考角度不同，可以对应不同的主题。但更重要的是，不同的素材可以对应同样的主题。</p>\n<p>只要一个人熟读这六个方面（奋斗、自由、青春、自然、环境和尊敬）各种可能主题的文章，掌握其写作套路，不管高考出什么素材都能应对自如。</p>\n<h5 id=\"主题模型\"><a href=\"#主题模型\" class=\"headerlink\" title=\"主题模型\"></a>主题模型</h5><p>“隐含狄利克雷分布”（Latent Dirchlet allocation LDA）:计算机认为文章只不过是一些词汇的集合。而每个主题，也只是一些关键词的集合。计算机没必要“理解”每个主题或每个词的意思，甚至根本不用管这些词出现的先后顺序。计算机要做的仅仅是使用一定的数学方法对每篇文章中的词汇进行分析。一篇文章拿过来，你要做的就是把事先设定的所有主题一个一个过一遍，计算这篇文章中的词汇对应每个主题的可能性是多少。计算结果，就是这篇文章说的是每个主题的概率大小。一篇文章甚至可以包含多个主题，这不是问题。关键在于，计算机可以判断一篇文章最有可能说的是什么主题，第二可能说的是什么主题······这就相当于计算机已经“读懂”了这篇文章。</p>\n<h5 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h5><p>数据分析的真正作用是能让好东西迅速流传开来······然后迅速消亡。</p>\n<h4 id=\"大尺度和硬条件：四万年来谁著史\"><a href=\"#大尺度和硬条件：四万年来谁著史\" class=\"headerlink\" title=\"大尺度和硬条件：四万年来谁著史\"></a>大尺度和硬条件：四万年来谁著史</h4><p>尺度，是一个重要的思维方式。尺度思维的一个要点在于，当你考虑大尺度问题的时候，小尺度的现象常常可以忽略或者简化。而更为重要的是，从小尺度现象出发往往解释不了大尺度问题。</p>\n<p>研究大尺度问题，必须关注一些长期不变的因素，也就是“硬条件”。</p>\n<p>有些硬条件构成了历史发展的种种限制，使人们不能恣意而为，而有些硬条件则又是我们的重大机遇。正因为有了这些限制，使人们不能恣意而为，历史的演化才成了带着镣铐跳舞，反而不平淡了。</p>\n<h4 id=\"技术左右天下大势\"><a href=\"#技术左右天下大势\" class=\"headerlink\" title=\"技术左右天下大势\"></a>技术左右天下大势</h4><p>在技术进步的任何阶段，都不是你想要什么就能研发什么。技术不听我们的，我们得听技术的。</p>\n<p>一项技术如果到了“该出来”的时候，它就一定会出来。因为它会被好几个人同时发现。</p>\n<p>技术不仅仅是被人类需求或者人类天才创造的推动，它自身就是自身的推动。正如生物进化一样，每一次技术突破都孕育新的技术突破，整个的技术进步是一个自组织和正反馈过程。</p>\n<h4 id=\"一点实用主义的学英语心得\"><a href=\"#一点实用主义的学英语心得\" class=\"headerlink\" title=\"一点实用主义的学英语心得\"></a>一点实用主义的学英语心得</h4><p>正确的做法是找本托福或者GRE的单词书，每天拿出几个小时的时间，背300-600个单词。</p>\n<p>记忆的关键在于间隔式的重复，过一天复习一次，过三天再复习一次，过一周再复习一次，让间隔的时间越来越长。</p>\n<p>在背单词的同时，你找一本大学英语课本之类的书，精读其中的文章。这种书的好处是上面有注释和讲解。</p>\n<h4 id=\"信息极客的三个功夫\"><a href=\"#信息极客的三个功夫\" class=\"headerlink\" title=\"信息极客的三个功夫\"></a>信息极客的三个功夫</h4><p>第一个功夫是阅读学术论文，论文是知识的最前沿，而且是用最优条理的方式整理好的文本。</p>\n<p>第二个功夫是直接阅读原始数据，对奇怪的事非常敏感，产生疑问后不是口无凭据地质疑，而是立刻查找数据，拿数据说法。</p>\n<p>第三个功夫是主动采集和分析数据，把很多人的个人数据综合起来，可以帮助研究者更好地理解人类行为，所以量化自我也是对社会的贡献。不但如此，个人还能拿自己的数据搞点小研究。</p>\n<h5 id=\"“舌战群儒”的技术分析\"><a href=\"#“舌战群儒”的技术分析\" class=\"headerlink\" title=\"“舌战群儒”的技术分析\"></a>“舌战群儒”的技术分析</h5><h6 id=\"“舌战群儒”的技术\"><a href=\"#“舌战群儒”的技术\" class=\"headerlink\" title=\"“舌战群儒”的技术\"></a>“舌战群儒”的技术</h6><ol>\n<li>列举事实证据，暗示对方能力不行</li>\n<li>如果比不过事实，比境界</li>\n<li>你别说我如何如何不堪，著名英雄xxx也曾经如此不堪</li>\n</ol>\n<h4 id=\"贝叶斯定理的胆识\"><a href=\"#贝叶斯定理的胆识\" class=\"headerlink\" title=\"贝叶斯定理的胆识\"></a>贝叶斯定理的胆识</h4><p>“相信不相信”的真正意义，在于给我们自己的决策提供依据。</p>\n<p>一般情况下对一般有争议的问题我们都是抱着将信将疑的态度，信念值在0.01%到99.99%之间。而且，我们队大多数事物的信念值都在动态变化。比如有什么特别突兀的新东西出来，我们一开始可能是不信的，随着证据增多，慢慢加强信念。<br>A代表我们感兴趣的事件，p(A)表示它发生的概率。B代表一个与之有关的事件，p(A|B)则代表在B发生的情况下，A发生的概率。类似地，p(B|A)表示在A发生的情况下，B发生的概率。</p>\n<p>最关键思想是在B发生以后，有了这个新的证据，我们对A的信念需要做一个调整，从p(A)变成p(A|B)了。你可以把A当成你对一般情况的理论预言，把B当成一次实验结果。有了新的实验结果，你就调整自己的理论预言。</p>\n<p>如果我们对某件事的信念值非常非常低，那么即使强有力的证据也很难扭转我们的信念。</p>\n<p>观点随事实改变，有胆有识，这就是贝叶斯定理的伟大原则。</p>\n<h4 id=\"生猛的进化心理学\"><a href=\"#生猛的进化心理学\" class=\"headerlink\" title=\"生猛的进化心理学\"></a>生猛的进化心理学</h4><p>人们对进化心理学争论主要是两点。第一，传统社会科学认为人类是高级生命，是特殊的，人不是动物；而进化心理学认为人类跟动物没什么区别，“完全”平等。第二，传统社会科学认为人的性格和思维模式主要是后天环境（包括自然环境和社会环境）影响的结果，而进化心理学认为所谓“人性”，主要是人这个物种长期进化遗传自然选择适应的结果，小孩一生下来他/她的“人性”就已经定好了。</p>\n<p>进化心理学有个基础假设，称为“大草原原理”（Savanna principle）。这个原理说，由于人类的进化速度非常慢，而最近几千年人类的生活方式变化极快，以至于人的进化没有跟上人的生活变化的步伐。所以我们这些所谓现代人的性格和思维模式很大程度上仍然停留在史前的水平，比如说石器时代。也就是说，要想理解为什么今天的人会有这样那样的行为，只要对比石器时代就可以了。</p>\n<p>进化心理学更多的是解释我们潜意识中的“常识”。有些东西我们都喜欢，但是我们又说不清楚为什么喜欢，这时候就该进化心理学出手了。</p>\n<p>进化心理学认为所有两性差异都可以用生育能力的差异来解释。第一个差异是数量级上的差异。一个男人理论上可以有无数个孩子，而一个女人终其一生最多只能有几十个孩子。这就决定了女人一定更重视家庭。第二个差异是女人一定知道自己的孩子是自己的，但史前男人无法确定自己女人生的孩子是不是真的是自己的，正所谓“momma’s baby, daday’s maybe”。正是因为这个根本原因，导致男人特别不能容忍妻子的不忠。</p>\n<p>哪怕进化心理学能够解释传统社会里的很多现象，到了现代社会，有很多人其实是进步了。进化心理学只能说明我们的一个思维趋势，而这些进步了的人可以克服自己不好的趋势，超越进化心理学。</p>\n<p>人受教育就是为了超越进化心理学，用理性克服本能！</p>\n<h4 id=\"哪种知识最可靠？\"><a href=\"#哪种知识最可靠？\" class=\"headerlink\" title=\"哪种知识最可靠？\"></a>哪种知识最可靠？</h4><p>科学的最大价值并不在于固定的知识，而在于获得这些知识的研究方法。</p>\n<p>任何数学知识都绝对正确，不容置疑。凡是出发点正确而又是用逻辑推导出来的知识，就必定是正确的。</p>\n<p>既然专家的建议不一定好使，我们就千万不要执着于使用某一个特定的理论去做事，最好都抱着试试看的态度，这个理论不行就换另一个理论。</p>\n<p>如果有人像个神甫一样说他身怀宇宙真理般的理论，充满自信，最好别信他。</p>\n<h4 id=\"宇航时代为何还未到来？\"><a href=\"#宇航时代为何还未到来？\" class=\"headerlink\" title=\"宇航时代为何还未到来？\"></a>宇航时代为何还未到来？</h4><p>现阶段的载人航天其实是个形象工程。</p>\n<p>形象工程的最主要好处是让人民（包括纳税人）高兴。</p>\n<p>大宇航时代什么时候才能到来？我们必须指望将来有一个什么重大发现，发现太阳系深处的某个地方有一种对地球人来说价值连城的东西，值得人们不惜钱财和生命去追求。</p>\n<h3 id=\"Part4-未来，已经到来\"><a href=\"#Part4-未来，已经到来\" class=\"headerlink\" title=\"Part4 未来，已经到来\"></a>Part4 未来，已经到来</h3><p>我们即将进入一个“不换思想就换人”的时代。</p>\n<h4 id=\"把工作输给机器人\"><a href=\"#把工作输给机器人\" class=\"headerlink\" title=\"把工作输给机器人\"></a>把工作输给机器人</h4><p>《与机器竞赛》这本书指出，在与机器进行的这场竞赛中，有三类赢家和三类输家。高技术工人是赢家，而低学历者将是输家，因为机器人将会迅速取代他们的工作。超级明星是赢家，第二名及其他所有人都是输家。资本是赢家，劳动者是输家。</p>\n<h4 id=\"你比机器强在哪儿？\"><a href=\"#你比机器强在哪儿？\" class=\"headerlink\" title=\"你比机器强在哪儿？\"></a>你比机器强在哪儿？</h4><p>这个世界正在经历深刻的变革：人靠知识谋生的主流方式一变再变。<br>人得靠创造新知识来赚钱。机器人会的所有东西，都是跟人学的。写报告也好，提建议也好，诊断病情也好，机器人的能耐在于从已经发生的事情中找到规律，然后把这个规律用于新的事情。机器人，是彻底的经验主义者。<br>人的一个任务是打破常规，第二个任务是表达自己的好恶。</p>\n<h4 id=\"带着机器竞赛\"><a href=\"#带着机器竞赛\" class=\"headerlink\" title=\"带着机器竞赛\"></a>带着机器竞赛</h4><p>这些善于弥补计算机不足、善于利用机器优势、善于发挥人的特点的人，不是在与机器竞赛，而是带着机器竞赛。<br>他们的秘密在与知道怎么更好地调教和帮助计算机看得更远。计算机不再是人类的秘书，而是一个有无限潜能的猛兽，取胜的关键在于你会不会使。</p>\n<h4 id=\"怎么杀死海星\"><a href=\"#怎么杀死海星\" class=\"headerlink\" title=\"怎么杀死海星\"></a>怎么杀死海星</h4><p>传统组织就如同蜘蛛，它的智力集中在大脑，只要你把蜘蛛的头去掉，蜘蛛就会死亡。而去中心化组织就如同海星，海星根本就没有头。它的智能分布在身体各处，一旦你打掉它身体的一部分，那个部分甚至可能自己再长成另一个海星。</p>\n<p>把去中心化组织的成员联系在一起的不是领导人，而是某个共同的理念或者需求。有时候组织有一个名义上的领导，但其对整个组织的控制能力极其有限，更多的是一个精神领袖。</p>\n<p>不过去中心化组织有个关键的弱点：你很难通过这样的组织赚大钱。分权的产业利润低，只有集权才能获得高利润。</p>\n<h5 id=\"杀死海星的三个策略\"><a href=\"#杀死海星的三个策略\" class=\"headerlink\" title=\"杀死海星的三个策略\"></a>杀死海星的三个策略</h5><ol>\n<li>改变环境，既然你们是靠一种意识形态联系在一起，我就让你这个意识形态没有市场。</li>\n<li>先把海星变成蜘蛛再杀。</li>\n<li>把自己去中心化。借鉴去中心化组织的分布式智力和灵活多变的特点。</li>\n</ol>\n<h4 id=\"合弄制：一种新的管理方法\"><a href=\"#合弄制：一种新的管理方法\" class=\"headerlink\" title=\"合弄制：一种新的管理方法\"></a>合弄制：一种新的管理方法</h4><p>合弄制，并不是一般的分权改革，它是一种非常严格，而且相当复杂的组织管理方式。</p>\n<p>合弄制的一个核心思想是以工作为本，而不是以人为本。合弄制首先要求你是一个“有目的的组织”。合弄制要求组织中的每个人都要能够判断各项工作是否符合这个目的。</p>\n<p>明确了公司的总目的，公司就可以通过管治会议（Governance Meeting）来根据这个目的把工作分块，并把它们变成一个个具体的功用。</p>\n<p>管制会议定下功用之后，给每个功用成立一个“圈（Circle）”，同时决定每个圈中需要的“角色（Roles）”。圈就是角色的集合。</p>\n<p>传统公司是人员组织结构固定，把工作往人身上分，而合弄制则是工作职责固定，把人往工作上分。每个圈有一个“链长（ LeadLink）”，这是一个具体的人。链长对自己圈的工作没有决定权，他唯一的权力是往自己圈里的角色中放人。他可以在全公司范围内邀请任何人来填充角色，并且有权在认为一个人没有做好自己角色的时候将其从角色上提出。所有圈里的重大决策都由这个圈里所有角色参加的管治会议民主讨论决定。而在日常工作中，每个人则根据自己的角色有相当大的自主权。没有任何人可以命令你干什么。你根据自己的角色的职责和权力自己决定干什么。</p>\n<p>每个圈的管治会议还可以根据工作需要在圈中再成立“子圈”，规定每个子圈的功用和子圈中有些什么角色，并由链长指定每个子圈的链长。子圈中还可以又有子圈，如此层层嵌套，就如同人体分为器官、组织、细胞等等。每一个圈的管治会议，由直接属于这个圈的全体角色，以及这个圈直接下属每个子圈的一个代表参加。</p>\n<p>如此看来合弄制并非是没有管理或者没有等级的体制。各层圈的上下级关系非常明确。一个圈之内实行民主，但上圈直接决定子圈的目的和角色功用，而且链长有绝对的人事权。但关键在于，这些管理和等级都是针对工作，或者说是针对角色的。而不是针对人的。</p>\n<p>合弄制的一个妙处在于每个人可以拥有多个不同的角色！</p>\n<h5 id=\"合弄制的好处\"><a href=\"#合弄制的好处\" class=\"headerlink\" title=\"合弄制的好处\"></a>合弄制的好处</h5><ol>\n<li>职权非常透明，公司可以变得更有效率。</li>\n<li>公司可以更加容易做出改变，能够对市场做出迅速反应。</li>\n</ol>\n<h4 id=\"该死就死的市场经济\"><a href=\"#该死就死的市场经济\" class=\"headerlink\" title=\"该死就死的市场经济\"></a>该死就死的市场经济</h4><p>市场的真正关键在于“不知道”。政府计划不行，并不是说政府不够聪明或者政府的计算机不够快，而是政府不知道未来会怎么变–没人知道未来会怎么变。</p>\n<h5 id=\"市场经济，深得生物进化之道\"><a href=\"#市场经济，深得生物进化之道\" class=\"headerlink\" title=\"市场经济，深得生物进化之道\"></a>市场经济，深得生物进化之道</h5><ol>\n<li>随机变异。</li>\n<li>自由交配</li>\n<li>无情淘汰</li>\n</ol>\n<p>参与市场得有这样的精神：想生就生，该死就死。</p>\n<h4 id=\"物质极大丰富的时代\"><a href=\"#物质极大丰富的时代\" class=\"headerlink\" title=\"物质极大丰富的时代\"></a>物质极大丰富的时代</h4><p>四个论点</p>\n<ol>\n<li>产生经济衰退的原因是剩余利润。增加私人投资已经不能带来经济增长，应该靠消费带来增长。</li>\n<li>为扩大消费，应该搞财富的再分配，比如增加社会福利。</li>\n<li>投资应该社会化。决定一个项目是否上马，不应该只看其能带来多少利润，而应该全社会一起评估它的社会价值，也就是说要追求使用价值。</li>\n<li>花钱是道德的，消费文化是个好东西。</li>\n</ol>"},{"title":"杂事随想","date":"2019-03-27T14:08:42.000Z","_content":"最近想了很多东西,有的关于工作,有的与生活相关,为什么会去想这些东西呢,原因很多吧,说一下最触动我的几个原因吧.\n<!--more-->\n#### 缘起\n* 看到同事可以很随意的买下他所喜欢的东西,周五才说自己的平衡车旧了,周一就换了新的了.而自己呢,不管是换手机还是换电脑都要犹豫再三.这种感觉真的很不好.\n* 租的房子到期了,房租涨了,但工资的涨幅却不可期,让我心里多了一丝阴霾\n* 工作的大量重复,让我感觉到了厌烦\n#### 想何\n* 关于买东西 \n仔细想了想,自己换东西,之所以会犹豫再三,有自身性格的原因,但更多是因为自己的可支配收入真的太少了,每个月除掉日常开销和房租水电,剩下的就不多了,正因为这样,我换东西的时候才会犹豫再三,想清楚自己是不是真的需要,有没有那么迫切.\n* 关于涨薪\n当初进现在的公司就是冲着工资的涨幅的,但年初时,公司调整了涨薪策略,使得涨薪的幅度扑朔迷离,而房租的增长却不曾止步,而较低的起薪在当前的房租真的不算什么了,如果涨薪没有到一定程度,可能下一次的到期,就是我离职的时候了\n* 关于工作\n最近接手了一个新项目,新项目的大部分界面都是直接从其他项目里面复制的,然后改逻辑,布局等等.让我感觉到根本学不到什么有用的东西,甚至于有一丝厌烦的情绪.但是公司的主营业务就是这样的,或许我是时候好好考虑一下了.之前选择这公司,一方面是涨薪的幅度,另一方面是工作时间短,自己支配时间长,现在看来,是我考虑少了,较低的起薪使我大量时间浪费在通勤上,而涨薪的幅度也随着公司政策的调整变得不可期.同时因为住的比较僻远,让自己某种程度上变得有点宅,因为附近根本没有什么娱乐的地方.\n#### 何处\n* 开始有计划性学习VUE,.NET CORE和英语,并且把自己比较薄弱的基础补足.\n* 周末开始四处走走,不要变得太宅,多点去尝试认识新的人\n* 租房的时候,先续租半年,半年后,离职就可以考虑新的住处了\n","source":"_posts/杂事随想.md","raw":"---\ntitle: 杂事随想\ndate: 2019-03-27 22:08:42\ncategories: 随笔\ntags:\n - 随笔\n---\n最近想了很多东西,有的关于工作,有的与生活相关,为什么会去想这些东西呢,原因很多吧,说一下最触动我的几个原因吧.\n<!--more-->\n#### 缘起\n* 看到同事可以很随意的买下他所喜欢的东西,周五才说自己的平衡车旧了,周一就换了新的了.而自己呢,不管是换手机还是换电脑都要犹豫再三.这种感觉真的很不好.\n* 租的房子到期了,房租涨了,但工资的涨幅却不可期,让我心里多了一丝阴霾\n* 工作的大量重复,让我感觉到了厌烦\n#### 想何\n* 关于买东西 \n仔细想了想,自己换东西,之所以会犹豫再三,有自身性格的原因,但更多是因为自己的可支配收入真的太少了,每个月除掉日常开销和房租水电,剩下的就不多了,正因为这样,我换东西的时候才会犹豫再三,想清楚自己是不是真的需要,有没有那么迫切.\n* 关于涨薪\n当初进现在的公司就是冲着工资的涨幅的,但年初时,公司调整了涨薪策略,使得涨薪的幅度扑朔迷离,而房租的增长却不曾止步,而较低的起薪在当前的房租真的不算什么了,如果涨薪没有到一定程度,可能下一次的到期,就是我离职的时候了\n* 关于工作\n最近接手了一个新项目,新项目的大部分界面都是直接从其他项目里面复制的,然后改逻辑,布局等等.让我感觉到根本学不到什么有用的东西,甚至于有一丝厌烦的情绪.但是公司的主营业务就是这样的,或许我是时候好好考虑一下了.之前选择这公司,一方面是涨薪的幅度,另一方面是工作时间短,自己支配时间长,现在看来,是我考虑少了,较低的起薪使我大量时间浪费在通勤上,而涨薪的幅度也随着公司政策的调整变得不可期.同时因为住的比较僻远,让自己某种程度上变得有点宅,因为附近根本没有什么娱乐的地方.\n#### 何处\n* 开始有计划性学习VUE,.NET CORE和英语,并且把自己比较薄弱的基础补足.\n* 周末开始四处走走,不要变得太宅,多点去尝试认识新的人\n* 租房的时候,先续租半年,半年后,离职就可以考虑新的住处了\n","slug":"杂事随想","published":1,"updated":"2021-03-30T03:24:16.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx12005uvcuabj3x2z4u","content":"<p>最近想了很多东西,有的关于工作,有的与生活相关,为什么会去想这些东西呢,原因很多吧,说一下最触动我的几个原因吧.</p>\n<span id=\"more\"></span>\n<h4 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h4><ul>\n<li>看到同事可以很随意的买下他所喜欢的东西,周五才说自己的平衡车旧了,周一就换了新的了.而自己呢,不管是换手机还是换电脑都要犹豫再三.这种感觉真的很不好.</li>\n<li>租的房子到期了,房租涨了,但工资的涨幅却不可期,让我心里多了一丝阴霾</li>\n<li>工作的大量重复,让我感觉到了厌烦<h4 id=\"想何\"><a href=\"#想何\" class=\"headerlink\" title=\"想何\"></a>想何</h4></li>\n<li>关于买东西<br>仔细想了想,自己换东西,之所以会犹豫再三,有自身性格的原因,但更多是因为自己的可支配收入真的太少了,每个月除掉日常开销和房租水电,剩下的就不多了,正因为这样,我换东西的时候才会犹豫再三,想清楚自己是不是真的需要,有没有那么迫切.</li>\n<li>关于涨薪<br>当初进现在的公司就是冲着工资的涨幅的,但年初时,公司调整了涨薪策略,使得涨薪的幅度扑朔迷离,而房租的增长却不曾止步,而较低的起薪在当前的房租真的不算什么了,如果涨薪没有到一定程度,可能下一次的到期,就是我离职的时候了</li>\n<li>关于工作<br>最近接手了一个新项目,新项目的大部分界面都是直接从其他项目里面复制的,然后改逻辑,布局等等.让我感觉到根本学不到什么有用的东西,甚至于有一丝厌烦的情绪.但是公司的主营业务就是这样的,或许我是时候好好考虑一下了.之前选择这公司,一方面是涨薪的幅度,另一方面是工作时间短,自己支配时间长,现在看来,是我考虑少了,较低的起薪使我大量时间浪费在通勤上,而涨薪的幅度也随着公司政策的调整变得不可期.同时因为住的比较僻远,让自己某种程度上变得有点宅,因为附近根本没有什么娱乐的地方.<h4 id=\"何处\"><a href=\"#何处\" class=\"headerlink\" title=\"何处\"></a>何处</h4></li>\n<li>开始有计划性学习VUE,.NET CORE和英语,并且把自己比较薄弱的基础补足.</li>\n<li>周末开始四处走走,不要变得太宅,多点去尝试认识新的人</li>\n<li>租房的时候,先续租半年,半年后,离职就可以考虑新的住处了</li>\n</ul>\n","site":{"data":{}},"length":750,"excerpt":"<p>最近想了很多东西,有的关于工作,有的与生活相关,为什么会去想这些东西呢,原因很多吧,说一下最触动我的几个原因吧.</p>","more":"<h4 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h4><ul>\n<li>看到同事可以很随意的买下他所喜欢的东西,周五才说自己的平衡车旧了,周一就换了新的了.而自己呢,不管是换手机还是换电脑都要犹豫再三.这种感觉真的很不好.</li>\n<li>租的房子到期了,房租涨了,但工资的涨幅却不可期,让我心里多了一丝阴霾</li>\n<li>工作的大量重复,让我感觉到了厌烦<h4 id=\"想何\"><a href=\"#想何\" class=\"headerlink\" title=\"想何\"></a>想何</h4></li>\n<li>关于买东西<br>仔细想了想,自己换东西,之所以会犹豫再三,有自身性格的原因,但更多是因为自己的可支配收入真的太少了,每个月除掉日常开销和房租水电,剩下的就不多了,正因为这样,我换东西的时候才会犹豫再三,想清楚自己是不是真的需要,有没有那么迫切.</li>\n<li>关于涨薪<br>当初进现在的公司就是冲着工资的涨幅的,但年初时,公司调整了涨薪策略,使得涨薪的幅度扑朔迷离,而房租的增长却不曾止步,而较低的起薪在当前的房租真的不算什么了,如果涨薪没有到一定程度,可能下一次的到期,就是我离职的时候了</li>\n<li>关于工作<br>最近接手了一个新项目,新项目的大部分界面都是直接从其他项目里面复制的,然后改逻辑,布局等等.让我感觉到根本学不到什么有用的东西,甚至于有一丝厌烦的情绪.但是公司的主营业务就是这样的,或许我是时候好好考虑一下了.之前选择这公司,一方面是涨薪的幅度,另一方面是工作时间短,自己支配时间长,现在看来,是我考虑少了,较低的起薪使我大量时间浪费在通勤上,而涨薪的幅度也随着公司政策的调整变得不可期.同时因为住的比较僻远,让自己某种程度上变得有点宅,因为附近根本没有什么娱乐的地方.<h4 id=\"何处\"><a href=\"#何处\" class=\"headerlink\" title=\"何处\"></a>何处</h4></li>\n<li>开始有计划性学习VUE,.NET CORE和英语,并且把自己比较薄弱的基础补足.</li>\n<li>周末开始四处走走,不要变得太宅,多点去尝试认识新的人</li>\n<li>租房的时候,先续租半年,半年后,离职就可以考虑新的住处了</li>\n</ul>"},{"title":"掌握习惯--原子习惯:细微改变带来巨大成就的实证法则","date":"2020-03-09T07:26:04.000Z","_content":"这本书是一个B站up主 ElenaLin_青青 在一期视频中推荐,趁着最近还没有复工就来看看了.\n<!--more-->\n\n### 基本原理 点滴变化何以意义重大\n\n#### 第1章 微习惯的惊人力量\n\n* 习惯是自我提高的复利.从长远来看,每天进步1%的效果不容小觑.\n\n* 习惯是把双刃剑.它们可能对你有利,也可能对你不利,这就是为什么理解细节至关重要.\n\n* 在你越过临界点之前,细微的变化似乎没起任何作用.这是个日积月累、潜移默化的过程,最终的重大突破迟迟不到,考验着你的耐心.\n\n* 微习惯是个小习惯,是更大系统的一部分.正如原子是分子的组成部分一样,微习惯也是重大成效的组成部分.\n\n* 如果你想要的更好的结果,那就别再设定目标,转而全力关注你的体系.\n\n* 不求拔高你的目标,但求落实你的体系.\n\n#### 第2章 你的习惯如何塑造你的身份(反之亦然)\n\n* 变化有三个层次:结果变化、过程变成和身份变化.\n\n* 改变习惯的最有效方法不是关注你想要达到的目标,而是你想要成为谁.\n\n* 你的身份来自你的习惯.每个行动都是你在投票给你想成为的人.\n\n* 要想使自己做到最好,你需要持续编辑你的信念,升级和扩展你的身份.\n\n* 习惯至关重要的真正原因不是因为它们能带给你更好的结果(尽管他们能做到这一点),而是因为它们能改变你对自己抱有的信念.\n\n#### 第3章 培养良好习惯的四步法\n\n* 习惯是一种行为,因为重复的次数已经足够多,便可以自然而然地出现.\n\n* 习惯的最终目的是用尽可能少的精力和努力来解决生活中的问题.\n\n* 任何习惯都可以分解成一个反馈循环,它包括四个步骤:提示、渴求、反应和奖励.\n\n* 行为转变的四大定律是一套我们可以用来培养好习惯的简单规则.它们是:\n    1. 让它显而易见;\n    2. 让它有吸引力;\n    3. 让它简便易行;\n    4. 让它令人愉悦.\n\n### 第一定律 让它显而易见\n\n#### 第4章 看着不对劲儿的那个人\n\n* 有了足够的练习,你的大脑会不假思索地拾取预测特定结果的提示.\n\n* 一旦习惯成自然,我们就不再关注自己在做什么.\n\n* 行为转变的过程总是始于自觉.在你想改变习惯之前,你需要首先了解它.\n\n* 通过说出你的行动,指差确认将你的意识程度从下意识的习惯状态提升到警觉的水平.\n\n* 习惯积分卡是个简单的练习,你可以用它来深入了解你的行为.\n\n#### 第5章 培养新习惯的最佳方式\n\n* 行为转变的第一定律是让它显而易见.\n\n* 两个最常见的提示是时间和地点.\n\n* 创建执行意图是一种策略,你可以用它将新习惯与特定的时间和地点整合.\n\n* 执行意图的公式是:我将于[时间]在[地点][行为].\n\n* 习惯叠加是一种策略,你可以用它来将新习惯与当前习惯整合.\n\n* 习惯叠加的公式是:继[当前习惯]之后,我将[新习惯].\n\n#### 第6章 原动力被高估,环境往往更重要\n\n* 随着时间的推移,情境中的微小变化会导致行为的巨大变化.\n\n* 每一个习惯都是由提示引发的.我们更容易注意到鲜明的提示.\n\n* 让良好习惯的提示在你的环境中显而易见.\n\n* 渐渐地,你的习惯不再与单一的触发因素相关联,而是与这种行为周围的整个环境相关联.情境变成了提示.\n\n* 在新的环境中培养新的习惯更容易,因为你不会收到与旧习惯相关联的提示的干扰.\n\n#### 第7章 自我控制的秘密\n\n* 行为转变的第一定律的反面是让它脱离视线.\n\n* 习惯一旦养成,就不太可能被忘记.\n\n* 自控能力强的人尽量远离充满诱惑的环境.逃避诱惑比抗拒诱惑容易.\n\n* 戒除坏习惯最实用的方法之一是减少接触导致坏习惯的提示.\n\n* 自我控制只是权宜之计,而非长久之计.\n\n### 第二定律 让它有吸引力\n\n#### 第8章 怎样使习惯不可抗拒\n\n* 行为转变的第二定律是让它具有吸引力.\n\n* 机会越有吸引力,养成习惯的可能性就越大.\n\n* 习惯是多巴胺驱动的反馈回路.当多巴胺浓度上升时,我们采取行动的动机也会变得更强烈.\n\n* 正是对奖励的期待,而不是奖励本身,促使我们采取行动.预期越高,多巴胺峰值越大.\n\n* 喜好绑定是让习惯更具吸引力的一种方式.具体做法就是将你喜好的高频动作与你需要做的低频动作搭配在一起.\n\n* 习惯叠加+绑定喜好公式的表述如下\n    1. 继[当前习惯]之后,我将[我需要的习惯].\n    2. 继[我需要的习惯]之后,我将[我想要的习惯].\n\n#### 第9章 在习惯形成中亲友所起的作用\n\n* 我们生活的文化环境决定着哪些行为对我们有.利\n\n* 我们倾向于培养被我们的文化推崇的习惯,因为我们强烈地渴望融入并属于这个部落.\n\n* 为了培养更好的习惯,你能做得最有效的事情之一是加入一种文化,在这种文化中\n    1. 你想要的行为是正常的行为,\n    2. 你已经和这个群体有一些共同之处.\n\n* 部落的正常行为往往压倒个人期望的行为.大多数时候,我们宁愿跟众人一起犯错,也不愿特立独行坚持真理.\n\n* 如果一个行为能为我们赢得认可、尊重和赞扬,我们就会认为它很有吸引力.\n\n#### 第10章 如何找到并消除你坏习惯的根源\n\n* 行为转变的第二定律的反用是让它缺乏吸引力.\n\n* 每种行为都有表层的渴求和更深层的动机.\n\n* 你的习惯是解决古老欲望的现代方法.\n\n* 你习惯的原因实际上是它们之前的预测.这种预测会产生一种感觉.\n\n* 强调避免坏习惯所换来的好处,让坏习惯不再有吸引力.\n\n* 当我们将习惯与积极的感受相关联,习惯就有了吸引力;反之,则没有吸引力.在开始培养难度较大的习惯之前,先做些你喜欢的事情来创造一种激励仪式.\n\n### 第三定律 让它简便易行\n\n#### 第11章 慢步前行,但绝不后退\n\n* 行为转变的第三定律是让它简便易行.\n\n* 最有效的学习形式是付诸实践,而不是纸上谈兵.\n\n* 专注于采取行动,而不只是酝酿行动.\n\n* 习惯的形成是一个行为通过重复逐渐变得更加自动化的过程.\n\n* 习惯的培养不在于时间长短,而在于重复的次数.\n\n#### 第12章 最省力法则\n\n* 人类行为遵循最省力法则.我们天然地倾向于付出最少工作量的选择.\n\n* 创造一个环境,尽可能让人们便于做正确的事.\n\n* 降低与良好行为相关的阻力.阻力小,习惯就容易养成.\n\n* 增加与不良行为相关的阻力.阻力大,习惯就难以养成.\n\n* 预备好你的环境,使未来的行动更容易.\n\n#### 第13章 怎么利用两分钟规则停止拖延\n\n* 习惯可以在几秒钟内完成,但会持续影响你在接下来的几分钟或几个小时的行为.\n\n* 许多习惯发生在决定性的时刻,每时每刻的选择就像岔路口,你的选择最终会导致卓有成效,或者一事无成的一天.\n\n* 两分钟规则规定:\"当你开始培养一种新习惯时,它所用时间不应超过2分钟.\"\n\n* 一种程序的开始阶段越是仪式化,你就越有可能进入做大事所需的注意力高度集中的状态.\n\n* 习惯优化前先要实现标准化.你不能改善一个不存在的习惯.\n\n#### 第14章 怎样让好习惯不可避免,坏习惯难以养成\n\n* 行为转变第三定律的反面就是让它难以施行.\n\n* 承诺机制是你当前做出的一个选择,它锁定了未来更好的行为.\n\n* 锁定未来行为的终极途径是自动化你的习惯.\n\n* 一次性选择,比如买张好床垫或加入自动储蓄计划,是一种单次行动,可以让你的未来习惯自动化,并随着时间的推移带来越来越多的回报.\n\n* 使用技术自动化你的习惯是保证正确行为的最可靠和有效的途径.\n","source":"_posts/掌握习惯-原子习惯-细微改变带来巨大成就的实证法则.md","raw":"---\ntitle: 掌握习惯--原子习惯:细微改变带来巨大成就的实证法则\ndate: 2020-03-09 15:26:04\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 习惯\n---\n这本书是一个B站up主 ElenaLin_青青 在一期视频中推荐,趁着最近还没有复工就来看看了.\n<!--more-->\n\n### 基本原理 点滴变化何以意义重大\n\n#### 第1章 微习惯的惊人力量\n\n* 习惯是自我提高的复利.从长远来看,每天进步1%的效果不容小觑.\n\n* 习惯是把双刃剑.它们可能对你有利,也可能对你不利,这就是为什么理解细节至关重要.\n\n* 在你越过临界点之前,细微的变化似乎没起任何作用.这是个日积月累、潜移默化的过程,最终的重大突破迟迟不到,考验着你的耐心.\n\n* 微习惯是个小习惯,是更大系统的一部分.正如原子是分子的组成部分一样,微习惯也是重大成效的组成部分.\n\n* 如果你想要的更好的结果,那就别再设定目标,转而全力关注你的体系.\n\n* 不求拔高你的目标,但求落实你的体系.\n\n#### 第2章 你的习惯如何塑造你的身份(反之亦然)\n\n* 变化有三个层次:结果变化、过程变成和身份变化.\n\n* 改变习惯的最有效方法不是关注你想要达到的目标,而是你想要成为谁.\n\n* 你的身份来自你的习惯.每个行动都是你在投票给你想成为的人.\n\n* 要想使自己做到最好,你需要持续编辑你的信念,升级和扩展你的身份.\n\n* 习惯至关重要的真正原因不是因为它们能带给你更好的结果(尽管他们能做到这一点),而是因为它们能改变你对自己抱有的信念.\n\n#### 第3章 培养良好习惯的四步法\n\n* 习惯是一种行为,因为重复的次数已经足够多,便可以自然而然地出现.\n\n* 习惯的最终目的是用尽可能少的精力和努力来解决生活中的问题.\n\n* 任何习惯都可以分解成一个反馈循环,它包括四个步骤:提示、渴求、反应和奖励.\n\n* 行为转变的四大定律是一套我们可以用来培养好习惯的简单规则.它们是:\n    1. 让它显而易见;\n    2. 让它有吸引力;\n    3. 让它简便易行;\n    4. 让它令人愉悦.\n\n### 第一定律 让它显而易见\n\n#### 第4章 看着不对劲儿的那个人\n\n* 有了足够的练习,你的大脑会不假思索地拾取预测特定结果的提示.\n\n* 一旦习惯成自然,我们就不再关注自己在做什么.\n\n* 行为转变的过程总是始于自觉.在你想改变习惯之前,你需要首先了解它.\n\n* 通过说出你的行动,指差确认将你的意识程度从下意识的习惯状态提升到警觉的水平.\n\n* 习惯积分卡是个简单的练习,你可以用它来深入了解你的行为.\n\n#### 第5章 培养新习惯的最佳方式\n\n* 行为转变的第一定律是让它显而易见.\n\n* 两个最常见的提示是时间和地点.\n\n* 创建执行意图是一种策略,你可以用它将新习惯与特定的时间和地点整合.\n\n* 执行意图的公式是:我将于[时间]在[地点][行为].\n\n* 习惯叠加是一种策略,你可以用它来将新习惯与当前习惯整合.\n\n* 习惯叠加的公式是:继[当前习惯]之后,我将[新习惯].\n\n#### 第6章 原动力被高估,环境往往更重要\n\n* 随着时间的推移,情境中的微小变化会导致行为的巨大变化.\n\n* 每一个习惯都是由提示引发的.我们更容易注意到鲜明的提示.\n\n* 让良好习惯的提示在你的环境中显而易见.\n\n* 渐渐地,你的习惯不再与单一的触发因素相关联,而是与这种行为周围的整个环境相关联.情境变成了提示.\n\n* 在新的环境中培养新的习惯更容易,因为你不会收到与旧习惯相关联的提示的干扰.\n\n#### 第7章 自我控制的秘密\n\n* 行为转变的第一定律的反面是让它脱离视线.\n\n* 习惯一旦养成,就不太可能被忘记.\n\n* 自控能力强的人尽量远离充满诱惑的环境.逃避诱惑比抗拒诱惑容易.\n\n* 戒除坏习惯最实用的方法之一是减少接触导致坏习惯的提示.\n\n* 自我控制只是权宜之计,而非长久之计.\n\n### 第二定律 让它有吸引力\n\n#### 第8章 怎样使习惯不可抗拒\n\n* 行为转变的第二定律是让它具有吸引力.\n\n* 机会越有吸引力,养成习惯的可能性就越大.\n\n* 习惯是多巴胺驱动的反馈回路.当多巴胺浓度上升时,我们采取行动的动机也会变得更强烈.\n\n* 正是对奖励的期待,而不是奖励本身,促使我们采取行动.预期越高,多巴胺峰值越大.\n\n* 喜好绑定是让习惯更具吸引力的一种方式.具体做法就是将你喜好的高频动作与你需要做的低频动作搭配在一起.\n\n* 习惯叠加+绑定喜好公式的表述如下\n    1. 继[当前习惯]之后,我将[我需要的习惯].\n    2. 继[我需要的习惯]之后,我将[我想要的习惯].\n\n#### 第9章 在习惯形成中亲友所起的作用\n\n* 我们生活的文化环境决定着哪些行为对我们有.利\n\n* 我们倾向于培养被我们的文化推崇的习惯,因为我们强烈地渴望融入并属于这个部落.\n\n* 为了培养更好的习惯,你能做得最有效的事情之一是加入一种文化,在这种文化中\n    1. 你想要的行为是正常的行为,\n    2. 你已经和这个群体有一些共同之处.\n\n* 部落的正常行为往往压倒个人期望的行为.大多数时候,我们宁愿跟众人一起犯错,也不愿特立独行坚持真理.\n\n* 如果一个行为能为我们赢得认可、尊重和赞扬,我们就会认为它很有吸引力.\n\n#### 第10章 如何找到并消除你坏习惯的根源\n\n* 行为转变的第二定律的反用是让它缺乏吸引力.\n\n* 每种行为都有表层的渴求和更深层的动机.\n\n* 你的习惯是解决古老欲望的现代方法.\n\n* 你习惯的原因实际上是它们之前的预测.这种预测会产生一种感觉.\n\n* 强调避免坏习惯所换来的好处,让坏习惯不再有吸引力.\n\n* 当我们将习惯与积极的感受相关联,习惯就有了吸引力;反之,则没有吸引力.在开始培养难度较大的习惯之前,先做些你喜欢的事情来创造一种激励仪式.\n\n### 第三定律 让它简便易行\n\n#### 第11章 慢步前行,但绝不后退\n\n* 行为转变的第三定律是让它简便易行.\n\n* 最有效的学习形式是付诸实践,而不是纸上谈兵.\n\n* 专注于采取行动,而不只是酝酿行动.\n\n* 习惯的形成是一个行为通过重复逐渐变得更加自动化的过程.\n\n* 习惯的培养不在于时间长短,而在于重复的次数.\n\n#### 第12章 最省力法则\n\n* 人类行为遵循最省力法则.我们天然地倾向于付出最少工作量的选择.\n\n* 创造一个环境,尽可能让人们便于做正确的事.\n\n* 降低与良好行为相关的阻力.阻力小,习惯就容易养成.\n\n* 增加与不良行为相关的阻力.阻力大,习惯就难以养成.\n\n* 预备好你的环境,使未来的行动更容易.\n\n#### 第13章 怎么利用两分钟规则停止拖延\n\n* 习惯可以在几秒钟内完成,但会持续影响你在接下来的几分钟或几个小时的行为.\n\n* 许多习惯发生在决定性的时刻,每时每刻的选择就像岔路口,你的选择最终会导致卓有成效,或者一事无成的一天.\n\n* 两分钟规则规定:\"当你开始培养一种新习惯时,它所用时间不应超过2分钟.\"\n\n* 一种程序的开始阶段越是仪式化,你就越有可能进入做大事所需的注意力高度集中的状态.\n\n* 习惯优化前先要实现标准化.你不能改善一个不存在的习惯.\n\n#### 第14章 怎样让好习惯不可避免,坏习惯难以养成\n\n* 行为转变第三定律的反面就是让它难以施行.\n\n* 承诺机制是你当前做出的一个选择,它锁定了未来更好的行为.\n\n* 锁定未来行为的终极途径是自动化你的习惯.\n\n* 一次性选择,比如买张好床垫或加入自动储蓄计划,是一种单次行动,可以让你的未来习惯自动化,并随着时间的推移带来越来越多的回报.\n\n* 使用技术自动化你的习惯是保证正确行为的最可靠和有效的途径.\n","slug":"掌握习惯-原子习惯-细微改变带来巨大成就的实证法则","published":1,"updated":"2021-03-30T03:24:16.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx13005wvcua4u5cg5za","content":"<p>这本书是一个B站up主 ElenaLin_青青 在一期视频中推荐,趁着最近还没有复工就来看看了.</p>\n<span id=\"more\"></span>\n\n<h3 id=\"基本原理-点滴变化何以意义重大\"><a href=\"#基本原理-点滴变化何以意义重大\" class=\"headerlink\" title=\"基本原理 点滴变化何以意义重大\"></a>基本原理 点滴变化何以意义重大</h3><h4 id=\"第1章-微习惯的惊人力量\"><a href=\"#第1章-微习惯的惊人力量\" class=\"headerlink\" title=\"第1章 微习惯的惊人力量\"></a>第1章 微习惯的惊人力量</h4><ul>\n<li><p>习惯是自我提高的复利.从长远来看,每天进步1%的效果不容小觑.</p>\n</li>\n<li><p>习惯是把双刃剑.它们可能对你有利,也可能对你不利,这就是为什么理解细节至关重要.</p>\n</li>\n<li><p>在你越过临界点之前,细微的变化似乎没起任何作用.这是个日积月累、潜移默化的过程,最终的重大突破迟迟不到,考验着你的耐心.</p>\n</li>\n<li><p>微习惯是个小习惯,是更大系统的一部分.正如原子是分子的组成部分一样,微习惯也是重大成效的组成部分.</p>\n</li>\n<li><p>如果你想要的更好的结果,那就别再设定目标,转而全力关注你的体系.</p>\n</li>\n<li><p>不求拔高你的目标,但求落实你的体系.</p>\n</li>\n</ul>\n<h4 id=\"第2章-你的习惯如何塑造你的身份-反之亦然\"><a href=\"#第2章-你的习惯如何塑造你的身份-反之亦然\" class=\"headerlink\" title=\"第2章 你的习惯如何塑造你的身份(反之亦然)\"></a>第2章 你的习惯如何塑造你的身份(反之亦然)</h4><ul>\n<li><p>变化有三个层次:结果变化、过程变成和身份变化.</p>\n</li>\n<li><p>改变习惯的最有效方法不是关注你想要达到的目标,而是你想要成为谁.</p>\n</li>\n<li><p>你的身份来自你的习惯.每个行动都是你在投票给你想成为的人.</p>\n</li>\n<li><p>要想使自己做到最好,你需要持续编辑你的信念,升级和扩展你的身份.</p>\n</li>\n<li><p>习惯至关重要的真正原因不是因为它们能带给你更好的结果(尽管他们能做到这一点),而是因为它们能改变你对自己抱有的信念.</p>\n</li>\n</ul>\n<h4 id=\"第3章-培养良好习惯的四步法\"><a href=\"#第3章-培养良好习惯的四步法\" class=\"headerlink\" title=\"第3章 培养良好习惯的四步法\"></a>第3章 培养良好习惯的四步法</h4><ul>\n<li><p>习惯是一种行为,因为重复的次数已经足够多,便可以自然而然地出现.</p>\n</li>\n<li><p>习惯的最终目的是用尽可能少的精力和努力来解决生活中的问题.</p>\n</li>\n<li><p>任何习惯都可以分解成一个反馈循环,它包括四个步骤:提示、渴求、反应和奖励.</p>\n</li>\n<li><p>行为转变的四大定律是一套我们可以用来培养好习惯的简单规则.它们是:</p>\n<ol>\n<li>让它显而易见;</li>\n<li>让它有吸引力;</li>\n<li>让它简便易行;</li>\n<li>让它令人愉悦.</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"第一定律-让它显而易见\"><a href=\"#第一定律-让它显而易见\" class=\"headerlink\" title=\"第一定律 让它显而易见\"></a>第一定律 让它显而易见</h3><h4 id=\"第4章-看着不对劲儿的那个人\"><a href=\"#第4章-看着不对劲儿的那个人\" class=\"headerlink\" title=\"第4章 看着不对劲儿的那个人\"></a>第4章 看着不对劲儿的那个人</h4><ul>\n<li><p>有了足够的练习,你的大脑会不假思索地拾取预测特定结果的提示.</p>\n</li>\n<li><p>一旦习惯成自然,我们就不再关注自己在做什么.</p>\n</li>\n<li><p>行为转变的过程总是始于自觉.在你想改变习惯之前,你需要首先了解它.</p>\n</li>\n<li><p>通过说出你的行动,指差确认将你的意识程度从下意识的习惯状态提升到警觉的水平.</p>\n</li>\n<li><p>习惯积分卡是个简单的练习,你可以用它来深入了解你的行为.</p>\n</li>\n</ul>\n<h4 id=\"第5章-培养新习惯的最佳方式\"><a href=\"#第5章-培养新习惯的最佳方式\" class=\"headerlink\" title=\"第5章 培养新习惯的最佳方式\"></a>第5章 培养新习惯的最佳方式</h4><ul>\n<li><p>行为转变的第一定律是让它显而易见.</p>\n</li>\n<li><p>两个最常见的提示是时间和地点.</p>\n</li>\n<li><p>创建执行意图是一种策略,你可以用它将新习惯与特定的时间和地点整合.</p>\n</li>\n<li><p>执行意图的公式是:我将于[时间]在[地点][行为].</p>\n</li>\n<li><p>习惯叠加是一种策略,你可以用它来将新习惯与当前习惯整合.</p>\n</li>\n<li><p>习惯叠加的公式是:继[当前习惯]之后,我将[新习惯].</p>\n</li>\n</ul>\n<h4 id=\"第6章-原动力被高估-环境往往更重要\"><a href=\"#第6章-原动力被高估-环境往往更重要\" class=\"headerlink\" title=\"第6章 原动力被高估,环境往往更重要\"></a>第6章 原动力被高估,环境往往更重要</h4><ul>\n<li><p>随着时间的推移,情境中的微小变化会导致行为的巨大变化.</p>\n</li>\n<li><p>每一个习惯都是由提示引发的.我们更容易注意到鲜明的提示.</p>\n</li>\n<li><p>让良好习惯的提示在你的环境中显而易见.</p>\n</li>\n<li><p>渐渐地,你的习惯不再与单一的触发因素相关联,而是与这种行为周围的整个环境相关联.情境变成了提示.</p>\n</li>\n<li><p>在新的环境中培养新的习惯更容易,因为你不会收到与旧习惯相关联的提示的干扰.</p>\n</li>\n</ul>\n<h4 id=\"第7章-自我控制的秘密\"><a href=\"#第7章-自我控制的秘密\" class=\"headerlink\" title=\"第7章 自我控制的秘密\"></a>第7章 自我控制的秘密</h4><ul>\n<li><p>行为转变的第一定律的反面是让它脱离视线.</p>\n</li>\n<li><p>习惯一旦养成,就不太可能被忘记.</p>\n</li>\n<li><p>自控能力强的人尽量远离充满诱惑的环境.逃避诱惑比抗拒诱惑容易.</p>\n</li>\n<li><p>戒除坏习惯最实用的方法之一是减少接触导致坏习惯的提示.</p>\n</li>\n<li><p>自我控制只是权宜之计,而非长久之计.</p>\n</li>\n</ul>\n<h3 id=\"第二定律-让它有吸引力\"><a href=\"#第二定律-让它有吸引力\" class=\"headerlink\" title=\"第二定律 让它有吸引力\"></a>第二定律 让它有吸引力</h3><h4 id=\"第8章-怎样使习惯不可抗拒\"><a href=\"#第8章-怎样使习惯不可抗拒\" class=\"headerlink\" title=\"第8章 怎样使习惯不可抗拒\"></a>第8章 怎样使习惯不可抗拒</h4><ul>\n<li><p>行为转变的第二定律是让它具有吸引力.</p>\n</li>\n<li><p>机会越有吸引力,养成习惯的可能性就越大.</p>\n</li>\n<li><p>习惯是多巴胺驱动的反馈回路.当多巴胺浓度上升时,我们采取行动的动机也会变得更强烈.</p>\n</li>\n<li><p>正是对奖励的期待,而不是奖励本身,促使我们采取行动.预期越高,多巴胺峰值越大.</p>\n</li>\n<li><p>喜好绑定是让习惯更具吸引力的一种方式.具体做法就是将你喜好的高频动作与你需要做的低频动作搭配在一起.</p>\n</li>\n<li><p>习惯叠加+绑定喜好公式的表述如下</p>\n<ol>\n<li>继[当前习惯]之后,我将[我需要的习惯].</li>\n<li>继[我需要的习惯]之后,我将[我想要的习惯].</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"第9章-在习惯形成中亲友所起的作用\"><a href=\"#第9章-在习惯形成中亲友所起的作用\" class=\"headerlink\" title=\"第9章 在习惯形成中亲友所起的作用\"></a>第9章 在习惯形成中亲友所起的作用</h4><ul>\n<li><p>我们生活的文化环境决定着哪些行为对我们有.利</p>\n</li>\n<li><p>我们倾向于培养被我们的文化推崇的习惯,因为我们强烈地渴望融入并属于这个部落.</p>\n</li>\n<li><p>为了培养更好的习惯,你能做得最有效的事情之一是加入一种文化,在这种文化中</p>\n<ol>\n<li>你想要的行为是正常的行为,</li>\n<li>你已经和这个群体有一些共同之处.</li>\n</ol>\n</li>\n<li><p>部落的正常行为往往压倒个人期望的行为.大多数时候,我们宁愿跟众人一起犯错,也不愿特立独行坚持真理.</p>\n</li>\n<li><p>如果一个行为能为我们赢得认可、尊重和赞扬,我们就会认为它很有吸引力.</p>\n</li>\n</ul>\n<h4 id=\"第10章-如何找到并消除你坏习惯的根源\"><a href=\"#第10章-如何找到并消除你坏习惯的根源\" class=\"headerlink\" title=\"第10章 如何找到并消除你坏习惯的根源\"></a>第10章 如何找到并消除你坏习惯的根源</h4><ul>\n<li><p>行为转变的第二定律的反用是让它缺乏吸引力.</p>\n</li>\n<li><p>每种行为都有表层的渴求和更深层的动机.</p>\n</li>\n<li><p>你的习惯是解决古老欲望的现代方法.</p>\n</li>\n<li><p>你习惯的原因实际上是它们之前的预测.这种预测会产生一种感觉.</p>\n</li>\n<li><p>强调避免坏习惯所换来的好处,让坏习惯不再有吸引力.</p>\n</li>\n<li><p>当我们将习惯与积极的感受相关联,习惯就有了吸引力;反之,则没有吸引力.在开始培养难度较大的习惯之前,先做些你喜欢的事情来创造一种激励仪式.</p>\n</li>\n</ul>\n<h3 id=\"第三定律-让它简便易行\"><a href=\"#第三定律-让它简便易行\" class=\"headerlink\" title=\"第三定律 让它简便易行\"></a>第三定律 让它简便易行</h3><h4 id=\"第11章-慢步前行-但绝不后退\"><a href=\"#第11章-慢步前行-但绝不后退\" class=\"headerlink\" title=\"第11章 慢步前行,但绝不后退\"></a>第11章 慢步前行,但绝不后退</h4><ul>\n<li><p>行为转变的第三定律是让它简便易行.</p>\n</li>\n<li><p>最有效的学习形式是付诸实践,而不是纸上谈兵.</p>\n</li>\n<li><p>专注于采取行动,而不只是酝酿行动.</p>\n</li>\n<li><p>习惯的形成是一个行为通过重复逐渐变得更加自动化的过程.</p>\n</li>\n<li><p>习惯的培养不在于时间长短,而在于重复的次数.</p>\n</li>\n</ul>\n<h4 id=\"第12章-最省力法则\"><a href=\"#第12章-最省力法则\" class=\"headerlink\" title=\"第12章 最省力法则\"></a>第12章 最省力法则</h4><ul>\n<li><p>人类行为遵循最省力法则.我们天然地倾向于付出最少工作量的选择.</p>\n</li>\n<li><p>创造一个环境,尽可能让人们便于做正确的事.</p>\n</li>\n<li><p>降低与良好行为相关的阻力.阻力小,习惯就容易养成.</p>\n</li>\n<li><p>增加与不良行为相关的阻力.阻力大,习惯就难以养成.</p>\n</li>\n<li><p>预备好你的环境,使未来的行动更容易.</p>\n</li>\n</ul>\n<h4 id=\"第13章-怎么利用两分钟规则停止拖延\"><a href=\"#第13章-怎么利用两分钟规则停止拖延\" class=\"headerlink\" title=\"第13章 怎么利用两分钟规则停止拖延\"></a>第13章 怎么利用两分钟规则停止拖延</h4><ul>\n<li><p>习惯可以在几秒钟内完成,但会持续影响你在接下来的几分钟或几个小时的行为.</p>\n</li>\n<li><p>许多习惯发生在决定性的时刻,每时每刻的选择就像岔路口,你的选择最终会导致卓有成效,或者一事无成的一天.</p>\n</li>\n<li><p>两分钟规则规定:”当你开始培养一种新习惯时,它所用时间不应超过2分钟.”</p>\n</li>\n<li><p>一种程序的开始阶段越是仪式化,你就越有可能进入做大事所需的注意力高度集中的状态.</p>\n</li>\n<li><p>习惯优化前先要实现标准化.你不能改善一个不存在的习惯.</p>\n</li>\n</ul>\n<h4 id=\"第14章-怎样让好习惯不可避免-坏习惯难以养成\"><a href=\"#第14章-怎样让好习惯不可避免-坏习惯难以养成\" class=\"headerlink\" title=\"第14章 怎样让好习惯不可避免,坏习惯难以养成\"></a>第14章 怎样让好习惯不可避免,坏习惯难以养成</h4><ul>\n<li><p>行为转变第三定律的反面就是让它难以施行.</p>\n</li>\n<li><p>承诺机制是你当前做出的一个选择,它锁定了未来更好的行为.</p>\n</li>\n<li><p>锁定未来行为的终极途径是自动化你的习惯.</p>\n</li>\n<li><p>一次性选择,比如买张好床垫或加入自动储蓄计划,是一种单次行动,可以让你的未来习惯自动化,并随着时间的推移带来越来越多的回报.</p>\n</li>\n<li><p>使用技术自动化你的习惯是保证正确行为的最可靠和有效的途径.</p>\n</li>\n</ul>\n","site":{"data":{}},"length":2618,"excerpt":"<p>这本书是一个B站up主 ElenaLin_青青 在一期视频中推荐,趁着最近还没有复工就来看看了.</p>","more":"<h3 id=\"基本原理-点滴变化何以意义重大\"><a href=\"#基本原理-点滴变化何以意义重大\" class=\"headerlink\" title=\"基本原理 点滴变化何以意义重大\"></a>基本原理 点滴变化何以意义重大</h3><h4 id=\"第1章-微习惯的惊人力量\"><a href=\"#第1章-微习惯的惊人力量\" class=\"headerlink\" title=\"第1章 微习惯的惊人力量\"></a>第1章 微习惯的惊人力量</h4><ul>\n<li><p>习惯是自我提高的复利.从长远来看,每天进步1%的效果不容小觑.</p>\n</li>\n<li><p>习惯是把双刃剑.它们可能对你有利,也可能对你不利,这就是为什么理解细节至关重要.</p>\n</li>\n<li><p>在你越过临界点之前,细微的变化似乎没起任何作用.这是个日积月累、潜移默化的过程,最终的重大突破迟迟不到,考验着你的耐心.</p>\n</li>\n<li><p>微习惯是个小习惯,是更大系统的一部分.正如原子是分子的组成部分一样,微习惯也是重大成效的组成部分.</p>\n</li>\n<li><p>如果你想要的更好的结果,那就别再设定目标,转而全力关注你的体系.</p>\n</li>\n<li><p>不求拔高你的目标,但求落实你的体系.</p>\n</li>\n</ul>\n<h4 id=\"第2章-你的习惯如何塑造你的身份-反之亦然\"><a href=\"#第2章-你的习惯如何塑造你的身份-反之亦然\" class=\"headerlink\" title=\"第2章 你的习惯如何塑造你的身份(反之亦然)\"></a>第2章 你的习惯如何塑造你的身份(反之亦然)</h4><ul>\n<li><p>变化有三个层次:结果变化、过程变成和身份变化.</p>\n</li>\n<li><p>改变习惯的最有效方法不是关注你想要达到的目标,而是你想要成为谁.</p>\n</li>\n<li><p>你的身份来自你的习惯.每个行动都是你在投票给你想成为的人.</p>\n</li>\n<li><p>要想使自己做到最好,你需要持续编辑你的信念,升级和扩展你的身份.</p>\n</li>\n<li><p>习惯至关重要的真正原因不是因为它们能带给你更好的结果(尽管他们能做到这一点),而是因为它们能改变你对自己抱有的信念.</p>\n</li>\n</ul>\n<h4 id=\"第3章-培养良好习惯的四步法\"><a href=\"#第3章-培养良好习惯的四步法\" class=\"headerlink\" title=\"第3章 培养良好习惯的四步法\"></a>第3章 培养良好习惯的四步法</h4><ul>\n<li><p>习惯是一种行为,因为重复的次数已经足够多,便可以自然而然地出现.</p>\n</li>\n<li><p>习惯的最终目的是用尽可能少的精力和努力来解决生活中的问题.</p>\n</li>\n<li><p>任何习惯都可以分解成一个反馈循环,它包括四个步骤:提示、渴求、反应和奖励.</p>\n</li>\n<li><p>行为转变的四大定律是一套我们可以用来培养好习惯的简单规则.它们是:</p>\n<ol>\n<li>让它显而易见;</li>\n<li>让它有吸引力;</li>\n<li>让它简便易行;</li>\n<li>让它令人愉悦.</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"第一定律-让它显而易见\"><a href=\"#第一定律-让它显而易见\" class=\"headerlink\" title=\"第一定律 让它显而易见\"></a>第一定律 让它显而易见</h3><h4 id=\"第4章-看着不对劲儿的那个人\"><a href=\"#第4章-看着不对劲儿的那个人\" class=\"headerlink\" title=\"第4章 看着不对劲儿的那个人\"></a>第4章 看着不对劲儿的那个人</h4><ul>\n<li><p>有了足够的练习,你的大脑会不假思索地拾取预测特定结果的提示.</p>\n</li>\n<li><p>一旦习惯成自然,我们就不再关注自己在做什么.</p>\n</li>\n<li><p>行为转变的过程总是始于自觉.在你想改变习惯之前,你需要首先了解它.</p>\n</li>\n<li><p>通过说出你的行动,指差确认将你的意识程度从下意识的习惯状态提升到警觉的水平.</p>\n</li>\n<li><p>习惯积分卡是个简单的练习,你可以用它来深入了解你的行为.</p>\n</li>\n</ul>\n<h4 id=\"第5章-培养新习惯的最佳方式\"><a href=\"#第5章-培养新习惯的最佳方式\" class=\"headerlink\" title=\"第5章 培养新习惯的最佳方式\"></a>第5章 培养新习惯的最佳方式</h4><ul>\n<li><p>行为转变的第一定律是让它显而易见.</p>\n</li>\n<li><p>两个最常见的提示是时间和地点.</p>\n</li>\n<li><p>创建执行意图是一种策略,你可以用它将新习惯与特定的时间和地点整合.</p>\n</li>\n<li><p>执行意图的公式是:我将于[时间]在[地点][行为].</p>\n</li>\n<li><p>习惯叠加是一种策略,你可以用它来将新习惯与当前习惯整合.</p>\n</li>\n<li><p>习惯叠加的公式是:继[当前习惯]之后,我将[新习惯].</p>\n</li>\n</ul>\n<h4 id=\"第6章-原动力被高估-环境往往更重要\"><a href=\"#第6章-原动力被高估-环境往往更重要\" class=\"headerlink\" title=\"第6章 原动力被高估,环境往往更重要\"></a>第6章 原动力被高估,环境往往更重要</h4><ul>\n<li><p>随着时间的推移,情境中的微小变化会导致行为的巨大变化.</p>\n</li>\n<li><p>每一个习惯都是由提示引发的.我们更容易注意到鲜明的提示.</p>\n</li>\n<li><p>让良好习惯的提示在你的环境中显而易见.</p>\n</li>\n<li><p>渐渐地,你的习惯不再与单一的触发因素相关联,而是与这种行为周围的整个环境相关联.情境变成了提示.</p>\n</li>\n<li><p>在新的环境中培养新的习惯更容易,因为你不会收到与旧习惯相关联的提示的干扰.</p>\n</li>\n</ul>\n<h4 id=\"第7章-自我控制的秘密\"><a href=\"#第7章-自我控制的秘密\" class=\"headerlink\" title=\"第7章 自我控制的秘密\"></a>第7章 自我控制的秘密</h4><ul>\n<li><p>行为转变的第一定律的反面是让它脱离视线.</p>\n</li>\n<li><p>习惯一旦养成,就不太可能被忘记.</p>\n</li>\n<li><p>自控能力强的人尽量远离充满诱惑的环境.逃避诱惑比抗拒诱惑容易.</p>\n</li>\n<li><p>戒除坏习惯最实用的方法之一是减少接触导致坏习惯的提示.</p>\n</li>\n<li><p>自我控制只是权宜之计,而非长久之计.</p>\n</li>\n</ul>\n<h3 id=\"第二定律-让它有吸引力\"><a href=\"#第二定律-让它有吸引力\" class=\"headerlink\" title=\"第二定律 让它有吸引力\"></a>第二定律 让它有吸引力</h3><h4 id=\"第8章-怎样使习惯不可抗拒\"><a href=\"#第8章-怎样使习惯不可抗拒\" class=\"headerlink\" title=\"第8章 怎样使习惯不可抗拒\"></a>第8章 怎样使习惯不可抗拒</h4><ul>\n<li><p>行为转变的第二定律是让它具有吸引力.</p>\n</li>\n<li><p>机会越有吸引力,养成习惯的可能性就越大.</p>\n</li>\n<li><p>习惯是多巴胺驱动的反馈回路.当多巴胺浓度上升时,我们采取行动的动机也会变得更强烈.</p>\n</li>\n<li><p>正是对奖励的期待,而不是奖励本身,促使我们采取行动.预期越高,多巴胺峰值越大.</p>\n</li>\n<li><p>喜好绑定是让习惯更具吸引力的一种方式.具体做法就是将你喜好的高频动作与你需要做的低频动作搭配在一起.</p>\n</li>\n<li><p>习惯叠加+绑定喜好公式的表述如下</p>\n<ol>\n<li>继[当前习惯]之后,我将[我需要的习惯].</li>\n<li>继[我需要的习惯]之后,我将[我想要的习惯].</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"第9章-在习惯形成中亲友所起的作用\"><a href=\"#第9章-在习惯形成中亲友所起的作用\" class=\"headerlink\" title=\"第9章 在习惯形成中亲友所起的作用\"></a>第9章 在习惯形成中亲友所起的作用</h4><ul>\n<li><p>我们生活的文化环境决定着哪些行为对我们有.利</p>\n</li>\n<li><p>我们倾向于培养被我们的文化推崇的习惯,因为我们强烈地渴望融入并属于这个部落.</p>\n</li>\n<li><p>为了培养更好的习惯,你能做得最有效的事情之一是加入一种文化,在这种文化中</p>\n<ol>\n<li>你想要的行为是正常的行为,</li>\n<li>你已经和这个群体有一些共同之处.</li>\n</ol>\n</li>\n<li><p>部落的正常行为往往压倒个人期望的行为.大多数时候,我们宁愿跟众人一起犯错,也不愿特立独行坚持真理.</p>\n</li>\n<li><p>如果一个行为能为我们赢得认可、尊重和赞扬,我们就会认为它很有吸引力.</p>\n</li>\n</ul>\n<h4 id=\"第10章-如何找到并消除你坏习惯的根源\"><a href=\"#第10章-如何找到并消除你坏习惯的根源\" class=\"headerlink\" title=\"第10章 如何找到并消除你坏习惯的根源\"></a>第10章 如何找到并消除你坏习惯的根源</h4><ul>\n<li><p>行为转变的第二定律的反用是让它缺乏吸引力.</p>\n</li>\n<li><p>每种行为都有表层的渴求和更深层的动机.</p>\n</li>\n<li><p>你的习惯是解决古老欲望的现代方法.</p>\n</li>\n<li><p>你习惯的原因实际上是它们之前的预测.这种预测会产生一种感觉.</p>\n</li>\n<li><p>强调避免坏习惯所换来的好处,让坏习惯不再有吸引力.</p>\n</li>\n<li><p>当我们将习惯与积极的感受相关联,习惯就有了吸引力;反之,则没有吸引力.在开始培养难度较大的习惯之前,先做些你喜欢的事情来创造一种激励仪式.</p>\n</li>\n</ul>\n<h3 id=\"第三定律-让它简便易行\"><a href=\"#第三定律-让它简便易行\" class=\"headerlink\" title=\"第三定律 让它简便易行\"></a>第三定律 让它简便易行</h3><h4 id=\"第11章-慢步前行-但绝不后退\"><a href=\"#第11章-慢步前行-但绝不后退\" class=\"headerlink\" title=\"第11章 慢步前行,但绝不后退\"></a>第11章 慢步前行,但绝不后退</h4><ul>\n<li><p>行为转变的第三定律是让它简便易行.</p>\n</li>\n<li><p>最有效的学习形式是付诸实践,而不是纸上谈兵.</p>\n</li>\n<li><p>专注于采取行动,而不只是酝酿行动.</p>\n</li>\n<li><p>习惯的形成是一个行为通过重复逐渐变得更加自动化的过程.</p>\n</li>\n<li><p>习惯的培养不在于时间长短,而在于重复的次数.</p>\n</li>\n</ul>\n<h4 id=\"第12章-最省力法则\"><a href=\"#第12章-最省力法则\" class=\"headerlink\" title=\"第12章 最省力法则\"></a>第12章 最省力法则</h4><ul>\n<li><p>人类行为遵循最省力法则.我们天然地倾向于付出最少工作量的选择.</p>\n</li>\n<li><p>创造一个环境,尽可能让人们便于做正确的事.</p>\n</li>\n<li><p>降低与良好行为相关的阻力.阻力小,习惯就容易养成.</p>\n</li>\n<li><p>增加与不良行为相关的阻力.阻力大,习惯就难以养成.</p>\n</li>\n<li><p>预备好你的环境,使未来的行动更容易.</p>\n</li>\n</ul>\n<h4 id=\"第13章-怎么利用两分钟规则停止拖延\"><a href=\"#第13章-怎么利用两分钟规则停止拖延\" class=\"headerlink\" title=\"第13章 怎么利用两分钟规则停止拖延\"></a>第13章 怎么利用两分钟规则停止拖延</h4><ul>\n<li><p>习惯可以在几秒钟内完成,但会持续影响你在接下来的几分钟或几个小时的行为.</p>\n</li>\n<li><p>许多习惯发生在决定性的时刻,每时每刻的选择就像岔路口,你的选择最终会导致卓有成效,或者一事无成的一天.</p>\n</li>\n<li><p>两分钟规则规定:”当你开始培养一种新习惯时,它所用时间不应超过2分钟.”</p>\n</li>\n<li><p>一种程序的开始阶段越是仪式化,你就越有可能进入做大事所需的注意力高度集中的状态.</p>\n</li>\n<li><p>习惯优化前先要实现标准化.你不能改善一个不存在的习惯.</p>\n</li>\n</ul>\n<h4 id=\"第14章-怎样让好习惯不可避免-坏习惯难以养成\"><a href=\"#第14章-怎样让好习惯不可避免-坏习惯难以养成\" class=\"headerlink\" title=\"第14章 怎样让好习惯不可避免,坏习惯难以养成\"></a>第14章 怎样让好习惯不可避免,坏习惯难以养成</h4><ul>\n<li><p>行为转变第三定律的反面就是让它难以施行.</p>\n</li>\n<li><p>承诺机制是你当前做出的一个选择,它锁定了未来更好的行为.</p>\n</li>\n<li><p>锁定未来行为的终极途径是自动化你的习惯.</p>\n</li>\n<li><p>一次性选择,比如买张好床垫或加入自动储蓄计划,是一种单次行动,可以让你的未来习惯自动化,并随着时间的推移带来越来越多的回报.</p>\n</li>\n<li><p>使用技术自动化你的习惯是保证正确行为的最可靠和有效的途径.</p>\n</li>\n</ul>"},{"title":"直觉泵-关于意义和内容思考工具(三)","date":"2020-01-08T15:02:50.000Z","_content":"\n今天要介绍剩下的关于意义和内容思考工具(近似算子、神奇组织、身陷机器人控制室).\n\n<!--more-->\n\n#### 近似算子  达尔文渐进主义的启示\n\n因为一旦要对各层级的功能运作做出分析或综合评价,我们就需要针对那个层级,追问着两个问题:它是什么?它都做些什么?\"它是什么\"是指其组成部分的结构组织,前提是这些组成部分都能如我们假设的那样发挥它们的功能.\"它能做些什么\"是指,它可以将一些近似认知的功能实现得很好,让我们能否在一个更高的水平上安心工作,因为我们相信脚下踩着的这块基石一定可以很好地发挥自己的功能、被很好地利用.\n\n在认知科学中,我们会将近似算子看作是达尔文进化论中渐进主义的一种平行理论.有细菌之前会先有近似细菌,有哺乳动物之前会先有近似哺乳动物,有狗之前也会先有近似狗的动物出现,如此等等.\n\n构成猿猴和苹果的基础成分都大同小异,不同的是这些成分的构造方式,还有各个层级的功能对它们的开发利用.\n\n我们从意向立场出发,开始追溯每一层级上近似理性行动者的信念和欲望,或者近似信念和近似欲望,从最简单的细菌到动物,从海星到天文学家,追溯组成大脑的识别、标记、比较和记忆回路,但即使追溯到人类这一层级,我们也没能明确地找到真正形成\"理解\"的那个点.\n\n#### 神奇组织  不要为逃避难题而求助于\"魔法\"\n\n神奇组织:神经组织中的动态属性可以利用某种科学无法解释的潜在力量,做出一些让你觉得神奇的事情.\n\n计算机在清楚解释食物方面扮演着非常重要的角色,不管是飓风、房地产泡沫、艾滋病病毒,还是人类意识,在理解事物时,我们有充足的理由要首先去开发它们的计算机模型.\n\n神奇组织这一概念作为一件思考工具,它的功能类似于警察的警棍:你拿警棍惩罚别人,警示他们不要使用不正当的理论.当然就像你可能滥用警棍一样,你也可能滥用这个概念.\n\n反对神奇组织的主要理由是:它提供给我们的事一种逃避问题的方法,而不是解决问题的方法,因为神奇组织预设了这是一个根本无法解决的神秘问题\n\n#### 身陷机器人控制室  初长成的大脑不是一块\"白板\"\n\n对于大脑来说,输入的信息是与输出相连接的,大脑本身就拥有一些能力,知道要去认识什么,知道怎样才能使各种连接变得更加合理.这项任务是提前完成了的.这也是以另外一种形式证实了那个广为人知的说法,初长成的大脑不是\"白板\"一块,它已然经历了自然选择的雕琢,自身体现着各式的偏好、预设和衔联,而且,有些合适的连接是提前内置的,无需标注.\n\n在理解产生之前,先要有一些不需要理解的能力出现,这是自然选择.自然选择的车轮滚滚向前,一路上造就出了无数精巧能干的事物,这个过程也不包含任何理解.\n\n我们成年人具有的那种理解能力是进化史近期才出现的一种景象,它是由一些结构组合生成,而这些结构所具有的能力也是由鱼或者蠕虫所有的那种类似理解力发展而来的.大部分时间里,这些解构发挥着应有的作用,但它们并不需要知道自己为什么会那样发挥作用.\n","source":"_posts/直觉泵-关于意义和内容思考工具(三).md","raw":"---\ntitle: 直觉泵-关于意义和内容思考工具(三)\ndate: 2020-01-08 23:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n\n今天要介绍剩下的关于意义和内容思考工具(近似算子、神奇组织、身陷机器人控制室).\n\n<!--more-->\n\n#### 近似算子  达尔文渐进主义的启示\n\n因为一旦要对各层级的功能运作做出分析或综合评价,我们就需要针对那个层级,追问着两个问题:它是什么?它都做些什么?\"它是什么\"是指其组成部分的结构组织,前提是这些组成部分都能如我们假设的那样发挥它们的功能.\"它能做些什么\"是指,它可以将一些近似认知的功能实现得很好,让我们能否在一个更高的水平上安心工作,因为我们相信脚下踩着的这块基石一定可以很好地发挥自己的功能、被很好地利用.\n\n在认知科学中,我们会将近似算子看作是达尔文进化论中渐进主义的一种平行理论.有细菌之前会先有近似细菌,有哺乳动物之前会先有近似哺乳动物,有狗之前也会先有近似狗的动物出现,如此等等.\n\n构成猿猴和苹果的基础成分都大同小异,不同的是这些成分的构造方式,还有各个层级的功能对它们的开发利用.\n\n我们从意向立场出发,开始追溯每一层级上近似理性行动者的信念和欲望,或者近似信念和近似欲望,从最简单的细菌到动物,从海星到天文学家,追溯组成大脑的识别、标记、比较和记忆回路,但即使追溯到人类这一层级,我们也没能明确地找到真正形成\"理解\"的那个点.\n\n#### 神奇组织  不要为逃避难题而求助于\"魔法\"\n\n神奇组织:神经组织中的动态属性可以利用某种科学无法解释的潜在力量,做出一些让你觉得神奇的事情.\n\n计算机在清楚解释食物方面扮演着非常重要的角色,不管是飓风、房地产泡沫、艾滋病病毒,还是人类意识,在理解事物时,我们有充足的理由要首先去开发它们的计算机模型.\n\n神奇组织这一概念作为一件思考工具,它的功能类似于警察的警棍:你拿警棍惩罚别人,警示他们不要使用不正当的理论.当然就像你可能滥用警棍一样,你也可能滥用这个概念.\n\n反对神奇组织的主要理由是:它提供给我们的事一种逃避问题的方法,而不是解决问题的方法,因为神奇组织预设了这是一个根本无法解决的神秘问题\n\n#### 身陷机器人控制室  初长成的大脑不是一块\"白板\"\n\n对于大脑来说,输入的信息是与输出相连接的,大脑本身就拥有一些能力,知道要去认识什么,知道怎样才能使各种连接变得更加合理.这项任务是提前完成了的.这也是以另外一种形式证实了那个广为人知的说法,初长成的大脑不是\"白板\"一块,它已然经历了自然选择的雕琢,自身体现着各式的偏好、预设和衔联,而且,有些合适的连接是提前内置的,无需标注.\n\n在理解产生之前,先要有一些不需要理解的能力出现,这是自然选择.自然选择的车轮滚滚向前,一路上造就出了无数精巧能干的事物,这个过程也不包含任何理解.\n\n我们成年人具有的那种理解能力是进化史近期才出现的一种景象,它是由一些结构组合生成,而这些结构所具有的能力也是由鱼或者蠕虫所有的那种类似理解力发展而来的.大部分时间里,这些解构发挥着应有的作用,但它们并不需要知道自己为什么会那样发挥作用.\n","slug":"直觉泵-关于意义和内容思考工具(三)","published":1,"updated":"2021-03-30T03:24:16.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx140060vcua3tiw1bhz","content":"<p>今天要介绍剩下的关于意义和内容思考工具(近似算子、神奇组织、身陷机器人控制室).</p>\n<span id=\"more\"></span>\n\n<h4 id=\"近似算子-达尔文渐进主义的启示\"><a href=\"#近似算子-达尔文渐进主义的启示\" class=\"headerlink\" title=\"近似算子  达尔文渐进主义的启示\"></a>近似算子  达尔文渐进主义的启示</h4><p>因为一旦要对各层级的功能运作做出分析或综合评价,我们就需要针对那个层级,追问着两个问题:它是什么?它都做些什么?”它是什么”是指其组成部分的结构组织,前提是这些组成部分都能如我们假设的那样发挥它们的功能.”它能做些什么”是指,它可以将一些近似认知的功能实现得很好,让我们能否在一个更高的水平上安心工作,因为我们相信脚下踩着的这块基石一定可以很好地发挥自己的功能、被很好地利用.</p>\n<p>在认知科学中,我们会将近似算子看作是达尔文进化论中渐进主义的一种平行理论.有细菌之前会先有近似细菌,有哺乳动物之前会先有近似哺乳动物,有狗之前也会先有近似狗的动物出现,如此等等.</p>\n<p>构成猿猴和苹果的基础成分都大同小异,不同的是这些成分的构造方式,还有各个层级的功能对它们的开发利用.</p>\n<p>我们从意向立场出发,开始追溯每一层级上近似理性行动者的信念和欲望,或者近似信念和近似欲望,从最简单的细菌到动物,从海星到天文学家,追溯组成大脑的识别、标记、比较和记忆回路,但即使追溯到人类这一层级,我们也没能明确地找到真正形成”理解”的那个点.</p>\n<h4 id=\"神奇组织-不要为逃避难题而求助于”魔法”\"><a href=\"#神奇组织-不要为逃避难题而求助于”魔法”\" class=\"headerlink\" title=\"神奇组织  不要为逃避难题而求助于”魔法”\"></a>神奇组织  不要为逃避难题而求助于”魔法”</h4><p>神奇组织:神经组织中的动态属性可以利用某种科学无法解释的潜在力量,做出一些让你觉得神奇的事情.</p>\n<p>计算机在清楚解释食物方面扮演着非常重要的角色,不管是飓风、房地产泡沫、艾滋病病毒,还是人类意识,在理解事物时,我们有充足的理由要首先去开发它们的计算机模型.</p>\n<p>神奇组织这一概念作为一件思考工具,它的功能类似于警察的警棍:你拿警棍惩罚别人,警示他们不要使用不正当的理论.当然就像你可能滥用警棍一样,你也可能滥用这个概念.</p>\n<p>反对神奇组织的主要理由是:它提供给我们的事一种逃避问题的方法,而不是解决问题的方法,因为神奇组织预设了这是一个根本无法解决的神秘问题</p>\n<h4 id=\"身陷机器人控制室-初长成的大脑不是一块”白板”\"><a href=\"#身陷机器人控制室-初长成的大脑不是一块”白板”\" class=\"headerlink\" title=\"身陷机器人控制室  初长成的大脑不是一块”白板”\"></a>身陷机器人控制室  初长成的大脑不是一块”白板”</h4><p>对于大脑来说,输入的信息是与输出相连接的,大脑本身就拥有一些能力,知道要去认识什么,知道怎样才能使各种连接变得更加合理.这项任务是提前完成了的.这也是以另外一种形式证实了那个广为人知的说法,初长成的大脑不是”白板”一块,它已然经历了自然选择的雕琢,自身体现着各式的偏好、预设和衔联,而且,有些合适的连接是提前内置的,无需标注.</p>\n<p>在理解产生之前,先要有一些不需要理解的能力出现,这是自然选择.自然选择的车轮滚滚向前,一路上造就出了无数精巧能干的事物,这个过程也不包含任何理解.</p>\n<p>我们成年人具有的那种理解能力是进化史近期才出现的一种景象,它是由一些结构组合生成,而这些结构所具有的能力也是由鱼或者蠕虫所有的那种类似理解力发展而来的.大部分时间里,这些解构发挥着应有的作用,但它们并不需要知道自己为什么会那样发挥作用.</p>\n","site":{"data":{}},"length":1168,"excerpt":"<p>今天要介绍剩下的关于意义和内容思考工具(近似算子、神奇组织、身陷机器人控制室).</p>","more":"<h4 id=\"近似算子-达尔文渐进主义的启示\"><a href=\"#近似算子-达尔文渐进主义的启示\" class=\"headerlink\" title=\"近似算子  达尔文渐进主义的启示\"></a>近似算子  达尔文渐进主义的启示</h4><p>因为一旦要对各层级的功能运作做出分析或综合评价,我们就需要针对那个层级,追问着两个问题:它是什么?它都做些什么?”它是什么”是指其组成部分的结构组织,前提是这些组成部分都能如我们假设的那样发挥它们的功能.”它能做些什么”是指,它可以将一些近似认知的功能实现得很好,让我们能否在一个更高的水平上安心工作,因为我们相信脚下踩着的这块基石一定可以很好地发挥自己的功能、被很好地利用.</p>\n<p>在认知科学中,我们会将近似算子看作是达尔文进化论中渐进主义的一种平行理论.有细菌之前会先有近似细菌,有哺乳动物之前会先有近似哺乳动物,有狗之前也会先有近似狗的动物出现,如此等等.</p>\n<p>构成猿猴和苹果的基础成分都大同小异,不同的是这些成分的构造方式,还有各个层级的功能对它们的开发利用.</p>\n<p>我们从意向立场出发,开始追溯每一层级上近似理性行动者的信念和欲望,或者近似信念和近似欲望,从最简单的细菌到动物,从海星到天文学家,追溯组成大脑的识别、标记、比较和记忆回路,但即使追溯到人类这一层级,我们也没能明确地找到真正形成”理解”的那个点.</p>\n<h4 id=\"神奇组织-不要为逃避难题而求助于”魔法”\"><a href=\"#神奇组织-不要为逃避难题而求助于”魔法”\" class=\"headerlink\" title=\"神奇组织  不要为逃避难题而求助于”魔法”\"></a>神奇组织  不要为逃避难题而求助于”魔法”</h4><p>神奇组织:神经组织中的动态属性可以利用某种科学无法解释的潜在力量,做出一些让你觉得神奇的事情.</p>\n<p>计算机在清楚解释食物方面扮演着非常重要的角色,不管是飓风、房地产泡沫、艾滋病病毒,还是人类意识,在理解事物时,我们有充足的理由要首先去开发它们的计算机模型.</p>\n<p>神奇组织这一概念作为一件思考工具,它的功能类似于警察的警棍:你拿警棍惩罚别人,警示他们不要使用不正当的理论.当然就像你可能滥用警棍一样,你也可能滥用这个概念.</p>\n<p>反对神奇组织的主要理由是:它提供给我们的事一种逃避问题的方法,而不是解决问题的方法,因为神奇组织预设了这是一个根本无法解决的神秘问题</p>\n<h4 id=\"身陷机器人控制室-初长成的大脑不是一块”白板”\"><a href=\"#身陷机器人控制室-初长成的大脑不是一块”白板”\" class=\"headerlink\" title=\"身陷机器人控制室  初长成的大脑不是一块”白板”\"></a>身陷机器人控制室  初长成的大脑不是一块”白板”</h4><p>对于大脑来说,输入的信息是与输出相连接的,大脑本身就拥有一些能力,知道要去认识什么,知道怎样才能使各种连接变得更加合理.这项任务是提前完成了的.这也是以另外一种形式证实了那个广为人知的说法,初长成的大脑不是”白板”一块,它已然经历了自然选择的雕琢,自身体现着各式的偏好、预设和衔联,而且,有些合适的连接是提前内置的,无需标注.</p>\n<p>在理解产生之前,先要有一些不需要理解的能力出现,这是自然选择.自然选择的车轮滚滚向前,一路上造就出了无数精巧能干的事物,这个过程也不包含任何理解.</p>\n<p>我们成年人具有的那种理解能力是进化史近期才出现的一种景象,它是由一些结构组合生成,而这些结构所具有的能力也是由鱼或者蠕虫所有的那种类似理解力发展而来的.大部分时间里,这些解构发挥着应有的作用,但它们并不需要知道自己为什么会那样发挥作用.</p>"},{"title":"直觉泵-关于意义和内容思考工具(二)","date":"2020-01-07T15:02:50.000Z","_content":"\n上一篇介绍了特拉法尔加广场上的谋杀案、生活在克里法兰的一位兄长、\"爸爸是名医生\"、常识映像和科学映像、常识心理以及意向立场这些关于意义和内容思考工具,今天要介绍的关于意义和内容思考工具(人与\"次人\"的区别、大脑中的小人儿委员会).\n\n<!--more-->\n\n#### 人与\"次人\"的区别  自上而下的认知能力分解\n\n大脑的无数多种能力是纠结在一起、相互影响的,根本不存在一个将大脑所有的能力都集结于一处从而产生意识的中心.让你成为你之所是的那些能力、性情、偏好和怪癖,都依赖于连通你的身体和大脑的通路才得以形成.\n\n\"你无法把我从我的身子上撕下来,只干净利索地留下一个轮廓\"\n\n尽管大自然没有赋予我们如互联网那般紧罗密布的分散结构,但不能否认,构成我们的各个部分也并非功能单一,它们的组织方式也是去中心化的.科学们证明,我们的大脑组织是非常具有可塑性的,它能变换成各种新的配置,即使割舍掉了身体上的一些重要部分,只要不是那些致命的身体部分,你就还是可以做自己,追求梦想、惑乱敌人、权衡策略、重新尝试取得新的成功.\n\n真正打碎整体思维,指引人们进入次思维研究的是计算机的发明和人工智能研究的诞生.人工智能研究从一开始就确立了自己的目标--要把人类整体的认知能力转变成一个由次人类专业处理装置组成的巨大网络,包括目标发生装置、记忆搜索装置、计划评估装置、感知分析器和语句分析程序等.\n\n#### 大脑中的小人儿委员会  认知科学的好理念\n\n小人儿式机械主义:因为人工智能程序员们是从一个带有意向色彩的起点入手的,所以他们当然会将计算机拟人化.比如说,一旦计算机顺利解决了问题,程序员就会说他们设计的计算机能够理解那些用英语写出的问题.程序设计的首要的,也是最高级的要求是要把计算机拆分成数个子系统,每个子系统都要执行一些带有意向色彩的任务,程序员列出一张流程表,上面贯穿着计算机评估、记忆器、鉴别器、监督器等部分,其中的每一个都算得上是小人儿......每个小人儿进而又可以被分解为更小的小人儿,值得一提的是,它们的智能性也会渐次降低.分解到最后,小人儿们都变成了一些加法器或者减法器,它们的智力仅能让她们从两个数字中挑出较大的那个.分解到这个程度,这些小人儿就可以由一台机器替代了.\n\n这一策略的独特价值在于它釜底抽薪地反驳了无限倒退论.小人儿式机械主义绕过了险恶的无限倒退论,用有限的倒退取代了它.\n\n受神经科学的启发,作为大脑运作的一种模式,那种自下而上的小人儿式机械主义真是让人越看越觉得合理,因为从生物学的视角看,它生成的更加错综复杂也更有竞争性的“计算体系”是更合理的:我们可以看到它整个的发展历程,从胚胎直到成人,在这个过程中不断建构和修改.我们也可以看到,这种复杂的体系结构是如何从简单的神经系统发展而来,由那些未成熟的小人儿组合而成,那些小人儿有着“近似”于感知、标记和记忆的能力.\n","source":"_posts/直觉泵-关于意义和内容思考工具(二).md","raw":"---\ntitle: 直觉泵-关于意义和内容思考工具(二)\ndate: 2020-01-07 23:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n\n上一篇介绍了特拉法尔加广场上的谋杀案、生活在克里法兰的一位兄长、\"爸爸是名医生\"、常识映像和科学映像、常识心理以及意向立场这些关于意义和内容思考工具,今天要介绍的关于意义和内容思考工具(人与\"次人\"的区别、大脑中的小人儿委员会).\n\n<!--more-->\n\n#### 人与\"次人\"的区别  自上而下的认知能力分解\n\n大脑的无数多种能力是纠结在一起、相互影响的,根本不存在一个将大脑所有的能力都集结于一处从而产生意识的中心.让你成为你之所是的那些能力、性情、偏好和怪癖,都依赖于连通你的身体和大脑的通路才得以形成.\n\n\"你无法把我从我的身子上撕下来,只干净利索地留下一个轮廓\"\n\n尽管大自然没有赋予我们如互联网那般紧罗密布的分散结构,但不能否认,构成我们的各个部分也并非功能单一,它们的组织方式也是去中心化的.科学们证明,我们的大脑组织是非常具有可塑性的,它能变换成各种新的配置,即使割舍掉了身体上的一些重要部分,只要不是那些致命的身体部分,你就还是可以做自己,追求梦想、惑乱敌人、权衡策略、重新尝试取得新的成功.\n\n真正打碎整体思维,指引人们进入次思维研究的是计算机的发明和人工智能研究的诞生.人工智能研究从一开始就确立了自己的目标--要把人类整体的认知能力转变成一个由次人类专业处理装置组成的巨大网络,包括目标发生装置、记忆搜索装置、计划评估装置、感知分析器和语句分析程序等.\n\n#### 大脑中的小人儿委员会  认知科学的好理念\n\n小人儿式机械主义:因为人工智能程序员们是从一个带有意向色彩的起点入手的,所以他们当然会将计算机拟人化.比如说,一旦计算机顺利解决了问题,程序员就会说他们设计的计算机能够理解那些用英语写出的问题.程序设计的首要的,也是最高级的要求是要把计算机拆分成数个子系统,每个子系统都要执行一些带有意向色彩的任务,程序员列出一张流程表,上面贯穿着计算机评估、记忆器、鉴别器、监督器等部分,其中的每一个都算得上是小人儿......每个小人儿进而又可以被分解为更小的小人儿,值得一提的是,它们的智能性也会渐次降低.分解到最后,小人儿们都变成了一些加法器或者减法器,它们的智力仅能让她们从两个数字中挑出较大的那个.分解到这个程度,这些小人儿就可以由一台机器替代了.\n\n这一策略的独特价值在于它釜底抽薪地反驳了无限倒退论.小人儿式机械主义绕过了险恶的无限倒退论,用有限的倒退取代了它.\n\n受神经科学的启发,作为大脑运作的一种模式,那种自下而上的小人儿式机械主义真是让人越看越觉得合理,因为从生物学的视角看,它生成的更加错综复杂也更有竞争性的“计算体系”是更合理的:我们可以看到它整个的发展历程,从胚胎直到成人,在这个过程中不断建构和修改.我们也可以看到,这种复杂的体系结构是如何从简单的神经系统发展而来,由那些未成熟的小人儿组合而成,那些小人儿有着“近似”于感知、标记和记忆的能力.\n","slug":"直觉泵-关于意义和内容思考工具(二)","published":1,"updated":"2021-03-30T03:24:16.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx150063vcua0ih2e2jg","content":"<p>上一篇介绍了特拉法尔加广场上的谋杀案、生活在克里法兰的一位兄长、”爸爸是名医生”、常识映像和科学映像、常识心理以及意向立场这些关于意义和内容思考工具,今天要介绍的关于意义和内容思考工具(人与”次人”的区别、大脑中的小人儿委员会).</p>\n<span id=\"more\"></span>\n\n<h4 id=\"人与”次人”的区别-自上而下的认知能力分解\"><a href=\"#人与”次人”的区别-自上而下的认知能力分解\" class=\"headerlink\" title=\"人与”次人”的区别  自上而下的认知能力分解\"></a>人与”次人”的区别  自上而下的认知能力分解</h4><p>大脑的无数多种能力是纠结在一起、相互影响的,根本不存在一个将大脑所有的能力都集结于一处从而产生意识的中心.让你成为你之所是的那些能力、性情、偏好和怪癖,都依赖于连通你的身体和大脑的通路才得以形成.</p>\n<p>“你无法把我从我的身子上撕下来,只干净利索地留下一个轮廓”</p>\n<p>尽管大自然没有赋予我们如互联网那般紧罗密布的分散结构,但不能否认,构成我们的各个部分也并非功能单一,它们的组织方式也是去中心化的.科学们证明,我们的大脑组织是非常具有可塑性的,它能变换成各种新的配置,即使割舍掉了身体上的一些重要部分,只要不是那些致命的身体部分,你就还是可以做自己,追求梦想、惑乱敌人、权衡策略、重新尝试取得新的成功.</p>\n<p>真正打碎整体思维,指引人们进入次思维研究的是计算机的发明和人工智能研究的诞生.人工智能研究从一开始就确立了自己的目标–要把人类整体的认知能力转变成一个由次人类专业处理装置组成的巨大网络,包括目标发生装置、记忆搜索装置、计划评估装置、感知分析器和语句分析程序等.</p>\n<h4 id=\"大脑中的小人儿委员会-认知科学的好理念\"><a href=\"#大脑中的小人儿委员会-认知科学的好理念\" class=\"headerlink\" title=\"大脑中的小人儿委员会  认知科学的好理念\"></a>大脑中的小人儿委员会  认知科学的好理念</h4><p>小人儿式机械主义:因为人工智能程序员们是从一个带有意向色彩的起点入手的,所以他们当然会将计算机拟人化.比如说,一旦计算机顺利解决了问题,程序员就会说他们设计的计算机能够理解那些用英语写出的问题.程序设计的首要的,也是最高级的要求是要把计算机拆分成数个子系统,每个子系统都要执行一些带有意向色彩的任务,程序员列出一张流程表,上面贯穿着计算机评估、记忆器、鉴别器、监督器等部分,其中的每一个都算得上是小人儿……每个小人儿进而又可以被分解为更小的小人儿,值得一提的是,它们的智能性也会渐次降低.分解到最后,小人儿们都变成了一些加法器或者减法器,它们的智力仅能让她们从两个数字中挑出较大的那个.分解到这个程度,这些小人儿就可以由一台机器替代了.</p>\n<p>这一策略的独特价值在于它釜底抽薪地反驳了无限倒退论.小人儿式机械主义绕过了险恶的无限倒退论,用有限的倒退取代了它.</p>\n<p>受神经科学的启发,作为大脑运作的一种模式,那种自下而上的小人儿式机械主义真是让人越看越觉得合理,因为从生物学的视角看,它生成的更加错综复杂也更有竞争性的“计算体系”是更合理的:我们可以看到它整个的发展历程,从胚胎直到成人,在这个过程中不断建构和修改.我们也可以看到,这种复杂的体系结构是如何从简单的神经系统发展而来,由那些未成熟的小人儿组合而成,那些小人儿有着“近似”于感知、标记和记忆的能力.</p>\n","site":{"data":{}},"length":1149,"excerpt":"<p>上一篇介绍了特拉法尔加广场上的谋杀案、生活在克里法兰的一位兄长、”爸爸是名医生”、常识映像和科学映像、常识心理以及意向立场这些关于意义和内容思考工具,今天要介绍的关于意义和内容思考工具(人与”次人”的区别、大脑中的小人儿委员会).</p>","more":"<h4 id=\"人与”次人”的区别-自上而下的认知能力分解\"><a href=\"#人与”次人”的区别-自上而下的认知能力分解\" class=\"headerlink\" title=\"人与”次人”的区别  自上而下的认知能力分解\"></a>人与”次人”的区别  自上而下的认知能力分解</h4><p>大脑的无数多种能力是纠结在一起、相互影响的,根本不存在一个将大脑所有的能力都集结于一处从而产生意识的中心.让你成为你之所是的那些能力、性情、偏好和怪癖,都依赖于连通你的身体和大脑的通路才得以形成.</p>\n<p>“你无法把我从我的身子上撕下来,只干净利索地留下一个轮廓”</p>\n<p>尽管大自然没有赋予我们如互联网那般紧罗密布的分散结构,但不能否认,构成我们的各个部分也并非功能单一,它们的组织方式也是去中心化的.科学们证明,我们的大脑组织是非常具有可塑性的,它能变换成各种新的配置,即使割舍掉了身体上的一些重要部分,只要不是那些致命的身体部分,你就还是可以做自己,追求梦想、惑乱敌人、权衡策略、重新尝试取得新的成功.</p>\n<p>真正打碎整体思维,指引人们进入次思维研究的是计算机的发明和人工智能研究的诞生.人工智能研究从一开始就确立了自己的目标–要把人类整体的认知能力转变成一个由次人类专业处理装置组成的巨大网络,包括目标发生装置、记忆搜索装置、计划评估装置、感知分析器和语句分析程序等.</p>\n<h4 id=\"大脑中的小人儿委员会-认知科学的好理念\"><a href=\"#大脑中的小人儿委员会-认知科学的好理念\" class=\"headerlink\" title=\"大脑中的小人儿委员会  认知科学的好理念\"></a>大脑中的小人儿委员会  认知科学的好理念</h4><p>小人儿式机械主义:因为人工智能程序员们是从一个带有意向色彩的起点入手的,所以他们当然会将计算机拟人化.比如说,一旦计算机顺利解决了问题,程序员就会说他们设计的计算机能够理解那些用英语写出的问题.程序设计的首要的,也是最高级的要求是要把计算机拆分成数个子系统,每个子系统都要执行一些带有意向色彩的任务,程序员列出一张流程表,上面贯穿着计算机评估、记忆器、鉴别器、监督器等部分,其中的每一个都算得上是小人儿……每个小人儿进而又可以被分解为更小的小人儿,值得一提的是,它们的智能性也会渐次降低.分解到最后,小人儿们都变成了一些加法器或者减法器,它们的智力仅能让她们从两个数字中挑出较大的那个.分解到这个程度,这些小人儿就可以由一台机器替代了.</p>\n<p>这一策略的独特价值在于它釜底抽薪地反驳了无限倒退论.小人儿式机械主义绕过了险恶的无限倒退论,用有限的倒退取代了它.</p>\n<p>受神经科学的启发,作为大脑运作的一种模式,那种自下而上的小人儿式机械主义真是让人越看越觉得合理,因为从生物学的视角看,它生成的更加错综复杂也更有竞争性的“计算体系”是更合理的:我们可以看到它整个的发展历程,从胚胎直到成人,在这个过程中不断建构和修改.我们也可以看到,这种复杂的体系结构是如何从简单的神经系统发展而来,由那些未成熟的小人儿组合而成,那些小人儿有着“近似”于感知、标记和记忆的能力.</p>"},{"title":"直觉泵-关于意义和内容思考工具(一)","date":"2020-01-06T15:02:50.000Z","_content":"### 关于意义和内容思考工具\n\n为什么要从意义开始说起呢?因为它是所有难题的核心,原因很简单:每当我们开始与自己或者别人谈论它们时,那些难题就会出现.獾不用关心自由意志,海豚也不用烦心意识的问题,因为它们没有提出问题的能力.好奇会害死猫,却能吸引人类去反思自己的种种困惑.\n\n要进行有效的探索,尽一切所能去弄清出发点和自身装备是我们首先要做的事.词语有自身的意义.那么词语的意义是怎样产生的呢?作为词语的使用者,我们通过说某一事物来指示它,而这又是怎么实现的?我们如何理解彼此的话语?\n\n<!--more-->\n\n#### 特拉法尔加广场上的谋杀案  意义和内容都是我们大脑的\"意向性\"产物\n\n\"I'm hungry\"和\"J'ai faim\"这两句话使用了不同的单词,大声朗读时发音也不同,各属两类不同的语言,语法结构也有差异,但它们有一个共性:都意味着或者关乎着同一件事——说话者饿了.这一共有的性质,即两句话在各自语言中的意义(语句的意义)或者句子所表达的那些看法(语句的内容)是哲学和认知科学的一个中心论题.这种句子、图画、信念,毫无疑问还有大脑状态所展示的关涉性((aboutness),哲学里称为意向性(intentionality).\n\n人们普遍认为意义和内容之间有着密切的联系,它们之间相互依赖,更有甚者还会说,这两者压根儿就是一回事,都是意向性.但对于内容和意义是什么以及怎样准确地捕捉到它们这样的问题,人们却很难达成一致.\n\n从科学角度来看,意向性现象对我们来说既非常熟悉,就像食物、家具和衣服一般在日常生活中显现,又让你全然难以捉摸.我们毫不费力就能将生日祝福、死亡诅咒和承诺区分开来,但这不代表我们同样可以轻松完成一个工程:做出一个有效的\"死亡威胁侦测\".\n\n#### 生活在克利夫兰的一位兄长  一种观念只能够生长在一堆观念之上\n\n如果一个观念不能根据不同的语境无限扩充自身的使用方法,那么,在任何意义上它都不能算作是一个观念.\n\n一个\"命题\"不可能孤立地存在于我们的大脑中,即使是一个妄想出的观念,它也只有在一堆非妄想的观念上才能生长,它得承接住那些不断传递过来的意义.\n\n人们不可能只持有一个观念.你知道狗有四条腿,就一定知道腿就是狗的四肢,四一定比三大,等等.每个观念都会牵涉到其他一些东西.\n\n#### \"爸爸是名医生\"  理解是随着时间推移而逐渐清晰的\n\n对于成为一名医生意味着什么,作为爸爸又意味着什么,小孩子的理解会随着时间的推移逐渐深化,所以,对于自己的这句\"我的爸爸是一名医生\",她的理解也会有所变化.我们是否能非常审慎地详细列举出,要\"彻底地\"理解这一命题,她到底要知道多少东西.\n\n因为理解是一点一点形成的,那么基于理解的观念也应该是一点一点形成的,即使是对于这种通俗的命题来说也是如此.她\"近似\"知道她的爸爸是一名医生,这并不是说它对此有所保留或者怀疑,只是她的理解还不够全面,还不能作为一个重要的前提引出其他有用的观念.\n\n#### 常识映像和科学映像  反映世界的两个不同视角\n\n不管是细菌还是我们现代人中的医院,每个生物体在这个世界中都有一套对自己至关重要的东西,对于这些东西他们必须竭尽全力去辨识和抢占.哲学家们将支撑起存在的这一系列东西叫做\"本体论\".所以,每一种生物都有自己的本体论.动物的环世界首先是由一些基础情景构成的,包括食物、配偶,它们要学会躲避,知道从哪里钻进钻出,从哪里观测外界的动静,要有一个容身之所,还要有一席立足之地,等等.\n\n从某种意义上看,一个生物的环世界其实是一种内部环境,是一种\"主观\"甚至\"自恋\"的本体论,构成这种本体论的都是生物认为对自身最有用的那些东西,但这种\"内在\"和\"主观\"并非是从\"可意识到\"这个层面来说的.环世界其实是一个工程学概念:一部由电脑操控的升降机的本体论,是指在完成这项工作时需要它逐个完成的那一整套动作.\n\n与雏菊的本体论或者环世界不一样,我们的常识映像是明显的,也的的确确是主观的.世界是我们所在的世界,世界取决于我们.与雏菊的本体论相同,我们的常识映像也是在经年累月的自然选择中成形的,并最终沉淀成了我们基因的一部分.\n\n我们的大多数常识映像并不能随基因遗传,它们基本上是我们在童年时代经过反复灌输保留下来的.词语对我们来说非常重要,有它们作为媒介,我们大量的常识映像才能够传达.但是,我们用词语区分世界中不同事物的本能、我们对说话的冲动,这些多少还是跟基因遗传有些关系的,就像鸟儿能定位飞在空中的一只只小虫,黄蜂终是要筑起蜂巢一样.\n\n#### 常识心理  人们无需正规教育就拥有的一种能力\n\n常识心理是指\"每个人都知道的\"那些我们自己及别人心中都有的想法:人们能够感觉到并分辨出疼、饿、渴这些不同的感觉,能够记住过去发生的很多事件,也能预见到一些事情,睁开眼睛能够看见眼前的事物,在听力所及的范围内能听到别人在说什么,他们骗人也被人骗,知道自己在哪儿,能认出别人......我们不知道其他人、其他动物的脑子里在想什么,就以惊人的自信做出了这些推测.这些本是理所应当地发挥,以至于能注意到它们都是件让人觉得很费劲的事儿.\n\n艺术家和哲学家们一致认为:\"将熟悉的变陌生\"是他们必须主动完成的一项任务.创作天才们的一些奇思妙想威力无穷,能让我们冲破过度熟悉造成的坚壳,跳出系统,转换到一种新的观察视角,用全新的眼光再去看那些平凡无奇、显而易见的食物.\n\n#### 意向立场  解释实体行为的一种策略\n\n意向立场是一种解释包括人、动物、人工制品等实体的行为的策略,它将这些实体的行为解释成一个理性的主体在\"考量\"了自己的\"信念\"和\"欲望\"之后所做出的的\"行为\"\"选择\".\n\n物理立场就是物理科学的一种标准的运算模式,它要求我们在思考问题时用物理定律和事物的物理法则来得出预测.\n从设计立场出发的预想没有从物理立场出发的预想那么可靠,原因是我们还需要考虑如下的这些额外的设定：1．这个实体是按照我们的想法设计出来的.2．它会按照设计要求运行,中间不会出现失误.设计出的物品偶尔会出现设计上的失误,有时它会突然失灵.\n\n在我们把人类都处理为意向系统时,我们会巧妙地将对方脑壳中那颗大脑以及我们自己大脑中的运作细节忽略掉,因为我们都在无限制地依赖“人是有理性的”这一事实,浑然而不自知.所以,就算突然闯入了一个新异的情景,我们通常也能自然地事实上是不由自主地寻求到其中的意义,凭借的正是我们天生的本领:领会别人应有的信念(摆在他们眼前的事实)和欲望(什么对他们有好处).\n","source":"_posts/直觉泵-关于意义和内容思考工具.md","raw":"---\ntitle: 直觉泵-关于意义和内容思考工具(一)\ndate: 2020-01-06 23:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n### 关于意义和内容思考工具\n\n为什么要从意义开始说起呢?因为它是所有难题的核心,原因很简单:每当我们开始与自己或者别人谈论它们时,那些难题就会出现.獾不用关心自由意志,海豚也不用烦心意识的问题,因为它们没有提出问题的能力.好奇会害死猫,却能吸引人类去反思自己的种种困惑.\n\n要进行有效的探索,尽一切所能去弄清出发点和自身装备是我们首先要做的事.词语有自身的意义.那么词语的意义是怎样产生的呢?作为词语的使用者,我们通过说某一事物来指示它,而这又是怎么实现的?我们如何理解彼此的话语?\n\n<!--more-->\n\n#### 特拉法尔加广场上的谋杀案  意义和内容都是我们大脑的\"意向性\"产物\n\n\"I'm hungry\"和\"J'ai faim\"这两句话使用了不同的单词,大声朗读时发音也不同,各属两类不同的语言,语法结构也有差异,但它们有一个共性:都意味着或者关乎着同一件事——说话者饿了.这一共有的性质,即两句话在各自语言中的意义(语句的意义)或者句子所表达的那些看法(语句的内容)是哲学和认知科学的一个中心论题.这种句子、图画、信念,毫无疑问还有大脑状态所展示的关涉性((aboutness),哲学里称为意向性(intentionality).\n\n人们普遍认为意义和内容之间有着密切的联系,它们之间相互依赖,更有甚者还会说,这两者压根儿就是一回事,都是意向性.但对于内容和意义是什么以及怎样准确地捕捉到它们这样的问题,人们却很难达成一致.\n\n从科学角度来看,意向性现象对我们来说既非常熟悉,就像食物、家具和衣服一般在日常生活中显现,又让你全然难以捉摸.我们毫不费力就能将生日祝福、死亡诅咒和承诺区分开来,但这不代表我们同样可以轻松完成一个工程:做出一个有效的\"死亡威胁侦测\".\n\n#### 生活在克利夫兰的一位兄长  一种观念只能够生长在一堆观念之上\n\n如果一个观念不能根据不同的语境无限扩充自身的使用方法,那么,在任何意义上它都不能算作是一个观念.\n\n一个\"命题\"不可能孤立地存在于我们的大脑中,即使是一个妄想出的观念,它也只有在一堆非妄想的观念上才能生长,它得承接住那些不断传递过来的意义.\n\n人们不可能只持有一个观念.你知道狗有四条腿,就一定知道腿就是狗的四肢,四一定比三大,等等.每个观念都会牵涉到其他一些东西.\n\n#### \"爸爸是名医生\"  理解是随着时间推移而逐渐清晰的\n\n对于成为一名医生意味着什么,作为爸爸又意味着什么,小孩子的理解会随着时间的推移逐渐深化,所以,对于自己的这句\"我的爸爸是一名医生\",她的理解也会有所变化.我们是否能非常审慎地详细列举出,要\"彻底地\"理解这一命题,她到底要知道多少东西.\n\n因为理解是一点一点形成的,那么基于理解的观念也应该是一点一点形成的,即使是对于这种通俗的命题来说也是如此.她\"近似\"知道她的爸爸是一名医生,这并不是说它对此有所保留或者怀疑,只是她的理解还不够全面,还不能作为一个重要的前提引出其他有用的观念.\n\n#### 常识映像和科学映像  反映世界的两个不同视角\n\n不管是细菌还是我们现代人中的医院,每个生物体在这个世界中都有一套对自己至关重要的东西,对于这些东西他们必须竭尽全力去辨识和抢占.哲学家们将支撑起存在的这一系列东西叫做\"本体论\".所以,每一种生物都有自己的本体论.动物的环世界首先是由一些基础情景构成的,包括食物、配偶,它们要学会躲避,知道从哪里钻进钻出,从哪里观测外界的动静,要有一个容身之所,还要有一席立足之地,等等.\n\n从某种意义上看,一个生物的环世界其实是一种内部环境,是一种\"主观\"甚至\"自恋\"的本体论,构成这种本体论的都是生物认为对自身最有用的那些东西,但这种\"内在\"和\"主观\"并非是从\"可意识到\"这个层面来说的.环世界其实是一个工程学概念:一部由电脑操控的升降机的本体论,是指在完成这项工作时需要它逐个完成的那一整套动作.\n\n与雏菊的本体论或者环世界不一样,我们的常识映像是明显的,也的的确确是主观的.世界是我们所在的世界,世界取决于我们.与雏菊的本体论相同,我们的常识映像也是在经年累月的自然选择中成形的,并最终沉淀成了我们基因的一部分.\n\n我们的大多数常识映像并不能随基因遗传,它们基本上是我们在童年时代经过反复灌输保留下来的.词语对我们来说非常重要,有它们作为媒介,我们大量的常识映像才能够传达.但是,我们用词语区分世界中不同事物的本能、我们对说话的冲动,这些多少还是跟基因遗传有些关系的,就像鸟儿能定位飞在空中的一只只小虫,黄蜂终是要筑起蜂巢一样.\n\n#### 常识心理  人们无需正规教育就拥有的一种能力\n\n常识心理是指\"每个人都知道的\"那些我们自己及别人心中都有的想法:人们能够感觉到并分辨出疼、饿、渴这些不同的感觉,能够记住过去发生的很多事件,也能预见到一些事情,睁开眼睛能够看见眼前的事物,在听力所及的范围内能听到别人在说什么,他们骗人也被人骗,知道自己在哪儿,能认出别人......我们不知道其他人、其他动物的脑子里在想什么,就以惊人的自信做出了这些推测.这些本是理所应当地发挥,以至于能注意到它们都是件让人觉得很费劲的事儿.\n\n艺术家和哲学家们一致认为:\"将熟悉的变陌生\"是他们必须主动完成的一项任务.创作天才们的一些奇思妙想威力无穷,能让我们冲破过度熟悉造成的坚壳,跳出系统,转换到一种新的观察视角,用全新的眼光再去看那些平凡无奇、显而易见的食物.\n\n#### 意向立场  解释实体行为的一种策略\n\n意向立场是一种解释包括人、动物、人工制品等实体的行为的策略,它将这些实体的行为解释成一个理性的主体在\"考量\"了自己的\"信念\"和\"欲望\"之后所做出的的\"行为\"\"选择\".\n\n物理立场就是物理科学的一种标准的运算模式,它要求我们在思考问题时用物理定律和事物的物理法则来得出预测.\n从设计立场出发的预想没有从物理立场出发的预想那么可靠,原因是我们还需要考虑如下的这些额外的设定：1．这个实体是按照我们的想法设计出来的.2．它会按照设计要求运行,中间不会出现失误.设计出的物品偶尔会出现设计上的失误,有时它会突然失灵.\n\n在我们把人类都处理为意向系统时,我们会巧妙地将对方脑壳中那颗大脑以及我们自己大脑中的运作细节忽略掉,因为我们都在无限制地依赖“人是有理性的”这一事实,浑然而不自知.所以,就算突然闯入了一个新异的情景,我们通常也能自然地事实上是不由自主地寻求到其中的意义,凭借的正是我们天生的本领:领会别人应有的信念(摆在他们眼前的事实)和欲望(什么对他们有好处).\n","slug":"直觉泵-关于意义和内容思考工具","published":1,"updated":"2021-03-30T03:24:16.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx170066vcua88rj3rn7","content":"<h3 id=\"关于意义和内容思考工具\"><a href=\"#关于意义和内容思考工具\" class=\"headerlink\" title=\"关于意义和内容思考工具\"></a>关于意义和内容思考工具</h3><p>为什么要从意义开始说起呢?因为它是所有难题的核心,原因很简单:每当我们开始与自己或者别人谈论它们时,那些难题就会出现.獾不用关心自由意志,海豚也不用烦心意识的问题,因为它们没有提出问题的能力.好奇会害死猫,却能吸引人类去反思自己的种种困惑.</p>\n<p>要进行有效的探索,尽一切所能去弄清出发点和自身装备是我们首先要做的事.词语有自身的意义.那么词语的意义是怎样产生的呢?作为词语的使用者,我们通过说某一事物来指示它,而这又是怎么实现的?我们如何理解彼此的话语?</p>\n<span id=\"more\"></span>\n\n<h4 id=\"特拉法尔加广场上的谋杀案-意义和内容都是我们大脑的”意向性”产物\"><a href=\"#特拉法尔加广场上的谋杀案-意义和内容都是我们大脑的”意向性”产物\" class=\"headerlink\" title=\"特拉法尔加广场上的谋杀案  意义和内容都是我们大脑的”意向性”产物\"></a>特拉法尔加广场上的谋杀案  意义和内容都是我们大脑的”意向性”产物</h4><p>“I’m hungry”和”J’ai faim”这两句话使用了不同的单词,大声朗读时发音也不同,各属两类不同的语言,语法结构也有差异,但它们有一个共性:都意味着或者关乎着同一件事——说话者饿了.这一共有的性质,即两句话在各自语言中的意义(语句的意义)或者句子所表达的那些看法(语句的内容)是哲学和认知科学的一个中心论题.这种句子、图画、信念,毫无疑问还有大脑状态所展示的关涉性((aboutness),哲学里称为意向性(intentionality).</p>\n<p>人们普遍认为意义和内容之间有着密切的联系,它们之间相互依赖,更有甚者还会说,这两者压根儿就是一回事,都是意向性.但对于内容和意义是什么以及怎样准确地捕捉到它们这样的问题,人们却很难达成一致.</p>\n<p>从科学角度来看,意向性现象对我们来说既非常熟悉,就像食物、家具和衣服一般在日常生活中显现,又让你全然难以捉摸.我们毫不费力就能将生日祝福、死亡诅咒和承诺区分开来,但这不代表我们同样可以轻松完成一个工程:做出一个有效的”死亡威胁侦测”.</p>\n<h4 id=\"生活在克利夫兰的一位兄长-一种观念只能够生长在一堆观念之上\"><a href=\"#生活在克利夫兰的一位兄长-一种观念只能够生长在一堆观念之上\" class=\"headerlink\" title=\"生活在克利夫兰的一位兄长  一种观念只能够生长在一堆观念之上\"></a>生活在克利夫兰的一位兄长  一种观念只能够生长在一堆观念之上</h4><p>如果一个观念不能根据不同的语境无限扩充自身的使用方法,那么,在任何意义上它都不能算作是一个观念.</p>\n<p>一个”命题”不可能孤立地存在于我们的大脑中,即使是一个妄想出的观念,它也只有在一堆非妄想的观念上才能生长,它得承接住那些不断传递过来的意义.</p>\n<p>人们不可能只持有一个观念.你知道狗有四条腿,就一定知道腿就是狗的四肢,四一定比三大,等等.每个观念都会牵涉到其他一些东西.</p>\n<h4 id=\"“爸爸是名医生”-理解是随着时间推移而逐渐清晰的\"><a href=\"#“爸爸是名医生”-理解是随着时间推移而逐渐清晰的\" class=\"headerlink\" title=\"“爸爸是名医生”  理解是随着时间推移而逐渐清晰的\"></a>“爸爸是名医生”  理解是随着时间推移而逐渐清晰的</h4><p>对于成为一名医生意味着什么,作为爸爸又意味着什么,小孩子的理解会随着时间的推移逐渐深化,所以,对于自己的这句”我的爸爸是一名医生”,她的理解也会有所变化.我们是否能非常审慎地详细列举出,要”彻底地”理解这一命题,她到底要知道多少东西.</p>\n<p>因为理解是一点一点形成的,那么基于理解的观念也应该是一点一点形成的,即使是对于这种通俗的命题来说也是如此.她”近似”知道她的爸爸是一名医生,这并不是说它对此有所保留或者怀疑,只是她的理解还不够全面,还不能作为一个重要的前提引出其他有用的观念.</p>\n<h4 id=\"常识映像和科学映像-反映世界的两个不同视角\"><a href=\"#常识映像和科学映像-反映世界的两个不同视角\" class=\"headerlink\" title=\"常识映像和科学映像  反映世界的两个不同视角\"></a>常识映像和科学映像  反映世界的两个不同视角</h4><p>不管是细菌还是我们现代人中的医院,每个生物体在这个世界中都有一套对自己至关重要的东西,对于这些东西他们必须竭尽全力去辨识和抢占.哲学家们将支撑起存在的这一系列东西叫做”本体论”.所以,每一种生物都有自己的本体论.动物的环世界首先是由一些基础情景构成的,包括食物、配偶,它们要学会躲避,知道从哪里钻进钻出,从哪里观测外界的动静,要有一个容身之所,还要有一席立足之地,等等.</p>\n<p>从某种意义上看,一个生物的环世界其实是一种内部环境,是一种”主观”甚至”自恋”的本体论,构成这种本体论的都是生物认为对自身最有用的那些东西,但这种”内在”和”主观”并非是从”可意识到”这个层面来说的.环世界其实是一个工程学概念:一部由电脑操控的升降机的本体论,是指在完成这项工作时需要它逐个完成的那一整套动作.</p>\n<p>与雏菊的本体论或者环世界不一样,我们的常识映像是明显的,也的的确确是主观的.世界是我们所在的世界,世界取决于我们.与雏菊的本体论相同,我们的常识映像也是在经年累月的自然选择中成形的,并最终沉淀成了我们基因的一部分.</p>\n<p>我们的大多数常识映像并不能随基因遗传,它们基本上是我们在童年时代经过反复灌输保留下来的.词语对我们来说非常重要,有它们作为媒介,我们大量的常识映像才能够传达.但是,我们用词语区分世界中不同事物的本能、我们对说话的冲动,这些多少还是跟基因遗传有些关系的,就像鸟儿能定位飞在空中的一只只小虫,黄蜂终是要筑起蜂巢一样.</p>\n<h4 id=\"常识心理-人们无需正规教育就拥有的一种能力\"><a href=\"#常识心理-人们无需正规教育就拥有的一种能力\" class=\"headerlink\" title=\"常识心理  人们无需正规教育就拥有的一种能力\"></a>常识心理  人们无需正规教育就拥有的一种能力</h4><p>常识心理是指”每个人都知道的”那些我们自己及别人心中都有的想法:人们能够感觉到并分辨出疼、饿、渴这些不同的感觉,能够记住过去发生的很多事件,也能预见到一些事情,睁开眼睛能够看见眼前的事物,在听力所及的范围内能听到别人在说什么,他们骗人也被人骗,知道自己在哪儿,能认出别人……我们不知道其他人、其他动物的脑子里在想什么,就以惊人的自信做出了这些推测.这些本是理所应当地发挥,以至于能注意到它们都是件让人觉得很费劲的事儿.</p>\n<p>艺术家和哲学家们一致认为:”将熟悉的变陌生”是他们必须主动完成的一项任务.创作天才们的一些奇思妙想威力无穷,能让我们冲破过度熟悉造成的坚壳,跳出系统,转换到一种新的观察视角,用全新的眼光再去看那些平凡无奇、显而易见的食物.</p>\n<h4 id=\"意向立场-解释实体行为的一种策略\"><a href=\"#意向立场-解释实体行为的一种策略\" class=\"headerlink\" title=\"意向立场  解释实体行为的一种策略\"></a>意向立场  解释实体行为的一种策略</h4><p>意向立场是一种解释包括人、动物、人工制品等实体的行为的策略,它将这些实体的行为解释成一个理性的主体在”考量”了自己的”信念”和”欲望”之后所做出的的”行为””选择”.</p>\n<p>物理立场就是物理科学的一种标准的运算模式,它要求我们在思考问题时用物理定律和事物的物理法则来得出预测.<br>从设计立场出发的预想没有从物理立场出发的预想那么可靠,原因是我们还需要考虑如下的这些额外的设定：1．这个实体是按照我们的想法设计出来的.2．它会按照设计要求运行,中间不会出现失误.设计出的物品偶尔会出现设计上的失误,有时它会突然失灵.</p>\n<p>在我们把人类都处理为意向系统时,我们会巧妙地将对方脑壳中那颗大脑以及我们自己大脑中的运作细节忽略掉,因为我们都在无限制地依赖“人是有理性的”这一事实,浑然而不自知.所以,就算突然闯入了一个新异的情景,我们通常也能自然地事实上是不由自主地寻求到其中的意义,凭借的正是我们天生的本领:领会别人应有的信念(摆在他们眼前的事实)和欲望(什么对他们有好处).</p>\n","site":{"data":{}},"length":2573,"excerpt":"<h3 id=\"关于意义和内容思考工具\"><a href=\"#关于意义和内容思考工具\" class=\"headerlink\" title=\"关于意义和内容思考工具\"></a>关于意义和内容思考工具</h3><p>为什么要从意义开始说起呢?因为它是所有难题的核心,原因很简单:每当我们开始与自己或者别人谈论它们时,那些难题就会出现.獾不用关心自由意志,海豚也不用烦心意识的问题,因为它们没有提出问题的能力.好奇会害死猫,却能吸引人类去反思自己的种种困惑.</p>\n<p>要进行有效的探索,尽一切所能去弄清出发点和自身装备是我们首先要做的事.词语有自身的意义.那么词语的意义是怎样产生的呢?作为词语的使用者,我们通过说某一事物来指示它,而这又是怎么实现的?我们如何理解彼此的话语?</p>","more":"<h4 id=\"特拉法尔加广场上的谋杀案-意义和内容都是我们大脑的”意向性”产物\"><a href=\"#特拉法尔加广场上的谋杀案-意义和内容都是我们大脑的”意向性”产物\" class=\"headerlink\" title=\"特拉法尔加广场上的谋杀案  意义和内容都是我们大脑的”意向性”产物\"></a>特拉法尔加广场上的谋杀案  意义和内容都是我们大脑的”意向性”产物</h4><p>“I’m hungry”和”J’ai faim”这两句话使用了不同的单词,大声朗读时发音也不同,各属两类不同的语言,语法结构也有差异,但它们有一个共性:都意味着或者关乎着同一件事——说话者饿了.这一共有的性质,即两句话在各自语言中的意义(语句的意义)或者句子所表达的那些看法(语句的内容)是哲学和认知科学的一个中心论题.这种句子、图画、信念,毫无疑问还有大脑状态所展示的关涉性((aboutness),哲学里称为意向性(intentionality).</p>\n<p>人们普遍认为意义和内容之间有着密切的联系,它们之间相互依赖,更有甚者还会说,这两者压根儿就是一回事,都是意向性.但对于内容和意义是什么以及怎样准确地捕捉到它们这样的问题,人们却很难达成一致.</p>\n<p>从科学角度来看,意向性现象对我们来说既非常熟悉,就像食物、家具和衣服一般在日常生活中显现,又让你全然难以捉摸.我们毫不费力就能将生日祝福、死亡诅咒和承诺区分开来,但这不代表我们同样可以轻松完成一个工程:做出一个有效的”死亡威胁侦测”.</p>\n<h4 id=\"生活在克利夫兰的一位兄长-一种观念只能够生长在一堆观念之上\"><a href=\"#生活在克利夫兰的一位兄长-一种观念只能够生长在一堆观念之上\" class=\"headerlink\" title=\"生活在克利夫兰的一位兄长  一种观念只能够生长在一堆观念之上\"></a>生活在克利夫兰的一位兄长  一种观念只能够生长在一堆观念之上</h4><p>如果一个观念不能根据不同的语境无限扩充自身的使用方法,那么,在任何意义上它都不能算作是一个观念.</p>\n<p>一个”命题”不可能孤立地存在于我们的大脑中,即使是一个妄想出的观念,它也只有在一堆非妄想的观念上才能生长,它得承接住那些不断传递过来的意义.</p>\n<p>人们不可能只持有一个观念.你知道狗有四条腿,就一定知道腿就是狗的四肢,四一定比三大,等等.每个观念都会牵涉到其他一些东西.</p>\n<h4 id=\"“爸爸是名医生”-理解是随着时间推移而逐渐清晰的\"><a href=\"#“爸爸是名医生”-理解是随着时间推移而逐渐清晰的\" class=\"headerlink\" title=\"“爸爸是名医生”  理解是随着时间推移而逐渐清晰的\"></a>“爸爸是名医生”  理解是随着时间推移而逐渐清晰的</h4><p>对于成为一名医生意味着什么,作为爸爸又意味着什么,小孩子的理解会随着时间的推移逐渐深化,所以,对于自己的这句”我的爸爸是一名医生”,她的理解也会有所变化.我们是否能非常审慎地详细列举出,要”彻底地”理解这一命题,她到底要知道多少东西.</p>\n<p>因为理解是一点一点形成的,那么基于理解的观念也应该是一点一点形成的,即使是对于这种通俗的命题来说也是如此.她”近似”知道她的爸爸是一名医生,这并不是说它对此有所保留或者怀疑,只是她的理解还不够全面,还不能作为一个重要的前提引出其他有用的观念.</p>\n<h4 id=\"常识映像和科学映像-反映世界的两个不同视角\"><a href=\"#常识映像和科学映像-反映世界的两个不同视角\" class=\"headerlink\" title=\"常识映像和科学映像  反映世界的两个不同视角\"></a>常识映像和科学映像  反映世界的两个不同视角</h4><p>不管是细菌还是我们现代人中的医院,每个生物体在这个世界中都有一套对自己至关重要的东西,对于这些东西他们必须竭尽全力去辨识和抢占.哲学家们将支撑起存在的这一系列东西叫做”本体论”.所以,每一种生物都有自己的本体论.动物的环世界首先是由一些基础情景构成的,包括食物、配偶,它们要学会躲避,知道从哪里钻进钻出,从哪里观测外界的动静,要有一个容身之所,还要有一席立足之地,等等.</p>\n<p>从某种意义上看,一个生物的环世界其实是一种内部环境,是一种”主观”甚至”自恋”的本体论,构成这种本体论的都是生物认为对自身最有用的那些东西,但这种”内在”和”主观”并非是从”可意识到”这个层面来说的.环世界其实是一个工程学概念:一部由电脑操控的升降机的本体论,是指在完成这项工作时需要它逐个完成的那一整套动作.</p>\n<p>与雏菊的本体论或者环世界不一样,我们的常识映像是明显的,也的的确确是主观的.世界是我们所在的世界,世界取决于我们.与雏菊的本体论相同,我们的常识映像也是在经年累月的自然选择中成形的,并最终沉淀成了我们基因的一部分.</p>\n<p>我们的大多数常识映像并不能随基因遗传,它们基本上是我们在童年时代经过反复灌输保留下来的.词语对我们来说非常重要,有它们作为媒介,我们大量的常识映像才能够传达.但是,我们用词语区分世界中不同事物的本能、我们对说话的冲动,这些多少还是跟基因遗传有些关系的,就像鸟儿能定位飞在空中的一只只小虫,黄蜂终是要筑起蜂巢一样.</p>\n<h4 id=\"常识心理-人们无需正规教育就拥有的一种能力\"><a href=\"#常识心理-人们无需正规教育就拥有的一种能力\" class=\"headerlink\" title=\"常识心理  人们无需正规教育就拥有的一种能力\"></a>常识心理  人们无需正规教育就拥有的一种能力</h4><p>常识心理是指”每个人都知道的”那些我们自己及别人心中都有的想法:人们能够感觉到并分辨出疼、饿、渴这些不同的感觉,能够记住过去发生的很多事件,也能预见到一些事情,睁开眼睛能够看见眼前的事物,在听力所及的范围内能听到别人在说什么,他们骗人也被人骗,知道自己在哪儿,能认出别人……我们不知道其他人、其他动物的脑子里在想什么,就以惊人的自信做出了这些推测.这些本是理所应当地发挥,以至于能注意到它们都是件让人觉得很费劲的事儿.</p>\n<p>艺术家和哲学家们一致认为:”将熟悉的变陌生”是他们必须主动完成的一项任务.创作天才们的一些奇思妙想威力无穷,能让我们冲破过度熟悉造成的坚壳,跳出系统,转换到一种新的观察视角,用全新的眼光再去看那些平凡无奇、显而易见的食物.</p>\n<h4 id=\"意向立场-解释实体行为的一种策略\"><a href=\"#意向立场-解释实体行为的一种策略\" class=\"headerlink\" title=\"意向立场  解释实体行为的一种策略\"></a>意向立场  解释实体行为的一种策略</h4><p>意向立场是一种解释包括人、动物、人工制品等实体的行为的策略,它将这些实体的行为解释成一个理性的主体在”考量”了自己的”信念”和”欲望”之后所做出的的”行为””选择”.</p>\n<p>物理立场就是物理科学的一种标准的运算模式,它要求我们在思考问题时用物理定律和事物的物理法则来得出预测.<br>从设计立场出发的预想没有从物理立场出发的预想那么可靠,原因是我们还需要考虑如下的这些额外的设定：1．这个实体是按照我们的想法设计出来的.2．它会按照设计要求运行,中间不会出现失误.设计出的物品偶尔会出现设计上的失误,有时它会突然失灵.</p>\n<p>在我们把人类都处理为意向系统时,我们会巧妙地将对方脑壳中那颗大脑以及我们自己大脑中的运作细节忽略掉,因为我们都在无限制地依赖“人是有理性的”这一事实,浑然而不自知.所以,就算突然闯入了一个新异的情景,我们通常也能自然地事实上是不由自主地寻求到其中的意义,凭借的正是我们天生的本领:领会别人应有的信念(摆在他们眼前的事实)和欲望(什么对他们有好处).</p>"},{"title":"直觉泵-关于计算机的思考工具","date":"2020-01-10T15:02:50.000Z","_content":"今天,计算机无疑已经成为了我们最有力的思考工具,这不是因为它们承担起了单调繁重的苦差事,解放了智力劳动,而且,计算机科学家们发明出的许多概念也凭借着自身的实力成为了极好的思考工具.\n\n<!--more-->\n\n#### 计算机施展魔法的7个秘密  部分之和大于总体的最好实例\n\n秘密1 发挥能力,无需理解力:有些东西-=如一台寄存器机--它能完成精密的运算,但无需理解自己在做什么.\n\n秘密2 寄存器中的数字会代表什么取决于我们所编写的是什么样的程序.\n\n秘密3 寄存器中的数字可以表示任何事物,这说明,寄存器原则是可以处理任何事物,它们可以\"识别\"所有用数字(包括用一个数字或是一系列数字)表示的图案或特征.\n\n秘密4 既然一个数字可以表示任何事物,那么它就一定能表示一条指令或是一个地址.\n\n秘密5 所有可行的程序都能由一个单独的数字只带,都可以被看作是一串指令,等待通用万能机去执行.\n\n秘密6 自图灵的假想纸带机之后,计算机所有方面的改善,提高的都只是运算速度.\n\n秘密7 没有再多的秘密了!\n\n也许计算机最美妙的地方就是,它由各部分(操作)简单地组合而成,而各部分本身也很简单地组合,简单到没有什么地方是无法给出解释的.这里没有仙气,没有\"形态共振\",没有无形的力场,没有未知的物理定律,也没有那些神奇的组织.要知道,即使你用计算机成功地模拟出一些情景,完成这一切的也只是一些算术运算而已.\n\n#### 虚拟机  模拟硬件运行的计算机程序\n\n\"虚拟机\"是计算机科学家杰拉尔德·波佩克（Gerald Popek）和罗伯特·戈德堡(Robert Goldberg)在1974年引入的一个概念,它最初表示的是\"实体机的一种独立有效的复制品\",即各种指令的一种复制品.实体机是实在的硬件,由硅芯片和电线之类的东西组成,我们称它为A.而虚拟机是运行在另一台实体机B上的计算机程序,它能完美地模拟硬件A:速度可能会慢点,毕竟它要首先保障自己硬件上的基本操作有效运行,才能组织起硬件A上的那些操作,但的确都是同样的程序.如果你写了一个在硬件A上运行的程序,那么硬件B在运行模拟硬件A的虚拟机时,该程序应该能在硬件B上畅通无阻地运行.\n\nJava虚拟机(Java Virtual Machine，即JVM)已成为当今最流行的一种虚拟机,这是我们扩展虚拟机概念的又一个原因.Java虚拟机不是对任何一种实体硬件机器的模仿,它只作为软件机而存在,比较像一个操作系统.\n\n只要有一个大块头的硬件,在里面安装无数可塑可调的\"记忆\"盒子或者寄存器,把需要的指令放进这些记忆盒子里,让它们运行,这样你就把这个大块头的硬件变成了你想要的任何一种计算机.\n\n在面对\"说法语的人的大脑之间的相似性\"这个问题时,排除解剖学上那些显著的差异,也许利用虚拟机的例子能为我们展示出一种最好的解释:所有说法语的人都具备某种版本的法语虚拟机,它藏身于他们大脑数以亿计的寄存器中,是一套由细微的习性和连锁装置构成的系统.\n\n至少我们找到了一种方法,它能够清楚地道出\"具有数万亿活动部件的计算机,它的那种高等能力到底是什么\",而无需动用神奇组织.\n\n#### 算法   有效解决问题的策略机制\n\n算法是一种特定类型的形式步骤,只要可以\"运行\"或者开始具现化,它就能合乎逻辑地产生特定类型的结果.\n\n算法的概念有这样三个至关重要的特征,其中每一个总结起来都有些难度\n\n1. 底层中立:不管你用的是哪种符号体系,也不管你用的是铅笔还是钢笔,纸张或是羊皮卷,霓虹灯或者空中文字,它们都不会影响到你运算长除法的过程.运算程序依据的是逻辑结构,各种物质材料的因果力量也是能为运算保驾护航,但它们不直接参与运算.\n\n2. 潜在无头脑:过程的整体设计可以非常华丽,结果也可以十分耀眼,但算法的各个既成步骤,包括步骤之间的过渡却出奇地简单.有多简单?一个听话的白痴或者是一个简单的机械装置就能执行.\n\n3. 结果又保障:不管什么样的算法,只要不出意外,它就能每次都按照同样的步骤运作.一种算法就是一份简单的、不易有出入的食谱.\n\n显而易见,计算机就是靠这些特点成就的.每一种计算机程序都是一套算法:根本的组成元素是一些简单的步骤,它们的运行过程惊人地可靠,而运行机制却十分简单.\n\n#### 让电梯实现自动控制   机器取代人类的逻辑\n\n机器既不像人类那样,能够逐字逐句地把规则保存在大脑中,然后随时查阅那些规则从而指导自己行动;也不同于那些行星,总是能不紧不慢地\"按照\"设定好的轨道运行.有时,通过不断训练一些显性规则就会内化或者变成一种惯例,我们甚至都忘记了它们,不自觉地就把它们丢弃了.\n\n植入到源代码中的那些注释可以帮助程序员们去理解软件中相互啮合的各个部分的意图,但是,在我们为了方便描绘人类大脑所创作出的哪些硬件、固件和软件中,它们却并不出现.自然选择在我们的大脑中安装的那些功能结构就像是一些没有注释的代码,这些功能是有目的的,但由于代码并没有对结构的目的有所注释，大脑也就无从理解这些意图了.\n","source":"_posts/直觉泵-关于计算机的思考工具.md","raw":"---\ntitle: 直觉泵-关于计算机的思考工具\ndate: 2020-01-10 23:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n今天,计算机无疑已经成为了我们最有力的思考工具,这不是因为它们承担起了单调繁重的苦差事,解放了智力劳动,而且,计算机科学家们发明出的许多概念也凭借着自身的实力成为了极好的思考工具.\n\n<!--more-->\n\n#### 计算机施展魔法的7个秘密  部分之和大于总体的最好实例\n\n秘密1 发挥能力,无需理解力:有些东西-=如一台寄存器机--它能完成精密的运算,但无需理解自己在做什么.\n\n秘密2 寄存器中的数字会代表什么取决于我们所编写的是什么样的程序.\n\n秘密3 寄存器中的数字可以表示任何事物,这说明,寄存器原则是可以处理任何事物,它们可以\"识别\"所有用数字(包括用一个数字或是一系列数字)表示的图案或特征.\n\n秘密4 既然一个数字可以表示任何事物,那么它就一定能表示一条指令或是一个地址.\n\n秘密5 所有可行的程序都能由一个单独的数字只带,都可以被看作是一串指令,等待通用万能机去执行.\n\n秘密6 自图灵的假想纸带机之后,计算机所有方面的改善,提高的都只是运算速度.\n\n秘密7 没有再多的秘密了!\n\n也许计算机最美妙的地方就是,它由各部分(操作)简单地组合而成,而各部分本身也很简单地组合,简单到没有什么地方是无法给出解释的.这里没有仙气,没有\"形态共振\",没有无形的力场,没有未知的物理定律,也没有那些神奇的组织.要知道,即使你用计算机成功地模拟出一些情景,完成这一切的也只是一些算术运算而已.\n\n#### 虚拟机  模拟硬件运行的计算机程序\n\n\"虚拟机\"是计算机科学家杰拉尔德·波佩克（Gerald Popek）和罗伯特·戈德堡(Robert Goldberg)在1974年引入的一个概念,它最初表示的是\"实体机的一种独立有效的复制品\",即各种指令的一种复制品.实体机是实在的硬件,由硅芯片和电线之类的东西组成,我们称它为A.而虚拟机是运行在另一台实体机B上的计算机程序,它能完美地模拟硬件A:速度可能会慢点,毕竟它要首先保障自己硬件上的基本操作有效运行,才能组织起硬件A上的那些操作,但的确都是同样的程序.如果你写了一个在硬件A上运行的程序,那么硬件B在运行模拟硬件A的虚拟机时,该程序应该能在硬件B上畅通无阻地运行.\n\nJava虚拟机(Java Virtual Machine，即JVM)已成为当今最流行的一种虚拟机,这是我们扩展虚拟机概念的又一个原因.Java虚拟机不是对任何一种实体硬件机器的模仿,它只作为软件机而存在,比较像一个操作系统.\n\n只要有一个大块头的硬件,在里面安装无数可塑可调的\"记忆\"盒子或者寄存器,把需要的指令放进这些记忆盒子里,让它们运行,这样你就把这个大块头的硬件变成了你想要的任何一种计算机.\n\n在面对\"说法语的人的大脑之间的相似性\"这个问题时,排除解剖学上那些显著的差异,也许利用虚拟机的例子能为我们展示出一种最好的解释:所有说法语的人都具备某种版本的法语虚拟机,它藏身于他们大脑数以亿计的寄存器中,是一套由细微的习性和连锁装置构成的系统.\n\n至少我们找到了一种方法,它能够清楚地道出\"具有数万亿活动部件的计算机,它的那种高等能力到底是什么\",而无需动用神奇组织.\n\n#### 算法   有效解决问题的策略机制\n\n算法是一种特定类型的形式步骤,只要可以\"运行\"或者开始具现化,它就能合乎逻辑地产生特定类型的结果.\n\n算法的概念有这样三个至关重要的特征,其中每一个总结起来都有些难度\n\n1. 底层中立:不管你用的是哪种符号体系,也不管你用的是铅笔还是钢笔,纸张或是羊皮卷,霓虹灯或者空中文字,它们都不会影响到你运算长除法的过程.运算程序依据的是逻辑结构,各种物质材料的因果力量也是能为运算保驾护航,但它们不直接参与运算.\n\n2. 潜在无头脑:过程的整体设计可以非常华丽,结果也可以十分耀眼,但算法的各个既成步骤,包括步骤之间的过渡却出奇地简单.有多简单?一个听话的白痴或者是一个简单的机械装置就能执行.\n\n3. 结果又保障:不管什么样的算法,只要不出意外,它就能每次都按照同样的步骤运作.一种算法就是一份简单的、不易有出入的食谱.\n\n显而易见,计算机就是靠这些特点成就的.每一种计算机程序都是一套算法:根本的组成元素是一些简单的步骤,它们的运行过程惊人地可靠,而运行机制却十分简单.\n\n#### 让电梯实现自动控制   机器取代人类的逻辑\n\n机器既不像人类那样,能够逐字逐句地把规则保存在大脑中,然后随时查阅那些规则从而指导自己行动;也不同于那些行星,总是能不紧不慢地\"按照\"设定好的轨道运行.有时,通过不断训练一些显性规则就会内化或者变成一种惯例,我们甚至都忘记了它们,不自觉地就把它们丢弃了.\n\n植入到源代码中的那些注释可以帮助程序员们去理解软件中相互啮合的各个部分的意图,但是,在我们为了方便描绘人类大脑所创作出的哪些硬件、固件和软件中,它们却并不出现.自然选择在我们的大脑中安装的那些功能结构就像是一些没有注释的代码,这些功能是有目的的,但由于代码并没有对结构的目的有所注释，大脑也就无从理解这些意图了.\n","slug":"直觉泵-关于计算机的思考工具","published":1,"updated":"2021-03-30T03:24:16.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx18006avcua46je01jw","content":"<p>今天,计算机无疑已经成为了我们最有力的思考工具,这不是因为它们承担起了单调繁重的苦差事,解放了智力劳动,而且,计算机科学家们发明出的许多概念也凭借着自身的实力成为了极好的思考工具.</p>\n<span id=\"more\"></span>\n\n<h4 id=\"计算机施展魔法的7个秘密-部分之和大于总体的最好实例\"><a href=\"#计算机施展魔法的7个秘密-部分之和大于总体的最好实例\" class=\"headerlink\" title=\"计算机施展魔法的7个秘密  部分之和大于总体的最好实例\"></a>计算机施展魔法的7个秘密  部分之和大于总体的最好实例</h4><p>秘密1 发挥能力,无需理解力:有些东西-=如一台寄存器机–它能完成精密的运算,但无需理解自己在做什么.</p>\n<p>秘密2 寄存器中的数字会代表什么取决于我们所编写的是什么样的程序.</p>\n<p>秘密3 寄存器中的数字可以表示任何事物,这说明,寄存器原则是可以处理任何事物,它们可以”识别”所有用数字(包括用一个数字或是一系列数字)表示的图案或特征.</p>\n<p>秘密4 既然一个数字可以表示任何事物,那么它就一定能表示一条指令或是一个地址.</p>\n<p>秘密5 所有可行的程序都能由一个单独的数字只带,都可以被看作是一串指令,等待通用万能机去执行.</p>\n<p>秘密6 自图灵的假想纸带机之后,计算机所有方面的改善,提高的都只是运算速度.</p>\n<p>秘密7 没有再多的秘密了!</p>\n<p>也许计算机最美妙的地方就是,它由各部分(操作)简单地组合而成,而各部分本身也很简单地组合,简单到没有什么地方是无法给出解释的.这里没有仙气,没有”形态共振”,没有无形的力场,没有未知的物理定律,也没有那些神奇的组织.要知道,即使你用计算机成功地模拟出一些情景,完成这一切的也只是一些算术运算而已.</p>\n<h4 id=\"虚拟机-模拟硬件运行的计算机程序\"><a href=\"#虚拟机-模拟硬件运行的计算机程序\" class=\"headerlink\" title=\"虚拟机  模拟硬件运行的计算机程序\"></a>虚拟机  模拟硬件运行的计算机程序</h4><p>“虚拟机”是计算机科学家杰拉尔德·波佩克（Gerald Popek）和罗伯特·戈德堡(Robert Goldberg)在1974年引入的一个概念,它最初表示的是”实体机的一种独立有效的复制品”,即各种指令的一种复制品.实体机是实在的硬件,由硅芯片和电线之类的东西组成,我们称它为A.而虚拟机是运行在另一台实体机B上的计算机程序,它能完美地模拟硬件A:速度可能会慢点,毕竟它要首先保障自己硬件上的基本操作有效运行,才能组织起硬件A上的那些操作,但的确都是同样的程序.如果你写了一个在硬件A上运行的程序,那么硬件B在运行模拟硬件A的虚拟机时,该程序应该能在硬件B上畅通无阻地运行.</p>\n<p>Java虚拟机(Java Virtual Machine，即JVM)已成为当今最流行的一种虚拟机,这是我们扩展虚拟机概念的又一个原因.Java虚拟机不是对任何一种实体硬件机器的模仿,它只作为软件机而存在,比较像一个操作系统.</p>\n<p>只要有一个大块头的硬件,在里面安装无数可塑可调的”记忆”盒子或者寄存器,把需要的指令放进这些记忆盒子里,让它们运行,这样你就把这个大块头的硬件变成了你想要的任何一种计算机.</p>\n<p>在面对”说法语的人的大脑之间的相似性”这个问题时,排除解剖学上那些显著的差异,也许利用虚拟机的例子能为我们展示出一种最好的解释:所有说法语的人都具备某种版本的法语虚拟机,它藏身于他们大脑数以亿计的寄存器中,是一套由细微的习性和连锁装置构成的系统.</p>\n<p>至少我们找到了一种方法,它能够清楚地道出”具有数万亿活动部件的计算机,它的那种高等能力到底是什么”,而无需动用神奇组织.</p>\n<h4 id=\"算法-有效解决问题的策略机制\"><a href=\"#算法-有效解决问题的策略机制\" class=\"headerlink\" title=\"算法   有效解决问题的策略机制\"></a>算法   有效解决问题的策略机制</h4><p>算法是一种特定类型的形式步骤,只要可以”运行”或者开始具现化,它就能合乎逻辑地产生特定类型的结果.</p>\n<p>算法的概念有这样三个至关重要的特征,其中每一个总结起来都有些难度</p>\n<ol>\n<li><p>底层中立:不管你用的是哪种符号体系,也不管你用的是铅笔还是钢笔,纸张或是羊皮卷,霓虹灯或者空中文字,它们都不会影响到你运算长除法的过程.运算程序依据的是逻辑结构,各种物质材料的因果力量也是能为运算保驾护航,但它们不直接参与运算.</p>\n</li>\n<li><p>潜在无头脑:过程的整体设计可以非常华丽,结果也可以十分耀眼,但算法的各个既成步骤,包括步骤之间的过渡却出奇地简单.有多简单?一个听话的白痴或者是一个简单的机械装置就能执行.</p>\n</li>\n<li><p>结果又保障:不管什么样的算法,只要不出意外,它就能每次都按照同样的步骤运作.一种算法就是一份简单的、不易有出入的食谱.</p>\n</li>\n</ol>\n<p>显而易见,计算机就是靠这些特点成就的.每一种计算机程序都是一套算法:根本的组成元素是一些简单的步骤,它们的运行过程惊人地可靠,而运行机制却十分简单.</p>\n<h4 id=\"让电梯实现自动控制-机器取代人类的逻辑\"><a href=\"#让电梯实现自动控制-机器取代人类的逻辑\" class=\"headerlink\" title=\"让电梯实现自动控制   机器取代人类的逻辑\"></a>让电梯实现自动控制   机器取代人类的逻辑</h4><p>机器既不像人类那样,能够逐字逐句地把规则保存在大脑中,然后随时查阅那些规则从而指导自己行动;也不同于那些行星,总是能不紧不慢地”按照”设定好的轨道运行.有时,通过不断训练一些显性规则就会内化或者变成一种惯例,我们甚至都忘记了它们,不自觉地就把它们丢弃了.</p>\n<p>植入到源代码中的那些注释可以帮助程序员们去理解软件中相互啮合的各个部分的意图,但是,在我们为了方便描绘人类大脑所创作出的哪些硬件、固件和软件中,它们却并不出现.自然选择在我们的大脑中安装的那些功能结构就像是一些没有注释的代码,这些功能是有目的的,但由于代码并没有对结构的目的有所注释，大脑也就无从理解这些意图了.</p>\n","site":{"data":{}},"length":1962,"excerpt":"<p>今天,计算机无疑已经成为了我们最有力的思考工具,这不是因为它们承担起了单调繁重的苦差事,解放了智力劳动,而且,计算机科学家们发明出的许多概念也凭借着自身的实力成为了极好的思考工具.</p>","more":"<h4 id=\"计算机施展魔法的7个秘密-部分之和大于总体的最好实例\"><a href=\"#计算机施展魔法的7个秘密-部分之和大于总体的最好实例\" class=\"headerlink\" title=\"计算机施展魔法的7个秘密  部分之和大于总体的最好实例\"></a>计算机施展魔法的7个秘密  部分之和大于总体的最好实例</h4><p>秘密1 发挥能力,无需理解力:有些东西-=如一台寄存器机–它能完成精密的运算,但无需理解自己在做什么.</p>\n<p>秘密2 寄存器中的数字会代表什么取决于我们所编写的是什么样的程序.</p>\n<p>秘密3 寄存器中的数字可以表示任何事物,这说明,寄存器原则是可以处理任何事物,它们可以”识别”所有用数字(包括用一个数字或是一系列数字)表示的图案或特征.</p>\n<p>秘密4 既然一个数字可以表示任何事物,那么它就一定能表示一条指令或是一个地址.</p>\n<p>秘密5 所有可行的程序都能由一个单独的数字只带,都可以被看作是一串指令,等待通用万能机去执行.</p>\n<p>秘密6 自图灵的假想纸带机之后,计算机所有方面的改善,提高的都只是运算速度.</p>\n<p>秘密7 没有再多的秘密了!</p>\n<p>也许计算机最美妙的地方就是,它由各部分(操作)简单地组合而成,而各部分本身也很简单地组合,简单到没有什么地方是无法给出解释的.这里没有仙气,没有”形态共振”,没有无形的力场,没有未知的物理定律,也没有那些神奇的组织.要知道,即使你用计算机成功地模拟出一些情景,完成这一切的也只是一些算术运算而已.</p>\n<h4 id=\"虚拟机-模拟硬件运行的计算机程序\"><a href=\"#虚拟机-模拟硬件运行的计算机程序\" class=\"headerlink\" title=\"虚拟机  模拟硬件运行的计算机程序\"></a>虚拟机  模拟硬件运行的计算机程序</h4><p>“虚拟机”是计算机科学家杰拉尔德·波佩克（Gerald Popek）和罗伯特·戈德堡(Robert Goldberg)在1974年引入的一个概念,它最初表示的是”实体机的一种独立有效的复制品”,即各种指令的一种复制品.实体机是实在的硬件,由硅芯片和电线之类的东西组成,我们称它为A.而虚拟机是运行在另一台实体机B上的计算机程序,它能完美地模拟硬件A:速度可能会慢点,毕竟它要首先保障自己硬件上的基本操作有效运行,才能组织起硬件A上的那些操作,但的确都是同样的程序.如果你写了一个在硬件A上运行的程序,那么硬件B在运行模拟硬件A的虚拟机时,该程序应该能在硬件B上畅通无阻地运行.</p>\n<p>Java虚拟机(Java Virtual Machine，即JVM)已成为当今最流行的一种虚拟机,这是我们扩展虚拟机概念的又一个原因.Java虚拟机不是对任何一种实体硬件机器的模仿,它只作为软件机而存在,比较像一个操作系统.</p>\n<p>只要有一个大块头的硬件,在里面安装无数可塑可调的”记忆”盒子或者寄存器,把需要的指令放进这些记忆盒子里,让它们运行,这样你就把这个大块头的硬件变成了你想要的任何一种计算机.</p>\n<p>在面对”说法语的人的大脑之间的相似性”这个问题时,排除解剖学上那些显著的差异,也许利用虚拟机的例子能为我们展示出一种最好的解释:所有说法语的人都具备某种版本的法语虚拟机,它藏身于他们大脑数以亿计的寄存器中,是一套由细微的习性和连锁装置构成的系统.</p>\n<p>至少我们找到了一种方法,它能够清楚地道出”具有数万亿活动部件的计算机,它的那种高等能力到底是什么”,而无需动用神奇组织.</p>\n<h4 id=\"算法-有效解决问题的策略机制\"><a href=\"#算法-有效解决问题的策略机制\" class=\"headerlink\" title=\"算法   有效解决问题的策略机制\"></a>算法   有效解决问题的策略机制</h4><p>算法是一种特定类型的形式步骤,只要可以”运行”或者开始具现化,它就能合乎逻辑地产生特定类型的结果.</p>\n<p>算法的概念有这样三个至关重要的特征,其中每一个总结起来都有些难度</p>\n<ol>\n<li><p>底层中立:不管你用的是哪种符号体系,也不管你用的是铅笔还是钢笔,纸张或是羊皮卷,霓虹灯或者空中文字,它们都不会影响到你运算长除法的过程.运算程序依据的是逻辑结构,各种物质材料的因果力量也是能为运算保驾护航,但它们不直接参与运算.</p>\n</li>\n<li><p>潜在无头脑:过程的整体设计可以非常华丽,结果也可以十分耀眼,但算法的各个既成步骤,包括步骤之间的过渡却出奇地简单.有多简单?一个听话的白痴或者是一个简单的机械装置就能执行.</p>\n</li>\n<li><p>结果又保障:不管什么样的算法,只要不出意外,它就能每次都按照同样的步骤运作.一种算法就是一份简单的、不易有出入的食谱.</p>\n</li>\n</ol>\n<p>显而易见,计算机就是靠这些特点成就的.每一种计算机程序都是一套算法:根本的组成元素是一些简单的步骤,它们的运行过程惊人地可靠,而运行机制却十分简单.</p>\n<h4 id=\"让电梯实现自动控制-机器取代人类的逻辑\"><a href=\"#让电梯实现自动控制-机器取代人类的逻辑\" class=\"headerlink\" title=\"让电梯实现自动控制   机器取代人类的逻辑\"></a>让电梯实现自动控制   机器取代人类的逻辑</h4><p>机器既不像人类那样,能够逐字逐句地把规则保存在大脑中,然后随时查阅那些规则从而指导自己行动;也不同于那些行星,总是能不紧不慢地”按照”设定好的轨道运行.有时,通过不断训练一些显性规则就会内化或者变成一种惯例,我们甚至都忘记了它们,不自觉地就把它们丢弃了.</p>\n<p>植入到源代码中的那些注释可以帮助程序员们去理解软件中相互啮合的各个部分的意图,但是,在我们为了方便描绘人类大脑所创作出的哪些硬件、固件和软件中,它们却并不出现.自然选择在我们的大脑中安装的那些功能结构就像是一些没有注释的代码,这些功能是有目的的,但由于代码并没有对结构的目的有所注释，大脑也就无从理解这些意图了.</p>"},{"title":"直觉泵-通用思考工具(一)","date":"2020-01-03T16:02:50.000Z","_content":"最近在听玮仔推荐的第三季精英日课,其中有一集,万老师提到了<<直觉泵和其他思考工具>>这本书,出于对哲学的好奇,就开始阅读这本书.\n\n### 通用思考工具\n\n这些构想、这些思维训练已经在种种情境中证明过自己的价值.\n<!--more-->\n\n#### 犯错儿  犯\"好\"错儿才有价值\n\n如果能获得一些具体、清楚、确定的东西,犯点错儿也无妨.犯错儿是取得进步的关键.\n\n人们总说:\"先理论,后实践.\",但犯错儿不只是学习的机会;从某种意义上讲,它还是人们学习或者做出真正创新的唯一机会.\n\n犯错儿的要诀在于不去隐藏它们,尤其不能自我欺骗.与其在我们犯错儿后扭脸否认,不如成为自己错误的鉴赏家,打心眼儿里把它们视作一种艺术品,其实在某种意义上它们就是艺术品.\n\n当反思时,我们会直接面对每一个犯错者都必须解决的问题:到底错在哪儿了?究竟我刚才做了什么,使自己陷入了这个窘境?关键在于利用错误当中那些特殊的细节,这样你才能在下次尝试时对错误有所察觉,以免重蹈覆辙.\n\n所以当你犯了错儿时,应该学会深吸一口气,咬紧牙关,然后尽你所能地冷静、毫不留情地检查你记住的错误.\n\n或多或少熟练地做出猜测,算出可能的结果,利用结果为下一步工作做出修正,这样的一般方法已经得到了广泛的应用.这个方法的关键在于,所犯的错误要足够清楚、精确,使得出的结果足够确定.\n\n#### 归谬法  发现错误命题的妙招\n\n你把一个推论中的一些命题或假设拿过来,看看有没有前后矛盾,或者是否隐含着荒谬之处.要是有,必须丢掉出问题的命题,或者重新推论.\n\n有一个可以对付归谬法的招数,那就是迎难而上、死不松口.\n\n\"归谬\"的尝试却有可能帮助我们认识到,这种想法为什么应该被我们认真对待.\n\n#### 拉波波特法则  批评他人的正确方式\n\n ① 你应该非常清楚、生动、不偏不倚地重述对手的想法,使得你的对手说:\"谢谢你,我刚才要是像你这么表述就好了.\"\n ② 你应该把对方观点中你所同意的部分都列出来,尤其是那种并非被人们广泛接受了的观点.\n ③ 你应该提到那些从你对手那里学到的东西.\n ④ 只有完成了以上三点,你才能说一句反驳或批评的话.\n\n你应该时刻提醒自己:对于一位作者来说,如果你勇敢地为他的观点寻找根据,但什么也没找到的话,可能会比气呼呼地批评他的刮泥单来得更有杀伤力.\n\n#### 史特金定律  不要把时间浪费在无意义的事情上\n\n任何事物当中的百分之九十都是垃圾.\n\n当你准备批评某一领域、某一流派、某一学科或者某一艺术形式的时候,请别在嘲笑垃圾上浪费自己和我们大家的时间!要么就追着优秀的东西批,要么就别干这活儿.\n\n#### 奥卡姆剃刀  如无必要,勿增实体\n\n如果你能找到一个更简单的理论,包含更少的因素、更少的实体,而它也一样可以很好地解释现象,就不要再构造一个大而无当的复杂理论了.\n\n奥卡姆剃刀只是一种经验法则、一条有益的建议.\n\n#### 奥卡姆扫把  有意隐瞒对自己不利的证据\n\n某些理论的辩护者本着智性上最大的不诚实把对自己不利的事实往地毯下面扫.\n\n即使是一位严肃的科学工作者有时也难以抵抗对某些数据的\"忽视\",尤其是当那些数据会伤害到他们心爱的理论时.但无论如何,这都是一个需要抵御的诱惑.\n","source":"_posts/直觉泵-通用思考工具.md","raw":"---\ntitle: 直觉泵-通用思考工具(一)\ndate: 2020-01-04 00:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n最近在听玮仔推荐的第三季精英日课,其中有一集,万老师提到了<<直觉泵和其他思考工具>>这本书,出于对哲学的好奇,就开始阅读这本书.\n\n### 通用思考工具\n\n这些构想、这些思维训练已经在种种情境中证明过自己的价值.\n<!--more-->\n\n#### 犯错儿  犯\"好\"错儿才有价值\n\n如果能获得一些具体、清楚、确定的东西,犯点错儿也无妨.犯错儿是取得进步的关键.\n\n人们总说:\"先理论,后实践.\",但犯错儿不只是学习的机会;从某种意义上讲,它还是人们学习或者做出真正创新的唯一机会.\n\n犯错儿的要诀在于不去隐藏它们,尤其不能自我欺骗.与其在我们犯错儿后扭脸否认,不如成为自己错误的鉴赏家,打心眼儿里把它们视作一种艺术品,其实在某种意义上它们就是艺术品.\n\n当反思时,我们会直接面对每一个犯错者都必须解决的问题:到底错在哪儿了?究竟我刚才做了什么,使自己陷入了这个窘境?关键在于利用错误当中那些特殊的细节,这样你才能在下次尝试时对错误有所察觉,以免重蹈覆辙.\n\n所以当你犯了错儿时,应该学会深吸一口气,咬紧牙关,然后尽你所能地冷静、毫不留情地检查你记住的错误.\n\n或多或少熟练地做出猜测,算出可能的结果,利用结果为下一步工作做出修正,这样的一般方法已经得到了广泛的应用.这个方法的关键在于,所犯的错误要足够清楚、精确,使得出的结果足够确定.\n\n#### 归谬法  发现错误命题的妙招\n\n你把一个推论中的一些命题或假设拿过来,看看有没有前后矛盾,或者是否隐含着荒谬之处.要是有,必须丢掉出问题的命题,或者重新推论.\n\n有一个可以对付归谬法的招数,那就是迎难而上、死不松口.\n\n\"归谬\"的尝试却有可能帮助我们认识到,这种想法为什么应该被我们认真对待.\n\n#### 拉波波特法则  批评他人的正确方式\n\n ① 你应该非常清楚、生动、不偏不倚地重述对手的想法,使得你的对手说:\"谢谢你,我刚才要是像你这么表述就好了.\"\n ② 你应该把对方观点中你所同意的部分都列出来,尤其是那种并非被人们广泛接受了的观点.\n ③ 你应该提到那些从你对手那里学到的东西.\n ④ 只有完成了以上三点,你才能说一句反驳或批评的话.\n\n你应该时刻提醒自己:对于一位作者来说,如果你勇敢地为他的观点寻找根据,但什么也没找到的话,可能会比气呼呼地批评他的刮泥单来得更有杀伤力.\n\n#### 史特金定律  不要把时间浪费在无意义的事情上\n\n任何事物当中的百分之九十都是垃圾.\n\n当你准备批评某一领域、某一流派、某一学科或者某一艺术形式的时候,请别在嘲笑垃圾上浪费自己和我们大家的时间!要么就追着优秀的东西批,要么就别干这活儿.\n\n#### 奥卡姆剃刀  如无必要,勿增实体\n\n如果你能找到一个更简单的理论,包含更少的因素、更少的实体,而它也一样可以很好地解释现象,就不要再构造一个大而无当的复杂理论了.\n\n奥卡姆剃刀只是一种经验法则、一条有益的建议.\n\n#### 奥卡姆扫把  有意隐瞒对自己不利的证据\n\n某些理论的辩护者本着智性上最大的不诚实把对自己不利的事实往地毯下面扫.\n\n即使是一位严肃的科学工作者有时也难以抵抗对某些数据的\"忽视\",尤其是当那些数据会伤害到他们心爱的理论时.但无论如何,这都是一个需要抵御的诱惑.\n","slug":"直觉泵-通用思考工具","published":1,"updated":"2021-03-30T03:24:16.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx19006dvcua30nse3sa","content":"<p>最近在听玮仔推荐的第三季精英日课,其中有一集,万老师提到了&lt;&lt;直觉泵和其他思考工具&gt;&gt;这本书,出于对哲学的好奇,就开始阅读这本书.</p>\n<h3 id=\"通用思考工具\"><a href=\"#通用思考工具\" class=\"headerlink\" title=\"通用思考工具\"></a>通用思考工具</h3><p>这些构想、这些思维训练已经在种种情境中证明过自己的价值.</p>\n<span id=\"more\"></span>\n\n<h4 id=\"犯错儿-犯”好”错儿才有价值\"><a href=\"#犯错儿-犯”好”错儿才有价值\" class=\"headerlink\" title=\"犯错儿  犯”好”错儿才有价值\"></a>犯错儿  犯”好”错儿才有价值</h4><p>如果能获得一些具体、清楚、确定的东西,犯点错儿也无妨.犯错儿是取得进步的关键.</p>\n<p>人们总说:”先理论,后实践.”,但犯错儿不只是学习的机会;从某种意义上讲,它还是人们学习或者做出真正创新的唯一机会.</p>\n<p>犯错儿的要诀在于不去隐藏它们,尤其不能自我欺骗.与其在我们犯错儿后扭脸否认,不如成为自己错误的鉴赏家,打心眼儿里把它们视作一种艺术品,其实在某种意义上它们就是艺术品.</p>\n<p>当反思时,我们会直接面对每一个犯错者都必须解决的问题:到底错在哪儿了?究竟我刚才做了什么,使自己陷入了这个窘境?关键在于利用错误当中那些特殊的细节,这样你才能在下次尝试时对错误有所察觉,以免重蹈覆辙.</p>\n<p>所以当你犯了错儿时,应该学会深吸一口气,咬紧牙关,然后尽你所能地冷静、毫不留情地检查你记住的错误.</p>\n<p>或多或少熟练地做出猜测,算出可能的结果,利用结果为下一步工作做出修正,这样的一般方法已经得到了广泛的应用.这个方法的关键在于,所犯的错误要足够清楚、精确,使得出的结果足够确定.</p>\n<h4 id=\"归谬法-发现错误命题的妙招\"><a href=\"#归谬法-发现错误命题的妙招\" class=\"headerlink\" title=\"归谬法  发现错误命题的妙招\"></a>归谬法  发现错误命题的妙招</h4><p>你把一个推论中的一些命题或假设拿过来,看看有没有前后矛盾,或者是否隐含着荒谬之处.要是有,必须丢掉出问题的命题,或者重新推论.</p>\n<p>有一个可以对付归谬法的招数,那就是迎难而上、死不松口.</p>\n<p>“归谬”的尝试却有可能帮助我们认识到,这种想法为什么应该被我们认真对待.</p>\n<h4 id=\"拉波波特法则-批评他人的正确方式\"><a href=\"#拉波波特法则-批评他人的正确方式\" class=\"headerlink\" title=\"拉波波特法则  批评他人的正确方式\"></a>拉波波特法则  批评他人的正确方式</h4><p> ① 你应该非常清楚、生动、不偏不倚地重述对手的想法,使得你的对手说:”谢谢你,我刚才要是像你这么表述就好了.”<br> ② 你应该把对方观点中你所同意的部分都列出来,尤其是那种并非被人们广泛接受了的观点.<br> ③ 你应该提到那些从你对手那里学到的东西.<br> ④ 只有完成了以上三点,你才能说一句反驳或批评的话.</p>\n<p>你应该时刻提醒自己:对于一位作者来说,如果你勇敢地为他的观点寻找根据,但什么也没找到的话,可能会比气呼呼地批评他的刮泥单来得更有杀伤力.</p>\n<h4 id=\"史特金定律-不要把时间浪费在无意义的事情上\"><a href=\"#史特金定律-不要把时间浪费在无意义的事情上\" class=\"headerlink\" title=\"史特金定律  不要把时间浪费在无意义的事情上\"></a>史特金定律  不要把时间浪费在无意义的事情上</h4><p>任何事物当中的百分之九十都是垃圾.</p>\n<p>当你准备批评某一领域、某一流派、某一学科或者某一艺术形式的时候,请别在嘲笑垃圾上浪费自己和我们大家的时间!要么就追着优秀的东西批,要么就别干这活儿.</p>\n<h4 id=\"奥卡姆剃刀-如无必要-勿增实体\"><a href=\"#奥卡姆剃刀-如无必要-勿增实体\" class=\"headerlink\" title=\"奥卡姆剃刀  如无必要,勿增实体\"></a>奥卡姆剃刀  如无必要,勿增实体</h4><p>如果你能找到一个更简单的理论,包含更少的因素、更少的实体,而它也一样可以很好地解释现象,就不要再构造一个大而无当的复杂理论了.</p>\n<p>奥卡姆剃刀只是一种经验法则、一条有益的建议.</p>\n<h4 id=\"奥卡姆扫把-有意隐瞒对自己不利的证据\"><a href=\"#奥卡姆扫把-有意隐瞒对自己不利的证据\" class=\"headerlink\" title=\"奥卡姆扫把  有意隐瞒对自己不利的证据\"></a>奥卡姆扫把  有意隐瞒对自己不利的证据</h4><p>某些理论的辩护者本着智性上最大的不诚实把对自己不利的事实往地毯下面扫.</p>\n<p>即使是一位严肃的科学工作者有时也难以抵抗对某些数据的”忽视”,尤其是当那些数据会伤害到他们心爱的理论时.但无论如何,这都是一个需要抵御的诱惑.</p>\n","site":{"data":{}},"length":1235,"excerpt":"<p>最近在听玮仔推荐的第三季精英日课,其中有一集,万老师提到了&lt;&lt;直觉泵和其他思考工具&gt;&gt;这本书,出于对哲学的好奇,就开始阅读这本书.</p>\n<h3 id=\"通用思考工具\"><a href=\"#通用思考工具\" class=\"headerlink\" title=\"通用思考工具\"></a>通用思考工具</h3><p>这些构想、这些思维训练已经在种种情境中证明过自己的价值.</p>","more":"<h4 id=\"犯错儿-犯”好”错儿才有价值\"><a href=\"#犯错儿-犯”好”错儿才有价值\" class=\"headerlink\" title=\"犯错儿  犯”好”错儿才有价值\"></a>犯错儿  犯”好”错儿才有价值</h4><p>如果能获得一些具体、清楚、确定的东西,犯点错儿也无妨.犯错儿是取得进步的关键.</p>\n<p>人们总说:”先理论,后实践.”,但犯错儿不只是学习的机会;从某种意义上讲,它还是人们学习或者做出真正创新的唯一机会.</p>\n<p>犯错儿的要诀在于不去隐藏它们,尤其不能自我欺骗.与其在我们犯错儿后扭脸否认,不如成为自己错误的鉴赏家,打心眼儿里把它们视作一种艺术品,其实在某种意义上它们就是艺术品.</p>\n<p>当反思时,我们会直接面对每一个犯错者都必须解决的问题:到底错在哪儿了?究竟我刚才做了什么,使自己陷入了这个窘境?关键在于利用错误当中那些特殊的细节,这样你才能在下次尝试时对错误有所察觉,以免重蹈覆辙.</p>\n<p>所以当你犯了错儿时,应该学会深吸一口气,咬紧牙关,然后尽你所能地冷静、毫不留情地检查你记住的错误.</p>\n<p>或多或少熟练地做出猜测,算出可能的结果,利用结果为下一步工作做出修正,这样的一般方法已经得到了广泛的应用.这个方法的关键在于,所犯的错误要足够清楚、精确,使得出的结果足够确定.</p>\n<h4 id=\"归谬法-发现错误命题的妙招\"><a href=\"#归谬法-发现错误命题的妙招\" class=\"headerlink\" title=\"归谬法  发现错误命题的妙招\"></a>归谬法  发现错误命题的妙招</h4><p>你把一个推论中的一些命题或假设拿过来,看看有没有前后矛盾,或者是否隐含着荒谬之处.要是有,必须丢掉出问题的命题,或者重新推论.</p>\n<p>有一个可以对付归谬法的招数,那就是迎难而上、死不松口.</p>\n<p>“归谬”的尝试却有可能帮助我们认识到,这种想法为什么应该被我们认真对待.</p>\n<h4 id=\"拉波波特法则-批评他人的正确方式\"><a href=\"#拉波波特法则-批评他人的正确方式\" class=\"headerlink\" title=\"拉波波特法则  批评他人的正确方式\"></a>拉波波特法则  批评他人的正确方式</h4><p> ① 你应该非常清楚、生动、不偏不倚地重述对手的想法,使得你的对手说:”谢谢你,我刚才要是像你这么表述就好了.”<br> ② 你应该把对方观点中你所同意的部分都列出来,尤其是那种并非被人们广泛接受了的观点.<br> ③ 你应该提到那些从你对手那里学到的东西.<br> ④ 只有完成了以上三点,你才能说一句反驳或批评的话.</p>\n<p>你应该时刻提醒自己:对于一位作者来说,如果你勇敢地为他的观点寻找根据,但什么也没找到的话,可能会比气呼呼地批评他的刮泥单来得更有杀伤力.</p>\n<h4 id=\"史特金定律-不要把时间浪费在无意义的事情上\"><a href=\"#史特金定律-不要把时间浪费在无意义的事情上\" class=\"headerlink\" title=\"史特金定律  不要把时间浪费在无意义的事情上\"></a>史特金定律  不要把时间浪费在无意义的事情上</h4><p>任何事物当中的百分之九十都是垃圾.</p>\n<p>当你准备批评某一领域、某一流派、某一学科或者某一艺术形式的时候,请别在嘲笑垃圾上浪费自己和我们大家的时间!要么就追着优秀的东西批,要么就别干这活儿.</p>\n<h4 id=\"奥卡姆剃刀-如无必要-勿增实体\"><a href=\"#奥卡姆剃刀-如无必要-勿增实体\" class=\"headerlink\" title=\"奥卡姆剃刀  如无必要,勿增实体\"></a>奥卡姆剃刀  如无必要,勿增实体</h4><p>如果你能找到一个更简单的理论,包含更少的因素、更少的实体,而它也一样可以很好地解释现象,就不要再构造一个大而无当的复杂理论了.</p>\n<p>奥卡姆剃刀只是一种经验法则、一条有益的建议.</p>\n<h4 id=\"奥卡姆扫把-有意隐瞒对自己不利的证据\"><a href=\"#奥卡姆扫把-有意隐瞒对自己不利的证据\" class=\"headerlink\" title=\"奥卡姆扫把  有意隐瞒对自己不利的证据\"></a>奥卡姆扫把  有意隐瞒对自己不利的证据</h4><p>某些理论的辩护者本着智性上最大的不诚实把对自己不利的事实往地毯下面扫.</p>\n<p>即使是一位严肃的科学工作者有时也难以抵抗对某些数据的”忽视”,尤其是当那些数据会伤害到他们心爱的理论时.但无论如何,这都是一个需要抵御的诱惑.</p>"},{"title":"直觉泵-通用思考工具(二)","date":"2020-01-05T16:02:50.000Z","_content":"上一篇介绍了犯错儿、归谬法、拉波波特法则、史特金定律、奥卡姆剃刀以及奥卡姆扫把这些通用思考工具,今天把剩下的通用思考工具(外行做媒、跳出系统、古尔德的3种思考工具、小心\"当然\"这个词、反问、什么是\"深马\")都进行介绍.\n<!--more-->\n\n#### 外行做媒  既不\"过少解释\",又不\"惹恼行家\"\n\n\"过少解释\"即指观众对专家所说的内容不是非常了解,专家们常常自说自话.\n\"惹恼行家\"是说跟一位专家过度解释某件事是一种严重的侮辱,就好比对他说:\"用不用我教你怎么拼写啊?\"\n\n让专家们对一群充满好奇心的业余听众表达他们的观点,同时让另外一些专家旁听.参与这个活动的每一个人都应该知道:这一实验的目的就是让参与者能够安心地用\"大家\"都能理解的术语说话.\n\n#### 跳出系统  打破惯性思维的好方法\n\n跳出系统是一个重要的策略,不仅在科学和哲学领域,在艺术领域也是.创造力是一种让人梦寐以求却只有少数人才能够拥有的才具,它往往会以一种前所未有的、让人意想不到的方式打破孕育它的系统所设定的规则,也许是古典音乐的和谐体系,也许是十四行诗甚至打油诗中的格律和韵律,也许是某种艺术的审美\"教规\"、良好形式.又或者,它打破的是某些理论或研究领域中的假设和原则.\n\n有创造性不只意味着追求新奇的东西--因为新奇的东西谁都能得到,只要把材料随机排列一番就行了--难的是跳出一个既定的体系,并且跳得有道理.\n\n如果你想颠覆传统,最好先去了解它.所以外行或新手很少能够想出真正有创造性的东西.\n\n当你面对一个科学或哲学问题时,需要跳出的系统常常根深蒂固,以至于它像你所呼吸的空气一样令人不易察觉.\n\n如果一个长期存在的争论似乎无法取得进展,双方都顽固地坚持自己的正确性,往往是因为他们都同意的某个东西其实是错误的.两方都认为这是明摆着的事,是不言而喻的.\n\n很多跳出系统的伟大时刻都与抛弃某些备受好评的东西有关,后来我们才发现这些东西其实是不存在的.\n\n有时候,一个理论中的问题可能是很久以前埋下的,那是可能有人说:\"为了便于论证,让我们假设......\"然后人们纷纷同意:\"为了便于论证,我们就这样假设吧.\"后来人们你来我往地讨论下去,却没有人记得最初的假设了!\n\n#### 古尔德的3种思考工具  \"不如说\" \"故意堆积\"和\"古尔德二步\"\n\n 1. \"不如说\"  \n    \"不如说\"能够轻快地令你滑入\"虚假二分\".它一般是这样用的:\"情况与其说如何如何(你所相信的主流观点);不如说是如此如此(彻底不同于前者).\"\n\n    \"不如说\"这一短语暗示了:由它衔接的前后两种主张之间有一种重要的不相容性,而这一点无需论证.\n\n 2. \"故意堆积\"  \n    它指的是前面说一堆观点，然后从某个方面论证他们是不对的，比如说“没有比这更荒唐的了”，来完成致命一击。而实际上，我们要论证的观点根本不是这个角度。\n\n    这两个容易引起误导的说法都是提醒我们在否定一个观点时要慎之又慎，不能因为某个方面错误就全盘否定。\n\n 3. 古尔德两步  \n    第一步 制造一个靶子,然后驳倒它.\n\n    第二步 主动把注意力转移到第一步驳论所用的证据上,这些证据本可以证明你的对手并未持有被你反驳的那种观点,而你则把他们诠释为对手面对你的攻击勉强让步了.\n\n#### 小心\"当然\"这个词  一种让你无需思考就认同花招\n\n\"当然\"一词通常像盏信号灯一样可以定位出论证当中的弱点所在,它是一个警告标识,提醒人们那里可能有一个吊杆托架.为什么呢?因为它恰好标示出了那种作者确实相信并且期待读者也会相信的东西.\n\n而恰恰在这种地方,我们会发现一些未经检验的\"自明之理\"并不是不言自明的.\n\n\"这就是无意识手法发挥作用的地方.轻轻一推,眼睛一眨,错误的前提就被晃过去了\"\n\n#### 反问  让你不好意思说\"不\"\n\n反问句的句尾是个问号,但却不意味着它需要我们去回答.也就是说,作者根本懒得等你给答案,因为答案这么明显,你好意思说\"不\"吗?换句话说,大部分反问句都是压缩版的归谬法,明显到不用再说了.\n\n#### 什么是\"深马\" 爱就一个字\n\n\"深马\",就是一个\"看上去\"重要、正确、深刻的命题,但它之所以看上去有这种效果是由于它的模棱两可.\n\n你从一个角度读这句话,会发现它明显是错误的,但如果他是真的,会显得特别惊天动地;而从另一个角度读这句话,你又会发现它是真的,但是特别无聊.\n","source":"_posts/直觉泵-通用思考工具(二).md","raw":"---\ntitle: 直觉泵-通用思考工具(二)\ndate: 2020-01-06 00:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n上一篇介绍了犯错儿、归谬法、拉波波特法则、史特金定律、奥卡姆剃刀以及奥卡姆扫把这些通用思考工具,今天把剩下的通用思考工具(外行做媒、跳出系统、古尔德的3种思考工具、小心\"当然\"这个词、反问、什么是\"深马\")都进行介绍.\n<!--more-->\n\n#### 外行做媒  既不\"过少解释\",又不\"惹恼行家\"\n\n\"过少解释\"即指观众对专家所说的内容不是非常了解,专家们常常自说自话.\n\"惹恼行家\"是说跟一位专家过度解释某件事是一种严重的侮辱,就好比对他说:\"用不用我教你怎么拼写啊?\"\n\n让专家们对一群充满好奇心的业余听众表达他们的观点,同时让另外一些专家旁听.参与这个活动的每一个人都应该知道:这一实验的目的就是让参与者能够安心地用\"大家\"都能理解的术语说话.\n\n#### 跳出系统  打破惯性思维的好方法\n\n跳出系统是一个重要的策略,不仅在科学和哲学领域,在艺术领域也是.创造力是一种让人梦寐以求却只有少数人才能够拥有的才具,它往往会以一种前所未有的、让人意想不到的方式打破孕育它的系统所设定的规则,也许是古典音乐的和谐体系,也许是十四行诗甚至打油诗中的格律和韵律,也许是某种艺术的审美\"教规\"、良好形式.又或者,它打破的是某些理论或研究领域中的假设和原则.\n\n有创造性不只意味着追求新奇的东西--因为新奇的东西谁都能得到,只要把材料随机排列一番就行了--难的是跳出一个既定的体系,并且跳得有道理.\n\n如果你想颠覆传统,最好先去了解它.所以外行或新手很少能够想出真正有创造性的东西.\n\n当你面对一个科学或哲学问题时,需要跳出的系统常常根深蒂固,以至于它像你所呼吸的空气一样令人不易察觉.\n\n如果一个长期存在的争论似乎无法取得进展,双方都顽固地坚持自己的正确性,往往是因为他们都同意的某个东西其实是错误的.两方都认为这是明摆着的事,是不言而喻的.\n\n很多跳出系统的伟大时刻都与抛弃某些备受好评的东西有关,后来我们才发现这些东西其实是不存在的.\n\n有时候,一个理论中的问题可能是很久以前埋下的,那是可能有人说:\"为了便于论证,让我们假设......\"然后人们纷纷同意:\"为了便于论证,我们就这样假设吧.\"后来人们你来我往地讨论下去,却没有人记得最初的假设了!\n\n#### 古尔德的3种思考工具  \"不如说\" \"故意堆积\"和\"古尔德二步\"\n\n 1. \"不如说\"  \n    \"不如说\"能够轻快地令你滑入\"虚假二分\".它一般是这样用的:\"情况与其说如何如何(你所相信的主流观点);不如说是如此如此(彻底不同于前者).\"\n\n    \"不如说\"这一短语暗示了:由它衔接的前后两种主张之间有一种重要的不相容性,而这一点无需论证.\n\n 2. \"故意堆积\"  \n    它指的是前面说一堆观点，然后从某个方面论证他们是不对的，比如说“没有比这更荒唐的了”，来完成致命一击。而实际上，我们要论证的观点根本不是这个角度。\n\n    这两个容易引起误导的说法都是提醒我们在否定一个观点时要慎之又慎，不能因为某个方面错误就全盘否定。\n\n 3. 古尔德两步  \n    第一步 制造一个靶子,然后驳倒它.\n\n    第二步 主动把注意力转移到第一步驳论所用的证据上,这些证据本可以证明你的对手并未持有被你反驳的那种观点,而你则把他们诠释为对手面对你的攻击勉强让步了.\n\n#### 小心\"当然\"这个词  一种让你无需思考就认同花招\n\n\"当然\"一词通常像盏信号灯一样可以定位出论证当中的弱点所在,它是一个警告标识,提醒人们那里可能有一个吊杆托架.为什么呢?因为它恰好标示出了那种作者确实相信并且期待读者也会相信的东西.\n\n而恰恰在这种地方,我们会发现一些未经检验的\"自明之理\"并不是不言自明的.\n\n\"这就是无意识手法发挥作用的地方.轻轻一推,眼睛一眨,错误的前提就被晃过去了\"\n\n#### 反问  让你不好意思说\"不\"\n\n反问句的句尾是个问号,但却不意味着它需要我们去回答.也就是说,作者根本懒得等你给答案,因为答案这么明显,你好意思说\"不\"吗?换句话说,大部分反问句都是压缩版的归谬法,明显到不用再说了.\n\n#### 什么是\"深马\" 爱就一个字\n\n\"深马\",就是一个\"看上去\"重要、正确、深刻的命题,但它之所以看上去有这种效果是由于它的模棱两可.\n\n你从一个角度读这句话,会发现它明显是错误的,但如果他是真的,会显得特别惊天动地;而从另一个角度读这句话,你又会发现它是真的,但是特别无聊.\n","slug":"直觉泵-通用思考工具(二)","published":1,"updated":"2021-03-30T03:24:16.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx1a006hvcuaalmd8gfq","content":"<p>上一篇介绍了犯错儿、归谬法、拉波波特法则、史特金定律、奥卡姆剃刀以及奥卡姆扫把这些通用思考工具,今天把剩下的通用思考工具(外行做媒、跳出系统、古尔德的3种思考工具、小心”当然”这个词、反问、什么是”深马”)都进行介绍.</p>\n<span id=\"more\"></span>\n\n<h4 id=\"外行做媒-既不”过少解释”-又不”惹恼行家”\"><a href=\"#外行做媒-既不”过少解释”-又不”惹恼行家”\" class=\"headerlink\" title=\"外行做媒  既不”过少解释”,又不”惹恼行家”\"></a>外行做媒  既不”过少解释”,又不”惹恼行家”</h4><p>“过少解释”即指观众对专家所说的内容不是非常了解,专家们常常自说自话.<br>“惹恼行家”是说跟一位专家过度解释某件事是一种严重的侮辱,就好比对他说:”用不用我教你怎么拼写啊?”</p>\n<p>让专家们对一群充满好奇心的业余听众表达他们的观点,同时让另外一些专家旁听.参与这个活动的每一个人都应该知道:这一实验的目的就是让参与者能够安心地用”大家”都能理解的术语说话.</p>\n<h4 id=\"跳出系统-打破惯性思维的好方法\"><a href=\"#跳出系统-打破惯性思维的好方法\" class=\"headerlink\" title=\"跳出系统  打破惯性思维的好方法\"></a>跳出系统  打破惯性思维的好方法</h4><p>跳出系统是一个重要的策略,不仅在科学和哲学领域,在艺术领域也是.创造力是一种让人梦寐以求却只有少数人才能够拥有的才具,它往往会以一种前所未有的、让人意想不到的方式打破孕育它的系统所设定的规则,也许是古典音乐的和谐体系,也许是十四行诗甚至打油诗中的格律和韵律,也许是某种艺术的审美”教规”、良好形式.又或者,它打破的是某些理论或研究领域中的假设和原则.</p>\n<p>有创造性不只意味着追求新奇的东西–因为新奇的东西谁都能得到,只要把材料随机排列一番就行了–难的是跳出一个既定的体系,并且跳得有道理.</p>\n<p>如果你想颠覆传统,最好先去了解它.所以外行或新手很少能够想出真正有创造性的东西.</p>\n<p>当你面对一个科学或哲学问题时,需要跳出的系统常常根深蒂固,以至于它像你所呼吸的空气一样令人不易察觉.</p>\n<p>如果一个长期存在的争论似乎无法取得进展,双方都顽固地坚持自己的正确性,往往是因为他们都同意的某个东西其实是错误的.两方都认为这是明摆着的事,是不言而喻的.</p>\n<p>很多跳出系统的伟大时刻都与抛弃某些备受好评的东西有关,后来我们才发现这些东西其实是不存在的.</p>\n<p>有时候,一个理论中的问题可能是很久以前埋下的,那是可能有人说:”为了便于论证,让我们假设……”然后人们纷纷同意:”为了便于论证,我们就这样假设吧.”后来人们你来我往地讨论下去,却没有人记得最初的假设了!</p>\n<h4 id=\"古尔德的3种思考工具-“不如说”-“故意堆积”和”古尔德二步”\"><a href=\"#古尔德的3种思考工具-“不如说”-“故意堆积”和”古尔德二步”\" class=\"headerlink\" title=\"古尔德的3种思考工具  “不如说” “故意堆积”和”古尔德二步”\"></a>古尔德的3种思考工具  “不如说” “故意堆积”和”古尔德二步”</h4><ol>\n<li><p>“不如说”<br>“不如说”能够轻快地令你滑入”虚假二分”.它一般是这样用的:”情况与其说如何如何(你所相信的主流观点);不如说是如此如此(彻底不同于前者).”</p>\n<p>“不如说”这一短语暗示了:由它衔接的前后两种主张之间有一种重要的不相容性,而这一点无需论证.</p>\n</li>\n<li><p>“故意堆积”<br>它指的是前面说一堆观点，然后从某个方面论证他们是不对的，比如说“没有比这更荒唐的了”，来完成致命一击。而实际上，我们要论证的观点根本不是这个角度。</p>\n<p>这两个容易引起误导的说法都是提醒我们在否定一个观点时要慎之又慎，不能因为某个方面错误就全盘否定。</p>\n</li>\n<li><p>古尔德两步<br>第一步 制造一个靶子,然后驳倒它.</p>\n<p>第二步 主动把注意力转移到第一步驳论所用的证据上,这些证据本可以证明你的对手并未持有被你反驳的那种观点,而你则把他们诠释为对手面对你的攻击勉强让步了.</p>\n</li>\n</ol>\n<h4 id=\"小心”当然”这个词-一种让你无需思考就认同花招\"><a href=\"#小心”当然”这个词-一种让你无需思考就认同花招\" class=\"headerlink\" title=\"小心”当然”这个词  一种让你无需思考就认同花招\"></a>小心”当然”这个词  一种让你无需思考就认同花招</h4><p>“当然”一词通常像盏信号灯一样可以定位出论证当中的弱点所在,它是一个警告标识,提醒人们那里可能有一个吊杆托架.为什么呢?因为它恰好标示出了那种作者确实相信并且期待读者也会相信的东西.</p>\n<p>而恰恰在这种地方,我们会发现一些未经检验的”自明之理”并不是不言自明的.</p>\n<p>“这就是无意识手法发挥作用的地方.轻轻一推,眼睛一眨,错误的前提就被晃过去了”</p>\n<h4 id=\"反问-让你不好意思说”不”\"><a href=\"#反问-让你不好意思说”不”\" class=\"headerlink\" title=\"反问  让你不好意思说”不”\"></a>反问  让你不好意思说”不”</h4><p>反问句的句尾是个问号,但却不意味着它需要我们去回答.也就是说,作者根本懒得等你给答案,因为答案这么明显,你好意思说”不”吗?换句话说,大部分反问句都是压缩版的归谬法,明显到不用再说了.</p>\n<h4 id=\"什么是”深马”-爱就一个字\"><a href=\"#什么是”深马”-爱就一个字\" class=\"headerlink\" title=\"什么是”深马” 爱就一个字\"></a>什么是”深马” 爱就一个字</h4><p>“深马”,就是一个”看上去”重要、正确、深刻的命题,但它之所以看上去有这种效果是由于它的模棱两可.</p>\n<p>你从一个角度读这句话,会发现它明显是错误的,但如果他是真的,会显得特别惊天动地;而从另一个角度读这句话,你又会发现它是真的,但是特别无聊.</p>\n","site":{"data":{}},"length":1666,"excerpt":"<p>上一篇介绍了犯错儿、归谬法、拉波波特法则、史特金定律、奥卡姆剃刀以及奥卡姆扫把这些通用思考工具,今天把剩下的通用思考工具(外行做媒、跳出系统、古尔德的3种思考工具、小心”当然”这个词、反问、什么是”深马”)都进行介绍.</p>","more":"<h4 id=\"外行做媒-既不”过少解释”-又不”惹恼行家”\"><a href=\"#外行做媒-既不”过少解释”-又不”惹恼行家”\" class=\"headerlink\" title=\"外行做媒  既不”过少解释”,又不”惹恼行家”\"></a>外行做媒  既不”过少解释”,又不”惹恼行家”</h4><p>“过少解释”即指观众对专家所说的内容不是非常了解,专家们常常自说自话.<br>“惹恼行家”是说跟一位专家过度解释某件事是一种严重的侮辱,就好比对他说:”用不用我教你怎么拼写啊?”</p>\n<p>让专家们对一群充满好奇心的业余听众表达他们的观点,同时让另外一些专家旁听.参与这个活动的每一个人都应该知道:这一实验的目的就是让参与者能够安心地用”大家”都能理解的术语说话.</p>\n<h4 id=\"跳出系统-打破惯性思维的好方法\"><a href=\"#跳出系统-打破惯性思维的好方法\" class=\"headerlink\" title=\"跳出系统  打破惯性思维的好方法\"></a>跳出系统  打破惯性思维的好方法</h4><p>跳出系统是一个重要的策略,不仅在科学和哲学领域,在艺术领域也是.创造力是一种让人梦寐以求却只有少数人才能够拥有的才具,它往往会以一种前所未有的、让人意想不到的方式打破孕育它的系统所设定的规则,也许是古典音乐的和谐体系,也许是十四行诗甚至打油诗中的格律和韵律,也许是某种艺术的审美”教规”、良好形式.又或者,它打破的是某些理论或研究领域中的假设和原则.</p>\n<p>有创造性不只意味着追求新奇的东西–因为新奇的东西谁都能得到,只要把材料随机排列一番就行了–难的是跳出一个既定的体系,并且跳得有道理.</p>\n<p>如果你想颠覆传统,最好先去了解它.所以外行或新手很少能够想出真正有创造性的东西.</p>\n<p>当你面对一个科学或哲学问题时,需要跳出的系统常常根深蒂固,以至于它像你所呼吸的空气一样令人不易察觉.</p>\n<p>如果一个长期存在的争论似乎无法取得进展,双方都顽固地坚持自己的正确性,往往是因为他们都同意的某个东西其实是错误的.两方都认为这是明摆着的事,是不言而喻的.</p>\n<p>很多跳出系统的伟大时刻都与抛弃某些备受好评的东西有关,后来我们才发现这些东西其实是不存在的.</p>\n<p>有时候,一个理论中的问题可能是很久以前埋下的,那是可能有人说:”为了便于论证,让我们假设……”然后人们纷纷同意:”为了便于论证,我们就这样假设吧.”后来人们你来我往地讨论下去,却没有人记得最初的假设了!</p>\n<h4 id=\"古尔德的3种思考工具-“不如说”-“故意堆积”和”古尔德二步”\"><a href=\"#古尔德的3种思考工具-“不如说”-“故意堆积”和”古尔德二步”\" class=\"headerlink\" title=\"古尔德的3种思考工具  “不如说” “故意堆积”和”古尔德二步”\"></a>古尔德的3种思考工具  “不如说” “故意堆积”和”古尔德二步”</h4><ol>\n<li><p>“不如说”<br>“不如说”能够轻快地令你滑入”虚假二分”.它一般是这样用的:”情况与其说如何如何(你所相信的主流观点);不如说是如此如此(彻底不同于前者).”</p>\n<p>“不如说”这一短语暗示了:由它衔接的前后两种主张之间有一种重要的不相容性,而这一点无需论证.</p>\n</li>\n<li><p>“故意堆积”<br>它指的是前面说一堆观点，然后从某个方面论证他们是不对的，比如说“没有比这更荒唐的了”，来完成致命一击。而实际上，我们要论证的观点根本不是这个角度。</p>\n<p>这两个容易引起误导的说法都是提醒我们在否定一个观点时要慎之又慎，不能因为某个方面错误就全盘否定。</p>\n</li>\n<li><p>古尔德两步<br>第一步 制造一个靶子,然后驳倒它.</p>\n<p>第二步 主动把注意力转移到第一步驳论所用的证据上,这些证据本可以证明你的对手并未持有被你反驳的那种观点,而你则把他们诠释为对手面对你的攻击勉强让步了.</p>\n</li>\n</ol>\n<h4 id=\"小心”当然”这个词-一种让你无需思考就认同花招\"><a href=\"#小心”当然”这个词-一种让你无需思考就认同花招\" class=\"headerlink\" title=\"小心”当然”这个词  一种让你无需思考就认同花招\"></a>小心”当然”这个词  一种让你无需思考就认同花招</h4><p>“当然”一词通常像盏信号灯一样可以定位出论证当中的弱点所在,它是一个警告标识,提醒人们那里可能有一个吊杆托架.为什么呢?因为它恰好标示出了那种作者确实相信并且期待读者也会相信的东西.</p>\n<p>而恰恰在这种地方,我们会发现一些未经检验的”自明之理”并不是不言自明的.</p>\n<p>“这就是无意识手法发挥作用的地方.轻轻一推,眼睛一眨,错误的前提就被晃过去了”</p>\n<h4 id=\"反问-让你不好意思说”不”\"><a href=\"#反问-让你不好意思说”不”\" class=\"headerlink\" title=\"反问  让你不好意思说”不”\"></a>反问  让你不好意思说”不”</h4><p>反问句的句尾是个问号,但却不意味着它需要我们去回答.也就是说,作者根本懒得等你给答案,因为答案这么明显,你好意思说”不”吗?换句话说,大部分反问句都是压缩版的归谬法,明显到不用再说了.</p>\n<h4 id=\"什么是”深马”-爱就一个字\"><a href=\"#什么是”深马”-爱就一个字\" class=\"headerlink\" title=\"什么是”深马” 爱就一个字\"></a>什么是”深马” 爱就一个字</h4><p>“深马”,就是一个”看上去”重要、正确、深刻的命题,但它之所以看上去有这种效果是由于它的模棱两可.</p>\n<p>你从一个角度读这句话,会发现它明显是错误的,但如果他是真的,会显得特别惊天动地;而从另一个角度读这句话,你又会发现它是真的,但是特别无聊.</p>"},{"title":"罗辑思维 - 认知篇","date":"2021-02-05T13:53:02.000Z","_content":"多角度理解认知 -- 从越多角度看待问题，就有越多解决问题的方法！\n<!--more-->\n\n### 第一章 起点：认知升级\n\n我学习得越多，点亮的灯就越多，最后，我要照亮的是我自己的道路。我不关心它的对错，我只关心它对我是不是有启发。\n\n#### 保持头脑的开放性\n\n确定性的知识越来越少，一切都在飞速演化：真理性的知识也越来越少，互相矛盾也未尝不可，那该怎么办？答案只有一个，就是保持头脑的开放性。\n> 不管我一生中取得了多大的成功，其主要的原因都不是我知道多少事情，而是我知道在无知的情况下自己应该怎么做。\n\n#### 学会和随机性打交道\n\n如果一个人声称自己认知能力不错，他得具备两个要件：第一要有科学精神，第二还要学会接受随机性。\n\n迷信的对立面人们过去都以为是科学，其实不是。迷信和科学都是在找规律，只不过，科学讲究方法和证据，而迷信是一通胡来。从这个意义上说，迷信和科学反倒是近亲，都符合人类要给现象找原因的本能。\n\n#### 做知识的游牧民族\n\n我们必须成为知识的游牧民族，哪里水草丰美，就向哪里迁徙。随着自己的兴趣和需求，在知识的原野上，用旺盛的好奇心，四处奔跑。\n\n不要迷信信息输入，要行动，根据自己的当下问题去不断试错。\n\n这个时代任何一个做出成绩的人，都是这样，快速了解一个新领域，补充自己对世界的理解，迅速去尝试，去行动，在行动中试错，在反馈中迭代，而不是先系统学习再动手。\n\n掌握游牧民族式的学习方式的三个核心认知\n\n1. 不要迷信系统学习。\n2. 不要相信什么一揽子解决方案和万能钥匙。\n3. 不要迷信信息输入。\n\n#### 知识大迁徙，人人都是福尔摩斯\n\n过去的学习，是面对已知的学习；现在的学习，是面对未知的学习，人人都是福尔摩斯。\n\n不管什么知识，都可以成为我们踏入未知世界的踏板，一个片段的知识，会成为我们求知路上的援兵，它是不知道什么时候就会起作用的接应。它不是答案，但它是通向答案的钥匙。\n\n知识的“盲点”不怕，可怕的是知识的“盲维”。\n\n一知半解、一鳞半爪的知识，它作为知识，当然是不精确、不系统的，甚至不正确，孤立地看没有用。但正是因为它分散、碎片、不成系统，在知识的网络效应里，它就极有可能在机缘凑巧的时候，填补形成一个我们认知世界的维度，让我们一个认知盲维突然透进了一丝亮光，这就是它价值连城的地方。\n\n在未知的海洋里面，任何一根小树枝都是救命稻草，一些微茫的小线索，哪怕不精确，利用现在的互联网工具，利用线索之间的交叉关系，找到答案并不难。一个破案的侦探是不会在乎线索大小的。\n\n#### 突破“元无知”\n\n百度的搜索框就放在那里，人类的大部分成型知识，都可以通过搜索找到。但是在搜索框里搜索什么呢？输入一个什么词，成为我们的第一个起点呢？\n\n怎么去找这种零星，维度丰富的知识？、\n\n1. 人是万物的尺度，人也是零星知识的最好的线头。\n2. 要有自己的观测复杂现象的仪表系统。要用从一个特别显而易见的表象中看出背后一大堆信息的工具，就像通过看温度计能知道温度一样。\n\n#### 什么时候该孤注一掷\n\n所有的选择难题，本质上都是视野狭窄带来的。偏好不够用了，那就看看概率。概率不够用了，那就看看运气。运气也看不清了，那就看看公共利益。甚至公共利益也看不清，那就想想自己想成为什么样的人。\n\n对我们每个人来说，重大的一次性的选择，当然很难，不可重复，没有可靠的依据。但是如果跳出来呢？跳到整个群体、整个人类、全部时空，那就是一次性的选择了，那是可重复的选择。多少人生老病死，多少人悲欢离合，对人类群体来说，司空见惯。假设一个人代表整个群体，那怎么选，就有依据了啊。\n\n#### 为什么要做一个“斯多葛”\n\n我们必须全力以赴，同时又不抱任何希望。不管做什么事，都要把它当作是全世界最重要的一件事，但是同时又知道这件事根本无关紧要。\n\n斯多葛的人生哲学，把自己从环境中剥离，认知到自己是一个纯粹的人，专注思考自己的生命担当。\n\n斯多葛的思维方式，总是设想最坏的情形，假设一切已被命运夺走，我该怎么办？我怎样仍然做一个最好的自己？\n\n斯多葛派的主张\n\n1. 爱我们所爱，但要知道我们所爱的都如朝露。\n2. 控制能控制的，无法控制的要放手。\n3. 对抗命运对未来的安排，但接受已成现实的过去与现在，仿佛它是宿命。\n4. 要克制自己的欲望。这样可以更好地反思生活的甜美，获得意志力、勇气和自制力。\n5. 要勤于反思。每天都要反思，我今天改正了什么？今天抵制了什么？今天有什么收获？\n\n#### 谁是最“愚昧”的人\n\n就是在现代自由社会，服从，特别是服从专业知识共同体，反而越成了一种重要的能力。\n\n这个世界上谁是最“愚昧”的人？不是没有知识的人，而是一知半解、有一点知识，足够感染到这些互联网知识病毒，但是又没有足够的知识可以消毒的人。\n\n如果我在自己的非专业领域，突然出现了某种自信，甚至这种自信还有一点知识的基础，那就得警惕了，我是不是正站在愚昧的悬崖边缘？\n\n#### 认识什么是“边缘突破”\n\n在技术发展的过程中，经常出现类似的现象，原来很边缘的技术和工作，因为各种机缘巧合，最终成为了整个协作网络的中心。\n\n#### 工具产生的真正意义\n\n问题本身不是目的，而在于梳理一个参考标准。\n\n有的工具，是对人现有力量的强化、延伸，最受欢迎。有的工具，看起来不是那么有力量，但是它能给人观察世界增添一个维度。\n\n技术的演进，不是单维度地增强人的力量，而是在出其不意的地方，在其他维度上对我们猛推一把。\n\n#### 意义炼金术\n\n人的认知越提高，经验越丰富，越会发现自己的认知越来越不够用。\n\n我们不是要通过提高认知来更好地行动。我们是要在承认自己认知有局限的前提下，更有效地行动。\n\n意义这玩意儿，它本身不能用理性来考问。意义的价值 ，是为我们排除了大量的不确定性，让我们开始行动。\n\n意义不是别的，就是一个约定。因为有了这个约定，才可以开始行动，这就是意义的价值。\n\n在看见别人沉浸在某种意义中，超常努力的时候，我们心里得清楚：那是炼金术。不要看他的理由是不是谬误，等着看他的结果。\n\n#### 认识“意义”的价值\n\n认知能力低，并不是灾难。真正的灾难，是我们无法屏蔽铺天盖地的大世界原本的复杂性，从而陷入无法行动的处境。这个时候，如果心中有意义，就会帮你屏蔽大世界的复杂性。\n\n意义的价值，就是设立一个边界，将所有的无限游戏，切割成一个个让我们能行动的有限游戏。一件事有了意义，它就成了一个独立的小世界，周边的大世界就和它无关了。人就可以在这个假想的，甚至是谬误的小世界李展开行动。\n\n意义是把世界变小的那些墙、那些篱笆。让我们只看到眼前这一点点的世界、一点点的诱惑后，信心满满地出发了。它替我们遮蔽了漫天遍野的不确定性，让我们在无知中就开始行动。\n\n意义不是表面看起来的迷梦，它也不是别人给我们设的一个骗局，它是我们人生的必需品，它是我们认知的替代品，它是我们一刻也不能缺的行动拐杖。\n\n#### 迷信有什么用\n\n认知复杂性是一个不能纵容的坏东西。对付它的办法有两个：第一，升级认知，用你的智慧把握它；第二个恰恰相反，缩窄认知，用一个迷信屏蔽它。\n\n迷信不仅仅是一种认知，迷信还是一种策略，它是某些人应对复杂状况的一种特殊手段和策略。\n\n#### 我们对中年有什么误解\n\n中年不是衰退期，而是分工的转变期，将体能上的优势切换为大脑上的优势。\n\n一个中年人感受到的所有危机，其实都是为了让大脑保持在巅峰状态而付出的代价。\n\n#### 为什么青年才俊总有机会\n\n一般站在年轻人的角度看，世界好像是被资源拥有者掌握的，我再有才华也没有用，手里没有资源，我怎么能有机会呢？\n\n年轻人的三个重要资源：\n\n1. 年轻，有的是时间，可以干其他人干不动的苦活儿，累活儿，长期性的活儿。\n2. 年轻人有开创新的赛道的可能，当别人已经有了自己的专业、志趣和方向的时候，原先赛道上的存量会绑架他，减少他切换赛道的可能性，削弱他在新赛道上跟一个年轻人长跑的意志。\n3. 年轻人，通常很穷，但正是因为穷，就更容易接收到市场传来的信号。\n","source":"_posts/罗辑思维.md","raw":"---\ntitle: 罗辑思维 - 认知篇\ndate: 2021-02-05 21:53:02\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 罗振宇\n---\n多角度理解认知 -- 从越多角度看待问题，就有越多解决问题的方法！\n<!--more-->\n\n### 第一章 起点：认知升级\n\n我学习得越多，点亮的灯就越多，最后，我要照亮的是我自己的道路。我不关心它的对错，我只关心它对我是不是有启发。\n\n#### 保持头脑的开放性\n\n确定性的知识越来越少，一切都在飞速演化：真理性的知识也越来越少，互相矛盾也未尝不可，那该怎么办？答案只有一个，就是保持头脑的开放性。\n> 不管我一生中取得了多大的成功，其主要的原因都不是我知道多少事情，而是我知道在无知的情况下自己应该怎么做。\n\n#### 学会和随机性打交道\n\n如果一个人声称自己认知能力不错，他得具备两个要件：第一要有科学精神，第二还要学会接受随机性。\n\n迷信的对立面人们过去都以为是科学，其实不是。迷信和科学都是在找规律，只不过，科学讲究方法和证据，而迷信是一通胡来。从这个意义上说，迷信和科学反倒是近亲，都符合人类要给现象找原因的本能。\n\n#### 做知识的游牧民族\n\n我们必须成为知识的游牧民族，哪里水草丰美，就向哪里迁徙。随着自己的兴趣和需求，在知识的原野上，用旺盛的好奇心，四处奔跑。\n\n不要迷信信息输入，要行动，根据自己的当下问题去不断试错。\n\n这个时代任何一个做出成绩的人，都是这样，快速了解一个新领域，补充自己对世界的理解，迅速去尝试，去行动，在行动中试错，在反馈中迭代，而不是先系统学习再动手。\n\n掌握游牧民族式的学习方式的三个核心认知\n\n1. 不要迷信系统学习。\n2. 不要相信什么一揽子解决方案和万能钥匙。\n3. 不要迷信信息输入。\n\n#### 知识大迁徙，人人都是福尔摩斯\n\n过去的学习，是面对已知的学习；现在的学习，是面对未知的学习，人人都是福尔摩斯。\n\n不管什么知识，都可以成为我们踏入未知世界的踏板，一个片段的知识，会成为我们求知路上的援兵，它是不知道什么时候就会起作用的接应。它不是答案，但它是通向答案的钥匙。\n\n知识的“盲点”不怕，可怕的是知识的“盲维”。\n\n一知半解、一鳞半爪的知识，它作为知识，当然是不精确、不系统的，甚至不正确，孤立地看没有用。但正是因为它分散、碎片、不成系统，在知识的网络效应里，它就极有可能在机缘凑巧的时候，填补形成一个我们认知世界的维度，让我们一个认知盲维突然透进了一丝亮光，这就是它价值连城的地方。\n\n在未知的海洋里面，任何一根小树枝都是救命稻草，一些微茫的小线索，哪怕不精确，利用现在的互联网工具，利用线索之间的交叉关系，找到答案并不难。一个破案的侦探是不会在乎线索大小的。\n\n#### 突破“元无知”\n\n百度的搜索框就放在那里，人类的大部分成型知识，都可以通过搜索找到。但是在搜索框里搜索什么呢？输入一个什么词，成为我们的第一个起点呢？\n\n怎么去找这种零星，维度丰富的知识？、\n\n1. 人是万物的尺度，人也是零星知识的最好的线头。\n2. 要有自己的观测复杂现象的仪表系统。要用从一个特别显而易见的表象中看出背后一大堆信息的工具，就像通过看温度计能知道温度一样。\n\n#### 什么时候该孤注一掷\n\n所有的选择难题，本质上都是视野狭窄带来的。偏好不够用了，那就看看概率。概率不够用了，那就看看运气。运气也看不清了，那就看看公共利益。甚至公共利益也看不清，那就想想自己想成为什么样的人。\n\n对我们每个人来说，重大的一次性的选择，当然很难，不可重复，没有可靠的依据。但是如果跳出来呢？跳到整个群体、整个人类、全部时空，那就是一次性的选择了，那是可重复的选择。多少人生老病死，多少人悲欢离合，对人类群体来说，司空见惯。假设一个人代表整个群体，那怎么选，就有依据了啊。\n\n#### 为什么要做一个“斯多葛”\n\n我们必须全力以赴，同时又不抱任何希望。不管做什么事，都要把它当作是全世界最重要的一件事，但是同时又知道这件事根本无关紧要。\n\n斯多葛的人生哲学，把自己从环境中剥离，认知到自己是一个纯粹的人，专注思考自己的生命担当。\n\n斯多葛的思维方式，总是设想最坏的情形，假设一切已被命运夺走，我该怎么办？我怎样仍然做一个最好的自己？\n\n斯多葛派的主张\n\n1. 爱我们所爱，但要知道我们所爱的都如朝露。\n2. 控制能控制的，无法控制的要放手。\n3. 对抗命运对未来的安排，但接受已成现实的过去与现在，仿佛它是宿命。\n4. 要克制自己的欲望。这样可以更好地反思生活的甜美，获得意志力、勇气和自制力。\n5. 要勤于反思。每天都要反思，我今天改正了什么？今天抵制了什么？今天有什么收获？\n\n#### 谁是最“愚昧”的人\n\n就是在现代自由社会，服从，特别是服从专业知识共同体，反而越成了一种重要的能力。\n\n这个世界上谁是最“愚昧”的人？不是没有知识的人，而是一知半解、有一点知识，足够感染到这些互联网知识病毒，但是又没有足够的知识可以消毒的人。\n\n如果我在自己的非专业领域，突然出现了某种自信，甚至这种自信还有一点知识的基础，那就得警惕了，我是不是正站在愚昧的悬崖边缘？\n\n#### 认识什么是“边缘突破”\n\n在技术发展的过程中，经常出现类似的现象，原来很边缘的技术和工作，因为各种机缘巧合，最终成为了整个协作网络的中心。\n\n#### 工具产生的真正意义\n\n问题本身不是目的，而在于梳理一个参考标准。\n\n有的工具，是对人现有力量的强化、延伸，最受欢迎。有的工具，看起来不是那么有力量，但是它能给人观察世界增添一个维度。\n\n技术的演进，不是单维度地增强人的力量，而是在出其不意的地方，在其他维度上对我们猛推一把。\n\n#### 意义炼金术\n\n人的认知越提高，经验越丰富，越会发现自己的认知越来越不够用。\n\n我们不是要通过提高认知来更好地行动。我们是要在承认自己认知有局限的前提下，更有效地行动。\n\n意义这玩意儿，它本身不能用理性来考问。意义的价值 ，是为我们排除了大量的不确定性，让我们开始行动。\n\n意义不是别的，就是一个约定。因为有了这个约定，才可以开始行动，这就是意义的价值。\n\n在看见别人沉浸在某种意义中，超常努力的时候，我们心里得清楚：那是炼金术。不要看他的理由是不是谬误，等着看他的结果。\n\n#### 认识“意义”的价值\n\n认知能力低，并不是灾难。真正的灾难，是我们无法屏蔽铺天盖地的大世界原本的复杂性，从而陷入无法行动的处境。这个时候，如果心中有意义，就会帮你屏蔽大世界的复杂性。\n\n意义的价值，就是设立一个边界，将所有的无限游戏，切割成一个个让我们能行动的有限游戏。一件事有了意义，它就成了一个独立的小世界，周边的大世界就和它无关了。人就可以在这个假想的，甚至是谬误的小世界李展开行动。\n\n意义是把世界变小的那些墙、那些篱笆。让我们只看到眼前这一点点的世界、一点点的诱惑后，信心满满地出发了。它替我们遮蔽了漫天遍野的不确定性，让我们在无知中就开始行动。\n\n意义不是表面看起来的迷梦，它也不是别人给我们设的一个骗局，它是我们人生的必需品，它是我们认知的替代品，它是我们一刻也不能缺的行动拐杖。\n\n#### 迷信有什么用\n\n认知复杂性是一个不能纵容的坏东西。对付它的办法有两个：第一，升级认知，用你的智慧把握它；第二个恰恰相反，缩窄认知，用一个迷信屏蔽它。\n\n迷信不仅仅是一种认知，迷信还是一种策略，它是某些人应对复杂状况的一种特殊手段和策略。\n\n#### 我们对中年有什么误解\n\n中年不是衰退期，而是分工的转变期，将体能上的优势切换为大脑上的优势。\n\n一个中年人感受到的所有危机，其实都是为了让大脑保持在巅峰状态而付出的代价。\n\n#### 为什么青年才俊总有机会\n\n一般站在年轻人的角度看，世界好像是被资源拥有者掌握的，我再有才华也没有用，手里没有资源，我怎么能有机会呢？\n\n年轻人的三个重要资源：\n\n1. 年轻，有的是时间，可以干其他人干不动的苦活儿，累活儿，长期性的活儿。\n2. 年轻人有开创新的赛道的可能，当别人已经有了自己的专业、志趣和方向的时候，原先赛道上的存量会绑架他，减少他切换赛道的可能性，削弱他在新赛道上跟一个年轻人长跑的意志。\n3. 年轻人，通常很穷，但正是因为穷，就更容易接收到市场传来的信号。\n","slug":"罗辑思维","published":1,"updated":"2021-03-30T03:24:16.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx1b006kvcua88cyahq1","content":"<p>多角度理解认知 – 从越多角度看待问题，就有越多解决问题的方法！</p>\n<span id=\"more\"></span>\n\n<h3 id=\"第一章-起点：认知升级\"><a href=\"#第一章-起点：认知升级\" class=\"headerlink\" title=\"第一章 起点：认知升级\"></a>第一章 起点：认知升级</h3><p>我学习得越多，点亮的灯就越多，最后，我要照亮的是我自己的道路。我不关心它的对错，我只关心它对我是不是有启发。</p>\n<h4 id=\"保持头脑的开放性\"><a href=\"#保持头脑的开放性\" class=\"headerlink\" title=\"保持头脑的开放性\"></a>保持头脑的开放性</h4><p>确定性的知识越来越少，一切都在飞速演化：真理性的知识也越来越少，互相矛盾也未尝不可，那该怎么办？答案只有一个，就是保持头脑的开放性。</p>\n<blockquote>\n<p>不管我一生中取得了多大的成功，其主要的原因都不是我知道多少事情，而是我知道在无知的情况下自己应该怎么做。</p>\n</blockquote>\n<h4 id=\"学会和随机性打交道\"><a href=\"#学会和随机性打交道\" class=\"headerlink\" title=\"学会和随机性打交道\"></a>学会和随机性打交道</h4><p>如果一个人声称自己认知能力不错，他得具备两个要件：第一要有科学精神，第二还要学会接受随机性。</p>\n<p>迷信的对立面人们过去都以为是科学，其实不是。迷信和科学都是在找规律，只不过，科学讲究方法和证据，而迷信是一通胡来。从这个意义上说，迷信和科学反倒是近亲，都符合人类要给现象找原因的本能。</p>\n<h4 id=\"做知识的游牧民族\"><a href=\"#做知识的游牧民族\" class=\"headerlink\" title=\"做知识的游牧民族\"></a>做知识的游牧民族</h4><p>我们必须成为知识的游牧民族，哪里水草丰美，就向哪里迁徙。随着自己的兴趣和需求，在知识的原野上，用旺盛的好奇心，四处奔跑。</p>\n<p>不要迷信信息输入，要行动，根据自己的当下问题去不断试错。</p>\n<p>这个时代任何一个做出成绩的人，都是这样，快速了解一个新领域，补充自己对世界的理解，迅速去尝试，去行动，在行动中试错，在反馈中迭代，而不是先系统学习再动手。</p>\n<p>掌握游牧民族式的学习方式的三个核心认知</p>\n<ol>\n<li>不要迷信系统学习。</li>\n<li>不要相信什么一揽子解决方案和万能钥匙。</li>\n<li>不要迷信信息输入。</li>\n</ol>\n<h4 id=\"知识大迁徙，人人都是福尔摩斯\"><a href=\"#知识大迁徙，人人都是福尔摩斯\" class=\"headerlink\" title=\"知识大迁徙，人人都是福尔摩斯\"></a>知识大迁徙，人人都是福尔摩斯</h4><p>过去的学习，是面对已知的学习；现在的学习，是面对未知的学习，人人都是福尔摩斯。</p>\n<p>不管什么知识，都可以成为我们踏入未知世界的踏板，一个片段的知识，会成为我们求知路上的援兵，它是不知道什么时候就会起作用的接应。它不是答案，但它是通向答案的钥匙。</p>\n<p>知识的“盲点”不怕，可怕的是知识的“盲维”。</p>\n<p>一知半解、一鳞半爪的知识，它作为知识，当然是不精确、不系统的，甚至不正确，孤立地看没有用。但正是因为它分散、碎片、不成系统，在知识的网络效应里，它就极有可能在机缘凑巧的时候，填补形成一个我们认知世界的维度，让我们一个认知盲维突然透进了一丝亮光，这就是它价值连城的地方。</p>\n<p>在未知的海洋里面，任何一根小树枝都是救命稻草，一些微茫的小线索，哪怕不精确，利用现在的互联网工具，利用线索之间的交叉关系，找到答案并不难。一个破案的侦探是不会在乎线索大小的。</p>\n<h4 id=\"突破“元无知”\"><a href=\"#突破“元无知”\" class=\"headerlink\" title=\"突破“元无知”\"></a>突破“元无知”</h4><p>百度的搜索框就放在那里，人类的大部分成型知识，都可以通过搜索找到。但是在搜索框里搜索什么呢？输入一个什么词，成为我们的第一个起点呢？</p>\n<p>怎么去找这种零星，维度丰富的知识？、</p>\n<ol>\n<li>人是万物的尺度，人也是零星知识的最好的线头。</li>\n<li>要有自己的观测复杂现象的仪表系统。要用从一个特别显而易见的表象中看出背后一大堆信息的工具，就像通过看温度计能知道温度一样。</li>\n</ol>\n<h4 id=\"什么时候该孤注一掷\"><a href=\"#什么时候该孤注一掷\" class=\"headerlink\" title=\"什么时候该孤注一掷\"></a>什么时候该孤注一掷</h4><p>所有的选择难题，本质上都是视野狭窄带来的。偏好不够用了，那就看看概率。概率不够用了，那就看看运气。运气也看不清了，那就看看公共利益。甚至公共利益也看不清，那就想想自己想成为什么样的人。</p>\n<p>对我们每个人来说，重大的一次性的选择，当然很难，不可重复，没有可靠的依据。但是如果跳出来呢？跳到整个群体、整个人类、全部时空，那就是一次性的选择了，那是可重复的选择。多少人生老病死，多少人悲欢离合，对人类群体来说，司空见惯。假设一个人代表整个群体，那怎么选，就有依据了啊。</p>\n<h4 id=\"为什么要做一个“斯多葛”\"><a href=\"#为什么要做一个“斯多葛”\" class=\"headerlink\" title=\"为什么要做一个“斯多葛”\"></a>为什么要做一个“斯多葛”</h4><p>我们必须全力以赴，同时又不抱任何希望。不管做什么事，都要把它当作是全世界最重要的一件事，但是同时又知道这件事根本无关紧要。</p>\n<p>斯多葛的人生哲学，把自己从环境中剥离，认知到自己是一个纯粹的人，专注思考自己的生命担当。</p>\n<p>斯多葛的思维方式，总是设想最坏的情形，假设一切已被命运夺走，我该怎么办？我怎样仍然做一个最好的自己？</p>\n<p>斯多葛派的主张</p>\n<ol>\n<li>爱我们所爱，但要知道我们所爱的都如朝露。</li>\n<li>控制能控制的，无法控制的要放手。</li>\n<li>对抗命运对未来的安排，但接受已成现实的过去与现在，仿佛它是宿命。</li>\n<li>要克制自己的欲望。这样可以更好地反思生活的甜美，获得意志力、勇气和自制力。</li>\n<li>要勤于反思。每天都要反思，我今天改正了什么？今天抵制了什么？今天有什么收获？</li>\n</ol>\n<h4 id=\"谁是最“愚昧”的人\"><a href=\"#谁是最“愚昧”的人\" class=\"headerlink\" title=\"谁是最“愚昧”的人\"></a>谁是最“愚昧”的人</h4><p>就是在现代自由社会，服从，特别是服从专业知识共同体，反而越成了一种重要的能力。</p>\n<p>这个世界上谁是最“愚昧”的人？不是没有知识的人，而是一知半解、有一点知识，足够感染到这些互联网知识病毒，但是又没有足够的知识可以消毒的人。</p>\n<p>如果我在自己的非专业领域，突然出现了某种自信，甚至这种自信还有一点知识的基础，那就得警惕了，我是不是正站在愚昧的悬崖边缘？</p>\n<h4 id=\"认识什么是“边缘突破”\"><a href=\"#认识什么是“边缘突破”\" class=\"headerlink\" title=\"认识什么是“边缘突破”\"></a>认识什么是“边缘突破”</h4><p>在技术发展的过程中，经常出现类似的现象，原来很边缘的技术和工作，因为各种机缘巧合，最终成为了整个协作网络的中心。</p>\n<h4 id=\"工具产生的真正意义\"><a href=\"#工具产生的真正意义\" class=\"headerlink\" title=\"工具产生的真正意义\"></a>工具产生的真正意义</h4><p>问题本身不是目的，而在于梳理一个参考标准。</p>\n<p>有的工具，是对人现有力量的强化、延伸，最受欢迎。有的工具，看起来不是那么有力量，但是它能给人观察世界增添一个维度。</p>\n<p>技术的演进，不是单维度地增强人的力量，而是在出其不意的地方，在其他维度上对我们猛推一把。</p>\n<h4 id=\"意义炼金术\"><a href=\"#意义炼金术\" class=\"headerlink\" title=\"意义炼金术\"></a>意义炼金术</h4><p>人的认知越提高，经验越丰富，越会发现自己的认知越来越不够用。</p>\n<p>我们不是要通过提高认知来更好地行动。我们是要在承认自己认知有局限的前提下，更有效地行动。</p>\n<p>意义这玩意儿，它本身不能用理性来考问。意义的价值 ，是为我们排除了大量的不确定性，让我们开始行动。</p>\n<p>意义不是别的，就是一个约定。因为有了这个约定，才可以开始行动，这就是意义的价值。</p>\n<p>在看见别人沉浸在某种意义中，超常努力的时候，我们心里得清楚：那是炼金术。不要看他的理由是不是谬误，等着看他的结果。</p>\n<h4 id=\"认识“意义”的价值\"><a href=\"#认识“意义”的价值\" class=\"headerlink\" title=\"认识“意义”的价值\"></a>认识“意义”的价值</h4><p>认知能力低，并不是灾难。真正的灾难，是我们无法屏蔽铺天盖地的大世界原本的复杂性，从而陷入无法行动的处境。这个时候，如果心中有意义，就会帮你屏蔽大世界的复杂性。</p>\n<p>意义的价值，就是设立一个边界，将所有的无限游戏，切割成一个个让我们能行动的有限游戏。一件事有了意义，它就成了一个独立的小世界，周边的大世界就和它无关了。人就可以在这个假想的，甚至是谬误的小世界李展开行动。</p>\n<p>意义是把世界变小的那些墙、那些篱笆。让我们只看到眼前这一点点的世界、一点点的诱惑后，信心满满地出发了。它替我们遮蔽了漫天遍野的不确定性，让我们在无知中就开始行动。</p>\n<p>意义不是表面看起来的迷梦，它也不是别人给我们设的一个骗局，它是我们人生的必需品，它是我们认知的替代品，它是我们一刻也不能缺的行动拐杖。</p>\n<h4 id=\"迷信有什么用\"><a href=\"#迷信有什么用\" class=\"headerlink\" title=\"迷信有什么用\"></a>迷信有什么用</h4><p>认知复杂性是一个不能纵容的坏东西。对付它的办法有两个：第一，升级认知，用你的智慧把握它；第二个恰恰相反，缩窄认知，用一个迷信屏蔽它。</p>\n<p>迷信不仅仅是一种认知，迷信还是一种策略，它是某些人应对复杂状况的一种特殊手段和策略。</p>\n<h4 id=\"我们对中年有什么误解\"><a href=\"#我们对中年有什么误解\" class=\"headerlink\" title=\"我们对中年有什么误解\"></a>我们对中年有什么误解</h4><p>中年不是衰退期，而是分工的转变期，将体能上的优势切换为大脑上的优势。</p>\n<p>一个中年人感受到的所有危机，其实都是为了让大脑保持在巅峰状态而付出的代价。</p>\n<h4 id=\"为什么青年才俊总有机会\"><a href=\"#为什么青年才俊总有机会\" class=\"headerlink\" title=\"为什么青年才俊总有机会\"></a>为什么青年才俊总有机会</h4><p>一般站在年轻人的角度看，世界好像是被资源拥有者掌握的，我再有才华也没有用，手里没有资源，我怎么能有机会呢？</p>\n<p>年轻人的三个重要资源：</p>\n<ol>\n<li>年轻，有的是时间，可以干其他人干不动的苦活儿，累活儿，长期性的活儿。</li>\n<li>年轻人有开创新的赛道的可能，当别人已经有了自己的专业、志趣和方向的时候，原先赛道上的存量会绑架他，减少他切换赛道的可能性，削弱他在新赛道上跟一个年轻人长跑的意志。</li>\n<li>年轻人，通常很穷，但正是因为穷，就更容易接收到市场传来的信号。</li>\n</ol>\n","site":{"data":{}},"length":3054,"excerpt":"<p>多角度理解认知 – 从越多角度看待问题，就有越多解决问题的方法！</p>","more":"<h3 id=\"第一章-起点：认知升级\"><a href=\"#第一章-起点：认知升级\" class=\"headerlink\" title=\"第一章 起点：认知升级\"></a>第一章 起点：认知升级</h3><p>我学习得越多，点亮的灯就越多，最后，我要照亮的是我自己的道路。我不关心它的对错，我只关心它对我是不是有启发。</p>\n<h4 id=\"保持头脑的开放性\"><a href=\"#保持头脑的开放性\" class=\"headerlink\" title=\"保持头脑的开放性\"></a>保持头脑的开放性</h4><p>确定性的知识越来越少，一切都在飞速演化：真理性的知识也越来越少，互相矛盾也未尝不可，那该怎么办？答案只有一个，就是保持头脑的开放性。</p>\n<blockquote>\n<p>不管我一生中取得了多大的成功，其主要的原因都不是我知道多少事情，而是我知道在无知的情况下自己应该怎么做。</p>\n</blockquote>\n<h4 id=\"学会和随机性打交道\"><a href=\"#学会和随机性打交道\" class=\"headerlink\" title=\"学会和随机性打交道\"></a>学会和随机性打交道</h4><p>如果一个人声称自己认知能力不错，他得具备两个要件：第一要有科学精神，第二还要学会接受随机性。</p>\n<p>迷信的对立面人们过去都以为是科学，其实不是。迷信和科学都是在找规律，只不过，科学讲究方法和证据，而迷信是一通胡来。从这个意义上说，迷信和科学反倒是近亲，都符合人类要给现象找原因的本能。</p>\n<h4 id=\"做知识的游牧民族\"><a href=\"#做知识的游牧民族\" class=\"headerlink\" title=\"做知识的游牧民族\"></a>做知识的游牧民族</h4><p>我们必须成为知识的游牧民族，哪里水草丰美，就向哪里迁徙。随着自己的兴趣和需求，在知识的原野上，用旺盛的好奇心，四处奔跑。</p>\n<p>不要迷信信息输入，要行动，根据自己的当下问题去不断试错。</p>\n<p>这个时代任何一个做出成绩的人，都是这样，快速了解一个新领域，补充自己对世界的理解，迅速去尝试，去行动，在行动中试错，在反馈中迭代，而不是先系统学习再动手。</p>\n<p>掌握游牧民族式的学习方式的三个核心认知</p>\n<ol>\n<li>不要迷信系统学习。</li>\n<li>不要相信什么一揽子解决方案和万能钥匙。</li>\n<li>不要迷信信息输入。</li>\n</ol>\n<h4 id=\"知识大迁徙，人人都是福尔摩斯\"><a href=\"#知识大迁徙，人人都是福尔摩斯\" class=\"headerlink\" title=\"知识大迁徙，人人都是福尔摩斯\"></a>知识大迁徙，人人都是福尔摩斯</h4><p>过去的学习，是面对已知的学习；现在的学习，是面对未知的学习，人人都是福尔摩斯。</p>\n<p>不管什么知识，都可以成为我们踏入未知世界的踏板，一个片段的知识，会成为我们求知路上的援兵，它是不知道什么时候就会起作用的接应。它不是答案，但它是通向答案的钥匙。</p>\n<p>知识的“盲点”不怕，可怕的是知识的“盲维”。</p>\n<p>一知半解、一鳞半爪的知识，它作为知识，当然是不精确、不系统的，甚至不正确，孤立地看没有用。但正是因为它分散、碎片、不成系统，在知识的网络效应里，它就极有可能在机缘凑巧的时候，填补形成一个我们认知世界的维度，让我们一个认知盲维突然透进了一丝亮光，这就是它价值连城的地方。</p>\n<p>在未知的海洋里面，任何一根小树枝都是救命稻草，一些微茫的小线索，哪怕不精确，利用现在的互联网工具，利用线索之间的交叉关系，找到答案并不难。一个破案的侦探是不会在乎线索大小的。</p>\n<h4 id=\"突破“元无知”\"><a href=\"#突破“元无知”\" class=\"headerlink\" title=\"突破“元无知”\"></a>突破“元无知”</h4><p>百度的搜索框就放在那里，人类的大部分成型知识，都可以通过搜索找到。但是在搜索框里搜索什么呢？输入一个什么词，成为我们的第一个起点呢？</p>\n<p>怎么去找这种零星，维度丰富的知识？、</p>\n<ol>\n<li>人是万物的尺度，人也是零星知识的最好的线头。</li>\n<li>要有自己的观测复杂现象的仪表系统。要用从一个特别显而易见的表象中看出背后一大堆信息的工具，就像通过看温度计能知道温度一样。</li>\n</ol>\n<h4 id=\"什么时候该孤注一掷\"><a href=\"#什么时候该孤注一掷\" class=\"headerlink\" title=\"什么时候该孤注一掷\"></a>什么时候该孤注一掷</h4><p>所有的选择难题，本质上都是视野狭窄带来的。偏好不够用了，那就看看概率。概率不够用了，那就看看运气。运气也看不清了，那就看看公共利益。甚至公共利益也看不清，那就想想自己想成为什么样的人。</p>\n<p>对我们每个人来说，重大的一次性的选择，当然很难，不可重复，没有可靠的依据。但是如果跳出来呢？跳到整个群体、整个人类、全部时空，那就是一次性的选择了，那是可重复的选择。多少人生老病死，多少人悲欢离合，对人类群体来说，司空见惯。假设一个人代表整个群体，那怎么选，就有依据了啊。</p>\n<h4 id=\"为什么要做一个“斯多葛”\"><a href=\"#为什么要做一个“斯多葛”\" class=\"headerlink\" title=\"为什么要做一个“斯多葛”\"></a>为什么要做一个“斯多葛”</h4><p>我们必须全力以赴，同时又不抱任何希望。不管做什么事，都要把它当作是全世界最重要的一件事，但是同时又知道这件事根本无关紧要。</p>\n<p>斯多葛的人生哲学，把自己从环境中剥离，认知到自己是一个纯粹的人，专注思考自己的生命担当。</p>\n<p>斯多葛的思维方式，总是设想最坏的情形，假设一切已被命运夺走，我该怎么办？我怎样仍然做一个最好的自己？</p>\n<p>斯多葛派的主张</p>\n<ol>\n<li>爱我们所爱，但要知道我们所爱的都如朝露。</li>\n<li>控制能控制的，无法控制的要放手。</li>\n<li>对抗命运对未来的安排，但接受已成现实的过去与现在，仿佛它是宿命。</li>\n<li>要克制自己的欲望。这样可以更好地反思生活的甜美，获得意志力、勇气和自制力。</li>\n<li>要勤于反思。每天都要反思，我今天改正了什么？今天抵制了什么？今天有什么收获？</li>\n</ol>\n<h4 id=\"谁是最“愚昧”的人\"><a href=\"#谁是最“愚昧”的人\" class=\"headerlink\" title=\"谁是最“愚昧”的人\"></a>谁是最“愚昧”的人</h4><p>就是在现代自由社会，服从，特别是服从专业知识共同体，反而越成了一种重要的能力。</p>\n<p>这个世界上谁是最“愚昧”的人？不是没有知识的人，而是一知半解、有一点知识，足够感染到这些互联网知识病毒，但是又没有足够的知识可以消毒的人。</p>\n<p>如果我在自己的非专业领域，突然出现了某种自信，甚至这种自信还有一点知识的基础，那就得警惕了，我是不是正站在愚昧的悬崖边缘？</p>\n<h4 id=\"认识什么是“边缘突破”\"><a href=\"#认识什么是“边缘突破”\" class=\"headerlink\" title=\"认识什么是“边缘突破”\"></a>认识什么是“边缘突破”</h4><p>在技术发展的过程中，经常出现类似的现象，原来很边缘的技术和工作，因为各种机缘巧合，最终成为了整个协作网络的中心。</p>\n<h4 id=\"工具产生的真正意义\"><a href=\"#工具产生的真正意义\" class=\"headerlink\" title=\"工具产生的真正意义\"></a>工具产生的真正意义</h4><p>问题本身不是目的，而在于梳理一个参考标准。</p>\n<p>有的工具，是对人现有力量的强化、延伸，最受欢迎。有的工具，看起来不是那么有力量，但是它能给人观察世界增添一个维度。</p>\n<p>技术的演进，不是单维度地增强人的力量，而是在出其不意的地方，在其他维度上对我们猛推一把。</p>\n<h4 id=\"意义炼金术\"><a href=\"#意义炼金术\" class=\"headerlink\" title=\"意义炼金术\"></a>意义炼金术</h4><p>人的认知越提高，经验越丰富，越会发现自己的认知越来越不够用。</p>\n<p>我们不是要通过提高认知来更好地行动。我们是要在承认自己认知有局限的前提下，更有效地行动。</p>\n<p>意义这玩意儿，它本身不能用理性来考问。意义的价值 ，是为我们排除了大量的不确定性，让我们开始行动。</p>\n<p>意义不是别的，就是一个约定。因为有了这个约定，才可以开始行动，这就是意义的价值。</p>\n<p>在看见别人沉浸在某种意义中，超常努力的时候，我们心里得清楚：那是炼金术。不要看他的理由是不是谬误，等着看他的结果。</p>\n<h4 id=\"认识“意义”的价值\"><a href=\"#认识“意义”的价值\" class=\"headerlink\" title=\"认识“意义”的价值\"></a>认识“意义”的价值</h4><p>认知能力低，并不是灾难。真正的灾难，是我们无法屏蔽铺天盖地的大世界原本的复杂性，从而陷入无法行动的处境。这个时候，如果心中有意义，就会帮你屏蔽大世界的复杂性。</p>\n<p>意义的价值，就是设立一个边界，将所有的无限游戏，切割成一个个让我们能行动的有限游戏。一件事有了意义，它就成了一个独立的小世界，周边的大世界就和它无关了。人就可以在这个假想的，甚至是谬误的小世界李展开行动。</p>\n<p>意义是把世界变小的那些墙、那些篱笆。让我们只看到眼前这一点点的世界、一点点的诱惑后，信心满满地出发了。它替我们遮蔽了漫天遍野的不确定性，让我们在无知中就开始行动。</p>\n<p>意义不是表面看起来的迷梦，它也不是别人给我们设的一个骗局，它是我们人生的必需品，它是我们认知的替代品，它是我们一刻也不能缺的行动拐杖。</p>\n<h4 id=\"迷信有什么用\"><a href=\"#迷信有什么用\" class=\"headerlink\" title=\"迷信有什么用\"></a>迷信有什么用</h4><p>认知复杂性是一个不能纵容的坏东西。对付它的办法有两个：第一，升级认知，用你的智慧把握它；第二个恰恰相反，缩窄认知，用一个迷信屏蔽它。</p>\n<p>迷信不仅仅是一种认知，迷信还是一种策略，它是某些人应对复杂状况的一种特殊手段和策略。</p>\n<h4 id=\"我们对中年有什么误解\"><a href=\"#我们对中年有什么误解\" class=\"headerlink\" title=\"我们对中年有什么误解\"></a>我们对中年有什么误解</h4><p>中年不是衰退期，而是分工的转变期，将体能上的优势切换为大脑上的优势。</p>\n<p>一个中年人感受到的所有危机，其实都是为了让大脑保持在巅峰状态而付出的代价。</p>\n<h4 id=\"为什么青年才俊总有机会\"><a href=\"#为什么青年才俊总有机会\" class=\"headerlink\" title=\"为什么青年才俊总有机会\"></a>为什么青年才俊总有机会</h4><p>一般站在年轻人的角度看，世界好像是被资源拥有者掌握的，我再有才华也没有用，手里没有资源，我怎么能有机会呢？</p>\n<p>年轻人的三个重要资源：</p>\n<ol>\n<li>年轻，有的是时间，可以干其他人干不动的苦活儿，累活儿，长期性的活儿。</li>\n<li>年轻人有开创新的赛道的可能，当别人已经有了自己的专业、志趣和方向的时候，原先赛道上的存量会绑架他，减少他切换赛道的可能性，削弱他在新赛道上跟一个年轻人长跑的意志。</li>\n<li>年轻人，通常很穷，但正是因为穷，就更容易接收到市场传来的信号。</li>\n</ol>"},{"title":"聚会随想","date":"2019-02-24T12:00:27.000Z","_content":"#### 前言\n过完年没多久,我便和关系比较好进行了2019年春节后的第一次聚会,地点还是在广州,时间定在了元宵节那周的周六(02.24).这次聚会既有好奇某个脱单的小伙伴是怎么脱单的,也有因为有小伙伴要跳槽,还有是有小伙伴计划买电脑的,想去实体店看看,再顺路交流一下今年各自的打算和计划.\n<!--more-->\n#### 关于跳槽\n我是周五下班就直接过去广州的,住的地方就是那个有计划跳槽的小伙伴那边.到那边的时候,就和他聊了会,他那天是有去面试一家,感觉还是可以的,但他出于对薪酬的考虑,陷入了纠结的场面.在周六喝早茶的时候,我们几个也稍微聊了一下关于这方面的事.基于这两次的交流,考虑自己将来也会有跳槽的情况出现.整理出一些关于在跳槽的时候需要注意或者思考的方向\n1. 在众多招聘公司中,筛选出适合自己的和有利于自己发展的公司.\n2. 了解跳槽前后的薪酬差距,如果是那种空闲时间增加了,而薪酬没有增长甚至于下降的情况,自己是否可以接受,因为工作80%以上都是为了钱,如果不能接受,那么将有可能再次跳槽,那样就会变得麻烦了\n3. 骑驴找马or裸辞?这个就要看具体情况去分析了,毕竟裸辞要承受的压力还是不小的,找工作的压力,只出不入的压力,还不能断交的五险一金等等.而骑驴找马呢,如果不能一击即中的话,频繁请假也是不小的麻烦.\n4. 你选择的公司是否可以成为你以后跳槽的一个跳板,也是至关重要的,毕竟有过在大公司就职的还是会比较吃香的\n#### 关于情感\n羽梦应该是我们几个里面目前确定是有女朋友的了,其他的人,一个虽然有人介绍,但被介绍的人却有男朋友,而他也对那人没什么感觉;一个毫无想法,或者说是懒得想,还有一个就是属于那种差一步的感觉,也不知道这一步什么时候才会走出去,或者无疾而终.我自己的话,当我在4月份打完那个电话就决定放弃了,把跟她相关的大部分东西都静静的删了,毕竟那时候我就有感觉她身边已经有人了.毕业时曾经说过,你身边没人,我会追下去,如果有人,那我们就相忘于江湖吧.后面我就没怎么去联系了,在KTV时,突然听见那首她喜欢的红豆,回忆涌现,细想起来,自4月份起,很多她喜欢的东西,我都下意识的去回避了,如她喜欢的歌手,歌曲和唱吧.一切随缘吧.或许某天出现一个如我梦中一样的女孩吧.\n#### 关于聚会\n回忆起前几次聚会,发现其实每一次的聚会都没有任何的计划和安排,这样实在是太无聊了,或许可以考虑一下把每一次的聚会地点放到广州比较出名的地方,就像这次聚会在体育西,那下一次就在海珠广场,下下次就放到北京路这样子,在去之前稍微做一下了解和攻略,在去到以后可能会有比较不错的体验,而不会每次都很无聊的四处瞎逛.\n","source":"_posts/聚会随想.md","raw":"---\ntitle: 聚会随想\ndate: 2019-02-24 20:00:27\ncategories: 随笔\ntags:\n - 随笔\n---\n#### 前言\n过完年没多久,我便和关系比较好进行了2019年春节后的第一次聚会,地点还是在广州,时间定在了元宵节那周的周六(02.24).这次聚会既有好奇某个脱单的小伙伴是怎么脱单的,也有因为有小伙伴要跳槽,还有是有小伙伴计划买电脑的,想去实体店看看,再顺路交流一下今年各自的打算和计划.\n<!--more-->\n#### 关于跳槽\n我是周五下班就直接过去广州的,住的地方就是那个有计划跳槽的小伙伴那边.到那边的时候,就和他聊了会,他那天是有去面试一家,感觉还是可以的,但他出于对薪酬的考虑,陷入了纠结的场面.在周六喝早茶的时候,我们几个也稍微聊了一下关于这方面的事.基于这两次的交流,考虑自己将来也会有跳槽的情况出现.整理出一些关于在跳槽的时候需要注意或者思考的方向\n1. 在众多招聘公司中,筛选出适合自己的和有利于自己发展的公司.\n2. 了解跳槽前后的薪酬差距,如果是那种空闲时间增加了,而薪酬没有增长甚至于下降的情况,自己是否可以接受,因为工作80%以上都是为了钱,如果不能接受,那么将有可能再次跳槽,那样就会变得麻烦了\n3. 骑驴找马or裸辞?这个就要看具体情况去分析了,毕竟裸辞要承受的压力还是不小的,找工作的压力,只出不入的压力,还不能断交的五险一金等等.而骑驴找马呢,如果不能一击即中的话,频繁请假也是不小的麻烦.\n4. 你选择的公司是否可以成为你以后跳槽的一个跳板,也是至关重要的,毕竟有过在大公司就职的还是会比较吃香的\n#### 关于情感\n羽梦应该是我们几个里面目前确定是有女朋友的了,其他的人,一个虽然有人介绍,但被介绍的人却有男朋友,而他也对那人没什么感觉;一个毫无想法,或者说是懒得想,还有一个就是属于那种差一步的感觉,也不知道这一步什么时候才会走出去,或者无疾而终.我自己的话,当我在4月份打完那个电话就决定放弃了,把跟她相关的大部分东西都静静的删了,毕竟那时候我就有感觉她身边已经有人了.毕业时曾经说过,你身边没人,我会追下去,如果有人,那我们就相忘于江湖吧.后面我就没怎么去联系了,在KTV时,突然听见那首她喜欢的红豆,回忆涌现,细想起来,自4月份起,很多她喜欢的东西,我都下意识的去回避了,如她喜欢的歌手,歌曲和唱吧.一切随缘吧.或许某天出现一个如我梦中一样的女孩吧.\n#### 关于聚会\n回忆起前几次聚会,发现其实每一次的聚会都没有任何的计划和安排,这样实在是太无聊了,或许可以考虑一下把每一次的聚会地点放到广州比较出名的地方,就像这次聚会在体育西,那下一次就在海珠广场,下下次就放到北京路这样子,在去之前稍微做一下了解和攻略,在去到以后可能会有比较不错的体验,而不会每次都很无聊的四处瞎逛.\n","slug":"聚会随想","published":1,"updated":"2021-03-30T03:24:16.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx1c006nvcua8m5vf841","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>过完年没多久,我便和关系比较好进行了2019年春节后的第一次聚会,地点还是在广州,时间定在了元宵节那周的周六(02.24).这次聚会既有好奇某个脱单的小伙伴是怎么脱单的,也有因为有小伙伴要跳槽,还有是有小伙伴计划买电脑的,想去实体店看看,再顺路交流一下今年各自的打算和计划.</p>\n<span id=\"more\"></span>\n<h4 id=\"关于跳槽\"><a href=\"#关于跳槽\" class=\"headerlink\" title=\"关于跳槽\"></a>关于跳槽</h4><p>我是周五下班就直接过去广州的,住的地方就是那个有计划跳槽的小伙伴那边.到那边的时候,就和他聊了会,他那天是有去面试一家,感觉还是可以的,但他出于对薪酬的考虑,陷入了纠结的场面.在周六喝早茶的时候,我们几个也稍微聊了一下关于这方面的事.基于这两次的交流,考虑自己将来也会有跳槽的情况出现.整理出一些关于在跳槽的时候需要注意或者思考的方向</p>\n<ol>\n<li>在众多招聘公司中,筛选出适合自己的和有利于自己发展的公司.</li>\n<li>了解跳槽前后的薪酬差距,如果是那种空闲时间增加了,而薪酬没有增长甚至于下降的情况,自己是否可以接受,因为工作80%以上都是为了钱,如果不能接受,那么将有可能再次跳槽,那样就会变得麻烦了</li>\n<li>骑驴找马or裸辞?这个就要看具体情况去分析了,毕竟裸辞要承受的压力还是不小的,找工作的压力,只出不入的压力,还不能断交的五险一金等等.而骑驴找马呢,如果不能一击即中的话,频繁请假也是不小的麻烦.</li>\n<li>你选择的公司是否可以成为你以后跳槽的一个跳板,也是至关重要的,毕竟有过在大公司就职的还是会比较吃香的<h4 id=\"关于情感\"><a href=\"#关于情感\" class=\"headerlink\" title=\"关于情感\"></a>关于情感</h4>羽梦应该是我们几个里面目前确定是有女朋友的了,其他的人,一个虽然有人介绍,但被介绍的人却有男朋友,而他也对那人没什么感觉;一个毫无想法,或者说是懒得想,还有一个就是属于那种差一步的感觉,也不知道这一步什么时候才会走出去,或者无疾而终.我自己的话,当我在4月份打完那个电话就决定放弃了,把跟她相关的大部分东西都静静的删了,毕竟那时候我就有感觉她身边已经有人了.毕业时曾经说过,你身边没人,我会追下去,如果有人,那我们就相忘于江湖吧.后面我就没怎么去联系了,在KTV时,突然听见那首她喜欢的红豆,回忆涌现,细想起来,自4月份起,很多她喜欢的东西,我都下意识的去回避了,如她喜欢的歌手,歌曲和唱吧.一切随缘吧.或许某天出现一个如我梦中一样的女孩吧.<h4 id=\"关于聚会\"><a href=\"#关于聚会\" class=\"headerlink\" title=\"关于聚会\"></a>关于聚会</h4>回忆起前几次聚会,发现其实每一次的聚会都没有任何的计划和安排,这样实在是太无聊了,或许可以考虑一下把每一次的聚会地点放到广州比较出名的地方,就像这次聚会在体育西,那下一次就在海珠广场,下下次就放到北京路这样子,在去之前稍微做一下了解和攻略,在去到以后可能会有比较不错的体验,而不会每次都很无聊的四处瞎逛.</li>\n</ol>\n","site":{"data":{}},"length":1059,"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>过完年没多久,我便和关系比较好进行了2019年春节后的第一次聚会,地点还是在广州,时间定在了元宵节那周的周六(02.24).这次聚会既有好奇某个脱单的小伙伴是怎么脱单的,也有因为有小伙伴要跳槽,还有是有小伙伴计划买电脑的,想去实体店看看,再顺路交流一下今年各自的打算和计划.</p>","more":"<h4 id=\"关于跳槽\"><a href=\"#关于跳槽\" class=\"headerlink\" title=\"关于跳槽\"></a>关于跳槽</h4><p>我是周五下班就直接过去广州的,住的地方就是那个有计划跳槽的小伙伴那边.到那边的时候,就和他聊了会,他那天是有去面试一家,感觉还是可以的,但他出于对薪酬的考虑,陷入了纠结的场面.在周六喝早茶的时候,我们几个也稍微聊了一下关于这方面的事.基于这两次的交流,考虑自己将来也会有跳槽的情况出现.整理出一些关于在跳槽的时候需要注意或者思考的方向</p>\n<ol>\n<li>在众多招聘公司中,筛选出适合自己的和有利于自己发展的公司.</li>\n<li>了解跳槽前后的薪酬差距,如果是那种空闲时间增加了,而薪酬没有增长甚至于下降的情况,自己是否可以接受,因为工作80%以上都是为了钱,如果不能接受,那么将有可能再次跳槽,那样就会变得麻烦了</li>\n<li>骑驴找马or裸辞?这个就要看具体情况去分析了,毕竟裸辞要承受的压力还是不小的,找工作的压力,只出不入的压力,还不能断交的五险一金等等.而骑驴找马呢,如果不能一击即中的话,频繁请假也是不小的麻烦.</li>\n<li>你选择的公司是否可以成为你以后跳槽的一个跳板,也是至关重要的,毕竟有过在大公司就职的还是会比较吃香的<h4 id=\"关于情感\"><a href=\"#关于情感\" class=\"headerlink\" title=\"关于情感\"></a>关于情感</h4>羽梦应该是我们几个里面目前确定是有女朋友的了,其他的人,一个虽然有人介绍,但被介绍的人却有男朋友,而他也对那人没什么感觉;一个毫无想法,或者说是懒得想,还有一个就是属于那种差一步的感觉,也不知道这一步什么时候才会走出去,或者无疾而终.我自己的话,当我在4月份打完那个电话就决定放弃了,把跟她相关的大部分东西都静静的删了,毕竟那时候我就有感觉她身边已经有人了.毕业时曾经说过,你身边没人,我会追下去,如果有人,那我们就相忘于江湖吧.后面我就没怎么去联系了,在KTV时,突然听见那首她喜欢的红豆,回忆涌现,细想起来,自4月份起,很多她喜欢的东西,我都下意识的去回避了,如她喜欢的歌手,歌曲和唱吧.一切随缘吧.或许某天出现一个如我梦中一样的女孩吧.<h4 id=\"关于聚会\"><a href=\"#关于聚会\" class=\"headerlink\" title=\"关于聚会\"></a>关于聚会</h4>回忆起前几次聚会,发现其实每一次的聚会都没有任何的计划和安排,这样实在是太无聊了,或许可以考虑一下把每一次的聚会地点放到广州比较出名的地方,就像这次聚会在体育西,那下一次就在海珠广场,下下次就放到北京路这样子,在去之前稍微做一下了解和攻略,在去到以后可能会有比较不错的体验,而不会每次都很无聊的四处瞎逛.</li>\n</ol>"},{"title":"类型基础","date":"2019-03-26T13:26:08.000Z","_content":"### 所有类型都从System.Object 派生\n#### System.Object 公共实例方法\n| 公共方法 | 说明 |\n| :------: | :------: |\n| Equals | 判断两个对象是否具有相同的值 |\n| GetHashCode | 返回对象的值的哈希码 |\n| ToString | 默认返回类型的完整名称,常被重写用于返回对象状态表示的String对象 |\n| ToString | 返回调用对象的确切类型 |\n<!--more-->\n#### 所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存\n```cs\nBlog b = new Blog();\n```\nnew操作所做的事情\n* 计算类型及所有基类型中定义的所有实例字段需要的字节数\n* 从托管堆中分配类型要求的字节数,从而分配对象的内存,分配的所有字节都设为0\n* 初始化对象的\"类型对象指针\"和\"同步块索引\"成员\n* 调用类型的实例构造器(构造函数)\n\n## 类型转换\n### 基类与派生类之间的转换\n* 将对象转换为它的任何基类型都不要求任何特殊语法\n* 将对象转换为它的某个派生类型时,需要进行显示转换\n```cs\nObject o = new Blog();\nBlog b = (Blog) o;\n```\n### is和as操作符来转型\n#### is操作符\n* is操作符检查对象是否兼容于指定类型,返回true或false(永不抛出异常)\n* 如果对象引用null,is操作符总是返回false\n* 使用如下\n    ```cs\n    if(o is Blog)\n    {\n        Blog b = (Blog) o;\n    }\n    ```\n* PS：使用is操作符,实际上会检查两次对象类型,先核实是否兼容于Blog类型,if内部转型时,会再次核实o是否引用一个Blog类型\n#### as操作符\n* as操作符用于核实对象是否兼容于指定类型,返回对同一对象的非null引用和null(永不抛出异常)\n* 使用如下\n    ```cs\n    Blog b = o as Blog;\n    if(e != null)\n    {\n        //\n    }\n    ```\n* PS：使用as操作符,只校验一次对象类型\n\n### 调用静态方法,实例方法和虚方法的区别\n#### 调用静态方法\n调用静态方式时,CLR会定位与定义静态方法的类型对应的类型对象,然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n#### 调用实例方法\n调用实例方法时,JIT编译器会找到与\"发出调用的那个变量的类型\"对应的类型对象.如果对应的类型对象没有定义正在调用的那个方法,JIT编译器会回溯类层次结构(一直回溯到Object),并在沿途的每个类型中查找该方法.然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n#### 调用虚方法\n调用虚方法时,JIT编译器要在方法中生成一些额外的代码;方法每次调用都会执行这些代码.这些代码首先会检查发出调用的变量,并跟随地址来到发出调用的对象.然后代码检查对象内部的\"类型对象指针\"成员,该成员指向对象的实际类型.然后,代码在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n\n","source":"_posts/类型基础.md","raw":"---\ntitle: 类型基础\ndate: 2019-03-26 21:26:08\ncategories: C# \ntags: \n - 基础\n - C#\n---\n### 所有类型都从System.Object 派生\n#### System.Object 公共实例方法\n| 公共方法 | 说明 |\n| :------: | :------: |\n| Equals | 判断两个对象是否具有相同的值 |\n| GetHashCode | 返回对象的值的哈希码 |\n| ToString | 默认返回类型的完整名称,常被重写用于返回对象状态表示的String对象 |\n| ToString | 返回调用对象的确切类型 |\n<!--more-->\n#### 所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存\n```cs\nBlog b = new Blog();\n```\nnew操作所做的事情\n* 计算类型及所有基类型中定义的所有实例字段需要的字节数\n* 从托管堆中分配类型要求的字节数,从而分配对象的内存,分配的所有字节都设为0\n* 初始化对象的\"类型对象指针\"和\"同步块索引\"成员\n* 调用类型的实例构造器(构造函数)\n\n## 类型转换\n### 基类与派生类之间的转换\n* 将对象转换为它的任何基类型都不要求任何特殊语法\n* 将对象转换为它的某个派生类型时,需要进行显示转换\n```cs\nObject o = new Blog();\nBlog b = (Blog) o;\n```\n### is和as操作符来转型\n#### is操作符\n* is操作符检查对象是否兼容于指定类型,返回true或false(永不抛出异常)\n* 如果对象引用null,is操作符总是返回false\n* 使用如下\n    ```cs\n    if(o is Blog)\n    {\n        Blog b = (Blog) o;\n    }\n    ```\n* PS：使用is操作符,实际上会检查两次对象类型,先核实是否兼容于Blog类型,if内部转型时,会再次核实o是否引用一个Blog类型\n#### as操作符\n* as操作符用于核实对象是否兼容于指定类型,返回对同一对象的非null引用和null(永不抛出异常)\n* 使用如下\n    ```cs\n    Blog b = o as Blog;\n    if(e != null)\n    {\n        //\n    }\n    ```\n* PS：使用as操作符,只校验一次对象类型\n\n### 调用静态方法,实例方法和虚方法的区别\n#### 调用静态方法\n调用静态方式时,CLR会定位与定义静态方法的类型对应的类型对象,然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n#### 调用实例方法\n调用实例方法时,JIT编译器会找到与\"发出调用的那个变量的类型\"对应的类型对象.如果对应的类型对象没有定义正在调用的那个方法,JIT编译器会回溯类层次结构(一直回溯到Object),并在沿途的每个类型中查找该方法.然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n#### 调用虚方法\n调用虚方法时,JIT编译器要在方法中生成一些额外的代码;方法每次调用都会执行这些代码.这些代码首先会检查发出调用的变量,并跟随地址来到发出调用的对象.然后代码检查对象内部的\"类型对象指针\"成员,该成员指向对象的实际类型.然后,代码在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n\n","slug":"类型基础","published":1,"updated":"2021-03-30T03:24:16.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx1d006pvcua2tsneoxt","content":"<h3 id=\"所有类型都从System-Object-派生\"><a href=\"#所有类型都从System-Object-派生\" class=\"headerlink\" title=\"所有类型都从System.Object 派生\"></a>所有类型都从System.Object 派生</h3><h4 id=\"System-Object-公共实例方法\"><a href=\"#System-Object-公共实例方法\" class=\"headerlink\" title=\"System.Object 公共实例方法\"></a>System.Object 公共实例方法</h4><table>\n<thead>\n<tr>\n<th align=\"center\">公共方法</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Equals</td>\n<td align=\"center\">判断两个对象是否具有相同的值</td>\n</tr>\n<tr>\n<td align=\"center\">GetHashCode</td>\n<td align=\"center\">返回对象的值的哈希码</td>\n</tr>\n<tr>\n<td align=\"center\">ToString</td>\n<td align=\"center\">默认返回类型的完整名称,常被重写用于返回对象状态表示的String对象</td>\n</tr>\n<tr>\n<td align=\"center\">ToString</td>\n<td align=\"center\">返回调用对象的确切类型</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n<h4 id=\"所有对象都用new操作符创建-delete操作符显式释放为对象分配的内存\"><a href=\"#所有对象都用new操作符创建-delete操作符显式释放为对象分配的内存\" class=\"headerlink\" title=\"所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存\"></a>所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog b = <span class=\"keyword\">new</span> Blog();</span><br></pre></td></tr></table></figure>\n<p>new操作所做的事情</p>\n<ul>\n<li>计算类型及所有基类型中定义的所有实例字段需要的字节数</li>\n<li>从托管堆中分配类型要求的字节数,从而分配对象的内存,分配的所有字节都设为0</li>\n<li>初始化对象的”类型对象指针”和”同步块索引”成员</li>\n<li>调用类型的实例构造器(构造函数)</li>\n</ul>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"基类与派生类之间的转换\"><a href=\"#基类与派生类之间的转换\" class=\"headerlink\" title=\"基类与派生类之间的转换\"></a>基类与派生类之间的转换</h3><ul>\n<li>将对象转换为它的任何基类型都不要求任何特殊语法</li>\n<li>将对象转换为它的某个派生类型时,需要进行显示转换<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object o = <span class=\"keyword\">new</span> Blog();</span><br><span class=\"line\">Blog b = (Blog) o;</span><br></pre></td></tr></table></figure>\n<h3 id=\"is和as操作符来转型\"><a href=\"#is和as操作符来转型\" class=\"headerlink\" title=\"is和as操作符来转型\"></a>is和as操作符来转型</h3><h4 id=\"is操作符\"><a href=\"#is操作符\" class=\"headerlink\" title=\"is操作符\"></a>is操作符</h4></li>\n<li>is操作符检查对象是否兼容于指定类型,返回true或false(永不抛出异常)</li>\n<li>如果对象引用null,is操作符总是返回false</li>\n<li>使用如下  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(o <span class=\"keyword\">is</span> Blog)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Blog b = (Blog) o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>PS：使用is操作符,实际上会检查两次对象类型,先核实是否兼容于Blog类型,if内部转型时,会再次核实o是否引用一个Blog类型<h4 id=\"as操作符\"><a href=\"#as操作符\" class=\"headerlink\" title=\"as操作符\"></a>as操作符</h4></li>\n<li>as操作符用于核实对象是否兼容于指定类型,返回对同一对象的非null引用和null(永不抛出异常)</li>\n<li>使用如下  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog b = o <span class=\"keyword\">as</span> Blog;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(e != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>PS：使用as操作符,只校验一次对象类型</li>\n</ul>\n<h3 id=\"调用静态方法-实例方法和虚方法的区别\"><a href=\"#调用静态方法-实例方法和虚方法的区别\" class=\"headerlink\" title=\"调用静态方法,实例方法和虚方法的区别\"></a>调用静态方法,实例方法和虚方法的区别</h3><h4 id=\"调用静态方法\"><a href=\"#调用静态方法\" class=\"headerlink\" title=\"调用静态方法\"></a>调用静态方法</h4><p>调用静态方式时,CLR会定位与定义静态方法的类型对应的类型对象,然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p>\n<h4 id=\"调用实例方法\"><a href=\"#调用实例方法\" class=\"headerlink\" title=\"调用实例方法\"></a>调用实例方法</h4><p>调用实例方法时,JIT编译器会找到与”发出调用的那个变量的类型”对应的类型对象.如果对应的类型对象没有定义正在调用的那个方法,JIT编译器会回溯类层次结构(一直回溯到Object),并在沿途的每个类型中查找该方法.然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p>\n<h4 id=\"调用虚方法\"><a href=\"#调用虚方法\" class=\"headerlink\" title=\"调用虚方法\"></a>调用虚方法</h4><p>调用虚方法时,JIT编译器要在方法中生成一些额外的代码;方法每次调用都会执行这些代码.这些代码首先会检查发出调用的变量,并跟随地址来到发出调用的对象.然后代码检查对象内部的”类型对象指针”成员,该成员指向对象的实际类型.然后,代码在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p>\n","site":{"data":{}},"length":1175,"excerpt":"<h3 id=\"所有类型都从System-Object-派生\"><a href=\"#所有类型都从System-Object-派生\" class=\"headerlink\" title=\"所有类型都从System.Object 派生\"></a>所有类型都从System.Object 派生</h3><h4 id=\"System-Object-公共实例方法\"><a href=\"#System-Object-公共实例方法\" class=\"headerlink\" title=\"System.Object 公共实例方法\"></a>System.Object 公共实例方法</h4><table>\n<thead>\n<tr>\n<th align=\"center\">公共方法</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Equals</td>\n<td align=\"center\">判断两个对象是否具有相同的值</td>\n</tr>\n<tr>\n<td align=\"center\">GetHashCode</td>\n<td align=\"center\">返回对象的值的哈希码</td>\n</tr>\n<tr>\n<td align=\"center\">ToString</td>\n<td align=\"center\">默认返回类型的完整名称,常被重写用于返回对象状态表示的String对象</td>\n</tr>\n<tr>\n<td align=\"center\">ToString</td>\n<td align=\"center\">返回调用对象的确切类型</td>\n</tr>\n</tbody></table>","more":"<h4 id=\"所有对象都用new操作符创建-delete操作符显式释放为对象分配的内存\"><a href=\"#所有对象都用new操作符创建-delete操作符显式释放为对象分配的内存\" class=\"headerlink\" title=\"所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存\"></a>所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog b = <span class=\"keyword\">new</span> Blog();</span><br></pre></td></tr></table></figure>\n<p>new操作所做的事情</p>\n<ul>\n<li>计算类型及所有基类型中定义的所有实例字段需要的字节数</li>\n<li>从托管堆中分配类型要求的字节数,从而分配对象的内存,分配的所有字节都设为0</li>\n<li>初始化对象的”类型对象指针”和”同步块索引”成员</li>\n<li>调用类型的实例构造器(构造函数)</li>\n</ul>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"基类与派生类之间的转换\"><a href=\"#基类与派生类之间的转换\" class=\"headerlink\" title=\"基类与派生类之间的转换\"></a>基类与派生类之间的转换</h3><ul>\n<li>将对象转换为它的任何基类型都不要求任何特殊语法</li>\n<li>将对象转换为它的某个派生类型时,需要进行显示转换<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object o = <span class=\"keyword\">new</span> Blog();</span><br><span class=\"line\">Blog b = (Blog) o;</span><br></pre></td></tr></table></figure>\n<h3 id=\"is和as操作符来转型\"><a href=\"#is和as操作符来转型\" class=\"headerlink\" title=\"is和as操作符来转型\"></a>is和as操作符来转型</h3><h4 id=\"is操作符\"><a href=\"#is操作符\" class=\"headerlink\" title=\"is操作符\"></a>is操作符</h4></li>\n<li>is操作符检查对象是否兼容于指定类型,返回true或false(永不抛出异常)</li>\n<li>如果对象引用null,is操作符总是返回false</li>\n<li>使用如下  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(o <span class=\"keyword\">is</span> Blog)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Blog b = (Blog) o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>PS：使用is操作符,实际上会检查两次对象类型,先核实是否兼容于Blog类型,if内部转型时,会再次核实o是否引用一个Blog类型<h4 id=\"as操作符\"><a href=\"#as操作符\" class=\"headerlink\" title=\"as操作符\"></a>as操作符</h4></li>\n<li>as操作符用于核实对象是否兼容于指定类型,返回对同一对象的非null引用和null(永不抛出异常)</li>\n<li>使用如下  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog b = o <span class=\"keyword\">as</span> Blog;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(e != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>PS：使用as操作符,只校验一次对象类型</li>\n</ul>\n<h3 id=\"调用静态方法-实例方法和虚方法的区别\"><a href=\"#调用静态方法-实例方法和虚方法的区别\" class=\"headerlink\" title=\"调用静态方法,实例方法和虚方法的区别\"></a>调用静态方法,实例方法和虚方法的区别</h3><h4 id=\"调用静态方法\"><a href=\"#调用静态方法\" class=\"headerlink\" title=\"调用静态方法\"></a>调用静态方法</h4><p>调用静态方式时,CLR会定位与定义静态方法的类型对应的类型对象,然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p>\n<h4 id=\"调用实例方法\"><a href=\"#调用实例方法\" class=\"headerlink\" title=\"调用实例方法\"></a>调用实例方法</h4><p>调用实例方法时,JIT编译器会找到与”发出调用的那个变量的类型”对应的类型对象.如果对应的类型对象没有定义正在调用的那个方法,JIT编译器会回溯类层次结构(一直回溯到Object),并在沿途的每个类型中查找该方法.然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p>\n<h4 id=\"调用虚方法\"><a href=\"#调用虚方法\" class=\"headerlink\" title=\"调用虚方法\"></a>调用虚方法</h4><p>调用虚方法时,JIT编译器要在方法中生成一些额外的代码;方法每次调用都会执行这些代码.这些代码首先会检查发出调用的变量,并跟随地址来到发出调用的对象.然后代码检查对象内部的”类型对象指针”成员,该成员指向对象的实际类型.然后,代码在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p>"},{"title":"贫血模型和充血模型","date":"2018-03-07T15:16:24.000Z","_content":"##### 贫血模型\n贫血模型,是指Model中,仅包含状态(属性),不包含行为(方法),采用这种设计时,需要分离出DB层,专门用于数据库操作.\n\n##### 充血模型\n充血模型,是指Model中既包括状态,又包括行为,是最符合面向对象的设计方式\n\n<!--more-->\n##### 举例说明\n对于员工Employee来说,每个员工的属性有id,Name,Sex,BirthDay,Parent(上级),行为有查找,保存,删除,职位调整(更换上级)等\n\n###### 采用贫血模型实现\nModel层\n```cs\npublic class Employee\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Sex { get; set; }\n    public DateTime? BirthDay { get; set; }\n    /// <summary>\n    /// 直属上级的Id\n    /// </summary>\n    public string ParentId { get; set; }\n}\n```\nDB层\n```cs\n//实现方法略    \npublic class EmpDAO\n{\n    public static bool AddEmployee(Employee emp);\n    public static bool UpdateEmployee(Employee emp);\n    public static bool DeleteEmployee(Employee emp);\n    public static Employee GetEmployeeById(string Id);\n}\n```\nBLL层\n```cs\npublic class EmpBLL\n{\n    public void Test()\n    {\n        Employee emp1 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"张三\", Sex = \"男\" };\n        Employee emp2 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"李四\", Sex = \"男\", ParentId = emp1.Id };\n        //插入员工\n        EmpDAO.AddEmployee(emp1);\n        EmpDAO.AddEmployee(emp2);\n\n        //取员工的上级\n        var emp2Parent = EmpDAO.GetEmployeeById(emp2.ParentId);\n        var emp2Parent_Parent = EmpDAO.GetEmployeeById(emp2Parent.ParentId);\n\n        //删除员工\n        EmpDAO.DeleteEmployee(emp1);\n        EmpDAO.DeleteEmployee(emp2);\n    }\n}\n```\n\n###### 采用充血模型实现\nModel层\n```cs\npublic class Employee\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Sex { get; set; }\n    public DateTime? BirthDay { get; set; }\n    /// <summary>\n    /// 直属上级的Id\n    /// </summary>\n    public string ParentId { get; set; }\n    private Employee _parent;\n\n    public static Employee query(string id)\n    {\n        Employee emp = new Employee();\n        //实现略,仅需填充emp的熟悉即可\n        return emp;\n    }\n    /// <summary>\n    /// 保存对象,实现略\n    /// </summary>\n    /// <returns></returns>\n    public bool Save()\n    {\n        return true;\n    }\n    /// <summary>\n    /// 删除对象,实现略\n    /// </summary>\n    /// <returns></returns>\n    public bool Drop()\n    {\n        return true;\n    }\n    /// <summary>\n    /// 上级领导，此处直接获得了Employee对象\n    /// </summary>\n    public Employee Parent\n    {\n        get\n        {\n            if (_parent != null)\n            {\n                return _parent;\n            }\n            else\n            {\n                _parent = query(this.ParentId);\n                return _parent;\n            }\n        }\n        set\n        {\n            _parent = value;\n            this.ParentId = _parent.Id;\n            Save();\n        }\n    }\n}\n```\nService层\n```cs\npublic class EmpService\n{\n    public void Test()\n    {\n        Employee emp1 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"张三\", Sex = \"男\" };\n        Employee emp2 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"李四\", Sex = \"男\", ParentId = emp1.Id };\n        //插入员工\n        emp1.Save();\n        emp2.Save();\n\n        //取员工的上级\n        var emp2Parent = emp2.Parent;\n        var emp2Parent_Parent = emp2Parent.Parent;\n\n        //删除员工\n        emp2.Drop();\n        emp1.Drop();\n    }\n}\n```\n\n##### 总结\n总结：从两者Service层和BLL　层的代码区分来看，两者都是实现了业务功能和延迟加载。\n\n贫血模型优点是系统的层次结构清楚，各层之间单向依赖。缺点是不够面向对象。\n\n充血模型优点是面向对象，Business Logic符合单一职责，不像在贫血模型里面那样包含所有的业务逻辑太过沉重。缺点是比较复杂，对技术要求更高。","source":"_posts/贫血模型和充血模型.md","raw":"---\ntitle: 贫血模型和充血模型\ndate: 2018-03-07 23:16:24\ncategories: 架构\ntags: 架构\n---\n##### 贫血模型\n贫血模型,是指Model中,仅包含状态(属性),不包含行为(方法),采用这种设计时,需要分离出DB层,专门用于数据库操作.\n\n##### 充血模型\n充血模型,是指Model中既包括状态,又包括行为,是最符合面向对象的设计方式\n\n<!--more-->\n##### 举例说明\n对于员工Employee来说,每个员工的属性有id,Name,Sex,BirthDay,Parent(上级),行为有查找,保存,删除,职位调整(更换上级)等\n\n###### 采用贫血模型实现\nModel层\n```cs\npublic class Employee\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Sex { get; set; }\n    public DateTime? BirthDay { get; set; }\n    /// <summary>\n    /// 直属上级的Id\n    /// </summary>\n    public string ParentId { get; set; }\n}\n```\nDB层\n```cs\n//实现方法略    \npublic class EmpDAO\n{\n    public static bool AddEmployee(Employee emp);\n    public static bool UpdateEmployee(Employee emp);\n    public static bool DeleteEmployee(Employee emp);\n    public static Employee GetEmployeeById(string Id);\n}\n```\nBLL层\n```cs\npublic class EmpBLL\n{\n    public void Test()\n    {\n        Employee emp1 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"张三\", Sex = \"男\" };\n        Employee emp2 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"李四\", Sex = \"男\", ParentId = emp1.Id };\n        //插入员工\n        EmpDAO.AddEmployee(emp1);\n        EmpDAO.AddEmployee(emp2);\n\n        //取员工的上级\n        var emp2Parent = EmpDAO.GetEmployeeById(emp2.ParentId);\n        var emp2Parent_Parent = EmpDAO.GetEmployeeById(emp2Parent.ParentId);\n\n        //删除员工\n        EmpDAO.DeleteEmployee(emp1);\n        EmpDAO.DeleteEmployee(emp2);\n    }\n}\n```\n\n###### 采用充血模型实现\nModel层\n```cs\npublic class Employee\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Sex { get; set; }\n    public DateTime? BirthDay { get; set; }\n    /// <summary>\n    /// 直属上级的Id\n    /// </summary>\n    public string ParentId { get; set; }\n    private Employee _parent;\n\n    public static Employee query(string id)\n    {\n        Employee emp = new Employee();\n        //实现略,仅需填充emp的熟悉即可\n        return emp;\n    }\n    /// <summary>\n    /// 保存对象,实现略\n    /// </summary>\n    /// <returns></returns>\n    public bool Save()\n    {\n        return true;\n    }\n    /// <summary>\n    /// 删除对象,实现略\n    /// </summary>\n    /// <returns></returns>\n    public bool Drop()\n    {\n        return true;\n    }\n    /// <summary>\n    /// 上级领导，此处直接获得了Employee对象\n    /// </summary>\n    public Employee Parent\n    {\n        get\n        {\n            if (_parent != null)\n            {\n                return _parent;\n            }\n            else\n            {\n                _parent = query(this.ParentId);\n                return _parent;\n            }\n        }\n        set\n        {\n            _parent = value;\n            this.ParentId = _parent.Id;\n            Save();\n        }\n    }\n}\n```\nService层\n```cs\npublic class EmpService\n{\n    public void Test()\n    {\n        Employee emp1 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"张三\", Sex = \"男\" };\n        Employee emp2 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"李四\", Sex = \"男\", ParentId = emp1.Id };\n        //插入员工\n        emp1.Save();\n        emp2.Save();\n\n        //取员工的上级\n        var emp2Parent = emp2.Parent;\n        var emp2Parent_Parent = emp2Parent.Parent;\n\n        //删除员工\n        emp2.Drop();\n        emp1.Drop();\n    }\n}\n```\n\n##### 总结\n总结：从两者Service层和BLL　层的代码区分来看，两者都是实现了业务功能和延迟加载。\n\n贫血模型优点是系统的层次结构清楚，各层之间单向依赖。缺点是不够面向对象。\n\n充血模型优点是面向对象，Business Logic符合单一职责，不像在贫血模型里面那样包含所有的业务逻辑太过沉重。缺点是比较复杂，对技术要求更高。","slug":"贫血模型和充血模型","published":1,"updated":"2021-03-30T03:24:16.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx1d006svcuagipr08av","content":"<h5 id=\"贫血模型\"><a href=\"#贫血模型\" class=\"headerlink\" title=\"贫血模型\"></a>贫血模型</h5><p>贫血模型,是指Model中,仅包含状态(属性),不包含行为(方法),采用这种设计时,需要分离出DB层,专门用于数据库操作.</p>\n<h5 id=\"充血模型\"><a href=\"#充血模型\" class=\"headerlink\" title=\"充血模型\"></a>充血模型</h5><p>充血模型,是指Model中既包括状态,又包括行为,是最符合面向对象的设计方式</p>\n<span id=\"more\"></span>\n<h5 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h5><p>对于员工Employee来说,每个员工的属性有id,Name,Sex,BirthDay,Parent(上级),行为有查找,保存,删除,职位调整(更换上级)等</p>\n<h6 id=\"采用贫血模型实现\"><a href=\"#采用贫血模型实现\" class=\"headerlink\" title=\"采用贫血模型实现\"></a>采用贫血模型实现</h6><p>Model层</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Sex &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime? BirthDay &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 直属上级的Id</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ParentId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DB层</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现方法略    </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpDAO</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">AddEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">UpdateEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Employee <span class=\"title\">GetEmployeeById</span>(<span class=\"params\"><span class=\"built_in\">string</span> Id</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BLL层</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpBLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Employee emp1 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">&quot;张三&quot;</span>, Sex = <span class=\"string\">&quot;男&quot;</span> &#125;;</span><br><span class=\"line\">        Employee emp2 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">&quot;李四&quot;</span>, Sex = <span class=\"string\">&quot;男&quot;</span>, ParentId = emp1.Id &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//插入员工</span></span><br><span class=\"line\">        EmpDAO.AddEmployee(emp1);</span><br><span class=\"line\">        EmpDAO.AddEmployee(emp2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//取员工的上级</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent = EmpDAO.GetEmployeeById(emp2.ParentId);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent_Parent = EmpDAO.GetEmployeeById(emp2Parent.ParentId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//删除员工</span></span><br><span class=\"line\">        EmpDAO.DeleteEmployee(emp1);</span><br><span class=\"line\">        EmpDAO.DeleteEmployee(emp2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"采用充血模型实现\"><a href=\"#采用充血模型实现\" class=\"headerlink\" title=\"采用充血模型实现\"></a>采用充血模型实现</h6><p>Model层</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Sex &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime? BirthDay &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 直属上级的Id</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ParentId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Employee _parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Employee <span class=\"title\">query</span>(<span class=\"params\"><span class=\"built_in\">string</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Employee emp = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">        <span class=\"comment\">//实现略,仅需填充emp的熟悉即可</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> emp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 保存对象,实现略</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Save</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除对象,实现略</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Drop</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 上级领导，此处直接获得了Employee对象</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Employee Parent</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_parent != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _parent;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _parent = query(<span class=\"keyword\">this</span>.ParentId);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _parent;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _parent = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ParentId = _parent.Id;</span><br><span class=\"line\">            Save();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Service层</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Employee emp1 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">&quot;张三&quot;</span>, Sex = <span class=\"string\">&quot;男&quot;</span> &#125;;</span><br><span class=\"line\">        Employee emp2 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">&quot;李四&quot;</span>, Sex = <span class=\"string\">&quot;男&quot;</span>, ParentId = emp1.Id &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//插入员工</span></span><br><span class=\"line\">        emp1.Save();</span><br><span class=\"line\">        emp2.Save();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//取员工的上级</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent = emp2.Parent;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent_Parent = emp2Parent.Parent;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//删除员工</span></span><br><span class=\"line\">        emp2.Drop();</span><br><span class=\"line\">        emp1.Drop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>总结：从两者Service层和BLL　层的代码区分来看，两者都是实现了业务功能和延迟加载。</p>\n<p>贫血模型优点是系统的层次结构清楚，各层之间单向依赖。缺点是不够面向对象。</p>\n<p>充血模型优点是面向对象，Business Logic符合单一职责，不像在贫血模型里面那样包含所有的业务逻辑太过沉重。缺点是比较复杂，对技术要求更高。</p>\n","site":{"data":{}},"length":2932,"excerpt":"<h5 id=\"贫血模型\"><a href=\"#贫血模型\" class=\"headerlink\" title=\"贫血模型\"></a>贫血模型</h5><p>贫血模型,是指Model中,仅包含状态(属性),不包含行为(方法),采用这种设计时,需要分离出DB层,专门用于数据库操作.</p>\n<h5 id=\"充血模型\"><a href=\"#充血模型\" class=\"headerlink\" title=\"充血模型\"></a>充血模型</h5><p>充血模型,是指Model中既包括状态,又包括行为,是最符合面向对象的设计方式</p>","more":"<h5 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h5><p>对于员工Employee来说,每个员工的属性有id,Name,Sex,BirthDay,Parent(上级),行为有查找,保存,删除,职位调整(更换上级)等</p>\n<h6 id=\"采用贫血模型实现\"><a href=\"#采用贫血模型实现\" class=\"headerlink\" title=\"采用贫血模型实现\"></a>采用贫血模型实现</h6><p>Model层</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Sex &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime? BirthDay &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 直属上级的Id</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ParentId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DB层</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现方法略    </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpDAO</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">AddEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">UpdateEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">DeleteEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Employee <span class=\"title\">GetEmployeeById</span>(<span class=\"params\"><span class=\"built_in\">string</span> Id</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BLL层</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpBLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Employee emp1 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">&quot;张三&quot;</span>, Sex = <span class=\"string\">&quot;男&quot;</span> &#125;;</span><br><span class=\"line\">        Employee emp2 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">&quot;李四&quot;</span>, Sex = <span class=\"string\">&quot;男&quot;</span>, ParentId = emp1.Id &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//插入员工</span></span><br><span class=\"line\">        EmpDAO.AddEmployee(emp1);</span><br><span class=\"line\">        EmpDAO.AddEmployee(emp2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//取员工的上级</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent = EmpDAO.GetEmployeeById(emp2.ParentId);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent_Parent = EmpDAO.GetEmployeeById(emp2Parent.ParentId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//删除员工</span></span><br><span class=\"line\">        EmpDAO.DeleteEmployee(emp1);</span><br><span class=\"line\">        EmpDAO.DeleteEmployee(emp2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"采用充血模型实现\"><a href=\"#采用充血模型实现\" class=\"headerlink\" title=\"采用充血模型实现\"></a>采用充血模型实现</h6><p>Model层</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Sex &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime? BirthDay &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 直属上级的Id</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ParentId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Employee _parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Employee <span class=\"title\">query</span>(<span class=\"params\"><span class=\"built_in\">string</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Employee emp = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">        <span class=\"comment\">//实现略,仅需填充emp的熟悉即可</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> emp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 保存对象,实现略</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Save</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除对象,实现略</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Drop</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 上级领导，此处直接获得了Employee对象</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Employee Parent</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_parent != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _parent;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _parent = query(<span class=\"keyword\">this</span>.ParentId);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _parent;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _parent = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ParentId = _parent.Id;</span><br><span class=\"line\">            Save();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Service层</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Employee emp1 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">&quot;张三&quot;</span>, Sex = <span class=\"string\">&quot;男&quot;</span> &#125;;</span><br><span class=\"line\">        Employee emp2 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">&quot;李四&quot;</span>, Sex = <span class=\"string\">&quot;男&quot;</span>, ParentId = emp1.Id &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//插入员工</span></span><br><span class=\"line\">        emp1.Save();</span><br><span class=\"line\">        emp2.Save();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//取员工的上级</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent = emp2.Parent;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent_Parent = emp2Parent.Parent;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//删除员工</span></span><br><span class=\"line\">        emp2.Drop();</span><br><span class=\"line\">        emp1.Drop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>总结：从两者Service层和BLL　层的代码区分来看，两者都是实现了业务功能和延迟加载。</p>\n<p>贫血模型优点是系统的层次结构清楚，各层之间单向依赖。缺点是不够面向对象。</p>\n<p>充血模型优点是面向对象，Business Logic符合单一职责，不像在贫血模型里面那样包含所有的业务逻辑太过沉重。缺点是比较复杂，对技术要求更高。</p>"},{"title":"随笔-断舍离","date":"2020-09-25T14:02:50.000Z","_content":"近期刚换工作，新公司、新环境和新同事难免会有一丝不自然，也做错了不少的事和做了一些不适当的举动。同时也还不清楚自己当前的人设是什么。\n\n#### 反思\n\n1. 在合并的分支的时候没有仔细检查自己的操作，同时在事情发生以后没有及时的去说明情况。后面再有类似地情况，要及时的说明情况和自己的处理方法。\n\n2. 代码的质量不过关，同时集成测试写得太随意，根本没有起到应有的作用，以后集成测试不能再随便应付了事，同时写代码的时候要保质保量，注意到各种细节和逻辑。\n\n3. 在和领导吃饭的时候，有很多细节没有注意。处理的很有问题。需要及时的补充这方面的知识。\n\n4. 微信聊天的时候要分清楚是什么时候，该说什么，不该说什么。\n\n5. 因为没有预设好人设和加上自己的自卑心理导致自己感觉很不适应。\n\n#### 人设\n\n目前关于人设的想法就暂定为一个喜欢玩游戏，热爱学习新技术，相同错误只会犯一下的懒癌少年。\n","source":"_posts/随笔-近期反思.md","raw":"---\ntitle: 随笔-断舍离\ndate: 2020-09-25 22:02:50\ncategories: 随笔\ntags:\n - 随笔\n---\n近期刚换工作，新公司、新环境和新同事难免会有一丝不自然，也做错了不少的事和做了一些不适当的举动。同时也还不清楚自己当前的人设是什么。\n\n#### 反思\n\n1. 在合并的分支的时候没有仔细检查自己的操作，同时在事情发生以后没有及时的去说明情况。后面再有类似地情况，要及时的说明情况和自己的处理方法。\n\n2. 代码的质量不过关，同时集成测试写得太随意，根本没有起到应有的作用，以后集成测试不能再随便应付了事，同时写代码的时候要保质保量，注意到各种细节和逻辑。\n\n3. 在和领导吃饭的时候，有很多细节没有注意。处理的很有问题。需要及时的补充这方面的知识。\n\n4. 微信聊天的时候要分清楚是什么时候，该说什么，不该说什么。\n\n5. 因为没有预设好人设和加上自己的自卑心理导致自己感觉很不适应。\n\n#### 人设\n\n目前关于人设的想法就暂定为一个喜欢玩游戏，热爱学习新技术，相同错误只会犯一下的懒癌少年。\n","slug":"随笔-近期反思","published":1,"updated":"2021-03-30T03:24:16.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx1e006uvcua9sj9f0bp","content":"<p>近期刚换工作，新公司、新环境和新同事难免会有一丝不自然，也做错了不少的事和做了一些不适当的举动。同时也还不清楚自己当前的人设是什么。</p>\n<h4 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h4><ol>\n<li><p>在合并的分支的时候没有仔细检查自己的操作，同时在事情发生以后没有及时的去说明情况。后面再有类似地情况，要及时的说明情况和自己的处理方法。</p>\n</li>\n<li><p>代码的质量不过关，同时集成测试写得太随意，根本没有起到应有的作用，以后集成测试不能再随便应付了事，同时写代码的时候要保质保量，注意到各种细节和逻辑。</p>\n</li>\n<li><p>在和领导吃饭的时候，有很多细节没有注意。处理的很有问题。需要及时的补充这方面的知识。</p>\n</li>\n<li><p>微信聊天的时候要分清楚是什么时候，该说什么，不该说什么。</p>\n</li>\n<li><p>因为没有预设好人设和加上自己的自卑心理导致自己感觉很不适应。</p>\n</li>\n</ol>\n<h4 id=\"人设\"><a href=\"#人设\" class=\"headerlink\" title=\"人设\"></a>人设</h4><p>目前关于人设的想法就暂定为一个喜欢玩游戏，热爱学习新技术，相同错误只会犯一下的懒癌少年。</p>\n","site":{"data":{}},"length":356,"excerpt":"","more":"<p>近期刚换工作，新公司、新环境和新同事难免会有一丝不自然，也做错了不少的事和做了一些不适当的举动。同时也还不清楚自己当前的人设是什么。</p>\n<h4 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h4><ol>\n<li><p>在合并的分支的时候没有仔细检查自己的操作，同时在事情发生以后没有及时的去说明情况。后面再有类似地情况，要及时的说明情况和自己的处理方法。</p>\n</li>\n<li><p>代码的质量不过关，同时集成测试写得太随意，根本没有起到应有的作用，以后集成测试不能再随便应付了事，同时写代码的时候要保质保量，注意到各种细节和逻辑。</p>\n</li>\n<li><p>在和领导吃饭的时候，有很多细节没有注意。处理的很有问题。需要及时的补充这方面的知识。</p>\n</li>\n<li><p>微信聊天的时候要分清楚是什么时候，该说什么，不该说什么。</p>\n</li>\n<li><p>因为没有预设好人设和加上自己的自卑心理导致自己感觉很不适应。</p>\n</li>\n</ol>\n<h4 id=\"人设\"><a href=\"#人设\" class=\"headerlink\" title=\"人设\"></a>人设</h4><p>目前关于人设的想法就暂定为一个喜欢玩游戏，热爱学习新技术，相同错误只会犯一下的懒癌少年。</p>\n"},{"title":"随笔-断舍离","date":"2019-04-08T16:02:50.000Z","_content":"今天无意中在一个公众号看到有推荐这本<<断舍离>>的,看了一下,发现自己还是有必要去阅读一下的\n<!--more-->\n### 何为断舍离\n\n通过收拾家里的破烂儿,也整理内心中的破烂儿,让人生变得开心的方法.\n\n#### 断\n\n断绝想要进入自己家的不需要的东西\n\n* 购物是三思而后行\n* 不需要的东西就不接受\n* 只添置必需的物品\n\n#### 舍\n\n舍弃家里到处泛滥的破烂儿\n\n* 收拾没用的破烂儿\n* 卖掉/赠送物品\n* 缩小喜好的范围\n\n#### 离\n\n通过不断的段和舍,将不需要,不合适,不舒服换成需要,合适舒服,选择和当下的自己相称的物品,从而到达,脱离对物品的执念,处于游刃有余的自在的空间\n\n#### 断舍离的机制\n\n一种以\"物品和自己的关系\"为核心,取舍选择物品的技术.思考方式不是\"这东西还能用,所以要留下来\",而是\"我要用,所以它很必要\",主语永远都是自己.而时间轴永远都是现在,现在自己不需要的东西就必须放手,只选择必要的物品.实现对自己的深刻,彻底的了解,并接纳最真实的自己\n\n#### 断舍离和整理收纳的区别\n\n| 比较点 | 断舍离 | 整理收纳 |\n|:-----:|:-----:|:----:|\n| 前提 | 代谢替换 | 保管维持 |\n| 主角 | 自己 | 物品 |\n| 焦点 | 关系性 | 物品或自己或赠送物品的对象 |\n| 核心轴 | 感性,适宜,需要,合适,舒服 | 物质,可惜能用或不能用 |\n| 时间轴 | 现在,当下 | 过去,未来,曾经,今后 |\n| 意识 | 选择,决断 | 回避 |\n| 手续 | 少 | 多 |\n| 技术 | 不需要 | 需要 |\n| 收纳物 | 不需要 | 需要 |\n\n#### 断舍离的精髓\n\n先诊断出物品从你身上掠去了到少能量,然后通过筛选物品的行动,实现自我完善,这就是断舍离的精髓.\n\n#### 断舍离的境界\n\n| 境界 | 气场 | 描述 |\n|:-----:|:-----:|:----:|\n| 断舍离前 | 腐败 | 对物品的数量与质量没有自觉 |\n| 初级 | 停滞 | 意识到物品的数量与质量,判断是否需要直面对丢弃的迷惘 |\n| 中级 | 新陈代谢 | 快速判断物品是否必需,不会拿可惜当借口,习惯了果断与下狠心 |\n| 大师级 | 上升 | 致力于精挑细选,物尽其用,物品能用完,物品的舍弃降到最小程度,享受清爽与满足感 |\n","source":"_posts/随笔-断舍离.md","raw":"---\ntitle: 随笔-断舍离\ndate: 2019-04-09 00:02:50\ncategories: 随笔\ntags:\n - 随笔\n---\n今天无意中在一个公众号看到有推荐这本<<断舍离>>的,看了一下,发现自己还是有必要去阅读一下的\n<!--more-->\n### 何为断舍离\n\n通过收拾家里的破烂儿,也整理内心中的破烂儿,让人生变得开心的方法.\n\n#### 断\n\n断绝想要进入自己家的不需要的东西\n\n* 购物是三思而后行\n* 不需要的东西就不接受\n* 只添置必需的物品\n\n#### 舍\n\n舍弃家里到处泛滥的破烂儿\n\n* 收拾没用的破烂儿\n* 卖掉/赠送物品\n* 缩小喜好的范围\n\n#### 离\n\n通过不断的段和舍,将不需要,不合适,不舒服换成需要,合适舒服,选择和当下的自己相称的物品,从而到达,脱离对物品的执念,处于游刃有余的自在的空间\n\n#### 断舍离的机制\n\n一种以\"物品和自己的关系\"为核心,取舍选择物品的技术.思考方式不是\"这东西还能用,所以要留下来\",而是\"我要用,所以它很必要\",主语永远都是自己.而时间轴永远都是现在,现在自己不需要的东西就必须放手,只选择必要的物品.实现对自己的深刻,彻底的了解,并接纳最真实的自己\n\n#### 断舍离和整理收纳的区别\n\n| 比较点 | 断舍离 | 整理收纳 |\n|:-----:|:-----:|:----:|\n| 前提 | 代谢替换 | 保管维持 |\n| 主角 | 自己 | 物品 |\n| 焦点 | 关系性 | 物品或自己或赠送物品的对象 |\n| 核心轴 | 感性,适宜,需要,合适,舒服 | 物质,可惜能用或不能用 |\n| 时间轴 | 现在,当下 | 过去,未来,曾经,今后 |\n| 意识 | 选择,决断 | 回避 |\n| 手续 | 少 | 多 |\n| 技术 | 不需要 | 需要 |\n| 收纳物 | 不需要 | 需要 |\n\n#### 断舍离的精髓\n\n先诊断出物品从你身上掠去了到少能量,然后通过筛选物品的行动,实现自我完善,这就是断舍离的精髓.\n\n#### 断舍离的境界\n\n| 境界 | 气场 | 描述 |\n|:-----:|:-----:|:----:|\n| 断舍离前 | 腐败 | 对物品的数量与质量没有自觉 |\n| 初级 | 停滞 | 意识到物品的数量与质量,判断是否需要直面对丢弃的迷惘 |\n| 中级 | 新陈代谢 | 快速判断物品是否必需,不会拿可惜当借口,习惯了果断与下狠心 |\n| 大师级 | 上升 | 致力于精挑细选,物尽其用,物品能用完,物品的舍弃降到最小程度,享受清爽与满足感 |\n","slug":"随笔-断舍离","published":1,"updated":"2021-03-30T03:24:16.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx1f006yvcua1q5v4ivu","content":"<p>今天无意中在一个公众号看到有推荐这本&lt;&lt;断舍离&gt;&gt;的,看了一下,发现自己还是有必要去阅读一下的</p>\n<span id=\"more\"></span>\n<h3 id=\"何为断舍离\"><a href=\"#何为断舍离\" class=\"headerlink\" title=\"何为断舍离\"></a>何为断舍离</h3><p>通过收拾家里的破烂儿,也整理内心中的破烂儿,让人生变得开心的方法.</p>\n<h4 id=\"断\"><a href=\"#断\" class=\"headerlink\" title=\"断\"></a>断</h4><p>断绝想要进入自己家的不需要的东西</p>\n<ul>\n<li>购物是三思而后行</li>\n<li>不需要的东西就不接受</li>\n<li>只添置必需的物品</li>\n</ul>\n<h4 id=\"舍\"><a href=\"#舍\" class=\"headerlink\" title=\"舍\"></a>舍</h4><p>舍弃家里到处泛滥的破烂儿</p>\n<ul>\n<li>收拾没用的破烂儿</li>\n<li>卖掉/赠送物品</li>\n<li>缩小喜好的范围</li>\n</ul>\n<h4 id=\"离\"><a href=\"#离\" class=\"headerlink\" title=\"离\"></a>离</h4><p>通过不断的段和舍,将不需要,不合适,不舒服换成需要,合适舒服,选择和当下的自己相称的物品,从而到达,脱离对物品的执念,处于游刃有余的自在的空间</p>\n<h4 id=\"断舍离的机制\"><a href=\"#断舍离的机制\" class=\"headerlink\" title=\"断舍离的机制\"></a>断舍离的机制</h4><p>一种以”物品和自己的关系”为核心,取舍选择物品的技术.思考方式不是”这东西还能用,所以要留下来”,而是”我要用,所以它很必要”,主语永远都是自己.而时间轴永远都是现在,现在自己不需要的东西就必须放手,只选择必要的物品.实现对自己的深刻,彻底的了解,并接纳最真实的自己</p>\n<h4 id=\"断舍离和整理收纳的区别\"><a href=\"#断舍离和整理收纳的区别\" class=\"headerlink\" title=\"断舍离和整理收纳的区别\"></a>断舍离和整理收纳的区别</h4><table>\n<thead>\n<tr>\n<th align=\"center\">比较点</th>\n<th align=\"center\">断舍离</th>\n<th align=\"center\">整理收纳</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">前提</td>\n<td align=\"center\">代谢替换</td>\n<td align=\"center\">保管维持</td>\n</tr>\n<tr>\n<td align=\"center\">主角</td>\n<td align=\"center\">自己</td>\n<td align=\"center\">物品</td>\n</tr>\n<tr>\n<td align=\"center\">焦点</td>\n<td align=\"center\">关系性</td>\n<td align=\"center\">物品或自己或赠送物品的对象</td>\n</tr>\n<tr>\n<td align=\"center\">核心轴</td>\n<td align=\"center\">感性,适宜,需要,合适,舒服</td>\n<td align=\"center\">物质,可惜能用或不能用</td>\n</tr>\n<tr>\n<td align=\"center\">时间轴</td>\n<td align=\"center\">现在,当下</td>\n<td align=\"center\">过去,未来,曾经,今后</td>\n</tr>\n<tr>\n<td align=\"center\">意识</td>\n<td align=\"center\">选择,决断</td>\n<td align=\"center\">回避</td>\n</tr>\n<tr>\n<td align=\"center\">手续</td>\n<td align=\"center\">少</td>\n<td align=\"center\">多</td>\n</tr>\n<tr>\n<td align=\"center\">技术</td>\n<td align=\"center\">不需要</td>\n<td align=\"center\">需要</td>\n</tr>\n<tr>\n<td align=\"center\">收纳物</td>\n<td align=\"center\">不需要</td>\n<td align=\"center\">需要</td>\n</tr>\n</tbody></table>\n<h4 id=\"断舍离的精髓\"><a href=\"#断舍离的精髓\" class=\"headerlink\" title=\"断舍离的精髓\"></a>断舍离的精髓</h4><p>先诊断出物品从你身上掠去了到少能量,然后通过筛选物品的行动,实现自我完善,这就是断舍离的精髓.</p>\n<h4 id=\"断舍离的境界\"><a href=\"#断舍离的境界\" class=\"headerlink\" title=\"断舍离的境界\"></a>断舍离的境界</h4><table>\n<thead>\n<tr>\n<th align=\"center\">境界</th>\n<th align=\"center\">气场</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">断舍离前</td>\n<td align=\"center\">腐败</td>\n<td align=\"center\">对物品的数量与质量没有自觉</td>\n</tr>\n<tr>\n<td align=\"center\">初级</td>\n<td align=\"center\">停滞</td>\n<td align=\"center\">意识到物品的数量与质量,判断是否需要直面对丢弃的迷惘</td>\n</tr>\n<tr>\n<td align=\"center\">中级</td>\n<td align=\"center\">新陈代谢</td>\n<td align=\"center\">快速判断物品是否必需,不会拿可惜当借口,习惯了果断与下狠心</td>\n</tr>\n<tr>\n<td align=\"center\">大师级</td>\n<td align=\"center\">上升</td>\n<td align=\"center\">致力于精挑细选,物尽其用,物品能用完,物品的舍弃降到最小程度,享受清爽与满足感</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"length":709,"excerpt":"<p>今天无意中在一个公众号看到有推荐这本&lt;&lt;断舍离&gt;&gt;的,看了一下,发现自己还是有必要去阅读一下的</p>","more":"<h3 id=\"何为断舍离\"><a href=\"#何为断舍离\" class=\"headerlink\" title=\"何为断舍离\"></a>何为断舍离</h3><p>通过收拾家里的破烂儿,也整理内心中的破烂儿,让人生变得开心的方法.</p>\n<h4 id=\"断\"><a href=\"#断\" class=\"headerlink\" title=\"断\"></a>断</h4><p>断绝想要进入自己家的不需要的东西</p>\n<ul>\n<li>购物是三思而后行</li>\n<li>不需要的东西就不接受</li>\n<li>只添置必需的物品</li>\n</ul>\n<h4 id=\"舍\"><a href=\"#舍\" class=\"headerlink\" title=\"舍\"></a>舍</h4><p>舍弃家里到处泛滥的破烂儿</p>\n<ul>\n<li>收拾没用的破烂儿</li>\n<li>卖掉/赠送物品</li>\n<li>缩小喜好的范围</li>\n</ul>\n<h4 id=\"离\"><a href=\"#离\" class=\"headerlink\" title=\"离\"></a>离</h4><p>通过不断的段和舍,将不需要,不合适,不舒服换成需要,合适舒服,选择和当下的自己相称的物品,从而到达,脱离对物品的执念,处于游刃有余的自在的空间</p>\n<h4 id=\"断舍离的机制\"><a href=\"#断舍离的机制\" class=\"headerlink\" title=\"断舍离的机制\"></a>断舍离的机制</h4><p>一种以”物品和自己的关系”为核心,取舍选择物品的技术.思考方式不是”这东西还能用,所以要留下来”,而是”我要用,所以它很必要”,主语永远都是自己.而时间轴永远都是现在,现在自己不需要的东西就必须放手,只选择必要的物品.实现对自己的深刻,彻底的了解,并接纳最真实的自己</p>\n<h4 id=\"断舍离和整理收纳的区别\"><a href=\"#断舍离和整理收纳的区别\" class=\"headerlink\" title=\"断舍离和整理收纳的区别\"></a>断舍离和整理收纳的区别</h4><table>\n<thead>\n<tr>\n<th align=\"center\">比较点</th>\n<th align=\"center\">断舍离</th>\n<th align=\"center\">整理收纳</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">前提</td>\n<td align=\"center\">代谢替换</td>\n<td align=\"center\">保管维持</td>\n</tr>\n<tr>\n<td align=\"center\">主角</td>\n<td align=\"center\">自己</td>\n<td align=\"center\">物品</td>\n</tr>\n<tr>\n<td align=\"center\">焦点</td>\n<td align=\"center\">关系性</td>\n<td align=\"center\">物品或自己或赠送物品的对象</td>\n</tr>\n<tr>\n<td align=\"center\">核心轴</td>\n<td align=\"center\">感性,适宜,需要,合适,舒服</td>\n<td align=\"center\">物质,可惜能用或不能用</td>\n</tr>\n<tr>\n<td align=\"center\">时间轴</td>\n<td align=\"center\">现在,当下</td>\n<td align=\"center\">过去,未来,曾经,今后</td>\n</tr>\n<tr>\n<td align=\"center\">意识</td>\n<td align=\"center\">选择,决断</td>\n<td align=\"center\">回避</td>\n</tr>\n<tr>\n<td align=\"center\">手续</td>\n<td align=\"center\">少</td>\n<td align=\"center\">多</td>\n</tr>\n<tr>\n<td align=\"center\">技术</td>\n<td align=\"center\">不需要</td>\n<td align=\"center\">需要</td>\n</tr>\n<tr>\n<td align=\"center\">收纳物</td>\n<td align=\"center\">不需要</td>\n<td align=\"center\">需要</td>\n</tr>\n</tbody></table>\n<h4 id=\"断舍离的精髓\"><a href=\"#断舍离的精髓\" class=\"headerlink\" title=\"断舍离的精髓\"></a>断舍离的精髓</h4><p>先诊断出物品从你身上掠去了到少能量,然后通过筛选物品的行动,实现自我完善,这就是断舍离的精髓.</p>\n<h4 id=\"断舍离的境界\"><a href=\"#断舍离的境界\" class=\"headerlink\" title=\"断舍离的境界\"></a>断舍离的境界</h4><table>\n<thead>\n<tr>\n<th align=\"center\">境界</th>\n<th align=\"center\">气场</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">断舍离前</td>\n<td align=\"center\">腐败</td>\n<td align=\"center\">对物品的数量与质量没有自觉</td>\n</tr>\n<tr>\n<td align=\"center\">初级</td>\n<td align=\"center\">停滞</td>\n<td align=\"center\">意识到物品的数量与质量,判断是否需要直面对丢弃的迷惘</td>\n</tr>\n<tr>\n<td align=\"center\">中级</td>\n<td align=\"center\">新陈代谢</td>\n<td align=\"center\">快速判断物品是否必需,不会拿可惜当借口,习惯了果断与下狠心</td>\n</tr>\n<tr>\n<td align=\"center\">大师级</td>\n<td align=\"center\">上升</td>\n<td align=\"center\">致力于精挑细选,物尽其用,物品能用完,物品的舍弃降到最小程度,享受清爽与满足感</td>\n</tr>\n</tbody></table>"},{"title":"高手 精英的见识和我们的时代","date":"2021-01-18T15:53:02.000Z","_content":"\n### Part 1 精英社会的神话\n\n#### 成功与运气运气动力学（个人运气的三个规律）\n\n1. 运气可以放大（人类社会是个非线性的复杂系统，这意味着初始条件好一点点，最终结果不是按比例也好一点点，而是很有可能不成比例地把初始优势放大很多很多。）\n2. 运气可以累加\n3. 竞争越激烈，运气越重要\n<!--more-->\n#### 胜者通吃\n\n1. 胜者通吃的市场\n2. 正反馈效应\n3. 收入差距\n\n#### 信命不认命\n\n1. 成功是因为水平高，失败是因为运气差\n2. 不信邪的好处（如果一个人所处的环境变化不定，运气的成分实在太大，未来的境遇很可能还不如现在，那他的确应该采取“快策略”，及时享乐就算了；只有当你处于稳定的环境中，对未来有点把握，才有条件采取“慢策略”，推迟享乐。）\n3. 一流智力（检验一流智力的标准，就是看你能不能在头脑中同时存在两种相反的想法，还维持正常行事的能力。）\n\n#### 攀比动力学\n\n1. 房价为什么越来越高\n2. 花费军备竞赛（花费传导）\n3. 累进消费税\n\n#### 富而好礼\n\n1. 富贵而骄（如果你想长久地享受好运气，从一个成功走向另一个成功，就得学会子贡说的“富而无骄”。）\n2. 主要看气质（想要跟人合作，你最好有一个“好人”气质。最好的方法就是你要承认自己的成功之中有运气的因素，不要把所有的功劳都归于自己。）\n3. 感恩之心（感恩能让人的焦虑减少，更不容易恼怒，睡眠质量更好，还对别人更有同情心。）\n\n#### 竞争不充分的领域里才有英雄\n\n1. 你应该尽可能去一个新兴的领域。领域不成熟，竞争不激烈，你就有更大的自由度。\n2. 如果是一个成熟的领域，那么你就得尊重这个领域的规律，不能随便标新立异。\n\n有一种声望很值钱声望，是一本学术期刊最大的价值，而声望只能依靠在历史上慢慢地积累。“声望”根本没有替代品。\n\n#### 精英水平的道歉\n\n只有当你分析和解决了自己的问题，你的道歉才配得上被人原谅。道歉的目的，不应该是为了从对方那里获得什么——这个你控制不了。你只能控制你自己。\n\n##### 一个好的道歉要有三步\n\n1. 明确动机：不是为了赢回别人的信任，而是为了完善自己的人格。\n2. 学到东西：态度有问题就解决态度问题，能力有问题就解决能力问题。\n3. 提出道歉：说明你的错误，也说明你的改变，但是把是否原谅的决定权留给对方。\n\n#### 国学的三个问题\n\n1. 所谓“国学”，到底是对全人类都有价值的通用的学问，还是仅仅是一个地方性的风俗学问。\n2. 中国文化中有哪些仅仅是历史遗迹，有哪些对现代社会仍然有用。\n3. 我们对中国文化是不是非得“仰视”，我们能不能站在现代的高度，“俯视”国学。如果一直仰望，怎么能发展呢？\n\n国学，应该是思想和学问。国学对应的应该是西方的“自由技艺”（liberal arts），是能让人做事更有分寸，解决问题更有方法，获得真正自由的学问。我们想学的不仅仅是“爱国者”的学问，我们还想学“治国者”的学问。\n\n#### 说精英，谁是精英\n\n1. 食物链、智识链和幸福链（“精英”的定义，应该看智识水平的高低。）\n2. 自由、代价和大事（最有意思的人生就是找到机会去做些大事，你既能感到幸福，又能顺便提升食物链排名。）\n3. 算法和复杂（凡事查“如果······就······”表就知道该怎么办的事儿，都不叫决策，都是算法。决策，是没有人告诉你该怎么办，没有固定算法，没有已知的对错，这个时候你怎么选择。）\n\n### Part 2 天才和疯子的一线之隔\n\n#### 俭省追逐者的绝境\n\n1. 简单道理（避免陷入一味求多的思维模式，尽可能利用手里现有的资源发展。）\n2. 追逐者（追逐心态的三个来源：1. 跟别人比。2. 我们总认为想要办成更多的事儿，就得动用更多的资源。我们常常忽略自己已经拥有的资源的价值。3. 我们单纯就是想要“更多”。）\n3. 买买买（面对一个具体的局面，到底是应该悠着点，还是全力以赴争取呢？大概有两个标准：1. 游戏是不是可持续的。2. 你的追逐到底是实际的需要，还是为了满足自己的心理需求。）\n\n#### 有差别的人类劳动\n\n1. 价值和价值（资源的“内在价值”是一回事，而人怎么利用这个资源，是另一回事——如果人能善加利用，就可以给任何资源创造新的价值。）\n2. 俭省者思维（俭省者关注长远目标；俭省者的攀比心理比较弱，不会陷入追逐者绝境；最重要的是，俭省者总是尽可能利用现有的资源。）\n3. 受限制条件下的创造（在限制条件下，你不得不对现有资源开发出新的用法——这个用法往往有很好的创造性。反过来说，如果要什么有什么，你可以用新资源来实现新功能，那就根本没必要研究什么新用法，也就没有创造性了。）\n\n最有价值的人类劳动是“有差别的”劳动，是你能不能给手里的资源增加一个创造性的附加值。获得创造性的一个好方法：是人为设定一个限制，逼着自己在一个框架之内寻找发挥。\n\n#### 从刻意练习到功夫在诗外\n\n1. 外行的洞见（外行解决问题是一个非常普遍的现象。一方面是本专业专家能解决的问题肯定早就解决了，另一方面是复杂问题的确需要用到多个专业的知识。）\n2. 什么时候“练习”最有用（有严格固定规则的领域，练习的作用最大；没有严格规则的领域，练习的作用非常有限。环境局面越是可控。可预测的，练习的作用越大；局面如果是复杂多变、不可预测的，练习的作用就很小。）\n3. 21世纪什么人才最贵（天才最贵，多面手第二贵。）\n真正的斜杠青年追求的不是简历上多几个斜杠，而应该是培养广泛的兴趣，把知识本身当成回报。\n\n#### 窈窕淑女效应\n\n1. 你当她是什么人（你当她是什么人，她最后就真的是什么人。）\n2. 自证预言（你“预言”局面会如何如何，你就按照这个想法去做，局面真的就会如何如何。）\n3. 你和你对你的预期（“叙事自我”，我们时刻都在给自己讲一个故事，说我这么做，是因为我是个这样的人。）\n\n#### 天才和疯子的一线之隔“\n\n认知抑制解除”，有的人·能解除这种认知抑制的本能，专门注意到被一般人忽略掉的信息，并从中发现一些东西。创造力=大胆尝试新想法X智能。\n\n##### 用进化论修心养性\n\n1. 世界观：演化没有目的\n2. 社会观：好东西没有设计\n3. 价值观：自发演化的东西往往比设计出来的东西好\n4. 人生观：符合天道\n\n### Part 3 巨人的工具\n\n#### 巨人的战术、习惯和日常\n\n##### 呆伯特作者的经验之谈\n\n1. “目标”和“系统” 所谓“目标”，就是你做这件事就是为了做好这件事，成功了就有回报，失败了就算白干；所谓“系统”，则是一个连续变化的东西，或者是一项技能，或者是一个关系。为了这个系统，你可以做各种项目，你可以要求自己养成什么习惯，你要的不是某个具体事件的成败，而是“发展”这个系统。\n2. 灵感  在浏览信息的过程中，你怎么判断哪条信息值得作为素材呢？你不应该听从大脑的判断，你应该听从身体的判断。如果你的身体对什么信息做出强烈反应，那么别人大概也会关心这个东西。\n3. 技能  不管你真正喜欢的领域是什么，你要努力在这个领域练到前25%。然后你还得再加一个领域——当然能加两个更好。\n\n#### 指挥官的派头\n\n1. 自律 = 自由  你为了获得真正的自由，就非得给自己设定一些限制。所谓“真正的自由”，也就是财务自由、时间自由、免于疾病和贫困的自由，为了达到这样的目标，你必须自律才行。\n2. 极端的所有权  我对我的世界，有极端的所有权，如果我的队伍有问题，我自己就会解决，我不会等到这个时候向上级抱怨；反过来说，如果哪一天我真的跟上级说，“老板，我需要这个”——那我马上就能得到我需要的，因为上级明白，凡是我提出的要求，一定是我真的需要。\n3. 谦卑和领导力  要求你在即使身心全部投入的情况下，仍然能在心里保持一个冷静的声音，给自己提个醒。\n\n#### 给前辈铺路的人\n\n1. 画布策略的心法，就是“be lesser， do more”——把自己放在更次要的位置，给别人做更多的事。\n2. 画布策略的关键是在工作上给人帮助，给人铺路，让别人能把事做得更漂亮。\n3. “画布策略”没有过期时间。哪怕你自己已经独立做事了，哪怕别人都开始对你使用画布策略了，你还应该继续给人当清道夫。\n\n#### 风险投资人的养成\n\n1. 进攻和防守  你在生活中面对的各种挑战可以分为两类。一类挑战是“防守”，也就是别人给你的挑战。别人给你任务，你想法设法完成，做成了也很有成就感，但是主动权在别人手里。另外一类挑战是“进攻”，是做你自己想做的事情，主动权在自己手里。\n2. 日常风格  任何时候都要真诚，不要模仿任何人，永远做最真实的自己——而且你不必为此道歉。\n\n#### 我怎么管理信息3个信息管理经验\n\n1. 采集  我们要专注于识别，而让计算机帮着提取。提取信息最好的办法是搜索。有了高级管理工具，你就应该把任何可能有价值的东西都记录下来。\n2. 合作  \n3. 创造\n\n#### 三种浪漫体质\n\n1. 命运体制  认为爱情是上天注定的，爱情来了你就无法抗拒，人们为了爱情愿意做出牺牲，甚至可以承担痛苦。总之，所有事情都应该为爱情让路。\n2. 选择体制  寻找恋爱和结婚对象，会特别理性地权衡比较——对方能不能满足我的各种需要？我在这段关系中能不能舒服地行使自己的权利？就好像自己是在挑选一件适合自己的商品一样。\n3. 契约体制  婚姻有一定的偶然性，你可能遇到一个特别心动的人，说结婚就结婚了。\n\n### Part 4 决策的艺术决断力\n\n到底什么是厉害的决策法决策，是在面对不容易判断优劣的几个选项时，做出正确的选择。\n\n#### 科学决策的四个步骤\n\n1. 扩充你的选项  看看自己都有哪些选项。想想你能不能给自己增加几个选项。\n2. 用现实检验你的观点  评估每个选项的优劣。向很多人寻求意见，对自己的工作前景获得一个客观的评估。\n3. 从长远考虑  从这些选项中选择一个。要从长远考虑。\n4. 为决策错误做好准备 对未来的不确定性要有一定的准备。\n\n#### 选项的价值\n\n1. 尽量多点选择  哪怕你仅仅“意识到”自己还有别的选项，你的决策水平都能大大改善。\n2. 寻找亮点  如果你面对一个困难不知道该怎么办，你可以看看别人是怎么办的。哪怕大多数人都失败的局面下，也总会有几个人是成功的，那你就看看那几个成功者是怎么做的。\n3. 并列选择  你要把多个选项都摆在桌子上，要选就一起参选。\n\n#### 成大事者怎么才能不纠结\n\n1. 把兼听则明给程序化，并且要求给出具体的反对理由  找几个朋友提提反对意见，帮你用理智战胜情感。\n2. 克服短期情绪，尽量从一个远距离考虑问题  把自己想象成一个旁观者，站在一个远距离考虑问题，所有短期的情绪，什么害怕、紧张，可能就都不重要了。当你面对困难选择的时候，你可以问自己：如果是你最好的朋友面临这个选择，你会给他什么建议？\n3. 如果利益计算已经无法让你判断优劣，那就想想自己的核心价值观是什么  所谓的价值观，就是你设定的“优先级”（priority）是什么样的，你认为什么重要，什么不重要。\n\n#### 用别人预测自己\n\n1. 你不比别人特殊，基础比率，就是以前的人，做同样的事，做到的平均水平。\n2. 你特殊在哪里。就算你认为自己很特殊，也要先了解基础比率，再从这个基础上做些修正。\n3. 基础比率与你。在预测未来的时候，首先要想到自己并不比别人更特殊，基础比率是最好的参考资料，如果你不想听从基础比率，那么你就得拿出非常特殊的理由而且这些理由必须是切实存在的与别人的不同之处。\n\n#### 实干家无须精确调研  \n\n用试水的方法创新，有三个原则：\n\n1. 尽可能地尝试新事物。\n2. 尝试要可控，要确保试验不给我们带来灾难性的后果。\n3. 获得反馈，从结果中学习，随时调整做法。\n\n#### 宠物超生问题--伪善还是妥协\n\n现代社会是一个你不能为所欲为的社会，甚至连爱心都不能为所欲为。这是爱心跟理性之间的妥协，也是理想跟现实之间的妥协。这就是现代社会。每个人都必须妥协，只有这样，人和人、人和宠物才能共处。\n\n#### 二十层床垫级别的敏感度\n\n#### 知识=体验*敏感度\n\n一旦你做错一件事，体会到严重后果之后，最好还能用一个成语典故之类的概念概括这个事情，那么下次再遇到类似地局面，你就会特别敏感，你就会做得更有分寸。我们应该只在重要的事情上保持敏感度，在不重要的事情上放松敏感度。\n\n#### 要避免“过度拟合”，就得“难得糊涂”\n\n琢磨人就不重要，琢磨事儿，琢磨思想，才是用到了高级的地方。\n\n#### 斯多葛派哲学的安心之法\n\n斯多葛控制二分法：在生活中，有些事情是你能够控制的，有些事情你是控制不了的，你应该只关注你能控制的东西。\n\n“斯多葛控制二分法”可以让我们在面对小事时从容不迫。那么当面对大事时，就更厉害了。\n\n如果你能够接受“斯多葛控制二分法”，那么你的个人目标就应该从“外界目标”转换为“内部目标”。你控制不了外界，但是可以控制自己。你可以把目标设定为尽自己所能。如果你能做到这些，那么你就没有什么敌人和对手，因为你关注的是你自己，你不会去指责任何人。不是没有欲望，你可以有欲望！但是，你要把注意力全部集中在自己能控制的这部分上。\n\n#### 到底什么叫“智慧”\n\n从三个方面考察一个人的智慧水平\n\n1. 智识上的谦逊--我知道我需要更多的信息，才能合理的评估这件事，我知道未来可能还有不确定性。\n2. 超越自我--我知道我身在这个事件之中可能会当局者迷，如果能从旁观者的视角看问题，也许更好。\n3. 考虑他人的观点，达成妥协--我知道不同观点的利弊，能理解这个事件的参与各方的想法和立场。我不仅仅考虑自己的利益，也考虑跟别人的关系。\n\n### Part 5 数据统治世界指导生活的算法\n\n#### 数学家告诉你什么时候结束单身\n\n37%规则：你要把设定的时间期限分成两个阶段。\n在第一阶段，你只看不做决定，就是根据你的自身情况，了解一下你所喜欢的和不喜欢的。记住在这个阶段内你最好的结果。等过了你设定期限的37%以后--你就进入到第二阶段，从这一阶段开始，你一旦遇到一个比第一阶段那个最好的结果好，或者与它类似的房子，就要毫不犹豫的做决定。\n\n如果使用37%规则是你作为一个理性的人在这个不确定的世界中所能做的最佳策略，那么你就可以无怨无悔，没有那么多纠结和痛苦了。\n\n37%规则是在假设无法回头的条件下成立的、这些算法，说的是面对一个不确定的世界，在你根本不知道命运会怎样的情况下，所能采取的最佳策略。\n\n结论：\n\n1. 一个数字：37%\n2. 一个教训：把思路理性化，浪漫问题也需要解决方案。\n3. 一个思想：我们要尽可能地想想什么时候可以运用到数学思想。\n\n#### 数学家告诉你怎样慢慢变老\n\n三个智慧\n\n1. 年青时代要大胆探索\n2. 随着年龄增长，要慢慢学会利用已有的信息，专注于收获。\n3. 在慢慢变老的过程中，我们生活其实是越来越好的。\n\n#### 数学家告诉你为什么难得糊涂\n\n过度拟合：你的模型想要一丝不苟地反映已知的所有数据，它对未知数据的预测能力就会非常差。就是因为所谓的“已知”数据，都是有误差的！精准的拟合会把数据的误差给放大--拟合得越精确，并不代表预测结果就越准确，拟合得过度精确后反而结果更加糟糕。\n\n不要想太多：面临重大决策，有时候没必要考虑太多细节。\n\n三个建议\n\n1. 限定思考时间。在有时间限制的情况下，你才会逼着自己去考虑最重要的因素。\n2. 限定内容长度。\n3. 在白板上讨论商业计划，要使用粗的马克笔。最初的计划必须抓住重点。\n\n如果一件事真的值得去做，哪有那么多理由？\n\n#### 数学家告诉你最好的时间管理\n\n如果你的任务都是有截止日期的，那就按照截止日期的早晚安排任务。\n\n摩尔算法：如果你想要的是尽可能按时完成更多的任务，那你就应该先放弃那个占用时间最长的任务。如果这个任务牵涉到别人的等待时间，我们就应该用“小事优先”--完成时间短的任务优先--的原则。\n\n加权最短处理时间：如果任务A的完成时间比任务B高一倍，那么A的重要程度必须也比B高一倍，我们才可能会优先考虑做A。\n\n#### 经济学是“老司机”的游戏\n\n“纳什均衡”：如果参与游戏的各方都是“老司机”-- 每个人都非常聪明，谁也糊弄不了谁，那么游戏就会达到一个各方都满意，或者各方都无奈的局面，任何一方想要采取一个什么行动让自己的局面比现在更好都不可能了。\n\n对经济学的认识：\n\n1. 在大多数情况下，传统经济学最好用，因为人是理性的，市场是大体均衡的。\n2. 在少数情况下，人可能会表现出非理性，市场可能会偏离均衡。\n3. 非理性和偏离均衡，可以给世界带来活力。\n\n#### 怎样识别“hype”\n\n你要想预测一个想法或者信息还会存在多久，就应该看它已经存在了多久。\n\n高德纳技术成熟度曲线：表现的是一项新技术从出生到变成hype，到低谷，再到真正实用化的过程。\n\n##### 喜欢=熟悉+意外\n\n我们并不喜欢完全陌生的东西，而是希望能从中发现点熟悉的元素。\n\n最容易被人接受的东西，往往能在熟悉和新奇之间找到一个熟悉的平衡。\n\nMAYA尽可能地前卫，只能能被人接受。\n\n行为设计学怎么设计，才能让人听你的去做一件事呢？\n\n1. 这个人必须自己想做这件事--要有意愿\n2. 这个人必须能做到这件事--这件事越简单越好\n3. 你得提醒他做这件事\n\n以让用户上瘾为目标\n\n1. 让用户第一次接触你的东西就留下一个好印象\n2. 让用户能经常获得成就感\n\n让人上瘾，是行为设计学最核心的目标。\n\n#### 两种技能增长曲线\n\n对数增长：这个技能初期的进度速度非常快，到后面则越来越慢，最后几乎是一个平台期，哪怕你付出极大的努力，也只能获得一点儿小小的突破。\n\n指数增长：从你开始做这件事情以后的很长一段时间内，几乎没有任何能让外人看出来的进步。一直到某个时候，你就好像突破了一个障碍一样，水平一下子就显现出来了，然后还能越增长越快。\n\n### Part 6 智识的尺度破除成功学的迷信\n\n#### 为什么优等生不能改变世界\n\n##### 好学生和极端学生\n\n“人才”其实有两种，一种是“好学生”，乐于遵守各项规则，善于取悦老师，是体制的受益者。还有一种是“极端学生”，特别反感规则。\n\n在绝大多数情况下，随大流挺好，极端的人不容易混好。可是特别厉害的人，恰恰也是极端的人。\n\n#### 是一个什么样的领导\n\n1. “被过滤过”的领导者——如果你不遵守规则，不能给其他人带来安全感，你就会被过滤掉。那么经过层层过滤。最后能当上领导的人，必然是现行规则的受益者，他们会尽可能地维护现有的规则——他们也就是平庸的领导者。\n2. “没有被过滤过”的领导者——这些人不是层层选拔上来的，而是因为一些特别偶然的原因上位。比如总统出事了，副总统突然当上了总统；或者是临危受命，体制已经不行了，让他做做看。他不是体制的既得利益者，他很愿意打破规则，干一些极端的事情。\n\n蒲公英和兰花成功策略：首先，你要知道你是哪种人。你是容易通过过滤机制的人，还是容易被过滤掉的人？是遵守规则的人，还是反抗规则的人？是蒲公英，还是兰花？是正常的人，还是极端的人？第一种人，只要环境有明确的规则，做事有明确的路径，他们都会表现得很好。但是他们应对不了急剧变化的场面；第二种人在正常环境中往往会很难过，非得找到特别适合自己的特殊环境，才能表现出色。第二步是发现自己的特长，寻找适合自己的环境。\n\n##### 坚持，坚持，再坚持\n\n给自己讲个好故事，找到工作和生活的意义。保持乐观的精神，这是能坚持下来的前提条件。然后，你再把大目标分解为各种小目标，把每个任务都游戏化，随时奖励自己，获得掌控感，用一个个小胜利慢慢积累进步，这就是通往成功之路。\n\n真正让人成功的往往不是机械化的理性和算法，而是某些情绪化、非理性的东西。\n\n#### 企业家精神和包办婚姻\n\n1. 找到兴趣所在：实干家不需要精确调研，不用考虑太多，而是要多尝试新事物，在行动中获得想法。所谓“保金斯基三原则”，就是要在可控和低成本的状态下尽可能多地尝试新事物，不怕失败，取得反馈。要多尝试，要多接触不同的领域，这样你就更容易遇到自己真正感兴趣的东西。\n2. 包办婚姻和自由恋爱：最好的婚姻“契约体制”，最重要的不是如何精心挑选另一半，而是选定以后如何维护两人的关系。\n3. WOOP方法：\n    1. Wish。你想要干什么\n    2. Outcome。把结果具体化\n    3. Obstacle。这是面对现实的一步，看看现在距离这个结果有什么障碍。\n    4. Plan。制订计划，解决各种障碍。\n\n4. WOOP方法最大的作用并不是帮助你实现梦想，而是帮助你放弃不切实际的梦想。\n\n#### 老王的体能和老张的灵感\n\n人的灵感和创造力并不会随着时间的流逝而下降。你无法取得成就的真正原因并不是你失去了创造力，而是你没有坚持下去。如果持之以恒，你的创造力不会辜负你。\n\n### Part 7 洞见未来\n\n#### 平庸公司的厚黑学\n\n普通厚黑学功夫\n\n1. 领导让干啥就干啥，出错也是领导的错。\n2. 别人做什么你就做什么。竞争对手开始学谷歌了吗？咱也学谷歌！错了难道还能是我的责任？\n3. 用各种专业术语把别人搞晕，这样你就不用真干事了。\n4. 如果你要做意见没有把握的事儿，担心可能要出错，你要事先告诉所有同事，你这么做纯粹是为了多挣钱。这样万一事实证明这个做法是错的，你也可以说这是因为公司的激励制度有问题，而不是你的智商有问题。\n\n高级厚黑学功夫\n\n1. 见好就收。愚蠢的做法在短期往往是有好处的，这个项目的好处一出来，你就赶紧拿功劳走人，将来出了毛病也找不到你。\n2. 少下功夫干活，多下功夫做ppt。表现得漂亮比把事儿做对更重要。\n\n#### 跟《冰雪奇缘》学创造力魔法\n\n三个激发创造力的办法\n\n1. 把你最想要的东西列出来，用解决问题的思维，想想怎么实现它。\n2. 个人的经历往往是创作的源泉——你要做的是把自己投入过情感的经历与新的东西连接起来，这就是创作\n3. 旁观者清。陷入一种情境不能自拔的时候，主动换一个视角。\n\n","source":"_posts/高手-精英的见识和我们的时代.md","raw":"---\ntitle: 高手 精英的见识和我们的时代\ndate: 2021-01-18 23:53:02\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 万维钢\n---\n\n### Part 1 精英社会的神话\n\n#### 成功与运气运气动力学（个人运气的三个规律）\n\n1. 运气可以放大（人类社会是个非线性的复杂系统，这意味着初始条件好一点点，最终结果不是按比例也好一点点，而是很有可能不成比例地把初始优势放大很多很多。）\n2. 运气可以累加\n3. 竞争越激烈，运气越重要\n<!--more-->\n#### 胜者通吃\n\n1. 胜者通吃的市场\n2. 正反馈效应\n3. 收入差距\n\n#### 信命不认命\n\n1. 成功是因为水平高，失败是因为运气差\n2. 不信邪的好处（如果一个人所处的环境变化不定，运气的成分实在太大，未来的境遇很可能还不如现在，那他的确应该采取“快策略”，及时享乐就算了；只有当你处于稳定的环境中，对未来有点把握，才有条件采取“慢策略”，推迟享乐。）\n3. 一流智力（检验一流智力的标准，就是看你能不能在头脑中同时存在两种相反的想法，还维持正常行事的能力。）\n\n#### 攀比动力学\n\n1. 房价为什么越来越高\n2. 花费军备竞赛（花费传导）\n3. 累进消费税\n\n#### 富而好礼\n\n1. 富贵而骄（如果你想长久地享受好运气，从一个成功走向另一个成功，就得学会子贡说的“富而无骄”。）\n2. 主要看气质（想要跟人合作，你最好有一个“好人”气质。最好的方法就是你要承认自己的成功之中有运气的因素，不要把所有的功劳都归于自己。）\n3. 感恩之心（感恩能让人的焦虑减少，更不容易恼怒，睡眠质量更好，还对别人更有同情心。）\n\n#### 竞争不充分的领域里才有英雄\n\n1. 你应该尽可能去一个新兴的领域。领域不成熟，竞争不激烈，你就有更大的自由度。\n2. 如果是一个成熟的领域，那么你就得尊重这个领域的规律，不能随便标新立异。\n\n有一种声望很值钱声望，是一本学术期刊最大的价值，而声望只能依靠在历史上慢慢地积累。“声望”根本没有替代品。\n\n#### 精英水平的道歉\n\n只有当你分析和解决了自己的问题，你的道歉才配得上被人原谅。道歉的目的，不应该是为了从对方那里获得什么——这个你控制不了。你只能控制你自己。\n\n##### 一个好的道歉要有三步\n\n1. 明确动机：不是为了赢回别人的信任，而是为了完善自己的人格。\n2. 学到东西：态度有问题就解决态度问题，能力有问题就解决能力问题。\n3. 提出道歉：说明你的错误，也说明你的改变，但是把是否原谅的决定权留给对方。\n\n#### 国学的三个问题\n\n1. 所谓“国学”，到底是对全人类都有价值的通用的学问，还是仅仅是一个地方性的风俗学问。\n2. 中国文化中有哪些仅仅是历史遗迹，有哪些对现代社会仍然有用。\n3. 我们对中国文化是不是非得“仰视”，我们能不能站在现代的高度，“俯视”国学。如果一直仰望，怎么能发展呢？\n\n国学，应该是思想和学问。国学对应的应该是西方的“自由技艺”（liberal arts），是能让人做事更有分寸，解决问题更有方法，获得真正自由的学问。我们想学的不仅仅是“爱国者”的学问，我们还想学“治国者”的学问。\n\n#### 说精英，谁是精英\n\n1. 食物链、智识链和幸福链（“精英”的定义，应该看智识水平的高低。）\n2. 自由、代价和大事（最有意思的人生就是找到机会去做些大事，你既能感到幸福，又能顺便提升食物链排名。）\n3. 算法和复杂（凡事查“如果······就······”表就知道该怎么办的事儿，都不叫决策，都是算法。决策，是没有人告诉你该怎么办，没有固定算法，没有已知的对错，这个时候你怎么选择。）\n\n### Part 2 天才和疯子的一线之隔\n\n#### 俭省追逐者的绝境\n\n1. 简单道理（避免陷入一味求多的思维模式，尽可能利用手里现有的资源发展。）\n2. 追逐者（追逐心态的三个来源：1. 跟别人比。2. 我们总认为想要办成更多的事儿，就得动用更多的资源。我们常常忽略自己已经拥有的资源的价值。3. 我们单纯就是想要“更多”。）\n3. 买买买（面对一个具体的局面，到底是应该悠着点，还是全力以赴争取呢？大概有两个标准：1. 游戏是不是可持续的。2. 你的追逐到底是实际的需要，还是为了满足自己的心理需求。）\n\n#### 有差别的人类劳动\n\n1. 价值和价值（资源的“内在价值”是一回事，而人怎么利用这个资源，是另一回事——如果人能善加利用，就可以给任何资源创造新的价值。）\n2. 俭省者思维（俭省者关注长远目标；俭省者的攀比心理比较弱，不会陷入追逐者绝境；最重要的是，俭省者总是尽可能利用现有的资源。）\n3. 受限制条件下的创造（在限制条件下，你不得不对现有资源开发出新的用法——这个用法往往有很好的创造性。反过来说，如果要什么有什么，你可以用新资源来实现新功能，那就根本没必要研究什么新用法，也就没有创造性了。）\n\n最有价值的人类劳动是“有差别的”劳动，是你能不能给手里的资源增加一个创造性的附加值。获得创造性的一个好方法：是人为设定一个限制，逼着自己在一个框架之内寻找发挥。\n\n#### 从刻意练习到功夫在诗外\n\n1. 外行的洞见（外行解决问题是一个非常普遍的现象。一方面是本专业专家能解决的问题肯定早就解决了，另一方面是复杂问题的确需要用到多个专业的知识。）\n2. 什么时候“练习”最有用（有严格固定规则的领域，练习的作用最大；没有严格规则的领域，练习的作用非常有限。环境局面越是可控。可预测的，练习的作用越大；局面如果是复杂多变、不可预测的，练习的作用就很小。）\n3. 21世纪什么人才最贵（天才最贵，多面手第二贵。）\n真正的斜杠青年追求的不是简历上多几个斜杠，而应该是培养广泛的兴趣，把知识本身当成回报。\n\n#### 窈窕淑女效应\n\n1. 你当她是什么人（你当她是什么人，她最后就真的是什么人。）\n2. 自证预言（你“预言”局面会如何如何，你就按照这个想法去做，局面真的就会如何如何。）\n3. 你和你对你的预期（“叙事自我”，我们时刻都在给自己讲一个故事，说我这么做，是因为我是个这样的人。）\n\n#### 天才和疯子的一线之隔“\n\n认知抑制解除”，有的人·能解除这种认知抑制的本能，专门注意到被一般人忽略掉的信息，并从中发现一些东西。创造力=大胆尝试新想法X智能。\n\n##### 用进化论修心养性\n\n1. 世界观：演化没有目的\n2. 社会观：好东西没有设计\n3. 价值观：自发演化的东西往往比设计出来的东西好\n4. 人生观：符合天道\n\n### Part 3 巨人的工具\n\n#### 巨人的战术、习惯和日常\n\n##### 呆伯特作者的经验之谈\n\n1. “目标”和“系统” 所谓“目标”，就是你做这件事就是为了做好这件事，成功了就有回报，失败了就算白干；所谓“系统”，则是一个连续变化的东西，或者是一项技能，或者是一个关系。为了这个系统，你可以做各种项目，你可以要求自己养成什么习惯，你要的不是某个具体事件的成败，而是“发展”这个系统。\n2. 灵感  在浏览信息的过程中，你怎么判断哪条信息值得作为素材呢？你不应该听从大脑的判断，你应该听从身体的判断。如果你的身体对什么信息做出强烈反应，那么别人大概也会关心这个东西。\n3. 技能  不管你真正喜欢的领域是什么，你要努力在这个领域练到前25%。然后你还得再加一个领域——当然能加两个更好。\n\n#### 指挥官的派头\n\n1. 自律 = 自由  你为了获得真正的自由，就非得给自己设定一些限制。所谓“真正的自由”，也就是财务自由、时间自由、免于疾病和贫困的自由，为了达到这样的目标，你必须自律才行。\n2. 极端的所有权  我对我的世界，有极端的所有权，如果我的队伍有问题，我自己就会解决，我不会等到这个时候向上级抱怨；反过来说，如果哪一天我真的跟上级说，“老板，我需要这个”——那我马上就能得到我需要的，因为上级明白，凡是我提出的要求，一定是我真的需要。\n3. 谦卑和领导力  要求你在即使身心全部投入的情况下，仍然能在心里保持一个冷静的声音，给自己提个醒。\n\n#### 给前辈铺路的人\n\n1. 画布策略的心法，就是“be lesser， do more”——把自己放在更次要的位置，给别人做更多的事。\n2. 画布策略的关键是在工作上给人帮助，给人铺路，让别人能把事做得更漂亮。\n3. “画布策略”没有过期时间。哪怕你自己已经独立做事了，哪怕别人都开始对你使用画布策略了，你还应该继续给人当清道夫。\n\n#### 风险投资人的养成\n\n1. 进攻和防守  你在生活中面对的各种挑战可以分为两类。一类挑战是“防守”，也就是别人给你的挑战。别人给你任务，你想法设法完成，做成了也很有成就感，但是主动权在别人手里。另外一类挑战是“进攻”，是做你自己想做的事情，主动权在自己手里。\n2. 日常风格  任何时候都要真诚，不要模仿任何人，永远做最真实的自己——而且你不必为此道歉。\n\n#### 我怎么管理信息3个信息管理经验\n\n1. 采集  我们要专注于识别，而让计算机帮着提取。提取信息最好的办法是搜索。有了高级管理工具，你就应该把任何可能有价值的东西都记录下来。\n2. 合作  \n3. 创造\n\n#### 三种浪漫体质\n\n1. 命运体制  认为爱情是上天注定的，爱情来了你就无法抗拒，人们为了爱情愿意做出牺牲，甚至可以承担痛苦。总之，所有事情都应该为爱情让路。\n2. 选择体制  寻找恋爱和结婚对象，会特别理性地权衡比较——对方能不能满足我的各种需要？我在这段关系中能不能舒服地行使自己的权利？就好像自己是在挑选一件适合自己的商品一样。\n3. 契约体制  婚姻有一定的偶然性，你可能遇到一个特别心动的人，说结婚就结婚了。\n\n### Part 4 决策的艺术决断力\n\n到底什么是厉害的决策法决策，是在面对不容易判断优劣的几个选项时，做出正确的选择。\n\n#### 科学决策的四个步骤\n\n1. 扩充你的选项  看看自己都有哪些选项。想想你能不能给自己增加几个选项。\n2. 用现实检验你的观点  评估每个选项的优劣。向很多人寻求意见，对自己的工作前景获得一个客观的评估。\n3. 从长远考虑  从这些选项中选择一个。要从长远考虑。\n4. 为决策错误做好准备 对未来的不确定性要有一定的准备。\n\n#### 选项的价值\n\n1. 尽量多点选择  哪怕你仅仅“意识到”自己还有别的选项，你的决策水平都能大大改善。\n2. 寻找亮点  如果你面对一个困难不知道该怎么办，你可以看看别人是怎么办的。哪怕大多数人都失败的局面下，也总会有几个人是成功的，那你就看看那几个成功者是怎么做的。\n3. 并列选择  你要把多个选项都摆在桌子上，要选就一起参选。\n\n#### 成大事者怎么才能不纠结\n\n1. 把兼听则明给程序化，并且要求给出具体的反对理由  找几个朋友提提反对意见，帮你用理智战胜情感。\n2. 克服短期情绪，尽量从一个远距离考虑问题  把自己想象成一个旁观者，站在一个远距离考虑问题，所有短期的情绪，什么害怕、紧张，可能就都不重要了。当你面对困难选择的时候，你可以问自己：如果是你最好的朋友面临这个选择，你会给他什么建议？\n3. 如果利益计算已经无法让你判断优劣，那就想想自己的核心价值观是什么  所谓的价值观，就是你设定的“优先级”（priority）是什么样的，你认为什么重要，什么不重要。\n\n#### 用别人预测自己\n\n1. 你不比别人特殊，基础比率，就是以前的人，做同样的事，做到的平均水平。\n2. 你特殊在哪里。就算你认为自己很特殊，也要先了解基础比率，再从这个基础上做些修正。\n3. 基础比率与你。在预测未来的时候，首先要想到自己并不比别人更特殊，基础比率是最好的参考资料，如果你不想听从基础比率，那么你就得拿出非常特殊的理由而且这些理由必须是切实存在的与别人的不同之处。\n\n#### 实干家无须精确调研  \n\n用试水的方法创新，有三个原则：\n\n1. 尽可能地尝试新事物。\n2. 尝试要可控，要确保试验不给我们带来灾难性的后果。\n3. 获得反馈，从结果中学习，随时调整做法。\n\n#### 宠物超生问题--伪善还是妥协\n\n现代社会是一个你不能为所欲为的社会，甚至连爱心都不能为所欲为。这是爱心跟理性之间的妥协，也是理想跟现实之间的妥协。这就是现代社会。每个人都必须妥协，只有这样，人和人、人和宠物才能共处。\n\n#### 二十层床垫级别的敏感度\n\n#### 知识=体验*敏感度\n\n一旦你做错一件事，体会到严重后果之后，最好还能用一个成语典故之类的概念概括这个事情，那么下次再遇到类似地局面，你就会特别敏感，你就会做得更有分寸。我们应该只在重要的事情上保持敏感度，在不重要的事情上放松敏感度。\n\n#### 要避免“过度拟合”，就得“难得糊涂”\n\n琢磨人就不重要，琢磨事儿，琢磨思想，才是用到了高级的地方。\n\n#### 斯多葛派哲学的安心之法\n\n斯多葛控制二分法：在生活中，有些事情是你能够控制的，有些事情你是控制不了的，你应该只关注你能控制的东西。\n\n“斯多葛控制二分法”可以让我们在面对小事时从容不迫。那么当面对大事时，就更厉害了。\n\n如果你能够接受“斯多葛控制二分法”，那么你的个人目标就应该从“外界目标”转换为“内部目标”。你控制不了外界，但是可以控制自己。你可以把目标设定为尽自己所能。如果你能做到这些，那么你就没有什么敌人和对手，因为你关注的是你自己，你不会去指责任何人。不是没有欲望，你可以有欲望！但是，你要把注意力全部集中在自己能控制的这部分上。\n\n#### 到底什么叫“智慧”\n\n从三个方面考察一个人的智慧水平\n\n1. 智识上的谦逊--我知道我需要更多的信息，才能合理的评估这件事，我知道未来可能还有不确定性。\n2. 超越自我--我知道我身在这个事件之中可能会当局者迷，如果能从旁观者的视角看问题，也许更好。\n3. 考虑他人的观点，达成妥协--我知道不同观点的利弊，能理解这个事件的参与各方的想法和立场。我不仅仅考虑自己的利益，也考虑跟别人的关系。\n\n### Part 5 数据统治世界指导生活的算法\n\n#### 数学家告诉你什么时候结束单身\n\n37%规则：你要把设定的时间期限分成两个阶段。\n在第一阶段，你只看不做决定，就是根据你的自身情况，了解一下你所喜欢的和不喜欢的。记住在这个阶段内你最好的结果。等过了你设定期限的37%以后--你就进入到第二阶段，从这一阶段开始，你一旦遇到一个比第一阶段那个最好的结果好，或者与它类似的房子，就要毫不犹豫的做决定。\n\n如果使用37%规则是你作为一个理性的人在这个不确定的世界中所能做的最佳策略，那么你就可以无怨无悔，没有那么多纠结和痛苦了。\n\n37%规则是在假设无法回头的条件下成立的、这些算法，说的是面对一个不确定的世界，在你根本不知道命运会怎样的情况下，所能采取的最佳策略。\n\n结论：\n\n1. 一个数字：37%\n2. 一个教训：把思路理性化，浪漫问题也需要解决方案。\n3. 一个思想：我们要尽可能地想想什么时候可以运用到数学思想。\n\n#### 数学家告诉你怎样慢慢变老\n\n三个智慧\n\n1. 年青时代要大胆探索\n2. 随着年龄增长，要慢慢学会利用已有的信息，专注于收获。\n3. 在慢慢变老的过程中，我们生活其实是越来越好的。\n\n#### 数学家告诉你为什么难得糊涂\n\n过度拟合：你的模型想要一丝不苟地反映已知的所有数据，它对未知数据的预测能力就会非常差。就是因为所谓的“已知”数据，都是有误差的！精准的拟合会把数据的误差给放大--拟合得越精确，并不代表预测结果就越准确，拟合得过度精确后反而结果更加糟糕。\n\n不要想太多：面临重大决策，有时候没必要考虑太多细节。\n\n三个建议\n\n1. 限定思考时间。在有时间限制的情况下，你才会逼着自己去考虑最重要的因素。\n2. 限定内容长度。\n3. 在白板上讨论商业计划，要使用粗的马克笔。最初的计划必须抓住重点。\n\n如果一件事真的值得去做，哪有那么多理由？\n\n#### 数学家告诉你最好的时间管理\n\n如果你的任务都是有截止日期的，那就按照截止日期的早晚安排任务。\n\n摩尔算法：如果你想要的是尽可能按时完成更多的任务，那你就应该先放弃那个占用时间最长的任务。如果这个任务牵涉到别人的等待时间，我们就应该用“小事优先”--完成时间短的任务优先--的原则。\n\n加权最短处理时间：如果任务A的完成时间比任务B高一倍，那么A的重要程度必须也比B高一倍，我们才可能会优先考虑做A。\n\n#### 经济学是“老司机”的游戏\n\n“纳什均衡”：如果参与游戏的各方都是“老司机”-- 每个人都非常聪明，谁也糊弄不了谁，那么游戏就会达到一个各方都满意，或者各方都无奈的局面，任何一方想要采取一个什么行动让自己的局面比现在更好都不可能了。\n\n对经济学的认识：\n\n1. 在大多数情况下，传统经济学最好用，因为人是理性的，市场是大体均衡的。\n2. 在少数情况下，人可能会表现出非理性，市场可能会偏离均衡。\n3. 非理性和偏离均衡，可以给世界带来活力。\n\n#### 怎样识别“hype”\n\n你要想预测一个想法或者信息还会存在多久，就应该看它已经存在了多久。\n\n高德纳技术成熟度曲线：表现的是一项新技术从出生到变成hype，到低谷，再到真正实用化的过程。\n\n##### 喜欢=熟悉+意外\n\n我们并不喜欢完全陌生的东西，而是希望能从中发现点熟悉的元素。\n\n最容易被人接受的东西，往往能在熟悉和新奇之间找到一个熟悉的平衡。\n\nMAYA尽可能地前卫，只能能被人接受。\n\n行为设计学怎么设计，才能让人听你的去做一件事呢？\n\n1. 这个人必须自己想做这件事--要有意愿\n2. 这个人必须能做到这件事--这件事越简单越好\n3. 你得提醒他做这件事\n\n以让用户上瘾为目标\n\n1. 让用户第一次接触你的东西就留下一个好印象\n2. 让用户能经常获得成就感\n\n让人上瘾，是行为设计学最核心的目标。\n\n#### 两种技能增长曲线\n\n对数增长：这个技能初期的进度速度非常快，到后面则越来越慢，最后几乎是一个平台期，哪怕你付出极大的努力，也只能获得一点儿小小的突破。\n\n指数增长：从你开始做这件事情以后的很长一段时间内，几乎没有任何能让外人看出来的进步。一直到某个时候，你就好像突破了一个障碍一样，水平一下子就显现出来了，然后还能越增长越快。\n\n### Part 6 智识的尺度破除成功学的迷信\n\n#### 为什么优等生不能改变世界\n\n##### 好学生和极端学生\n\n“人才”其实有两种，一种是“好学生”，乐于遵守各项规则，善于取悦老师，是体制的受益者。还有一种是“极端学生”，特别反感规则。\n\n在绝大多数情况下，随大流挺好，极端的人不容易混好。可是特别厉害的人，恰恰也是极端的人。\n\n#### 是一个什么样的领导\n\n1. “被过滤过”的领导者——如果你不遵守规则，不能给其他人带来安全感，你就会被过滤掉。那么经过层层过滤。最后能当上领导的人，必然是现行规则的受益者，他们会尽可能地维护现有的规则——他们也就是平庸的领导者。\n2. “没有被过滤过”的领导者——这些人不是层层选拔上来的，而是因为一些特别偶然的原因上位。比如总统出事了，副总统突然当上了总统；或者是临危受命，体制已经不行了，让他做做看。他不是体制的既得利益者，他很愿意打破规则，干一些极端的事情。\n\n蒲公英和兰花成功策略：首先，你要知道你是哪种人。你是容易通过过滤机制的人，还是容易被过滤掉的人？是遵守规则的人，还是反抗规则的人？是蒲公英，还是兰花？是正常的人，还是极端的人？第一种人，只要环境有明确的规则，做事有明确的路径，他们都会表现得很好。但是他们应对不了急剧变化的场面；第二种人在正常环境中往往会很难过，非得找到特别适合自己的特殊环境，才能表现出色。第二步是发现自己的特长，寻找适合自己的环境。\n\n##### 坚持，坚持，再坚持\n\n给自己讲个好故事，找到工作和生活的意义。保持乐观的精神，这是能坚持下来的前提条件。然后，你再把大目标分解为各种小目标，把每个任务都游戏化，随时奖励自己，获得掌控感，用一个个小胜利慢慢积累进步，这就是通往成功之路。\n\n真正让人成功的往往不是机械化的理性和算法，而是某些情绪化、非理性的东西。\n\n#### 企业家精神和包办婚姻\n\n1. 找到兴趣所在：实干家不需要精确调研，不用考虑太多，而是要多尝试新事物，在行动中获得想法。所谓“保金斯基三原则”，就是要在可控和低成本的状态下尽可能多地尝试新事物，不怕失败，取得反馈。要多尝试，要多接触不同的领域，这样你就更容易遇到自己真正感兴趣的东西。\n2. 包办婚姻和自由恋爱：最好的婚姻“契约体制”，最重要的不是如何精心挑选另一半，而是选定以后如何维护两人的关系。\n3. WOOP方法：\n    1. Wish。你想要干什么\n    2. Outcome。把结果具体化\n    3. Obstacle。这是面对现实的一步，看看现在距离这个结果有什么障碍。\n    4. Plan。制订计划，解决各种障碍。\n\n4. WOOP方法最大的作用并不是帮助你实现梦想，而是帮助你放弃不切实际的梦想。\n\n#### 老王的体能和老张的灵感\n\n人的灵感和创造力并不会随着时间的流逝而下降。你无法取得成就的真正原因并不是你失去了创造力，而是你没有坚持下去。如果持之以恒，你的创造力不会辜负你。\n\n### Part 7 洞见未来\n\n#### 平庸公司的厚黑学\n\n普通厚黑学功夫\n\n1. 领导让干啥就干啥，出错也是领导的错。\n2. 别人做什么你就做什么。竞争对手开始学谷歌了吗？咱也学谷歌！错了难道还能是我的责任？\n3. 用各种专业术语把别人搞晕，这样你就不用真干事了。\n4. 如果你要做意见没有把握的事儿，担心可能要出错，你要事先告诉所有同事，你这么做纯粹是为了多挣钱。这样万一事实证明这个做法是错的，你也可以说这是因为公司的激励制度有问题，而不是你的智商有问题。\n\n高级厚黑学功夫\n\n1. 见好就收。愚蠢的做法在短期往往是有好处的，这个项目的好处一出来，你就赶紧拿功劳走人，将来出了毛病也找不到你。\n2. 少下功夫干活，多下功夫做ppt。表现得漂亮比把事儿做对更重要。\n\n#### 跟《冰雪奇缘》学创造力魔法\n\n三个激发创造力的办法\n\n1. 把你最想要的东西列出来，用解决问题的思维，想想怎么实现它。\n2. 个人的经历往往是创作的源泉——你要做的是把自己投入过情感的经历与新的东西连接起来，这就是创作\n3. 旁观者清。陷入一种情境不能自拔的时候，主动换一个视角。\n\n","slug":"高手-精英的见识和我们的时代","published":1,"updated":"2021-03-30T03:24:16.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmvhvx1g0071vcua6y4fgy6l","content":"<h3 id=\"Part-1-精英社会的神话\"><a href=\"#Part-1-精英社会的神话\" class=\"headerlink\" title=\"Part 1 精英社会的神话\"></a>Part 1 精英社会的神话</h3><h4 id=\"成功与运气运气动力学（个人运气的三个规律）\"><a href=\"#成功与运气运气动力学（个人运气的三个规律）\" class=\"headerlink\" title=\"成功与运气运气动力学（个人运气的三个规律）\"></a>成功与运气运气动力学（个人运气的三个规律）</h4><ol>\n<li><p>运气可以放大（人类社会是个非线性的复杂系统，这意味着初始条件好一点点，最终结果不是按比例也好一点点，而是很有可能不成比例地把初始优势放大很多很多。）</p>\n</li>\n<li><p>运气可以累加</p>\n</li>\n<li><p>竞争越激烈，运气越重要</p>\n<span id=\"more\"></span>\n<h4 id=\"胜者通吃\"><a href=\"#胜者通吃\" class=\"headerlink\" title=\"胜者通吃\"></a>胜者通吃</h4></li>\n<li><p>胜者通吃的市场</p>\n</li>\n<li><p>正反馈效应</p>\n</li>\n<li><p>收入差距</p>\n</li>\n</ol>\n<h4 id=\"信命不认命\"><a href=\"#信命不认命\" class=\"headerlink\" title=\"信命不认命\"></a>信命不认命</h4><ol>\n<li>成功是因为水平高，失败是因为运气差</li>\n<li>不信邪的好处（如果一个人所处的环境变化不定，运气的成分实在太大，未来的境遇很可能还不如现在，那他的确应该采取“快策略”，及时享乐就算了；只有当你处于稳定的环境中，对未来有点把握，才有条件采取“慢策略”，推迟享乐。）</li>\n<li>一流智力（检验一流智力的标准，就是看你能不能在头脑中同时存在两种相反的想法，还维持正常行事的能力。）</li>\n</ol>\n<h4 id=\"攀比动力学\"><a href=\"#攀比动力学\" class=\"headerlink\" title=\"攀比动力学\"></a>攀比动力学</h4><ol>\n<li>房价为什么越来越高</li>\n<li>花费军备竞赛（花费传导）</li>\n<li>累进消费税</li>\n</ol>\n<h4 id=\"富而好礼\"><a href=\"#富而好礼\" class=\"headerlink\" title=\"富而好礼\"></a>富而好礼</h4><ol>\n<li>富贵而骄（如果你想长久地享受好运气，从一个成功走向另一个成功，就得学会子贡说的“富而无骄”。）</li>\n<li>主要看气质（想要跟人合作，你最好有一个“好人”气质。最好的方法就是你要承认自己的成功之中有运气的因素，不要把所有的功劳都归于自己。）</li>\n<li>感恩之心（感恩能让人的焦虑减少，更不容易恼怒，睡眠质量更好，还对别人更有同情心。）</li>\n</ol>\n<h4 id=\"竞争不充分的领域里才有英雄\"><a href=\"#竞争不充分的领域里才有英雄\" class=\"headerlink\" title=\"竞争不充分的领域里才有英雄\"></a>竞争不充分的领域里才有英雄</h4><ol>\n<li>你应该尽可能去一个新兴的领域。领域不成熟，竞争不激烈，你就有更大的自由度。</li>\n<li>如果是一个成熟的领域，那么你就得尊重这个领域的规律，不能随便标新立异。</li>\n</ol>\n<p>有一种声望很值钱声望，是一本学术期刊最大的价值，而声望只能依靠在历史上慢慢地积累。“声望”根本没有替代品。</p>\n<h4 id=\"精英水平的道歉\"><a href=\"#精英水平的道歉\" class=\"headerlink\" title=\"精英水平的道歉\"></a>精英水平的道歉</h4><p>只有当你分析和解决了自己的问题，你的道歉才配得上被人原谅。道歉的目的，不应该是为了从对方那里获得什么——这个你控制不了。你只能控制你自己。</p>\n<h5 id=\"一个好的道歉要有三步\"><a href=\"#一个好的道歉要有三步\" class=\"headerlink\" title=\"一个好的道歉要有三步\"></a>一个好的道歉要有三步</h5><ol>\n<li>明确动机：不是为了赢回别人的信任，而是为了完善自己的人格。</li>\n<li>学到东西：态度有问题就解决态度问题，能力有问题就解决能力问题。</li>\n<li>提出道歉：说明你的错误，也说明你的改变，但是把是否原谅的决定权留给对方。</li>\n</ol>\n<h4 id=\"国学的三个问题\"><a href=\"#国学的三个问题\" class=\"headerlink\" title=\"国学的三个问题\"></a>国学的三个问题</h4><ol>\n<li>所谓“国学”，到底是对全人类都有价值的通用的学问，还是仅仅是一个地方性的风俗学问。</li>\n<li>中国文化中有哪些仅仅是历史遗迹，有哪些对现代社会仍然有用。</li>\n<li>我们对中国文化是不是非得“仰视”，我们能不能站在现代的高度，“俯视”国学。如果一直仰望，怎么能发展呢？</li>\n</ol>\n<p>国学，应该是思想和学问。国学对应的应该是西方的“自由技艺”（liberal arts），是能让人做事更有分寸，解决问题更有方法，获得真正自由的学问。我们想学的不仅仅是“爱国者”的学问，我们还想学“治国者”的学问。</p>\n<h4 id=\"说精英，谁是精英\"><a href=\"#说精英，谁是精英\" class=\"headerlink\" title=\"说精英，谁是精英\"></a>说精英，谁是精英</h4><ol>\n<li>食物链、智识链和幸福链（“精英”的定义，应该看智识水平的高低。）</li>\n<li>自由、代价和大事（最有意思的人生就是找到机会去做些大事，你既能感到幸福，又能顺便提升食物链排名。）</li>\n<li>算法和复杂（凡事查“如果······就······”表就知道该怎么办的事儿，都不叫决策，都是算法。决策，是没有人告诉你该怎么办，没有固定算法，没有已知的对错，这个时候你怎么选择。）</li>\n</ol>\n<h3 id=\"Part-2-天才和疯子的一线之隔\"><a href=\"#Part-2-天才和疯子的一线之隔\" class=\"headerlink\" title=\"Part 2 天才和疯子的一线之隔\"></a>Part 2 天才和疯子的一线之隔</h3><h4 id=\"俭省追逐者的绝境\"><a href=\"#俭省追逐者的绝境\" class=\"headerlink\" title=\"俭省追逐者的绝境\"></a>俭省追逐者的绝境</h4><ol>\n<li>简单道理（避免陷入一味求多的思维模式，尽可能利用手里现有的资源发展。）</li>\n<li>追逐者（追逐心态的三个来源：1. 跟别人比。2. 我们总认为想要办成更多的事儿，就得动用更多的资源。我们常常忽略自己已经拥有的资源的价值。3. 我们单纯就是想要“更多”。）</li>\n<li>买买买（面对一个具体的局面，到底是应该悠着点，还是全力以赴争取呢？大概有两个标准：1. 游戏是不是可持续的。2. 你的追逐到底是实际的需要，还是为了满足自己的心理需求。）</li>\n</ol>\n<h4 id=\"有差别的人类劳动\"><a href=\"#有差别的人类劳动\" class=\"headerlink\" title=\"有差别的人类劳动\"></a>有差别的人类劳动</h4><ol>\n<li>价值和价值（资源的“内在价值”是一回事，而人怎么利用这个资源，是另一回事——如果人能善加利用，就可以给任何资源创造新的价值。）</li>\n<li>俭省者思维（俭省者关注长远目标；俭省者的攀比心理比较弱，不会陷入追逐者绝境；最重要的是，俭省者总是尽可能利用现有的资源。）</li>\n<li>受限制条件下的创造（在限制条件下，你不得不对现有资源开发出新的用法——这个用法往往有很好的创造性。反过来说，如果要什么有什么，你可以用新资源来实现新功能，那就根本没必要研究什么新用法，也就没有创造性了。）</li>\n</ol>\n<p>最有价值的人类劳动是“有差别的”劳动，是你能不能给手里的资源增加一个创造性的附加值。获得创造性的一个好方法：是人为设定一个限制，逼着自己在一个框架之内寻找发挥。</p>\n<h4 id=\"从刻意练习到功夫在诗外\"><a href=\"#从刻意练习到功夫在诗外\" class=\"headerlink\" title=\"从刻意练习到功夫在诗外\"></a>从刻意练习到功夫在诗外</h4><ol>\n<li>外行的洞见（外行解决问题是一个非常普遍的现象。一方面是本专业专家能解决的问题肯定早就解决了，另一方面是复杂问题的确需要用到多个专业的知识。）</li>\n<li>什么时候“练习”最有用（有严格固定规则的领域，练习的作用最大；没有严格规则的领域，练习的作用非常有限。环境局面越是可控。可预测的，练习的作用越大；局面如果是复杂多变、不可预测的，练习的作用就很小。）</li>\n<li>21世纪什么人才最贵（天才最贵，多面手第二贵。）<br>真正的斜杠青年追求的不是简历上多几个斜杠，而应该是培养广泛的兴趣，把知识本身当成回报。</li>\n</ol>\n<h4 id=\"窈窕淑女效应\"><a href=\"#窈窕淑女效应\" class=\"headerlink\" title=\"窈窕淑女效应\"></a>窈窕淑女效应</h4><ol>\n<li>你当她是什么人（你当她是什么人，她最后就真的是什么人。）</li>\n<li>自证预言（你“预言”局面会如何如何，你就按照这个想法去做，局面真的就会如何如何。）</li>\n<li>你和你对你的预期（“叙事自我”，我们时刻都在给自己讲一个故事，说我这么做，是因为我是个这样的人。）</li>\n</ol>\n<h4 id=\"天才和疯子的一线之隔“\"><a href=\"#天才和疯子的一线之隔“\" class=\"headerlink\" title=\"天才和疯子的一线之隔“\"></a>天才和疯子的一线之隔“</h4><p>认知抑制解除”，有的人·能解除这种认知抑制的本能，专门注意到被一般人忽略掉的信息，并从中发现一些东西。创造力=大胆尝试新想法X智能。</p>\n<h5 id=\"用进化论修心养性\"><a href=\"#用进化论修心养性\" class=\"headerlink\" title=\"用进化论修心养性\"></a>用进化论修心养性</h5><ol>\n<li>世界观：演化没有目的</li>\n<li>社会观：好东西没有设计</li>\n<li>价值观：自发演化的东西往往比设计出来的东西好</li>\n<li>人生观：符合天道</li>\n</ol>\n<h3 id=\"Part-3-巨人的工具\"><a href=\"#Part-3-巨人的工具\" class=\"headerlink\" title=\"Part 3 巨人的工具\"></a>Part 3 巨人的工具</h3><h4 id=\"巨人的战术、习惯和日常\"><a href=\"#巨人的战术、习惯和日常\" class=\"headerlink\" title=\"巨人的战术、习惯和日常\"></a>巨人的战术、习惯和日常</h4><h5 id=\"呆伯特作者的经验之谈\"><a href=\"#呆伯特作者的经验之谈\" class=\"headerlink\" title=\"呆伯特作者的经验之谈\"></a>呆伯特作者的经验之谈</h5><ol>\n<li>“目标”和“系统” 所谓“目标”，就是你做这件事就是为了做好这件事，成功了就有回报，失败了就算白干；所谓“系统”，则是一个连续变化的东西，或者是一项技能，或者是一个关系。为了这个系统，你可以做各种项目，你可以要求自己养成什么习惯，你要的不是某个具体事件的成败，而是“发展”这个系统。</li>\n<li>灵感  在浏览信息的过程中，你怎么判断哪条信息值得作为素材呢？你不应该听从大脑的判断，你应该听从身体的判断。如果你的身体对什么信息做出强烈反应，那么别人大概也会关心这个东西。</li>\n<li>技能  不管你真正喜欢的领域是什么，你要努力在这个领域练到前25%。然后你还得再加一个领域——当然能加两个更好。</li>\n</ol>\n<h4 id=\"指挥官的派头\"><a href=\"#指挥官的派头\" class=\"headerlink\" title=\"指挥官的派头\"></a>指挥官的派头</h4><ol>\n<li>自律 = 自由  你为了获得真正的自由，就非得给自己设定一些限制。所谓“真正的自由”，也就是财务自由、时间自由、免于疾病和贫困的自由，为了达到这样的目标，你必须自律才行。</li>\n<li>极端的所有权  我对我的世界，有极端的所有权，如果我的队伍有问题，我自己就会解决，我不会等到这个时候向上级抱怨；反过来说，如果哪一天我真的跟上级说，“老板，我需要这个”——那我马上就能得到我需要的，因为上级明白，凡是我提出的要求，一定是我真的需要。</li>\n<li>谦卑和领导力  要求你在即使身心全部投入的情况下，仍然能在心里保持一个冷静的声音，给自己提个醒。</li>\n</ol>\n<h4 id=\"给前辈铺路的人\"><a href=\"#给前辈铺路的人\" class=\"headerlink\" title=\"给前辈铺路的人\"></a>给前辈铺路的人</h4><ol>\n<li>画布策略的心法，就是“be lesser， do more”——把自己放在更次要的位置，给别人做更多的事。</li>\n<li>画布策略的关键是在工作上给人帮助，给人铺路，让别人能把事做得更漂亮。</li>\n<li>“画布策略”没有过期时间。哪怕你自己已经独立做事了，哪怕别人都开始对你使用画布策略了，你还应该继续给人当清道夫。</li>\n</ol>\n<h4 id=\"风险投资人的养成\"><a href=\"#风险投资人的养成\" class=\"headerlink\" title=\"风险投资人的养成\"></a>风险投资人的养成</h4><ol>\n<li>进攻和防守  你在生活中面对的各种挑战可以分为两类。一类挑战是“防守”，也就是别人给你的挑战。别人给你任务，你想法设法完成，做成了也很有成就感，但是主动权在别人手里。另外一类挑战是“进攻”，是做你自己想做的事情，主动权在自己手里。</li>\n<li>日常风格  任何时候都要真诚，不要模仿任何人，永远做最真实的自己——而且你不必为此道歉。</li>\n</ol>\n<h4 id=\"我怎么管理信息3个信息管理经验\"><a href=\"#我怎么管理信息3个信息管理经验\" class=\"headerlink\" title=\"我怎么管理信息3个信息管理经验\"></a>我怎么管理信息3个信息管理经验</h4><ol>\n<li>采集  我们要专注于识别，而让计算机帮着提取。提取信息最好的办法是搜索。有了高级管理工具，你就应该把任何可能有价值的东西都记录下来。</li>\n<li>合作  </li>\n<li>创造</li>\n</ol>\n<h4 id=\"三种浪漫体质\"><a href=\"#三种浪漫体质\" class=\"headerlink\" title=\"三种浪漫体质\"></a>三种浪漫体质</h4><ol>\n<li>命运体制  认为爱情是上天注定的，爱情来了你就无法抗拒，人们为了爱情愿意做出牺牲，甚至可以承担痛苦。总之，所有事情都应该为爱情让路。</li>\n<li>选择体制  寻找恋爱和结婚对象，会特别理性地权衡比较——对方能不能满足我的各种需要？我在这段关系中能不能舒服地行使自己的权利？就好像自己是在挑选一件适合自己的商品一样。</li>\n<li>契约体制  婚姻有一定的偶然性，你可能遇到一个特别心动的人，说结婚就结婚了。</li>\n</ol>\n<h3 id=\"Part-4-决策的艺术决断力\"><a href=\"#Part-4-决策的艺术决断力\" class=\"headerlink\" title=\"Part 4 决策的艺术决断力\"></a>Part 4 决策的艺术决断力</h3><p>到底什么是厉害的决策法决策，是在面对不容易判断优劣的几个选项时，做出正确的选择。</p>\n<h4 id=\"科学决策的四个步骤\"><a href=\"#科学决策的四个步骤\" class=\"headerlink\" title=\"科学决策的四个步骤\"></a>科学决策的四个步骤</h4><ol>\n<li>扩充你的选项  看看自己都有哪些选项。想想你能不能给自己增加几个选项。</li>\n<li>用现实检验你的观点  评估每个选项的优劣。向很多人寻求意见，对自己的工作前景获得一个客观的评估。</li>\n<li>从长远考虑  从这些选项中选择一个。要从长远考虑。</li>\n<li>为决策错误做好准备 对未来的不确定性要有一定的准备。</li>\n</ol>\n<h4 id=\"选项的价值\"><a href=\"#选项的价值\" class=\"headerlink\" title=\"选项的价值\"></a>选项的价值</h4><ol>\n<li>尽量多点选择  哪怕你仅仅“意识到”自己还有别的选项，你的决策水平都能大大改善。</li>\n<li>寻找亮点  如果你面对一个困难不知道该怎么办，你可以看看别人是怎么办的。哪怕大多数人都失败的局面下，也总会有几个人是成功的，那你就看看那几个成功者是怎么做的。</li>\n<li>并列选择  你要把多个选项都摆在桌子上，要选就一起参选。</li>\n</ol>\n<h4 id=\"成大事者怎么才能不纠结\"><a href=\"#成大事者怎么才能不纠结\" class=\"headerlink\" title=\"成大事者怎么才能不纠结\"></a>成大事者怎么才能不纠结</h4><ol>\n<li>把兼听则明给程序化，并且要求给出具体的反对理由  找几个朋友提提反对意见，帮你用理智战胜情感。</li>\n<li>克服短期情绪，尽量从一个远距离考虑问题  把自己想象成一个旁观者，站在一个远距离考虑问题，所有短期的情绪，什么害怕、紧张，可能就都不重要了。当你面对困难选择的时候，你可以问自己：如果是你最好的朋友面临这个选择，你会给他什么建议？</li>\n<li>如果利益计算已经无法让你判断优劣，那就想想自己的核心价值观是什么  所谓的价值观，就是你设定的“优先级”（priority）是什么样的，你认为什么重要，什么不重要。</li>\n</ol>\n<h4 id=\"用别人预测自己\"><a href=\"#用别人预测自己\" class=\"headerlink\" title=\"用别人预测自己\"></a>用别人预测自己</h4><ol>\n<li>你不比别人特殊，基础比率，就是以前的人，做同样的事，做到的平均水平。</li>\n<li>你特殊在哪里。就算你认为自己很特殊，也要先了解基础比率，再从这个基础上做些修正。</li>\n<li>基础比率与你。在预测未来的时候，首先要想到自己并不比别人更特殊，基础比率是最好的参考资料，如果你不想听从基础比率，那么你就得拿出非常特殊的理由而且这些理由必须是切实存在的与别人的不同之处。</li>\n</ol>\n<h4 id=\"实干家无须精确调研\"><a href=\"#实干家无须精确调研\" class=\"headerlink\" title=\"实干家无须精确调研\"></a>实干家无须精确调研</h4><p>用试水的方法创新，有三个原则：</p>\n<ol>\n<li>尽可能地尝试新事物。</li>\n<li>尝试要可控，要确保试验不给我们带来灾难性的后果。</li>\n<li>获得反馈，从结果中学习，随时调整做法。</li>\n</ol>\n<h4 id=\"宠物超生问题–伪善还是妥协\"><a href=\"#宠物超生问题–伪善还是妥协\" class=\"headerlink\" title=\"宠物超生问题–伪善还是妥协\"></a>宠物超生问题–伪善还是妥协</h4><p>现代社会是一个你不能为所欲为的社会，甚至连爱心都不能为所欲为。这是爱心跟理性之间的妥协，也是理想跟现实之间的妥协。这就是现代社会。每个人都必须妥协，只有这样，人和人、人和宠物才能共处。</p>\n<h4 id=\"二十层床垫级别的敏感度\"><a href=\"#二十层床垫级别的敏感度\" class=\"headerlink\" title=\"二十层床垫级别的敏感度\"></a>二十层床垫级别的敏感度</h4><h4 id=\"知识-体验-敏感度\"><a href=\"#知识-体验-敏感度\" class=\"headerlink\" title=\"知识=体验*敏感度\"></a>知识=体验*敏感度</h4><p>一旦你做错一件事，体会到严重后果之后，最好还能用一个成语典故之类的概念概括这个事情，那么下次再遇到类似地局面，你就会特别敏感，你就会做得更有分寸。我们应该只在重要的事情上保持敏感度，在不重要的事情上放松敏感度。</p>\n<h4 id=\"要避免“过度拟合”，就得“难得糊涂”\"><a href=\"#要避免“过度拟合”，就得“难得糊涂”\" class=\"headerlink\" title=\"要避免“过度拟合”，就得“难得糊涂”\"></a>要避免“过度拟合”，就得“难得糊涂”</h4><p>琢磨人就不重要，琢磨事儿，琢磨思想，才是用到了高级的地方。</p>\n<h4 id=\"斯多葛派哲学的安心之法\"><a href=\"#斯多葛派哲学的安心之法\" class=\"headerlink\" title=\"斯多葛派哲学的安心之法\"></a>斯多葛派哲学的安心之法</h4><p>斯多葛控制二分法：在生活中，有些事情是你能够控制的，有些事情你是控制不了的，你应该只关注你能控制的东西。</p>\n<p>“斯多葛控制二分法”可以让我们在面对小事时从容不迫。那么当面对大事时，就更厉害了。</p>\n<p>如果你能够接受“斯多葛控制二分法”，那么你的个人目标就应该从“外界目标”转换为“内部目标”。你控制不了外界，但是可以控制自己。你可以把目标设定为尽自己所能。如果你能做到这些，那么你就没有什么敌人和对手，因为你关注的是你自己，你不会去指责任何人。不是没有欲望，你可以有欲望！但是，你要把注意力全部集中在自己能控制的这部分上。</p>\n<h4 id=\"到底什么叫“智慧”\"><a href=\"#到底什么叫“智慧”\" class=\"headerlink\" title=\"到底什么叫“智慧”\"></a>到底什么叫“智慧”</h4><p>从三个方面考察一个人的智慧水平</p>\n<ol>\n<li>智识上的谦逊–我知道我需要更多的信息，才能合理的评估这件事，我知道未来可能还有不确定性。</li>\n<li>超越自我–我知道我身在这个事件之中可能会当局者迷，如果能从旁观者的视角看问题，也许更好。</li>\n<li>考虑他人的观点，达成妥协–我知道不同观点的利弊，能理解这个事件的参与各方的想法和立场。我不仅仅考虑自己的利益，也考虑跟别人的关系。</li>\n</ol>\n<h3 id=\"Part-5-数据统治世界指导生活的算法\"><a href=\"#Part-5-数据统治世界指导生活的算法\" class=\"headerlink\" title=\"Part 5 数据统治世界指导生活的算法\"></a>Part 5 数据统治世界指导生活的算法</h3><h4 id=\"数学家告诉你什么时候结束单身\"><a href=\"#数学家告诉你什么时候结束单身\" class=\"headerlink\" title=\"数学家告诉你什么时候结束单身\"></a>数学家告诉你什么时候结束单身</h4><p>37%规则：你要把设定的时间期限分成两个阶段。<br>在第一阶段，你只看不做决定，就是根据你的自身情况，了解一下你所喜欢的和不喜欢的。记住在这个阶段内你最好的结果。等过了你设定期限的37%以后–你就进入到第二阶段，从这一阶段开始，你一旦遇到一个比第一阶段那个最好的结果好，或者与它类似的房子，就要毫不犹豫的做决定。</p>\n<p>如果使用37%规则是你作为一个理性的人在这个不确定的世界中所能做的最佳策略，那么你就可以无怨无悔，没有那么多纠结和痛苦了。</p>\n<p>37%规则是在假设无法回头的条件下成立的、这些算法，说的是面对一个不确定的世界，在你根本不知道命运会怎样的情况下，所能采取的最佳策略。</p>\n<p>结论：</p>\n<ol>\n<li>一个数字：37%</li>\n<li>一个教训：把思路理性化，浪漫问题也需要解决方案。</li>\n<li>一个思想：我们要尽可能地想想什么时候可以运用到数学思想。</li>\n</ol>\n<h4 id=\"数学家告诉你怎样慢慢变老\"><a href=\"#数学家告诉你怎样慢慢变老\" class=\"headerlink\" title=\"数学家告诉你怎样慢慢变老\"></a>数学家告诉你怎样慢慢变老</h4><p>三个智慧</p>\n<ol>\n<li>年青时代要大胆探索</li>\n<li>随着年龄增长，要慢慢学会利用已有的信息，专注于收获。</li>\n<li>在慢慢变老的过程中，我们生活其实是越来越好的。</li>\n</ol>\n<h4 id=\"数学家告诉你为什么难得糊涂\"><a href=\"#数学家告诉你为什么难得糊涂\" class=\"headerlink\" title=\"数学家告诉你为什么难得糊涂\"></a>数学家告诉你为什么难得糊涂</h4><p>过度拟合：你的模型想要一丝不苟地反映已知的所有数据，它对未知数据的预测能力就会非常差。就是因为所谓的“已知”数据，都是有误差的！精准的拟合会把数据的误差给放大–拟合得越精确，并不代表预测结果就越准确，拟合得过度精确后反而结果更加糟糕。</p>\n<p>不要想太多：面临重大决策，有时候没必要考虑太多细节。</p>\n<p>三个建议</p>\n<ol>\n<li>限定思考时间。在有时间限制的情况下，你才会逼着自己去考虑最重要的因素。</li>\n<li>限定内容长度。</li>\n<li>在白板上讨论商业计划，要使用粗的马克笔。最初的计划必须抓住重点。</li>\n</ol>\n<p>如果一件事真的值得去做，哪有那么多理由？</p>\n<h4 id=\"数学家告诉你最好的时间管理\"><a href=\"#数学家告诉你最好的时间管理\" class=\"headerlink\" title=\"数学家告诉你最好的时间管理\"></a>数学家告诉你最好的时间管理</h4><p>如果你的任务都是有截止日期的，那就按照截止日期的早晚安排任务。</p>\n<p>摩尔算法：如果你想要的是尽可能按时完成更多的任务，那你就应该先放弃那个占用时间最长的任务。如果这个任务牵涉到别人的等待时间，我们就应该用“小事优先”–完成时间短的任务优先–的原则。</p>\n<p>加权最短处理时间：如果任务A的完成时间比任务B高一倍，那么A的重要程度必须也比B高一倍，我们才可能会优先考虑做A。</p>\n<h4 id=\"经济学是“老司机”的游戏\"><a href=\"#经济学是“老司机”的游戏\" class=\"headerlink\" title=\"经济学是“老司机”的游戏\"></a>经济学是“老司机”的游戏</h4><p>“纳什均衡”：如果参与游戏的各方都是“老司机”– 每个人都非常聪明，谁也糊弄不了谁，那么游戏就会达到一个各方都满意，或者各方都无奈的局面，任何一方想要采取一个什么行动让自己的局面比现在更好都不可能了。</p>\n<p>对经济学的认识：</p>\n<ol>\n<li>在大多数情况下，传统经济学最好用，因为人是理性的，市场是大体均衡的。</li>\n<li>在少数情况下，人可能会表现出非理性，市场可能会偏离均衡。</li>\n<li>非理性和偏离均衡，可以给世界带来活力。</li>\n</ol>\n<h4 id=\"怎样识别“hype”\"><a href=\"#怎样识别“hype”\" class=\"headerlink\" title=\"怎样识别“hype”\"></a>怎样识别“hype”</h4><p>你要想预测一个想法或者信息还会存在多久，就应该看它已经存在了多久。</p>\n<p>高德纳技术成熟度曲线：表现的是一项新技术从出生到变成hype，到低谷，再到真正实用化的过程。</p>\n<h5 id=\"喜欢-熟悉-意外\"><a href=\"#喜欢-熟悉-意外\" class=\"headerlink\" title=\"喜欢=熟悉+意外\"></a>喜欢=熟悉+意外</h5><p>我们并不喜欢完全陌生的东西，而是希望能从中发现点熟悉的元素。</p>\n<p>最容易被人接受的东西，往往能在熟悉和新奇之间找到一个熟悉的平衡。</p>\n<p>MAYA尽可能地前卫，只能能被人接受。</p>\n<p>行为设计学怎么设计，才能让人听你的去做一件事呢？</p>\n<ol>\n<li>这个人必须自己想做这件事–要有意愿</li>\n<li>这个人必须能做到这件事–这件事越简单越好</li>\n<li>你得提醒他做这件事</li>\n</ol>\n<p>以让用户上瘾为目标</p>\n<ol>\n<li>让用户第一次接触你的东西就留下一个好印象</li>\n<li>让用户能经常获得成就感</li>\n</ol>\n<p>让人上瘾，是行为设计学最核心的目标。</p>\n<h4 id=\"两种技能增长曲线\"><a href=\"#两种技能增长曲线\" class=\"headerlink\" title=\"两种技能增长曲线\"></a>两种技能增长曲线</h4><p>对数增长：这个技能初期的进度速度非常快，到后面则越来越慢，最后几乎是一个平台期，哪怕你付出极大的努力，也只能获得一点儿小小的突破。</p>\n<p>指数增长：从你开始做这件事情以后的很长一段时间内，几乎没有任何能让外人看出来的进步。一直到某个时候，你就好像突破了一个障碍一样，水平一下子就显现出来了，然后还能越增长越快。</p>\n<h3 id=\"Part-6-智识的尺度破除成功学的迷信\"><a href=\"#Part-6-智识的尺度破除成功学的迷信\" class=\"headerlink\" title=\"Part 6 智识的尺度破除成功学的迷信\"></a>Part 6 智识的尺度破除成功学的迷信</h3><h4 id=\"为什么优等生不能改变世界\"><a href=\"#为什么优等生不能改变世界\" class=\"headerlink\" title=\"为什么优等生不能改变世界\"></a>为什么优等生不能改变世界</h4><h5 id=\"好学生和极端学生\"><a href=\"#好学生和极端学生\" class=\"headerlink\" title=\"好学生和极端学生\"></a>好学生和极端学生</h5><p>“人才”其实有两种，一种是“好学生”，乐于遵守各项规则，善于取悦老师，是体制的受益者。还有一种是“极端学生”，特别反感规则。</p>\n<p>在绝大多数情况下，随大流挺好，极端的人不容易混好。可是特别厉害的人，恰恰也是极端的人。</p>\n<h4 id=\"是一个什么样的领导\"><a href=\"#是一个什么样的领导\" class=\"headerlink\" title=\"是一个什么样的领导\"></a>是一个什么样的领导</h4><ol>\n<li>“被过滤过”的领导者——如果你不遵守规则，不能给其他人带来安全感，你就会被过滤掉。那么经过层层过滤。最后能当上领导的人，必然是现行规则的受益者，他们会尽可能地维护现有的规则——他们也就是平庸的领导者。</li>\n<li>“没有被过滤过”的领导者——这些人不是层层选拔上来的，而是因为一些特别偶然的原因上位。比如总统出事了，副总统突然当上了总统；或者是临危受命，体制已经不行了，让他做做看。他不是体制的既得利益者，他很愿意打破规则，干一些极端的事情。</li>\n</ol>\n<p>蒲公英和兰花成功策略：首先，你要知道你是哪种人。你是容易通过过滤机制的人，还是容易被过滤掉的人？是遵守规则的人，还是反抗规则的人？是蒲公英，还是兰花？是正常的人，还是极端的人？第一种人，只要环境有明确的规则，做事有明确的路径，他们都会表现得很好。但是他们应对不了急剧变化的场面；第二种人在正常环境中往往会很难过，非得找到特别适合自己的特殊环境，才能表现出色。第二步是发现自己的特长，寻找适合自己的环境。</p>\n<h5 id=\"坚持，坚持，再坚持\"><a href=\"#坚持，坚持，再坚持\" class=\"headerlink\" title=\"坚持，坚持，再坚持\"></a>坚持，坚持，再坚持</h5><p>给自己讲个好故事，找到工作和生活的意义。保持乐观的精神，这是能坚持下来的前提条件。然后，你再把大目标分解为各种小目标，把每个任务都游戏化，随时奖励自己，获得掌控感，用一个个小胜利慢慢积累进步，这就是通往成功之路。</p>\n<p>真正让人成功的往往不是机械化的理性和算法，而是某些情绪化、非理性的东西。</p>\n<h4 id=\"企业家精神和包办婚姻\"><a href=\"#企业家精神和包办婚姻\" class=\"headerlink\" title=\"企业家精神和包办婚姻\"></a>企业家精神和包办婚姻</h4><ol>\n<li><p>找到兴趣所在：实干家不需要精确调研，不用考虑太多，而是要多尝试新事物，在行动中获得想法。所谓“保金斯基三原则”，就是要在可控和低成本的状态下尽可能多地尝试新事物，不怕失败，取得反馈。要多尝试，要多接触不同的领域，这样你就更容易遇到自己真正感兴趣的东西。</p>\n</li>\n<li><p>包办婚姻和自由恋爱：最好的婚姻“契约体制”，最重要的不是如何精心挑选另一半，而是选定以后如何维护两人的关系。</p>\n</li>\n<li><p>WOOP方法：</p>\n<ol>\n<li>Wish。你想要干什么</li>\n<li>Outcome。把结果具体化</li>\n<li>Obstacle。这是面对现实的一步，看看现在距离这个结果有什么障碍。</li>\n<li>Plan。制订计划，解决各种障碍。</li>\n</ol>\n</li>\n<li><p>WOOP方法最大的作用并不是帮助你实现梦想，而是帮助你放弃不切实际的梦想。</p>\n</li>\n</ol>\n<h4 id=\"老王的体能和老张的灵感\"><a href=\"#老王的体能和老张的灵感\" class=\"headerlink\" title=\"老王的体能和老张的灵感\"></a>老王的体能和老张的灵感</h4><p>人的灵感和创造力并不会随着时间的流逝而下降。你无法取得成就的真正原因并不是你失去了创造力，而是你没有坚持下去。如果持之以恒，你的创造力不会辜负你。</p>\n<h3 id=\"Part-7-洞见未来\"><a href=\"#Part-7-洞见未来\" class=\"headerlink\" title=\"Part 7 洞见未来\"></a>Part 7 洞见未来</h3><h4 id=\"平庸公司的厚黑学\"><a href=\"#平庸公司的厚黑学\" class=\"headerlink\" title=\"平庸公司的厚黑学\"></a>平庸公司的厚黑学</h4><p>普通厚黑学功夫</p>\n<ol>\n<li>领导让干啥就干啥，出错也是领导的错。</li>\n<li>别人做什么你就做什么。竞争对手开始学谷歌了吗？咱也学谷歌！错了难道还能是我的责任？</li>\n<li>用各种专业术语把别人搞晕，这样你就不用真干事了。</li>\n<li>如果你要做意见没有把握的事儿，担心可能要出错，你要事先告诉所有同事，你这么做纯粹是为了多挣钱。这样万一事实证明这个做法是错的，你也可以说这是因为公司的激励制度有问题，而不是你的智商有问题。</li>\n</ol>\n<p>高级厚黑学功夫</p>\n<ol>\n<li>见好就收。愚蠢的做法在短期往往是有好处的，这个项目的好处一出来，你就赶紧拿功劳走人，将来出了毛病也找不到你。</li>\n<li>少下功夫干活，多下功夫做ppt。表现得漂亮比把事儿做对更重要。</li>\n</ol>\n<h4 id=\"跟《冰雪奇缘》学创造力魔法\"><a href=\"#跟《冰雪奇缘》学创造力魔法\" class=\"headerlink\" title=\"跟《冰雪奇缘》学创造力魔法\"></a>跟《冰雪奇缘》学创造力魔法</h4><p>三个激发创造力的办法</p>\n<ol>\n<li>把你最想要的东西列出来，用解决问题的思维，想想怎么实现它。</li>\n<li>个人的经历往往是创作的源泉——你要做的是把自己投入过情感的经历与新的东西连接起来，这就是创作</li>\n<li>旁观者清。陷入一种情境不能自拔的时候，主动换一个视角。</li>\n</ol>\n","site":{"data":{}},"length":8080,"excerpt":"<h3 id=\"Part-1-精英社会的神话\"><a href=\"#Part-1-精英社会的神话\" class=\"headerlink\" title=\"Part 1 精英社会的神话\"></a>Part 1 精英社会的神话</h3><h4 id=\"成功与运气运气动力学（个人运气的三个规律）\"><a href=\"#成功与运气运气动力学（个人运气的三个规律）\" class=\"headerlink\" title=\"成功与运气运气动力学（个人运气的三个规律）\"></a>成功与运气运气动力学（个人运气的三个规律）</h4><ol>\n<li><p>运气可以放大（人类社会是个非线性的复杂系统，这意味着初始条件好一点点，最终结果不是按比例也好一点点，而是很有可能不成比例地把初始优势放大很多很多。）</p>\n</li>\n<li><p>运气可以累加</p>\n</li>\n<li><p>竞争越激烈，运气越重要</p>","more":"<h4 id=\"胜者通吃\"><a href=\"#胜者通吃\" class=\"headerlink\" title=\"胜者通吃\"></a>胜者通吃</h4></li>\n<li><p>胜者通吃的市场</p>\n</li>\n<li><p>正反馈效应</p>\n</li>\n<li><p>收入差距</p>\n</li>\n</ol>\n<h4 id=\"信命不认命\"><a href=\"#信命不认命\" class=\"headerlink\" title=\"信命不认命\"></a>信命不认命</h4><ol>\n<li>成功是因为水平高，失败是因为运气差</li>\n<li>不信邪的好处（如果一个人所处的环境变化不定，运气的成分实在太大，未来的境遇很可能还不如现在，那他的确应该采取“快策略”，及时享乐就算了；只有当你处于稳定的环境中，对未来有点把握，才有条件采取“慢策略”，推迟享乐。）</li>\n<li>一流智力（检验一流智力的标准，就是看你能不能在头脑中同时存在两种相反的想法，还维持正常行事的能力。）</li>\n</ol>\n<h4 id=\"攀比动力学\"><a href=\"#攀比动力学\" class=\"headerlink\" title=\"攀比动力学\"></a>攀比动力学</h4><ol>\n<li>房价为什么越来越高</li>\n<li>花费军备竞赛（花费传导）</li>\n<li>累进消费税</li>\n</ol>\n<h4 id=\"富而好礼\"><a href=\"#富而好礼\" class=\"headerlink\" title=\"富而好礼\"></a>富而好礼</h4><ol>\n<li>富贵而骄（如果你想长久地享受好运气，从一个成功走向另一个成功，就得学会子贡说的“富而无骄”。）</li>\n<li>主要看气质（想要跟人合作，你最好有一个“好人”气质。最好的方法就是你要承认自己的成功之中有运气的因素，不要把所有的功劳都归于自己。）</li>\n<li>感恩之心（感恩能让人的焦虑减少，更不容易恼怒，睡眠质量更好，还对别人更有同情心。）</li>\n</ol>\n<h4 id=\"竞争不充分的领域里才有英雄\"><a href=\"#竞争不充分的领域里才有英雄\" class=\"headerlink\" title=\"竞争不充分的领域里才有英雄\"></a>竞争不充分的领域里才有英雄</h4><ol>\n<li>你应该尽可能去一个新兴的领域。领域不成熟，竞争不激烈，你就有更大的自由度。</li>\n<li>如果是一个成熟的领域，那么你就得尊重这个领域的规律，不能随便标新立异。</li>\n</ol>\n<p>有一种声望很值钱声望，是一本学术期刊最大的价值，而声望只能依靠在历史上慢慢地积累。“声望”根本没有替代品。</p>\n<h4 id=\"精英水平的道歉\"><a href=\"#精英水平的道歉\" class=\"headerlink\" title=\"精英水平的道歉\"></a>精英水平的道歉</h4><p>只有当你分析和解决了自己的问题，你的道歉才配得上被人原谅。道歉的目的，不应该是为了从对方那里获得什么——这个你控制不了。你只能控制你自己。</p>\n<h5 id=\"一个好的道歉要有三步\"><a href=\"#一个好的道歉要有三步\" class=\"headerlink\" title=\"一个好的道歉要有三步\"></a>一个好的道歉要有三步</h5><ol>\n<li>明确动机：不是为了赢回别人的信任，而是为了完善自己的人格。</li>\n<li>学到东西：态度有问题就解决态度问题，能力有问题就解决能力问题。</li>\n<li>提出道歉：说明你的错误，也说明你的改变，但是把是否原谅的决定权留给对方。</li>\n</ol>\n<h4 id=\"国学的三个问题\"><a href=\"#国学的三个问题\" class=\"headerlink\" title=\"国学的三个问题\"></a>国学的三个问题</h4><ol>\n<li>所谓“国学”，到底是对全人类都有价值的通用的学问，还是仅仅是一个地方性的风俗学问。</li>\n<li>中国文化中有哪些仅仅是历史遗迹，有哪些对现代社会仍然有用。</li>\n<li>我们对中国文化是不是非得“仰视”，我们能不能站在现代的高度，“俯视”国学。如果一直仰望，怎么能发展呢？</li>\n</ol>\n<p>国学，应该是思想和学问。国学对应的应该是西方的“自由技艺”（liberal arts），是能让人做事更有分寸，解决问题更有方法，获得真正自由的学问。我们想学的不仅仅是“爱国者”的学问，我们还想学“治国者”的学问。</p>\n<h4 id=\"说精英，谁是精英\"><a href=\"#说精英，谁是精英\" class=\"headerlink\" title=\"说精英，谁是精英\"></a>说精英，谁是精英</h4><ol>\n<li>食物链、智识链和幸福链（“精英”的定义，应该看智识水平的高低。）</li>\n<li>自由、代价和大事（最有意思的人生就是找到机会去做些大事，你既能感到幸福，又能顺便提升食物链排名。）</li>\n<li>算法和复杂（凡事查“如果······就······”表就知道该怎么办的事儿，都不叫决策，都是算法。决策，是没有人告诉你该怎么办，没有固定算法，没有已知的对错，这个时候你怎么选择。）</li>\n</ol>\n<h3 id=\"Part-2-天才和疯子的一线之隔\"><a href=\"#Part-2-天才和疯子的一线之隔\" class=\"headerlink\" title=\"Part 2 天才和疯子的一线之隔\"></a>Part 2 天才和疯子的一线之隔</h3><h4 id=\"俭省追逐者的绝境\"><a href=\"#俭省追逐者的绝境\" class=\"headerlink\" title=\"俭省追逐者的绝境\"></a>俭省追逐者的绝境</h4><ol>\n<li>简单道理（避免陷入一味求多的思维模式，尽可能利用手里现有的资源发展。）</li>\n<li>追逐者（追逐心态的三个来源：1. 跟别人比。2. 我们总认为想要办成更多的事儿，就得动用更多的资源。我们常常忽略自己已经拥有的资源的价值。3. 我们单纯就是想要“更多”。）</li>\n<li>买买买（面对一个具体的局面，到底是应该悠着点，还是全力以赴争取呢？大概有两个标准：1. 游戏是不是可持续的。2. 你的追逐到底是实际的需要，还是为了满足自己的心理需求。）</li>\n</ol>\n<h4 id=\"有差别的人类劳动\"><a href=\"#有差别的人类劳动\" class=\"headerlink\" title=\"有差别的人类劳动\"></a>有差别的人类劳动</h4><ol>\n<li>价值和价值（资源的“内在价值”是一回事，而人怎么利用这个资源，是另一回事——如果人能善加利用，就可以给任何资源创造新的价值。）</li>\n<li>俭省者思维（俭省者关注长远目标；俭省者的攀比心理比较弱，不会陷入追逐者绝境；最重要的是，俭省者总是尽可能利用现有的资源。）</li>\n<li>受限制条件下的创造（在限制条件下，你不得不对现有资源开发出新的用法——这个用法往往有很好的创造性。反过来说，如果要什么有什么，你可以用新资源来实现新功能，那就根本没必要研究什么新用法，也就没有创造性了。）</li>\n</ol>\n<p>最有价值的人类劳动是“有差别的”劳动，是你能不能给手里的资源增加一个创造性的附加值。获得创造性的一个好方法：是人为设定一个限制，逼着自己在一个框架之内寻找发挥。</p>\n<h4 id=\"从刻意练习到功夫在诗外\"><a href=\"#从刻意练习到功夫在诗外\" class=\"headerlink\" title=\"从刻意练习到功夫在诗外\"></a>从刻意练习到功夫在诗外</h4><ol>\n<li>外行的洞见（外行解决问题是一个非常普遍的现象。一方面是本专业专家能解决的问题肯定早就解决了，另一方面是复杂问题的确需要用到多个专业的知识。）</li>\n<li>什么时候“练习”最有用（有严格固定规则的领域，练习的作用最大；没有严格规则的领域，练习的作用非常有限。环境局面越是可控。可预测的，练习的作用越大；局面如果是复杂多变、不可预测的，练习的作用就很小。）</li>\n<li>21世纪什么人才最贵（天才最贵，多面手第二贵。）<br>真正的斜杠青年追求的不是简历上多几个斜杠，而应该是培养广泛的兴趣，把知识本身当成回报。</li>\n</ol>\n<h4 id=\"窈窕淑女效应\"><a href=\"#窈窕淑女效应\" class=\"headerlink\" title=\"窈窕淑女效应\"></a>窈窕淑女效应</h4><ol>\n<li>你当她是什么人（你当她是什么人，她最后就真的是什么人。）</li>\n<li>自证预言（你“预言”局面会如何如何，你就按照这个想法去做，局面真的就会如何如何。）</li>\n<li>你和你对你的预期（“叙事自我”，我们时刻都在给自己讲一个故事，说我这么做，是因为我是个这样的人。）</li>\n</ol>\n<h4 id=\"天才和疯子的一线之隔“\"><a href=\"#天才和疯子的一线之隔“\" class=\"headerlink\" title=\"天才和疯子的一线之隔“\"></a>天才和疯子的一线之隔“</h4><p>认知抑制解除”，有的人·能解除这种认知抑制的本能，专门注意到被一般人忽略掉的信息，并从中发现一些东西。创造力=大胆尝试新想法X智能。</p>\n<h5 id=\"用进化论修心养性\"><a href=\"#用进化论修心养性\" class=\"headerlink\" title=\"用进化论修心养性\"></a>用进化论修心养性</h5><ol>\n<li>世界观：演化没有目的</li>\n<li>社会观：好东西没有设计</li>\n<li>价值观：自发演化的东西往往比设计出来的东西好</li>\n<li>人生观：符合天道</li>\n</ol>\n<h3 id=\"Part-3-巨人的工具\"><a href=\"#Part-3-巨人的工具\" class=\"headerlink\" title=\"Part 3 巨人的工具\"></a>Part 3 巨人的工具</h3><h4 id=\"巨人的战术、习惯和日常\"><a href=\"#巨人的战术、习惯和日常\" class=\"headerlink\" title=\"巨人的战术、习惯和日常\"></a>巨人的战术、习惯和日常</h4><h5 id=\"呆伯特作者的经验之谈\"><a href=\"#呆伯特作者的经验之谈\" class=\"headerlink\" title=\"呆伯特作者的经验之谈\"></a>呆伯特作者的经验之谈</h5><ol>\n<li>“目标”和“系统” 所谓“目标”，就是你做这件事就是为了做好这件事，成功了就有回报，失败了就算白干；所谓“系统”，则是一个连续变化的东西，或者是一项技能，或者是一个关系。为了这个系统，你可以做各种项目，你可以要求自己养成什么习惯，你要的不是某个具体事件的成败，而是“发展”这个系统。</li>\n<li>灵感  在浏览信息的过程中，你怎么判断哪条信息值得作为素材呢？你不应该听从大脑的判断，你应该听从身体的判断。如果你的身体对什么信息做出强烈反应，那么别人大概也会关心这个东西。</li>\n<li>技能  不管你真正喜欢的领域是什么，你要努力在这个领域练到前25%。然后你还得再加一个领域——当然能加两个更好。</li>\n</ol>\n<h4 id=\"指挥官的派头\"><a href=\"#指挥官的派头\" class=\"headerlink\" title=\"指挥官的派头\"></a>指挥官的派头</h4><ol>\n<li>自律 = 自由  你为了获得真正的自由，就非得给自己设定一些限制。所谓“真正的自由”，也就是财务自由、时间自由、免于疾病和贫困的自由，为了达到这样的目标，你必须自律才行。</li>\n<li>极端的所有权  我对我的世界，有极端的所有权，如果我的队伍有问题，我自己就会解决，我不会等到这个时候向上级抱怨；反过来说，如果哪一天我真的跟上级说，“老板，我需要这个”——那我马上就能得到我需要的，因为上级明白，凡是我提出的要求，一定是我真的需要。</li>\n<li>谦卑和领导力  要求你在即使身心全部投入的情况下，仍然能在心里保持一个冷静的声音，给自己提个醒。</li>\n</ol>\n<h4 id=\"给前辈铺路的人\"><a href=\"#给前辈铺路的人\" class=\"headerlink\" title=\"给前辈铺路的人\"></a>给前辈铺路的人</h4><ol>\n<li>画布策略的心法，就是“be lesser， do more”——把自己放在更次要的位置，给别人做更多的事。</li>\n<li>画布策略的关键是在工作上给人帮助，给人铺路，让别人能把事做得更漂亮。</li>\n<li>“画布策略”没有过期时间。哪怕你自己已经独立做事了，哪怕别人都开始对你使用画布策略了，你还应该继续给人当清道夫。</li>\n</ol>\n<h4 id=\"风险投资人的养成\"><a href=\"#风险投资人的养成\" class=\"headerlink\" title=\"风险投资人的养成\"></a>风险投资人的养成</h4><ol>\n<li>进攻和防守  你在生活中面对的各种挑战可以分为两类。一类挑战是“防守”，也就是别人给你的挑战。别人给你任务，你想法设法完成，做成了也很有成就感，但是主动权在别人手里。另外一类挑战是“进攻”，是做你自己想做的事情，主动权在自己手里。</li>\n<li>日常风格  任何时候都要真诚，不要模仿任何人，永远做最真实的自己——而且你不必为此道歉。</li>\n</ol>\n<h4 id=\"我怎么管理信息3个信息管理经验\"><a href=\"#我怎么管理信息3个信息管理经验\" class=\"headerlink\" title=\"我怎么管理信息3个信息管理经验\"></a>我怎么管理信息3个信息管理经验</h4><ol>\n<li>采集  我们要专注于识别，而让计算机帮着提取。提取信息最好的办法是搜索。有了高级管理工具，你就应该把任何可能有价值的东西都记录下来。</li>\n<li>合作  </li>\n<li>创造</li>\n</ol>\n<h4 id=\"三种浪漫体质\"><a href=\"#三种浪漫体质\" class=\"headerlink\" title=\"三种浪漫体质\"></a>三种浪漫体质</h4><ol>\n<li>命运体制  认为爱情是上天注定的，爱情来了你就无法抗拒，人们为了爱情愿意做出牺牲，甚至可以承担痛苦。总之，所有事情都应该为爱情让路。</li>\n<li>选择体制  寻找恋爱和结婚对象，会特别理性地权衡比较——对方能不能满足我的各种需要？我在这段关系中能不能舒服地行使自己的权利？就好像自己是在挑选一件适合自己的商品一样。</li>\n<li>契约体制  婚姻有一定的偶然性，你可能遇到一个特别心动的人，说结婚就结婚了。</li>\n</ol>\n<h3 id=\"Part-4-决策的艺术决断力\"><a href=\"#Part-4-决策的艺术决断力\" class=\"headerlink\" title=\"Part 4 决策的艺术决断力\"></a>Part 4 决策的艺术决断力</h3><p>到底什么是厉害的决策法决策，是在面对不容易判断优劣的几个选项时，做出正确的选择。</p>\n<h4 id=\"科学决策的四个步骤\"><a href=\"#科学决策的四个步骤\" class=\"headerlink\" title=\"科学决策的四个步骤\"></a>科学决策的四个步骤</h4><ol>\n<li>扩充你的选项  看看自己都有哪些选项。想想你能不能给自己增加几个选项。</li>\n<li>用现实检验你的观点  评估每个选项的优劣。向很多人寻求意见，对自己的工作前景获得一个客观的评估。</li>\n<li>从长远考虑  从这些选项中选择一个。要从长远考虑。</li>\n<li>为决策错误做好准备 对未来的不确定性要有一定的准备。</li>\n</ol>\n<h4 id=\"选项的价值\"><a href=\"#选项的价值\" class=\"headerlink\" title=\"选项的价值\"></a>选项的价值</h4><ol>\n<li>尽量多点选择  哪怕你仅仅“意识到”自己还有别的选项，你的决策水平都能大大改善。</li>\n<li>寻找亮点  如果你面对一个困难不知道该怎么办，你可以看看别人是怎么办的。哪怕大多数人都失败的局面下，也总会有几个人是成功的，那你就看看那几个成功者是怎么做的。</li>\n<li>并列选择  你要把多个选项都摆在桌子上，要选就一起参选。</li>\n</ol>\n<h4 id=\"成大事者怎么才能不纠结\"><a href=\"#成大事者怎么才能不纠结\" class=\"headerlink\" title=\"成大事者怎么才能不纠结\"></a>成大事者怎么才能不纠结</h4><ol>\n<li>把兼听则明给程序化，并且要求给出具体的反对理由  找几个朋友提提反对意见，帮你用理智战胜情感。</li>\n<li>克服短期情绪，尽量从一个远距离考虑问题  把自己想象成一个旁观者，站在一个远距离考虑问题，所有短期的情绪，什么害怕、紧张，可能就都不重要了。当你面对困难选择的时候，你可以问自己：如果是你最好的朋友面临这个选择，你会给他什么建议？</li>\n<li>如果利益计算已经无法让你判断优劣，那就想想自己的核心价值观是什么  所谓的价值观，就是你设定的“优先级”（priority）是什么样的，你认为什么重要，什么不重要。</li>\n</ol>\n<h4 id=\"用别人预测自己\"><a href=\"#用别人预测自己\" class=\"headerlink\" title=\"用别人预测自己\"></a>用别人预测自己</h4><ol>\n<li>你不比别人特殊，基础比率，就是以前的人，做同样的事，做到的平均水平。</li>\n<li>你特殊在哪里。就算你认为自己很特殊，也要先了解基础比率，再从这个基础上做些修正。</li>\n<li>基础比率与你。在预测未来的时候，首先要想到自己并不比别人更特殊，基础比率是最好的参考资料，如果你不想听从基础比率，那么你就得拿出非常特殊的理由而且这些理由必须是切实存在的与别人的不同之处。</li>\n</ol>\n<h4 id=\"实干家无须精确调研\"><a href=\"#实干家无须精确调研\" class=\"headerlink\" title=\"实干家无须精确调研\"></a>实干家无须精确调研</h4><p>用试水的方法创新，有三个原则：</p>\n<ol>\n<li>尽可能地尝试新事物。</li>\n<li>尝试要可控，要确保试验不给我们带来灾难性的后果。</li>\n<li>获得反馈，从结果中学习，随时调整做法。</li>\n</ol>\n<h4 id=\"宠物超生问题–伪善还是妥协\"><a href=\"#宠物超生问题–伪善还是妥协\" class=\"headerlink\" title=\"宠物超生问题–伪善还是妥协\"></a>宠物超生问题–伪善还是妥协</h4><p>现代社会是一个你不能为所欲为的社会，甚至连爱心都不能为所欲为。这是爱心跟理性之间的妥协，也是理想跟现实之间的妥协。这就是现代社会。每个人都必须妥协，只有这样，人和人、人和宠物才能共处。</p>\n<h4 id=\"二十层床垫级别的敏感度\"><a href=\"#二十层床垫级别的敏感度\" class=\"headerlink\" title=\"二十层床垫级别的敏感度\"></a>二十层床垫级别的敏感度</h4><h4 id=\"知识-体验-敏感度\"><a href=\"#知识-体验-敏感度\" class=\"headerlink\" title=\"知识=体验*敏感度\"></a>知识=体验*敏感度</h4><p>一旦你做错一件事，体会到严重后果之后，最好还能用一个成语典故之类的概念概括这个事情，那么下次再遇到类似地局面，你就会特别敏感，你就会做得更有分寸。我们应该只在重要的事情上保持敏感度，在不重要的事情上放松敏感度。</p>\n<h4 id=\"要避免“过度拟合”，就得“难得糊涂”\"><a href=\"#要避免“过度拟合”，就得“难得糊涂”\" class=\"headerlink\" title=\"要避免“过度拟合”，就得“难得糊涂”\"></a>要避免“过度拟合”，就得“难得糊涂”</h4><p>琢磨人就不重要，琢磨事儿，琢磨思想，才是用到了高级的地方。</p>\n<h4 id=\"斯多葛派哲学的安心之法\"><a href=\"#斯多葛派哲学的安心之法\" class=\"headerlink\" title=\"斯多葛派哲学的安心之法\"></a>斯多葛派哲学的安心之法</h4><p>斯多葛控制二分法：在生活中，有些事情是你能够控制的，有些事情你是控制不了的，你应该只关注你能控制的东西。</p>\n<p>“斯多葛控制二分法”可以让我们在面对小事时从容不迫。那么当面对大事时，就更厉害了。</p>\n<p>如果你能够接受“斯多葛控制二分法”，那么你的个人目标就应该从“外界目标”转换为“内部目标”。你控制不了外界，但是可以控制自己。你可以把目标设定为尽自己所能。如果你能做到这些，那么你就没有什么敌人和对手，因为你关注的是你自己，你不会去指责任何人。不是没有欲望，你可以有欲望！但是，你要把注意力全部集中在自己能控制的这部分上。</p>\n<h4 id=\"到底什么叫“智慧”\"><a href=\"#到底什么叫“智慧”\" class=\"headerlink\" title=\"到底什么叫“智慧”\"></a>到底什么叫“智慧”</h4><p>从三个方面考察一个人的智慧水平</p>\n<ol>\n<li>智识上的谦逊–我知道我需要更多的信息，才能合理的评估这件事，我知道未来可能还有不确定性。</li>\n<li>超越自我–我知道我身在这个事件之中可能会当局者迷，如果能从旁观者的视角看问题，也许更好。</li>\n<li>考虑他人的观点，达成妥协–我知道不同观点的利弊，能理解这个事件的参与各方的想法和立场。我不仅仅考虑自己的利益，也考虑跟别人的关系。</li>\n</ol>\n<h3 id=\"Part-5-数据统治世界指导生活的算法\"><a href=\"#Part-5-数据统治世界指导生活的算法\" class=\"headerlink\" title=\"Part 5 数据统治世界指导生活的算法\"></a>Part 5 数据统治世界指导生活的算法</h3><h4 id=\"数学家告诉你什么时候结束单身\"><a href=\"#数学家告诉你什么时候结束单身\" class=\"headerlink\" title=\"数学家告诉你什么时候结束单身\"></a>数学家告诉你什么时候结束单身</h4><p>37%规则：你要把设定的时间期限分成两个阶段。<br>在第一阶段，你只看不做决定，就是根据你的自身情况，了解一下你所喜欢的和不喜欢的。记住在这个阶段内你最好的结果。等过了你设定期限的37%以后–你就进入到第二阶段，从这一阶段开始，你一旦遇到一个比第一阶段那个最好的结果好，或者与它类似的房子，就要毫不犹豫的做决定。</p>\n<p>如果使用37%规则是你作为一个理性的人在这个不确定的世界中所能做的最佳策略，那么你就可以无怨无悔，没有那么多纠结和痛苦了。</p>\n<p>37%规则是在假设无法回头的条件下成立的、这些算法，说的是面对一个不确定的世界，在你根本不知道命运会怎样的情况下，所能采取的最佳策略。</p>\n<p>结论：</p>\n<ol>\n<li>一个数字：37%</li>\n<li>一个教训：把思路理性化，浪漫问题也需要解决方案。</li>\n<li>一个思想：我们要尽可能地想想什么时候可以运用到数学思想。</li>\n</ol>\n<h4 id=\"数学家告诉你怎样慢慢变老\"><a href=\"#数学家告诉你怎样慢慢变老\" class=\"headerlink\" title=\"数学家告诉你怎样慢慢变老\"></a>数学家告诉你怎样慢慢变老</h4><p>三个智慧</p>\n<ol>\n<li>年青时代要大胆探索</li>\n<li>随着年龄增长，要慢慢学会利用已有的信息，专注于收获。</li>\n<li>在慢慢变老的过程中，我们生活其实是越来越好的。</li>\n</ol>\n<h4 id=\"数学家告诉你为什么难得糊涂\"><a href=\"#数学家告诉你为什么难得糊涂\" class=\"headerlink\" title=\"数学家告诉你为什么难得糊涂\"></a>数学家告诉你为什么难得糊涂</h4><p>过度拟合：你的模型想要一丝不苟地反映已知的所有数据，它对未知数据的预测能力就会非常差。就是因为所谓的“已知”数据，都是有误差的！精准的拟合会把数据的误差给放大–拟合得越精确，并不代表预测结果就越准确，拟合得过度精确后反而结果更加糟糕。</p>\n<p>不要想太多：面临重大决策，有时候没必要考虑太多细节。</p>\n<p>三个建议</p>\n<ol>\n<li>限定思考时间。在有时间限制的情况下，你才会逼着自己去考虑最重要的因素。</li>\n<li>限定内容长度。</li>\n<li>在白板上讨论商业计划，要使用粗的马克笔。最初的计划必须抓住重点。</li>\n</ol>\n<p>如果一件事真的值得去做，哪有那么多理由？</p>\n<h4 id=\"数学家告诉你最好的时间管理\"><a href=\"#数学家告诉你最好的时间管理\" class=\"headerlink\" title=\"数学家告诉你最好的时间管理\"></a>数学家告诉你最好的时间管理</h4><p>如果你的任务都是有截止日期的，那就按照截止日期的早晚安排任务。</p>\n<p>摩尔算法：如果你想要的是尽可能按时完成更多的任务，那你就应该先放弃那个占用时间最长的任务。如果这个任务牵涉到别人的等待时间，我们就应该用“小事优先”–完成时间短的任务优先–的原则。</p>\n<p>加权最短处理时间：如果任务A的完成时间比任务B高一倍，那么A的重要程度必须也比B高一倍，我们才可能会优先考虑做A。</p>\n<h4 id=\"经济学是“老司机”的游戏\"><a href=\"#经济学是“老司机”的游戏\" class=\"headerlink\" title=\"经济学是“老司机”的游戏\"></a>经济学是“老司机”的游戏</h4><p>“纳什均衡”：如果参与游戏的各方都是“老司机”– 每个人都非常聪明，谁也糊弄不了谁，那么游戏就会达到一个各方都满意，或者各方都无奈的局面，任何一方想要采取一个什么行动让自己的局面比现在更好都不可能了。</p>\n<p>对经济学的认识：</p>\n<ol>\n<li>在大多数情况下，传统经济学最好用，因为人是理性的，市场是大体均衡的。</li>\n<li>在少数情况下，人可能会表现出非理性，市场可能会偏离均衡。</li>\n<li>非理性和偏离均衡，可以给世界带来活力。</li>\n</ol>\n<h4 id=\"怎样识别“hype”\"><a href=\"#怎样识别“hype”\" class=\"headerlink\" title=\"怎样识别“hype”\"></a>怎样识别“hype”</h4><p>你要想预测一个想法或者信息还会存在多久，就应该看它已经存在了多久。</p>\n<p>高德纳技术成熟度曲线：表现的是一项新技术从出生到变成hype，到低谷，再到真正实用化的过程。</p>\n<h5 id=\"喜欢-熟悉-意外\"><a href=\"#喜欢-熟悉-意外\" class=\"headerlink\" title=\"喜欢=熟悉+意外\"></a>喜欢=熟悉+意外</h5><p>我们并不喜欢完全陌生的东西，而是希望能从中发现点熟悉的元素。</p>\n<p>最容易被人接受的东西，往往能在熟悉和新奇之间找到一个熟悉的平衡。</p>\n<p>MAYA尽可能地前卫，只能能被人接受。</p>\n<p>行为设计学怎么设计，才能让人听你的去做一件事呢？</p>\n<ol>\n<li>这个人必须自己想做这件事–要有意愿</li>\n<li>这个人必须能做到这件事–这件事越简单越好</li>\n<li>你得提醒他做这件事</li>\n</ol>\n<p>以让用户上瘾为目标</p>\n<ol>\n<li>让用户第一次接触你的东西就留下一个好印象</li>\n<li>让用户能经常获得成就感</li>\n</ol>\n<p>让人上瘾，是行为设计学最核心的目标。</p>\n<h4 id=\"两种技能增长曲线\"><a href=\"#两种技能增长曲线\" class=\"headerlink\" title=\"两种技能增长曲线\"></a>两种技能增长曲线</h4><p>对数增长：这个技能初期的进度速度非常快，到后面则越来越慢，最后几乎是一个平台期，哪怕你付出极大的努力，也只能获得一点儿小小的突破。</p>\n<p>指数增长：从你开始做这件事情以后的很长一段时间内，几乎没有任何能让外人看出来的进步。一直到某个时候，你就好像突破了一个障碍一样，水平一下子就显现出来了，然后还能越增长越快。</p>\n<h3 id=\"Part-6-智识的尺度破除成功学的迷信\"><a href=\"#Part-6-智识的尺度破除成功学的迷信\" class=\"headerlink\" title=\"Part 6 智识的尺度破除成功学的迷信\"></a>Part 6 智识的尺度破除成功学的迷信</h3><h4 id=\"为什么优等生不能改变世界\"><a href=\"#为什么优等生不能改变世界\" class=\"headerlink\" title=\"为什么优等生不能改变世界\"></a>为什么优等生不能改变世界</h4><h5 id=\"好学生和极端学生\"><a href=\"#好学生和极端学生\" class=\"headerlink\" title=\"好学生和极端学生\"></a>好学生和极端学生</h5><p>“人才”其实有两种，一种是“好学生”，乐于遵守各项规则，善于取悦老师，是体制的受益者。还有一种是“极端学生”，特别反感规则。</p>\n<p>在绝大多数情况下，随大流挺好，极端的人不容易混好。可是特别厉害的人，恰恰也是极端的人。</p>\n<h4 id=\"是一个什么样的领导\"><a href=\"#是一个什么样的领导\" class=\"headerlink\" title=\"是一个什么样的领导\"></a>是一个什么样的领导</h4><ol>\n<li>“被过滤过”的领导者——如果你不遵守规则，不能给其他人带来安全感，你就会被过滤掉。那么经过层层过滤。最后能当上领导的人，必然是现行规则的受益者，他们会尽可能地维护现有的规则——他们也就是平庸的领导者。</li>\n<li>“没有被过滤过”的领导者——这些人不是层层选拔上来的，而是因为一些特别偶然的原因上位。比如总统出事了，副总统突然当上了总统；或者是临危受命，体制已经不行了，让他做做看。他不是体制的既得利益者，他很愿意打破规则，干一些极端的事情。</li>\n</ol>\n<p>蒲公英和兰花成功策略：首先，你要知道你是哪种人。你是容易通过过滤机制的人，还是容易被过滤掉的人？是遵守规则的人，还是反抗规则的人？是蒲公英，还是兰花？是正常的人，还是极端的人？第一种人，只要环境有明确的规则，做事有明确的路径，他们都会表现得很好。但是他们应对不了急剧变化的场面；第二种人在正常环境中往往会很难过，非得找到特别适合自己的特殊环境，才能表现出色。第二步是发现自己的特长，寻找适合自己的环境。</p>\n<h5 id=\"坚持，坚持，再坚持\"><a href=\"#坚持，坚持，再坚持\" class=\"headerlink\" title=\"坚持，坚持，再坚持\"></a>坚持，坚持，再坚持</h5><p>给自己讲个好故事，找到工作和生活的意义。保持乐观的精神，这是能坚持下来的前提条件。然后，你再把大目标分解为各种小目标，把每个任务都游戏化，随时奖励自己，获得掌控感，用一个个小胜利慢慢积累进步，这就是通往成功之路。</p>\n<p>真正让人成功的往往不是机械化的理性和算法，而是某些情绪化、非理性的东西。</p>\n<h4 id=\"企业家精神和包办婚姻\"><a href=\"#企业家精神和包办婚姻\" class=\"headerlink\" title=\"企业家精神和包办婚姻\"></a>企业家精神和包办婚姻</h4><ol>\n<li><p>找到兴趣所在：实干家不需要精确调研，不用考虑太多，而是要多尝试新事物，在行动中获得想法。所谓“保金斯基三原则”，就是要在可控和低成本的状态下尽可能多地尝试新事物，不怕失败，取得反馈。要多尝试，要多接触不同的领域，这样你就更容易遇到自己真正感兴趣的东西。</p>\n</li>\n<li><p>包办婚姻和自由恋爱：最好的婚姻“契约体制”，最重要的不是如何精心挑选另一半，而是选定以后如何维护两人的关系。</p>\n</li>\n<li><p>WOOP方法：</p>\n<ol>\n<li>Wish。你想要干什么</li>\n<li>Outcome。把结果具体化</li>\n<li>Obstacle。这是面对现实的一步，看看现在距离这个结果有什么障碍。</li>\n<li>Plan。制订计划，解决各种障碍。</li>\n</ol>\n</li>\n<li><p>WOOP方法最大的作用并不是帮助你实现梦想，而是帮助你放弃不切实际的梦想。</p>\n</li>\n</ol>\n<h4 id=\"老王的体能和老张的灵感\"><a href=\"#老王的体能和老张的灵感\" class=\"headerlink\" title=\"老王的体能和老张的灵感\"></a>老王的体能和老张的灵感</h4><p>人的灵感和创造力并不会随着时间的流逝而下降。你无法取得成就的真正原因并不是你失去了创造力，而是你没有坚持下去。如果持之以恒，你的创造力不会辜负你。</p>\n<h3 id=\"Part-7-洞见未来\"><a href=\"#Part-7-洞见未来\" class=\"headerlink\" title=\"Part 7 洞见未来\"></a>Part 7 洞见未来</h3><h4 id=\"平庸公司的厚黑学\"><a href=\"#平庸公司的厚黑学\" class=\"headerlink\" title=\"平庸公司的厚黑学\"></a>平庸公司的厚黑学</h4><p>普通厚黑学功夫</p>\n<ol>\n<li>领导让干啥就干啥，出错也是领导的错。</li>\n<li>别人做什么你就做什么。竞争对手开始学谷歌了吗？咱也学谷歌！错了难道还能是我的责任？</li>\n<li>用各种专业术语把别人搞晕，这样你就不用真干事了。</li>\n<li>如果你要做意见没有把握的事儿，担心可能要出错，你要事先告诉所有同事，你这么做纯粹是为了多挣钱。这样万一事实证明这个做法是错的，你也可以说这是因为公司的激励制度有问题，而不是你的智商有问题。</li>\n</ol>\n<p>高级厚黑学功夫</p>\n<ol>\n<li>见好就收。愚蠢的做法在短期往往是有好处的，这个项目的好处一出来，你就赶紧拿功劳走人，将来出了毛病也找不到你。</li>\n<li>少下功夫干活，多下功夫做ppt。表现得漂亮比把事儿做对更重要。</li>\n</ol>\n<h4 id=\"跟《冰雪奇缘》学创造力魔法\"><a href=\"#跟《冰雪奇缘》学创造力魔法\" class=\"headerlink\" title=\"跟《冰雪奇缘》学创造力魔法\"></a>跟《冰雪奇缘》学创造力魔法</h4><p>三个激发创造力的办法</p>\n<ol>\n<li>把你最想要的东西列出来，用解决问题的思维，想想怎么实现它。</li>\n<li>个人的经历往往是创作的源泉——你要做的是把自己投入过情感的经历与新的东西连接起来，这就是创作</li>\n<li>旁观者清。陷入一种情境不能自拔的时候，主动换一个视角。</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckmvhvwz20008vcua44vt7nue","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwz7000evcua87z0aa21"},{"post_id":"ckmvhvwys0001vcua3oi6dw0v","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwz8000ivcua5ohmby03"},{"post_id":"ckmvhvwz30009vcua2u3kgjug","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwza000kvcua54noen6c"},{"post_id":"ckmvhvwz5000cvcua0q58ca9h","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwzb000nvcua6w8caaam"},{"post_id":"ckmvhvwyy0003vcuacaarbpec","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwzc000qvcuahg2w6vu4"},{"post_id":"ckmvhvwz6000dvcuag8gygu6q","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwze000uvcuahknh3yiz"},{"post_id":"ckmvhvwz8000hvcuaevmuglt8","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwzf000xvcua5rdm7pl0"},{"post_id":"ckmvhvwz10007vcuadsqg6n70","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwzg0010vcuaacfzhp0r"},{"post_id":"ckmvhvwz9000jvcua7wb1424c","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwzh0013vcuacevcfd7p"},{"post_id":"ckmvhvwzb000mvcua49egdi8y","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwzl0018vcua96ivexs0"},{"post_id":"ckmvhvwzc000pvcua1f8c8fvs","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwzm001bvcuade0oe0m2"},{"post_id":"ckmvhvwzd000tvcuafeqn2vu8","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwzn001fvcuaasbm6xlf"},{"post_id":"ckmvhvwze000wvcuacw3te98p","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvwzp001jvcua5fgfduxu"},{"post_id":"ckmvhvwzm001avcua6sbw9bji","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvwzq001nvcuaa86z13j3"},{"post_id":"ckmvhvwzf000zvcuabaja5swd","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvwzs001qvcua7ld6eq8s"},{"post_id":"ckmvhvwzm001dvcua0uhn3ai4","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvwzs001tvcua7h2ffdqp"},{"post_id":"ckmvhvwzo001ivcua6cx4ht5l","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvwzu001xvcuab052a241"},{"post_id":"ckmvhvwzg0012vcuafvjvdrqn","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvwzv0020vcua6vtrdvm5"},{"post_id":"ckmvhvwzp001lvcuabudtgq5t","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvwzw0024vcuagfqs8ytv"},{"post_id":"ckmvhvwzr001pvcuafnr1fuy4","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvwzx0027vcua2ml057fl"},{"post_id":"ckmvhvwzk0017vcua1pov8a5j","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvwzy002avcua8dikaoot"},{"post_id":"ckmvhvwzs001svcuaee4khqai","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvwzz002evcuah66aeszq"},{"post_id":"ckmvhvwzt001wvcua3lmi256p","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvx00002hvcua7mnna7as"},{"post_id":"ckmvhvwzv001zvcuaawjj9jsr","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvx01002kvcuab6idf8pt"},{"post_id":"ckmvhvwzw0023vcuacd3s60j9","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvx02002nvcua8uk00ybh"},{"post_id":"ckmvhvwzx0026vcuahd5bd3pd","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvx03002rvcuahrwmdhxt"},{"post_id":"ckmvhvwzx0029vcua34gldbic","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx04002uvcuadvb59twa"},{"post_id":"ckmvhvwzz002dvcuahlb68bmf","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx05002yvcuabrui6ors"},{"post_id":"ckmvhvx00002gvcuafg3o3xuf","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx060031vcua1mgjb3ls"},{"post_id":"ckmvhvx00002jvcua7n86ht72","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx060034vcuafxph9rg8"},{"post_id":"ckmvhvx01002mvcuadvk38r17","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx070038vcua3gie6iut"},{"post_id":"ckmvhvx02002qvcuad71403yv","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx08003bvcua7cxw9tnb"},{"post_id":"ckmvhvx03002tvcua546948s3","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx09003evcua0sqe0a07"},{"post_id":"ckmvhvx04002xvcua3n9pgin0","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx0a003hvcua6o7hckb4"},{"post_id":"ckmvhvx050030vcuagun5750q","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx0b003lvcuahwp401dd"},{"post_id":"ckmvhvx060033vcuagv8b246n","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx0c003nvcuah2vk8vf6"},{"post_id":"ckmvhvx070037vcuaexomdxfe","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx0d003rvcua7p1mgzhq"},{"post_id":"ckmvhvx08003avcua7t3p7y7h","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx0e003vvcua62572o3h"},{"post_id":"ckmvhvx09003dvcuacqxmg35o","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx0f003zvcua8d0mgzsc"},{"post_id":"ckmvhvx09003gvcuadhr5a5w1","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx0g0042vcuaeitj44f6"},{"post_id":"ckmvhvx0a003kvcua8wu64ss0","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx0h0045vcuaank4adva"},{"post_id":"ckmvhvx0e003yvcuah7gu2b2a","category_id":"ckmvhvx0d003svcua8sjw0k0l","_id":"ckmvhvx0i0048vcuaa4d95w8d"},{"post_id":"ckmvhvx0b003mvcua4izc7sog","category_id":"ckmvhvx0d003svcua8sjw0k0l","_id":"ckmvhvx0j004avcua5qcw2l4p"},{"post_id":"ckmvhvx0f0040vcua715u04h0","category_id":"ckmvhvx0d003svcua8sjw0k0l","_id":"ckmvhvx0k004evcua0scectxo"},{"post_id":"ckmvhvx0g0044vcua5ftebjfq","category_id":"ckmvhvx0d003svcua8sjw0k0l","_id":"ckmvhvx0l004gvcuaefox0jaa"},{"post_id":"ckmvhvx0c003qvcua5tp11j6p","category_id":"ckmvhvx0d003svcua8sjw0k0l","_id":"ckmvhvx0m004jvcuahuglg7fm"},{"post_id":"ckmvhvx0i0049vcua9iha2jmr","category_id":"ckmvhvx0d003svcua8sjw0k0l","_id":"ckmvhvx0n004nvcuaabok9ry7"},{"post_id":"ckmvhvx0e003uvcua8ond3vxx","category_id":"ckmvhvx0d003svcua8sjw0k0l","_id":"ckmvhvx0p004rvcua7dw66t49"},{"post_id":"ckmvhvx0k004fvcua1u379sqr","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx0p004uvcua0gpf6tv0"},{"post_id":"ckmvhvx0h0046vcua09escl0t","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx0s004yvcua5ii1a44h"},{"post_id":"ckmvhvx0m004ivcuahl8jd2vz","category_id":"ckmvhvx0d003svcua8sjw0k0l","_id":"ckmvhvx0t0051vcuaacf64gf5"},{"post_id":"ckmvhvx0n004mvcuafgir3bsn","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx0u0055vcuacbas1pnk"},{"post_id":"ckmvhvx0j004cvcua3uuf6sl8","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx0v0058vcuadiub22i3"},{"post_id":"ckmvhvx0o004qvcuaclg70arz","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvx0w005bvcuafri0bsb9"},{"post_id":"ckmvhvx0p004tvcuafd2e19ct","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvx0x005fvcua6uwp9b49"},{"post_id":"ckmvhvx0r004xvcua42xhcny5","category_id":"ckmvhvwz00004vcua5pmu673a","_id":"ckmvhvx0y005jvcuaf6jr39jm"},{"post_id":"ckmvhvx0t0054vcua52jnfdul","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx0z005lvcua0iylab1f"},{"post_id":"ckmvhvx0v005avcuab4sg9s77","category_id":"ckmvhvx0d003svcua8sjw0k0l","_id":"ckmvhvx11005pvcuaf4ydaazq"},{"post_id":"ckmvhvx0s0050vcua7wlxfvkz","category_id":"ckmvhvx0u0056vcuaaxtl9w9x","_id":"ckmvhvx12005rvcuafls84o2d"},{"post_id":"ckmvhvx0u0057vcua79yoabus","category_id":"ckmvhvx0x005evcua7jde0vl6","_id":"ckmvhvx13005vvcua2apyc79u"},{"post_id":"ckmvhvx10005ovcuaa5up5i5u","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx13005xvcua3czwhhy3"},{"post_id":"ckmvhvx0w005dvcua03k5a13w","category_id":"ckmvhvx0x005evcua7jde0vl6","_id":"ckmvhvx150061vcua99pj6daa"},{"post_id":"ckmvhvx11005qvcuac0ki2omg","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx150064vcua1dgtgybl"},{"post_id":"ckmvhvx12005uvcuabj3x2z4u","category_id":"ckmvhvx0x005evcua7jde0vl6","_id":"ckmvhvx170067vcua9jhqe8qu"},{"post_id":"ckmvhvx0x005ivcua738nb1un","category_id":"ckmvhvx12005svcua2hcf05nz","_id":"ckmvhvx19006bvcua5r67aonw"},{"post_id":"ckmvhvx13005wvcua4u5cg5za","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx19006evcuacxboa6nl"},{"post_id":"ckmvhvx140060vcua3tiw1bhz","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx1b006ivcuad5bnhrcc"},{"post_id":"ckmvhvx0y005kvcua14t3cujf","category_id":"ckmvhvx12005svcua2hcf05nz","_id":"ckmvhvx1b006lvcuabet15qra"},{"post_id":"ckmvhvx150063vcua0ih2e2jg","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx1c006ovcuac3ocgsuh"},{"post_id":"ckmvhvx170066vcua88rj3rn7","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx1d006qvcua38412nzx"},{"post_id":"ckmvhvx18006avcua46je01jw","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx1e006tvcuac592b3mh"},{"post_id":"ckmvhvx19006dvcua30nse3sa","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx1f006vvcuafbxt8mz2"},{"post_id":"ckmvhvx1a006hvcuaalmd8gfq","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx1g006zvcua8cuqce8h"},{"post_id":"ckmvhvx1b006kvcua88cyahq1","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx1g0072vcua8ibu04nn"},{"post_id":"ckmvhvx1c006nvcua8m5vf841","category_id":"ckmvhvx0x005evcua7jde0vl6","_id":"ckmvhvx1h0075vcuafazycdlo"},{"post_id":"ckmvhvx1d006pvcua2tsneoxt","category_id":"ckmvhvwzi0015vcuahwsk471p","_id":"ckmvhvx1h0077vcua24rzerb8"},{"post_id":"ckmvhvx1e006uvcua9sj9f0bp","category_id":"ckmvhvx0x005evcua7jde0vl6","_id":"ckmvhvx1i0079vcua4jvq3wvd"},{"post_id":"ckmvhvx1f006yvcua1q5v4ivu","category_id":"ckmvhvx0x005evcua7jde0vl6","_id":"ckmvhvx1i007bvcua0e0r2j1p"},{"post_id":"ckmvhvx1g0071vcua6y4fgy6l","category_id":"ckmvhvx0k004dvcuabf6y8zzr","_id":"ckmvhvx1i007evcua1zxa2dwc"},{"post_id":"ckmvhvx1d006svcuagipr08av","category_id":"ckmvhvx1f006xvcua78ebduy0","_id":"ckmvhvx1j007fvcua2icgbmu4"}],"PostTag":[{"post_id":"ckmvhvwys0001vcua3oi6dw0v","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvwzc000ovcua3plk9aka"},{"post_id":"ckmvhvwys0001vcua3oi6dw0v","tag_id":"ckmvhvwz4000bvcuaarod2fzf","_id":"ckmvhvwzd000rvcuagycp0the"},{"post_id":"ckmvhvwys0001vcua3oi6dw0v","tag_id":"ckmvhvwz8000gvcuafbab1v1k","_id":"ckmvhvwze000vvcuagles9j3t"},{"post_id":"ckmvhvwyy0003vcuacaarbpec","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvwzg0011vcua1ttl8tax"},{"post_id":"ckmvhvwyy0003vcuacaarbpec","tag_id":"ckmvhvwzd000svcuagoro6afg","_id":"ckmvhvwzi0014vcua9sve987k"},{"post_id":"ckmvhvwze000wvcuacw3te98p","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvwzl0019vcua7nqa8vr5"},{"post_id":"ckmvhvwze000wvcuacw3te98p","tag_id":"ckmvhvwz8000gvcuafbab1v1k","_id":"ckmvhvwzm001cvcua51b49z6w"},{"post_id":"ckmvhvwz10007vcuadsqg6n70","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvwzo001hvcuag9osg63c"},{"post_id":"ckmvhvwz10007vcuadsqg6n70","tag_id":"ckmvhvwzi0016vcuaca9801bd","_id":"ckmvhvwzp001kvcua5qpv7q21"},{"post_id":"ckmvhvwz20008vcua44vt7nue","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvwzs001rvcua37sybtt5"},{"post_id":"ckmvhvwz20008vcua44vt7nue","tag_id":"ckmvhvwzn001gvcua5tkv1g68","_id":"ckmvhvwzt001uvcua23uo8887"},{"post_id":"ckmvhvwz30009vcua2u3kgjug","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvwzu001yvcua8ktec5rv"},{"post_id":"ckmvhvwz30009vcua2u3kgjug","tag_id":"ckmvhvwzr001ovcuaeabb6fvr","_id":"ckmvhvwzv0021vcuahyuga8an"},{"post_id":"ckmvhvwz5000cvcua0q58ca9h","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvwzw0025vcuaczjx7shb"},{"post_id":"ckmvhvwz5000cvcua0q58ca9h","tag_id":"ckmvhvwzt001vvcua4pe14shk","_id":"ckmvhvwzx0028vcua869k13hv"},{"post_id":"ckmvhvwz6000dvcuag8gygu6q","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvwzz002cvcuadgy95e54"},{"post_id":"ckmvhvwz6000dvcuag8gygu6q","tag_id":"ckmvhvwzv0022vcuabweu82ic","_id":"ckmvhvwzz002fvcua5zfebg0r"},{"post_id":"ckmvhvwz8000hvcuaevmuglt8","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx01002lvcua6w7r8wsf"},{"post_id":"ckmvhvwz8000hvcuaevmuglt8","tag_id":"ckmvhvwzy002bvcuae1xhfwq5","_id":"ckmvhvx02002ovcuadp7b0imy"},{"post_id":"ckmvhvwz9000jvcua7wb1424c","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx03002svcua6s4i6o6b"},{"post_id":"ckmvhvwz9000jvcua7wb1424c","tag_id":"ckmvhvx00002ivcua1ea2cucf","_id":"ckmvhvx04002vvcua86hqfczb"},{"post_id":"ckmvhvwzb000mvcua49egdi8y","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx05002zvcuahjapanm9"},{"post_id":"ckmvhvwzb000mvcua49egdi8y","tag_id":"ckmvhvx02002pvcua2r84his5","_id":"ckmvhvx060032vcua8azibhgr"},{"post_id":"ckmvhvwzc000pvcua1f8c8fvs","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx070036vcua1v8ucd3s"},{"post_id":"ckmvhvwzc000pvcua1f8c8fvs","tag_id":"ckmvhvx04002wvcuaengxazlq","_id":"ckmvhvx080039vcua7syw467u"},{"post_id":"ckmvhvwzd000tvcuafeqn2vu8","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx09003fvcua9xbcbkbd"},{"post_id":"ckmvhvwzd000tvcuafeqn2vu8","tag_id":"ckmvhvx060035vcuag9yrc41h","_id":"ckmvhvx0a003ivcua1h6kg1jt"},{"post_id":"ckmvhvx0a003kvcua8wu64ss0","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx0c003ovcua1ueo6qfx"},{"post_id":"ckmvhvwzf000zvcuabaja5swd","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx0d003tvcuaczw459yj"},{"post_id":"ckmvhvwzf000zvcuabaja5swd","tag_id":"ckmvhvx0a003jvcua19qq7kqc","_id":"ckmvhvx0e003wvcuaccll1k03"},{"post_id":"ckmvhvwzg0012vcuafvjvdrqn","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx0m004kvcuabd5lh0r6"},{"post_id":"ckmvhvwzg0012vcuafvjvdrqn","tag_id":"ckmvhvx0a003jvcua19qq7kqc","_id":"ckmvhvx0o004ovcuaf4t29lwn"},{"post_id":"ckmvhvwzg0012vcuafvjvdrqn","tag_id":"ckmvhvx0g0043vcua1yd63ua2","_id":"ckmvhvx0p004svcua2mpg97ai"},{"post_id":"ckmvhvwzg0012vcuafvjvdrqn","tag_id":"ckmvhvx0j004bvcuadex8dvog","_id":"ckmvhvx0q004vvcua110h4qny"},{"post_id":"ckmvhvwzk0017vcua1pov8a5j","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx0s004zvcuagvkj6u9h"},{"post_id":"ckmvhvwzk0017vcua1pov8a5j","tag_id":"ckmvhvx0a003jvcua19qq7kqc","_id":"ckmvhvx0t0052vcua3ilb1ejc"},{"post_id":"ckmvhvwzm001avcua6sbw9bji","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx0w005cvcua20jx82zm"},{"post_id":"ckmvhvwzm001avcua6sbw9bji","tag_id":"ckmvhvx0a003jvcua19qq7kqc","_id":"ckmvhvx0x005gvcua4phz6xer"},{"post_id":"ckmvhvwzm001dvcua0uhn3ai4","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx150062vcua3n2demao"},{"post_id":"ckmvhvwzm001dvcua0uhn3ai4","tag_id":"ckmvhvx0a003jvcua19qq7kqc","_id":"ckmvhvx170065vcua9p9h8o1a"},{"post_id":"ckmvhvwzm001dvcua0uhn3ai4","tag_id":"ckmvhvx0z005nvcua2az83ra6","_id":"ckmvhvx180069vcuaa1i4gja5"},{"post_id":"ckmvhvwzm001dvcua0uhn3ai4","tag_id":"ckmvhvx12005tvcua8u8w97da","_id":"ckmvhvx19006cvcua7xk53z6t"},{"post_id":"ckmvhvwzo001ivcua6cx4ht5l","tag_id":"ckmvhvx14005zvcua9ez28nnt","_id":"ckmvhvx1a006gvcuabljwfrj6"},{"post_id":"ckmvhvwzo001ivcua6cx4ht5l","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx1b006jvcuafjxx69j9"},{"post_id":"ckmvhvwzp001lvcuabudtgq5t","tag_id":"ckmvhvx0j004bvcuadex8dvog","_id":"ckmvhvx1g0070vcuagklb61g5"},{"post_id":"ckmvhvwzp001lvcuabudtgq5t","tag_id":"ckmvhvx1c006mvcuabq3vbf46","_id":"ckmvhvx1g0073vcuacq8v6psx"},{"post_id":"ckmvhvwzp001lvcuabudtgq5t","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx1h0076vcuabpgsfe82"},{"post_id":"ckmvhvwzr001pvcuafnr1fuy4","tag_id":"ckmvhvx1f006wvcuad7wx81bi","_id":"ckmvhvx1i007avcua9ou9fmuu"},{"post_id":"ckmvhvwzr001pvcuafnr1fuy4","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx1i007cvcua24rddvtk"},{"post_id":"ckmvhvwzs001svcuaee4khqai","tag_id":"ckmvhvx1h0078vcuah2w411j7","_id":"ckmvhvx1k007hvcuagvu74gez"},{"post_id":"ckmvhvwzs001svcuaee4khqai","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx1k007ivcuabxvh31mn"},{"post_id":"ckmvhvwzt001wvcua3lmi256p","tag_id":"ckmvhvx1j007gvcuaa89p7v8k","_id":"ckmvhvx1l007lvcua9bun7kfc"},{"post_id":"ckmvhvwzt001wvcua3lmi256p","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx1l007mvcuag7au6uqu"},{"post_id":"ckmvhvwzv001zvcuaawjj9jsr","tag_id":"ckmvhvx1f006wvcuad7wx81bi","_id":"ckmvhvx1m007pvcua8yfd2slb"},{"post_id":"ckmvhvwzv001zvcuaawjj9jsr","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx1m007qvcua5a87hk62"},{"post_id":"ckmvhvwzw0023vcuacd3s60j9","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx1n007tvcua0mi9gupn"},{"post_id":"ckmvhvwzw0023vcuacd3s60j9","tag_id":"ckmvhvx1f006wvcuad7wx81bi","_id":"ckmvhvx1n007uvcuae5tv8lw7"},{"post_id":"ckmvhvwzx0026vcuahd5bd3pd","tag_id":"ckmvhvx1n007svcuackv3hdap","_id":"ckmvhvx1o007xvcua6z7e9n6e"},{"post_id":"ckmvhvwzx0026vcuahd5bd3pd","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx1o007yvcua81ouco1e"},{"post_id":"ckmvhvwzx0029vcua34gldbic","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1o0080vcua64umaxlp"},{"post_id":"ckmvhvwzx0029vcua34gldbic","tag_id":"ckmvhvx1n007wvcuahus17dr5","_id":"ckmvhvx1o0081vcuaez8rga81"},{"post_id":"ckmvhvwzz002dvcuahlb68bmf","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1p0083vcua9ebr1jjx"},{"post_id":"ckmvhvwzz002dvcuahlb68bmf","tag_id":"ckmvhvx1o007zvcua4nzbeuji","_id":"ckmvhvx1p0084vcua497z3sfs"},{"post_id":"ckmvhvx00002gvcuafg3o3xuf","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1p0086vcuadz9v0ftl"},{"post_id":"ckmvhvx00002gvcuafg3o3xuf","tag_id":"ckmvhvx1o0082vcua5peq0vnz","_id":"ckmvhvx1p0087vcuaf5h0f8l2"},{"post_id":"ckmvhvx00002jvcua7n86ht72","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1p0089vcua9vlzhuh2"},{"post_id":"ckmvhvx00002jvcua7n86ht72","tag_id":"ckmvhvx1p0085vcuaapqb7tfq","_id":"ckmvhvx1p008avcua33a318jr"},{"post_id":"ckmvhvx01002mvcuadvk38r17","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1q008cvcua4ipshikq"},{"post_id":"ckmvhvx01002mvcuadvk38r17","tag_id":"ckmvhvx1p0088vcuafcipbxkm","_id":"ckmvhvx1q008dvcua6zll5s8p"},{"post_id":"ckmvhvx02002qvcuad71403yv","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1r008hvcuab8b9gk9g"},{"post_id":"ckmvhvx02002qvcuad71403yv","tag_id":"ckmvhvx1q008bvcua65vrhob1","_id":"ckmvhvx1r008ivcua6amj7ns9"},{"post_id":"ckmvhvx02002qvcuad71403yv","tag_id":"ckmvhvx1q008evcua3vt68h6o","_id":"ckmvhvx1r008kvcua32l2fmwh"},{"post_id":"ckmvhvx02002qvcuad71403yv","tag_id":"ckmvhvx1q008fvcua914l0g0m","_id":"ckmvhvx1r008lvcuag412dj48"},{"post_id":"ckmvhvx03002tvcua546948s3","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1r008nvcuabh4oammk"},{"post_id":"ckmvhvx03002tvcua546948s3","tag_id":"ckmvhvx1q008gvcua17rwd380","_id":"ckmvhvx1r008ovcua7z5mhvzf"},{"post_id":"ckmvhvx04002xvcua3n9pgin0","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1s008qvcua3tqo2ygi"},{"post_id":"ckmvhvx04002xvcua3n9pgin0","tag_id":"ckmvhvx1r008jvcuaeo5mfk9m","_id":"ckmvhvx1s008rvcua7zux58mk"},{"post_id":"ckmvhvx050030vcuagun5750q","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1s008svcuagq0a2xc7"},{"post_id":"ckmvhvx050030vcuagun5750q","tag_id":"ckmvhvx1r008mvcuaa86m3ybg","_id":"ckmvhvx1t008uvcuaaw32cs33"},{"post_id":"ckmvhvx060033vcuagv8b246n","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1t008vvcuad77l1ete"},{"post_id":"ckmvhvx060033vcuagv8b246n","tag_id":"ckmvhvx1r008pvcua6mhu6h7m","_id":"ckmvhvx1t008xvcuaay4ib212"},{"post_id":"ckmvhvx070037vcuaexomdxfe","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1t008yvcuacpjd505l"},{"post_id":"ckmvhvx070037vcuaexomdxfe","tag_id":"ckmvhvx1r008pvcua6mhu6h7m","_id":"ckmvhvx1u0090vcuab1tvg91e"},{"post_id":"ckmvhvx08003avcua7t3p7y7h","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1u0091vcuadavi4uo1"},{"post_id":"ckmvhvx08003avcua7t3p7y7h","tag_id":"ckmvhvx1r008pvcua6mhu6h7m","_id":"ckmvhvx1v0093vcua9whg6rf4"},{"post_id":"ckmvhvx09003dvcuacqxmg35o","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1v0094vcua5ime99lp"},{"post_id":"ckmvhvx09003dvcuacqxmg35o","tag_id":"ckmvhvx1r008pvcua6mhu6h7m","_id":"ckmvhvx1v0096vcua9vei793i"},{"post_id":"ckmvhvx09003gvcuadhr5a5w1","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx1v0097vcua7vzd5cit"},{"post_id":"ckmvhvx09003gvcuadhr5a5w1","tag_id":"ckmvhvx1r008pvcua6mhu6h7m","_id":"ckmvhvx1w0099vcua32wm9a34"},{"post_id":"ckmvhvx0b003mvcua4izc7sog","tag_id":"ckmvhvx1v0095vcua1bngh413","_id":"ckmvhvx1w009bvcuaez3q0et7"},{"post_id":"ckmvhvx0b003mvcua4izc7sog","tag_id":"ckmvhvx1v0098vcuahxkx7d6o","_id":"ckmvhvx1w009cvcuaafeq7mid"},{"post_id":"ckmvhvx0c003qvcua5tp11j6p","tag_id":"ckmvhvx1v0095vcua1bngh413","_id":"ckmvhvx1x009fvcua6ctnauv9"},{"post_id":"ckmvhvx0c003qvcua5tp11j6p","tag_id":"ckmvhvx1w009dvcua8i220sz7","_id":"ckmvhvx1x009gvcua5s1y7kfn"},{"post_id":"ckmvhvx0e003uvcua8ond3vxx","tag_id":"ckmvhvx1v0095vcua1bngh413","_id":"ckmvhvx1y009jvcua4agv90y3"},{"post_id":"ckmvhvx0e003uvcua8ond3vxx","tag_id":"ckmvhvx1o0082vcua5peq0vnz","_id":"ckmvhvx1y009kvcua3fff3e87"},{"post_id":"ckmvhvx0e003yvcuah7gu2b2a","tag_id":"ckmvhvx1v0095vcua1bngh413","_id":"ckmvhvx1y009nvcuael0qd64n"},{"post_id":"ckmvhvx0e003yvcuah7gu2b2a","tag_id":"ckmvhvx1y009lvcuaebz4cvmn","_id":"ckmvhvx1y009ovcua34nn572c"},{"post_id":"ckmvhvx0f0040vcua715u04h0","tag_id":"ckmvhvx1v0095vcua1bngh413","_id":"ckmvhvx1z009rvcua8cgg5qd7"},{"post_id":"ckmvhvx0f0040vcua715u04h0","tag_id":"ckmvhvx1y009pvcua9l0o4atq","_id":"ckmvhvx1z009svcua3lg7ckfc"},{"post_id":"ckmvhvx0g0044vcua5ftebjfq","tag_id":"ckmvhvx1z009qvcuaf3kaddk3","_id":"ckmvhvx20009vvcuab9247j20"},{"post_id":"ckmvhvx0g0044vcua5ftebjfq","tag_id":"ckmvhvx1v0095vcua1bngh413","_id":"ckmvhvx20009wvcuacm3mgvsb"},{"post_id":"ckmvhvx0h0046vcua09escl0t","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx20009zvcuacsi6f5cl"},{"post_id":"ckmvhvx0h0046vcua09escl0t","tag_id":"ckmvhvx20009xvcua0lze8az2","_id":"ckmvhvx2000a0vcua2vd050ym"},{"post_id":"ckmvhvx0i0049vcua9iha2jmr","tag_id":"ckmvhvx1v0095vcua1bngh413","_id":"ckmvhvx2100a3vcua81vih1gv"},{"post_id":"ckmvhvx0i0049vcua9iha2jmr","tag_id":"ckmvhvx1y009pvcua9l0o4atq","_id":"ckmvhvx2100a4vcuafsr7fa14"},{"post_id":"ckmvhvx0j004cvcua3uuf6sl8","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2200a7vcuacuxsem2l"},{"post_id":"ckmvhvx0j004cvcua3uuf6sl8","tag_id":"ckmvhvx2100a5vcuaet7ebg7h","_id":"ckmvhvx2200a8vcuadxdsctgl"},{"post_id":"ckmvhvx0k004fvcua1u379sqr","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2300abvcuab9vaa3ut"},{"post_id":"ckmvhvx0k004fvcua1u379sqr","tag_id":"ckmvhvx2200a9vcuagh449cmo","_id":"ckmvhvx2300acvcuagumcb6xa"},{"post_id":"ckmvhvx0m004ivcuahl8jd2vz","tag_id":"ckmvhvx1v0095vcua1bngh413","_id":"ckmvhvx2300afvcuabumaa7h8"},{"post_id":"ckmvhvx0m004ivcuahl8jd2vz","tag_id":"ckmvhvx2300advcua2va47jdr","_id":"ckmvhvx2300agvcuad5jw7udw"},{"post_id":"ckmvhvx0n004mvcuafgir3bsn","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2400ajvcuafs32aurt"},{"post_id":"ckmvhvx0n004mvcuafgir3bsn","tag_id":"ckmvhvx2200a9vcuagh449cmo","_id":"ckmvhvx2400akvcuagf7k9tcw"},{"post_id":"ckmvhvx0o004qvcuaclg70arz","tag_id":"ckmvhvx1f006wvcuad7wx81bi","_id":"ckmvhvx2400amvcua9hws4wz7"},{"post_id":"ckmvhvx0o004qvcuaclg70arz","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx2500anvcuaatf2gezc"},{"post_id":"ckmvhvx0p004tvcuafd2e19ct","tag_id":"ckmvhvx2400alvcua2j2a0vu7","_id":"ckmvhvx2500apvcua057fhmlw"},{"post_id":"ckmvhvx0p004tvcuafd2e19ct","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx2500aqvcuad1oc2nmp"},{"post_id":"ckmvhvx0r004xvcua42xhcny5","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx2500asvcua3aomc4x5"},{"post_id":"ckmvhvx0r004xvcua42xhcny5","tag_id":"ckmvhvx2500aovcua7b679ajg","_id":"ckmvhvx2500atvcua7songpu8"},{"post_id":"ckmvhvx0s0050vcua7wlxfvkz","tag_id":"ckmvhvx2500arvcua62em3tzq","_id":"ckmvhvx2600avvcua5o823h9r"},{"post_id":"ckmvhvx0t0054vcua52jnfdul","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2600ayvcuabmfv7tfn"},{"post_id":"ckmvhvx0t0054vcua52jnfdul","tag_id":"ckmvhvx2600awvcuaeyqn5irz","_id":"ckmvhvx2600azvcua01tz1f3q"},{"post_id":"ckmvhvx0u0057vcua79yoabus","tag_id":"ckmvhvx2600axvcuae7e5292u","_id":"ckmvhvx2700b1vcuabym1ddsq"},{"post_id":"ckmvhvx0v005avcuab4sg9s77","tag_id":"ckmvhvx1v0095vcua1bngh413","_id":"ckmvhvx2700b4vcuacxue779w"},{"post_id":"ckmvhvx0v005avcuab4sg9s77","tag_id":"ckmvhvx2700b2vcuacf7kf9ls","_id":"ckmvhvx2800b5vcua56x80g4z"},{"post_id":"ckmvhvx0w005dvcua03k5a13w","tag_id":"ckmvhvx2600axvcuae7e5292u","_id":"ckmvhvx2800b7vcuah9zba17b"},{"post_id":"ckmvhvx0x005ivcua738nb1un","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx2800b9vcuad2lkh720"},{"post_id":"ckmvhvx0x005ivcua738nb1un","tag_id":"ckmvhvx2800b6vcua46sf7k36","_id":"ckmvhvx2800bavcuacoch7xx2"},{"post_id":"ckmvhvx0y005kvcua14t3cujf","tag_id":"ckmvhvwz10005vcuab31mgo7r","_id":"ckmvhvx2900bcvcuade6j58z6"},{"post_id":"ckmvhvx0y005kvcua14t3cujf","tag_id":"ckmvhvx2800b6vcua46sf7k36","_id":"ckmvhvx2900bdvcua8vmc93jc"},{"post_id":"ckmvhvx10005ovcuaa5up5i5u","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2900bgvcuae9h3gx4a"},{"post_id":"ckmvhvx10005ovcuaa5up5i5u","tag_id":"ckmvhvx2900bevcua1llhf2k8","_id":"ckmvhvx2a00bhvcuag2gi8ipg"},{"post_id":"ckmvhvx11005qvcuac0ki2omg","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2a00bkvcua7vkodcxg"},{"post_id":"ckmvhvx11005qvcuac0ki2omg","tag_id":"ckmvhvx20009xvcua0lze8az2","_id":"ckmvhvx2a00blvcua4oo84h0c"},{"post_id":"ckmvhvx12005uvcuabj3x2z4u","tag_id":"ckmvhvx2600axvcuae7e5292u","_id":"ckmvhvx2b00bnvcuahjuk632x"},{"post_id":"ckmvhvx13005wvcua4u5cg5za","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2c00bqvcuadcfab0bg"},{"post_id":"ckmvhvx13005wvcua4u5cg5za","tag_id":"ckmvhvx2900bevcua1llhf2k8","_id":"ckmvhvx2c00brvcua6flgf9an"},{"post_id":"ckmvhvx140060vcua3tiw1bhz","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2d00bvvcua4zq0bt2n"},{"post_id":"ckmvhvx140060vcua3tiw1bhz","tag_id":"ckmvhvx2c00bsvcuadn71gzat","_id":"ckmvhvx2d00bwvcua7w3t9xdv"},{"post_id":"ckmvhvx140060vcua3tiw1bhz","tag_id":"ckmvhvx2c00btvcuab9stc3hq","_id":"ckmvhvx2e00byvcua19lu9mvv"},{"post_id":"ckmvhvx150063vcua0ih2e2jg","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2f00c1vcua97gd7ieq"},{"post_id":"ckmvhvx150063vcua0ih2e2jg","tag_id":"ckmvhvx2c00bsvcuadn71gzat","_id":"ckmvhvx2f00c2vcua6t1i6hiu"},{"post_id":"ckmvhvx150063vcua0ih2e2jg","tag_id":"ckmvhvx2c00btvcuab9stc3hq","_id":"ckmvhvx2f00c4vcua3as3domv"},{"post_id":"ckmvhvx170066vcua88rj3rn7","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2g00c7vcua9k7b4aty"},{"post_id":"ckmvhvx170066vcua88rj3rn7","tag_id":"ckmvhvx2c00bsvcuadn71gzat","_id":"ckmvhvx2g00c8vcua8l2y69qn"},{"post_id":"ckmvhvx170066vcua88rj3rn7","tag_id":"ckmvhvx2c00btvcuab9stc3hq","_id":"ckmvhvx2g00cavcua3p8jc7v9"},{"post_id":"ckmvhvx18006avcua46je01jw","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2h00cdvcuab8j05ejm"},{"post_id":"ckmvhvx18006avcua46je01jw","tag_id":"ckmvhvx2c00bsvcuadn71gzat","_id":"ckmvhvx2h00cevcua9ahpf5me"},{"post_id":"ckmvhvx18006avcua46je01jw","tag_id":"ckmvhvx2c00btvcuab9stc3hq","_id":"ckmvhvx2h00cgvcuad1w16hb2"},{"post_id":"ckmvhvx19006dvcua30nse3sa","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2i00cjvcua06e7d3wr"},{"post_id":"ckmvhvx19006dvcua30nse3sa","tag_id":"ckmvhvx2c00bsvcuadn71gzat","_id":"ckmvhvx2i00ckvcua5w8pbvxo"},{"post_id":"ckmvhvx19006dvcua30nse3sa","tag_id":"ckmvhvx2c00btvcuab9stc3hq","_id":"ckmvhvx2j00cmvcuah8zebbvg"},{"post_id":"ckmvhvx1a006hvcuaalmd8gfq","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2j00cpvcua5jmd8xh0"},{"post_id":"ckmvhvx1a006hvcuaalmd8gfq","tag_id":"ckmvhvx2c00bsvcuadn71gzat","_id":"ckmvhvx2k00cqvcua5vghdega"},{"post_id":"ckmvhvx1a006hvcuaalmd8gfq","tag_id":"ckmvhvx2c00btvcuab9stc3hq","_id":"ckmvhvx2k00csvcuabn2a2aka"},{"post_id":"ckmvhvx1b006kvcua88cyahq1","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2k00cuvcua9i0ugfot"},{"post_id":"ckmvhvx1b006kvcua88cyahq1","tag_id":"ckmvhvx2k00crvcua3vj6eto7","_id":"ckmvhvx2k00cvvcua8ugderr6"},{"post_id":"ckmvhvx1c006nvcua8m5vf841","tag_id":"ckmvhvx2600axvcuae7e5292u","_id":"ckmvhvx2l00cxvcua427u2c9e"},{"post_id":"ckmvhvx1d006pvcua2tsneoxt","tag_id":"ckmvhvx1f006wvcuad7wx81bi","_id":"ckmvhvx2l00czvcua14pp3b62"},{"post_id":"ckmvhvx1d006pvcua2tsneoxt","tag_id":"ckmvhvx08003cvcuacxdn81zr","_id":"ckmvhvx2l00d0vcua0po11e75"},{"post_id":"ckmvhvx1d006svcuagipr08av","tag_id":"ckmvhvx2700b2vcuacf7kf9ls","_id":"ckmvhvx2m00d2vcuadzoq9h2k"},{"post_id":"ckmvhvx1e006uvcua9sj9f0bp","tag_id":"ckmvhvx2600axvcuae7e5292u","_id":"ckmvhvx2m00d4vcua9v1pe1dw"},{"post_id":"ckmvhvx1f006yvcua1q5v4ivu","tag_id":"ckmvhvx2600axvcuae7e5292u","_id":"ckmvhvx2n00d6vcuaf1nm7epk"},{"post_id":"ckmvhvx1g0071vcua6y4fgy6l","tag_id":"ckmvhvx1z009uvcuag9b7f4c5","_id":"ckmvhvx2n00d8vcua9vqgbtdd"},{"post_id":"ckmvhvx1g0071vcua6y4fgy6l","tag_id":"ckmvhvx20009xvcua0lze8az2","_id":"ckmvhvx2n00d9vcuabkkfcphh"}],"Tag":[{"name":".Net Core","_id":"ckmvhvwz10005vcuab31mgo7r"},{"name":"Cookies","_id":"ckmvhvwz4000bvcuaarod2fzf"},{"name":"Session","_id":"ckmvhvwz8000gvcuafbab1v1k"},{"name":"REST API","_id":"ckmvhvwzd000svcuagoro6afg"},{"name":"Response","_id":"ckmvhvwzi0016vcuaca9801bd"},{"name":"Url 重写","_id":"ckmvhvwzn001gvcua5tkv1g68"},{"name":"SignalR","_id":"ckmvhvwzr001ovcuaeabb6fvr"},{"name":"Web API","_id":"ckmvhvwzt001vvcua4pe14shk"},{"name":"WebSocket","_id":"ckmvhvwzv0022vcuabweu82ic"},{"name":"Middleware","_id":"ckmvhvwzy002bvcuae1xhfwq5"},{"name":"Gzip","_id":"ckmvhvx00002ivcua1ea2cucf"},{"name":"Exception","_id":"ckmvhvx02002pvcua2r84his5"},{"name":"Model","_id":"ckmvhvx04002wvcuaengxazlq"},{"name":"Filter","_id":"ckmvhvx060035vcuag9yrc41h"},{"name":"C#","_id":"ckmvhvx08003cvcuacxdn81zr"},{"name":"摘录","_id":"ckmvhvx0a003jvcua19qq7kqc"},{"name":"解构器","_id":"ckmvhvx0g0043vcua1yd63ua2"},{"name":"委托","_id":"ckmvhvx0j004bvcuadex8dvog"},{"name":"异常类型","_id":"ckmvhvx0z005nvcua2az83ra6"},{"name":"重载运算符","_id":"ckmvhvx12005tvcua8u8w97da"},{"name":"加密","_id":"ckmvhvx14005zvcua9ez28nnt"},{"name":"winform","_id":"ckmvhvx1c006mvcuabq3vbf46"},{"name":"基础","_id":"ckmvhvx1f006wvcuad7wx81bi"},{"name":"邮件","_id":"ckmvhvx1h0078vcuah2w411j7"},{"name":"Sqlite","_id":"ckmvhvx1j007gvcuaa89p7v8k"},{"name":"复制对象","_id":"ckmvhvx1n007svcuackv3hdap"},{"name":"EF Core","_id":"ckmvhvx1n007wvcuahus17dr5"},{"name":"IdentityServer4","_id":"ckmvhvx1o007zvcua4nzbeuji"},{"name":"MVC","_id":"ckmvhvx1o0082vcua5peq0vnz"},{"name":"Ocelot","_id":"ckmvhvx1p0085vcuaapqb7tfq"},{"name":"RSA算法","_id":"ckmvhvx1p0088vcuafcipbxkm"},{"name":"Swagger","_id":"ckmvhvx1q008bvcua65vrhob1"},{"name":"框架","_id":"ckmvhvx1q008evcua3vt68h6o"},{"name":"Dapper","_id":"ckmvhvx1q008fvcua914l0g0m"},{"name":"WebApi","_id":"ckmvhvx1q008gvcua17rwd380"},{"name":"NLog","_id":"ckmvhvx1r008jvcuaeo5mfk9m"},{"name":"Autofac","_id":"ckmvhvx1r008mvcuaa86m3ybg"},{"name":"设计模式","_id":"ckmvhvx1r008pvcua6mhu6h7m"},{"name":".Net","_id":"ckmvhvx1v0095vcua1bngh413"},{"name":"Linq","_id":"ckmvhvx1v0098vcuahxkx7d6o"},{"name":"Log4net","_id":"ckmvhvx1w009dvcua8i220sz7"},{"name":"Spider","_id":"ckmvhvx1y009lvcuaebz4cvmn"},{"name":"WPF","_id":"ckmvhvx1y009pvcua9l0o4atq"},{"name":"WCF","_id":"ckmvhvx1z009qvcuaf3kaddk3"},{"name":"读书笔记","_id":"ckmvhvx1z009uvcuag9b7f4c5"},{"name":"万维钢","_id":"ckmvhvx20009xvcua0lze8az2"},{"name":"亲密关系","_id":"ckmvhvx2100a5vcuaet7ebg7h"},{"name":"人际交往","_id":"ckmvhvx2200a9vcuagh449cmo"},{"name":"Web Api","_id":"ckmvhvx2300advcua2va47jdr"},{"name":"复制","_id":"ckmvhvx2400alvcua2j2a0vu7"},{"name":"Vue.js","_id":"ckmvhvx2500aovcua7b679ajg"},{"name":"API","_id":"ckmvhvx2500arvcua62em3tzq"},{"name":"自我","_id":"ckmvhvx2600awvcuaeyqn5irz"},{"name":"随笔","_id":"ckmvhvx2600axvcuae7e5292u"},{"name":"架构","_id":"ckmvhvx2700b2vcuacf7kf9ls"},{"name":"微服务","_id":"ckmvhvx2800b6vcua46sf7k36"},{"name":"习惯","_id":"ckmvhvx2900bevcua1llhf2k8"},{"name":"哲学","_id":"ckmvhvx2c00bsvcuadn71gzat"},{"name":"直觉泵","_id":"ckmvhvx2c00btvcuab9stc3hq"},{"name":"罗振宇","_id":"ckmvhvx2k00crvcua3vj6eto7"}]}}