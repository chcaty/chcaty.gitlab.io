{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/header.jpg","path":"images/header.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/LICENSE","path":"lib/Han/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/README.md","path":"lib/Han/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/custom/tagcanvas.js","path":"js/custom/tagcanvas.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1577721462607},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1577721462607},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1577721462607},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1577721462608},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1577721462609},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1577721462609},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1577721462609},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1577721462609},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1577721462609},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1577721462609},{"_id":"themes/next/bower.json","hash":"38a620a57d97340e0eea0d7ce5675c7974ac3da5","modified":1577721462610},{"_id":"themes/next/package.json","hash":"1a702fd63a25285413fbdfca7070c4ce6e7b35fa","modified":1577852771362},{"_id":"themes/next/README.md","hash":"eafc2f2e1d966e27835449970bc60f0f7d5a8f0b","modified":1577721462610},{"_id":"source/CNAME","hash":"0051c207c8bd6817f56368e60906362272b00bec","modified":1553702055014},{"_id":"themes/next/_config.yml","hash":"b293d6d1d01044e4be4c112359eba1ecd9dfb9b0","modified":1578982510827},{"_id":"themes/next/docs/DATA-FILES.md","hash":"a5b89b34c1a76bef60f650fdcfae08ccedc4a4a6","modified":1577721462611},{"_id":"themes/next/docs/AUTHORS.md","hash":"f04132472dbc25b9c1202d4cb82a74aea7e6ca10","modified":1577721462611},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1577721462613},{"_id":"themes/next/package-lock.json","hash":"0761f739eba4670301b3a650c57f9602524babbd","modified":1577852771441},{"_id":"themes/next/languages/default.yml","hash":"2e52aa06eedfdfbb90ab0e8792968721aac412fb","modified":1577721462614},{"_id":"themes/next/languages/de.yml","hash":"b8962e3a680530c331c96b06a41a519e7eca9988","modified":1577721462614},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1577721462611},{"_id":"themes/next/languages/en.yml","hash":"4e6b8699dca27936b2f784c7680f1e4fab5b4c5b","modified":1577721462614},{"_id":"themes/next/languages/fr-FR.yml","hash":"e8cf4d66e919f3c1672b8ca26827185e774c4439","modified":1577721462614},{"_id":"themes/next/languages/id.yml","hash":"d0c2f8e90b047db16491a1a5c8f288d0e7244ed3","modified":1577721462614},{"_id":"themes/next/languages/it.yml","hash":"ac109a258ba8a58d07ece728239b093e132feb82","modified":1577721462614},{"_id":"themes/next/languages/ja.yml","hash":"640f0886603b8ed850a2ce81240a414c0cdda997","modified":1577721462615},{"_id":"themes/next/languages/ko.yml","hash":"edf0eeebb6d713c1f7e6b9751b19e8d0b13de4ee","modified":1577721462615},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1577721462615},{"_id":"themes/next/languages/pt-BR.yml","hash":"379591d355f7a1f16447635a0c154bad655db06e","modified":1577721462615},{"_id":"themes/next/languages/pt.yml","hash":"ef68c52c85fa6c1aa0d53586794f8afd0d3a99ae","modified":1577721462616},{"_id":"themes/next/languages/ru.yml","hash":"06e92838a38696f6a519caee12e70ca7898eaea4","modified":1577721462616},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1577721462616},{"_id":"themes/next/languages/zh-Hans.yml","hash":"aec7be889bed2c8eb9c347b94939f67ca284ac9f","modified":1577721462616},{"_id":"themes/next/languages/zh-hk.yml","hash":"6f01b26859d6f3fa86ae346c03f2cff86cdbdc63","modified":1577721462616},{"_id":"themes/next/languages/zh-tw.yml","hash":"85a434a7ed860fed58dc748cba2a857ad6878338","modified":1577721462616},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1577721462631},{"_id":"themes/next/layout/_layout.swig","hash":"484a5effad24e96d577af9a12398fc3dae87a733","modified":1577721462617},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1577721462631},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1577721462631},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1577721462631},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1577721462632},{"_id":"themes/next/layout/page.swig","hash":"8a5e37ad24271eb9c68e74a327435d3f44982cfc","modified":1578380492184},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"39b2a74e15555a3333c05ca6ea259ccb683fa96f","modified":1577721462611},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1577721462610},{"_id":"themes/next/docs/INSTALLATION.md","hash":"90565973c39b1c6166317740df2685a1b9961c25","modified":1577721462611},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1577721462632},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1577721462633},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1577721462669},{"_id":"source/_posts/Asp-Net-Core-Cookies和Session.md","hash":"f23bab68bf44c020e81feb65f3ba6ab2b441a1c0","modified":1562687341295},{"_id":"source/_posts/Asp-Net-Core-REST-API基础.md","hash":"bbe3ac7f945838da7ee9bf81c2395f248ca9e3ab","modified":1528448024295},{"_id":"source/_posts/Asp-Net-Core-SignalR.md","hash":"9c15694a99f6a789d54c33ba1fda65da495ecb08","modified":1564408736560},{"_id":"source/_posts/Asp-Net-Core-Response快取.md","hash":"ad71acb09ac3b6786ca7aba921cccf07381d2dc5","modified":1565420618041},{"_id":"source/_posts/Asp-Net-Core-Url 重写.md","hash":"14772fb16a0cdd179b96d0fc1e5f084ba528f2b4","modified":1561478072151},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1577721462669},{"_id":"source/_posts/Asp-Net-Core-Web-API的先进架构.md","hash":"c3805d04ef4bc5d68ce6edc452abe9f5f174d15a","modified":1561477720543},{"_id":"source/_posts/Asp-Net-Core-中间件.md","hash":"b73ee1c1326512bf7d6c2e1e2e69f5b3e2d4f6b1","modified":1561477724485},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1577721462669},{"_id":"source/_posts/Asp-Net-Core-压缩封包.md","hash":"8577e39c6f309c19a773b578b960f017078bc95e","modified":1565420841011},{"_id":"source/_posts/Asp-Net-Core-WebSocket.md","hash":"642f0e8d938cb71efe7a9aa50189337d8e34cb98","modified":1561477298871},{"_id":"source/_posts/Asp-Net-Core-异常处理.md","hash":"a60ccbb86e9e60d14c6af4e76c120a3960288203","modified":1564408687060},{"_id":"source/_posts/Asp-Net-Core-模型绑定.md","hash":"a8f5d06b638df4201eb2789567fe511755c59107","modified":1562687442648},{"_id":"source/_posts/Asp-Net-Core中使用Session.md","hash":"a78da1e7c3a03edec1456051aba307f5f0444d0f","modified":1528215552738},{"_id":"source/_posts/Asp-Net-Core-过滤器.md","hash":"f35544c9ad138006ef93a39de091055138e74145","modified":1562687760622},{"_id":"source/_posts/CSharp-7.0-核心技术指南摘录(一).md","hash":"61f897680c8c0d1249cce222096ad42968ce2dcf","modified":1565970114921},{"_id":"source/_posts/CSharp-7.0-核心技术指南摘录(二).md","hash":"b71b50578f68ae1e39e865e65cbb8b2036f75d68","modified":1565970120460},{"_id":"source/_posts/CSharp-7.0-核心技术指南摘录(三).md","hash":"7f9b95baeb55551b2c9335acefa7117be39bbca9","modified":1566488519026},{"_id":"source/_posts/CSharp-7.0-核心技术指南摘录(五) .md","hash":"fc495b1e4bb51f763aca5ac744c0c821f917a13b","modified":1572670176228},{"_id":"source/_posts/CSharp-7.0-核心技术指南摘录(四).md","hash":"cb921013c917e77a3513aa4dd37e1f2ccdf0fbff","modified":1567094805822},{"_id":"source/_posts/CSharp-Math类.md","hash":"d7f39dec24f2b8e2608a3b7200241d63746aaa37","modified":1554222488449},{"_id":"source/_posts/CSharp-Aes加密.md","hash":"6564c596eb18e9f751d3774444285eaf17fba525","modified":1558966473804},{"_id":"source/_posts/CSharp-发送邮件.md","hash":"5ef825f0e0f7fd340144f4abd2b4c03da65e8b87","modified":1559146479721},{"_id":"source/_posts/CSharp-利用委托解决跨线程操作控件产生的问题.md","hash":"6171bc6b47fd326e4c7c80b84b38308b7d4b7d44","modified":1554216313654},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1577721462632},{"_id":"source/_posts/CSharp-在Winform中使用Sqlite.md","hash":"875ff275e96f9cbd485e2f19faf66cac31ccadaa","modified":1554216327624},{"_id":"source/_posts/CSharp-字符串处理.md","hash":"a69fd5fca8e6deff0a5bb43cfbc10ab0140fe3b3","modified":1554391655883},{"_id":"source/_posts/CSharp-常用关键字和基础类.md","hash":"a9a80ee8518b9408a5bc54e4bb30219027c05753","modified":1554216306065},{"_id":"source/_posts/CSharp-通过表达式树复制对象.md","hash":"025dc907128ed02053012ca39dc38d97bf6cdd9a","modified":1554216320409},{"_id":"source/_posts/EF-Core实现DB-First和Code-First.md","hash":"49b1acbda1688682824f625a0be8e246ec3612c9","modified":1528639915728},{"_id":"source/_posts/Net-Core-MVC-三层架构框架.md","hash":"9341f7ae2810def560ca3df1a87f09c084af1db4","modified":1520778006855},{"_id":"source/_posts/IdentityServer4-ClientCredential模式.md","hash":"a1132eaccb90ccb3af6bc0798f647a250fd4c93c","modified":1577722441581},{"_id":"source/_posts/Net-Core-Ocelot.md","hash":"01e450c44e49390c67578ff69f064824460c8d46","modified":1522331258643},{"_id":"source/_posts/Net-Core-使用swagger进行API接口文档管理.md","hash":"f61704078d6c736f0213c78e68fdd4fe9a8778f0","modified":1520784054318},{"_id":"source/_posts/Net-Core-修改IOC为Autofac.md","hash":"b77403a4dffd4e3dfcaaeda9a51cec8197152282","modified":1521251275793},{"_id":"source/_posts/Net-Core-从零开始搭建框架(一).md","hash":"3ba178f2588683b74462bfac3528922b0d1536fe","modified":1550801515844},{"_id":"source/_posts/Net-Core-使用日志NLog.md","hash":"71076bdfe5004cc3cbc16c13a2d729fb7dbef113","modified":1521208841988},{"_id":"source/_posts/Net-Core-单例模式.md","hash":"ba19a5447c25f1cef2319ce35a7719c996c24c6e","modified":1528723054833},{"_id":"source/_posts/Net-Core-RSA-RSA2算法.md","hash":"f66bb6d9939d7a346e19a92a608962f9aa9cbcd3","modified":1520522829502},{"_id":"source/_posts/Net-Core-简单工厂和工厂方法模式.md","hash":"1a46c5f700baa0ce9f9383333ca803ae28f731b6","modified":1523717547210},{"_id":"source/_posts/Net-Core-抽象工厂模式.md","hash":"acdf5fb7a48dd79eb78b8120613718f5321e6d1b","modified":1523884282253},{"_id":"source/_posts/Net-Core-观察者模式.md","hash":"2a4b761c1b03f657ecf277764cc1efbe4b38e2a1","modified":1522939910195},{"_id":"source/_posts/Net-Core-装饰模式.md","hash":"516995d39eb8cb81d105ccd3ac0eeb44f00f7c34","modified":1522943300015},{"_id":"source/_posts/Net-Core-配置与自动更新.md","hash":"b1b3d029abe083676e5e8fe9b809dbc94daa4047","modified":1520522434079},{"_id":"source/_posts/Net-Log4net封装.md","hash":"b56ee5821694dc6f22825dd38ffb8297cd09a7a7","modified":1520522444896},{"_id":"source/_posts/Net-MVC-三层架构框架.md","hash":"353202ffd6cab847d762269a0578bea835dcd64f","modified":1520777965316},{"_id":"source/_posts/亲密关系-通往灵魂的桥梁-无拘无束的关系.md","hash":"effd9765b06c73ac2f35dd3869076117c61e345a","modified":1583829871318},{"_id":"source/_posts/人性的弱点-如何赢得友谊并影响他人.md","hash":"f632be522ad60bdf37b14271b2155ce7dc44f7cd","modified":1583935851403},{"_id":"source/_posts/Net-Linq.md","hash":"c8e99c1ca3d7894aac48d072733f82ecfd2ffc1a","modified":1563286023134},{"_id":"source/_posts/Wcf创建http和Webservice接口.md","hash":"5df5e23f3084070e740db1071cd344a2397d2133","modified":1520616476538},{"_id":"source/_posts/Net-爬虫封装.md","hash":"50eda8eed634847f80eec3505945700849b8b070","modified":1520522463447},{"_id":"source/_posts/值类型与引用类型.md","hash":"aacc27a153521c5e6f4e9ce1c330f9847d82fda3","modified":1553788955767},{"_id":"source/_posts/使用WebApiClient请求和管理Restful-Api.md","hash":"853d061f1e1584882ea97268a9c0744690d7ef56","modified":1520694788968},{"_id":"source/_posts/夏洛特烦恼观影随想.md","hash":"2ca737c9f416e0abc774b10493ae827b7195421b","modified":1573399317703},{"_id":"source/_posts/关于Winform窗体的快速复制.md","hash":"dc91d3af30789151d600f3ed7634385566d059de","modified":1553440565139},{"_id":"source/_posts/去当你想当的任何人吧-寻找自我的魔法.md","hash":"06691a5d7e762ca695414c6ced12e7c2abfe2be0","modified":1583932849247},{"_id":"source/_posts/关于毕业设计的整理.md","hash":"8d516e5a5046c6100576aeb38a1527e56b703f91","modified":1528441017901},{"_id":"source/_posts/关于选择聚会地点的软件.md","hash":"fa720b09285c0bba087e8933055832c380d7e306","modified":1552836409693},{"_id":"source/_posts/多种仓储模式.md","hash":"3c059f419e023a7ba2e97ba1543e2cd02b9b0be4","modified":1551706670358},{"_id":"source/_posts/微服务-Consul学习(二).md","hash":"6a137dbd2e06341a98c8d40350cfa4c15646e345","modified":1552320512188},{"_id":"source/_posts/小猫的胡言乱语.md","hash":"79ee049a3ac526773055b968a1af5313eedd0926","modified":1563028653495},{"_id":"source/_posts/微服务-Consul学习.md","hash":"75536c9af4a2b75ff93833caa3624927575454b8","modified":1552059077047},{"_id":"source/_posts/直觉泵-关于意义和内容思考工具(三).md","hash":"0db6831c03faa5d3d8f781f36b9e5ea56608d93d","modified":1578497804888},{"_id":"source/_posts/杂事随想.md","hash":"e22474dc8d180b2b7403991d63300fbfd091925e","modified":1553702798452},{"_id":"source/_posts/掌握习惯-原子习惯-细微改变带来巨大成就的实证法则.md","hash":"cd479695622fbbb8874b3bc79d3385824910440f","modified":1583762447172},{"_id":"source/_posts/直觉泵-关于意义和内容思考工具.md","hash":"15f2b25113ff73f23474aae66bb21bedc62c6dac","modified":1578411040565},{"_id":"source/_posts/掌握习惯-原子习惯-细微改变带来巨大成就的实证法则-二.md","hash":"069249b969a866cf8ebb32367fd5c56b50af2e9e","modified":1583807300422},{"_id":"source/_posts/直觉泵-通用思考工具.md","hash":"c1226d51117df1e33fc692b3cfa76a406c6dfe6f","modified":1578313840646},{"_id":"source/_posts/直觉泵-通用思考工具(二).md","hash":"3e7f7c148779c89e4a5cb2588186f3db466b1ea1","modified":1578313856219},{"_id":"source/_posts/类型基础.md","hash":"5c882ae4bfce908a3fde4cafe4cb549a7f527794","modified":1553613196497},{"_id":"source/_posts/聚会随想.md","hash":"9756f4c9f05163275429296ef347e3e9ea9d4df3","modified":1553702717886},{"_id":"source/_posts/贫血模型和充血模型.md","hash":"c4363a5150b4a9ffecc4b0570cf2aad8752f0977","modified":1520522481839},{"_id":"source/_posts/直觉泵-关于意义和内容思考工具(二).md","hash":"a89e9f2cebf7bac3ce041d5fab452aab03fd12f6","modified":1578410948358},{"_id":"source/categories/index.md","hash":"2f72a13ce0a6749f91db2a905cc6a16a3b9510ca","modified":1520274530059},{"_id":"source/tags/index.md","hash":"cccdd5231dadb034f5a857595b8be9b48606ab03","modified":1520273954802},{"_id":"themes/next/layout/tag-love.swig","hash":"9953c11e5e921ee2a1b0c27ab227872ead408f6a","modified":1578379982040},{"_id":"source/_posts/直觉泵-关于计算机的思考工具.md","hash":"4a048feeed3d775bd94cdda6adf6c57bf2658f7f","modified":1583725301242},{"_id":"source/_posts/随笔-断舍离.md","hash":"12819bc76152b12291d71d573fd9059de86fed4f","modified":1583797391544},{"_id":"source/about/index.md","hash":"d116fe6586c77c17760bbac5cab3d85d4fa2f322","modified":1583832162727},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577721462654},{"_id":"themes/next/docs/cn/DATA-FILES.md","hash":"9d1efb47c78969e9b1e5a2374d03ad9ea6e8b738","modified":1577721462612},{"_id":"themes/next/docs/cn/INSTALLATION.md","hash":"eb488ed645c48fe3436b9dcd6c719ec38295bd41","modified":1577721462612},{"_id":"themes/next/docs/cn/README.md","hash":"54fbf2aa610f66b77dca4325bf626bb45b13605b","modified":1577721462612},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"3afd4abd7a25d78951a7e027b8c72ba817991c47","modified":1577721462613},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"6f10fbc0aa0bb65a8eaeb0a9454aa280f1d84d77","modified":1577721462613},{"_id":"themes/next/docs/cn/UPDATE-FROM-5.1.X.md","hash":"9e41dad049021f3c0d72fca38f47a689fa015eb8","modified":1577721462612},{"_id":"themes/next/docs/ru/README.md","hash":"56454783898c08eccfff3a8c856e0b40728ba70b","modified":1577721462613},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"6600ec3ec8b251232dc6a1639cbbbf36068ea8f6","modified":1577721462613},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1577721462617},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1577852996835},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"393465b230cd26372de45ff587d47acaf234cddb","modified":1578281926849},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1577721462617},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1577721462617},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1577721462618},{"_id":"themes/next/layout/_macro/post.swig","hash":"00b82085c432418290be5ca32bfb8880e73b6438","modified":1578282094135},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1577721462619},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1577721462619},{"_id":"themes/next/layout/_partials/footer.swig","hash":"90e5cf2cedb2657d8e8092b470fef9e6290d9828","modified":1577721462619},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1577721462618},{"_id":"themes/next/layout/_partials/head.swig","hash":"24930a298cf6f10ac5f732c1bc8a4c6b91993b07","modified":1577721462619},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1577721462620},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1577721462621},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1577721462620},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1577721462621},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1577721462623},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1577721462622},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1577721462628},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1577721462628},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1577721462629},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"b48c992ba130914713566a5fe3602c57e0f1ca32","modified":1577721462623},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1577721462629},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1577721462628},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1577721462629},{"_id":"themes/next/node_modules/.bin/atob","hash":"e71ce7590696a03b62d20c3d67472d2dcab3d9a8","modified":1577852771084},{"_id":"themes/next/node_modules/.bin/atob.ps1","hash":"0f2918b92ee5afb66fd1cf739eb8e1099486f51b","modified":1577852771084},{"_id":"themes/next/node_modules/.bin/bunyan","hash":"662763bf004b677599b08394c9e58429fe44b778","modified":1577852771150},{"_id":"themes/next/node_modules/.bin/atob.cmd","hash":"c28a97fde9a77b9c16ff21c501a8c2b307c16db5","modified":1577852771084},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1577721462629},{"_id":"themes/next/node_modules/.bin/bunyan.ps1","hash":"085da5656d0ae16e9d30496cddbb0721f257168b","modified":1577852771150},{"_id":"themes/next/node_modules/.bin/mkdirp","hash":"8ffa7d8d9d5587f5bd1b7011fbef7509b8ae0882","modified":1577852771097},{"_id":"themes/next/node_modules/.bin/mkdirp.ps1","hash":"55f51ecf02ef63087433cd07b0b4d2ce942144a2","modified":1577852771097},{"_id":"themes/next/node_modules/.bin/bunyan.cmd","hash":"4a576f1a6f69bbb2d820dff74dd8c7cb64acb93e","modified":1577852771150},{"_id":"themes/next/node_modules/.bin/ncp","hash":"7346539b619c653ba1865631b6f0fda19eb09b6b","modified":1577852771107},{"_id":"themes/next/node_modules/.bin/mkdirp.cmd","hash":"38cae7635b8dcccf35dd446f8ae47bf7ea6ea689","modified":1577852771097},{"_id":"themes/next/node_modules/.bin/ncp.ps1","hash":"7a1e17b1b67f66b51aea7082718f95bc6769fc21","modified":1577852771107},{"_id":"themes/next/node_modules/.bin/rimraf","hash":"fc55a5d64f0d0b564ebe5cec1004807d1864eee8","modified":1577852771128},{"_id":"themes/next/node_modules/ansi-regex/index.js","hash":"8e2fe7fc814a39d590cf170ccc989a166d505c1e","modified":1484362985000},{"_id":"themes/next/node_modules/.bin/ncp.cmd","hash":"993e0e98b1bd3886dcb6ef5fd75efc83bbed3182","modified":1577852771107},{"_id":"themes/next/node_modules/.bin/rimraf.cmd","hash":"1bbebc18aef5511b2317742888fe3e323522144e","modified":1577852771128},{"_id":"themes/next/node_modules/.bin/rimraf.ps1","hash":"dbf16ea1ec90024d4c9fdfcfe9d7c782a3b26afa","modified":1577852771128},{"_id":"themes/next/node_modules/ansi-regex/package.json","hash":"3a8e44a2c809c37386f3bf3107fd480c59374ecf","modified":1577852768000},{"_id":"themes/next/node_modules/ansi-regex/readme.md","hash":"79b8bd5d8af7fd6d79dcb7c24b3f2e03e1d2a029","modified":1484362985000},{"_id":"themes/next/node_modules/ansi-styles/index.js","hash":"7e89eee4c6711e897597268d129348b685cc6548","modified":1459197140000},{"_id":"themes/next/node_modules/ansi-styles/package.json","hash":"9b8102215ed94695f575eb6edc0c47dd85287731","modified":1577852768000},{"_id":"themes/next/node_modules/ansi-styles/readme.md","hash":"b12348b9ea14a18112719b1aad4cdf7e52f4b35f","modified":1459197140000},{"_id":"themes/next/node_modules/anymatch/README.md","hash":"5d0f28e372b715059e47b1df610242b5fcb5d9a6","modified":1487779603000},{"_id":"themes/next/node_modules/anymatch/LICENSE","hash":"2faff6eb900a1f252dd5628fa007d8df033d9717","modified":1426989009000},{"_id":"themes/next/node_modules/ansi-regex/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1465490702000},{"_id":"themes/next/node_modules/anymatch/index.js","hash":"b620c3308003baba08968dd99afcdddde2310192","modified":1501171052000},{"_id":"themes/next/node_modules/ansi-styles/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/anymatch/package.json","hash":"6509b4c0efa97a0cce3b26e015b1c91d3b17ba3b","modified":1577852769426},{"_id":"themes/next/node_modules/arr-diff/index.js","hash":"b0af4d581bd0e4f370526dfaee3d2a8daf45880c","modified":1449375115000},{"_id":"themes/next/node_modules/arr-diff/README.md","hash":"aea1c9d09e3e4836b20459900490582a913ba318","modified":1449375940000},{"_id":"themes/next/node_modules/arr-diff/package.json","hash":"d9bda2cabaad3f7e4e74d191f6e7802dbe78191c","modified":1577852768000},{"_id":"themes/next/node_modules/arr-flatten/index.js","hash":"c5baefc4ecbfd02905ca91eba96d79b627adde7d","modified":1499280620000},{"_id":"themes/next/node_modules/arr-flatten/README.md","hash":"b31b8e7fef4196def2095fec4bcd91f801577505","modified":1492168954000},{"_id":"themes/next/node_modules/arr-flatten/package.json","hash":"c358c797ef5ddaa5ff522897f3690f533fd64b1f","modified":1577852768001},{"_id":"themes/next/node_modules/arr-union/README.md","hash":"c7194b34f47f6d1d7fca0d9c5b143c78ec7c9e65","modified":1456213450000},{"_id":"themes/next/node_modules/arr-union/index.js","hash":"8286edb0b683ebdb859826b498629bc8bb710c04","modified":1456195991000},{"_id":"themes/next/node_modules/arr-diff/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1440300569000},{"_id":"themes/next/node_modules/array-unique/index.js","hash":"1826adc4c19e8d8bcf421d342ae7e2db52f69bb6","modified":1427255160000},{"_id":"themes/next/node_modules/arr-flatten/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1499280545000},{"_id":"themes/next/node_modules/arr-union/package.json","hash":"74d777b91e71946442ad41bd5cf899d48f104e32","modified":1577852768000},{"_id":"themes/next/node_modules/arr-union/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1456196056000},{"_id":"themes/next/node_modules/array-unique/package.json","hash":"7b4689a973142e3f732032971937e9c9906cc233","modified":1577852768001},{"_id":"themes/next/node_modules/array-unique/README.md","hash":"c469edac074366095833e9e37da13d111df44bd7","modified":1427255211000},{"_id":"themes/next/node_modules/assign-symbols/README.md","hash":"90b5569292d95d032b22b9b06e398817c9cbbb52","modified":1513722651000},{"_id":"themes/next/node_modules/assign-symbols/index.js","hash":"2c8f8f3970a3673c2197645c915936fb487e70f1","modified":1513722651000},{"_id":"themes/next/node_modules/assign-symbols/package.json","hash":"fba3269323d3e1f945545540a83bf4c7f80b8ffe","modified":1577852768000},{"_id":"themes/next/node_modules/async-each/README.md","hash":"9062eb5d3c7875edc5b4815aee09e83d60a1e6a9","modified":499162500000},{"_id":"themes/next/node_modules/array-unique/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1427255160000},{"_id":"themes/next/node_modules/async-each/index.js","hash":"1e79795685be01a4dc56f83c40e2f62bf8bbd068","modified":499162500000},{"_id":"themes/next/node_modules/async-each/package.json","hash":"1006be0e6f9bf7fd3156a7164a9e8ab87ef723d9","modified":1577852768001},{"_id":"themes/next/node_modules/atob/bower.json","hash":"c75fcb7b5d4243cfcfb426ea0253ea863eefa7ab","modified":499162500000},{"_id":"themes/next/node_modules/assign-symbols/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1513722651000},{"_id":"themes/next/node_modules/atob/node-atob.js","hash":"ebf0e76a56249e25eaca470356ed0ed031fc5434","modified":499162500000},{"_id":"themes/next/node_modules/atob/README.md","hash":"af9e1905e383e26783252ce709e99b559c6e77bb","modified":499162500000},{"_id":"themes/next/node_modules/atob/test.js","hash":"bfba58c33615cb458569986509f9cc4e90f1a130","modified":499162500000},{"_id":"themes/next/node_modules/atob/browser-atob.js","hash":"6d9d9e829b6b7b07511b206c3c5caa8211596659","modified":499162500000},{"_id":"themes/next/node_modules/atob/LICENSE","hash":"1ffda37a0c34d7e63367be5d4a7f6291f9636e2d","modified":499162500000},{"_id":"themes/next/node_modules/atob/package.json","hash":"0fc099f644e6f7520cce853a6247864cf21ceccc","modified":1577852768069},{"_id":"themes/next/node_modules/atob/LICENSE.DOCS","hash":"8f545dc92cfddaf46764df9a77825bd3db01df11","modified":499162500000},{"_id":"themes/next/node_modules/balanced-match/LICENSE.md","hash":"09013c002fbdd686da2ec13c5a6d014f0a294ba9","modified":1497251889000},{"_id":"themes/next/node_modules/balanced-match/README.md","hash":"1386baac658274264e12701b085143357d817bb1","modified":1497251889000},{"_id":"themes/next/node_modules/balanced-match/package.json","hash":"042df74480654d897bd450db47e809044cc353de","modified":1577852768001},{"_id":"themes/next/node_modules/balanced-match/index.js","hash":"2715b99298649413a681212f3220b1fd0bee0309","modified":1497251889000},{"_id":"themes/next/node_modules/base/README.md","hash":"de2f92cc208dd61762ccf3e99f2d85f35a595748","modified":1504834438000},{"_id":"themes/next/node_modules/balanced-match/.npmignore","hash":"bf3481c896126bd5395e5095c994fb82c9e4fa8a","modified":1497251889000},{"_id":"themes/next/node_modules/base/index.js","hash":"9e3c1a75c1967687d7cbfdf038ec6f0666ae328e","modified":1504834174000},{"_id":"themes/next/node_modules/base/package.json","hash":"d7f7c2dad42dece60d9df69681eb9a3d52999285","modified":1577852768925},{"_id":"themes/next/node_modules/binary-extensions/binary-extensions.json","hash":"6dbc6d8ba616c8bc5149e28b6e15f8488b09fcc3","modified":499162500000},{"_id":"themes/next/node_modules/binary-extensions/package.json","hash":"02a3b01cbcac20354a8453c280e3238f81710c47","modified":1577852768001},{"_id":"themes/next/node_modules/bluebird/changelog.md","hash":"bc6df7caea3b83fa361fa0a96c9b34c09465a93a","modified":499162500000},{"_id":"themes/next/node_modules/binary-extensions/readme.md","hash":"a876c21b02fbdb35ceaff5d5b54619e74d1fb5fb","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/README.md","hash":"e3ec3eabcd057c8d1b4c7242eb464e0d026175fd","modified":499162500000},{"_id":"themes/next/node_modules/base/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1504833753000},{"_id":"themes/next/node_modules/bluebird/LICENSE","hash":"1666d1c772864f9a81c15c8aecca0307a658e648","modified":499162500000},{"_id":"themes/next/node_modules/binary-extensions/license","hash":"5aaf48196ddd4d007a3067aa7f30303ca8e4b29c","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/package.json","hash":"8795da163040504d52b0db63fb4ae03f01dbe8ea","modified":1577852768001},{"_id":"themes/next/node_modules/brace-expansion/index.js","hash":"a2f937621d39c20ce582f697c3e4273d1e14b2e0","modified":1518169988000},{"_id":"themes/next/node_modules/brace-expansion/package.json","hash":"982d94a61a686d5231a70fc9c6f19ece4c4df808","modified":1577852768001},{"_id":"themes/next/node_modules/brace-expansion/README.md","hash":"61dcf7b367d852a36fbb50de9824ec92edfa2a5a","modified":1518248525000},{"_id":"themes/next/node_modules/braces/README.md","hash":"5d8b9eba6236008531040cf7a3ae36199bba4241","modified":1463843571000},{"_id":"themes/next/node_modules/braces/index.js","hash":"68b2876bd7c9fa21956c4bacb0af16978eee6c08","modified":1463843400000},{"_id":"themes/next/node_modules/cache-base/README.md","hash":"84a3f42d42049a3e4d41425a89e175ab52132554","modified":1455043627000},{"_id":"themes/next/node_modules/braces/package.json","hash":"a0261b7e65c7cf473b91b3b9b5afbee112c341ca","modified":1577852769426},{"_id":"themes/next/node_modules/braces/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1463843013000},{"_id":"themes/next/node_modules/brace-expansion/LICENSE","hash":"433c2b9c71bad0957f4831068c2f5d973cef98a9","modified":1518210795000},{"_id":"themes/next/node_modules/cache-base/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1454255797000},{"_id":"themes/next/node_modules/cache-base/index.js","hash":"8405feef2e4f58361b32bf931238bd7175832201","modified":1500744153000},{"_id":"themes/next/node_modules/cache-base/package.json","hash":"a9320627d3bd03a002ee960a2d3a6f3cc62506cd","modified":1577852768901},{"_id":"themes/next/node_modules/chalk/index.js","hash":"08315806beaa18a4eb58052e8e7182b2d8bddf8f","modified":1459210441000},{"_id":"themes/next/node_modules/chalk/readme.md","hash":"a10251893e1a61957a4c7238001e682d20d46d47","modified":1459210441000},{"_id":"themes/next/node_modules/chalk/package.json","hash":"b61c93e0152a46786a9ee12c8dfbc5e8f241d89e","modified":1577852768927},{"_id":"themes/next/node_modules/chokidar/CHANGELOG.md","hash":"377d5b1e50e66d2c253fc03be3d0d4d8741c9d1e","modified":1494269126000},{"_id":"themes/next/node_modules/chokidar/README.md","hash":"dc1b8ae85bc10185a07e0ba9c559cc6045533531","modified":1493242894000},{"_id":"themes/next/node_modules/collection-visit/index.js","hash":"9fc9e03ff9d197c9c6d0920426104a18d1a2b8a5","modified":1491775093000},{"_id":"themes/next/node_modules/chokidar/index.js","hash":"d41546095632df5d9ddfed563027aacfb2aac300","modified":1494268038000},{"_id":"themes/next/node_modules/collection-visit/README.md","hash":"46c9282cf9986d136b65e9654daef397731582fc","modified":1491775153000},{"_id":"themes/next/node_modules/collection-visit/package.json","hash":"f9437f7836608707c7c2521bdc3c7299b693a6ba","modified":1577852770185},{"_id":"themes/next/node_modules/chokidar/package.json","hash":"75b259cd2809ca5c244f27dddaafc2c4c267cf3b","modified":1577852768729},{"_id":"themes/next/node_modules/chalk/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1459195776000},{"_id":"themes/next/node_modules/collection-visit/LICENSE","hash":"f68c4db2c6e52008367016b77eaaee30acbb2d36","modified":1438377691000},{"_id":"themes/next/node_modules/class-utils/index.js","hash":"18708ea06363375f64676fb862b3bcf87fe2c52e","modified":1515681854000},{"_id":"themes/next/node_modules/class-utils/README.md","hash":"929fcc40aae1d764b4e6c9f5f49857159318f904","modified":1457560299000},{"_id":"themes/next/node_modules/class-utils/package.json","hash":"6df59a767c716111ee61bce2138c915a7cc5447d","modified":1577852768927},{"_id":"themes/next/node_modules/component-emitter/History.md","hash":"baea8c7dcefeb1e388099263bf0ac280ab210b4d","modified":1555360683000},{"_id":"themes/next/node_modules/class-utils/LICENSE","hash":"638d630bf7632efa3925e6e6723f66a789d1e8a9","modified":1436039161000},{"_id":"themes/next/node_modules/component-emitter/Readme.md","hash":"643249025a2a7ebe2e4384dc2dd38623ba7600cf","modified":1461005391000},{"_id":"themes/next/node_modules/component-emitter/index.js","hash":"b13d2d05593c925a05059e49da779adaff80f59b","modified":1555360001000},{"_id":"themes/next/node_modules/concat-map/.travis.yml","hash":"994e65474ac75a6687de118e175526bc106cef57","modified":1339129737000},{"_id":"themes/next/node_modules/component-emitter/LICENSE","hash":"7571414e38a753319ae9941323dc4a27f1c8b7dd","modified":1461005391000},{"_id":"themes/next/node_modules/concat-map/index.js","hash":"a3063f014cc693b320dbd64de3243a79247c1e05","modified":1354939769000},{"_id":"themes/next/node_modules/component-emitter/package.json","hash":"7bfc3c2742f7fb01406ce29107ec4649e8a6943b","modified":1577852768001},{"_id":"themes/next/node_modules/concat-map/README.markdown","hash":"132e6e8fd1d19ec2422fdcde00840d8237e44094","modified":1354099276000},{"_id":"themes/next/node_modules/concat-map/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1391050985000},{"_id":"themes/next/node_modules/core-util-is/README.md","hash":"d4987293f1078d937454a14a5ca6f386d227679d","modified":1447978999000},{"_id":"themes/next/node_modules/concat-map/package.json","hash":"e7a609ff6fe8ab9cf13f3eb8c4c5c44050c984de","modified":1577852768001},{"_id":"themes/next/node_modules/copy-descriptor/index.js","hash":"86815fef136a0bd157b8d4767bad1c60c0ea29ec","modified":1465496996000},{"_id":"themes/next/node_modules/copy-descriptor/package.json","hash":"016884990d96b4d153d9aa9b1329e2f316198af8","modified":1577852767994},{"_id":"themes/next/node_modules/core-util-is/float.patch","hash":"d7f073ceb05c6f6dd1bb852fc00f5379a3e41301","modified":1447978999000},{"_id":"themes/next/node_modules/copy-descriptor/LICENSE","hash":"6b6e43e748f05929750a1016160c9ade94e7e644","modified":1465497024000},{"_id":"themes/next/node_modules/core-util-is/package.json","hash":"0df41091b382021a8f9f01ed79e4e4b50b062ed6","modified":1577852768217},{"_id":"themes/next/node_modules/decode-uri-component/index.js","hash":"56ce2ff9993ebbee7eaf1022b40bee1ea3aeb716","modified":1498673356000},{"_id":"themes/next/node_modules/core-util-is/test.js","hash":"2837ee1d57f385943ba5ccc7fd0ec4ed1cb8cfdd","modified":1447979358000},{"_id":"themes/next/node_modules/debug/.coveralls.yml","hash":"90709e4fb4ce17729974b3a140ccbf330519835c","modified":1497485783000},{"_id":"themes/next/node_modules/decode-uri-component/package.json","hash":"a868cfeec909b093288e098ddab3397392b3cad0","modified":1577852768002},{"_id":"themes/next/node_modules/core-util-is/LICENSE","hash":"a95471326a84657b0e164f84e1285685f63011e0","modified":1447979068000},{"_id":"themes/next/node_modules/debug/.eslintrc","hash":"8d154aeddf66a7bcbd433e3c619f76bb0d920ae2","modified":1506086966000},{"_id":"themes/next/node_modules/debug/.npmignore","hash":"90fef7cc1058bd0f85b0959c4fcd49230a29593e","modified":1497485783000},{"_id":"themes/next/node_modules/debug/.travis.yml","hash":"e87a69a064f6a95b166333d46b919afbc5487f59","modified":1506086966000},{"_id":"themes/next/node_modules/decode-uri-component/readme.md","hash":"e17a23b32121e8bdede95086de26b00496290c33","modified":1495884359000},{"_id":"themes/next/node_modules/debug/LICENSE","hash":"d16a2786962571280a11cae01d5e59aeb1351c9a","modified":1497485783000},{"_id":"themes/next/node_modules/debug/component.json","hash":"4963889b7905abd5a8955b8d27c3079e2d449564","modified":1506087129000},{"_id":"themes/next/node_modules/debug/node.js","hash":"aa7655ee80c9a485313675f9379c2f18d33ea061","modified":1497485783000},{"_id":"themes/next/node_modules/debug/Makefile","hash":"89eb5a7b8385734ef7ff4f910d4605cde0bc12fd","modified":1506086966000},{"_id":"themes/next/node_modules/debug/CHANGELOG.md","hash":"c35e6a85b4a8732ec8af63beea964483e1b2dd94","modified":1506087126000},{"_id":"themes/next/node_modules/debug/karma.conf.js","hash":"93fef7cf3ed6f04d2cfc3cd0b8d5d972d35cfd29","modified":1497485783000},{"_id":"themes/next/node_modules/decode-uri-component/license","hash":"af189398067d882a068fd79bdd53a399e0ef43c6","modified":1495225841000},{"_id":"themes/next/node_modules/debug/README.md","hash":"38096a9c10830714695a97a8501b817eb0a7534e","modified":1506086966000},{"_id":"themes/next/node_modules/define-property/CHANGELOG.md","hash":"457d85498eacf214727ead31703c9f21237a9721","modified":1511829666000},{"_id":"themes/next/node_modules/define-property/README.md","hash":"09ed575ce374a56e8e6ffc57bcddda232b3f0adb","modified":1516998234000},{"_id":"themes/next/node_modules/debug/package.json","hash":"e1c163076a43b95a2f3f719294c80ae4c51776d6","modified":1577852770280},{"_id":"themes/next/node_modules/escape-string-regexp/index.js","hash":"17b40cc4dc8a455277994ab351c0650215394042","modified":1456057032000},{"_id":"themes/next/node_modules/escape-string-regexp/readme.md","hash":"b693d3ddaf0a2edac02f8dc9b60382f7a818083e","modified":1456057032000},{"_id":"themes/next/node_modules/define-property/index.js","hash":"17c744aa6c75e65c726981002ca1f91f14dd2a38","modified":1516998048000},{"_id":"themes/next/node_modules/define-property/package.json","hash":"6bd750048e48d1079c33ea4abb6970ba31aed73b","modified":1577852768217},{"_id":"themes/next/node_modules/escape-string-regexp/package.json","hash":"d7a84614bacbb2128ec67daab1770c479ce571dd","modified":1577852768002},{"_id":"themes/next/node_modules/expand-brackets/README.md","hash":"a8e35b4b855a62ebf1b02710cad6e23431db31b4","modified":1459553697000},{"_id":"themes/next/node_modules/define-property/LICENSE","hash":"37887e27cac24d7df31b21d6e2ccb46d781dd696","modified":1516992180000},{"_id":"themes/next/node_modules/escape-string-regexp/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1403645654000},{"_id":"themes/next/node_modules/expand-brackets/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1423173787000},{"_id":"themes/next/node_modules/expand-brackets/package.json","hash":"515212a8e76276c9f4a60e6ae9d5418b3bf83af5","modified":1577852770576},{"_id":"themes/next/node_modules/expand-brackets/index.js","hash":"8637e90b2cbfda4cf2edf6b394e57f50c6747684","modified":1459553635000},{"_id":"themes/next/node_modules/expand-range/README.md","hash":"42710977e33fb611a921985af4df9fb1062f3b81","modified":1462440314000},{"_id":"themes/next/node_modules/expand-range/index.js","hash":"34a62cc825d22f01bbb691a1a6d2ff68686e692e","modified":1462439635000},{"_id":"themes/next/node_modules/extend-shallow/README.md","hash":"6dd9de8f56b255f8a8f2579569d838aaf6bb208b","modified":1513556213000},{"_id":"themes/next/node_modules/expand-range/package.json","hash":"a6ddeeb5c0ae4c4868126296ef9260e99e17ebab","modified":1577852769426},{"_id":"themes/next/node_modules/extend-shallow/index.js","hash":"4775c82922e6a0f4dad8fbdf9a302224e139086b","modified":1513724945000},{"_id":"themes/next/node_modules/extend-shallow/package.json","hash":"5b89964b2417a14de36fb9f4bf9bbc5e0adb5655","modified":1577852770578},{"_id":"themes/next/node_modules/extend-shallow/LICENSE","hash":"8b58a721a73521199654b7b165966a19b1f548fd","modified":1513556213000},{"_id":"themes/next/node_modules/extglob/README.md","hash":"ac4514f62a9bbf39090ca79839a0cc9a95d8e810","modified":1438459882000},{"_id":"themes/next/node_modules/extglob/index.js","hash":"c330dc0091d0f58e6a22455c1dc1ad5796013bbd","modified":1453279404000},{"_id":"themes/next/node_modules/extglob/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1429345875000},{"_id":"themes/next/node_modules/filename-regex/index.js","hash":"0c901dd7fd6cedfd15f2c1fea2cbf3efb3837aaf","modified":1493403032000},{"_id":"themes/next/node_modules/filename-regex/README.md","hash":"90c157168c0fee41c468a5ebdda0dff3279ce467","modified":1493403185000},{"_id":"themes/next/node_modules/extglob/package.json","hash":"4a986a1506de0f0e4fdcdc064449c9891ee33f75","modified":1577852770842},{"_id":"themes/next/node_modules/filename-regex/package.json","hash":"cb955dd2ec0976acb81f6965c19f5d9721f8df45","modified":1577852768002},{"_id":"themes/next/node_modules/filename-regex/LICENSE","hash":"e6de07e5c479b208435531f290cf943571644cc5","modified":1493403032000},{"_id":"themes/next/node_modules/fill-range/index.js","hash":"0f4dc9226dc7b38c7ab7193958de2b5b9430ab83","modified":499162500000},{"_id":"themes/next/node_modules/fill-range/README.md","hash":"9ecb74982e921467c67ea654c117a678a350fedd","modified":499162500000},{"_id":"themes/next/node_modules/fill-range/package.json","hash":"556bfa31a5d2994477f464b16e9c527572f2628a","modified":1577852769550},{"_id":"themes/next/node_modules/for-in/index.js","hash":"4635ec3c2dcfed209d899e78087f07cbc63c505c","modified":1488158989000},{"_id":"themes/next/node_modules/fill-range/LICENSE","hash":"8e9f50463a3d515808c3a428e18049425d584c1c","modified":499162500000},{"_id":"themes/next/node_modules/for-own/index.js","hash":"099e8b227bd50cb4f104b332ed0cc40d9dfb7ea7","modified":1488159133000},{"_id":"themes/next/node_modules/for-in/README.md","hash":"cb27b8d8ba2c3016048811ff979ec1cc6c892d36","modified":1459090589000},{"_id":"themes/next/node_modules/for-in/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1459090429000},{"_id":"themes/next/node_modules/for-in/package.json","hash":"067a7cea89da76e740690ef85077ba4ac8b28ef5","modified":1577852768002},{"_id":"themes/next/node_modules/expand-range/LICENSE","hash":"4a1040f60d8e056a8bc2df7310046ab0a3127d91","modified":1462439296000},{"_id":"themes/next/node_modules/for-own/package.json","hash":"6afb1082bef7307cfd8d30763fa59c233c7f2dc1","modified":1577852768002},{"_id":"themes/next/node_modules/for-own/README.md","hash":"5cb55f3b1c6ce88421f9ddd71b70cc7ca9c24ea3","modified":1459091181000},{"_id":"themes/next/node_modules/get-value/index.js","hash":"4e97e75f08e3b8f6b99c2b6ee77b2d8197950977","modified":1466199171000},{"_id":"themes/next/node_modules/for-own/LICENSE","hash":"e6de07e5c479b208435531f290cf943571644cc5","modified":1459091180000},{"_id":"themes/next/node_modules/get-value/package.json","hash":"3f0bee0730c4329d0c4fdba331a24c27a9f6693d","modified":1577852770795},{"_id":"themes/next/node_modules/fragment-cache/README.md","hash":"63be2ad7ea54b37f1596531908fed9947cca8ffb","modified":1462179847000},{"_id":"themes/next/node_modules/fragment-cache/index.js","hash":"a358467daa0ad055af8260874dbdd9d9596de1a5","modified":1476743736000},{"_id":"themes/next/node_modules/fragment-cache/package.json","hash":"707a9b129b73ebd7ae7eb9f89279848066b1423a","modified":1577852770455},{"_id":"themes/next/node_modules/glob/README.md","hash":"11402eb3ef9b4c244d19d3176a3c5bb8beb0898f","modified":1451528302000},{"_id":"themes/next/node_modules/get-value/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1466238316000},{"_id":"themes/next/node_modules/glob/common.js","hash":"2216c2b406550fa30ce86669313721bc5a72fbf8","modified":1452292176000},{"_id":"themes/next/node_modules/fragment-cache/LICENSE","hash":"638a1b319a42c387ceb8a8c63512936580072414","modified":1448613704000},{"_id":"themes/next/node_modules/glob/glob.js","hash":"950021530921858aef80eefcf3296971350359d0","modified":1452292213000},{"_id":"themes/next/node_modules/glob/sync.js","hash":"6585718061bdd1f27bec952486252c6ee46ea35e","modified":1447632932000},{"_id":"themes/next/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/next/node_modules/glob/package.json","hash":"2a67a4e06cafab3c4453b4576630119cd22d2285","modified":1577852768729},{"_id":"themes/next/node_modules/glob-base/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1442599168000},{"_id":"themes/next/node_modules/glob-base/README.md","hash":"83e0e13e0f9d9bed8b85f401fd22e6fd146fbc49","modified":1442599168000},{"_id":"themes/next/node_modules/glob-base/package.json","hash":"580989cc6c66cc2aaa3ffe8a75bdb84822503a74","modified":1577852770769},{"_id":"themes/next/node_modules/glob-base/index.js","hash":"2f15588ede319f3f78ecb5b8be65c80f8c1570cf","modified":1442930224000},{"_id":"themes/next/node_modules/glob-parent/index.js","hash":"bc23a7b46fa7a53ce69d21ea1eaaed6cee918e66","modified":1442588290000},{"_id":"themes/next/node_modules/glob-parent/LICENSE","hash":"0f5ecc10b17b4e9208f2eee02966ad7b02d7ebf6","modified":1426989797000},{"_id":"themes/next/node_modules/glob-parent/README.md","hash":"741eed87e0324d39712974e26c15ab63d819589c","modified":1442588290000},{"_id":"themes/next/node_modules/graceful-fs/clone.js","hash":"675f90846258fc892068a5ac038323dffec033d2","modified":499162500000},{"_id":"themes/next/node_modules/glob-parent/test.js","hash":"b839f9516685893bc7b6229577e403f19ab6804f","modified":1442588290000},{"_id":"themes/next/node_modules/glob-parent/package.json","hash":"15c7250133e45e0dc1a203a6a01e487e88b17842","modified":1577852770775},{"_id":"themes/next/node_modules/graceful-fs/README.md","hash":"649ce10ecea3a470be5c2d07ddeae45c7e7b3482","modified":499162500000},{"_id":"themes/next/node_modules/graceful-fs/graceful-fs.js","hash":"9c87b6f1d0b48137c99a9319caf8941ee108f5e4","modified":499162500000},{"_id":"themes/next/node_modules/graceful-fs/package.json","hash":"4816e1c072f08178ef6d88c591fdc51338082de2","modified":1577852770964},{"_id":"themes/next/node_modules/has-ansi/index.js","hash":"e7305f641b51be9dc463cdfc1e6b7afb8d03576e","modified":1402774137000},{"_id":"themes/next/node_modules/glob-parent/.travis.yml","hash":"5053409ffeab2fae8d586077018f76b3f3241453","modified":1441806686000},{"_id":"themes/next/node_modules/glob-parent/.npmignore","hash":"54c4045bc2a2525978de7a75dab4af99dc9ed7a0","modified":1426989797000},{"_id":"themes/next/node_modules/graceful-fs/legacy-streams.js","hash":"f4a3583d4c3e8b0c407ab8406bdafb02b4055b7f","modified":499162500000},{"_id":"themes/next/node_modules/graceful-fs/polyfills.js","hash":"fbeedeaa45e284fcc5a766cb3f70e0e62d3e246d","modified":499162500000},{"_id":"themes/next/node_modules/has-value/index.js","hash":"d9e9166b1ea57a3b51538da8adad97f1db0122d5","modified":1495221049000},{"_id":"themes/next/node_modules/has-value/README.md","hash":"c1be9e369a64c0991ef261406bb338dc5224bb2b","modified":1495221030000},{"_id":"themes/next/node_modules/has-ansi/package.json","hash":"c81d8c3e43c32f4495266d1eb9cdd7f74fe3cab4","modified":1577852770916},{"_id":"themes/next/node_modules/has-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/has-ansi/readme.md","hash":"8f5dd99e33b07d2f4abaff2410728acca335ebfc","modified":1435680789000},{"_id":"themes/next/node_modules/has-value/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1427312717000},{"_id":"themes/next/node_modules/graceful-fs/LICENSE","hash":"6560c016f1644ce652d83d039d8ba9e64795fd49","modified":499162500000},{"_id":"themes/next/node_modules/has-value/package.json","hash":"dea49b258ebc7f5fcde8c963a5cdd6570478052c","modified":1577852770842},{"_id":"themes/next/node_modules/has-values/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1427249090000},{"_id":"themes/next/node_modules/has-values/index.js","hash":"be62431522dc01c6daf4fb60cb38627c95009cfd","modified":1495218635000},{"_id":"themes/next/node_modules/has-values/README.md","hash":"c9e0291415ad8e48e9089ca3a196f1e1598fffb2","modified":1495219381000},{"_id":"themes/next/node_modules/has-values/package.json","hash":"3e349023964da6bfddd687bd7a67900be3539405","modified":1577852770842},{"_id":"themes/next/node_modules/hexo-bunyan/.travis.yml","hash":"ad627945ab6e772378b81887df0113f591e55caf","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/.npmignore","hash":"ee8752cb61d10367b5ecc2f8340e1678a57847ee","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/CONTRIBUTING.md","hash":"3e4be4914c60f943a87fa5c33e07b6ef4ed20502","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/CHANGES.md","hash":"ebc5592c6ef1d709343d6772eba8332f703ad808","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/LICENSE.txt","hash":"5398bde981ac22bfad195abd35339cff865c6baf","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/README.md","hash":"089f3daa29ae848be55937908dce578f84572689","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/TODO.md","hash":"9c67f2fd272603011500bd5a2c01ee950e1a8a55","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/AUTHORS","hash":"a92a914cf3bc53a3b5fa7051a631971a596893c6","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-fs/.eslintrc.json","hash":"2c4a55a386408308d637f658a4b2f5e82f4e58db","modified":1523337224000},{"_id":"themes/next/node_modules/hexo-fs/.eslintignore","hash":"0abf1c392f32bdf193fe824ead96926f550a85ae","modified":1499483201000},{"_id":"themes/next/node_modules/hexo-fs/.editorconfig","hash":"17bc8084b4c0d1c9075582ef336be4d1f24dc0e8","modified":1505802763000},{"_id":"themes/next/node_modules/hexo-bunyan/Makefile","hash":"8b18ac586173a593804d1f6f0d4c80ca74c7a3e1","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/package.json","hash":"bbcdacd2929ac2f85f53590b50c927fc520410c0","modified":1577852768729},{"_id":"themes/next/node_modules/hexo-log/.eslintignore","hash":"0abf1c392f32bdf193fe824ead96926f550a85ae","modified":1496442157000},{"_id":"themes/next/node_modules/hexo-log/.eslintrc","hash":"2c4a55a386408308d637f658a4b2f5e82f4e58db","modified":1496442157000},{"_id":"themes/next/node_modules/hexo-log/.jscsrc","hash":"5f410f9c9caedfdd1eabb1571de1f8f9014eefb6","modified":1496442157000},{"_id":"themes/next/node_modules/hexo-fs/README.md","hash":"1de1cd8d5d893a0a2b3867e575a21b59df9680d6","modified":1523337224000},{"_id":"themes/next/node_modules/hexo-log/.npmignore","hash":"84ab7c92a20b2cdd63ada937fae53268474d9561","modified":1496442157000},{"_id":"themes/next/node_modules/hexo-fs/package.json","hash":"cf3fdea1fe6b5ff0157b5798eb4b84dc6857fe57","modified":1577852768692},{"_id":"themes/next/node_modules/hexo-tag-cloud/.eslintrc.json","hash":"a45f9ac0d1d88aa0a9c91af0b12aed0b524bbde4","modified":499162500000},{"_id":"themes/next/node_modules/hexo-fs/LICENSE","hash":"fecd013bdadc9ead2732027f06bf8fc19761efcb","modified":1499483201000},{"_id":"themes/next/node_modules/hexo-log/README.md","hash":"dd9d046d5d56404dbb9b2298af0c88e38b5c8040","modified":1496442157000},{"_id":"themes/next/node_modules/hexo-log/package.json","hash":"6f423f10172633aefd5cb928e5c4f60f8dd26ffe","modified":1577852768692},{"_id":"themes/next/node_modules/hexo-tag-cloud/TODO.md","hash":"342ec09440380c56937ae19b3ee357f1de3b166f","modified":499162500000},{"_id":"themes/next/node_modules/hexo-tag-cloud/README.ZH.md","hash":"71c7fd676195dbbdaa3faf016c351623cd97b334","modified":499162500000},{"_id":"themes/next/node_modules/hexo-log/LICENSE","hash":"666750f22c5bff7a8b3a92a44e3124149a9d268b","modified":1496442157000},{"_id":"themes/next/node_modules/hexo-tag-cloud/README.md","hash":"04f13a39e258b7f6b48f0ac515ba1f1f11a690f4","modified":499162500000},{"_id":"themes/next/node_modules/hexo-tag-cloud/index.js","hash":"230b6f83fb11032fa7161807f7b588f991808eaa","modified":499162500000},{"_id":"themes/next/node_modules/hexo-tag-cloud/package.json","hash":"55d8ce531306fc13371be153a4bd2772dbf2d093","modified":1577852768692},{"_id":"themes/next/node_modules/inflight/README.md","hash":"cabcd4da1794331188da1f8f864ea1aa0ca68657","modified":1399260771000},{"_id":"themes/next/node_modules/hexo-tag-cloud/LICENSE","hash":"8fb7e861623a5a0e02925f1f6f2e3cee8b4b0bf2","modified":499162500000},{"_id":"themes/next/node_modules/inflight/inflight.js","hash":"84aed0b47c15de35a85a5aa6c641342ba4dd5a88","modified":1476330767000},{"_id":"themes/next/node_modules/inflight/package.json","hash":"d14f16ab54ec24f22473b32c08d7db6b15301e73","modified":1577852768729},{"_id":"themes/next/node_modules/inherits/inherits.js","hash":"222da288a07d8f65b2aed9b88815948cfe0b42d9","modified":499162500000},{"_id":"themes/next/node_modules/inherits/README.md","hash":"f2f8d26f1cf5fb1e3a68aa225221b064f999fefb","modified":499162500000},{"_id":"themes/next/node_modules/inherits/package.json","hash":"60c6a03b54e261b18c6bbda2f6452e3d9f34f37b","modified":1577852770915},{"_id":"themes/next/node_modules/inherits/LICENSE","hash":"3b0e8d58a362b1787ef3504fba4f593b22f3cee4","modified":499162500000},{"_id":"themes/next/node_modules/inherits/inherits_browser.js","hash":"70fcf71f449139ecbf7a5d6c78ece069bbdf4dc3","modified":499162500000},{"_id":"themes/next/node_modules/inflight/LICENSE","hash":"515ec4469197395143dd4bfe9b1bc4e0d9b6b12a","modified":1399258628000},{"_id":"themes/next/node_modules/is-accessor-descriptor/README.md","hash":"ae3e26bdbc1655c71945c13fc210d4f7476452d1","modified":1451294530000},{"_id":"themes/next/node_modules/is-binary-path/index.js","hash":"575833c2dfcc83b547352b7432bac1e82bcbee35","modified":1432553532000},{"_id":"themes/next/node_modules/is-binary-path/readme.md","hash":"1f6cadc94e211099cf21ef60f65fa27c4d765c26","modified":1428394458000},{"_id":"themes/next/node_modules/is-accessor-descriptor/package.json","hash":"c1f60ef57946f5d5981d2942a7fa4faf67f3ed4e","modified":1577852770502},{"_id":"themes/next/node_modules/is-accessor-descriptor/index.js","hash":"0b876e50d0a0ab99e62ccf5a09588a7c64f9372f","modified":1451294141000},{"_id":"themes/next/node_modules/is-buffer/index.js","hash":"eb49b73bd06bdeadbb422f63d6efe1fdc01099c0","modified":1508966858000},{"_id":"themes/next/node_modules/is-accessor-descriptor/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1440999499000},{"_id":"themes/next/node_modules/is-binary-path/package.json","hash":"c6dc8196b47c6dcc9458658801ac5638e2eaa41c","modified":1577852770915},{"_id":"themes/next/node_modules/is-buffer/README.md","hash":"6e507ede8260bce223b496c2457dbd8d2b285e40","modified":1490065732000},{"_id":"themes/next/node_modules/is-binary-path/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/is-buffer/package.json","hash":"ebf3463a4eec555ec1313a7b9677ee918ebfed27","modified":1577852770915},{"_id":"themes/next/node_modules/is-buffer/LICENSE","hash":"07d9563f6153658de124707787ff43f0458ab24a","modified":1442461838000},{"_id":"themes/next/node_modules/is-data-descriptor/README.md","hash":"76882fbba5e8f5509239e9760c1b5123d7b14c4a","modified":1451292580000},{"_id":"themes/next/node_modules/is-data-descriptor/index.js","hash":"b636d41a2828e34bb9e98a29937bc0ae7e0a5160","modified":1451292869000},{"_id":"themes/next/node_modules/is-descriptor/index.js","hash":"54e79e0eba499b81321d63dfefa72035e2c67d45","modified":1500738394000},{"_id":"themes/next/node_modules/is-data-descriptor/package.json","hash":"57b0fc8ba47ba3c5cd07f889a42806dd19f434cf","modified":1577852770456},{"_id":"themes/next/node_modules/is-data-descriptor/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1440999537000},{"_id":"themes/next/node_modules/is-dotfile/index.js","hash":"01bfbcba70e3ab9c171f1053cdf5a833221fc990","modified":1496154022000},{"_id":"themes/next/node_modules/is-descriptor/README.md","hash":"12ceec1c2689f3245d70a237e7dd930f9484325d","modified":1488061756000},{"_id":"themes/next/node_modules/is-descriptor/package.json","hash":"1205471f5817a52b5f6b103481469f14ef9930e0","modified":1577852770456},{"_id":"themes/next/node_modules/is-descriptor/LICENSE","hash":"abb6bd03bea71e8684cd8036a3383bb0839a84b6","modified":1500738397000},{"_id":"themes/next/node_modules/is-dotfile/README.md","hash":"8904ed0dc7c3dfda386128c21c19bb974a4862a7","modified":1496154114000},{"_id":"themes/next/node_modules/is-equal-shallow/index.js","hash":"8ad23aff08c366907d80bf6f3d24a6c6a13d6a89","modified":1435030513000},{"_id":"themes/next/node_modules/is-dotfile/LICENSE","hash":"fdc6af432e19382696b8a3a09dc3785ebdd1deb9","modified":1496153533000},{"_id":"themes/next/node_modules/is-dotfile/package.json","hash":"f6c8536f87c07cb3fdbc99b4d18c58323d339108","modified":1577852770842},{"_id":"themes/next/node_modules/is-equal-shallow/README.md","hash":"d3ec7e25f88751d4aa7536c376f32d97816038ec","modified":1435030788000},{"_id":"themes/next/node_modules/is-extendable/index.js","hash":"c38e98e8a299a93debd6e95bdcb56da06580a884","modified":1436049745000},{"_id":"themes/next/node_modules/is-equal-shallow/package.json","hash":"d3926be083b02af5ae99e19a621f13c4a4287d84","modified":1577852770552},{"_id":"themes/next/node_modules/is-extendable/README.md","hash":"e47f712e0969fbe6cda9f18339d0fc7ad37cb62c","modified":1436050202000},{"_id":"themes/next/node_modules/is-equal-shallow/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1424905916000},{"_id":"themes/next/node_modules/is-extglob/README.md","hash":"70fccdf58f29062dbed00016f2790ae604a83d54","modified":1425675606000},{"_id":"themes/next/node_modules/is-extendable/package.json","hash":"672519280817d28d3a837a624f43a2c4128321df","modified":1577852770842},{"_id":"themes/next/node_modules/is-extglob/index.js","hash":"f2caa8e7efa77712cf91d0f349830dc563f1c9fa","modified":1425675072000},{"_id":"themes/next/node_modules/is-extendable/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1435545738000},{"_id":"themes/next/node_modules/is-glob/index.js","hash":"b3dcfb08edc51fa11b2f6a028e432f7f81c67ca8","modified":1443759204000},{"_id":"themes/next/node_modules/is-extglob/package.json","hash":"e345f507a29c3bd6f9cd3cc9ca62c97b3d7fe48a","modified":1577852770842},{"_id":"themes/next/node_modules/is-extglob/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1424431146000},{"_id":"themes/next/node_modules/is-glob/README.md","hash":"c63677aa8188743e55fa3988d143b031e08ade12","modified":1443760455000},{"_id":"themes/next/node_modules/is-plain-object/README.md","hash":"e2a728d80270fc01b87eec1ee2a1a1e99c0a8cc7","modified":1495914726000},{"_id":"themes/next/node_modules/is-glob/package.json","hash":"5c3cd59047d4e43c035eb309f5f6d95a2af01c5f","modified":1577852770775},{"_id":"themes/next/node_modules/is-glob/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1424431146000},{"_id":"themes/next/node_modules/is-plain-object/index.d.ts","hash":"26b8dbdc9fee384f97f946ee96f97e0654b4c941","modified":1499812671000},{"_id":"themes/next/node_modules/is-plain-object/index.js","hash":"11e99ae4c9562ae7d90f585073a640ca19ccff7b","modified":1499812704000},{"_id":"themes/next/node_modules/is-number/index.js","hash":"be43df441aa52b7b5827318a5bb9e17601c1f616","modified":1436588444000},{"_id":"themes/next/node_modules/is-plain-object/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1499812752000},{"_id":"themes/next/node_modules/is-number/package.json","hash":"c8b8a2a8f5d0e9f0d30480c00df5ea7603a00ee0","modified":1577852770455},{"_id":"themes/next/node_modules/is-plain-object/package.json","hash":"b8712d947a893a7bdc696d07944dd2798504b01b","modified":1577852770578},{"_id":"themes/next/node_modules/is-number/README.md","hash":"6a27818480a55a97b4c590b0ddd1827b6ff836d9","modified":1430553159000},{"_id":"themes/next/node_modules/is-posix-bracket/index.js","hash":"c029d99d05d6868e753a517bdb2e22db5ae7c274","modified":1459833759000},{"_id":"themes/next/node_modules/is-posix-bracket/README.md","hash":"adc082455ae8422d02b15123af4ea4066d4bba3b","modified":1459834230000},{"_id":"themes/next/node_modules/is-number/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1425580476000},{"_id":"themes/next/node_modules/is-primitive/index.js","hash":"4d12a2283734792d84b1b92555671f52adc55a99","modified":1426564547000},{"_id":"themes/next/node_modules/is-primitive/README.md","hash":"13fde70833e452345cce4c999e73872f5ce83d49","modified":1426564595000},{"_id":"themes/next/node_modules/is-posix-bracket/package.json","hash":"857522a54f233021b17d6f60239960101ba41a7d","modified":1577852770577},{"_id":"themes/next/node_modules/is-posix-bracket/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1438461363000},{"_id":"themes/next/node_modules/is-windows/README.md","hash":"00aa61a233b9dbc1f8d2667c0f75c27333694747","modified":1518592951000},{"_id":"themes/next/node_modules/is-primitive/package.json","hash":"01a7a6c76d1c29265398e7288c1764bfa1c1274e","modified":1577852770576},{"_id":"themes/next/node_modules/is-primitive/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1426564547000},{"_id":"themes/next/node_modules/is-windows/index.js","hash":"bbb0e4f80fbdb90565a0e2715b1c5156727770e4","modified":1518593311000},{"_id":"themes/next/node_modules/is-windows/LICENSE","hash":"37887e27cac24d7df31b21d6e2ccb46d781dd696","modified":1518591141000},{"_id":"themes/next/node_modules/isarray/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1449741845000},{"_id":"themes/next/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1449741845000},{"_id":"themes/next/node_modules/is-windows/package.json","hash":"b31569ec92b115dda3293fbd755f414eefd092e0","modified":1577852770553},{"_id":"themes/next/node_modules/isarray/index.js","hash":"5c3d1f3ad38be1bded1ec4e065f9463c9bbe359d","modified":1449741881000},{"_id":"themes/next/node_modules/isarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1449741845000},{"_id":"themes/next/node_modules/isarray/test.js","hash":"d822e1a795c5658736d31abdaed0608e01d25183","modified":1449741845000},{"_id":"themes/next/node_modules/isarray/Makefile","hash":"6ab383baa5dc5f695793d66f5b30f0c271e15807","modified":1449741845000},{"_id":"themes/next/node_modules/isobject/index.js","hash":"8da9927ffb038a7aa79044b181f555522f52e102","modified":1461618070000},{"_id":"themes/next/node_modules/isarray/README.md","hash":"b4a604915101db16bb5aebc51cb5385b40c709b6","modified":1449741845000},{"_id":"themes/next/node_modules/isarray/package.json","hash":"302288a589e7d9c3cb1e4f9a5aa2dfa4714ac246","modified":1577852770551},{"_id":"themes/next/node_modules/isobject/README.md","hash":"0a45cf971072445d3a2ca2d52920e6e668c015eb","modified":1461618236000},{"_id":"themes/next/node_modules/isobject/package.json","hash":"74206d815a4ff9d293a9c919dd6ae387341addf6","modified":1577852770503},{"_id":"themes/next/node_modules/kind-of/README.md","hash":"f287584b785807e175d878885c66455a672217bd","modified":1494958295000},{"_id":"themes/next/node_modules/map-cache/README.md","hash":"db3d4b5898f3ca81fc371e473090e1cd18f5b43b","modified":1462877451000},{"_id":"themes/next/node_modules/kind-of/index.js","hash":"f9e8418f23f97452410088786d5e0c7a981ced74","modified":1493120356000},{"_id":"themes/next/node_modules/kind-of/package.json","hash":"bfd6615b2857c306681ddcc583cb6a724a46421c","modified":1577852770502},{"_id":"themes/next/node_modules/map-cache/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1426671958000},{"_id":"themes/next/node_modules/map-visit/LICENSE","hash":"fdc6af432e19382696b8a3a09dc3785ebdd1deb9","modified":1491771148000},{"_id":"themes/next/node_modules/kind-of/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1447758397000},{"_id":"themes/next/node_modules/isobject/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1429583250000},{"_id":"themes/next/node_modules/map-cache/index.js","hash":"86ba3ec947cca427705faf7fdbafabf946c5d79d","modified":1460377976000},{"_id":"themes/next/node_modules/math-random/node.js","hash":"74fb2a2bc9c0d0408b152cb998858df6994b190e","modified":499162500000},{"_id":"themes/next/node_modules/map-cache/package.json","hash":"77de42c02e89fc0085ae8f90462bf61bbf694c94","modified":1577852770456},{"_id":"themes/next/node_modules/map-visit/README.md","hash":"6fd1b825791ac3b0612c7fa2221412ae7caa132d","modified":1491772542000},{"_id":"themes/next/node_modules/math-random/browser.js","hash":"039dd2c309e5dc8b87e8fdfac6a8f341c4e17631","modified":499162500000},{"_id":"themes/next/node_modules/map-visit/index.js","hash":"6d8f5e1d9f593594c144a4669825485d200d0d23","modified":1491774134000},{"_id":"themes/next/node_modules/map-visit/package.json","hash":"5bc0bdf8408282b5cf026d7c2fb4e1c6c997f2d6","modified":1577852770186},{"_id":"themes/next/node_modules/math-random/readme.md","hash":"5c88569ba5beff379c1898e52f97e62f4d9242a2","modified":499162500000},{"_id":"themes/next/node_modules/math-random/test.js","hash":"644c6f3810ec5b8bbc495e44682b3cc9f958ca0d","modified":499162500000},{"_id":"themes/next/node_modules/math-random/package.json","hash":"67c3d4a4214fd2e3cc93947864e0ca85809b5d07","modified":1577852770454},{"_id":"themes/next/node_modules/micromatch/README.md","hash":"2dc079b248dcfeb9b6f677f43a0250dafa249adf","modified":1468602812000},{"_id":"themes/next/node_modules/micromatch/index.js","hash":"f679699eb8954133a5e6e9c329559ef261d12d53","modified":1468602313000},{"_id":"themes/next/node_modules/micromatch/package.json","hash":"41ad7320c52939bde0e03376167ff8bb4f5fba3e","modified":1577852769426},{"_id":"themes/next/node_modules/minimatch/README.md","hash":"c5acb4041ec3730165d4d6ce835a6bd801c8ccec","modified":1456006221000},{"_id":"themes/next/node_modules/micromatch/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1468602313000},{"_id":"themes/next/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999466000},{"_id":"themes/next/node_modules/minimist/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1372148119000},{"_id":"themes/next/node_modules/minimatch/minimatch.js","hash":"c2ee9ea234b053f5177e703334036d505eaa0978","modified":1470774896000},{"_id":"themes/next/node_modules/minimatch/package.json","hash":"934ae9c02bd6b3e167dfed3dd70a364de1ebacff","modified":1577852770454},{"_id":"themes/next/node_modules/minimist/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1372145420000},{"_id":"themes/next/node_modules/minimist/index.js","hash":"c69b3860fa8b40337db188fdfb201077df93ef5b","modified":1392957961000},{"_id":"themes/next/node_modules/minimist/package.json","hash":"c2f5d3d97dc2504793551c1fbf16ea43d1191dbe","modified":1577852770382},{"_id":"themes/next/node_modules/minimist/readme.markdown","hash":"b037b8453fa008383cf7495b3736aa7cc217deb1","modified":1372148196000},{"_id":"themes/next/node_modules/mixin-deep/LICENSE","hash":"8b58a721a73521199654b7b165966a19b1f548fd","modified":499162500000},{"_id":"themes/next/node_modules/mixin-deep/index.js","hash":"9af5c4270ca2c75d339ba325beae0871d64c2c23","modified":499162500000},{"_id":"themes/next/node_modules/mixin-deep/README.md","hash":"6a2d1abf365941741d82437762d6e2d290f08546","modified":499162500000},{"_id":"themes/next/node_modules/mixin-deep/package.json","hash":"8a3624d61ef7ff6575b18a4f77e7b13b2d35bcf9","modified":1577852770380},{"_id":"themes/next/node_modules/math-random/.travis.yml","hash":"2b2c4044a017027b5a673d30e3f9b7a5ae8d37a7","modified":499162500000},{"_id":"themes/next/node_modules/mkdirp/index.js","hash":"e4aca996fb54ff20c3dad61f1fa7807fcb44409f","modified":1431570694000},{"_id":"themes/next/node_modules/mkdirp/package.json","hash":"a47a0db3e9a1673faba37f4773aa355867a722a1","modified":1577852770429},{"_id":"themes/next/node_modules/mkdirp/LICENSE","hash":"35d8442a9599f876c805b2c7d31178ecfa18c829","modified":1419626841000},{"_id":"themes/next/node_modules/mkdirp/.travis.yml","hash":"6f47845eac101b08d34b0cfb4cb6d0614b69b4b2","modified":1431568866000},{"_id":"themes/next/node_modules/moment/ender.js","hash":"f26dfccd69e35b733a945a083bb64b20bf968bb3","modified":499162500000},{"_id":"themes/next/node_modules/moment/README.md","hash":"3b95da64289ce1ce4244165ce8109992419dbaf0","modified":499162500000},{"_id":"themes/next/node_modules/moment/package.js","hash":"ea880b139fa5aad30129356d4c2b61c7acad7452","modified":499162500000},{"_id":"themes/next/node_modules/moment/CHANGELOG.md","hash":"bb147e958c48a64ea011e3955dbc953dd1b6f407","modified":499162500000},{"_id":"themes/next/node_modules/moment/moment.d.ts","hash":"b36204af93963b37269f345aa8004ca2ef16a9ae","modified":499162500000},{"_id":"themes/next/node_modules/moment/package.json","hash":"a51e9a068fb1d62cb363b284afb046ae64f77e75","modified":1577852770282},{"_id":"themes/next/node_modules/mkdirp/readme.markdown","hash":"e4ffd1099773d1e612dc9ecea76dbb791ef355f5","modified":1419626841000},{"_id":"themes/next/node_modules/ms/index.js","hash":"0d10ee921436fa5ff5988445cc67676219dfffbe","modified":1494937320000},{"_id":"themes/next/node_modules/moment/LICENSE","hash":"aab97739ef7d50750adbc9ffbfd1cbf9608eb678","modified":499162500000},{"_id":"themes/next/node_modules/ms/license.md","hash":"884e84ebfddafd93b5bb814df076d2ebd1757ba8","modified":1494937320000},{"_id":"themes/next/node_modules/mv/.travis.yml","hash":"1e1851b3f5b1daea556372bb0014f360ce1ac07a","modified":1434751614000},{"_id":"themes/next/node_modules/mv/.npmignore","hash":"cc16a69ea300506c49a0844bc69745bf8f34cf40","modified":1434749955000},{"_id":"themes/next/node_modules/ms/package.json","hash":"774b6bd076926376372a351ac3a2b7d93767b305","modified":1577852770281},{"_id":"themes/next/node_modules/mv/README.md","hash":"9bf3584c5f36b118c6920b8f742114f38c4314a2","modified":1434749955000},{"_id":"themes/next/node_modules/ms/readme.md","hash":"e875d9fa741fe44893c778974860f362724e35ec","modified":1494937493000},{"_id":"themes/next/node_modules/mv/package.json","hash":"c908f189c2556edb93b932c6d33ec6d6361c5248","modified":1577852768693},{"_id":"themes/next/node_modules/nanomatch/README.md","hash":"b73f16018792982229965cd7629040f773ad23a2","modified":499162500000},{"_id":"themes/next/node_modules/mv/index.js","hash":"a8e3ccb137ec7f55021bb11018b26e28f6cbada1","modified":1435010784000},{"_id":"themes/next/node_modules/ncp/.npmignore","hash":"9a4ad13a1b7bd5ce4c5eca840b3271362c28ade5","modified":1417018463000},{"_id":"themes/next/node_modules/ncp/.travis.yml","hash":"acba7603aa72306dcc3d03f128e047a6d023685e","modified":1417018463000},{"_id":"themes/next/node_modules/nanomatch/index.js","hash":"6a91f8451bccc5973909c074ed056aea1252cde9","modified":499162500000},{"_id":"themes/next/node_modules/ncp/LICENSE.md","hash":"548e1333c6a6e69810ac5d59bf89dbb133ab67fa","modified":1417018463000},{"_id":"themes/next/node_modules/nanomatch/package.json","hash":"9a7acf3e8dc1ed9aab36b639437f8b33ffb5e354","modified":1577852768729},{"_id":"themes/next/node_modules/ncp/README.md","hash":"d6f5a171d9ed85e3fc2666d16a4eb730cfc9414b","modified":1417018463000},{"_id":"themes/next/node_modules/ncp/package.json","hash":"ea2e4c20512c45357ee1c2ade222a57cc7d5cf0d","modified":1577852770282},{"_id":"themes/next/node_modules/normalize-path/index.js","hash":"c4d5346122771b9fa25b67bab6ac50cd5b82758d","modified":1490811567000},{"_id":"themes/next/node_modules/mv/LICENSE","hash":"33746c3f5ca675bd772ffbc2249006d9454ce8a6","modified":1434749955000},{"_id":"themes/next/node_modules/normalize-path/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1490811571000},{"_id":"themes/next/node_modules/normalize-path/README.md","hash":"40a80d6e2e2f2a2a6b2ea45416d6004c6ede5f27","modified":1490811589000},{"_id":"themes/next/node_modules/normalize-path/package.json","hash":"b120a493870f3030e679490fa38c8c7f695341b4","modified":1577852769550},{"_id":"themes/next/node_modules/object-copy/index.js","hash":"0aab928522db28845bbda4aa4cc51a0c5381d3cf","modified":1465495623000},{"_id":"themes/next/node_modules/object-copy/package.json","hash":"d93875170cd5558b80fddfbdcc802fa22bd2a3eb","modified":1577852770137},{"_id":"themes/next/node_modules/object-visit/README.md","hash":"74442f2896796e966178f045312503142529e7e2","modified":1491772087000},{"_id":"themes/next/node_modules/object-copy/LICENSE","hash":"d5885ada4599bfa2e2bab0665853babff900d21e","modified":1465495634000},{"_id":"themes/next/node_modules/object-visit/index.js","hash":"b6539c38bf44297874ee006f91358334b1278770","modified":1496116805000},{"_id":"themes/next/node_modules/object-visit/LICENSE","hash":"f68c4db2c6e52008367016b77eaaee30acbb2d36","modified":1435530195000},{"_id":"themes/next/node_modules/object-visit/package.json","hash":"15f0a871287f99e6226399d64a1839fefa6d29da","modified":1577852770231},{"_id":"themes/next/node_modules/nanomatch/LICENSE","hash":"b9cefee79936ab3e0ab7df6c3ee443fc77df8952","modified":499162500000},{"_id":"themes/next/node_modules/object.omit/index.js","hash":"bc053e15f061801f5af77ba751300ee9e5794073","modified":1477549424000},{"_id":"themes/next/node_modules/object.pick/index.js","hash":"0c4a2f347ec1499edb8106903213b51e515986d2","modified":1503101157000},{"_id":"themes/next/node_modules/object.omit/README.md","hash":"deb11988389b37c0dc6d2c03167bc1cdc657e7e0","modified":1477549390000},{"_id":"themes/next/node_modules/object.omit/package.json","hash":"4aad36aa87f8c1c574793e88afc2b46a30554140","modified":1577852770186},{"_id":"themes/next/node_modules/object.pick/README.md","hash":"2c37495da6722f55c94fefe761ca168b27c5a0ea","modified":1503101157000},{"_id":"themes/next/node_modules/once/once.js","hash":"f78c8cb8d754261b59d03e867f329c2ffdefae45","modified":1473195971000},{"_id":"themes/next/node_modules/object.pick/package.json","hash":"ab364c94cd976b6c7f8a4e5144fbf73c8c530029","modified":1577852770185},{"_id":"themes/next/node_modules/once/README.md","hash":"69b0a9165715c6cd0e8de37ddb4abad94de2b102","modified":1473196024000},{"_id":"themes/next/node_modules/nanomatch/CHANGELOG.md","hash":"a9de829decb8e33e4802bc3eafd2032c29775c01","modified":499162500000},{"_id":"themes/next/node_modules/object.omit/LICENSE","hash":"64fab20ef9c097beeb8f38596e9462b2d6cff0c2","modified":1428554275000},{"_id":"themes/next/node_modules/once/package.json","hash":"937de6539ed0714e3e6772f3e76d2f419aa74555","modified":1577852768729},{"_id":"themes/next/node_modules/object.pick/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1503101157000},{"_id":"themes/next/node_modules/parse-glob/README.md","hash":"b08c9fd27a7da80a2e0afb00003498384f3aabbb","modified":1442934996000},{"_id":"themes/next/node_modules/once/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1430780985000},{"_id":"themes/next/node_modules/parse-glob/package.json","hash":"a06367947ec9d44db9104cd905a1948392204fd6","modified":1577852770185},{"_id":"themes/next/node_modules/pascalcase/index.js","hash":"3e58f4d2af3bb0174d1b7e0e6b8ae27e5f1cbf89","modified":1449267075000},{"_id":"themes/next/node_modules/parse-glob/index.js","hash":"80de4342abc02723990d3849ef8f5710a3bfc2a0","modified":1442931829000},{"_id":"themes/next/node_modules/path-is-absolute/index.js","hash":"6de38a82f68960de2bd07fd9114541f02bee2f62","modified":1475210370000},{"_id":"themes/next/node_modules/posix-character-classes/LICENSE","hash":"638a1b319a42c387ceb8a8c63512936580072414","modified":1471487115000},{"_id":"themes/next/node_modules/pascalcase/README.md","hash":"479b85936ff2db46b6ef8aa07ead69091cabc4f5","modified":1439961205000},{"_id":"themes/next/node_modules/parse-glob/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1442931829000},{"_id":"themes/next/node_modules/pascalcase/package.json","hash":"a8c6548c604113667e07192c3dc408b0e4a3ec64","modified":1577852770185},{"_id":"themes/next/node_modules/pascalcase/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1439960259000},{"_id":"themes/next/node_modules/path-is-absolute/package.json","hash":"ab2d8c75787dd4c95db7b0b1e4bd1b090ca5072d","modified":1577852770185},{"_id":"themes/next/node_modules/path-is-absolute/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/preserve/.jshintrc","hash":"24dd712f1ac9b5343fca8e7fdaee27b7e1c0ba71","modified":1420891233000},{"_id":"themes/next/node_modules/posix-character-classes/index.js","hash":"4d278000c2f66341b8389a4a0d5397974c47fdc2","modified":1492663180000},{"_id":"themes/next/node_modules/path-is-absolute/readme.md","hash":"b09eee74fdfb9195b8b81401654da2a403886d2d","modified":1475210477000},{"_id":"themes/next/node_modules/preserve/.npmignore","hash":"026661455b3e8504461938da7cf22fa149113b65","modified":1420928777000},{"_id":"themes/next/node_modules/preserve/.gitattributes","hash":"514b6d54817ac3ab41bdaf1af9818c6520463df5","modified":1420891233000},{"_id":"themes/next/node_modules/preserve/.travis.yml","hash":"ebe015d4e59b33c034c0140e91343f6a2a549a6d","modified":1420891233000},{"_id":"themes/next/node_modules/posix-character-classes/README.md","hash":"790683b75f176b4e77863774c0c80e153decd60f","modified":1474954711000},{"_id":"themes/next/node_modules/preserve/.verb.md","hash":"59da141744d54ce2c3eb50ca587eccc954257d5b","modified":1420892752000},{"_id":"themes/next/node_modules/preserve/README.md","hash":"daedd5d9696a86795f63b002cfd4537033d639ec","modified":1420928487000},{"_id":"themes/next/node_modules/posix-character-classes/package.json","hash":"3abc33cb62c33e9e94dba5cf9dea4f797bc78121","modified":1577852770185},{"_id":"themes/next/node_modules/preserve/index.js","hash":"1d37d615f1ea0e2469a6e1a8a64eb7c1c7b6f110","modified":1420928487000},{"_id":"themes/next/node_modules/preserve/test.js","hash":"3baac5a1e812bcc42443c2dc6a401c0a55d01f4c","modified":1420928674000},{"_id":"themes/next/node_modules/preserve/package.json","hash":"7a0d64b3cecb9b0fe6d0195e47dced2dccc74560","modified":1577852770112},{"_id":"themes/next/node_modules/process-nextick-args/readme.md","hash":"730e339064290d377b6b2505f8d4a1fdd1c7ac85","modified":499162500000},{"_id":"themes/next/node_modules/process-nextick-args/index.js","hash":"798d5d900748774dd3bb026897a54308e9b618c2","modified":499162500000},{"_id":"themes/next/node_modules/process-nextick-args/license.md","hash":"9def7167175d2ac68505dd2ae0c7b8dd63bc4c3d","modified":499162500000},{"_id":"themes/next/node_modules/process-nextick-args/package.json","hash":"842e4b78cf09d4ef41cfdb785d9bb80891035bce","modified":1577852769834},{"_id":"themes/next/node_modules/randomatic/README.md","hash":"e8a8c2fd18d79128ec1e182f85f1236fe49b9d4c","modified":499162500000},{"_id":"themes/next/node_modules/randomatic/index.js","hash":"2de208d0abd1e88ec46a91db746c2499edde90bc","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/.travis.yml","hash":"3e9186d540b909db7529af866d75ac160856ffc7","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/CONTRIBUTING.md","hash":"1b97e91ac67fcbbd711dedd3b5c388c08489eeaa","modified":499162500000},{"_id":"themes/next/node_modules/randomatic/package.json","hash":"c7a8b9dd94f3fc469a22aa0735f6183b9f671294","modified":1577852769831},{"_id":"themes/next/node_modules/readable-stream/GOVERNANCE.md","hash":"f30fd9ba0fa4f12c900d1b7bb248aa568a72cc3c","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/duplex-browser.js","hash":"9fa4bc0f1f8950e8525e33c376e0722b5be92660","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/README.md","hash":"f48fb91f1cf767e1665a3cf209774cb5b975e08f","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/LICENSE","hash":"d3622fac093fe1cbcb4d8e8d35801600b681fc45","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/duplex.js","hash":"65d2569a9805988eb48fc26ed9fb7123bb062c12","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/passthrough.js","hash":"1498c28497ca568d3dd207eac8b236c221a17988","modified":499162500000},{"_id":"themes/next/node_modules/preserve/LICENSE","hash":"d99d5158898474f25efb4c8790f9fcc4cf55b350","modified":1420928487000},{"_id":"themes/next/node_modules/readable-stream/readable-browser.js","hash":"c72b2b1c4f810d22237ffe40a6a2fd6e3f7c8c16","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/transform.js","hash":"50856785dfc8c7cd64838ceb52124fd30378a812","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/writable-browser.js","hash":"56a4597f339df94654933e8e8264b2edcdbcf2fb","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/writable.js","hash":"d1906d0190fe89683d34219a9407ae905cd91233","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/readable.js","hash":"8fcd80b248d1dca48a678abc8cac9d9a0664c7d1","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/package.json","hash":"4d57a3639fea922989f839d9e07814395b2795d1","modified":1577852768729},{"_id":"themes/next/node_modules/readdirp/README.md","hash":"17b78b594b751b6ddd77d3b9d59e1944f110fd78","modified":499162500000},{"_id":"themes/next/node_modules/readdirp/package.json","hash":"11b18f6d9f497c0f21777426340d2cc604e084cb","modified":1577852768729},{"_id":"themes/next/node_modules/readdirp/readdirp.js","hash":"b2037327f08672bacfe200da8b0ee4bf2b186916","modified":499162500000},{"_id":"themes/next/node_modules/readdirp/stream-api.js","hash":"fe47b8b386b94ba7477cfcfe986f8f7cb98aa149","modified":499162500000},{"_id":"themes/next/node_modules/regex-cache/README.md","hash":"0bdc9d671913ac61e0575d3408c8b464530dedbc","modified":1504278782000},{"_id":"themes/next/node_modules/randomatic/LICENSE","hash":"fd09e317819875a8de7896ad579ce2bb18ab0c0a","modified":499162500000},{"_id":"themes/next/node_modules/regex-cache/index.js","hash":"0ebe8cdade73ba51d7b95f3f5238841b1a23dd60","modified":1504278318000},{"_id":"themes/next/node_modules/regex-cache/package.json","hash":"57603a16e3aa8dc7e7ee50cd1c293c0309d8417d","modified":1577852769550},{"_id":"themes/next/node_modules/remove-trailing-separator/history.md","hash":"9a79070c7d48e91b041802a71574a0ab070ebddd","modified":1502872208000},{"_id":"themes/next/node_modules/remove-trailing-separator/index.js","hash":"1faafafd01af5c36fb4677a6dfe5c214443fb0e0","modified":1502871918000},{"_id":"themes/next/node_modules/regex-not/README.md","hash":"f386cc7eaddc931a6293260060c4dab33ef74158","modified":1519091409000},{"_id":"themes/next/node_modules/readdirp/LICENSE","hash":"8c9db3c96b659c6ab7190a7b02a9f1ca90458ea8","modified":499162500000},{"_id":"themes/next/node_modules/regex-not/index.js","hash":"1671069e3ee8ab22a4db62ec2c95e3de2b524cb2","modified":1519093837000},{"_id":"themes/next/node_modules/regex-not/package.json","hash":"f54274636797302bba07fafcfc037164e5bc4390","modified":1577852769426},{"_id":"themes/next/node_modules/repeat-element/index.js","hash":"a7f67b85362c17e0664ac0ebee6c070b7f7264a7","modified":499162500000},{"_id":"themes/next/node_modules/remove-trailing-separator/license","hash":"74333bafdc4a15e5b9cc4e7f3362a1e252633376","modified":1474706045000},{"_id":"themes/next/node_modules/remove-trailing-separator/package.json","hash":"e1c494c24330916b70e8028c4b56651184b23675","modified":1577852769551},{"_id":"themes/next/node_modules/regex-cache/LICENSE","hash":"abb6bd03bea71e8684cd8036a3383bb0839a84b6","modified":1504278130000},{"_id":"themes/next/node_modules/remove-trailing-separator/readme.md","hash":"f63b449dfee83caefcca8751fdf8e971fd401817","modified":1502872067000},{"_id":"themes/next/node_modules/repeat-element/package.json","hash":"2a45ab78d6cd9c6dce74021533d8c5d457a348f8","modified":1577852769550},{"_id":"themes/next/node_modules/regex-not/LICENSE","hash":"98f31a0ba0ed336cab1a3b57666f03c175c14010","modified":1519091381000},{"_id":"themes/next/node_modules/repeat-element/LICENSE","hash":"854b3338311dea708e157b6848b071e2faf09e72","modified":499162500000},{"_id":"themes/next/node_modules/repeat-string/index.js","hash":"7e753d2760844344055f3ec63768780362d0f5f4","modified":1477240963000},{"_id":"themes/next/node_modules/repeat-string/README.md","hash":"88a0cb55405a527ad650b0724ecffe4e31764e2b","modified":1477209631000},{"_id":"themes/next/node_modules/resolve-url/changelog.md","hash":"2c9447b526202671c2344ebae69b764f54c5cf80","modified":1393353998000},{"_id":"themes/next/node_modules/repeat-string/package.json","hash":"6fb00f78e20555f0b18c794813578aa37ee10877","modified":1577852769550},{"_id":"themes/next/node_modules/resolve-url/component.json","hash":"1110d97eb6f157ebe37acb474d13ace08b1eff5b","modified":1393354019000},{"_id":"themes/next/node_modules/resolve-url/bower.json","hash":"43a86318791a84b2228e9daba0a3dfe61072d003","modified":1393354030000},{"_id":"themes/next/node_modules/repeat-string/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1456747640000},{"_id":"themes/next/node_modules/resolve-url/.jshintrc","hash":"26edbde3151f61c09d71754560fec9b00f017470","modified":1393185450000},{"_id":"themes/next/node_modules/repeat-element/README.md","hash":"bb0a2e9072faba92eb6815b1fcaa045608499ebf","modified":499162500000},{"_id":"themes/next/node_modules/resolve-url/readme.md","hash":"77912933062059e0ff23ad3b9ff20c5b6c1c62ec","modified":1393353864000},{"_id":"themes/next/node_modules/resolve-url/package.json","hash":"c57650a1e82b19ec89086027e78e70d4f1f3007c","modified":1577852769426},{"_id":"themes/next/node_modules/resolve-url/resolve-url.js","hash":"9b3baf0de41c3c1fd3859c626d443b9db5abbd00","modified":1393274517000},{"_id":"themes/next/node_modules/resolve-url/LICENSE","hash":"3264e6ca8a3a34146c4aa3beaf60a1ba67a0e6dd","modified":1393182069000},{"_id":"themes/next/node_modules/ret/README.md","hash":"54c65de2426e21e90a422a77c52561a5306b4593","modified":1494634078000},{"_id":"themes/next/node_modules/ret/package.json","hash":"e2283c94151cf091b4ec8a9eb345ad9870670a5b","modified":1577852769426},{"_id":"themes/next/node_modules/rimraf/README.md","hash":"23783bd5b7f523fb7ea334e154d7dc737c6ed734","modified":1447980009000},{"_id":"themes/next/node_modules/rimraf/package.json","hash":"b3897c0e410a019ca2297584e4c6abaf2e02d660","modified":1577852768729},{"_id":"themes/next/node_modules/rimraf/rimraf.js","hash":"69b88f74b318b3c97ddb471f119b6c812b4b359f","modified":1447980323000},{"_id":"themes/next/node_modules/rimraf/bin.js","hash":"366b465d5a8637f94cea9366f505a25fc78c8a83","modified":1447980323000},{"_id":"themes/next/node_modules/ret/LICENSE","hash":"888f3b31a8ad2deff6e736297612707022322dfa","modified":1387479090000},{"_id":"themes/next/node_modules/safe-buffer/README.md","hash":"75916065970faa645bca603327ecbaea09afe12e","modified":499162500000},{"_id":"themes/next/node_modules/safe-buffer/index.d.ts","hash":"0b5844a33b757b9db574541363116917fcbc6d90","modified":499162500000},{"_id":"themes/next/node_modules/safe-buffer/index.js","hash":"f67b8decb99eed068f28c9ae56df08c21bf4c33d","modified":499162500000},{"_id":"themes/next/node_modules/safe-buffer/package.json","hash":"40e2a1153eca25e99406af7b4a3a2c01ca781b92","modified":1577852769426},{"_id":"themes/next/node_modules/rimraf/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999446000},{"_id":"themes/next/node_modules/safe-buffer/LICENSE","hash":"07d9563f6153658de124707787ff43f0458ab24a","modified":499162500000},{"_id":"themes/next/node_modules/safe-json-stringify/index.js","hash":"e6d5644dcd4feda46559bcbd54b04fcc234e8fba","modified":1577852765346},{"_id":"themes/next/node_modules/safe-json-stringify/README.md","hash":"80d71679b26fec35d15702719a4cc6f10b5cb7a2","modified":1577852765356},{"_id":"themes/next/node_modules/safe-json-stringify/package.json","hash":"76ac1a62d6d065b3664b870e10bcd6b0778940e6","modified":1577852769426},{"_id":"themes/next/node_modules/safe-regex/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1423240318000},{"_id":"themes/next/node_modules/safe-regex/index.js","hash":"d88ce3277026f5e7e24831ff84579d1d57b812d7","modified":1426724972000},{"_id":"themes/next/node_modules/safe-regex/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1423240318000},{"_id":"themes/next/node_modules/safe-regex/package.json","hash":"e1b108a80712484ac4dcd73ab6c28accb9651d50","modified":1577852769426},{"_id":"themes/next/node_modules/safe-regex/readme.markdown","hash":"f4ff3cb1efbb74b65873d722debb18e65a88c6dc","modified":1426725163000},{"_id":"themes/next/node_modules/set-value/README.md","hash":"68170953eef783cd0283f711806fda6bc8e3535c","modified":499162500000},{"_id":"themes/next/node_modules/set-value/index.js","hash":"c151e3d049d9583c2e26f87036adf0fe797f4e23","modified":499162500000},{"_id":"themes/next/node_modules/set-value/package.json","hash":"8f413fbaff85fed7241745198c1687a37251b5de","modified":1577852768950},{"_id":"themes/next/node_modules/snapdragon/README.md","hash":"ad72d1bf8359e16c741dbde92a6a8c64d5f7f2f0","modified":1577852765322},{"_id":"themes/next/node_modules/snapdragon/index.js","hash":"f2ccb608f9eed75e6fce62b8f13a5b6cb72ee520","modified":1577852765305},{"_id":"themes/next/node_modules/safe-json-stringify/.travis.yml","hash":"ddb20eb9c5cfd98973e20bc86996a2f57104b71e","modified":1577852765339},{"_id":"themes/next/node_modules/snapdragon/package.json","hash":"773886b5bd64beac54dd53db54e8326edf9f9e1f","modified":1577852768753},{"_id":"themes/next/node_modules/snapdragon-node/README.md","hash":"a41edf68e6dcb57be52c9de6861fb11f54ef203e","modified":1493640404000},{"_id":"themes/next/node_modules/snapdragon/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1577852765312},{"_id":"themes/next/node_modules/snapdragon-node/index.js","hash":"dc70a360c5e06a8c859718d2b4ba9c2a610dd733","modified":1498392089000},{"_id":"themes/next/node_modules/set-value/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":499162500000},{"_id":"themes/next/node_modules/snapdragon-node/LICENSE","hash":"e4a3fda253eb8403886b64f78b916ee31d515baf","modified":1475312170000},{"_id":"themes/next/node_modules/snapdragon-node/package.json","hash":"0410ff7aed5217689437be6f5c1d45025087244c","modified":1577852769221},{"_id":"themes/next/node_modules/snapdragon-util/README.md","hash":"784d617522a9ef571a2bb8c54e88f7a6a201c6f3","modified":1493638962000},{"_id":"themes/next/node_modules/source-map/CHANGELOG.md","hash":"30497f61c3317cab69ac398e6a1bbb3ced8165f2","modified":1492467890000},{"_id":"themes/next/node_modules/snapdragon-util/index.js","hash":"5db31da148fb2251dc28c95d4a396988c3d1803e","modified":1498383946000},{"_id":"themes/next/node_modules/snapdragon-util/package.json","hash":"4299b9b89684159476d7c6415983ab4ce3594eb1","modified":1577852769424},{"_id":"themes/next/node_modules/source-map/source-map.js","hash":"54dd50c132e3a298bcad252861389300ac0ce265","modified":1492467891000},{"_id":"themes/next/node_modules/source-map/README.md","hash":"57db4f374077098f029b577e000cb26e8ccbcccd","modified":1492467890000},{"_id":"themes/next/node_modules/source-map-resolve/changelog.md","hash":"329382d2a2978f0a17974b02e48262b522f4cf0d","modified":499162500000},{"_id":"themes/next/node_modules/source-map/package.json","hash":"8540685cfc54a6562a370afd6f19ca3bc495b616","modified":1577852769172},{"_id":"themes/next/node_modules/source-map-resolve/package.json","hash":"6d6ce1d2496f080b8ef72f04b79c98879588ab1f","modified":1577852768753},{"_id":"themes/next/node_modules/snapdragon-util/LICENSE","hash":"e4a3fda253eb8403886b64f78b916ee31d515baf","modified":1475312170000},{"_id":"themes/next/node_modules/source-map-resolve/readme.md","hash":"4b6e1b85674bdd23a227aa92c0692bbab4bb9074","modified":499162500000},{"_id":"themes/next/node_modules/source-map-resolve/source-map-resolve.js","hash":"c592df6b8867f4c62b69a837a2b7be27f5b34df1","modified":499162500000},{"_id":"themes/next/node_modules/source-map/LICENSE","hash":"914d42b13ad394be4aa75b4d93fde94b1e79cbbd","modified":1492467890000},{"_id":"themes/next/node_modules/source-map-url/bower.json","hash":"a05a83b1295d405864e731937c13e24dae74844d","modified":1447362185000},{"_id":"themes/next/node_modules/source-map-url/component.json","hash":"c235b49974829324471a71252eb56dcd7770f416","modified":1447362185000},{"_id":"themes/next/node_modules/source-map-url/.jshintrc","hash":"d87f0b4a7e1a79e0ed4d9abebbf5dfc32790fb1e","modified":1407065545000},{"_id":"themes/next/node_modules/source-map-url/changelog.md","hash":"0e20b97ed628e151bbfbca3d640a8df9cebfce4d","modified":1447362185000},{"_id":"themes/next/node_modules/source-map-url/package.json","hash":"318f4b23154591fa5e37b08bc2e733265d8f8719","modified":1577852768999},{"_id":"themes/next/node_modules/source-map-url/readme.md","hash":"46df5b1078553c785c6b61d0cea17e686be416b0","modified":1447362185000},{"_id":"themes/next/node_modules/source-map-url/source-map-url.js","hash":"2b68dfcd71b21ae8458d6845dfd26c40dd92a9d4","modified":1447362185000},{"_id":"themes/next/node_modules/source-map-url/x-package.json5","hash":"4e5c1e9fb39aadfda4c905e0453aa584644f18aa","modified":1447362185000},{"_id":"themes/next/node_modules/source-map-url/LICENSE","hash":"9642f985c99a173639313953aceb413845a46452","modified":1407065749000},{"_id":"themes/next/node_modules/split-string/README.md","hash":"22b84f23c1eaf6e6382e9fb4a1700aeff7f34816","modified":1498022784000},{"_id":"themes/next/node_modules/split-string/index.js","hash":"9a720d694a09799eb9f9485128775a4b3453376b","modified":1511106813000},{"_id":"themes/next/node_modules/split-string/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1511106811000},{"_id":"themes/next/node_modules/static-extend/LICENSE","hash":"d5885ada4599bfa2e2bab0665853babff900d21e","modified":1457683000000},{"_id":"themes/next/node_modules/split-string/package.json","hash":"c8924f8f6ca3ee31d799bb00a7cc979d87e218dc","modified":1577852768951},{"_id":"themes/next/node_modules/static-extend/index.js","hash":"5b1e427a91748c3513aa7dfeb484ddc72d328659","modified":1465497818000},{"_id":"themes/next/node_modules/source-map-resolve/LICENSE","hash":"9c9a81c18faf9fdea7a88df6261329c70bdc86cf","modified":499162500000},{"_id":"themes/next/node_modules/static-extend/package.json","hash":"eec4866ac1357f087cd5cc0afbb9b8051eca9113","modified":1577852768691},{"_id":"themes/next/node_modules/strip-ansi/index.js","hash":"fa7b64a04c5989a1c9b78e83768b90384ac9abcc","modified":1424597013000},{"_id":"themes/next/node_modules/string_decoder/README.md","hash":"324e83b5b018b9e290e3650ee9dc907332df7ddd","modified":499162500000},{"_id":"themes/next/node_modules/strip-ansi/package.json","hash":"64abaa023ed6bf11dfccc975861dce3f7e284e00","modified":1577852768927},{"_id":"themes/next/node_modules/string_decoder/package.json","hash":"1b7ec1b9d0f2c6f50809c29d80665e0fe1046694","modified":1577852768927},{"_id":"themes/next/node_modules/strip-ansi/readme.md","hash":"ee19204de1797a46e3101e8b064a3cfd4741fd6c","modified":1456056884000},{"_id":"themes/next/node_modules/strip-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1424597013000},{"_id":"themes/next/node_modules/string_decoder/.travis.yml","hash":"7b7251ecc270c4ee9ed7ae4255a15ca3cb75db08","modified":499162500000},{"_id":"themes/next/node_modules/string_decoder/LICENSE","hash":"36791ee8e28518f9fb92b51ad9e4247708be9c55","modified":499162500000},{"_id":"themes/next/node_modules/supports-color/index.js","hash":"669e4e82e32796eacb16a314bb3db270fb1d8572","modified":1435362323000},{"_id":"themes/next/node_modules/to-object-path/index.js","hash":"9c463e996206bd89c9ac0f95990f525916dc2bd9","modified":1454259483000},{"_id":"themes/next/node_modules/supports-color/package.json","hash":"f6e840869a355c8afbea938c84eb1d978a706108","modified":1577852768927},{"_id":"themes/next/node_modules/supports-color/readme.md","hash":"a0227e37af9ebe9e998782cf0a1eb75338d68f8e","modified":1435704929000},{"_id":"themes/next/node_modules/to-object-path/README.md","hash":"b7781d769095ae9e5912da91ce5db89c9decde1f","modified":1446090732000},{"_id":"themes/next/node_modules/to-object-path/package.json","hash":"b86f35f7ea52af795b4a68545d2c1cdc2c01497e","modified":1577852768926},{"_id":"themes/next/node_modules/supports-color/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/next/node_modules/to-regex/README.md","hash":"4006e6061a4587d1971a52773d60260a838fec63","modified":1519460445000},{"_id":"themes/next/node_modules/to-object-path/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1446090083000},{"_id":"themes/next/node_modules/to-regex/index.js","hash":"fdda5465203149f50f8f8d5a1d903c00672571a8","modified":1519460568000},{"_id":"themes/next/node_modules/to-regex/package.json","hash":"3139eb31b6be982bd6395f7051c34402204874a0","modified":1577852768927},{"_id":"themes/next/node_modules/to-regex-range/README.md","hash":"0c6063bf330a53fefc41c78810d302c7c95bb50a","modified":1493300007000},{"_id":"themes/next/node_modules/to-regex/LICENSE","hash":"b9cefee79936ab3e0ab7df6c3ee443fc77df8952","modified":1471487115000},{"_id":"themes/next/node_modules/to-regex-range/index.js","hash":"7c1004587525f3c2d7435935047721648478f7b5","modified":1492912395000},{"_id":"themes/next/node_modules/union-value/index.js","hash":"a1e6ee46af647b4070d1fb7065941d837e2b0c74","modified":499162500000},{"_id":"themes/next/node_modules/to-regex-range/package.json","hash":"f07c02139a52d626e794be5ceb02723f1df1de95","modified":1577852768926},{"_id":"themes/next/node_modules/to-regex-range/LICENSE","hash":"fdc6af432e19382696b8a3a09dc3785ebdd1deb9","modified":1461741180000},{"_id":"themes/next/node_modules/union-value/README.md","hash":"2ecd936d4a560056d8b705d6fa6e94d7e331c173","modified":499162500000},{"_id":"themes/next/node_modules/union-value/package.json","hash":"49faab541e9eee8be956a1b348aa9089bab5413e","modified":1577852768926},{"_id":"themes/next/node_modules/unset-value/README.md","hash":"fb484a83be6263a8e182b69d6e9e086ef4cade34","modified":1488061567000},{"_id":"themes/next/node_modules/unset-value/index.js","hash":"139bf35407adc448495227b9319a1e036ddc4a3e","modified":1446234606000},{"_id":"themes/next/node_modules/union-value/LICENSE","hash":"fdc6af432e19382696b8a3a09dc3785ebdd1deb9","modified":499162500000},{"_id":"themes/next/node_modules/urix/index.js","hash":"027cfd90eb9b1a998c3e3991c4ea7d8b92519744","modified":1393707205000},{"_id":"themes/next/node_modules/urix/.jshintrc","hash":"a11ad38a0f57ccb7e5ab56a7f8686a162fac2b40","modified":1393705407000},{"_id":"themes/next/node_modules/unset-value/package.json","hash":"3e559d32ecea80ce01517849eda8fdbe0488b76a","modified":1577852768925},{"_id":"themes/next/node_modules/unset-value/LICENSE","hash":"f68c4db2c6e52008367016b77eaaee30acbb2d36","modified":1440634445000},{"_id":"themes/next/node_modules/urix/package.json","hash":"f188c1007adbe6b73e5822d8c166e2e8fbc5eb10","modified":1577852768753},{"_id":"themes/next/node_modules/urix/readme.md","hash":"d2255ca60981a4092e4ce8e0972e4b8505d327a8","modified":1393707485000},{"_id":"themes/next/node_modules/use/README.md","hash":"1bb8f2fba098e713a540b03012c5c1f98a23c5b7","modified":499162500000},{"_id":"themes/next/node_modules/util-deprecate/History.md","hash":"1fc5b9cf603a0b6abeb852b35bec607a411e5b9b","modified":1444243047000},{"_id":"themes/next/node_modules/use/index.js","hash":"d90418617188b572b0ede2f443ee8473c63bdf4b","modified":499162500000},{"_id":"themes/next/node_modules/urix/LICENSE","hash":"3264e6ca8a3a34146c4aa3beaf60a1ba67a0e6dd","modified":1393705465000},{"_id":"themes/next/node_modules/use/package.json","hash":"e29180161621bf73259690ad9433077976168c68","modified":1577852768753},{"_id":"themes/next/node_modules/util-deprecate/node.js","hash":"26bb9fcabaf57f0bb50e5e026c13de394bc0c478","modified":1416945941000},{"_id":"themes/next/node_modules/util-deprecate/README.md","hash":"8e590b24df7b037031e571b7b2b9600217b83ae0","modified":1416945941000},{"_id":"themes/next/node_modules/wrappy/README.md","hash":"582d7139d169b0fc0b1014f2372a0aa26a52cfb8","modified":1463526927000},{"_id":"themes/next/node_modules/use/LICENSE","hash":"854b3338311dea708e157b6848b071e2faf09e72","modified":499162500000},{"_id":"themes/next/node_modules/util-deprecate/browser.js","hash":"335965112d6117af8926dce4497a1fb9fca022eb","modified":1444242970000},{"_id":"themes/next/node_modules/util-deprecate/package.json","hash":"e2543848af302ebfeb33a0d5177ce3a433795b55","modified":1577852768729},{"_id":"themes/next/node_modules/wrappy/package.json","hash":"c7588949f48ad117bcc005e45b446c2eb6a9c7a0","modified":1577852768729},{"_id":"themes/next/node_modules/wrappy/wrappy.js","hash":"7d5c1c908664b3df4a9b72400a126652ba0dd905","modified":1463526927000},{"_id":"themes/next/node_modules/util-deprecate/LICENSE","hash":"cbde92577cb69b3b45dd33f8dc600732cf9e14cb","modified":1416945941000},{"_id":"themes/next/node_modules/wrappy/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1463526927000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1577721462654},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1577721462654},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1577721462655},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1577721462655},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1577721462655},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1577721462656},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1577721462656},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1577721462657},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1577721462657},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1577721462656},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1577721462656},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1577721462657},{"_id":"themes/next/source/images/header.jpg","hash":"5a10020b8181350e57e9da1cea9717a9274543f9","modified":1528566490353},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577721462657},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577721462657},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1577721462655},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1577721462658},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1577721462633},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1577721462633},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1577721462657},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1577721462633},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1577721462633},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1577721462633},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1577721462634},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1577721462634},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1577721462633},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1577721462634},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577721462623},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577721462623},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1577721462657},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1577721462657},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577721462648},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577721462648},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577721462649},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577721462654},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577721462654},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1577721462620},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1577721462621},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1577721462620},{"_id":"themes/next/layout/_partials/plugin/tagcanvas.swig","hash":"394a7f951f616971d7ff1dfb873874d4d59f44b9","modified":1577853920546},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1577721462622},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1577721462622},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1577721462622},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1577721462622},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1577721462622},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1577721462623},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1577721462623},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1577721462623},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"16cb23818909f57dac1a5ada66869971c33d7bd8","modified":1577763599630},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1577721462624},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1577721462624},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1577721462622},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1577721462624},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1577721462624},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1577721462625},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1577721462625},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1577721462625},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1577721462625},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1577721462626},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1577721462626},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1577721462625},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1577721462626},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1577721462626},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1577721462626},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1577721462626},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1577721462627},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1577721462627},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1577721462626},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1577721462627},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1577721462628},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1577721462630},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1577721462628},{"_id":"themes/next/node_modules/atob/bin/atob.js","hash":"3bfcbfacb0d2dc1aca7e54fc21cdf3d91e557592","modified":499162500000},{"_id":"themes/next/node_modules/concat-map/example/map.js","hash":"022a614b8d9f5ccb67b6ce1f478b1efd7aff298e","modified":1339124034000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1577721462630},{"_id":"themes/next/node_modules/chokidar/lib/nodefs-handler.js","hash":"2bb20459d65f97b270774f64af9ec021bed83222","modified":1473276684000},{"_id":"themes/next/node_modules/core-util-is/lib/util.js","hash":"7d34435928ee9228995c04eaa7bdcef875c41e65","modified":1447979840000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1577721462630},{"_id":"themes/next/node_modules/debug/src/index.js","hash":"182314d32e789e4f9c29e3150ae392f1630f171c","modified":1506086966000},{"_id":"themes/next/node_modules/chokidar/lib/fsevents-handler.js","hash":"f4fc5250d5b47a9251881a313cd4e853e1840087","modified":1494268038000},{"_id":"themes/next/node_modules/debug/src/inspector-log.js","hash":"b2f2996b1f38b6cec0b1746be6cfe458f2585eac","modified":1506017088000},{"_id":"themes/next/node_modules/debug/src/node.js","hash":"f24d52cbc9144b011def218234ff7b50e7ddcb19","modified":1506087100000},{"_id":"themes/next/node_modules/concat-map/test/map.js","hash":"162cce32c23628192cef64924a1ce768af399a4b","modified":1354099176000},{"_id":"themes/next/node_modules/debug/src/debug.js","hash":"a2b8a915c86fc750f56a7137860f19ec1182ee21","modified":1506086966000},{"_id":"themes/next/node_modules/debug/src/browser.js","hash":"c41adc79487f377d3dfb397c531812fb9cc429a2","modified":1506086966000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1577721462630},{"_id":"themes/next/node_modules/hexo-bunyan/docs/bunyan.1","hash":"c7fb4a90fc97b527705c550fc98c8f80fb673b2b","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/docs/bunyan.1.ronn","hash":"750074581139af129eff30e00a5abba535e9e65f","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/docs/index.html","hash":"fc723aa1a4946979f45aedca9b78d4b1a0f91025","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-bunyan/docs/bunyan.1.html","hash":"f3a084723e245d2c055fdc6c7bc61de2bd0f94ec","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-fs/lib/fs.js","hash":"0a561eba1f8ee44633184514419f5494b51253b1","modified":1523337224000},{"_id":"themes/next/node_modules/hexo-bunyan/lib/bunyan.js","hash":"7b0d03361d689c873434e7ab004153e2d7878b6e","modified":1500921793000},{"_id":"themes/next/node_modules/hexo-tag-cloud/.github/PULL_REQUEST_TEMPLATE.md","hash":"355c82ee48cc4bd1c267a277d2e954572c75dca4","modified":499162500000},{"_id":"themes/next/node_modules/hexo-tag-cloud/.github/ISSUE_TEMPLATE.md","hash":"b3e5e47ea960eda53eb04d3c2a36f6e68d6206cb","modified":499162500000},{"_id":"themes/next/node_modules/hexo-log/lib/log.js","hash":"679cb9c6c59c13d0782e147515bdaccf3c287f14","modified":1503412095000},{"_id":"themes/next/node_modules/hexo-tag-cloud/.github/CONTRIBUTING.md","hash":"14a74e1979159a9da4f11afb6fde105e68de1888","modified":499162500000},{"_id":"themes/next/node_modules/is-buffer/test/basic.js","hash":"9b388dd4724dc9aebaf5fd3ae177a6d7fd629073","modified":1508967181000},{"_id":"themes/next/node_modules/micromatch/lib/expand.js","hash":"f2b3efa8497d24116fc595b73f94a4e7cff15dc2","modified":1468602380000},{"_id":"themes/next/node_modules/minimist/example/parse.js","hash":"7684d952ceaa32a8c9e3cd21ba26a62e7ee14387","modified":1372147306000},{"_id":"themes/next/node_modules/minimist/test/default_bool.js","hash":"ecdb759c4275fb23bd5d072c3c6a7baa74b407c7","modified":1372147071000},{"_id":"themes/next/node_modules/minimist/test/dash.js","hash":"27fa6e19e26916edd7fd46ccc2d0b2301b3042a3","modified":1389378397000},{"_id":"themes/next/node_modules/minimist/test/dotted.js","hash":"51664f4efb36d519b2e439f1156e05e917c08bda","modified":1377730679000},{"_id":"themes/next/node_modules/micromatch/lib/chars.js","hash":"10dede99931a8786b6c738b202ac8bda153ea112","modified":1468602313000},{"_id":"themes/next/node_modules/micromatch/lib/glob.js","hash":"100291bc1b0e543fa2d491f9d157aa06c11aa496","modified":1468602313000},{"_id":"themes/next/node_modules/micromatch/lib/utils.js","hash":"fceb374ebf62334dcf0f221b0eee463ea1d4134f","modified":1468602313000},{"_id":"themes/next/node_modules/minimist/test/parse.js","hash":"e240ae50a049d7b4b4b625467df34bcfaef7dceb","modified":1392957961000},{"_id":"themes/next/node_modules/minimist/test/parse_modified.js","hash":"5c3cf170e2a2476e0f5bfee9af78556a1958d503","modified":1372145355000},{"_id":"themes/next/node_modules/minimist/test/long.js","hash":"f0ccd5d55358f78efbc928753264e4a32f7724fc","modified":1372143145000},{"_id":"themes/next/node_modules/minimist/test/short.js","hash":"2ce00fdfe4906fc504286974c143c4ced6a11b12","modified":1391917546000},{"_id":"themes/next/node_modules/minimist/test/whitespace.js","hash":"ea3a87137fa34c00a7d84a4d0350770e8d85ed9c","modified":1372148159000},{"_id":"themes/next/node_modules/mkdirp/bin/usage.txt","hash":"682ca66d4def0ba4af814be4e6363eff5fcede0d","modified":1419626841000},{"_id":"themes/next/node_modules/mkdirp/bin/cmd.js","hash":"0dbed17e23d62e8dc9893f9459768531b300c95c","modified":1419626841000},{"_id":"themes/next/node_modules/mkdirp/examples/pow.js","hash":"6d34dfc0f5f17a971dee0f5ba40eba5219bdd803","modified":1419626841000},{"_id":"themes/next/node_modules/mkdirp/test/mkdirp.js","hash":"628f2dbd4137f64e69454708ba513870b85af4c8","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/chmod.js","hash":"ee02690748279a5bad6179dd3feeb66a48d330c8","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/clobber.js","hash":"4d00dc55c23f21600adbceb6760587b3ca861626","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/opts_fs.js","hash":"8dd756971f7443eb340b846acee0c17cbadbcb87","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/opts_fs_sync.js","hash":"0f949a29099c6206e617d6e9e39cb3a41d0daab4","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/perm.js","hash":"11382491d90f70fce17e9d183765c343c7870c3c","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/perm_sync.js","hash":"1759536f89220a608a3987a3038cbaaa0e7458ac","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/root.js","hash":"b034b5fdf0da3932263437d9d52b53642a2b40ad","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/race.js","hash":"237f49a5262bc2c668653897e8cc1af8eaa5bd89","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/rel.js","hash":"2488c0b77bc0419a4646c7d0bcfaaef5651995a5","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/return.js","hash":"dc2bf5dd5eff2e6a914fc1f731f50ac887ef9d31","modified":1419626841000},{"_id":"themes/next/node_modules/mkdirp/test/return_sync.js","hash":"ef9a789aeb65bafbbb7bceb048dc33ec24a41e3b","modified":1419626841000},{"_id":"themes/next/node_modules/mkdirp/test/sync.js","hash":"22a3775a59d8994c368e5574ba8ffbe19c8b8648","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/umask_sync.js","hash":"917a95e95427eecd9a0cb7807e0ab6ab3c653fcc","modified":1431568795000},{"_id":"themes/next/node_modules/mkdirp/test/umask.js","hash":"d08a2f100ddc37e563e548fd9f7730599009824c","modified":1431568795000},{"_id":"themes/next/node_modules/moment/min/moment.min.js","hash":"69ab16ba8ca68431ab59eff286c7ed1e520bca30","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ar-dz.js","hash":"2a63eb060a70ec935e557c65614198034c20f09d","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/af.js","hash":"7a18805d5a28f0c96deeeac13d5ca56cef75d9ad","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ar-kw.js","hash":"ecedce2c7d5f9c1790e2802290c50a6e28dcb1b3","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ar-ly.js","hash":"3ee9bd53ae24b33379a1cbe777bff48fa746d08b","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ar-tn.js","hash":"0700be9e53e991e417a32cbfd87a4d5c9a11ea8a","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ar-ma.js","hash":"23110a830a7798804c249e20ef5c7d0764a6c891","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ar-sa.js","hash":"771f74799b8457523dcf7bdf430cbc89d9edceee","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ar.js","hash":"f20e6179da225e2755d6355fe69f21113150d588","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/az.js","hash":"404cd3408962923f57a87c50edf08c4965169b1b","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/be.js","hash":"5bb08f114f23e79b3f255d3f02aa412ec3f2b491","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/bg.js","hash":"3257cca6647da9071f89b810c4bdf240aec257ee","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/br.js","hash":"da6f5984ffaca3d170b2bf0c0cb3dd728137923b","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/bn.js","hash":"588c9df5bc9886488bfb886192ecd7639d5bad72","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/bm.js","hash":"4fff52b5c3a29bd75d870638d1927152b4e9cb84","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/bo.js","hash":"91eb2dc30bee7b01af5c3e881a74ac243e52973c","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/bs.js","hash":"5b782de82384a6e7f1bedb173100ee62f193520c","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/cv.js","hash":"4860a5b2779bb07e24373d91110984be6b912a22","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ca.js","hash":"78249c4dda04ed1291a99d2046493fd6e7f0992d","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/cy.js","hash":"4f5d333c8136e19dffa8d23b9a34bd53c7b7a08d","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/cs.js","hash":"4858bb1ed9a640191aef0ef0b3e1faad39e54bec","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/dv.js","hash":"d81be5c1aa86673fa660d08ae35383790c5f0add","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/de-ch.js","hash":"2344f650e8e3775a9e6ce5d0fa6e1d600213cd0c","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/da.js","hash":"cea3a91324397c0145e556992a4b0d4778c2421d","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/de-at.js","hash":"8e31c6484b7cb3ebfa14cded6501776a9869adee","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/de.js","hash":"368796e0f5abd1f0c41fc449653e5e9f3dcb9b18","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/el.js","hash":"6894c70fcb95d4a02938207217fb2944c6ef009c","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/en-SG.js","hash":"04f2af730e65f307c77258341515f4336602302a","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/en-au.js","hash":"7debae899e29ff4dc7d3cef8f99f8426fb7b32a8","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/en-gb.js","hash":"843253c905a0662f95cee328f64d02928f89c872","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/en-ie.js","hash":"e1f8f5df40204f0a7d10b83deba57da4c214586b","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/en-nz.js","hash":"be0319bb43312db9ee52938f9130595e8dce3e8c","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/en-il.js","hash":"bb394c157b5cf6c8a00bc3117393eeef3861afe0","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/eo.js","hash":"bf2ba4c57023e764f5f8dd4b71ad542ff1927c80","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/en-ca.js","hash":"bfaa124399276688015066a181245bcb2fdd9dc1","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/es.js","hash":"d9903b9619290b33e3fce9949abbc6024d51206c","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/es-us.js","hash":"f297edd1e4526db40af038f93936dd1f9da875b4","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/et.js","hash":"5b326c164970709e3a84ec536291350c46679339","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/es-do.js","hash":"1ae4d9521bfb5e66c535490a21839b798dd34517","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/fo.js","hash":"55956d73de2b0f1e2221aa991ace03a88e451a21","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/fi.js","hash":"f9aadb553300816ba78fc6d1a5fa48158044aab8","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/fr-ca.js","hash":"13b8079f3657a840de5b0209c63bcd0c7db0a016","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/eu.js","hash":"24da9bc378c2eb130e13886377cf97ba58f76955","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/fa.js","hash":"02fccbc6002235a6d68c9ba0a00e924ef69569f7","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/fr-ch.js","hash":"1a39f70e35e6983be7f5f5291e4256bd0a150ae4","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/fy.js","hash":"eb2c0e76325b13bd15d3311df0c08e92f1aac714","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/fr.js","hash":"10e814c08f6adb83f1ca2341bee3d0590c67b135","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ga.js","hash":"3cb7d5d6103eb847f36fd340ee4fd2140b438f04","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/gl.js","hash":"1b601378071e3d5632a6696fd4750da05a29a6c7","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/gd.js","hash":"5c76382b5dc283bf5ea4da5ad7b497dc483bdec5","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/gom-latn.js","hash":"ac607744066d1a83e02307651214ac797a663c3a","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/gu.js","hash":"885e7075cee9b6a1a7e3286d41431238465c8869","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/hu.js","hash":"3deb3289981be3a74591ac918b48dafb5809f8ff","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/he.js","hash":"01a59bb67ad6935cfd7e136bed196388d97e6eb9","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/hi.js","hash":"15090cac0215851b10f9bdab01490970cfb1a79a","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/hr.js","hash":"f2d78382cbd49d20750076dde691984788407d28","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/id.js","hash":"eb8cbf233a6d5f2bcf4b8b22cde4db5c6da99000","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/hy-am.js","hash":"612fbdcf929ef15de175a26162479cbb9612faec","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/is.js","hash":"5a3619d9ffafe03caec67ca3d667cfdbaa4adf84","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/it-ch.js","hash":"83326949eca0a239c9ad39d870918fc5c589a346","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ja.js","hash":"9e90986d96cf5464cdc994c76aa4da7b2100edc1","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ka.js","hash":"75b0ee99ea87b22fed5ad08cb68fd9ccbe8cda4e","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/jv.js","hash":"061e9922b2146f0820f421e7da51cb5aa5cef4a0","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/kk.js","hash":"bdfb2bc7242abe2e5e78f5ae5a5089facb2f0ce9","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/kn.js","hash":"45bca583a512d8f9c9f37330e404e450a1890ead","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/it.js","hash":"d431aac0684e656da30777d01d40a8dd657e61c5","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/km.js","hash":"0baa753920dc73d14d39165b111946f366f2230e","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ku.js","hash":"2f1f78ed4da188f81f7f2fe80e836055c0c2d807","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/lb.js","hash":"7798e1628806b494ae71a04de444ce68d3a69745","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ko.js","hash":"a9b3a61e302311c270903b0d63073c2ed1e3a740","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ky.js","hash":"90c47a4016c1627b4d5321095118252d6f2d411b","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/me.js","hash":"f978197a20515b113dd213ae6f846d81a0591625","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/lo.js","hash":"0dce7234487abbd712ead1ee1a5e871ba1da7f8e","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/lt.js","hash":"c85dd9dfe01a1185b6f2b9645a916bcdf8fc7be2","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/lv.js","hash":"8d4c910204b36859db85fda7e1cf55510eaa2194","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/mi.js","hash":"77c8ef8934a4615dc097d6156b1c4b21fbf338e5","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/mk.js","hash":"26bf32ea18ef3d925a2aee637afa2ef59261c1d7","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/mn.js","hash":"d377591f821ce95e6534a7fe158c0027328cf554","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ml.js","hash":"05b7a37ea8a42f91bce38d4791c2aa002788e1bf","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/mr.js","hash":"9649db2fa9925e5f2718794162012beb5b5e0348","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ms.js","hash":"d1f1cb4f9d697ef6985c6d5deb12bfc88b000206","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ms-my.js","hash":"64a3e0becd0aa83b6eae165caf8854800edd81f3","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/mt.js","hash":"5bde6a700582947e2d57a4958c649fc36c69063b","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/my.js","hash":"bfc9650544abc9040ba8340518aea12d4dff6d34","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/nb.js","hash":"a39dcda5bf24b8dbae67e2ef9eb276fb4cb3bbef","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/nl.js","hash":"ed74952626a4532084717e3760cec01956dd1fdc","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ne.js","hash":"1047247452c1cd6c38b45e19c22893f70a5fe0f3","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/nl-be.js","hash":"d78383f3edf7788baec47227fe813cc4518844ad","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/pa-in.js","hash":"aa8d74332157a2c01d6719bff48fb4b9c194f2c3","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/nn.js","hash":"a5ded1d6575bbe66aa963662d9914ed96f2db108","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/pl.js","hash":"b85d062b6162fe1f768d5fa992972c6b7460c5e9","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/pt-br.js","hash":"bf516e46e63dd220ae6a9ed3705381e0e72c43ae","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ro.js","hash":"e810b3eead6376540c0a6b54bb0ad6f0482b09e4","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/pt.js","hash":"84f5807b63b58e13eb27b09110e1cb5227090e2b","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ru.js","hash":"7cda731ebaa5fbad595824eaa0f12dc1e9714a3a","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/sd.js","hash":"749cad6431bc7de52010c9e1c46654bcc2e30fe2","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/se.js","hash":"2a634bf0db5ae146a5d4a53c162490c7c9a55d9e","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/si.js","hash":"aabd22e0b942bda19c2f84704b38ee145bf95052","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/sk.js","hash":"68615053ccd9164668308a6dec025a7a02319c93","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/sl.js","hash":"70bc097abdf3dce1d90cbe1da7bfa20ee3acddd2","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/sr-cyrl.js","hash":"02706800b8c59f22ad8a29242769a2a156310bce","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/sr.js","hash":"0baed653d3dbe27fa701f25f0f2eaecbeeb716d1","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/sq.js","hash":"65d2c4d63078805ffedc93b1f09d8ff2f9d07404","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ss.js","hash":"b379324b7b62ef551d9448ec34c364bc73f1e85f","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/sv.js","hash":"dddce3b9a2fd9b022c77dbcaba87fe67c8c14d9d","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ta.js","hash":"79c525cbfeddc9d02fd0f453b811528b9281f115","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/sw.js","hash":"6b027fa2568df65f66d787b5e15519983a2c75ab","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/tg.js","hash":"776ede17d0b768e4335a9b6f55f80b1b03529c0b","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/th.js","hash":"2e8d42b131f2a153baa82c4ef4c7f0bef55c4f8e","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/te.js","hash":"1c6118a8870340497066793fc5b7830a3d230687","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/tet.js","hash":"1ab969bf4ccbe42c5ea8d05454d6564fcce88fb2","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/tl-ph.js","hash":"6ce617783e065482d4d82daa66be0161fbe8581f","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/tlh.js","hash":"5a20219e730653fb8360e44121d5418cb3bc6c47","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/tzm.js","hash":"b0564d893e598bd5d986a457c8f5a571871d78e7","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/tr.js","hash":"af4c4cd07ba54e2a7d73defb5ddfc4aa6a01b99d","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/tzl.js","hash":"f80596320bf8ee8640101343541b9b6c29140d35","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/tzm-latn.js","hash":"12296fc6e5ae267071898e9d5860f6c6218d9f76","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/uk.js","hash":"c4f1df35fd6e91bd6aae52be3bfa00a3c3f8aaef","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ug-cn.js","hash":"783e668a3f70e2dcab706744a80104dc2ceda28a","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/ur.js","hash":"a7ec73258b44ad6b8f184709c9b93c192267290a","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/uz-latn.js","hash":"e731c7ff92c985eb324be06da447f415cf81aa74","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/uz.js","hash":"48db36364b538bc241d1bca81aee9e14e88bbce9","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/yo.js","hash":"c857eafd84d1113425932fd6080aa3784d7ef625","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/vi.js","hash":"9b250e96cdf0541bba1791d5ea2dc66f4df48e18","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/x-pseudo.js","hash":"2d0450e70a7ce5a160bbded80fb0bb0a606af2a7","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/zh-hk.js","hash":"9daac80dca5fde9af10e66cfd0bb4b70dda9db7a","modified":499162500000},{"_id":"themes/next/node_modules/moment/locale/zh-cn.js","hash":"ada4c9d8ec07ed0b00b86ca3d2911088a25dcc1c","modified":499162500000},{"_id":"themes/next/node_modules/hexo-bunyan/bin/bunyan","hash":"056c65759f302e07c26db6a7afa3ffe7a4c09ba0","modified":1500921793000},{"_id":"themes/next/node_modules/moment/locale/zh-tw.js","hash":"fa0e1a70db01ac3b5e45784904652bf703014570","modified":499162500000},{"_id":"themes/next/node_modules/moment/moment.js","hash":"f5ff9e6fdcddb2951851412bc021015b6b59054c","modified":499162500000},{"_id":"themes/next/node_modules/nanomatch/lib/cache.js","hash":"950a838858eabb8ef308055a67628d1c0a4c19cf","modified":499162500000},{"_id":"themes/next/node_modules/mv/test/test.js","hash":"f0e96bd4e13c138cb34b645fb10072393bb73f30","modified":1435010784000},{"_id":"themes/next/node_modules/moment/src/moment.js","hash":"e0f05210115123f7204b064c17e4b2be12e45dad","modified":499162500000},{"_id":"themes/next/node_modules/nanomatch/lib/parsers.js","hash":"7a26a9bc958cd2f7f289ee0bdc5e20dfde05eb4e","modified":499162500000},{"_id":"themes/next/node_modules/nanomatch/lib/compilers.js","hash":"8004fbb7c02a5084450a2d0d7922bd479e3dae3d","modified":499162500000},{"_id":"themes/next/node_modules/nanomatch/lib/utils.js","hash":"ef9ba1bc1e5201d762160792df6a7da005a316a6","modified":499162500000},{"_id":"themes/next/node_modules/ncp/lib/ncp.js","hash":"d681726680593b1c719bb2deb08031d6b21f5524","modified":1424636211000},{"_id":"themes/next/node_modules/ncp/test/ncp.js","hash":"40ea2d3097d284c8897f057296784dbb5b083bff","modified":1417018463000},{"_id":"themes/next/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"bbe17aece81ead7c39ec8d65f0cf6f146284aa2c","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/_stream_duplex.js","hash":"51384e1f945a0391b0d10aefedae0d9351401c01","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/_stream_transform.js","hash":"e453a114a78f8a73aa5eccefa010895deae1f7a1","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/_stream_writable.js","hash":"7d77f48864ce8495fb30ab2b7e82727d45114cd6","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/_stream_readable.js","hash":"aa75ac312226562ce96b6b067777f52697d41dec","modified":499162500000},{"_id":"themes/next/node_modules/ret/lib/positions.js","hash":"3d1117d4d3542a0c6889e28dee759328b25693dc","modified":1468732991000},{"_id":"themes/next/node_modules/ret/lib/types.js","hash":"087025209c0ffe960bf3cffa649ef39294ae36ea","modified":1468733447000},{"_id":"themes/next/node_modules/resolve-url/test/resolve-url.js","hash":"bd481a478bd2bd40a31a9948a0d0ea1b597dbdaf","modified":1393353693000},{"_id":"themes/next/node_modules/ret/lib/index.js","hash":"574ab86509fbff89b2f493c7ee72c8f3c8f5d926","modified":1468808520000},{"_id":"themes/next/node_modules/ret/lib/sets.js","hash":"0c51c2b17f4c8dc137f8429e51652063afec1603","modified":1468740179000},{"_id":"themes/next/node_modules/mv/test/a-file","hash":"7903d07f7ffdda7aeb92374073c479d92b968658","modified":1435010794000},{"_id":"themes/next/node_modules/ret/lib/util.js","hash":"74e7a49e91ec69d527ac9eb41445fd7deb3f27fe","modified":1468809503000},{"_id":"themes/next/node_modules/safe-json-stringify/.idea/modules.xml","hash":"9fe44e9dfd71983bffb9f5b26f155ea92f78d6f1","modified":1577852765405},{"_id":"themes/next/node_modules/safe-json-stringify/.idea/safe-json-stringify.iml","hash":"4240dabdc746a36bae8a56eeec04a3a3fc59d842","modified":1577852765412},{"_id":"themes/next/node_modules/safe-json-stringify/.idea/misc.xml","hash":"7df46872d1421797d543d0323da2e81710cc573d","modified":1577852765397},{"_id":"themes/next/node_modules/safe-regex/example/safe.js","hash":"677ad641a56b26061d87611939b2df72ba97412d","modified":1423240318000},{"_id":"themes/next/node_modules/snapdragon/lib/position.js","hash":"cb934baa083596ce2f462d9aa3d85dbe1c53e49f","modified":1577852765389},{"_id":"themes/next/node_modules/ncp/bin/ncp","hash":"ea624fd3449b5788e13d7147dee34e33fbae16b1","modified":1417018463000},{"_id":"themes/next/node_modules/safe-regex/test/regex.js","hash":"ff1c81c16ee9207fd8f0a1113f338cd5c9397428","modified":1426725208000},{"_id":"themes/next/node_modules/snapdragon/lib/compiler.js","hash":"b7b4f242978bf1d23474f4ca0abe1c63af76b17d","modified":1577852765346},{"_id":"themes/next/node_modules/snapdragon/lib/parser.js","hash":"1d4451f74a8c2fc094461eb0f7ec70178d52bdec","modified":1577852765365},{"_id":"themes/next/node_modules/snapdragon/lib/source-maps.js","hash":"f5cf4908301efc1d5f4a2cc41054704a438b66f5","modified":1577852765397},{"_id":"themes/next/node_modules/safe-json-stringify/.idea/vcs.xml","hash":"c92f3eb0ad1c70371e177a4d7d741f90af3f902c","modified":1577852765419},{"_id":"themes/next/node_modules/snapdragon/lib/utils.js","hash":"4426a629c3177e2160186e70fa174798797f6e22","modified":1577852765405},{"_id":"themes/next/node_modules/source-map/dist/source-map.min.js","hash":"841896492ffff5edd4cbd451102a9c027bf681df","modified":1503322374000},{"_id":"themes/next/node_modules/source-map-resolve/lib/decode-uri-component.js","hash":"b42095ee6de179d377b2771e4051089e9919646c","modified":499162500000},{"_id":"themes/next/node_modules/source-map-resolve/lib/resolve-url.js","hash":"576ae5db3ff2bdd84a5da4707891d7a531f8923b","modified":499162500000},{"_id":"themes/next/node_modules/source-map-resolve/lib/source-map-resolve-node.js","hash":"32f5841582d343047e71116854816ff7cb7fe6c2","modified":499162500000},{"_id":"themes/next/node_modules/source-map/lib/base64-vlq.js","hash":"493d3d895198dfaefe88d2b066c272552ea35889","modified":1492467891000},{"_id":"themes/next/node_modules/source-map/lib/array-set.js","hash":"ad62f4ee15345ba799a00c59dd226690b4d1d1d2","modified":1496683247000},{"_id":"themes/next/node_modules/source-map/lib/base64.js","hash":"269e8e4dcb82db12f6e2a6187e7be46bee604ab0","modified":1492467891000},{"_id":"themes/next/node_modules/source-map/lib/binary-search.js","hash":"b4333085d02fb4c091361de85d5cb368a3ce7632","modified":1492467891000},{"_id":"themes/next/node_modules/source-map/lib/mapping-list.js","hash":"68a9ed5c0a48a384f64efaec04444a464952509d","modified":1492467891000},{"_id":"themes/next/node_modules/source-map/lib/quick-sort.js","hash":"e4adf67561f701e7563d7db979e5c9ff8d60267b","modified":1492467891000},{"_id":"themes/next/node_modules/source-map/lib/source-map-generator.js","hash":"2e52163409a7d8e48e44e4da60e59e9ad2beae3b","modified":1496683247000},{"_id":"themes/next/node_modules/source-map/lib/source-node.js","hash":"731e14ee0e178a85c2db8b5e96aea97c635a29c2","modified":1496683247000},{"_id":"themes/next/node_modules/source-map/lib/util.js","hash":"91079da4160ce05a7760b1e2bdc5f3d2cca955b0","modified":1492467891000},{"_id":"themes/next/node_modules/source-map-url/test/source-map-url.js","hash":"20320c591dbae56a9eb7eaa9cef845ca9c9b29be","modified":1447362185000},{"_id":"themes/next/node_modules/string_decoder/lib/string_decoder.js","hash":"440bd1828612d1e583e33a4ec304673a11c782af","modified":499162500000},{"_id":"themes/next/node_modules/safe-json-stringify/.idea/workspace.xml","hash":"cba6c77b9fac4fbe7a17b3c1c3bd0adfe01a0ee4","modified":1577852765430},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1577721462648},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1577721462648},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1577721462648},{"_id":"themes/next/node_modules/urix/test/index.js","hash":"bbd5b27d1d19b6039020f3b29de3a3c0fb941cb9","modified":1393707350000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1577721462653},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1577721462654},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1577721462653},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1577721462658},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1577721462648},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1577721462658},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6c30aab4822b189d1fe9b20ca5272fd8d3ebe998","modified":1577721462658},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1577721462658},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1577721462658},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1577721462659},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1577721462659},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1577721462660},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1577721462660},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1577721462660},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1577721462660},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1577721462661},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1577721462661},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1577721462661},{"_id":"themes/next/source/lib/Han/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1577762143648},{"_id":"themes/next/source/lib/Han/README.md","hash":"990d5f1127a0c147902f5f5dfe7b9b60f5a10470","modified":1577762143648},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1577721462669},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1577721462668},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1577721462669},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1577721462654},{"_id":"themes/next/node_modules/source-map/lib/source-map-consumer.js","hash":"bf1d511c205859d7f157c1e89fd71492fd61ad4b","modified":1492467891000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1577721462661},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1577721462661},{"_id":"themes/next/node_modules/hexo-tag-cloud/lib/tagcanvas.js","hash":"db9a61a79350d1618a74a8f3448f06046c3d9a6c","modified":499162500000},{"_id":"themes/next/node_modules/source-map/dist/source-map.js","hash":"3f8fb771c39895c9a414c886f50792aecf1c1c6b","modified":1503322374000},{"_id":"themes/next/source/js/custom/tagcanvas.js","hash":"e99e0b8195d6de3a18f863f58352e645d912886b","modified":1577852948272},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1577721462666},{"_id":"themes/next/node_modules/base/node_modules/define-property/index.js","hash":"f116f1ce7657d27ccd8bb7b73a489d3b1673b2dd","modified":1441002563000},{"_id":"themes/next/node_modules/base/node_modules/define-property/package.json","hash":"2c45ae2fead5496de810cb789f797aed6aa62d85","modified":1577852768266},{"_id":"themes/next/node_modules/base/node_modules/define-property/README.md","hash":"84087d93a22bf582f200f4416d44ddf5e258349d","modified":1492669019000},{"_id":"themes/next/node_modules/base/node_modules/define-property/LICENSE","hash":"f68c4db2c6e52008367016b77eaaee30acbb2d36","modified":1439429105000},{"_id":"themes/next/node_modules/base/node_modules/is-accessor-descriptor/README.md","hash":"379dbe241fd1d29d74982e9afcfeecdfe813afbd","modified":1451294530000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1577721462629},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1577721462630},{"_id":"themes/next/node_modules/base/node_modules/is-accessor-descriptor/index.js","hash":"47aae8526ab11bae1851975a8fb9f5949fd56857","modified":1509516656000},{"_id":"themes/next/node_modules/base/node_modules/is-accessor-descriptor/package.json","hash":"17ecaa9222e2ac2976c1824b49a3a1145ecdb527","modified":1577852768266},{"_id":"themes/next/node_modules/base/node_modules/is-descriptor/index.js","hash":"54e79e0eba499b81321d63dfefa72035e2c67d45","modified":1514502680000},{"_id":"themes/next/node_modules/base/node_modules/is-descriptor/README.md","hash":"12ceec1c2689f3245d70a237e7dd930f9484325d","modified":1488061756000},{"_id":"themes/next/node_modules/base/node_modules/is-descriptor/package.json","hash":"a11273ff18b58b937cc48b79005df65f53257acd","modified":1577852768266},{"_id":"themes/next/node_modules/base/node_modules/is-data-descriptor/README.md","hash":"3923de5c69d9f5178a77dca469bff2374950afcb","modified":1509517990000},{"_id":"themes/next/node_modules/base/node_modules/is-accessor-descriptor/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1509516661000},{"_id":"themes/next/node_modules/base/node_modules/is-data-descriptor/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1509517852000},{"_id":"themes/next/node_modules/base/node_modules/is-data-descriptor/index.js","hash":"66b2f353b84f6cd5529a5000b3f164c27f3465c5","modified":1509517932000},{"_id":"themes/next/node_modules/base/node_modules/is-descriptor/LICENSE","hash":"abb6bd03bea71e8684cd8036a3383bb0839a84b6","modified":1500738397000},{"_id":"themes/next/node_modules/base/node_modules/is-data-descriptor/package.json","hash":"6483307cde16d5bfda57c268e0e9619fc2479e4f","modified":1577852768266},{"_id":"themes/next/node_modules/base/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/base/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/node_modules/base/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/base/node_modules/isobject/package.json","hash":"5f85efcdbb32aef539b2dc2c8bcd0714ee569e0a","modified":1577852768266},{"_id":"themes/next/node_modules/base/node_modules/kind-of/CHANGELOG.md","hash":"06349b88ecf879e500471de6e43d582fa4d885e1","modified":1507937197000},{"_id":"themes/next/node_modules/base/node_modules/kind-of/package.json","hash":"c3f7a134a1761daea85dbb083c268f054108e91c","modified":1577852768266},{"_id":"themes/next/node_modules/base/node_modules/kind-of/README.md","hash":"f0c7bf6cc5158819dd5a47e1f6d4c4c3f6b2a0e5","modified":1512153016000},{"_id":"themes/next/node_modules/base/node_modules/kind-of/index.js","hash":"79c2ee61d58c64c47dfd123ac9736e9006248845","modified":1512153024000},{"_id":"themes/next/node_modules/bluebird/js/browser/bluebird.core.min.js","hash":"9ff93703169a6a60f4f16434379ba03f7e546593","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/any.js","hash":"424dfe2a1afeaad729ca2be5ccfd443311716c41","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/bluebird.js","hash":"f68f4e491f49be5a5a3c5d04fafcd8abaf02fc2a","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/assert.js","hash":"da909f13035601fbcdc3a28937dd44e3008327ee","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/bind.js","hash":"6ba64f83e985a1cb7dcf945490e4c280460ccb25","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/call_get.js","hash":"b53dcc39da361dbc72a49ced90d5290d94c70b80","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/async.js","hash":"3860034e887cf28406edc2b5fad0c52accd8b91b","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/cancel.js","hash":"1a6c901863d671048f58095fe9b568b2a8407729","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/debuggability.js","hash":"6fd2750ada4e853252e47459e680b09ae0888dbe","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/catch_filter.js","hash":"cbdedec0db19fe2af76d5594ed8bf819000d7c79","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/context.js","hash":"ea7eb1ab2c8231fa6bfa8446cf730736735396e0","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/direct_resolve.js","hash":"470ca4d9a7e387ceceb383bc2640202f5fa6bda2","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/filter.js","hash":"a5f3aee4afbc67d372e5b4fbaeac047d0d9c779b","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/each.js","hash":"44949d491571dd38f6ffdd777cb44f96aebb5fc8","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/errors.js","hash":"98deaaee17f36851937108257e028a7e237b3f5e","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/finally.js","hash":"cc388e93ecc2e12145c080cc67b0d8517e481c13","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/es5.js","hash":"019c4e8b62031ea49aedc86dedd20318c6122698","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/generators.js","hash":"6b334d17275b48548e44f74f477b2e8bd49da304","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/map.js","hash":"9eb0c309051273154ab49c7c2ebe9cce4f400cbc","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/method.js","hash":"02a5a493c2cf2045fbb20b2751381e4b4e29dbe8","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/join.js","hash":"28e2887d9335385d45a036196a90c40e15b8504f","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/nodeback.js","hash":"46fc87ede6ca68434439a5216fe8e6f89d8d8a1f","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/promise.js","hash":"3ed6b7a177b1d1fadd7a41adaf03988980705b5d","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/nodeify.js","hash":"ebd75c010fcf1c4f709f4b444e62b80cfcde2a0f","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/promise_array.js","hash":"a10da06ea2d8e4091bd536ad767d086d28397d88","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/props.js","hash":"d26e05c3860fd45b7ae9008995493c6d01c2f2e7","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/promisify.js","hash":"3831be99120a57a3c07406f7012467f02346e92c","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/queue.js","hash":"e6fddd439658a46c57132ec8d07dd04bf1d743e6","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/race.js","hash":"5f5b5403be19793dec5658af27fe996173eb4990","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/reduce.js","hash":"102f8ff8c884843d257218aa325bf0a8dd7253da","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/schedule.js","hash":"8a64f94ea735e05a06ace65d39eb00f769e4c646","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/settle.js","hash":"f119f86ec9ad4fd563e4a6ee646c568e721a42c0","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/synchronous_inspection.js","hash":"21be4c93fd5b93b07315c5edc930800e686e4dea","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/some.js","hash":"b548ddd7eb6b35ae6e97d931e0a8ef6dd512b3b5","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/timers.js","hash":"ad830b808b63bd4b291a3b23210bdaf850f1f818","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/thenables.js","hash":"b06e617f4b1e5c9c33c9c4e0baabe709550154b1","modified":499162500000},{"_id":"themes/next/node_modules/cache-base/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/bluebird/js/release/util.js","hash":"ba606794252e4437237709b65b4a2341a0d16516","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/release/using.js","hash":"5b287a7d967647d38091aec63f880abc46caeb4f","modified":499162500000},{"_id":"themes/next/node_modules/cache-base/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/cache-base/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/node_modules/base/node_modules/kind-of/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1507889208000},{"_id":"themes/next/node_modules/class-utils/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/class-utils/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/cache-base/node_modules/isobject/package.json","hash":"27ffffb595194f880ed057f4ae4ca2444a720bf9","modified":1577852768266},{"_id":"themes/next/node_modules/class-utils/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/cache-base/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/class-utils/node_modules/define-property/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1439429105000},{"_id":"themes/next/node_modules/base/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/class-utils/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/node_modules/class-utils/node_modules/isobject/package.json","hash":"84bad696d0ca6c6870f238962f1c8916ab226965","modified":1577852768266},{"_id":"themes/next/node_modules/class-utils/node_modules/define-property/README.md","hash":"731c043ebda3bb6e54e955c5792c4aacaace5aa4","modified":1441002657000},{"_id":"themes/next/node_modules/class-utils/node_modules/define-property/index.js","hash":"1779d5d78512cd02819b2814468372d32607c508","modified":1441002563000},{"_id":"themes/next/node_modules/class-utils/node_modules/define-property/package.json","hash":"37bc90cfb3fee9fb8e55b1b94a61e5002a6616f6","modified":1577852770578},{"_id":"themes/next/node_modules/define-property/node_modules/is-accessor-descriptor/index.js","hash":"47aae8526ab11bae1851975a8fb9f5949fd56857","modified":1509516656000},{"_id":"themes/next/node_modules/define-property/node_modules/is-accessor-descriptor/package.json","hash":"7e1e0c4291de931d9b35e96e99b9e1a07a363d48","modified":1577852768266},{"_id":"themes/next/node_modules/define-property/node_modules/is-accessor-descriptor/README.md","hash":"379dbe241fd1d29d74982e9afcfeecdfe813afbd","modified":1451294530000},{"_id":"themes/next/node_modules/define-property/node_modules/is-data-descriptor/index.js","hash":"66b2f353b84f6cd5529a5000b3f164c27f3465c5","modified":1509517932000},{"_id":"themes/next/node_modules/define-property/node_modules/is-descriptor/index.js","hash":"54e79e0eba499b81321d63dfefa72035e2c67d45","modified":1514502680000},{"_id":"themes/next/node_modules/define-property/node_modules/is-data-descriptor/package.json","hash":"fc1745ec18efb99fdd5226c7dcfe5ab5eeb68a5c","modified":1577852768267},{"_id":"themes/next/node_modules/define-property/node_modules/is-accessor-descriptor/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1509516661000},{"_id":"themes/next/node_modules/define-property/node_modules/is-data-descriptor/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1509517852000},{"_id":"themes/next/node_modules/define-property/node_modules/is-descriptor/README.md","hash":"12ceec1c2689f3245d70a237e7dd930f9484325d","modified":1488061756000},{"_id":"themes/next/node_modules/define-property/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/define-property/node_modules/is-descriptor/LICENSE","hash":"abb6bd03bea71e8684cd8036a3383bb0839a84b6","modified":1500738397000},{"_id":"themes/next/node_modules/define-property/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/define-property/node_modules/is-descriptor/package.json","hash":"096f2f6a27645296666f88148b7839006ac014cc","modified":1577852768267},{"_id":"themes/next/node_modules/define-property/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/node_modules/define-property/node_modules/isobject/package.json","hash":"dab0f5da5bcb0c7ea9e4ebb7fa2b3b77a674f9ab","modified":1577852768267},{"_id":"themes/next/node_modules/define-property/node_modules/kind-of/CHANGELOG.md","hash":"06349b88ecf879e500471de6e43d582fa4d885e1","modified":1507937197000},{"_id":"themes/next/node_modules/define-property/node_modules/kind-of/README.md","hash":"f0c7bf6cc5158819dd5a47e1f6d4c4c3f6b2a0e5","modified":1512153016000},{"_id":"themes/next/node_modules/define-property/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/extend-shallow/node_modules/is-extendable/index.d.ts","hash":"8d26f170fb432eddfaae73a2c58cba1cdbf1bbf3","modified":1505162047000},{"_id":"themes/next/node_modules/define-property/node_modules/kind-of/package.json","hash":"530322feb15fb07caba0ea7d3d0a132b8f68393e","modified":1577852768266},{"_id":"themes/next/node_modules/define-property/node_modules/kind-of/index.js","hash":"79c2ee61d58c64c47dfd123ac9736e9006248845","modified":1512153024000},{"_id":"themes/next/node_modules/extend-shallow/node_modules/is-extendable/index.js","hash":"a266d35a093ddb6e8634094d7d967aeb150c8037","modified":1505162047000},{"_id":"themes/next/node_modules/extend-shallow/node_modules/is-extendable/README.md","hash":"66faee26251ae3c7e0d8e7ad944044a219a624eb","modified":1505162178000},{"_id":"themes/next/node_modules/has-value/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/extend-shallow/node_modules/is-extendable/package.json","hash":"aa6a3e44d8bec7d72747e15feca9d4ce9b06e103","modified":1577852770722},{"_id":"themes/next/node_modules/define-property/node_modules/kind-of/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1507889208000},{"_id":"themes/next/node_modules/has-value/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/node_modules/has-value/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/extend-shallow/node_modules/is-extendable/LICENSE","hash":"abb6bd03bea71e8684cd8036a3383bb0839a84b6","modified":1505162047000},{"_id":"themes/next/node_modules/has-values/node_modules/is-number/index.js","hash":"b22d833d4a0c519477a1984e15e00bdaaceaedc0","modified":1473549246000},{"_id":"themes/next/node_modules/has-value/node_modules/isobject/package.json","hash":"5e34d3697e928fc670880f5d5a934d874abee5e2","modified":1577852770966},{"_id":"themes/next/node_modules/has-values/node_modules/is-number/README.md","hash":"892a9c0178417ded6bed7f3ce8778aa0f955859c","modified":1473549391000},{"_id":"themes/next/node_modules/has-values/node_modules/is-number/package.json","hash":"4ec7a2a03923c769c9ed56109a36f0703faec597","modified":1577852770964},{"_id":"themes/next/node_modules/has-values/node_modules/kind-of/index.js","hash":"655a7c03bc48c43ca0445e447835eef0e840b2e6","modified":1495217934000},{"_id":"themes/next/node_modules/has-value/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/has-values/node_modules/kind-of/README.md","hash":"e87b08ad601a2861446567f487bcf187bae76633","modified":1495218171000},{"_id":"themes/next/node_modules/has-values/node_modules/kind-of/package.json","hash":"57552f152ef6a306f126ee2688f5e70700c9b21f","modified":1577852770916},{"_id":"themes/next/node_modules/has-values/node_modules/is-number/LICENSE","hash":"64fab20ef9c097beeb8f38596e9462b2d6cff0c2","modified":1472751364000},{"_id":"themes/next/node_modules/is-descriptor/node_modules/kind-of/index.js","hash":"0bae63095c3bc1b24271342691bb8e569d981b35","modified":1507878123000},{"_id":"themes/next/node_modules/is-descriptor/node_modules/kind-of/README.md","hash":"1b2dad314e9dc345c6e527b73e983041271a3f20","modified":1507878123000},{"_id":"themes/next/node_modules/has-values/node_modules/kind-of/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1447758397000},{"_id":"themes/next/node_modules/is-plain-object/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/is-plain-object/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/is-descriptor/node_modules/kind-of/package.json","hash":"6b5268f769952f43085b6f35b92cacf70b2181f1","modified":1577852770915},{"_id":"themes/next/node_modules/is-plain-object/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/node_modules/is-descriptor/node_modules/kind-of/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1507878123000},{"_id":"themes/next/node_modules/mixin-deep/node_modules/is-extendable/index.d.ts","hash":"8d26f170fb432eddfaae73a2c58cba1cdbf1bbf3","modified":1505162047000},{"_id":"themes/next/node_modules/mixin-deep/node_modules/is-extendable/index.js","hash":"a266d35a093ddb6e8634094d7d967aeb150c8037","modified":1505162047000},{"_id":"themes/next/node_modules/is-plain-object/node_modules/isobject/package.json","hash":"f95cef7a4093236891075addbb2357391c695848","modified":1577852770746},{"_id":"themes/next/node_modules/mixin-deep/node_modules/is-extendable/package.json","hash":"e988c47dad2cb6e753c72b821e7da92d3a4c34f6","modified":1577852770457},{"_id":"themes/next/node_modules/mixin-deep/node_modules/is-extendable/README.md","hash":"66faee26251ae3c7e0d8e7ad944044a219a624eb","modified":1505162178000},{"_id":"themes/next/node_modules/is-plain-object/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/mixin-deep/node_modules/is-extendable/LICENSE","hash":"abb6bd03bea71e8684cd8036a3383bb0839a84b6","modified":1505162047000},{"_id":"themes/next/node_modules/define-property/node_modules/is-data-descriptor/README.md","hash":"3923de5c69d9f5178a77dca469bff2374950afcb","modified":1509517990000},{"_id":"themes/next/node_modules/moment/src/locale/ar-ly.js","hash":"70fddbc20cd877eee590d6c14e429fed81d06034","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ar-kw.js","hash":"e4abe9d970dfc4dec0c467d89e637790f01d25cd","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ar-dz.js","hash":"e390396b124f26038fe01da5c378cc4ed9ea81c4","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/af.js","hash":"ac5ff680c99be60771cb95b94033ee65d93145a5","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ar-ma.js","hash":"cf2bfdef60a9084b146d8a4960d8530f09bdbab5","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ar-sa.js","hash":"c8838b5d93cbcb6676daf5ce520355b08724cf1b","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ar-tn.js","hash":"c79b5b540b68d2fb3a23a312008235538af6f0ca","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/az.js","hash":"6b453972242f4404f93efb491d8a8f03107484ad","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ar.js","hash":"1501516feedfbdb5b516ae6c06399a6e7153ae14","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/be.js","hash":"1e55f8dd9a5e12b0ef051b793b18d309b4b871ea","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/bg.js","hash":"ea76a8b747c459a605a23a551b276885c0a4fafd","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/bm.js","hash":"2a97184fb97b2605e04af399cca5532912b7983b","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/bo.js","hash":"aa6fb8f1ece7c8d270e72dff3f19e7e5aece312d","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/bn.js","hash":"d2de3ecfedab8f143867661d1862b4ff2fe5884c","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ca.js","hash":"2b36199c3eb0ed76a10d8bee31bcaafefb0e13c9","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/br.js","hash":"79c14f5ea08d73b68aa84da46b5ea7ab1f808cce","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/bs.js","hash":"695b7106c20fea2fedd72e91c5a1b1ca66a746dc","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/cs.js","hash":"201a1f37069568d246fd203570903428d5e1249e","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/cv.js","hash":"7786661820b7ad3c0e8dcb9ac5288a7b31fb8469","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/cy.js","hash":"028591f29174b4aa5b504556c9c5cc6255f54f1a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/da.js","hash":"7ba35551af756710edf1e6cca7a27e0f2f53de1d","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/de.js","hash":"e2acae7f77b642d7639d3b8d779cee7544080c99","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/de-at.js","hash":"2546d5fb6979ea74f1db733e143655aaa61f07d4","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/de-ch.js","hash":"57a5b76dc472aad4d5090ec78957ed6adeb90156","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/dv.js","hash":"f47387dbd9b3546298d2425ca1c78a0adb41da33","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/en-SG.js","hash":"c18528179913dc9c170c457686ad0020f28b57f3","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/el.js","hash":"749e51cad21907e86816ece21e839b365545aaf5","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/en-ca.js","hash":"cc9a8726625e3dc1906e03b2501eb66a99317698","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/en-gb.js","hash":"e86f168e4b3b9416c12a0468d767216f60826811","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/en-au.js","hash":"5c68ec3d7ee31e6bfe19c0f285e3bc2ae19457dc","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/en-il.js","hash":"0c83db55b1417b769f1064de65143fa0a4326c2f","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/en-nz.js","hash":"4b692f73e4206e7750b6e038c74b03d828eb8485","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/eo.js","hash":"0017382da0af7fc7102711e218565c26ff5d4f0a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/en-ie.js","hash":"3d47369675ddc32ae741a91bcf01b534481d98c6","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/es-do.js","hash":"71c0ed8abf285c7d8ad9763f73f0b7d0132be90b","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/et.js","hash":"e02eee0c41fe9f4877fcd723dd81553e2ad03ceb","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/es-us.js","hash":"9d66a91c241a73774318a4be4751f310dc4b4e31","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/es.js","hash":"4f3acef6ee8a9293fedc7b517909e5a5c33a0b53","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/eu.js","hash":"c029a77025e6ddc45f3026f82d9cab9a83c183c1","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/fa.js","hash":"d30f59c5481938d9d3b8449ed18ef03043635055","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/fi.js","hash":"44a76394ecc288e0c4dc3eed8528eb2ba572c7b6","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/fr-ca.js","hash":"3797324e2f787f09eed489f676afcafe064e0cfe","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/fo.js","hash":"59c5cda20f80a03964ea66add81b7c242a8d1d73","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/fr-ch.js","hash":"d6c40a8e0529a355c0ffa5dce52d224ba589a8d5","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/fr.js","hash":"5a07a5ace7f9dced84a8bf5d4dae64a5f0fe869c","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ga.js","hash":"ff0f14951c052ae84729d05f00c7f4cb27805420","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/gd.js","hash":"b1899743984b9ec8dbab571d8a2fd94f707bb2de","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/he.js","hash":"8619223ced826ca18b62c39312389c00bbd890cf","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/fy.js","hash":"e2d3702e84e239e5fb1a358e826c0f8964666af5","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/hi.js","hash":"c0f5e8dff0f1ef1d66f9b9beca89dc29fe96aa64","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/gl.js","hash":"7a2d161546a93c2d477e6fea616d4075b165c589","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/gu.js","hash":"be8d6554b2de98993ab372de4bb085fccda4d20a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/hu.js","hash":"855d874411a1198097d554820ac20b8b7a9ecc63","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/hr.js","hash":"3ef00afec17acf674fdbc2f7e021c64d1a8862f4","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/hy-am.js","hash":"f96ed17a2b5283510fd7ddc68c3c87617887b797","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/gom-latn.js","hash":"2af81b7e717b8791bc232dce15c460045e80543a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/id.js","hash":"7c88b4b4a6c4fa3765429d2b846b4efc71b6955c","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/it-ch.js","hash":"402a97314225ffc599a5cb0e0645e16f96ed9573","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/is.js","hash":"d3497bb900502e0af5c7403f38b50cbe266b3d0a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/it.js","hash":"afdd36e64115ccc6bd1b7747cde6d3049383cef8","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ja.js","hash":"2eb1e1c9efbccf087cd41289aa80d924dc74e9d0","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ka.js","hash":"5409878fe4b86a59123f912bdaa90e0ce1a179a6","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/jv.js","hash":"93c7522c7809796c018203f0d31df2d83c0f1d0b","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/km.js","hash":"5bd7d672c124320e55fd16b49cf5fe1126f95069","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/kk.js","hash":"31f0e2b7481bdb1ba2b141723a83897c58fd729e","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/kn.js","hash":"a5c75a573e150e2f4bb17ee9a1d94399e8b311fb","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ko.js","hash":"7a22aeb97f8c370bd6fd69b6f389f67c553bd5a2","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ku.js","hash":"432873729ad32243764a2d18d574c5c65c495d0f","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ky.js","hash":"1627f4d602a3954b7d4db086d7b29fd99bf295ad","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/lb.js","hash":"3e0ef81e8937b8bd6ec7696958f332a661b5ac5e","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/lo.js","hash":"4f77e604bb626d7ff59a2d986ed021f133ccdd8b","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/lt.js","hash":"fb4061522b9262cfa7c7d26d202dd9d45d62bc90","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/lv.js","hash":"c9ae70a190565ee74304599c58d6f11294ed7718","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/me.js","hash":"4e208e273629f083a30e0d66aed7bc322036aca6","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/mi.js","hash":"1977aae187d58c9dc9e4117da813a1e45018dee1","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ml.js","hash":"4b15fa7c6526b55e967d41a60b1420fa1a4b0473","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/mn.js","hash":"c423d0ff60bdcdfe4ce628624e8d8b843db106ae","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/mr.js","hash":"871615792098f30c3698512c272d026cb9ffa925","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/mk.js","hash":"d3e58f924b880b66ff86f93567664d1bc9ad4214","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/mt.js","hash":"9d86aec00fe6a64534c02a4ff500219f93f7c3f7","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/my.js","hash":"710a5adcccdf238434e4155bbe9bf8315c99df01","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ne.js","hash":"c1d39172d8bf452c5fc87cde81102d71c6391f38","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ms-my.js","hash":"6a31f020aff384cdf8dd08ffd2dbdb692291e860","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/nb.js","hash":"3adc2af0a2205f598b246011ecaf7d6691fc2a44","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/nl-be.js","hash":"7e53268cbc442ff8e8811845df8195c8d262ed76","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/pa-in.js","hash":"65a3fc7374de0e2d5e0fe71da467f98df536178a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ms.js","hash":"6357d045b2b9465f9d89865e51d9844ecc93fb68","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/nl.js","hash":"60d4addfe470bdbafd2d998d5af3b570d716c260","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/nn.js","hash":"5e07c4e16121cebf7268f0689c7f1cd70a2b1265","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/pt-br.js","hash":"d5c867242946718d783fff6cf4f1128d02d91e7d","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/pt.js","hash":"83e4f72f02558ee934eac6e2e627f70a12a41a56","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ro.js","hash":"269e8736bcc95283f495be1a31d54db654e4d5ce","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/sd.js","hash":"d4ce3733857631ad948883226e31c619016ef6be","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/pl.js","hash":"92f4d242832549aa85103cc8319e7408f5e2e12d","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ru.js","hash":"00f48e560d9b58d68751fbd0e86d397236c2771c","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/si.js","hash":"a4b47e77673d3a03509d177ab828ea2c6bb1263f","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/se.js","hash":"98bee45dc130c64323f8069a777cd5b0b51c9867","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/sk.js","hash":"8b777a0856f06bca4abe139c182e8fe8d1a10ab4","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/sq.js","hash":"898e17e2aa6fb75463f0020c80643718c5d4d607","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/sl.js","hash":"ea3be55bbc552d10e815dd230eb098cf52316894","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/sr-cyrl.js","hash":"df698c2408357d502c1f03cc5e7d9a872b99b398","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/sr.js","hash":"c528cc6871678ce67ce5fd23c6989619d1ab4876","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ss.js","hash":"54bc48f4e4b7e506ad9e8239cc154be56680f75d","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/sw.js","hash":"ffab16deb9e62d1bd8a855080cfad5422c43391b","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ta.js","hash":"df8b4a9bad0b0c47637fa5c2c99e8a96c2e80c56","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/te.js","hash":"e73241b7ff65ff92db9f38765535a72b07b00b31","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/tet.js","hash":"3c1a5422d539b8184caf039d434f3a343e4ab4d9","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/tg.js","hash":"e474f6ae34d9d006afafed3283b105705afbd53d","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/tl-ph.js","hash":"fd0a84e0def5d6df400d965238e074c0a1cb9812","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/th.js","hash":"03d25fe883d2c858690f95dcb7474341971183a1","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/tr.js","hash":"6709c244b9bda23bb55191cf8b948f5d4873708b","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/tlh.js","hash":"b138d39fcb6a41a69ee60e1e8e3dbe2c9ece7fc6","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/sv.js","hash":"a1aa110bdba48f5798cb280519593cc35f9df378","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/tzm-latn.js","hash":"edfe56606b679bf7d7c8fbd9b30ae734e08f4662","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/tzm.js","hash":"d19044c0a54005e79e0db900a53bdd64c16af148","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/uk.js","hash":"f331aaf49f05b9e878bb1398a05a2c77c4bb719e","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ur.js","hash":"c2c49af559acd65c6dd2451109a4ea0a6e01ff2d","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/uz-latn.js","hash":"c5a1af10da2afd624c0a841553a41d3afa6429f0","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/uz.js","hash":"d55ad8dd1d9b5163a5f33a3b989338b5e91a29a0","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/ug-cn.js","hash":"0193ee5f2f551b038da22ee2371ce0f20671e872","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/vi.js","hash":"dd9439513471e03ed52a50cb515dcf55e4707580","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/tzl.js","hash":"86420d019381afd6d8db2a88e612c3f1d373652d","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/x-pseudo.js","hash":"47c1e140d76ebbba6109df6a4cbc69ebdbf7e959","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/yo.js","hash":"b6bc7769387697880ee79acf3591318b30d717d3","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/zh-cn.js","hash":"f522d9fd9f4a173859e6b4fd7d4cdfca3c982274","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/zh-tw.js","hash":"5011c856772a775d21e26f3db381de9fb69d1a48","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/locale/zh-hk.js","hash":"b7b23eef28faf4ab31ecd5c16b62612a35c9b235","modified":499162500000},{"_id":"themes/next/node_modules/nanomatch/node_modules/arr-diff/README.md","hash":"e0f6660954d1864a842222ca5c0cffc4ccd1f79e","modified":1492143074000},{"_id":"themes/next/node_modules/nanomatch/node_modules/arr-diff/index.js","hash":"9d523b1bc59bb7b09cf68c206061c4093b2bd1b3","modified":1492142948000},{"_id":"themes/next/node_modules/nanomatch/node_modules/arr-diff/package.json","hash":"13c2a8a0111c189565341aa8b992fd1c3b31f402","modified":1577852770379},{"_id":"themes/next/node_modules/nanomatch/node_modules/array-unique/LICENSE","hash":"64fab20ef9c097beeb8f38596e9462b2d6cff0c2","modified":1427255160000},{"_id":"themes/next/node_modules/nanomatch/node_modules/array-unique/README.md","hash":"d66a5a8392ed1ec470d42339a98671a1bb4cd72a","modified":1470012675000},{"_id":"themes/next/node_modules/nanomatch/node_modules/array-unique/index.js","hash":"0b0dd7bd39ce82a63812cd63c0facbf9e30cc5a6","modified":1470012516000},{"_id":"themes/next/node_modules/nanomatch/node_modules/arr-diff/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1440300569000},{"_id":"themes/next/node_modules/nanomatch/node_modules/array-unique/package.json","hash":"6bc61ce2fd2d703478d6313abde52629357c4852","modified":1577852770379},{"_id":"themes/next/node_modules/nanomatch/node_modules/kind-of/CHANGELOG.md","hash":"06349b88ecf879e500471de6e43d582fa4d885e1","modified":1507937197000},{"_id":"themes/next/node_modules/nanomatch/node_modules/kind-of/README.md","hash":"f0c7bf6cc5158819dd5a47e1f6d4c4c3f6b2a0e5","modified":1512153016000},{"_id":"themes/next/node_modules/nanomatch/node_modules/kind-of/package.json","hash":"79b1de668b71d1c361f1a4ab17686042addc9eba","modified":1577852770379},{"_id":"themes/next/node_modules/nanomatch/node_modules/kind-of/index.js","hash":"79c2ee61d58c64c47dfd123ac9736e9006248845","modified":1512153024000},{"_id":"themes/next/node_modules/nanomatch/node_modules/kind-of/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1507889208000},{"_id":"themes/next/node_modules/object-copy/node_modules/define-property/README.md","hash":"731c043ebda3bb6e54e955c5792c4aacaace5aa4","modified":1441002657000},{"_id":"themes/next/node_modules/object-copy/node_modules/define-property/package.json","hash":"63b10c8872673822bbb151c5a03eab03fdcf223d","modified":1577852770355},{"_id":"themes/next/node_modules/object-visit/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/object-visit/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/object-copy/node_modules/define-property/index.js","hash":"1779d5d78512cd02819b2814468372d32607c508","modified":1441002563000},{"_id":"themes/next/node_modules/object-visit/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/object-copy/node_modules/define-property/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1439429105000},{"_id":"themes/next/node_modules/object-visit/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/node_modules/object.pick/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/object.pick/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/object-visit/node_modules/isobject/package.json","hash":"5ee49d07ecdf8c6234792a6ceaec9b7bf953c81c","modified":1577852770330},{"_id":"themes/next/node_modules/mv/test/a-folder/another-file","hash":"a48704c667f28de3d9f904597b15bade6fa8826d","modified":1435010794000},{"_id":"themes/next/node_modules/object.pick/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/node_modules/object.pick/node_modules/isobject/package.json","hash":"f61007a605392a39a0155eef02b8771ee6588cfa","modified":1577852770282},{"_id":"themes/next/node_modules/randomatic/node_modules/kind-of/CHANGELOG.md","hash":"06349b88ecf879e500471de6e43d582fa4d885e1","modified":1507937197000},{"_id":"themes/next/node_modules/object.pick/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/randomatic/node_modules/kind-of/README.md","hash":"f0c7bf6cc5158819dd5a47e1f6d4c4c3f6b2a0e5","modified":1512153016000},{"_id":"themes/next/node_modules/randomatic/node_modules/kind-of/index.js","hash":"79c2ee61d58c64c47dfd123ac9736e9006248845","modified":1512153024000},{"_id":"themes/next/node_modules/randomatic/node_modules/is-number/index.js","hash":"1d1c55cc7a5c2276722ffb60a97ace46c7e75189","modified":1508218977000},{"_id":"themes/next/node_modules/randomatic/node_modules/is-number/README.md","hash":"c17e8926fae96d0220c8a5c2e1877b6dd9d66d07","modified":1473549391000},{"_id":"themes/next/node_modules/randomatic/node_modules/kind-of/package.json","hash":"0d6b1eb3bb7687f8f755824f869e2ee4b453a4f8","modified":1577852769928},{"_id":"themes/next/node_modules/randomatic/node_modules/is-number/package.json","hash":"ff2b3c1fad5c47636aedfc62178f7c61d0286c29","modified":1577852769928},{"_id":"themes/next/node_modules/randomatic/node_modules/kind-of/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1507889208000},{"_id":"themes/next/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","hash":"1fafe6e2e28a4404db90ae6dc867199b74468ca4","modified":499162500000},{"_id":"themes/next/node_modules/randomatic/node_modules/is-number/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1508218881000},{"_id":"themes/next/node_modules/readdirp/node_modules/arr-diff/README.md","hash":"e0f6660954d1864a842222ca5c0cffc4ccd1f79e","modified":1492143074000},{"_id":"themes/next/node_modules/readdirp/node_modules/arr-diff/index.js","hash":"9d523b1bc59bb7b09cf68c206061c4093b2bd1b3","modified":1492142948000},{"_id":"themes/next/node_modules/readdirp/node_modules/arr-diff/package.json","hash":"befedb8dd33abe854e708e2b96ba4ec02f153b6f","modified":1577852769904},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/README.md","hash":"44ff0df757ed952c9baea6dd9a1b827ce8c732eb","modified":499162500000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/index.js","hash":"ac5c745d5a34fcb2fb2b882660fadcafd22b9508","modified":499162500000},{"_id":"themes/next/node_modules/readdirp/node_modules/arr-diff/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1440300569000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/package.json","hash":"4c18d8356c3289e46a54c1c9d26ac71899f0c9a7","modified":1577852768926},{"_id":"themes/next/node_modules/readdirp/node_modules/array-unique/README.md","hash":"d66a5a8392ed1ec470d42339a98671a1bb4cd72a","modified":1470012675000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/LICENSE","hash":"8e9f50463a3d515808c3a428e18049425d584c1c","modified":499162500000},{"_id":"themes/next/node_modules/readdirp/node_modules/array-unique/index.js","hash":"0b0dd7bd39ce82a63812cd63c0facbf9e30cc5a6","modified":1470012516000},{"_id":"themes/next/node_modules/readdirp/node_modules/array-unique/package.json","hash":"8e12ed0662936c685e0d22626cdc8f2cc0c698d6","modified":1577852769834},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/README.md","hash":"c968b9c593c4d55b9bf4c0330411494546b70d7f","modified":1474958716000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/changelog.md","hash":"5e9e5db3f6d68d4b36131adb86e30956096d0ed2","modified":1475921290000},{"_id":"themes/next/node_modules/readdirp/node_modules/array-unique/LICENSE","hash":"64fab20ef9c097beeb8f38596e9462b2d6cff0c2","modified":1427255160000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/index.js","hash":"aba5af98fe2cc3e88129db44d77994fd9d717d79","modified":1477024078000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/package.json","hash":"577cfa5bb9d221789cc43e7b46a71f6bba824b95","modified":1577852768926},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/LICENSE","hash":"6b6e43e748f05929750a1016160c9ade94e7e644","modified":1474958716000},{"_id":"themes/next/node_modules/readdirp/node_modules/fill-range/README.md","hash":"01758f9b2cfb11a0021f45989b20ab76173bb884","modified":1492927269000},{"_id":"themes/next/node_modules/readdirp/node_modules/fill-range/index.js","hash":"f8a6ffe3db726dac21842732c3e88295d1fd2ae8","modified":1492927795000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/changelog.md","hash":"10b451b080dcbfc9ceff5807bd2eafda946071ee","modified":1505103611000},{"_id":"themes/next/node_modules/readdirp/node_modules/fill-range/package.json","hash":"4b9ac7c7b9c54e58731d05656120a0c998b13aa7","modified":1577852769197},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/README.md","hash":"c023bb5df5d65eb4fff0a661107ee47d10c98f84","modified":1513899866000},{"_id":"themes/next/node_modules/readdirp/node_modules/fill-range/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1473922241000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/index.js","hash":"a6dfc0630eb89aa9f89e4a60b7632ccab10209ba","modified":1513899502000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/package.json","hash":"41b4f00e389b773213476010bdf377c672d3614f","modified":1577852768926},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1504821250000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-accessor-descriptor/README.md","hash":"379dbe241fd1d29d74982e9afcfeecdfe813afbd","modified":1451294530000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-accessor-descriptor/index.js","hash":"47aae8526ab11bae1851975a8fb9f5949fd56857","modified":1509516656000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-descriptor/index.js","hash":"54e79e0eba499b81321d63dfefa72035e2c67d45","modified":1514502680000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-accessor-descriptor/package.json","hash":"522f8f268658098ab97c0efa239ede447211b886","modified":1577852769758},{"_id":"themes/next/node_modules/readdirp/node_modules/is-descriptor/README.md","hash":"12ceec1c2689f3245d70a237e7dd930f9484325d","modified":1488061756000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-accessor-descriptor/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1509516661000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-descriptor/package.json","hash":"e50b95ae896a036d4cb819e45caa97d00c682c97","modified":1577852769757},{"_id":"themes/next/node_modules/readdirp/node_modules/is-data-descriptor/README.md","hash":"3923de5c69d9f5178a77dca469bff2374950afcb","modified":1509517990000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-descriptor/LICENSE","hash":"abb6bd03bea71e8684cd8036a3383bb0839a84b6","modified":1500738397000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-data-descriptor/index.js","hash":"66b2f353b84f6cd5529a5000b3f164c27f3465c5","modified":1509517932000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-number/index.js","hash":"b22d833d4a0c519477a1984e15e00bdaaceaedc0","modified":1473549246000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-data-descriptor/package.json","hash":"a3c5aa93bc6af449d891d00562ade84d1212e39c","modified":1577852769833},{"_id":"themes/next/node_modules/readdirp/node_modules/is-number/README.md","hash":"892a9c0178417ded6bed7f3ce8778aa0f955859c","modified":1473549391000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-number/package.json","hash":"df576c2e7ab96e1e09cbb4db44988abb3007a58a","modified":1577852769758},{"_id":"themes/next/node_modules/readdirp/node_modules/is-data-descriptor/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1509517852000},{"_id":"themes/next/node_modules/readdirp/node_modules/kind-of/CHANGELOG.md","hash":"06349b88ecf879e500471de6e43d582fa4d885e1","modified":1507937197000},{"_id":"themes/next/node_modules/readdirp/node_modules/kind-of/README.md","hash":"f0c7bf6cc5158819dd5a47e1f6d4c4c3f6b2a0e5","modified":1512153016000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-number/LICENSE","hash":"64fab20ef9c097beeb8f38596e9462b2d6cff0c2","modified":1472751364000},{"_id":"themes/next/node_modules/readdirp/node_modules/kind-of/package.json","hash":"588df6d72789ba5b3032e4d20fba276d035dbec9","modified":1577852769757},{"_id":"themes/next/node_modules/readdirp/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/readdirp/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/readdirp/node_modules/kind-of/index.js","hash":"79c2ee61d58c64c47dfd123ac9736e9006248845","modified":1512153024000},{"_id":"themes/next/node_modules/readdirp/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/node_modules/readdirp/node_modules/kind-of/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1507889208000},{"_id":"themes/next/node_modules/readdirp/node_modules/isobject/package.json","hash":"aa0fe1ad90a28b2fa169eff2271d7cc884c4c884","modified":1577852769758},{"_id":"themes/next/node_modules/readdirp/node_modules/micromatch/CHANGELOG.md","hash":"dd1fd12fd79383ed82edb29d9d97870dde0ab684","modified":1577852765113},{"_id":"themes/next/node_modules/readdirp/node_modules/micromatch/index.js","hash":"1580d6b1184ff47a820759c5c2623b7774c04b41","modified":1577852765123},{"_id":"themes/next/node_modules/readdirp/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/readdirp/node_modules/micromatch/README.md","hash":"eb9b97710b17883ecd5acf599f05cfc70a92e919","modified":1577852765140},{"_id":"themes/next/node_modules/set-value/node_modules/extend-shallow/index.js","hash":"50d4474d1d223c4059319b3491832064d5b78b05","modified":1435564532000},{"_id":"themes/next/node_modules/readdirp/node_modules/micromatch/package.json","hash":"e24c361d235b164d996a6aa2a140287bfe5a3e78","modified":1577852768926},{"_id":"themes/next/node_modules/set-value/node_modules/extend-shallow/README.md","hash":"38ad3cd3bbca00d5d00f4fa9f3c15e3af88d5610","modified":1435564577000},{"_id":"themes/next/node_modules/snapdragon/node_modules/extend-shallow/index.js","hash":"50d4474d1d223c4059319b3491832064d5b78b05","modified":1435564532000},{"_id":"themes/next/node_modules/readdirp/node_modules/micromatch/LICENSE","hash":"8e9f50463a3d515808c3a428e18049425d584c1c","modified":1577852765131},{"_id":"themes/next/node_modules/set-value/node_modules/extend-shallow/package.json","hash":"68e5efec63fb9a9f094ecfb4ee8c5b735f22e392","modified":1577852769550},{"_id":"themes/next/node_modules/set-value/node_modules/extend-shallow/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1425326601000},{"_id":"themes/next/node_modules/snapdragon/node_modules/extend-shallow/README.md","hash":"38ad3cd3bbca00d5d00f4fa9f3c15e3af88d5610","modified":1435564577000},{"_id":"themes/next/node_modules/snapdragon/node_modules/extend-shallow/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1425326601000},{"_id":"themes/next/node_modules/snapdragon/node_modules/extend-shallow/package.json","hash":"8c74786eddc9b1574c8acba2ad79285ab4a3f23a","modified":1577852769320},{"_id":"themes/next/node_modules/snapdragon/node_modules/define-property/README.md","hash":"731c043ebda3bb6e54e955c5792c4aacaace5aa4","modified":1441002657000},{"_id":"themes/next/node_modules/snapdragon/node_modules/define-property/index.js","hash":"1779d5d78512cd02819b2814468372d32607c508","modified":1441002563000},{"_id":"themes/next/node_modules/snapdragon/node_modules/define-property/package.json","hash":"f67a0dfde19ea4062e950d1e78c67f9f1a493058","modified":1577852769322},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/define-property/README.md","hash":"84087d93a22bf582f200f4416d44ddf5e258349d","modified":1492669019000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/define-property/index.js","hash":"f116f1ce7657d27ccd8bb7b73a489d3b1673b2dd","modified":1441002563000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/define-property/package.json","hash":"3a8401bdc4303182557ee58f04b0e859fc525253","modified":1577852769476},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-accessor-descriptor/README.md","hash":"379dbe241fd1d29d74982e9afcfeecdfe813afbd","modified":1451294530000},{"_id":"themes/next/node_modules/snapdragon/node_modules/define-property/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1439429105000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-accessor-descriptor/index.js","hash":"47aae8526ab11bae1851975a8fb9f5949fd56857","modified":1509516656000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/define-property/LICENSE","hash":"f68c4db2c6e52008367016b77eaaee30acbb2d36","modified":1439429105000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-accessor-descriptor/package.json","hash":"33b6818cd6ba2e792dc700baff585394b5e7601e","modified":1577852769501},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-data-descriptor/index.js","hash":"66b2f353b84f6cd5529a5000b3f164c27f3465c5","modified":1509517932000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-accessor-descriptor/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1509516661000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-data-descriptor/README.md","hash":"3923de5c69d9f5178a77dca469bff2374950afcb","modified":1509517990000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-descriptor/index.js","hash":"54e79e0eba499b81321d63dfefa72035e2c67d45","modified":1514502680000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-data-descriptor/package.json","hash":"fa5c2c00ba3d100edb65946b2467df375a4ef131","modified":1577852769476},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-data-descriptor/LICENSE","hash":"57c4fbf72d7f9fbd417aae78527d76653fa63245","modified":1509517852000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-descriptor/README.md","hash":"12ceec1c2689f3245d70a237e7dd930f9484325d","modified":1488061756000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-descriptor/LICENSE","hash":"abb6bd03bea71e8684cd8036a3383bb0839a84b6","modified":1500738397000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/is-descriptor/package.json","hash":"94b83b9172357bf018187b6c878004dc0197e1f8","modified":1577852769476},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/isobject/package.json","hash":"975c8e67de6d285ecb2c548a3b34ad3c7e4842a9","modified":1577852769550},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/kind-of/CHANGELOG.md","hash":"06349b88ecf879e500471de6e43d582fa4d885e1","modified":1507937197000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/kind-of/README.md","hash":"f0c7bf6cc5158819dd5a47e1f6d4c4c3f6b2a0e5","modified":1512153016000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/kind-of/index.js","hash":"79c2ee61d58c64c47dfd123ac9736e9006248845","modified":1512153024000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/kind-of/package.json","hash":"8bac735505c327d40b4ab238da91c7d7a603ce71","modified":1577852769550},{"_id":"themes/next/node_modules/static-extend/node_modules/define-property/README.md","hash":"731c043ebda3bb6e54e955c5792c4aacaace5aa4","modified":1441002657000},{"_id":"themes/next/node_modules/to-regex-range/node_modules/is-number/index.js","hash":"b22d833d4a0c519477a1984e15e00bdaaceaedc0","modified":1473549246000},{"_id":"themes/next/node_modules/snapdragon-node/node_modules/kind-of/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1507889208000},{"_id":"themes/next/node_modules/static-extend/node_modules/define-property/package.json","hash":"497a99968bc17d2d0c711b723794680ca038bd00","modified":1577852769246},{"_id":"themes/next/node_modules/static-extend/node_modules/define-property/index.js","hash":"1779d5d78512cd02819b2814468372d32607c508","modified":1441002563000},{"_id":"themes/next/node_modules/static-extend/node_modules/define-property/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1439429105000},{"_id":"themes/next/node_modules/to-regex-range/node_modules/is-number/README.md","hash":"892a9c0178417ded6bed7f3ce8778aa0f955859c","modified":1473549391000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-value/index.js","hash":"d6cd21f716fdb95f09c9463a649eae9c9e155d37","modified":1459091782000},{"_id":"themes/next/node_modules/to-regex-range/node_modules/is-number/package.json","hash":"2914a6853cbee2f297f81e2ef68557c091feb966","modified":1577852769221},{"_id":"themes/next/node_modules/to-regex-range/node_modules/is-number/LICENSE","hash":"64fab20ef9c097beeb8f38596e9462b2d6cff0c2","modified":1472751364000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-value/README.md","hash":"798bbcee796e75773f4909eb3d0e74e2719200fa","modified":1459091762000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-values/index.js","hash":"135c2b8cffce7301d1bf23f2d6142c07395be98e","modified":1427249090000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-value/package.json","hash":"d3e27db2a2099654c46fe089cab8479e9ff70439","modified":1577852769196},{"_id":"themes/next/node_modules/unset-value/node_modules/isobject/index.d.ts","hash":"ae41e7ca6ad479e2a1161e7540d9a51a577ebaa1","modified":1498843625000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-values/README.md","hash":"d402b322829c490afe79d7e9bdd492fde44f4e5a","modified":1459080640000},{"_id":"themes/next/node_modules/unset-value/node_modules/isobject/index.js","hash":"18a7a9bfc3b3b46e469c39697bceb5d86ce1b624","modified":1498846639000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-values/package.json","hash":"0ef0dd978d1d7ea28ea4fcd41df6d2c3e06a8d50","modified":1577852769173},{"_id":"themes/next/node_modules/unset-value/node_modules/has-value/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1427312717000},{"_id":"themes/next/node_modules/unset-value/node_modules/isobject/LICENSE","hash":"2d068b89820b596b358e9751c35622f386f3aaa8","modified":1498846081000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-values/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1427249090000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1577721462635},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1577721462635},{"_id":"themes/next/node_modules/unset-value/node_modules/isobject/README.md","hash":"fe4fafcde2234831391b04c3d447e01904aa2bad","modified":1480627498000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1577721462635},{"_id":"themes/next/node_modules/unset-value/node_modules/isobject/package.json","hash":"8717e58c151c2ef49181b9893944720c5ca45cbd","modified":1577852769196},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1577721462635},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1577721462635},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1577721462643},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1577721462638},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1577721462647},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1577721462647},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1577721462647},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1577721462647},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1577721462647},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1577721462648},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1577721462649},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1577721462648},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1577721462649},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1577721462649},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1577721462649},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1577721462650},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1577721462650},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1577721462650},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1577721462651},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1577721462652},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1577721462652},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1577721462652},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1577721462652},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1577721462652},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1577721462652},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1577721462653},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1577721462653},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1577721462653},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1577721462653},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1577721462653},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1577721462662},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1577721462662},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1577721462662},{"_id":"themes/next/source/lib/Han/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1577762143637},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1577721462660},{"_id":"themes/next/source/lib/Han/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1577762140097},{"_id":"themes/next/source/lib/Han/.git/config","hash":"bdc479aba5357f8dfc01db46cea9abcf2743fdd7","modified":1577762143640},{"_id":"themes/next/source/lib/Han/.git/packed-refs","hash":"f2d02ddb66a0daab04792c58479b228feda2f951","modified":1577762143634},{"_id":"themes/next/source/lib/Han/.git/index","hash":"a31df0c20a61c2467fec554fe6b601aa491f8d3a","modified":1577762143653},{"_id":"themes/next/source/lib/Han/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1577762143648},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1577762143652},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1577721462666},{"_id":"themes/next/node_modules/bluebird/js/browser/bluebird.min.js","hash":"f5c71425ead80669134f75211bcc87b1ce8e9a99","modified":499162500000},{"_id":"themes/next/node_modules/bluebird/js/browser/bluebird.core.js","hash":"4faaac4efea1433dfa43ade723ae1fed2c260153","modified":499162500000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1577762143652},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1577721462667},{"_id":"themes/next/node_modules/ncp/test/regular-fixtures/src/d","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1417018463000},{"_id":"themes/next/node_modules/ncp/test/regular-fixtures/src/c","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1417018463000},{"_id":"themes/next/node_modules/ncp/test/regular-fixtures/src/f","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1417018463000},{"_id":"themes/next/node_modules/ncp/test/regular-fixtures/src/e","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1417018463000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577721462665},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577721462665},{"_id":"themes/next/node_modules/source-map/dist/source-map.min.js.map","hash":"28941678b7356d721f17a74c4d0bf945d6bccc04","modified":1503322374000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1577721462668},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1577762143651},{"_id":"themes/next/node_modules/moment/min/locales.min.js","hash":"d6f752197399a21ecce5ff3a8e1aa627f421b85e","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/date-from-array.js","hash":"37a7b6837c0db67350da70bb44cef8b3b61f2e4f","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/check-overflow.js","hash":"5eca9703243cdaaf5648cce596d5d9964eb94c98","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/from-array.js","hash":"941ba19746d094c0c04e786195ce822610bd1c23","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/from-anything.js","hash":"f213f5115195de90f372ee44a51ba9eadb25c0ba","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/from-object.js","hash":"dcb90c6dcfaa874ccb1dda84424137aaf565a244","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/local.js","hash":"6b7c65e9ca16eba14ddddeecc1b003b984c78fde","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/parsing-flags.js","hash":"99da4478b26bb4c1ed50d5feabd4d1049193986b","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/utc.js","hash":"7b05ddc73ee99b7f13f526adbe5ef6d25b87b8b9","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/from-string-and-array.js","hash":"0dd8f1960db97f65ac71395c5c627327ebe7b769","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/from-string-and-format.js","hash":"afbd37e1bbc2b59746635b8439a8732177203518","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/abs.js","hash":"7970d96eb35228bb3ecb4603b63b27d3756367ad","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/add-subtract.js","hash":"0fd8c21e60721fe9945b83988cd2b47122f45c6f","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/from-string.js","hash":"8a5d11585a99e5dd4257d40f2080642c6b97ae5a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/create/valid.js","hash":"50818acc3aa93f580376bd30916a9359547a74dd","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/clone.js","hash":"7ae86719b47c41d77be37909771ebfbd4cc22b8c","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/duration.js","hash":"31e369b9d7179286568d61783bcf491e13b85f3c","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/as.js","hash":"2af94cfd58a295426e69d2671be4d6aaa1b67af3","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/bubble.js","hash":"fd42b8707944aca1780433a52b74ce2f2889fd41","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/constructor.js","hash":"03adf39225c2e8336e070779d814ad14467e65c6","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/create.js","hash":"35dd29f3f719831ed558955b703250f8290041dd","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/get.js","hash":"a11b95805a9a67d70f3f83d683c880481ec826c5","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/humanize.js","hash":"6dbf4405af5bc44e8688b012e1855e52e62cba92","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/iso-string.js","hash":"99d9214c155c2e5dd622d3c1cd95ea9318589c98","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/prototype.js","hash":"fe0481f7684284ddfb1f3ea87afbaea988f79a47","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/calendar.js","hash":"422e8f0d039ab047c6e94cde981fcf4afd48179e","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/en.js","hash":"b8cd576b547ee4dcfde714315f3c6741f77bedcc","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/constructor.js","hash":"4c99dfd1739fa75db2c2fd920dd5defbdd1f0030","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/base-config.js","hash":"a54ba739ac31f745d39f56c85908ebff3bbd2178","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/duration/valid.js","hash":"3d579ae000556bcd8fb905c7526e201510baf906","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/formats.js","hash":"745faed207ad9922484cf0b551ca0faf45e2cbb0","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/invalid.js","hash":"f719dd1276dceb5593675314c1bd3c4afb33f3c0","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/ordinal.js","hash":"16794f45255732ba8f8a8c20b72eb427ea4c1a97","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/format/format.js","hash":"022f3b11c33b096245dd7d727fd31f66f23e33b7","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/pre-post-format.js","hash":"da591dacc6f6be5e6a38dd204a2c3aba8ebff07f","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/lists.js","hash":"17d12b7ae719d7edee5106b5e6565a3d634945af","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/locale.js","hash":"2e00925beeb939bef0a1fac476b6c76f9b58c180","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/locales.js","hash":"364121637257401d49b023ebb1bc30c598c31a86","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/prototype.js","hash":"22a17915e51aa0eeda3e13fffc76762822fa32a1","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/relative.js","hash":"a115cccfbd6d0bfec41c1d53114f2299e6cd05b3","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/locale/set.js","hash":"f53c6d0f3feb85db364fe539143faa1b212821c5","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/clone.js","hash":"28653ed90f185af48a3f59fe843b7691bde47ce2","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/add-subtract.js","hash":"dae6987d13e30ae9952f0773bef1ce3fd9fc3a58","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/creation-data.js","hash":"4673ff4ae13812dd63731aefa0f98fdb58d08bd7","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/calendar.js","hash":"757c364df57f2948148d1d41f7db9bc5cf5cdfb9","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/compare.js","hash":"a2dad04f5b88eb349556961802935154e985dc2a","modified":499162500000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1577762143651},{"_id":"themes/next/node_modules/moment/src/lib/moment/constructor.js","hash":"ef0d02f717bf7737daddf6a529885dfdf3af54f4","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/format.js","hash":"8f91c4d9adc4a38278e25a1cc997b9b5d60a9a51","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/from.js","hash":"76885ca5df3fa448d85db79d21417328c47a7526","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/diff.js","hash":"3358733b790896c5c3df04316c3f405869a9eeb9","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/moment.js","hash":"87ec5cd2be62750d3d911d7fa48bed7e65d58b72","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/get-set.js","hash":"a341d70c3b001da07a3bf7b6535a9bf5d9bc4521","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/now.js","hash":"693a36ace148dca0c85c462e8807c754bc5a1826","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/locale.js","hash":"65a2e75f9d3aba7873ab65c5ce2ff635aa161676","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/min-max.js","hash":"8fc7d30f7ccfc15fbfab5b340b9349434cbad7ac","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/to.js","hash":"c783783792c1e65861196899493580d99e7f5ed9","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/valid.js","hash":"358c8898e1991e71977230a26ef5f96aa4ca03e3","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/prototype.js","hash":"6bbc0787dc92dbd8bef33f638c6ef7b87777b7c4","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/start-end-of.js","hash":"a50fa2cf65ef66c7a865522549579fcfa8b6c7c4","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/abs-ceil.js","hash":"cbe89a30190bc1ed24d22f97c4cf824d9ecfe22c","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/abs-floor.js","hash":"14e835a73463b7638602313a8bb999abd879dc1e","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/moment/to-type.js","hash":"eb9e331061cdfe96224c395ee32cd13ba01c291f","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/compare-arrays.js","hash":"98362fe208ec6819fb10c1377e4c29f60df2cd67","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/abs-round.js","hash":"ab565f07682ac2f9526861c3714925d0d516f3a8","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/defaults.js","hash":"23d889aa1c1ebf29489955df68ee0863df09325d","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/parse/regex.js","hash":"1e6595550e6d854f2d9537f9678aee421becec5a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/extend.js","hash":"8ddf09c4d51a5cca4a7f389a13530a97abf9267f","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/has-own-prop.js","hash":"29cad3d80496e33e738306d8e33d76ef6f52fafd","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/hooks.js","hash":"83fde0451f1c8d15c73978bbb8d941b083a0177a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/index-of.js","hash":"b8060c497bbd6f76364bfeffccfab2ef55776ef8","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/parse/token.js","hash":"70c25cc4e7ac2138c7d7b87881200c2faa143d50","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/is-array.js","hash":"fefa05cb72285be0bdd3bbcd667ef4c4fc007a41","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/is-date.js","hash":"de623e76e5abbc4a989105530cb3ea56a7d358ca","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/is-object-empty.js","hash":"6ffeb0aaee85dcfe657aaa9be2dc8d5ff91cf5dd","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/is-number.js","hash":"83b1e4ec2836fe295de1b24ffef39ed569c586db","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/deprecate.js","hash":"1f46e2931aa788295eec0f3af7e36b524481cf8b","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/is-object.js","hash":"2b4153f7a3170e5db5ca8e179726abc31f72e30c","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/is-undefined.js","hash":"073c7156a8b0a1580ef38bed126f0b981ea025bb","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/is-function.js","hash":"0129d069077b5c9ea4e0b39281a0554489372c23","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/map.js","hash":"76a82ff4dfdb612ce4233339372b902fbef84768","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/mod.js","hash":"b10c21f16f9d8fa200d1119e98149cde8caecbf2","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/keys.js","hash":"2a83c998133df29806128760f38e07f9e8540695","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/some.js","hash":"f3f99788200e51c767a85fe41efd40409fc817e7","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/to-int.js","hash":"2584cdc4e7102dfa932a8ba84d4051d4f3dde5ed","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/utils/zero-fill.js","hash":"19208d299f6befe694591fd2912306e0f28f1e0d","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/constants.js","hash":"191bac7e3f512f7c878840d9ac4142f83be90ec6","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/aliases.js","hash":"d05738b4a8499cac86c552907da325391b84c0aa","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/day-of-month.js","hash":"61cbb6d09cdcf4c7be366187a55a2e5b451d3395","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/hour.js","hash":"d325fe7bc479546d94550ee994e1509d48f33005","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/minute.js","hash":"f8a800a3077d4ac78af3ac0ac80f2cb1bb8d3cf1","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/priorities.js","hash":"055a4899805f6d3b40504072426e146e666f9cc2","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/day-of-year.js","hash":"3332403b269764733b11b74570f7878b548ddcdd","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/millisecond.js","hash":"821ccd1797c28cc384cd21a871913c484ff2611e","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/second.js","hash":"ed0266435250c25609ad62c4fc2b578ba719015a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/timestamp.js","hash":"f88f2f7a738c12ac183a8a6c75529c99390c892e","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/month.js","hash":"8e9da1b70b137f25a20ea7bdbde23bc24c809f7f","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/timezone.js","hash":"6003686691e1b58e7a5704077d597c403f01a72a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/units.js","hash":"44ff48f40c6c72cc04eae845d963653d758ff130","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/offset.js","hash":"f51fc54c4bfab304106ebbe864bdd7e15e8b170a","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/quarter.js","hash":"482e071ff9d870d4f0db66ff97d957f4175fd790","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/week-calendar-utils.js","hash":"da0d4141725fb331359ab7c7e4e66f476bb38a90","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/week-year.js","hash":"876efd2a0d40a20d1f29fd8dbc96deba5796ecf4","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/week.js","hash":"7407c7b2eb931589b8a98a06809d3101243f3546","modified":499162500000},{"_id":"themes/next/node_modules/moment/src/lib/units/year.js","hash":"0966b292f2b6e42e92aa2af8a9c524cd04324fa7","modified":499162500000},{"_id":"themes/next/node_modules/ncp/test/modified-files/src/a","hash":"3ebfa301dc59196f18593c45e519287a23297589","modified":1420066800000},{"_id":"themes/next/node_modules/ncp/test/regular-fixtures/src/b","hash":"fb5daf630041e068b84f4da56445e48967684408","modified":1417018463000},{"_id":"themes/next/node_modules/ncp/test/modified-files/out/a","hash":"3ebfa301dc59196f18593c45e519287a23297589","modified":1420066800000},{"_id":"themes/next/node_modules/mv/test/a-folder/another-folder/file3","hash":"f931708697a1755792e601b2a7d31902ee464a25","modified":1435010794000},{"_id":"themes/next/node_modules/readable-stream/lib/internal/streams/stream-browser.js","hash":"0167a0dc72daab83989846563aae870f37549151","modified":499162500000},{"_id":"themes/next/node_modules/ncp/test/symlink-fixtures/src/foo","hash":"8a44735524900cdc94460b8999b581836535470e","modified":1417018463000},{"_id":"themes/next/node_modules/readable-stream/lib/internal/streams/stream.js","hash":"90b89ec87417d1301e7615a3ba50b04626c2796c","modified":499162500000},{"_id":"themes/next/node_modules/ncp/test/regular-fixtures/src/a","hash":"33ab5639bfd8e7b95eb1d8d0b87781d4ffea4d5d","modified":1417018463000},{"_id":"themes/next/node_modules/readable-stream/lib/internal/streams/BufferList.js","hash":"8fd98c787f1764c80b11306d6acfb7d3b35c7d27","modified":499162500000},{"_id":"themes/next/node_modules/readable-stream/lib/internal/streams/destroy.js","hash":"d0307824af8519303bdf619abfd31633e68bd6dc","modified":499162500000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/lib/compilers.js","hash":"09201be2d166095c9c02761f9f1b8ff956f80a4b","modified":499162500000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/lib/braces.js","hash":"0752727677138403da1c8d02470c98c0c7ff12bb","modified":499162500000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/lib/parsers.js","hash":"7ab6db10a82b8dcb5f38350a588cafb11b0a08c1","modified":499162500000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/lib/utils.js","hash":"19ef00ae5a3dd1b03ea3376be63788dd97b61cd3","modified":499162500000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/lib/compilers.js","hash":"2a37e85ef2e6236bfe9195f9b9ad14f2fda04c29","modified":1481568461000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/lib/parsers.js","hash":"02ebcb798beecfecf5b48f2cd00462cd1406aecd","modified":1481567734000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/lib/utils.js","hash":"a8307a8fb711e5f6a47959cae3fa0965b5c35b0e","modified":1476936957000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/lib/compilers.js","hash":"44ff9167ccafd9166810cb9d9b2317b56b5032e9","modified":1515795079000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/lib/parsers.js","hash":"6e88b985e54bac5195889b0ca6939301dd5599e9","modified":1515795079000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/lib/utils.js","hash":"e10c1d0d15e6aaac20db3b193ada46997f3d42a4","modified":1504835585000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/lib/extglob.js","hash":"4855ef9b3d2675ba58aeefba7afb59e3b39f6e89","modified":1496190804000},{"_id":"themes/next/node_modules/readdirp/node_modules/micromatch/lib/compilers.js","hash":"fde223df66f150089c62060beae86815ad6f2604","modified":1577852765187},{"_id":"themes/next/node_modules/readdirp/node_modules/micromatch/lib/parsers.js","hash":"4c4ca5051f0dd6ef42a47e5e61098dd68bcbfb00","modified":1577852765199},{"_id":"themes/next/node_modules/readdirp/node_modules/micromatch/lib/utils.js","hash":"286f09856db14e48f789155d4017550890cc7a7c","modified":1577852765209},{"_id":"themes/next/node_modules/readdirp/node_modules/micromatch/lib/cache.js","hash":"950a838858eabb8ef308055a67628d1c0a4c19cf","modified":1577852765169},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/lib/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1475373666000},{"_id":"themes/next/node_modules/readdirp/node_modules/micromatch/lib/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1577852765159},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1577721462636},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1577721462636},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1577721462636},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1577721462636},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1577721462637},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1577721462637},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1577721462638},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1577721462638},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1577721462637},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1577721462638},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1577721462637},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1577721462637},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1577721462638},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1577721462637},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1577721462637},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1577721462638},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1577721462639},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1577721462639},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1577721462639},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1577721462639},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1577721462640},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"f1e6e6495e69c4da3e8167ffc56bfc4d17aa15e1","modified":1577721462640},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1577721462640},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1577721462640},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1577721462640},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1577721462640},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1577721462640},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1577721462641},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1577721462641},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1577721462641},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1577721462641},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1577721462641},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1577721462641},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1577721462641},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1577721462642},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1577721462642},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1577721462642},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1577721462642},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1577721462643},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1577721462643},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1577721462643},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1577721462643},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1577721462643},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1577721462643},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1577721462644},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1577721462644},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1577721462644},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1577721462645},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1577721462645},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1577721462645},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1577721462645},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1577721462645},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1577721462646},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1577721462646},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1577721462645},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1577721462646},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1577721462651},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1577721462646},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1577721462646},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1577721462651},{"_id":"themes/next/source/lib/Han/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1577762140097},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1577721462652},{"_id":"themes/next/source/lib/Han/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1577762140097},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1577762140098},{"_id":"themes/next/source/lib/Han/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1577762140097},{"_id":"themes/next/source/lib/Han/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1577762140097},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1577762140400},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1577762140401},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1577762140402},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1577762140404},{"_id":"themes/next/source/lib/Han/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1577762140405},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1577762140403},{"_id":"themes/next/source/lib/Han/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1577762140406},{"_id":"themes/next/source/lib/Han/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1577762140408},{"_id":"themes/next/source/lib/Han/.git/logs/HEAD","hash":"cf21af89a8793818c11ddcb10711e35da7a6d844","modified":1577762143638},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1577762143649},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1577762143649},{"_id":"themes/next/node_modules/moment/min/moment-with-locales.min.js","hash":"6319f4a7d5f345583a730ab527704ff2491a9043","modified":499162500000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1577762143650},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1577762143650},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1577762143650},{"_id":"themes/next/node_modules/moment/src/lib/units/day-of-week.js","hash":"f57f16f65b9a0a490120813a00d1589d7e6c3bde","modified":499162500000},{"_id":"themes/next/node_modules/ncp/test/regular-fixtures/src/sub/b","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1417018463000},{"_id":"themes/next/node_modules/source-map/dist/source-map.debug.js","hash":"a26c8de3235c7942b54c8bad310347d54300fd90","modified":1503322374000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577721462664},{"_id":"themes/next/node_modules/bluebird/js/browser/bluebird.js","hash":"e8912727f5d0ae9a15211b9a9dce108fd443c815","modified":499162500000},{"_id":"themes/next/node_modules/has-values/node_modules/is-number/node_modules/kind-of/README.md","hash":"f287584b785807e175d878885c66455a672217bd","modified":1494958295000},{"_id":"themes/next/node_modules/has-values/node_modules/is-number/node_modules/kind-of/index.js","hash":"f9e8418f23f97452410088786d5e0c7a981ced74","modified":1493120356000},{"_id":"themes/next/node_modules/has-values/node_modules/is-number/node_modules/kind-of/package.json","hash":"1a6df4501e32cb87f0a7dc729f4f209a1384b143","modified":1577852770989},{"_id":"themes/next/node_modules/has-values/node_modules/is-number/node_modules/kind-of/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1447758397000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/node_modules/extend-shallow/index.js","hash":"50d4474d1d223c4059319b3491832064d5b78b05","modified":1435564532000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/node_modules/extend-shallow/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1425326601000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/node_modules/extend-shallow/README.md","hash":"38ad3cd3bbca00d5d00f4fa9f3c15e3af88d5610","modified":1435564577000},{"_id":"themes/next/node_modules/readdirp/node_modules/braces/node_modules/extend-shallow/package.json","hash":"41217c306b81f256e1a34c2906c4d8b2476fa142","modified":1577852769928},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/define-property/README.md","hash":"731c043ebda3bb6e54e955c5792c4aacaace5aa4","modified":1441002657000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/define-property/index.js","hash":"1779d5d78512cd02819b2814468372d32607c508","modified":1441002563000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/define-property/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1439429105000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/extend-shallow/index.js","hash":"50d4474d1d223c4059319b3491832064d5b78b05","modified":1435564532000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/extend-shallow/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1425326601000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/define-property/package.json","hash":"eadd1824bd25cbbbebbf63fc250c3f00e4fb926d","modified":1577852769855},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/extend-shallow/README.md","hash":"38ad3cd3bbca00d5d00f4fa9f3c15e3af88d5610","modified":1435564577000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/extend-shallow/package.json","hash":"2f1443485d138c97ecc43ceb6838ba0c588fae46","modified":1577852769928},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-accessor-descriptor/README.md","hash":"ae3e26bdbc1655c71945c13fc210d4f7476452d1","modified":1451294530000},{"_id":"themes/next/node_modules/ncp/test/regular-fixtures/src/sub/a","hash":"4f29946bcf4013788060778fbbc2f7c25ffe21d4","modified":1417018463000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-accessor-descriptor/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1440999499000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-accessor-descriptor/index.js","hash":"0b876e50d0a0ab99e62ccf5a09588a7c64f9372f","modified":1451294141000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-accessor-descriptor/package.json","hash":"a11da8ab9e186fbf1de024702d199cea0bce8829","modified":1577852769928},{"_id":"themes/next/node_modules/ncp/test/symlink-fixtures/src/dir/bar","hash":"4acccb318abb44e0b8c4ba5e4e4a7fafa40243dd","modified":1417018463000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-data-descriptor/README.md","hash":"76882fbba5e8f5509239e9760c1b5123d7b14c4a","modified":1451292580000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-data-descriptor/index.js","hash":"b636d41a2828e34bb9e98a29937bc0ae7e0a5160","modified":1451292869000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-data-descriptor/package.json","hash":"41af800fea95f8a113fba305b3e9fa13f7431eb3","modified":1577852769904},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-descriptor/index.js","hash":"54e79e0eba499b81321d63dfefa72035e2c67d45","modified":1500738394000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-descriptor/package.json","hash":"0c20083b430268d861a9f14e1ff07b1c8f607006","modified":1577852769928},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-data-descriptor/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1440999537000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-descriptor/README.md","hash":"12ceec1c2689f3245d70a237e7dd930f9484325d","modified":1488061756000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/kind-of/index.js","hash":"0bae63095c3bc1b24271342691bb8e569d981b35","modified":1507878123000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-descriptor/LICENSE","hash":"abb6bd03bea71e8684cd8036a3383bb0839a84b6","modified":1500738397000},{"_id":"themes/next/node_modules/readdirp/node_modules/fill-range/node_modules/extend-shallow/index.js","hash":"50d4474d1d223c4059319b3491832064d5b78b05","modified":1435564532000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/kind-of/package.json","hash":"257c0469ba345bd4532e1163f0d5beb705bc266a","modified":1577852769903},{"_id":"themes/next/node_modules/readdirp/node_modules/fill-range/node_modules/extend-shallow/README.md","hash":"38ad3cd3bbca00d5d00f4fa9f3c15e3af88d5610","modified":1435564577000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/kind-of/LICENSE","hash":"d0ee9aa349ad4a47b319f691d67023e255ef81ba","modified":1507878123000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/node_modules/define-property/README.md","hash":"84087d93a22bf582f200f4416d44ddf5e258349d","modified":1492669019000},{"_id":"themes/next/node_modules/readdirp/node_modules/fill-range/node_modules/extend-shallow/package.json","hash":"ead8dd942da733bf360de5f230dbc009f4283a0f","modified":1577852769835},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/node_modules/define-property/index.js","hash":"f116f1ce7657d27ccd8bb7b73a489d3b1673b2dd","modified":1441002563000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/node_modules/extend-shallow/index.js","hash":"50d4474d1d223c4059319b3491832064d5b78b05","modified":1435564532000},{"_id":"themes/next/node_modules/readdirp/node_modules/fill-range/node_modules/extend-shallow/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1425326601000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/node_modules/define-property/package.json","hash":"26d570977d2ee3a8fbb40c9964206ee241d92de4","modified":1577852769834},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/node_modules/extend-shallow/README.md","hash":"38ad3cd3bbca00d5d00f4fa9f3c15e3af88d5610","modified":1435564577000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/node_modules/define-property/LICENSE","hash":"f68c4db2c6e52008367016b77eaaee30acbb2d36","modified":1439429105000},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/node_modules/extend-shallow/package.json","hash":"3cebca06343050eec9311188df2fbdd01b0a3f91","modified":1577852769854},{"_id":"themes/next/node_modules/readdirp/node_modules/is-number/node_modules/kind-of/index.js","hash":"f9e8418f23f97452410088786d5e0c7a981ced74","modified":1493120356000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-number/node_modules/kind-of/README.md","hash":"f287584b785807e175d878885c66455a672217bd","modified":1494958295000},{"_id":"themes/next/node_modules/readdirp/node_modules/is-number/node_modules/kind-of/package.json","hash":"fa7336c01efd26f31390759d0364aed66b1c441e","modified":1577852769834},{"_id":"themes/next/node_modules/readdirp/node_modules/extglob/node_modules/extend-shallow/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1425326601000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-value/node_modules/isobject/index.js","hash":"8da9927ffb038a7aa79044b181f555522f52e102","modified":1461618070000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-value/node_modules/isobject/README.md","hash":"0a45cf971072445d3a2ca2d52920e6e668c015eb","modified":1461618236000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-value/node_modules/isobject/package.json","hash":"6a6fa949c523ac0f9bd91b6d68341dea4995d0c1","modified":1577852769321},{"_id":"themes/next/node_modules/readdirp/node_modules/is-number/node_modules/kind-of/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1447758397000},{"_id":"themes/next/node_modules/unset-value/node_modules/has-value/node_modules/isobject/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1429583250000},{"_id":"themes/next/source/lib/Han/.git/objects/12/e5ad35b941c6dc1c10c0db6a04cd7bc7136d79","hash":"65020d9c30858a2131ec75547ad8daff94916274","modified":1577762142253},{"_id":"themes/next/source/lib/Han/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1577762142302},{"_id":"themes/next/source/lib/Han/.git/objects/01/1e06c7aa90464f2b1d40aae05cf9d69e7667f1","hash":"e9888d4243b096c91da6cd30a348734b88c652e4","modified":1577762142733},{"_id":"themes/next/source/lib/Han/.git/objects/02/c49afbd642c373142ce96b321820b2e31136dc","hash":"1e84c7eb747dd99355ec99a190aca59f10f38a61","modified":1577762142757},{"_id":"themes/next/source/lib/Han/.git/objects/14/222c5cf0874b3d006fcab6244c9e34c13cae11","hash":"32841604a28018f255ed74be25a3fed374729561","modified":1577762143137},{"_id":"themes/next/source/lib/Han/.git/objects/14/ffa69f0388b6648af6e413387201f1c5dc34b2","hash":"d94589ced41c1438b11e1a02ae2ed8695ec4bfe3","modified":1577762141687},{"_id":"themes/next/source/lib/Han/.git/objects/1a/dff38de35c5dcd90b1c9abb363d60cedc677c3","hash":"e3bb99642f5f820b6e41c5a2dbeaa5a5e7629cf9","modified":1577762142032},{"_id":"themes/next/source/lib/Han/.git/objects/1b/2d9ec86c12358ba35f7db597cccb93c4977154","hash":"7e90faafec65ae60455922b819ad373460c708c4","modified":1577762143383},{"_id":"themes/next/source/lib/Han/.git/objects/1b/d905fca417b7dc6e1091fbf5dcb99a8e3f44a3","hash":"f904eb01291a0c87f34747183435918e4696a960","modified":1577762141886},{"_id":"themes/next/source/lib/Han/.git/objects/29/c753eafb74ec88615f947d25acb4659340747d","hash":"5d0cc15f306cc2c34a9107c6aeb3576b90343956","modified":1577762142843},{"_id":"themes/next/source/lib/Han/.git/objects/2c/e2f46ca183a46f1b06517b1a2a8f96bcaab1b8","hash":"e9a8ddf8b0af2f52063c05075df107b7aacc0d91","modified":1577762142648},{"_id":"themes/next/source/lib/Han/.git/objects/47/b5af07d4d3fd429c6f4b405ff9acd5f4ee7975","hash":"0e69266d563abb092c5b40035331345f771021c2","modified":1577762143089},{"_id":"themes/next/source/lib/Han/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1577762142351},{"_id":"themes/next/source/lib/Han/.git/objects/57/3ad3f32f0689138c4d6f7007621e0cf2bf23ea","hash":"fdb2d9e977cbbd0b44059cf61d5baad92f9df016","modified":1577762143565},{"_id":"themes/next/source/lib/Han/.git/objects/4b/5f7d0162b051571cc9d87ba674ef913a7c5a29","hash":"8738e2f3453a3192d07fb0267d9f9194b910bee7","modified":1577762142598},{"_id":"themes/next/source/lib/Han/.git/objects/5f/7d3c8d8a6340f1efccc4b3eac842788c1628ec","hash":"af2accb69f344e9cfc870ca7dbe8d25c9e103318","modified":1577762141836},{"_id":"themes/next/source/lib/Han/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1577762142401},{"_id":"themes/next/source/lib/Han/.git/objects/6c/cc84f8ea3543926a1a1e78b5c50a56c0dc8025","hash":"8b4b97a1e3e0089940bc797e8ee3d6eca9d09d28","modified":1577762142707},{"_id":"themes/next/source/lib/Han/.git/objects/72/c270d58afaf026bd65fea390e277b6d63aa22f","hash":"2ebc915da4f2146762025c321bbd54fca1e7b9eb","modified":1577762143236},{"_id":"themes/next/source/lib/Han/.git/objects/77/8fba47fc8f68467fb45002edcd717a71a4ea18","hash":"896ae007894c3f537f1723674f06740489bbf73c","modified":1577762142989},{"_id":"themes/next/source/lib/Han/.git/objects/7d/713d14ed6c435cc41223736376f9e41f8001ed","hash":"fe9cd361e4ab229e32f8a0303b108a5386d09429","modified":1577762142892},{"_id":"themes/next/source/lib/Han/.git/objects/75/976c6dc20178b5d24b07ba76700a73205a9b52","hash":"532198fa938fafd2b53dd45193e65a7c8c0f8c84","modified":1577762142808},{"_id":"themes/next/source/lib/Han/.git/objects/84/5b1bc2898c9924eff3e1b0bd92b6178b4908db","hash":"7c8453a9632d2e4b2720c4a7d50b289936699d1c","modified":1577762142683},{"_id":"themes/next/source/lib/Han/.git/objects/a3/8e5bd4193fa1f52aa27eb2a7f32cf103d20a57","hash":"d8897f2030f55a50c5dcea877dd5b0f9a3a977d5","modified":1577762141983},{"_id":"themes/next/source/lib/Han/.git/objects/9b/afab6ef59ce585cbc456d03770e167d2a3c9e2","hash":"32c4243f56b9334f340559d9e7bb7140aadb5959","modified":1577762142782},{"_id":"themes/next/source/lib/Han/.git/objects/8a/7ee041ca7a999ccd5f35177f9f806232b93738","hash":"627b29c5fa02783ab8130433036db571143e564f","modified":1577762142548},{"_id":"themes/next/source/lib/Han/.git/objects/a5/57ad3eeef222d2387e98f4418b0438655a2765","hash":"cdaa150ec84c29d84750ef44aa586a600f901d63","modified":1577762142868},{"_id":"themes/next/source/lib/Han/.git/objects/ad/cf15c7f3d6cb69da502326740997e4a0e3bae3","hash":"0d53088c3633db9d45f69b6c12fd3f2cd4d53062","modified":1577762142179},{"_id":"themes/next/source/lib/Han/.git/objects/af/46be34010c865593eec22d79552334f3fac3f1","hash":"5d8888376467232bd9a13f99c8c76a386a5505e5","modified":1577762142941},{"_id":"themes/next/source/lib/Han/.git/objects/aa/9916f898bfa69c88a84d6f0e99a549c8831d07","hash":"74c546dc2710eba88138d6a12df1d3e05e03ae35","modified":1577762143433},{"_id":"themes/next/source/lib/Han/.git/objects/b3/7c278058df61bbd959c9f775f80f3a24b49a16","hash":"3429c10084546b79746b6b0e9f3e4b29fa6443e4","modified":1577762142130},{"_id":"themes/next/source/lib/Han/.git/objects/e1/f0b9c30d5426977a4685d63a0cef6fd6abdd89","hash":"103eeacd4a6750c0e7313b84a571373fa8369579","modified":1577762142081},{"_id":"themes/next/source/lib/Han/.git/objects/c3/a4e2326f7650fde4756dadf7c67484cf14aa4b","hash":"4b0e77607c87ea06fe9b612b8ee7cd99f87be559","modified":1577762142450},{"_id":"themes/next/source/lib/Han/.git/objects/cb/cf355438829a21ee86cb3f116a68daab599b5d","hash":"163216cd6c2b363b3bbdf32da39142dbd4ca690b","modified":1577762142499},{"_id":"themes/next/source/lib/Han/.git/objects/e2/d2e185fbd7d888a3658fe97dde4ba595290caf","hash":"4edae1bf781e76b61bdc43395a76574c0d20107b","modified":1577762143187},{"_id":"themes/next/source/lib/Han/.git/objects/d3/6ccff12388f072c23857d33c6abd1f57b3dc86","hash":"a8d4bddb3c913051763dc7d2d3cfc243ef181701","modified":1577762141933},{"_id":"themes/next/source/lib/Han/.git/objects/e6/02654d32318f5c7135c521ee586f93235452a7","hash":"c6dc38516b0cefe68f0d466f43afffc9d31c2428","modified":1577762143334},{"_id":"themes/next/node_modules/hexo-bunyan/docs/img/bunyan.browserify.png","hash":"2ab34c17c313d3d5f02ed6308e305f2d08f32d55","modified":1500921793000},{"_id":"themes/next/source/lib/Han/.git/objects/f0/a838932f748272263bc294b178b9a3297a1295","hash":"77694c0d730fa2582dc473d3d3ee782156f4cf74","modified":1577762143285},{"_id":"themes/next/source/lib/Han/.git/objects/e7/237bfe33deeeec901fb5f0a60bac33cbb446d7","hash":"6589766fc012cfd184f634e3747d944efe405797","modified":1577762143039},{"_id":"themes/next/source/lib/Han/.git/refs/heads/master","hash":"51faea5cd9b558363c460cd1fb22b20e81b1715f","modified":1577762143638},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/kind-of/README.md","hash":"1b2dad314e9dc345c6e527b73e983041271a3f20","modified":1507878123000},{"_id":"themes/next/source/lib/Han/.git/logs/refs/heads/master","hash":"cf21af89a8793818c11ddcb10711e35da7a6d844","modified":1577762143639},{"_id":"themes/next/node_modules/moment/min/locales.js","hash":"9a69a0a6e1bfba42c59f37395ae3257dc802e1fd","modified":499162500000},{"_id":"themes/next/node_modules/moment/min/moment-with-locales.js","hash":"67e795cf9f15093505f4886267f1ba0d234659e9","modified":499162500000},{"_id":"themes/next/source/lib/Han/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1577762143636},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-accessor-descriptor/node_modules/kind-of/README.md","hash":"f287584b785807e175d878885c66455a672217bd","modified":1494958295000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-accessor-descriptor/node_modules/kind-of/index.js","hash":"f9e8418f23f97452410088786d5e0c7a981ced74","modified":1493120356000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-accessor-descriptor/node_modules/kind-of/package.json","hash":"7b1d39fdcb961d8fd31adbd802b7cd900550bcc2","modified":1577852770052},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-data-descriptor/node_modules/kind-of/README.md","hash":"f287584b785807e175d878885c66455a672217bd","modified":1494958295000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-data-descriptor/node_modules/kind-of/index.js","hash":"f9e8418f23f97452410088786d5e0c7a981ced74","modified":1493120356000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-data-descriptor/node_modules/kind-of/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1447758397000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-accessor-descriptor/node_modules/kind-of/LICENSE","hash":"b4e100fe8f109af7c7a5eba6b8ddb4c75be99a5a","modified":1447758397000},{"_id":"themes/next/node_modules/readdirp/node_modules/expand-brackets/node_modules/is-data-descriptor/node_modules/kind-of/package.json","hash":"c44029d7c84e26b9054e7e8d8f5a9ed5b59e77b6","modified":1577852770052},{"_id":"themes/next/source/lib/Han/.git/logs/refs/remotes/origin/HEAD","hash":"cf21af89a8793818c11ddcb10711e35da7a6d844","modified":1577762143636},{"_id":"themes/next/node_modules/hexo-tag-cloud/img/example.png","hash":"427d76506f5f22346dda07e590cc083fd0975d00","modified":499162500000},{"_id":"public/categories/index.html","hash":"90f23b2f29abdb1547f89093dbc8e8da141c1e23","modified":1583935892514},{"_id":"public/tags/index.html","hash":"ef6e574bcd938ed26663bfce67fe368a15d7a191","modified":1583935892514},{"_id":"public/about/index.html","hash":"33ca0b5fb52ed294cd2b184bcdef2827880a902a","modified":1583935892514},{"_id":"public/2020/03/10/亲密关系-通往灵魂的桥梁-无拘无束的关系/index.html","hash":"d0cdf1b4d4b9fa73fb1751d95d30f7e1b5f9fb65","modified":1583935892514},{"_id":"public/2019/11/10/夏洛特烦恼观影随想/index.html","hash":"ec595105c200d5489ddbfdf86dd20e8ee51844ef","modified":1583935892514},{"_id":"public/2019/07/13/小猫的胡言乱语/index.html","hash":"42e1c4e09184c7d307d2b27b81a4ac956de07dff","modified":1583935892514},{"_id":"public/2019/03/28/值类型与引用类型/index.html","hash":"0ae8c06835913f11dce3961a7254a494c941b851","modified":1583935892515},{"_id":"public/2019/03/27/杂事随想/index.html","hash":"e3612e289b434117588354c505fe9b5ab23c6e7f","modified":1583935892515},{"_id":"public/2019/03/21/关于Winform窗体的快速复制/index.html","hash":"5b52899ac4d1b24be30ee821ed7ec6da1a23266a","modified":1583935892515},{"_id":"public/2018/03/14/CSharp-利用委托解决跨线程操作控件产生的问题/index.html","hash":"1781e83c29ee1f6cb2c52f8e67b132fc000b9b91","modified":1583935892515},{"_id":"public/categories/Net-Core/index.html","hash":"b9beb2eda432f6d97a4655b3eb018db7b89f8a25","modified":1583935892515},{"_id":"public/categories/Net-Core/page/2/index.html","hash":"178d573fecd270f0fc5ef47c49435f32c4f3e5bf","modified":1583935892515},{"_id":"public/categories/Net-Core/page/3/index.html","hash":"429ad69c300c36c78100ca42150f046e1b4b9903","modified":1583935892515},{"_id":"public/categories/C/index.html","hash":"7b34d977aab844d0b993639aa48311997eff518f","modified":1583935892515},{"_id":"public/categories/C/page/2/index.html","hash":"8fecf7507ef69eab0b1d4b6224206ae6674c9cd8","modified":1583935892515},{"_id":"public/categories/Net/index.html","hash":"e1516073477d3bb627980ff4c5fa04de0069954c","modified":1583935892515},{"_id":"public/categories/读书笔记/index.html","hash":"91ce65d9978f4395044ad0f938965df5b3e9c2eb","modified":1583935892515},{"_id":"public/categories/随笔/index.html","hash":"405d1fcc05e7359f07c72990378371eac7c7afe3","modified":1583935892515},{"_id":"public/categories/微服务/index.html","hash":"a404321110adb09d0e864633d7c2c45ccae65894","modified":1583935892515},{"_id":"public/categories/API/index.html","hash":"87d53237c983bde9da2224d2ab2b05c381a5a61a","modified":1583935892515},{"_id":"public/categories/架构/index.html","hash":"75de83d551e597ee3346dc13a79fb0fd767efdc5","modified":1583935892515},{"_id":"public/archives/index.html","hash":"6ea01679459e0ad4a0ff6b7b8de7d56286113222","modified":1583935892515},{"_id":"public/archives/page/2/index.html","hash":"30517c066f6af81c165ca3319283d5f3d78ad372","modified":1583935892515},{"_id":"public/archives/page/3/index.html","hash":"f256b7db2c3a851c7f0d0461d926f681934ca267","modified":1583935892515},{"_id":"public/archives/page/4/index.html","hash":"7ce3335ce049ead95d1ccfb0288be10636c8a5f3","modified":1583935892515},{"_id":"public/archives/page/6/index.html","hash":"8ffbf64f82be377fcf934778a557d544346cc5f3","modified":1583935892515},{"_id":"public/archives/page/5/index.html","hash":"e4307c6031f064ef381f8fe5e4d164eb61ad556a","modified":1583935892515},{"_id":"public/archives/page/7/index.html","hash":"b48cbbc164c2331bb678bbde6dc755298be8b31b","modified":1583935892515},{"_id":"public/archives/page/8/index.html","hash":"b339ae63bc5d1a858952f1fd24114c82f387f6c6","modified":1583935892515},{"_id":"public/archives/2018/index.html","hash":"af58d5a3c43b9e549e4a5ee1e37a7a4685409ee9","modified":1583935892515},{"_id":"public/archives/2018/page/2/index.html","hash":"54ebff2f058f928f6c2df4ff68da8ea353ca6a37","modified":1583935892515},{"_id":"public/archives/2018/page/3/index.html","hash":"83279808787258563c5f5fdc9f71eccd03b628d8","modified":1583935892515},{"_id":"public/archives/2018/03/index.html","hash":"f33376a34802a07d490a7b5b075ae71ba96c5ba9","modified":1583935892515},{"_id":"public/archives/2018/04/index.html","hash":"2171f3ec323b8ff37cd039f7455953d9cab8f509","modified":1583935892516},{"_id":"public/archives/2018/03/page/2/index.html","hash":"63baf2380af8516c16690d53ea1bc6f7eff69d95","modified":1583935892516},{"_id":"public/archives/2018/06/index.html","hash":"100d5a4ac34b9ee33f3e404e0bc3a2b0b5f364dd","modified":1583935892516},{"_id":"public/archives/2018/12/index.html","hash":"f9f9e84247cd5d759ca13074c4c3610a7c91ddb2","modified":1583935892516},{"_id":"public/archives/2019/index.html","hash":"7597734fe0e4f759fac2fa44c1045ef6e4898831","modified":1583935892516},{"_id":"public/archives/2019/page/2/index.html","hash":"ea7c7764888dd0221b83dc0a11e93595bafb3622","modified":1583935892516},{"_id":"public/archives/2019/page/3/index.html","hash":"32e8fe537b0edd6750a214e7e43645b6e8eaa04c","modified":1583935892516},{"_id":"public/archives/2019/page/4/index.html","hash":"82e1cd890c5fdb7209abc55657c353750d9b27bd","modified":1583935892516},{"_id":"public/archives/2019/02/index.html","hash":"c427d65bc53035548cb461c74348a7e57c535084","modified":1583935892516},{"_id":"public/archives/2019/03/index.html","hash":"6a922c182f91edd220407ecb0ef210017bb0b179","modified":1583935892516},{"_id":"public/archives/2019/04/index.html","hash":"a6d71a8bffbd92c4aa38c426b4a89da3c10e3bae","modified":1583935892516},{"_id":"public/archives/2019/05/index.html","hash":"831255fd3f5082aaf4c7eb12aad18db7e7467ebb","modified":1583935892516},{"_id":"public/archives/2019/07/index.html","hash":"01ad959352979dadd6e9a1d9613967d2ecfe2ae4","modified":1583935892516},{"_id":"public/archives/2019/06/index.html","hash":"51c961a4ecbd96e030345ab86757df7e55e1a69a","modified":1583935892516},{"_id":"public/archives/2019/08/index.html","hash":"5ef100a8d11d8f0c7de94b2e589552dc023ff6c4","modified":1583935892516},{"_id":"public/archives/2019/11/index.html","hash":"ffef65efe31078608a7e2f86f31214b18a1b889d","modified":1583935892516},{"_id":"public/archives/2019/09/index.html","hash":"d8a88c9b49251a4951f7d09f9b3d6f8f9d38f633","modified":1583935892516},{"_id":"public/archives/2020/index.html","hash":"ce15c5ce5d111ce513fa5bfdd825d287691334a0","modified":1583935892516},{"_id":"public/archives/2020/01/index.html","hash":"e9a5eede4fd1378d05b6a4efbf91f473f9f11b5e","modified":1583935892516},{"_id":"public/archives/2020/03/index.html","hash":"13a317bb830c473a5b83250ee78e96caef673c8b","modified":1583935892516},{"_id":"public/tags/Net-Core/index.html","hash":"18a7271d19aad9a568b7e66af046b142c992f532","modified":1583935892516},{"_id":"public/tags/Net-Core/page/2/index.html","hash":"ae7682c2f6ea322ee3d9a0fac0b9798a637f8b5a","modified":1583935892516},{"_id":"public/tags/Net-Core/page/3/index.html","hash":"9d080d20cb2c637b22e6d71a85bf149de1e44dfe","modified":1583935892516},{"_id":"public/tags/Net-Core/page/4/index.html","hash":"467f410dbaada30f102eeb06114f18492d4b84d8","modified":1583935892516},{"_id":"public/tags/Cookies/index.html","hash":"8b9c282a5e890979faecb3c18e7926394d30f272","modified":1583935892516},{"_id":"public/tags/Session/index.html","hash":"241ab723d4bc52510a72cbd2183d6ed2ce8099c2","modified":1583935892516},{"_id":"public/tags/SignalR/index.html","hash":"7de7433176c73d948c356dfe297d42cf8ca80d3f","modified":1583935892516},{"_id":"public/tags/REST-API/index.html","hash":"c8240ef878d92d0fb288f289a22a67a9e76330a8","modified":1583935892516},{"_id":"public/tags/Response/index.html","hash":"661cd62fcc17c827f7131ed84095b26c83b8dba1","modified":1583935892516},{"_id":"public/tags/Web-API/index.html","hash":"756aca6e63a1360a78a7cc9ea0186b410d9d4839","modified":1583935892517},{"_id":"public/tags/Url-重写/index.html","hash":"659c249aa572c4263e6a95a8d25be404856efbc3","modified":1583935892517},{"_id":"public/tags/Middleware/index.html","hash":"0823563293080d5a1e629f41caf5c794136d96bf","modified":1583935892517},{"_id":"public/tags/Gzip/index.html","hash":"ca5a92c24d16687941b9677764407b8194744292","modified":1583935892517},{"_id":"public/tags/WebSocket/index.html","hash":"33ae981fadcbf4bd991af25d3c6666fd2c041bae","modified":1583935892517},{"_id":"public/tags/Exception/index.html","hash":"32169953dffd21ef355418e0377e0b910224f0a1","modified":1583935892517},{"_id":"public/tags/Model/index.html","hash":"8f59d01ebe21a48be8b7a896381e59f06c4d4d57","modified":1583935892517},{"_id":"public/tags/Filter/index.html","hash":"eb4e252a50f77799d6f528363d4ea934f26bc02a","modified":1583935892517},{"_id":"public/tags/C/page/2/index.html","hash":"b90dc922af5149e8c6863aac42eab6a5f4de058c","modified":1583935892517},{"_id":"public/tags/C/index.html","hash":"ee1c758c809066d3b346b10502c65ecadfa204df","modified":1583935892517},{"_id":"public/tags/摘录/index.html","hash":"dca0bcaf1004fd292d40d80a5576df9d080d29a7","modified":1583935892517},{"_id":"public/tags/解构器/index.html","hash":"78c0c6289e5ea22588feaaba6b0b8c78bd3f8cdd","modified":1583935892517},{"_id":"public/tags/异常类型/index.html","hash":"094763020e64fb99b9843599b029471d8295d2a5","modified":1583935892517},{"_id":"public/tags/委托/index.html","hash":"30e1e53e33222096e078fea531810ac4725f66c4","modified":1583935892517},{"_id":"public/tags/重载运算符/index.html","hash":"fcb6f183ac7fcc7d9834d507f25ebaaea5a107ec","modified":1583935892517},{"_id":"public/tags/基础/index.html","hash":"67fcb31e9e8831780986cb29731a958ae325bb21","modified":1583935892517},{"_id":"public/tags/邮件/index.html","hash":"5cba1ad681ce3c3799ffd185f5dc348f6c72ff08","modified":1583935892517},{"_id":"public/tags/加密/index.html","hash":"49a8e4f862991a5dcfeb548c054c80e786a760dc","modified":1583935892517},{"_id":"public/tags/winform/index.html","hash":"34ea3969a2a0b2ca48b1e8a92730b4d356d53c26","modified":1583935892517},{"_id":"public/tags/Sqlite/index.html","hash":"f3ebb7ae4016606c81805639c0e64ce0dd7b422c","modified":1583935892517},{"_id":"public/tags/EF-Core/index.html","hash":"e060f90d540cd9f42217ac3cacc4f20483acd87e","modified":1583935892517},{"_id":"public/tags/复制对象/index.html","hash":"ad2834e343b0b8cc0229e28d0b15e283de0fad56","modified":1583935892517},{"_id":"public/tags/MVC/index.html","hash":"bdcd4bcddb036ed78e26ddc989ebae86e53c4d85","modified":1583935892517},{"_id":"public/tags/IdentityServer4/index.html","hash":"4c7526abd1fc6a1b9a757f49892e00b8b3af3545","modified":1583935892517},{"_id":"public/tags/Ocelot/index.html","hash":"1e980e203c07f0cf53c635f2884d056962bae93f","modified":1583935892517},{"_id":"public/tags/Autofac/index.html","hash":"8d8b16ee39cfb375f81d2e5f419641480642dca5","modified":1583935892517},{"_id":"public/tags/WebApi/index.html","hash":"a0c2c9b7084d64e1204c28cfafb3f0de5673bfe0","modified":1583935892517},{"_id":"public/tags/Swagger/index.html","hash":"aaa2957b519d58830894d26a718f757d0515e58f","modified":1583935892517},{"_id":"public/tags/框架/index.html","hash":"c06c13d231e84da6f1f692f91479bc2c1e48a8c7","modified":1583935892517},{"_id":"public/tags/Dapper/index.html","hash":"17f8f4bcffd898192ecccc57c8ca878239f38e31","modified":1583935892517},{"_id":"public/tags/NLog/index.html","hash":"2af7c9a8ed52acc300907983ad0b61bd0fa1aa9b","modified":1583935892518},{"_id":"public/tags/设计模式/index.html","hash":"9c4168607b6d6d1caa47add71be581a534a28fe1","modified":1583935892519},{"_id":"public/tags/RSA算法/index.html","hash":"f5c9bec5c71934b0e8073b41644dcf38837add4f","modified":1583935892519},{"_id":"public/tags/Net/index.html","hash":"d669535809c8e2627fa3cf6b1661ef68a67ba644","modified":1583935892519},{"_id":"public/tags/Log4net/index.html","hash":"a9814c68098b268781122701af9d9759953eb6d8","modified":1583935892519},{"_id":"public/tags/读书笔记/index.html","hash":"03b58180662cc776632c7eabfac17dcee198ef72","modified":1583935892519},{"_id":"public/tags/亲密关系/index.html","hash":"5ab49f14f1f6f8b724b097908b0a0ab5550d82be","modified":1583935892519},{"_id":"public/tags/Linq/index.html","hash":"dce6b2fbd1f47fdcc8363831c9ba258ae78f40c8","modified":1583935892519},{"_id":"public/tags/WCF/index.html","hash":"376e3c3e6217fa30cc552e849b58ff649a604100","modified":1583935892519},{"_id":"public/tags/Spider/index.html","hash":"7c15a8803647ca59be345580b5d5277563f6e5ab","modified":1583935892519},{"_id":"public/tags/Web-Api/index.html","hash":"ac719503462b30ea149753a430a57945499dbe48","modified":1583935892519},{"_id":"public/tags/随笔/index.html","hash":"efb1241255f4a490321b55b37d2aac88deec469a","modified":1583935892519},{"_id":"public/tags/Vue-js/index.html","hash":"177202aae89bb2768515c66a8ed1248c2ef23d1d","modified":1583935892519},{"_id":"public/tags/自我/index.html","hash":"07d719c2baf10b1182ea865d1c847fe083dbcd96","modified":1583935892519},{"_id":"public/tags/API/index.html","hash":"ffd8a389bf02fdec2e1eac1bf9cde42dca4f4a8e","modified":1583935892519},{"_id":"public/tags/复制/index.html","hash":"82022111165b82e168893916eb5f03629ab12fbf","modified":1583935892519},{"_id":"public/tags/架构/index.html","hash":"21f6e5f96f53d6ceaffb6ddeb709ae555fd949ea","modified":1583935892519},{"_id":"public/tags/哲学/index.html","hash":"7fcb163b2fc29067c45c0e4bb9975affc2f9753b","modified":1583935892519},{"_id":"public/tags/微服务/index.html","hash":"eeff59061dd25604e3ea1edf339f577791b186c9","modified":1583935892519},{"_id":"public/tags/直觉泵/index.html","hash":"c66e1488b5fb8812e44421639a5a5534b2a633ca","modified":1583935892519},{"_id":"public/tags/习惯/index.html","hash":"3a066b664c46e35282c44d830f8bd33d56dc0e2c","modified":1583935892519},{"_id":"public/page/8/index.html","hash":"b2357a4d82e788ad82c606afd9e7a0727009db11","modified":1583935892519},{"_id":"public/2020/03/10/去当你想当的任何人吧-寻找自我的魔法/index.html","hash":"0ea2844ef5934ea278b5baf8d8de4e4dcfb4a423","modified":1583935892520},{"_id":"public/2020/03/10/掌握习惯-原子习惯-细微改变带来巨大成就的实证法则-二/index.html","hash":"4d9e5dca698c35eb377a6a174892dd112be347e3","modified":1583935892520},{"_id":"public/2020/03/09/掌握习惯-原子习惯-细微改变带来巨大成就的实证法则/index.html","hash":"652fc2caa33f5bcf762f7fb75087548dbfd91019","modified":1583935892520},{"_id":"public/2020/01/10/直觉泵-关于计算机的思考工具/index.html","hash":"12dddf1c83b893d7389e0ae0eea362529cfb415d","modified":1583935892520},{"_id":"public/2020/01/08/直觉泵-关于意义和内容思考工具(三)/index.html","hash":"f6312c0782fe7753baff7d44e67cfd1910199503","modified":1583935892520},{"_id":"public/2020/01/07/直觉泵-关于意义和内容思考工具(二)/index.html","hash":"fe6ea4834ab948b882d5815345ba8ba585e736df","modified":1583935892520},{"_id":"public/2020/01/06/直觉泵-关于意义和内容思考工具/index.html","hash":"8105adaeefe209d54869c58a701d205f46f114e8","modified":1583935892520},{"_id":"public/2020/01/06/直觉泵-通用思考工具(二)/index.html","hash":"c5a9943fcad19555d6d50713e323b0419070c22e","modified":1583935892520},{"_id":"public/2020/01/04/直觉泵-通用思考工具/index.html","hash":"f77454b6f3619c92a9b16b4da7f5a060f10ad512","modified":1583935892520},{"_id":"public/2019/11/02/IdentityServer4-ClientCredential模式/index.html","hash":"c8706c1920b5f249655722aa561dbe036893fa4a","modified":1583935892520},{"_id":"public/2019/08/26/CSharp-7.0-核心技术指南摘录(四)/index.html","hash":"cded960fae87a767acb3699c06a7acb30d005eba","modified":1583935892520},{"_id":"public/2019/09/01/CSharp-7.0-核心技术指南摘录(五) /index.html","hash":"68619003823a6733bbb08b94b92615556e1ee6b9","modified":1583935892520},{"_id":"public/2019/08/19/CSharp-7.0-核心技术指南摘录(三)/index.html","hash":"a34837dd165ae65f08bed53653fd42adcc36e898","modified":1583935892520},{"_id":"public/2019/08/16/CSharp-7.0-核心技术指南摘录(二)/index.html","hash":"bcef2e64f0a5431d76c262ec48c68fac595eabda","modified":1583935892520},{"_id":"public/2019/08/15/CSharp-7.0-核心技术指南摘录(一)/index.html","hash":"33afda44069c15b1308adf22536875fde9a0823c","modified":1583935892520},{"_id":"public/2019/08/10/Asp-Net-Core-压缩封包/index.html","hash":"69809023200a5ae8752d522e3d45306c8abc19b7","modified":1583935892520},{"_id":"public/2019/08/10/Asp-Net-Core-Response快取/index.html","hash":"3eb8c4ff7f5a7682a9b03c37b502041882b78f4b","modified":1583935892520},{"_id":"public/2019/07/29/Asp-Net-Core-SignalR/index.html","hash":"7a21ccd73131527c10186961c70d5b27fc3a1958","modified":1583935892520},{"_id":"public/2019/07/16/Net-Linq/index.html","hash":"aead1b2e8dba4ffa936d381f4f0bd2f945ca267c","modified":1583935892520},{"_id":"public/2019/07/13/Asp-Net-Core-异常处理/index.html","hash":"73114a3d2aaa2efec5453b3e00455fbb60387074","modified":1583935892520},{"_id":"public/2019/07/03/Asp-Net-Core-过滤器/index.html","hash":"aad3a4703b9b0fcae912f71ea8889dc1425efa90","modified":1583935892521},{"_id":"public/2019/07/01/Asp-Net-Core-Cookies和Session/index.html","hash":"8f92a26ca33fdacfcbfa10aec7e6dcf70426da8e","modified":1583935892521},{"_id":"public/2019/06/26/Asp-Net-Core-模型绑定/index.html","hash":"2a58629c339121b15b8b42ec9322e12925ee74c6","modified":1583935892521},{"_id":"public/2019/06/25/Asp-Net-Core-Url 重写/index.html","hash":"ed86a116277dac0f54dc4b03aa9bac32652d24a9","modified":1583935892521},{"_id":"public/2019/06/25/Asp-Net-Core-中间件/index.html","hash":"be4c0b10ae9baad82ec207a8fdb138c05300ccae","modified":1583935892521},{"_id":"public/2019/05/30/CSharp-发送邮件/index.html","hash":"7756f6eff13787d6805a3ec5327c5897ad0cabe5","modified":1583935892521},{"_id":"public/2019/05/27/CSharp-Aes加密/index.html","hash":"ec4d150278a88192c962364d74e5997129994532","modified":1583935892522},{"_id":"public/2019/04/09/随笔-断舍离/index.html","hash":"99fe09e858e634ffc1cd68ce72e6c5440c037771","modified":1583935892522},{"_id":"public/2019/04/03/CSharp-字符串处理/index.html","hash":"7ae3ca9d66af3e9e9715b40307ce170fe81b946e","modified":1583935892522},{"_id":"public/2019/04/02/CSharp-Math类/index.html","hash":"5e18a377987206a1deb5260dd096c6e9c1a8d556","modified":1583935892522},{"_id":"public/2019/03/30/CSharp-常用关键字和基础类/index.html","hash":"20db03b758f6737a523ea1c7908856f62f132450","modified":1583935892522},{"_id":"public/2019/03/26/类型基础/index.html","hash":"225d4403dd5f5d9d36e29413ecfcdc8f0778c73b","modified":1583935892522},{"_id":"public/2019/03/17/关于选择聚会地点的软件/index.html","hash":"06a6ccb5a080e2790bc81684a894bd005ee9337e","modified":1583935892522},{"_id":"public/2019/03/05/微服务-Consul学习/index.html","hash":"f6b12618c8bef4ecee10c81e647c2b67922b0ae1","modified":1583935892522},{"_id":"public/2019/03/11/微服务-Consul学习(二)/index.html","hash":"599545db9fcff7502deff1657365ef9b97a65c1f","modified":1583935892522},{"_id":"public/2019/03/04/多种仓储模式/index.html","hash":"6a287d70e0b5f553c2b0502081b83329d9497d5c","modified":1583935892522},{"_id":"public/2019/02/24/聚会随想/index.html","hash":"207f94e636d236ff3f931e52be735d160c458a2f","modified":1583935892523},{"_id":"public/2019/02/21/Net-Core-从零开始搭建框架(一)/index.html","hash":"1df644799022964edfb345da66f31cac894db3c8","modified":1583935892523},{"_id":"public/2018/12/11/CSharp-在Winform中使用Sqlite/index.html","hash":"12acdd38771dacb1068dd5e12582e19c06ff384b","modified":1583935892523},{"_id":"public/2018/06/21/Asp-Net-Core-Web-API的先进架构/index.html","hash":"c3ee4641382506b0c94a7660773e7806b4c8a201","modified":1583935892523},{"_id":"public/2018/06/11/Net-Core-单例模式/index.html","hash":"f1bd831f59f9cfa53d6740ce4313c43fba943622","modified":1583935892523},{"_id":"public/2018/06/10/EF-Core实现DB-First和Code-First/index.html","hash":"74837bec3929625de61189cc00c3929cae479ee1","modified":1583935892523},{"_id":"public/2018/06/09/CSharp-通过表达式树复制对象/index.html","hash":"576c719e053945e15f2583c11893c8521b6c1d6e","modified":1583935892523},{"_id":"public/2018/06/08/Asp-Net-Core-REST-API基础/index.html","hash":"b8ce2b2c5d2ab97ca2d7959de5cfbaca9e55ff5e","modified":1583935892523},{"_id":"public/2018/06/05/关于毕业设计的整理/index.html","hash":"211076c1512ea9fe04f40cb2b7f0109fc9801972","modified":1583935892523},{"_id":"public/2018/04/16/Net-Core-抽象工厂模式/index.html","hash":"9ee7662931a6fd93dd11de95877fbe485a7a1fd0","modified":1583935892523},{"_id":"public/2018/04/14/Net-Core-简单工厂和工厂方法模式/index.html","hash":"7a45fcd487c76a5d1f981edb7b90f70daa331eee","modified":1583935892523},{"_id":"public/2018/04/05/Net-Core-装饰模式/index.html","hash":"065b71b2ffe7c17a973af869f571501e6afddf8e","modified":1583935892523},{"_id":"public/2018/04/05/Net-Core-观察者模式/index.html","hash":"f4d9f06da422a40b5799ad469daf4517ca6c09ad","modified":1583935892523},{"_id":"public/2018/03/29/Net-Core-Ocelot/index.html","hash":"e39361acf339511ec4e3498c9dad4720bde27b32","modified":1583935892523},{"_id":"public/2018/03/20/Asp-Net-Core-WebSocket/index.html","hash":"d66d5ac719aa60e1be85982a3438f772a4a0b0b1","modified":1583935892523},{"_id":"public/2018/03/17/Net-Core-修改IOC为Autofac/index.html","hash":"fdbd62da3949af4e84ef923ac32275d4f8ef382b","modified":1583935892523},{"_id":"public/2018/03/16/Net-Core-使用日志NLog/index.html","hash":"a947ee32aee86561524ec4dc2bc2c96ebb31af77","modified":1583935892523},{"_id":"public/2018/03/11/Net-Core-使用swagger进行API接口文档管理/index.html","hash":"07d546ff732ac5a2781884a5f314b8e9237f72e2","modified":1583935892523},{"_id":"public/2018/03/11/Asp-Net-Core中使用Session/index.html","hash":"b38d9a178a17710324c910e0acf85c2a653c88de","modified":1583935892523},{"_id":"public/2018/03/10/使用WebApiClient请求和管理Restful-Api/index.html","hash":"e0414d7fda7850af9b4021efa81d26d2601b1e61","modified":1583935892524},{"_id":"public/2018/03/10/Net-MVC-三层架构框架/index.html","hash":"0ff301aa8ecd2e9ad467d5d4a2820fc32ba3b007","modified":1583935892524},{"_id":"public/2018/03/09/Wcf创建http和Webservice接口/index.html","hash":"d92726a24dc170939ba9164ecb79e8fbfc2474ac","modified":1583935892524},{"_id":"public/2018/03/08/Net-Core-RSA-RSA2算法/index.html","hash":"f83b82c30dec51808981405b03dcd8f4ba1f00d2","modified":1583935892524},{"_id":"public/2018/03/07/贫血模型和充血模型/index.html","hash":"0befb1e9eaac50e9a5403df672bfc5479eda8d73","modified":1583935892524},{"_id":"public/2018/03/07/Net-Core-配置与自动更新/index.html","hash":"778014be8d4db939fa5dc0dd0507f27718931bfd","modified":1583935892524},{"_id":"public/2018/03/06/Net-Core-MVC-三层架构框架/index.html","hash":"f1b03d2d3bdb564827942a1c579cbc0bbcd734c5","modified":1583935892524},{"_id":"public/2018/03/06/Net-爬虫封装/index.html","hash":"8ad94be7acd5e4d19dae4fdb97af59c016be271a","modified":1583935892524},{"_id":"public/2018/03/06/Net-Log4net封装/index.html","hash":"c6706d6a9629712eaf85caf3a1af2426bb22df1b","modified":1583935892524},{"_id":"public/page/2/index.html","hash":"60b85621146386ab91e4269eeabb4641c283897f","modified":1583935892525},{"_id":"public/index.html","hash":"5a0df8c65794942f2d0d44544d8d9fbb7837ac9a","modified":1583935892525},{"_id":"public/page/3/index.html","hash":"fa2775bdf76e6cf97d913592ed197dbf1858baed","modified":1583935892525},{"_id":"public/page/4/index.html","hash":"91ebd49fbeed722c6aee93ef7ef5973aa90bbfed","modified":1583935892525},{"_id":"public/page/6/index.html","hash":"e7d01bf30be7fbd9f892ce4f86870df783ac3c26","modified":1583935892525},{"_id":"public/page/5/index.html","hash":"456822f8b2b15c44dbf3d1fa53f8505ff82a0055","modified":1583935892525},{"_id":"public/page/7/index.html","hash":"ae7cae7ae19b6dda2636c725308955a1e1a794da","modified":1583935892525},{"_id":"public/2020/03/11/人性的弱点-如何赢得友谊并影响他人/index.html","hash":"bdef30dadbd162ebf390d12ef759d9816624eb36","modified":1583935892530},{"_id":"public/categories/读书笔记/page/2/index.html","hash":"15a38f9a6c6f6539a9cd731075b4d210c9f15ea4","modified":1583935892530},{"_id":"public/archives/2020/page/2/index.html","hash":"e8aaf0028bb413fcc3e19e35d4f3badfed9b9a40","modified":1583935892530},{"_id":"public/tags/读书笔记/page/2/index.html","hash":"7479dba153d4610f3cc8121bfde11584d2dc0b25","modified":1583935892530},{"_id":"public/tags/人际交往/index.html","hash":"78a45a6811fad5df16483959ed1ded29079672fc","modified":1583935892530},{"_id":"public/CNAME","hash":"0051c207c8bd6817f56368e60906362272b00bec","modified":1583935892535},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1583935892535},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1583935892535},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1583935892535},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1583935892535},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1583935892535},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1583935892535},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1583935892535},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1583935892535},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1583935892535},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1583935892535},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1583935892535},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1583935892535},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1583935892535},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1583935892535},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1583935892535},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1583935892536},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1583935892536},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1583935892536},{"_id":"public/lib/Han/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1583935892536},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1583935892536},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1583935892536},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1583935892536},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1583935892536},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1583935892536},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1583935892536},{"_id":"public/live2dw/assets/haruto.model.json","hash":"76f915f7edbd9c47df0ca041dddb151c0c93a2bf","modified":1583935892536},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1583935892536},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1583935892536},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1583935892536},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1583935892536},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1583935892536},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1583935892536},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1583935892536},{"_id":"public/live2dw/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1583935892536},{"_id":"public/live2dw/assets/haruto.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1583935892536},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1583935892536},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1583935892536},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1583935892536},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1583935894415},{"_id":"public/images/header.jpg","hash":"5a10020b8181350e57e9da1cea9717a9274543f9","modified":1583935894415},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1583935894415},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1583935894415},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1583935894418},{"_id":"public/js/src/algolia-search.js","hash":"e25ba118c25cb03d73bc0ec5480b7bf3cf73a369","modified":1583935894418},{"_id":"public/js/src/affix.js","hash":"bc4b8761842e3eb693ab3aee579acc5e89e66368","modified":1583935894418},{"_id":"public/js/src/hook-duoshuo.js","hash":"bd6fdbbf1ed8df6edafd634453a270602089d76d","modified":1583935894418},{"_id":"public/js/src/bootstrap.js","hash":"5980378f11acbd1a8220714503122ebb79676443","modified":1583935894418},{"_id":"public/js/src/exturl.js","hash":"5915c171d922531a324ae8259cc6c56cd791289f","modified":1583935894418},{"_id":"public/js/src/js.cookie.js","hash":"c40b5f9e21755afc445898438a5bf380449e4465","modified":1583935894418},{"_id":"public/js/src/motion.js","hash":"4c00fa51a92f5f8b6ea389a9be397ab428230fc5","modified":1583935894418},{"_id":"public/js/src/post-details.js","hash":"a273af389746bfc5d1f782d354c9516f078c7e6f","modified":1583935894418},{"_id":"public/js/src/scroll-cookie.js","hash":"e7cf4758090e866097e1386c6c96b58644ee84b3","modified":1583935894418},{"_id":"public/js/src/utils.js","hash":"31d667f277cb00d49e18e7b41a4c5f8bc6b4dcfa","modified":1583935894418},{"_id":"public/js/src/scrollspy.js","hash":"a83ec6240822279cf6f0e2426320ad1bad3cc939","modified":1583935894418},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6e58e9c78e759422fb29cd964b1801715431844f","modified":1583935894418},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ddfe3d663d9beb671f37fca7972e519686cb31e2","modified":1583935894418},{"_id":"public/js/src/schemes/pisces.js","hash":"70188ab2815f1bb4d0eb48242ec2fe75c30bcd2e","modified":1583935894418},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"0d909ab7a9186d7ab42515ae09703c83f5d43b6d","modified":1583935894418},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"b0d87e663f9666fe88e72bfc83c2d54af3179f34","modified":1583935894418},{"_id":"public/lib/Han/README.html","hash":"7fa0c66a26d7a28611a4f4a487d639ef4dcf326e","modified":1583935894419},{"_id":"public/js/custom/tagcanvas.js","hash":"e56c7b413479b9414ce215428b3051d0d2e779e5","modified":1583935894419},{"_id":"public/lib/velocity/velocity.min.js","hash":"fdea5b049886e24826653114a4e1f9913ccb5c11","modified":1583935894419},{"_id":"public/lib/jquery/index.js","hash":"d6809703b73e9359f943511aa0e7c90ad1bb8d88","modified":1583935894419},{"_id":"public/lib/Han/dist/han.min.js","hash":"874c0aa850cc7dd10ed69a4377241218d808ce4c","modified":1583935894419},{"_id":"public/lib/velocity/velocity.js","hash":"a35f628eccce9a12a1c3b6d4d96c30531de7d881","modified":1583935894419},{"_id":"public/lib/Han/dist/han.js","hash":"50b115b4cb4b44f3af312118bf0f79ad3bc86aea","modified":1583935894419},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1583935894419},{"_id":"public/css/main.css","hash":"55f2b4263de214d449e775aa36f4cec5b8c02f9c","modified":1583935894419},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"bcbec63f24ed3ad456023d031d0fa65221b59455","modified":1583935894419},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"bcbec63f24ed3ad456023d031d0fa65221b59455","modified":1583935894419},{"_id":"public/lib/Han/dist/han.min.css","hash":"d0db540d2b9312ae4b42398c7640611a79383007","modified":1583935894419},{"_id":"public/lib/Han/dist/han.css","hash":"881cda411810c068953cd30f68af946679df7db4","modified":1583935894419},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1583935894425},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1583935894574},{"_id":"public/live2dw/assets/moc/haruto.2048/texture_00.png","hash":"62b970aa1480a1c18bdc4e74e297f2a1b34ca9fa","modified":1583935894648},{"_id":"public/live2dw/assets/moc/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1583935894648},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1583935894692}],"Category":[{"name":".Net Core","_id":"ck7nej1z8000xtkuirokyx8w5"},{"name":"C#","_id":"ck7nej1zv001ntkuio9p43whh"},{"name":".Net","_id":"ck7nej25p0082tkuixzhmbsve"},{"name":"读书笔记","_id":"ck7nej25q008atkuil9nna7p0"},{"name":"随笔","_id":"ck7nej25y008ytkui3nu6exj4"},{"name":"API","_id":"ck7nej25z0092tkuim580edey"},{"name":"微服务","_id":"ck7nej2610096tkuijc9p74ww"},{"name":"架构","_id":"ck7nej26a009stkuiurc5za4a"}],"Data":[],"Page":[{"title":"categories","date":"2018-03-05T18:19:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-03-06 02:19:54\ntype: \"categories\"\n---\n","updated":"2018-03-05T18:28:50.059Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck7nej23d003wtkuiww77qe03","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><!-- rebuild by neat -->"},{"title":"tags","date":"2018-03-05T18:18:58.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-03-06 02:18:58\ntype: \"tags\"\n---\n","updated":"2018-03-05T18:19:14.802Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck7nej23f0040tkuixut7otno","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><!-- rebuild by neat -->"},{"title":"about","date":"2018-03-07T16:02:39.000Z","_content":"\n#### 陈家辉的个人简历\n\n.Net 开发工程师\n\n##### 基本资料\n\n姓  名：陈家辉 工作经验：1.5 年 联系邮箱：1120873075@qq.com 联系电话：136-5041-5452\n\n##### 专业技能\n\n熟练掌握 ASP.NET 开发并可以使用 .Net Core 进行跨平台开发、熟练使用 MVC 框架、熟悉 Spring.Net, Log4.Net 等框架、熟悉 Web API、WCF 技术，能独立开发基于 Asp.Net Core 的 B/S 系统。\n熟练掌握 Winform 桌面程序开发、能独立开发 Windows PC 端应用，并使用 DevExpress 进行开发。\n熟悉 SQL 语言，熟练使用 SQL Server、Oracle 数据库，掌握数据库设计流程；\n熟练使用 HTML、CSS、JavaScript 技术以及 JQuery、Bootstrap、Vue.JS、JQuery EasyUI 等框架进行网页设计；\n有微服务架构相应的技能基础。\n\n##### 项目经验\n\n###### 永利八达通TMS系统（2019/08--至今）\n\n项目介绍\n本项目主要分为十大模块(权限管理、基础资料、业务配置、运单管理、物料管理、报价管理、操作管理、财务管理、客服管理、项目管理)。本系统主要是为了给永利八达通公司的TMS业务提供更为方便快捷的服务，使得每一票运单的轨迹和操作日志，当前所在节点都清晰可见，同时对于报价的灵活配置也使得公司切换报价时不会出现手忙脚乱的情况。\n\n技术选型\nC#、Winform、DevExpress.\n\n职责领域\n本人主要负责其中的业务配置、物料管理、报价管理以及部分的运单管理。\n\n###### 酒店订餐管理系统（2016/10--2016/11）\n\n项目介绍\n可以对酒店内的所有菜名以及相对应的菜号进行查询；可以对订餐的客户进行记录，并能查询、修改、删除和结算总额；可以对每日的营业额进行结算，以及统计利润总额。本人担当该项目的主要编程人员同时负责核心代码 。\n\n第一阶段（2016/03--2016/5）\n开发环境\nWindows 10、PhpStorm、Mysql、Github\n\n技术选型\nPHP、Mycncart、HTML5、jQuery、Ajax、BootStrap、Node.js\n\n阶段简介\n这个阶段主要是为了能够尽快完成酒店方面提出的需求以便投入使用，选用了PHP的Mycncart框架作为项目的整体解决方案。项目从2016年9月提出，10月收到酒店订餐管理系统的设计图，11月完成系统的大部分功能，目前运行良好。\n\n第二阶段（2016/11--2016/11）\n\n阶段简介\n由于第一阶段有部分功能由于时间过于紧张尚未实现，再加上酒店在系统投入使用后,对系统有了新的需求。于是在原来的基础上加上了后台新消息的通知和声音提示，和相应的邮件推送的功能。\n\n##### 工作经历\n\n2018/08 -- 至今    深圳市智腾达软件技术有限公司\n2017/02 -- 2017/11 广东中拓信息技术有限公司\n2013/09 -- 2018/07 广东医科大学学生\n\n##### 自我评价\n\n热爱编程\n能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。\n出色的自学能力\n专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。\n\n##### 想做的事儿\n\n深入研究 C# 底层原理，阅读 C# 源码；随时了解计算机前沿技术，扎根开源社区，贡献开源项目；\n在学习的同时勤写博客记录分享所得所思.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-03-08 00:02:39\n---\n\n#### 陈家辉的个人简历\n\n.Net 开发工程师\n\n##### 基本资料\n\n姓  名：陈家辉 工作经验：1.5 年 联系邮箱：1120873075@qq.com 联系电话：136-5041-5452\n\n##### 专业技能\n\n熟练掌握 ASP.NET 开发并可以使用 .Net Core 进行跨平台开发、熟练使用 MVC 框架、熟悉 Spring.Net, Log4.Net 等框架、熟悉 Web API、WCF 技术，能独立开发基于 Asp.Net Core 的 B/S 系统。\n熟练掌握 Winform 桌面程序开发、能独立开发 Windows PC 端应用，并使用 DevExpress 进行开发。\n熟悉 SQL 语言，熟练使用 SQL Server、Oracle 数据库，掌握数据库设计流程；\n熟练使用 HTML、CSS、JavaScript 技术以及 JQuery、Bootstrap、Vue.JS、JQuery EasyUI 等框架进行网页设计；\n有微服务架构相应的技能基础。\n\n##### 项目经验\n\n###### 永利八达通TMS系统（2019/08--至今）\n\n项目介绍\n本项目主要分为十大模块(权限管理、基础资料、业务配置、运单管理、物料管理、报价管理、操作管理、财务管理、客服管理、项目管理)。本系统主要是为了给永利八达通公司的TMS业务提供更为方便快捷的服务，使得每一票运单的轨迹和操作日志，当前所在节点都清晰可见，同时对于报价的灵活配置也使得公司切换报价时不会出现手忙脚乱的情况。\n\n技术选型\nC#、Winform、DevExpress.\n\n职责领域\n本人主要负责其中的业务配置、物料管理、报价管理以及部分的运单管理。\n\n###### 酒店订餐管理系统（2016/10--2016/11）\n\n项目介绍\n可以对酒店内的所有菜名以及相对应的菜号进行查询；可以对订餐的客户进行记录，并能查询、修改、删除和结算总额；可以对每日的营业额进行结算，以及统计利润总额。本人担当该项目的主要编程人员同时负责核心代码 。\n\n第一阶段（2016/03--2016/5）\n开发环境\nWindows 10、PhpStorm、Mysql、Github\n\n技术选型\nPHP、Mycncart、HTML5、jQuery、Ajax、BootStrap、Node.js\n\n阶段简介\n这个阶段主要是为了能够尽快完成酒店方面提出的需求以便投入使用，选用了PHP的Mycncart框架作为项目的整体解决方案。项目从2016年9月提出，10月收到酒店订餐管理系统的设计图，11月完成系统的大部分功能，目前运行良好。\n\n第二阶段（2016/11--2016/11）\n\n阶段简介\n由于第一阶段有部分功能由于时间过于紧张尚未实现，再加上酒店在系统投入使用后,对系统有了新的需求。于是在原来的基础上加上了后台新消息的通知和声音提示，和相应的邮件推送的功能。\n\n##### 工作经历\n\n2018/08 -- 至今    深圳市智腾达软件技术有限公司\n2017/02 -- 2017/11 广东中拓信息技术有限公司\n2013/09 -- 2018/07 广东医科大学学生\n\n##### 自我评价\n\n热爱编程\n能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。\n出色的自学能力\n专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。\n\n##### 想做的事儿\n\n深入研究 C# 底层原理，阅读 C# 源码；随时了解计算机前沿技术，扎根开源社区，贡献开源项目；\n在学习的同时勤写博客记录分享所得所思.\n","updated":"2020-03-10T09:22:42.727Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck7nej23h0044tkuixfeupvgc","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"陈家辉的个人简历\"><a href=\"#陈家辉的个人简历\" class=\"headerlink\" title=\"陈家辉的个人简历\"></a>陈家辉的个人简历</h4><p>.Net 开发工程师</p><h5 id=\"基本资料\"><a href=\"#基本资料\" class=\"headerlink\" title=\"基本资料\"></a>基本资料</h5><p>姓 名：陈家辉 工作经验：1.5 年 联系邮箱：<a href=\"mailto:1120873075@qq.com\" target=\"_blank\" rel=\"noopener\">1120873075@qq.com</a> 联系电话：136-5041-5452</p><h5 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h5><p>熟练掌握 ASP.NET 开发并可以使用 .Net Core 进行跨平台开发、熟练使用 MVC 框架、熟悉 Spring.Net, Log4.Net 等框架、熟悉 Web API、WCF 技术，能独立开发基于 Asp.Net Core 的 B/S 系统。<br>熟练掌握 Winform 桌面程序开发、能独立开发 Windows PC 端应用，并使用 DevExpress 进行开发。<br>熟悉 SQL 语言，熟练使用 SQL Server、Oracle 数据库，掌握数据库设计流程；<br>熟练使用 HTML、CSS、JavaScript 技术以及 JQuery、Bootstrap、Vue.JS、JQuery EasyUI 等框架进行网页设计；<br>有微服务架构相应的技能基础。</p><h5 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h5><h6 id=\"永利八达通TMS系统（2019-08–至今）\"><a href=\"#永利八达通TMS系统（2019-08–至今）\" class=\"headerlink\" title=\"永利八达通TMS系统（2019/08–至今）\"></a>永利八达通TMS系统（2019/08–至今）</h6><p>项目介绍<br>本项目主要分为十大模块(权限管理、基础资料、业务配置、运单管理、物料管理、报价管理、操作管理、财务管理、客服管理、项目管理)。本系统主要是为了给永利八达通公司的TMS业务提供更为方便快捷的服务，使得每一票运单的轨迹和操作日志，当前所在节点都清晰可见，同时对于报价的灵活配置也使得公司切换报价时不会出现手忙脚乱的情况。</p><p>技术选型<br>C#、Winform、DevExpress.</p><p>职责领域<br>本人主要负责其中的业务配置、物料管理、报价管理以及部分的运单管理。</p><h6 id=\"酒店订餐管理系统（2016-10–2016-11）\"><a href=\"#酒店订餐管理系统（2016-10–2016-11）\" class=\"headerlink\" title=\"酒店订餐管理系统（2016/10–2016/11）\"></a>酒店订餐管理系统（2016/10–2016/11）</h6><p>项目介绍<br>可以对酒店内的所有菜名以及相对应的菜号进行查询；可以对订餐的客户进行记录，并能查询、修改、删除和结算总额；可以对每日的营业额进行结算，以及统计利润总额。本人担当该项目的主要编程人员同时负责核心代码 。</p><p>第一阶段（2016/03–2016/5）<br>开发环境<br>Windows 10、PhpStorm、Mysql、Github</p><p>技术选型<br>PHP、Mycncart、HTML5、jQuery、Ajax、BootStrap、Node.js</p><p>阶段简介<br>这个阶段主要是为了能够尽快完成酒店方面提出的需求以便投入使用，选用了PHP的Mycncart框架作为项目的整体解决方案。项目从2016年9月提出，10月收到酒店订餐管理系统的设计图，11月完成系统的大部分功能，目前运行良好。</p><p>第二阶段（2016/11–2016/11）</p><p>阶段简介<br>由于第一阶段有部分功能由于时间过于紧张尚未实现，再加上酒店在系统投入使用后,对系统有了新的需求。于是在原来的基础上加上了后台新消息的通知和声音提示，和相应的邮件推送的功能。</p><h5 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h5><p>2018/08 – 至今 深圳市智腾达软件技术有限公司<br>2017/02 – 2017/11 广东中拓信息技术有限公司<br>2013/09 – 2018/07 广东医科大学学生</p><h5 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h5><p>热爱编程<br>能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。<br>出色的自学能力<br>专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。</p><h5 id=\"想做的事儿\"><a href=\"#想做的事儿\" class=\"headerlink\" title=\"想做的事儿\"></a>想做的事儿</h5><p>深入研究 C# 底层原理，阅读 C# 源码；随时了解计算机前沿技术，扎根开源社区，贡献开源项目；<br>在学习的同时勤写博客记录分享所得所思.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"陈家辉的个人简历\"><a href=\"#陈家辉的个人简历\" class=\"headerlink\" title=\"陈家辉的个人简历\"></a>陈家辉的个人简历</h4><p>.Net 开发工程师</p><h5 id=\"基本资料\"><a href=\"#基本资料\" class=\"headerlink\" title=\"基本资料\"></a>基本资料</h5><p>姓 名：陈家辉 工作经验：1.5 年 联系邮箱：<a href=\"mailto:1120873075@qq.com\" target=\"_blank\" rel=\"noopener\">1120873075@qq.com</a> 联系电话：136-5041-5452</p><h5 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h5><p>熟练掌握 ASP.NET 开发并可以使用 .Net Core 进行跨平台开发、熟练使用 MVC 框架、熟悉 Spring.Net, Log4.Net 等框架、熟悉 Web API、WCF 技术，能独立开发基于 Asp.Net Core 的 B/S 系统。<br>熟练掌握 Winform 桌面程序开发、能独立开发 Windows PC 端应用，并使用 DevExpress 进行开发。<br>熟悉 SQL 语言，熟练使用 SQL Server、Oracle 数据库，掌握数据库设计流程；<br>熟练使用 HTML、CSS、JavaScript 技术以及 JQuery、Bootstrap、Vue.JS、JQuery EasyUI 等框架进行网页设计；<br>有微服务架构相应的技能基础。</p><h5 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h5><h6 id=\"永利八达通TMS系统（2019-08–至今）\"><a href=\"#永利八达通TMS系统（2019-08–至今）\" class=\"headerlink\" title=\"永利八达通TMS系统（2019/08–至今）\"></a>永利八达通TMS系统（2019/08–至今）</h6><p>项目介绍<br>本项目主要分为十大模块(权限管理、基础资料、业务配置、运单管理、物料管理、报价管理、操作管理、财务管理、客服管理、项目管理)。本系统主要是为了给永利八达通公司的TMS业务提供更为方便快捷的服务，使得每一票运单的轨迹和操作日志，当前所在节点都清晰可见，同时对于报价的灵活配置也使得公司切换报价时不会出现手忙脚乱的情况。</p><p>技术选型<br>C#、Winform、DevExpress.</p><p>职责领域<br>本人主要负责其中的业务配置、物料管理、报价管理以及部分的运单管理。</p><h6 id=\"酒店订餐管理系统（2016-10–2016-11）\"><a href=\"#酒店订餐管理系统（2016-10–2016-11）\" class=\"headerlink\" title=\"酒店订餐管理系统（2016/10–2016/11）\"></a>酒店订餐管理系统（2016/10–2016/11）</h6><p>项目介绍<br>可以对酒店内的所有菜名以及相对应的菜号进行查询；可以对订餐的客户进行记录，并能查询、修改、删除和结算总额；可以对每日的营业额进行结算，以及统计利润总额。本人担当该项目的主要编程人员同时负责核心代码 。</p><p>第一阶段（2016/03–2016/5）<br>开发环境<br>Windows 10、PhpStorm、Mysql、Github</p><p>技术选型<br>PHP、Mycncart、HTML5、jQuery、Ajax、BootStrap、Node.js</p><p>阶段简介<br>这个阶段主要是为了能够尽快完成酒店方面提出的需求以便投入使用，选用了PHP的Mycncart框架作为项目的整体解决方案。项目从2016年9月提出，10月收到酒店订餐管理系统的设计图，11月完成系统的大部分功能，目前运行良好。</p><p>第二阶段（2016/11–2016/11）</p><p>阶段简介<br>由于第一阶段有部分功能由于时间过于紧张尚未实现，再加上酒店在系统投入使用后,对系统有了新的需求。于是在原来的基础上加上了后台新消息的通知和声音提示，和相应的邮件推送的功能。</p><h5 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h5><p>2018/08 – 至今 深圳市智腾达软件技术有限公司<br>2017/02 – 2017/11 广东中拓信息技术有限公司<br>2013/09 – 2018/07 广东医科大学学生</p><h5 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h5><p>热爱编程<br>能积极主动的学习编程知识并用于解决实际问题，编程上的进步能给我带来充分的成就感，鼓舞我继续努力学习。<br>出色的自学能力<br>专业课成绩名列前茅；能在文档齐全的情况下迅速的学习并上手新技术，能够在工具辅助下流畅阅读英文文档。</p><h5 id=\"想做的事儿\"><a href=\"#想做的事儿\" class=\"headerlink\" title=\"想做的事儿\"></a>想做的事儿</h5><p>深入研究 C# 底层原理，阅读 C# 源码；随时了解计算机前沿技术，扎根开源社区，贡献开源项目；<br>在学习的同时勤写博客记录分享所得所思.</p><!-- rebuild by neat -->"}],"Post":[{"title":"Asp.Net Core Cookies和Session","date":"2019-07-01T15:35:38.000Z","_content":"#### 概述\nHttp是没有记录状态的协定,但是可以通过Cookies将Request来源区分开来,并将部分数据暂存于Cookies和Session,是比较常见的用户数据暂存方式\n<!--more-->\n#### Cookies\nCookies是将用户数据存在Client的浏览器,每次Request都会把Cookies发送到Server.在Asp.Net Core中要使用Cookie,可以通过HttpContext.Request 及 HttpContext.Response存入和取出.\n\n*Startup.cs*\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Caty.Web\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            app.Run(async (context) =>\n            {\n                string message;\n                if (!context.Request.Cookies.TryGetValue(\"Caty\", out message))\n                {\n                    message = \"数据已存入cookies.\";\n                }\n                context.Response.Cookies.Append(\"Caty\", \"启用Cookies.\");\n                // 刪除Cookies数据\n                await context.Response.WriteAsync($\"{message}\");\n            });\n        }\n    }\n}\n```\n> 当Cookies存入的数据越多,封包就会越大,因为每个Request都会带着Cookies数据\n\n#### Session\nSession是通过Cookies内的唯一识别标识,把用户数据存入到Server端的数据库或NoSql.\nAsp.Net Core使用Session要先加入两个服务\n* Session 容器\n\n  Session可以存在不同的地方,通过DI 分布式缓存 ,让Session服务知道要将Session存入哪里.\n* Session 服务\n\n  在DI容器加入Session服务,并将Session的中间件加入管道.\n\n*Startup.cs*\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Caty.Web\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // 將 Session 存在 ASP.NET Core 記憶體中\n            services.AddDistributedMemoryCache();\n            services.AddSession();\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            // SessionMiddleware 加入 Pipeline\n            app.UseSession();\n\n            app.Run(async (context) =>\n            {\n                context.Session.SetString(\"Sample\", \"This is Session.\");\n                string message = context.Session.GetString(\"Sample\");\n                await context.Response.WriteAsync($\"{message}\");\n            });\n        }\n    }\n}\n```\n\n#### 数据模型\n要将Model存到Session中,需要自己进行序列化.如Json\n*SessionJson.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Newtonsoft.Json;\n\nnamespace Caty.Web\n{\n    public static class SessionJson\n    {\n        public static void SetObject<T>(this ISession session, string key, T value)\n        {\n            session.SetString(key, JsonConvert.SerializeObject(value));\n        }\n\n        public static T GetObject<T>(this ISession session, string key)\n        {\n            var value = session.GetString(key);\n            return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value);\n        }\n    }\n}\n```\n 调用\n```cs\nvar user = context.Session.GetObject<UserModel>(\"user\");\ncontext.Session.SetObject(\"user\", user);\n```\n\n#### 安全性\nSession数据都存在Server端看似安全,但如果封包被拦截,一样可以取到用户数据.\n\n##### 安全调整建议\n* SecurePolicy\n\n  限制只有在Https请求的情况下,才允许使用Session.在加密请求下,不容易被拦截.\n* IdleTimeOut\n\n  合理修改Session到期时间,默认是20分钟没有与Server通讯的Request就会将Session'修改为过去状态.\n* Name\n\n  修改默认的Session名称,避免暴露网站技术和Server信息.\n  *Startup.cs*\n  ```cs\n  public void ConfigureServices(IServiceCollection services)\n  {\n      services.AddDistributedMemoryCache();\n      service.AddSession(options = >\n      {\n          options.Cookie.SecurePolicy = CookieSecurePolicy.Always;\n          options.Cookie.Name = \"CatyWeb\";\n          options.IdTimeout = TimeSpan.FromMinutes(5);\n      });\n  }\n  ```\n\n#### 强类型\n因为Cookies和Session默认是通过字符串的方式来存取数据,弱类型可能会存在打错字的情况.\n\n*SessionWapper.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing MyWebsite.Extensions;\n\npublic interface ISessionWapper\n{\n    UserModel User { get; set; }\n}\n\npublic class SessionWapper : ISessionWapper\n{\n    private static readonly string _userKey = \"session.user\";\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public SessionWapper(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor = httpContextAccessor;\n    }\n\n    private ISession Session\n    {\n        get\n        {\n            return _httpContextAccessor.HttpContext.Session;\n        }\n    }\n\n    public UserModel User\n    {\n        get\n        {\n            return Session.GetObject<UserModel>(_userKey);\n        }\n        set\n        {\n            Session.SetObject(_userKey, value);\n        }\n    }\n}\n```\n在DI容器中加入IHttpContextAccessor和ISeesionWapper.\n\n*Startup.cs*\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n    services.AddSingleton<ISessionWapper, SessionWapper>();\n}\n```\nIHttpContextAccessor\n实现了 `IHttpContextAccessor`，让 `HttpContext` 可以注入給需要用到的物件使用。\n`IHttpContextAccessor` 是 `HttpContext` 实例的接口，用 **Singleton**的方式可以供其它物件使用。\n\n调用\n\n*HomeController.cs*\n```cs\nnamespace Caty.Wed.Controllers\n{\n    public class HomeController : Controller\n    {\n        private readonly ISessionWapper _sessionWapper;\n\n        public HomeController(ISessionWapper sessionWapper)\n        {\n            _sessionWapper = sessionWapper;\n        }\n\n        public IActionResult Index()\n        {\n            var user = _sessionWapper.User;\n            _sessionWapper.User = user;\n            return Ok(user);\n        }\n    }\n}\n```\n","source":"_posts/Asp-Net-Core-Cookies和Session.md","raw":"---\ntitle: Asp.Net Core Cookies和Session\ndate: 2019-07-01 23:35:38\ncategories: .Net Core\ntags:\n - .Net Core\n - Cookies\n - Session\n---\n#### 概述\nHttp是没有记录状态的协定,但是可以通过Cookies将Request来源区分开来,并将部分数据暂存于Cookies和Session,是比较常见的用户数据暂存方式\n<!--more-->\n#### Cookies\nCookies是将用户数据存在Client的浏览器,每次Request都会把Cookies发送到Server.在Asp.Net Core中要使用Cookie,可以通过HttpContext.Request 及 HttpContext.Response存入和取出.\n\n*Startup.cs*\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Caty.Web\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            app.Run(async (context) =>\n            {\n                string message;\n                if (!context.Request.Cookies.TryGetValue(\"Caty\", out message))\n                {\n                    message = \"数据已存入cookies.\";\n                }\n                context.Response.Cookies.Append(\"Caty\", \"启用Cookies.\");\n                // 刪除Cookies数据\n                await context.Response.WriteAsync($\"{message}\");\n            });\n        }\n    }\n}\n```\n> 当Cookies存入的数据越多,封包就会越大,因为每个Request都会带着Cookies数据\n\n#### Session\nSession是通过Cookies内的唯一识别标识,把用户数据存入到Server端的数据库或NoSql.\nAsp.Net Core使用Session要先加入两个服务\n* Session 容器\n\n  Session可以存在不同的地方,通过DI 分布式缓存 ,让Session服务知道要将Session存入哪里.\n* Session 服务\n\n  在DI容器加入Session服务,并将Session的中间件加入管道.\n\n*Startup.cs*\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Caty.Web\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // 將 Session 存在 ASP.NET Core 記憶體中\n            services.AddDistributedMemoryCache();\n            services.AddSession();\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            // SessionMiddleware 加入 Pipeline\n            app.UseSession();\n\n            app.Run(async (context) =>\n            {\n                context.Session.SetString(\"Sample\", \"This is Session.\");\n                string message = context.Session.GetString(\"Sample\");\n                await context.Response.WriteAsync($\"{message}\");\n            });\n        }\n    }\n}\n```\n\n#### 数据模型\n要将Model存到Session中,需要自己进行序列化.如Json\n*SessionJson.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Newtonsoft.Json;\n\nnamespace Caty.Web\n{\n    public static class SessionJson\n    {\n        public static void SetObject<T>(this ISession session, string key, T value)\n        {\n            session.SetString(key, JsonConvert.SerializeObject(value));\n        }\n\n        public static T GetObject<T>(this ISession session, string key)\n        {\n            var value = session.GetString(key);\n            return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value);\n        }\n    }\n}\n```\n 调用\n```cs\nvar user = context.Session.GetObject<UserModel>(\"user\");\ncontext.Session.SetObject(\"user\", user);\n```\n\n#### 安全性\nSession数据都存在Server端看似安全,但如果封包被拦截,一样可以取到用户数据.\n\n##### 安全调整建议\n* SecurePolicy\n\n  限制只有在Https请求的情况下,才允许使用Session.在加密请求下,不容易被拦截.\n* IdleTimeOut\n\n  合理修改Session到期时间,默认是20分钟没有与Server通讯的Request就会将Session'修改为过去状态.\n* Name\n\n  修改默认的Session名称,避免暴露网站技术和Server信息.\n  *Startup.cs*\n  ```cs\n  public void ConfigureServices(IServiceCollection services)\n  {\n      services.AddDistributedMemoryCache();\n      service.AddSession(options = >\n      {\n          options.Cookie.SecurePolicy = CookieSecurePolicy.Always;\n          options.Cookie.Name = \"CatyWeb\";\n          options.IdTimeout = TimeSpan.FromMinutes(5);\n      });\n  }\n  ```\n\n#### 强类型\n因为Cookies和Session默认是通过字符串的方式来存取数据,弱类型可能会存在打错字的情况.\n\n*SessionWapper.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing MyWebsite.Extensions;\n\npublic interface ISessionWapper\n{\n    UserModel User { get; set; }\n}\n\npublic class SessionWapper : ISessionWapper\n{\n    private static readonly string _userKey = \"session.user\";\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public SessionWapper(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor = httpContextAccessor;\n    }\n\n    private ISession Session\n    {\n        get\n        {\n            return _httpContextAccessor.HttpContext.Session;\n        }\n    }\n\n    public UserModel User\n    {\n        get\n        {\n            return Session.GetObject<UserModel>(_userKey);\n        }\n        set\n        {\n            Session.SetObject(_userKey, value);\n        }\n    }\n}\n```\n在DI容器中加入IHttpContextAccessor和ISeesionWapper.\n\n*Startup.cs*\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n    services.AddSingleton<ISessionWapper, SessionWapper>();\n}\n```\nIHttpContextAccessor\n实现了 `IHttpContextAccessor`，让 `HttpContext` 可以注入給需要用到的物件使用。\n`IHttpContextAccessor` 是 `HttpContext` 实例的接口，用 **Singleton**的方式可以供其它物件使用。\n\n调用\n\n*HomeController.cs*\n```cs\nnamespace Caty.Wed.Controllers\n{\n    public class HomeController : Controller\n    {\n        private readonly ISessionWapper _sessionWapper;\n\n        public HomeController(ISessionWapper sessionWapper)\n        {\n            _sessionWapper = sessionWapper;\n        }\n\n        public IActionResult Index()\n        {\n            var user = _sessionWapper.User;\n            _sessionWapper.User = user;\n            return Ok(user);\n        }\n    }\n}\n```\n","slug":"Asp-Net-Core-Cookies和Session","published":1,"updated":"2019-07-09T15:49:01.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1xv0000tkuispth4lbk","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>Http是没有记录状态的协定,但是可以通过Cookies将Request来源区分开来,并将部分数据暂存于Cookies和Session,是比较常见的用户数据暂存方式<br><a id=\"more\"></a></p><h4 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h4><p>Cookies是将用户数据存在Client的浏览器,每次Request都会把Cookies发送到Server.在Asp.Net Core中要使用Cookie,可以通过HttpContext.Request 及 HttpContext.Response存入和取出.</p><p><em>Startup.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            app.Run(<span class=\"keyword\">async</span> (context) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> message;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!context.Request.Cookies.TryGetValue(<span class=\"string\">\"Caty\"</span>, <span class=\"keyword\">out</span> message))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    message = <span class=\"string\">\"数据已存入cookies.\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                context.Response.Cookies.Append(<span class=\"string\">\"Caty\"</span>, <span class=\"string\">\"启用Cookies.\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 刪除Cookies数据</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;message&#125;</span>\"</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>当Cookies存入的数据越多,封包就会越大,因为每个Request都会带着Cookies数据</p></blockquote><h4 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h4><p>Session是通过Cookies内的唯一识别标识,把用户数据存入到Server端的数据库或NoSql.<br>Asp.Net Core使用Session要先加入两个服务</p><ul><li><p>Session 容器</p><p>Session可以存在不同的地方,通过DI 分布式缓存 ,让Session服务知道要将Session存入哪里.</p></li><li><p>Session 服务</p><p>在DI容器加入Session服务,并将Session的中间件加入管道.</p></li></ul><p><em>Startup.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 將 Session 存在 ASP.NET Core 記憶體中</span></span><br><span class=\"line\">            services.AddDistributedMemoryCache();</span><br><span class=\"line\">            services.AddSession();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// SessionMiddleware 加入 Pipeline</span></span><br><span class=\"line\">            app.UseSession();</span><br><span class=\"line\"></span><br><span class=\"line\">            app.Run(<span class=\"keyword\">async</span> (context) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                context.Session.SetString(<span class=\"string\">\"Sample\"</span>, <span class=\"string\">\"This is Session.\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">string</span> message = context.Session.GetString(<span class=\"string\">\"Sample\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;message&#125;</span>\"</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h4><p>要将Model存到Session中,需要自己进行序列化.如Json<br><em>SessionJson.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Newtonsoft.Json;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionJson</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> SetObject&lt;T&gt;(<span class=\"keyword\">this</span> ISession session, <span class=\"keyword\">string</span> key, T <span class=\"keyword\">value</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            session.SetString(key, JsonConvert.SerializeObject(<span class=\"keyword\">value</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T GetObject&lt;T&gt;(<span class=\"keyword\">this</span> ISession session, <span class=\"keyword\">string</span> key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = session.GetString(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"keyword\">default</span>(T) : JsonConvert.DeserializeObject&lt;T&gt;(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>调用<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = context.Session.GetObject&lt;UserModel&gt;(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">context.Session.SetObject(<span class=\"string\">\"user\"</span>, user);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p>Session数据都存在Server端看似安全,但如果封包被拦截,一样可以取到用户数据.</p><h5 id=\"安全调整建议\"><a href=\"#安全调整建议\" class=\"headerlink\" title=\"安全调整建议\"></a>安全调整建议</h5><ul><li><p>SecurePolicy</p><p>限制只有在Https请求的情况下,才允许使用Session.在加密请求下,不容易被拦截.</p></li><li><p>IdleTimeOut</p><p>合理修改Session到期时间,默认是20分钟没有与Server通讯的Request就会将Session’修改为过去状态.</p></li><li><p>Name</p><p>修改默认的Session名称,避免暴露网站技术和Server信息.<br><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddDistributedMemoryCache();</span><br><span class=\"line\">    service.AddSession(options = &gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Cookie.SecurePolicy = CookieSecurePolicy.Always;</span><br><span class=\"line\">        options.Cookie.Name = <span class=\"string\">\"CatyWeb\"</span>;</span><br><span class=\"line\">        options.IdTimeout = TimeSpan.FromMinutes(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"强类型\"><a href=\"#强类型\" class=\"headerlink\" title=\"强类型\"></a>强类型</h4><p>因为Cookies和Session默认是通过字符串的方式来存取数据,弱类型可能会存在打错字的情况.</p><p><em>SessionWapper.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> MyWebsite.Extensions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISessionWapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UserModel User &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionWapper</span> : <span class=\"title\">ISessionWapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> _userKey = <span class=\"string\">\"session.user\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SessionWapper</span>(<span class=\"params\">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _httpContextAccessor = httpContextAccessor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISession Session</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _httpContextAccessor.HttpContext.Session;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserModel User</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Session.GetObject&lt;UserModel&gt;(_userKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Session.SetObject(_userKey, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在DI容器中加入IHttpContextAccessor和ISeesionWapper.</p><p><em>Startup.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\">    services.AddSingleton&lt;ISessionWapper, SessionWapper&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IHttpContextAccessor<br>实现了 <code>IHttpContextAccessor</code>，让 <code>HttpContext</code> 可以注入給需要用到的物件使用。<br><code>IHttpContextAccessor</code> 是 <code>HttpContext</code> 实例的接口，用 <strong>Singleton</strong>的方式可以供其它物件使用。</p><p>调用</p><p><em>HomeController.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Wed.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISessionWapper _sessionWapper;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span>(<span class=\"params\">ISessionWapper sessionWapper</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _sessionWapper = sessionWapper;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> user = _sessionWapper.User;</span><br><span class=\"line\">            _sessionWapper.User = user;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Ok(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>Http是没有记录状态的协定,但是可以通过Cookies将Request来源区分开来,并将部分数据暂存于Cookies和Session,是比较常见的用户数据暂存方式<br>","more":"</p><h4 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h4><p>Cookies是将用户数据存在Client的浏览器,每次Request都会把Cookies发送到Server.在Asp.Net Core中要使用Cookie,可以通过HttpContext.Request 及 HttpContext.Response存入和取出.</p><p><em>Startup.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            app.Run(<span class=\"keyword\">async</span> (context) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> message;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!context.Request.Cookies.TryGetValue(<span class=\"string\">\"Caty\"</span>, <span class=\"keyword\">out</span> message))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    message = <span class=\"string\">\"数据已存入cookies.\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                context.Response.Cookies.Append(<span class=\"string\">\"Caty\"</span>, <span class=\"string\">\"启用Cookies.\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 刪除Cookies数据</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;message&#125;</span>\"</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>当Cookies存入的数据越多,封包就会越大,因为每个Request都会带着Cookies数据</p></blockquote><h4 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h4><p>Session是通过Cookies内的唯一识别标识,把用户数据存入到Server端的数据库或NoSql.<br>Asp.Net Core使用Session要先加入两个服务</p><ul><li><p>Session 容器</p><p>Session可以存在不同的地方,通过DI 分布式缓存 ,让Session服务知道要将Session存入哪里.</p></li><li><p>Session 服务</p><p>在DI容器加入Session服务,并将Session的中间件加入管道.</p></li></ul><p><em>Startup.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 將 Session 存在 ASP.NET Core 記憶體中</span></span><br><span class=\"line\">            services.AddDistributedMemoryCache();</span><br><span class=\"line\">            services.AddSession();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// SessionMiddleware 加入 Pipeline</span></span><br><span class=\"line\">            app.UseSession();</span><br><span class=\"line\"></span><br><span class=\"line\">            app.Run(<span class=\"keyword\">async</span> (context) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                context.Session.SetString(<span class=\"string\">\"Sample\"</span>, <span class=\"string\">\"This is Session.\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">string</span> message = context.Session.GetString(<span class=\"string\">\"Sample\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;message&#125;</span>\"</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h4><p>要将Model存到Session中,需要自己进行序列化.如Json<br><em>SessionJson.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Newtonsoft.Json;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionJson</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> SetObject&lt;T&gt;(<span class=\"keyword\">this</span> ISession session, <span class=\"keyword\">string</span> key, T <span class=\"keyword\">value</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            session.SetString(key, JsonConvert.SerializeObject(<span class=\"keyword\">value</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T GetObject&lt;T&gt;(<span class=\"keyword\">this</span> ISession session, <span class=\"keyword\">string</span> key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = session.GetString(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"keyword\">default</span>(T) : JsonConvert.DeserializeObject&lt;T&gt;(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>调用<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = context.Session.GetObject&lt;UserModel&gt;(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">context.Session.SetObject(<span class=\"string\">\"user\"</span>, user);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p>Session数据都存在Server端看似安全,但如果封包被拦截,一样可以取到用户数据.</p><h5 id=\"安全调整建议\"><a href=\"#安全调整建议\" class=\"headerlink\" title=\"安全调整建议\"></a>安全调整建议</h5><ul><li><p>SecurePolicy</p><p>限制只有在Https请求的情况下,才允许使用Session.在加密请求下,不容易被拦截.</p></li><li><p>IdleTimeOut</p><p>合理修改Session到期时间,默认是20分钟没有与Server通讯的Request就会将Session’修改为过去状态.</p></li><li><p>Name</p><p>修改默认的Session名称,避免暴露网站技术和Server信息.<br><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddDistributedMemoryCache();</span><br><span class=\"line\">    service.AddSession(options = &gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Cookie.SecurePolicy = CookieSecurePolicy.Always;</span><br><span class=\"line\">        options.Cookie.Name = <span class=\"string\">\"CatyWeb\"</span>;</span><br><span class=\"line\">        options.IdTimeout = TimeSpan.FromMinutes(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"强类型\"><a href=\"#强类型\" class=\"headerlink\" title=\"强类型\"></a>强类型</h4><p>因为Cookies和Session默认是通过字符串的方式来存取数据,弱类型可能会存在打错字的情况.</p><p><em>SessionWapper.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> MyWebsite.Extensions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISessionWapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UserModel User &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionWapper</span> : <span class=\"title\">ISessionWapper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> _userKey = <span class=\"string\">\"session.user\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SessionWapper</span>(<span class=\"params\">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _httpContextAccessor = httpContextAccessor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISession Session</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _httpContextAccessor.HttpContext.Session;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserModel User</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Session.GetObject&lt;UserModel&gt;(_userKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Session.SetObject(_userKey, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在DI容器中加入IHttpContextAccessor和ISeesionWapper.</p><p><em>Startup.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\">    services.AddSingleton&lt;ISessionWapper, SessionWapper&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IHttpContextAccessor<br>实现了 <code>IHttpContextAccessor</code>，让 <code>HttpContext</code> 可以注入給需要用到的物件使用。<br><code>IHttpContextAccessor</code> 是 <code>HttpContext</code> 实例的接口，用 <strong>Singleton</strong>的方式可以供其它物件使用。</p><p>调用</p><p><em>HomeController.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Wed.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISessionWapper _sessionWapper;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span>(<span class=\"params\">ISessionWapper sessionWapper</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _sessionWapper = sessionWapper;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> user = _sessionWapper.User;</span><br><span class=\"line\">            _sessionWapper.User = user;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Ok(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"Asp.Net Core REST API基础","date":"2018-06-08T07:37:04.000Z","_content":"#### 前言\n前段时间,毕业设计用的是前后端分离的设计,后端就是基于Asp.Net Core开发的 REST API,借这个机会,顺路梳理一下关于REST API与Asp.Net Core建立REST API的基础知识\n<!--more-->\n#### REST 的定义\nREST 是 Representational State Transfer 的缩写. 它是一种架构的风格, 这种风格基于一套预定义的规则, 这些规则描述了网络资源是如何定义和寻址的.\n一个实现了REST这些规则的服务就叫做RESTful的服务.\n#### REST 的原则\nRESTful API 最关心的有这几方面: 性能, 可扩展性, 简洁性, 互操作性, 通讯可见性, 组件便携性和可靠性.\n这些方面被封装在REST的6个原则里, 它们是: \n1. 客户端-服务端约束: 客户端和服务端是分离的, 它们可以独自的进化.\n2. 无状态: 客户端和服务段的通信必须是无状态的, 状态应包含在请求里的. 也就是说请求里要包含服务端需要的所有的信息, 以便服务端可以理解请求并可以创造上下文.\n3. 分层系统: 就像其它的软件架构一样, REST也需要分层结构, 但是不允许某层直接访问不相邻的层. \n4. 统一接口: 这里分为4点, 他们是: 资源标识符(URI), 资源的操作(也就是方法Method, HTTP动词), 自描述的响应(可以认为是媒体类型Media-Type), 以及状态管理(超媒体作为应用状态的引擎 HATEOAS, Hypermedia as the Engine of Application State).\n5. 缓存: 缓存约束派生于无状态约束, 它要求从服务端返回的响应必须明确表明是可缓存的还是不可缓存的.\n6. 按需编码: 这允许客户端可以从服务端访问特定的资源而无须知晓如何处理它们. 服务端可以扩展或自定义客户端的功能.\n#### Asp.Net Core Action\n在Controller里面，可以使用public修饰符来定义Action，通常会带有参数，可以返回任何类型，但是大多数情况下应该返回IActionResult。Action的方法名要么是以HTTP的动词开头，要么是使用HTTP动词属性标签，包括：[HttpGet], [HttpPut], [HttpPost], [HttpDelete], [HttpHead], [HttpOptions], [HttpPatch].\n\nController基类提供了很多帮助方法，例如：Ok, NotFound, BadRequest等，它们分别对应HTTP的状态码 200, 404, 400；此外还有Redirect，LocalRedirect，RedirectToRoute，Json，File，Content等方法。\n\n路由属性标签可以标注在Controller或者Action方法上\n\n##### 实体绑定\n如果定义在路由里,Action可以自动映射,没有定义在路由里的,可以通过使用属性标签告诉Action从哪里获取参数,属性标签包含[FromBody],[FromForm],[FromHeader],[FromRoute],[FromServices]等\n```cs\nusing System;\nusing Microsoft.AspNetCore.Mvc;\nusing IRS.Model;\n\nnamespace IRS.Web.Controllers\n{\n    [Route(\"api/address\")]\n    public class AddressController : Controller\n    {\n        private ICategoryInfoService _categoryInfoService;\n        public AddressController(ICategoryInfoService categoryInfoService)\n        {\n            _categoryInfoService = categoryInfoService;\n        }\n        \n        [HttpGet]\n        public ActionResult GetAddressInfos()\n        {\n            var addresslist = _categoryInfoService.LoadEntities(c => c.CategoryInfoType == 1);\n            return Json(new\n            {\n                data = addresslist\n            });\n        }\n        \n        [HttpGet(\"{id}\")]\n        public ActionResult GetAddressInfo(int id)\n        {\n            var address = _categoryInfoService.LoadEntities(c => c.CategoryInfoId == id && c.CategoryInfoType == 1).FirstOrDefault();\n            return Json(new\n            {\n                data =address\n            });\n        }\n        \n        [HttpPost]\n        public ActionResult AddAddressInfo([FromBody] CategoryInfo categoryInfo)\n        {\n            var result = _categoryInfoService.AddEntity(categoryInfo);\n            return Json(new\n            {\n                status_code = 200\n            });\n        }\n    }\n}\n```\n\n##### 实体验证\nAsp.Net Core内置的实体验证是通过验证属性标签来实现的\n```cs\n public class CategoryInfo\n    {\n        [Required]\n        public int CategoryInfoId { get; set; }\n        [Required]\n        public int CategoryInfoType { get; set; }\n        [MinLength(3)]\n        public string CategoryInfoName { get; set; }\n        [Range(0,1)]\n        public int CategoryInfoEnable { get; set; }\n        public int CategoryInfoOrder { get; set; }\n        public int StartFlag { get; set; }\n        public int EndFlag { get; set; }\n    }\n```\n判断实体参数是否符合要求，可以检查ModelState.IsValid属性\n```cs\npublic IActionResult Post([FromBody] CategoryInfo category)\n{\n    if(ModelState.IsValid)\n    {\n        return Ok();\n    }\n    return BadRequest(ModelState);\n}\n```\n使用Display可以自定义属性的显式名称，在其它错误信息里可以使用{0}来引用该名称\n```cs\npublic class CategoryInfo\n    {\n        [Required]\n        public int CategoryInfoId { get; set; }\n        [Required]\n        public int CategoryInfoType { get; set; }\n        [Display(Name =\"分类名\"), Required, MaxLength(10, ErrorMessage=\"{0}的长度不可超过{1}\")]\n        public string CategoryInfoName { get; set; }\n        [Range(0,1)]\n        public int CategoryInfoEnable { get; set; }\n        public int CategoryInfoOrder { get; set; }\n        public int StartFlag { get; set; }\n        public int EndFlag { get; set; }\n    }\n```\n通过继承VaildationAttribute来创建自定义验证属性标签\n```cs\nusing System.ComponentModel.DataAnnotations;\n\nnamespace IRS.API.CustomValidations\n{\n    public class NameHasHyphenAttribute:ValidationAttribute\n    {\n        protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n        {\n            var str = value.ToString();\n            if(str.IndexOf(' ') == -1)\n            {\n                return new ValidationResult(\"名称必须包含-\");\n            }\n            return ValidationResult.Success;\n        }\n    }\n}\n```\n将标签放到CategoryInfoName属性上即可.\n\n未完待续....","source":"_posts/Asp-Net-Core-REST-API基础.md","raw":"---\ntitle: Asp.Net Core REST API基础\ndate: 2018-06-08 15:37:04\ncategories: .Net Core\ntags:\n - .Net Core\n - REST API\n---\n#### 前言\n前段时间,毕业设计用的是前后端分离的设计,后端就是基于Asp.Net Core开发的 REST API,借这个机会,顺路梳理一下关于REST API与Asp.Net Core建立REST API的基础知识\n<!--more-->\n#### REST 的定义\nREST 是 Representational State Transfer 的缩写. 它是一种架构的风格, 这种风格基于一套预定义的规则, 这些规则描述了网络资源是如何定义和寻址的.\n一个实现了REST这些规则的服务就叫做RESTful的服务.\n#### REST 的原则\nRESTful API 最关心的有这几方面: 性能, 可扩展性, 简洁性, 互操作性, 通讯可见性, 组件便携性和可靠性.\n这些方面被封装在REST的6个原则里, 它们是: \n1. 客户端-服务端约束: 客户端和服务端是分离的, 它们可以独自的进化.\n2. 无状态: 客户端和服务段的通信必须是无状态的, 状态应包含在请求里的. 也就是说请求里要包含服务端需要的所有的信息, 以便服务端可以理解请求并可以创造上下文.\n3. 分层系统: 就像其它的软件架构一样, REST也需要分层结构, 但是不允许某层直接访问不相邻的层. \n4. 统一接口: 这里分为4点, 他们是: 资源标识符(URI), 资源的操作(也就是方法Method, HTTP动词), 自描述的响应(可以认为是媒体类型Media-Type), 以及状态管理(超媒体作为应用状态的引擎 HATEOAS, Hypermedia as the Engine of Application State).\n5. 缓存: 缓存约束派生于无状态约束, 它要求从服务端返回的响应必须明确表明是可缓存的还是不可缓存的.\n6. 按需编码: 这允许客户端可以从服务端访问特定的资源而无须知晓如何处理它们. 服务端可以扩展或自定义客户端的功能.\n#### Asp.Net Core Action\n在Controller里面，可以使用public修饰符来定义Action，通常会带有参数，可以返回任何类型，但是大多数情况下应该返回IActionResult。Action的方法名要么是以HTTP的动词开头，要么是使用HTTP动词属性标签，包括：[HttpGet], [HttpPut], [HttpPost], [HttpDelete], [HttpHead], [HttpOptions], [HttpPatch].\n\nController基类提供了很多帮助方法，例如：Ok, NotFound, BadRequest等，它们分别对应HTTP的状态码 200, 404, 400；此外还有Redirect，LocalRedirect，RedirectToRoute，Json，File，Content等方法。\n\n路由属性标签可以标注在Controller或者Action方法上\n\n##### 实体绑定\n如果定义在路由里,Action可以自动映射,没有定义在路由里的,可以通过使用属性标签告诉Action从哪里获取参数,属性标签包含[FromBody],[FromForm],[FromHeader],[FromRoute],[FromServices]等\n```cs\nusing System;\nusing Microsoft.AspNetCore.Mvc;\nusing IRS.Model;\n\nnamespace IRS.Web.Controllers\n{\n    [Route(\"api/address\")]\n    public class AddressController : Controller\n    {\n        private ICategoryInfoService _categoryInfoService;\n        public AddressController(ICategoryInfoService categoryInfoService)\n        {\n            _categoryInfoService = categoryInfoService;\n        }\n        \n        [HttpGet]\n        public ActionResult GetAddressInfos()\n        {\n            var addresslist = _categoryInfoService.LoadEntities(c => c.CategoryInfoType == 1);\n            return Json(new\n            {\n                data = addresslist\n            });\n        }\n        \n        [HttpGet(\"{id}\")]\n        public ActionResult GetAddressInfo(int id)\n        {\n            var address = _categoryInfoService.LoadEntities(c => c.CategoryInfoId == id && c.CategoryInfoType == 1).FirstOrDefault();\n            return Json(new\n            {\n                data =address\n            });\n        }\n        \n        [HttpPost]\n        public ActionResult AddAddressInfo([FromBody] CategoryInfo categoryInfo)\n        {\n            var result = _categoryInfoService.AddEntity(categoryInfo);\n            return Json(new\n            {\n                status_code = 200\n            });\n        }\n    }\n}\n```\n\n##### 实体验证\nAsp.Net Core内置的实体验证是通过验证属性标签来实现的\n```cs\n public class CategoryInfo\n    {\n        [Required]\n        public int CategoryInfoId { get; set; }\n        [Required]\n        public int CategoryInfoType { get; set; }\n        [MinLength(3)]\n        public string CategoryInfoName { get; set; }\n        [Range(0,1)]\n        public int CategoryInfoEnable { get; set; }\n        public int CategoryInfoOrder { get; set; }\n        public int StartFlag { get; set; }\n        public int EndFlag { get; set; }\n    }\n```\n判断实体参数是否符合要求，可以检查ModelState.IsValid属性\n```cs\npublic IActionResult Post([FromBody] CategoryInfo category)\n{\n    if(ModelState.IsValid)\n    {\n        return Ok();\n    }\n    return BadRequest(ModelState);\n}\n```\n使用Display可以自定义属性的显式名称，在其它错误信息里可以使用{0}来引用该名称\n```cs\npublic class CategoryInfo\n    {\n        [Required]\n        public int CategoryInfoId { get; set; }\n        [Required]\n        public int CategoryInfoType { get; set; }\n        [Display(Name =\"分类名\"), Required, MaxLength(10, ErrorMessage=\"{0}的长度不可超过{1}\")]\n        public string CategoryInfoName { get; set; }\n        [Range(0,1)]\n        public int CategoryInfoEnable { get; set; }\n        public int CategoryInfoOrder { get; set; }\n        public int StartFlag { get; set; }\n        public int EndFlag { get; set; }\n    }\n```\n通过继承VaildationAttribute来创建自定义验证属性标签\n```cs\nusing System.ComponentModel.DataAnnotations;\n\nnamespace IRS.API.CustomValidations\n{\n    public class NameHasHyphenAttribute:ValidationAttribute\n    {\n        protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n        {\n            var str = value.ToString();\n            if(str.IndexOf(' ') == -1)\n            {\n                return new ValidationResult(\"名称必须包含-\");\n            }\n            return ValidationResult.Success;\n        }\n    }\n}\n```\n将标签放到CategoryInfoName属性上即可.\n\n未完待续....","slug":"Asp-Net-Core-REST-API基础","published":1,"updated":"2018-06-08T08:53:44.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1xz0001tkuio4yqw893","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>前段时间,毕业设计用的是前后端分离的设计,后端就是基于Asp.Net Core开发的 REST API,借这个机会,顺路梳理一下关于REST API与Asp.Net Core建立REST API的基础知识<br><a id=\"more\"></a></p><h4 id=\"REST-的定义\"><a href=\"#REST-的定义\" class=\"headerlink\" title=\"REST 的定义\"></a>REST 的定义</h4><p>REST 是 Representational State Transfer 的缩写. 它是一种架构的风格, 这种风格基于一套预定义的规则, 这些规则描述了网络资源是如何定义和寻址的.<br>一个实现了REST这些规则的服务就叫做RESTful的服务.</p><h4 id=\"REST-的原则\"><a href=\"#REST-的原则\" class=\"headerlink\" title=\"REST 的原则\"></a>REST 的原则</h4><p>RESTful API 最关心的有这几方面: 性能, 可扩展性, 简洁性, 互操作性, 通讯可见性, 组件便携性和可靠性.<br>这些方面被封装在REST的6个原则里, 它们是:</p><ol><li>客户端-服务端约束: 客户端和服务端是分离的, 它们可以独自的进化.</li><li>无状态: 客户端和服务段的通信必须是无状态的, 状态应包含在请求里的. 也就是说请求里要包含服务端需要的所有的信息, 以便服务端可以理解请求并可以创造上下文.</li><li>分层系统: 就像其它的软件架构一样, REST也需要分层结构, 但是不允许某层直接访问不相邻的层.</li><li>统一接口: 这里分为4点, 他们是: 资源标识符(URI), 资源的操作(也就是方法Method, HTTP动词), 自描述的响应(可以认为是媒体类型Media-Type), 以及状态管理(超媒体作为应用状态的引擎 HATEOAS, Hypermedia as the Engine of Application State).</li><li>缓存: 缓存约束派生于无状态约束, 它要求从服务端返回的响应必须明确表明是可缓存的还是不可缓存的.</li><li>按需编码: 这允许客户端可以从服务端访问特定的资源而无须知晓如何处理它们. 服务端可以扩展或自定义客户端的功能.<h4 id=\"Asp-Net-Core-Action\"><a href=\"#Asp-Net-Core-Action\" class=\"headerlink\" title=\"Asp.Net Core Action\"></a>Asp.Net Core Action</h4>在Controller里面，可以使用public修饰符来定义Action，通常会带有参数，可以返回任何类型，但是大多数情况下应该返回IActionResult。Action的方法名要么是以HTTP的动词开头，要么是使用HTTP动词属性标签，包括：[HttpGet], [HttpPut], [HttpPost], [HttpDelete], [HttpHead], [HttpOptions], [HttpPatch].</li></ol><p>Controller基类提供了很多帮助方法，例如：Ok, NotFound, BadRequest等，它们分别对应HTTP的状态码 200, 404, 400；此外还有Redirect，LocalRedirect，RedirectToRoute，Json，File，Content等方法。</p><p>路由属性标签可以标注在Controller或者Action方法上</p><h5 id=\"实体绑定\"><a href=\"#实体绑定\" class=\"headerlink\" title=\"实体绑定\"></a>实体绑定</h5><p>如果定义在路由里,Action可以自动映射,没有定义在路由里的,可以通过使用属性标签告诉Action从哪里获取参数,属性标签包含[FromBody],[FromForm],[FromHeader],[FromRoute],[FromServices]等<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> IRS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">IRS.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/address\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AddressController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> ICategoryInfoService _categoryInfoService;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AddressController</span>(<span class=\"params\">ICategoryInfoService categoryInfoService</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _categoryInfoService = categoryInfoService;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">GetAddressInfos</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> addresslist = _categoryInfoService.LoadEntities(c =&gt; c.CategoryInfoType == <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data = addresslist</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">GetAddressInfo</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> address = _categoryInfoService.LoadEntities(c =&gt; c.CategoryInfoId == id &amp;&amp; c.CategoryInfoType == <span class=\"number\">1</span>).FirstOrDefault();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data =address</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">AddAddressInfo</span>(<span class=\"params\">[FromBody] CategoryInfo categoryInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = _categoryInfoService.AddEntity(categoryInfo);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                status_code = <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"实体验证\"><a href=\"#实体验证\" class=\"headerlink\" title=\"实体验证\"></a>实体验证</h5><p>Asp.Net Core内置的实体验证是通过验证属性标签来实现的<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CategoryInfo</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoType &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">MinLength(3)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> CategoryInfoName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">Range(0,1)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoEnable &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoOrder &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> StartFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> EndFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure><p></p><p>判断实体参数是否符合要求，可以检查ModelState.IsValid属性<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Post</span>(<span class=\"params\">[FromBody] CategoryInfo category</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ModelState.IsValid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BadRequest(ModelState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用Display可以自定义属性的显式名称，在其它错误信息里可以使用{0}来引用该名称<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CategoryInfo</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoType &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Display(Name =<span class=\"meta-string\">\"分类名\"</span>), Required, MaxLength(10, ErrorMessage=<span class=\"meta-string\">\"&#123;0&#125;的长度不可超过&#123;1&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> CategoryInfoName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Range(0,1)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoEnable &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoOrder &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> StartFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> EndFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>通过继承VaildationAttribute来创建自定义验证属性标签<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel.DataAnnotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">IRS.API.CustomValidations</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">NameHasHyphenAttribute</span>:<span class=\"title\">ValidationAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> ValidationResult <span class=\"title\">IsValid</span>(<span class=\"params\"><span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> str = <span class=\"keyword\">value</span>.ToString();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str.IndexOf(<span class=\"string\">' '</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ValidationResult(<span class=\"string\">\"名称必须包含-\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ValidationResult.Success;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>将标签放到CategoryInfoName属性上即可.</p><p>未完待续….</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>前段时间,毕业设计用的是前后端分离的设计,后端就是基于Asp.Net Core开发的 REST API,借这个机会,顺路梳理一下关于REST API与Asp.Net Core建立REST API的基础知识<br>","more":"</p><h4 id=\"REST-的定义\"><a href=\"#REST-的定义\" class=\"headerlink\" title=\"REST 的定义\"></a>REST 的定义</h4><p>REST 是 Representational State Transfer 的缩写. 它是一种架构的风格, 这种风格基于一套预定义的规则, 这些规则描述了网络资源是如何定义和寻址的.<br>一个实现了REST这些规则的服务就叫做RESTful的服务.</p><h4 id=\"REST-的原则\"><a href=\"#REST-的原则\" class=\"headerlink\" title=\"REST 的原则\"></a>REST 的原则</h4><p>RESTful API 最关心的有这几方面: 性能, 可扩展性, 简洁性, 互操作性, 通讯可见性, 组件便携性和可靠性.<br>这些方面被封装在REST的6个原则里, 它们是:</p><ol><li>客户端-服务端约束: 客户端和服务端是分离的, 它们可以独自的进化.</li><li>无状态: 客户端和服务段的通信必须是无状态的, 状态应包含在请求里的. 也就是说请求里要包含服务端需要的所有的信息, 以便服务端可以理解请求并可以创造上下文.</li><li>分层系统: 就像其它的软件架构一样, REST也需要分层结构, 但是不允许某层直接访问不相邻的层.</li><li>统一接口: 这里分为4点, 他们是: 资源标识符(URI), 资源的操作(也就是方法Method, HTTP动词), 自描述的响应(可以认为是媒体类型Media-Type), 以及状态管理(超媒体作为应用状态的引擎 HATEOAS, Hypermedia as the Engine of Application State).</li><li>缓存: 缓存约束派生于无状态约束, 它要求从服务端返回的响应必须明确表明是可缓存的还是不可缓存的.</li><li>按需编码: 这允许客户端可以从服务端访问特定的资源而无须知晓如何处理它们. 服务端可以扩展或自定义客户端的功能.<h4 id=\"Asp-Net-Core-Action\"><a href=\"#Asp-Net-Core-Action\" class=\"headerlink\" title=\"Asp.Net Core Action\"></a>Asp.Net Core Action</h4>在Controller里面，可以使用public修饰符来定义Action，通常会带有参数，可以返回任何类型，但是大多数情况下应该返回IActionResult。Action的方法名要么是以HTTP的动词开头，要么是使用HTTP动词属性标签，包括：[HttpGet], [HttpPut], [HttpPost], [HttpDelete], [HttpHead], [HttpOptions], [HttpPatch].</li></ol><p>Controller基类提供了很多帮助方法，例如：Ok, NotFound, BadRequest等，它们分别对应HTTP的状态码 200, 404, 400；此外还有Redirect，LocalRedirect，RedirectToRoute，Json，File，Content等方法。</p><p>路由属性标签可以标注在Controller或者Action方法上</p><h5 id=\"实体绑定\"><a href=\"#实体绑定\" class=\"headerlink\" title=\"实体绑定\"></a>实体绑定</h5><p>如果定义在路由里,Action可以自动映射,没有定义在路由里的,可以通过使用属性标签告诉Action从哪里获取参数,属性标签包含[FromBody],[FromForm],[FromHeader],[FromRoute],[FromServices]等<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> IRS.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">IRS.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/address\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AddressController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> ICategoryInfoService _categoryInfoService;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AddressController</span>(<span class=\"params\">ICategoryInfoService categoryInfoService</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _categoryInfoService = categoryInfoService;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">GetAddressInfos</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> addresslist = _categoryInfoService.LoadEntities(c =&gt; c.CategoryInfoType == <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data = addresslist</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">GetAddressInfo</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> address = _categoryInfoService.LoadEntities(c =&gt; c.CategoryInfoId == id &amp;&amp; c.CategoryInfoType == <span class=\"number\">1</span>).FirstOrDefault();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data =address</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">AddAddressInfo</span>(<span class=\"params\">[FromBody] CategoryInfo categoryInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = _categoryInfoService.AddEntity(categoryInfo);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                status_code = <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"实体验证\"><a href=\"#实体验证\" class=\"headerlink\" title=\"实体验证\"></a>实体验证</h5><p>Asp.Net Core内置的实体验证是通过验证属性标签来实现的<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CategoryInfo</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoType &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">MinLength(3)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> CategoryInfoName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       [<span class=\"meta\">Range(0,1)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoEnable &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoOrder &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> StartFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> EndFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure><p></p><p>判断实体参数是否符合要求，可以检查ModelState.IsValid属性<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Post</span>(<span class=\"params\">[FromBody] CategoryInfo category</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ModelState.IsValid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BadRequest(ModelState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用Display可以自定义属性的显式名称，在其它错误信息里可以使用{0}来引用该名称<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CategoryInfo</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoType &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Display(Name =<span class=\"meta-string\">\"分类名\"</span>), Required, MaxLength(10, ErrorMessage=<span class=\"meta-string\">\"&#123;0&#125;的长度不可超过&#123;1&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> CategoryInfoName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        [<span class=\"meta\">Range(0,1)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoEnable &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CategoryInfoOrder &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> StartFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> EndFlag &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>通过继承VaildationAttribute来创建自定义验证属性标签<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel.DataAnnotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">IRS.API.CustomValidations</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">NameHasHyphenAttribute</span>:<span class=\"title\">ValidationAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> ValidationResult <span class=\"title\">IsValid</span>(<span class=\"params\"><span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> str = <span class=\"keyword\">value</span>.ToString();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str.IndexOf(<span class=\"string\">' '</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ValidationResult(<span class=\"string\">\"名称必须包含-\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ValidationResult.Success;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>将标签放到CategoryInfoName属性上即可.</p><p>未完待续….</p><!-- rebuild by neat -->"},{"title":"Asp.Net Core SignalR","date":"2019-07-29T13:55:26.000Z","_content":"SignalR 是一套能让Asp.Net Core 轻松实现与Client即时互动的套件.\n<!--more-->\n\n#### 引用\n\n在nuget中安装 Microsoft.AspNetCore.SignalR.Core\n\n#### 注册SignalR服务\n\n在Startup.CofigureServices 加入SignalR的服务,同时在Startup.Configure将SignalR加到管道中.\n\n*Startup.cs*\n\n```cs\nusing Microsoft.AspNetCore.SignalR;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace SignalRChat.Hubs\n{\n    public class ChatHub:Hub\n    {\n        private string Now => DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n        public override async Task OnConnectedAsync()\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", \"系统\",$\"[{Now}]{Context.ConnectionId} 加入\");\n        }\n        public override async Task OnDisconnectedAsync(Exception exception)\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", \"系统\", $\"[{Now}]{Context.ConnectionId} 离开\");\n        }\n\n        public async Task SendMessage(string user,string message)\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n        }\n    }\n}\n```\n\n#### SignalR Client\n\n##### 添加 SignalR 客户端库\n\n* 在“解决方案资源管理器”中，右键单击项目，然后选择“添加” > “客户端库”\n\n* 在“添加客户端库”对话框中，对于“提供程序”，选择“unpkg”\n\n* 对于“库”，输入 `@aspnet/signalr@1`，然后选择不是预览版的最新版本\n\n* 选择“选择特定文件”，展开“dist/browser”文件夹，然后选择“signalr.js”和“signalr.min.js”\n\n* 将“目标位置”设置为 wwwroot/lib/signalr/，然后选择“安装”\n\n*chat.js*\n\n```cs\n\"use strict\";\n\nvar connection = new signalR.HubConnectionBuilder().withUrl(\"/chatHub\").build();\n\n//Disable send button until connection is established\ndocument.getElementById(\"sendButton\").disabled = true;\n\nconnection.on(\"ReceiveMessage\", function (user, message) {\n    var msg = message.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    var encodedMsg = user + \" says \" + msg;\n    var li = document.createElement(\"li\");\n    li.textContent = encodedMsg;\n    document.getElementById(\"messagesList\").appendChild(li);\n});\n\nconnection.start().then(function(){\n    document.getElementById(\"sendButton\").disabled = false;\n}).catch(function (err) {\n    return console.error(err.toString());\n});\n\ndocument.getElementById(\"sendButton\").addEventListener(\"click\", function (event) {\n    var user = document.getElementById(\"userInput\").value;\n    var message = document.getElementById(\"messageInput\").value;\n    connection.invoke(\"SendMessage\", user, message).catch(function (err) {\n        return console.error(err.toString());\n    });\n    event.preventDefault();\n});\n```\n\n*Index.cshtml*\n\n```cs\n@page\n<div class=\"container\">\n    <div class=\"row\">&nbsp;</div>\n    <div class=\"row\">\n        <div class=\"col-6\">&nbsp;</div>\n        <div class=\"col-6\">\n            用户...<input type=\"text\" id=\"userInput\" />\n            <br />\n            消息...<input type=\"text\" id=\"messageInput\" />\n            <input type=\"button\" id=\"sendButton\" value=\"发送信息\" />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <hr />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-6\">&nbsp;</div>\n        <div class=\"col-6\">\n            <ul id=\"messagesList\"></ul>\n        </div>\n    </div>\n</div>\n\n<script src=\"~/lib/signalr/dist/browser/signalr.js\"></script>\n<script src=\"~/js/chat.js\"></script>\n```\n","source":"_posts/Asp-Net-Core-SignalR.md","raw":"---\ntitle: Asp.Net Core SignalR\ndate: 2019-07-29 21:55:26\ncategories: .Net Core\ntags:\n - .Net Core\n - SignalR\n---\nSignalR 是一套能让Asp.Net Core 轻松实现与Client即时互动的套件.\n<!--more-->\n\n#### 引用\n\n在nuget中安装 Microsoft.AspNetCore.SignalR.Core\n\n#### 注册SignalR服务\n\n在Startup.CofigureServices 加入SignalR的服务,同时在Startup.Configure将SignalR加到管道中.\n\n*Startup.cs*\n\n```cs\nusing Microsoft.AspNetCore.SignalR;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace SignalRChat.Hubs\n{\n    public class ChatHub:Hub\n    {\n        private string Now => DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n        public override async Task OnConnectedAsync()\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", \"系统\",$\"[{Now}]{Context.ConnectionId} 加入\");\n        }\n        public override async Task OnDisconnectedAsync(Exception exception)\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", \"系统\", $\"[{Now}]{Context.ConnectionId} 离开\");\n        }\n\n        public async Task SendMessage(string user,string message)\n        {\n            await Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n        }\n    }\n}\n```\n\n#### SignalR Client\n\n##### 添加 SignalR 客户端库\n\n* 在“解决方案资源管理器”中，右键单击项目，然后选择“添加” > “客户端库”\n\n* 在“添加客户端库”对话框中，对于“提供程序”，选择“unpkg”\n\n* 对于“库”，输入 `@aspnet/signalr@1`，然后选择不是预览版的最新版本\n\n* 选择“选择特定文件”，展开“dist/browser”文件夹，然后选择“signalr.js”和“signalr.min.js”\n\n* 将“目标位置”设置为 wwwroot/lib/signalr/，然后选择“安装”\n\n*chat.js*\n\n```cs\n\"use strict\";\n\nvar connection = new signalR.HubConnectionBuilder().withUrl(\"/chatHub\").build();\n\n//Disable send button until connection is established\ndocument.getElementById(\"sendButton\").disabled = true;\n\nconnection.on(\"ReceiveMessage\", function (user, message) {\n    var msg = message.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    var encodedMsg = user + \" says \" + msg;\n    var li = document.createElement(\"li\");\n    li.textContent = encodedMsg;\n    document.getElementById(\"messagesList\").appendChild(li);\n});\n\nconnection.start().then(function(){\n    document.getElementById(\"sendButton\").disabled = false;\n}).catch(function (err) {\n    return console.error(err.toString());\n});\n\ndocument.getElementById(\"sendButton\").addEventListener(\"click\", function (event) {\n    var user = document.getElementById(\"userInput\").value;\n    var message = document.getElementById(\"messageInput\").value;\n    connection.invoke(\"SendMessage\", user, message).catch(function (err) {\n        return console.error(err.toString());\n    });\n    event.preventDefault();\n});\n```\n\n*Index.cshtml*\n\n```cs\n@page\n<div class=\"container\">\n    <div class=\"row\">&nbsp;</div>\n    <div class=\"row\">\n        <div class=\"col-6\">&nbsp;</div>\n        <div class=\"col-6\">\n            用户...<input type=\"text\" id=\"userInput\" />\n            <br />\n            消息...<input type=\"text\" id=\"messageInput\" />\n            <input type=\"button\" id=\"sendButton\" value=\"发送信息\" />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <hr />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-6\">&nbsp;</div>\n        <div class=\"col-6\">\n            <ul id=\"messagesList\"></ul>\n        </div>\n    </div>\n</div>\n\n<script src=\"~/lib/signalr/dist/browser/signalr.js\"></script>\n<script src=\"~/js/chat.js\"></script>\n```\n","slug":"Asp-Net-Core-SignalR","published":1,"updated":"2019-07-29T13:58:56.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1y00002tkuimai9w67u","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>SignalR 是一套能让Asp.Net Core 轻松实现与Client即时互动的套件.<br><a id=\"more\"></a></p><h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p>在nuget中安装 Microsoft.AspNetCore.SignalR.Core</p><h4 id=\"注册SignalR服务\"><a href=\"#注册SignalR服务\" class=\"headerlink\" title=\"注册SignalR服务\"></a>注册SignalR服务</h4><p>在Startup.CofigureServices 加入SignalR的服务,同时在Startup.Configure将SignalR加到管道中.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.SignalR;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SignalRChat.Hubs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChatHub</span>:<span class=\"title\">Hub</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> Now =&gt; DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnConnectedAsync</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">\"ReceiveMessage\"</span>, <span class=\"string\">\"系统\"</span>,<span class=\"string\">$\"[<span class=\"subst\">&#123;Now&#125;</span>]<span class=\"subst\">&#123;Context.ConnectionId&#125;</span> 加入\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnDisconnectedAsync</span>(<span class=\"params\">Exception exception</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">\"ReceiveMessage\"</span>, <span class=\"string\">\"系统\"</span>, <span class=\"string\">$\"[<span class=\"subst\">&#123;Now&#125;</span>]<span class=\"subst\">&#123;Context.ConnectionId&#125;</span> 离开\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">SendMessage</span>(<span class=\"params\"><span class=\"keyword\">string</span> user,<span class=\"keyword\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">\"ReceiveMessage\"</span>, user, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"SignalR-Client\"><a href=\"#SignalR-Client\" class=\"headerlink\" title=\"SignalR Client\"></a>SignalR Client</h4><h5 id=\"添加-SignalR-客户端库\"><a href=\"#添加-SignalR-客户端库\" class=\"headerlink\" title=\"添加 SignalR 客户端库\"></a>添加 SignalR 客户端库</h5><ul><li><p>在“解决方案资源管理器”中，右键单击项目，然后选择“添加” &gt; “客户端库”</p></li><li><p>在“添加客户端库”对话框中，对于“提供程序”，选择“unpkg”</p></li><li><p>对于“库”，输入 <code>@aspnet/signalr@1</code>，然后选择不是预览版的最新版本</p></li><li><p>选择“选择特定文件”，展开“dist/browser”文件夹，然后选择“signalr.js”和“signalr.min.js”</p></li><li><p>将“目标位置”设置为 wwwroot/lib/signalr/，然后选择“安装”</p></li></ul><p><em>chat.js</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> connection = <span class=\"keyword\">new</span> signalR.HubConnectionBuilder().withUrl(<span class=\"string\">\"/chatHub\"</span>).build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Disable send button until connection is established</span></span><br><span class=\"line\">document.getElementById(<span class=\"string\">\"sendButton\"</span>).disabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">connection.<span class=\"keyword\">on</span>(<span class=\"string\">\"ReceiveMessage\"</span>, function (user, message) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg = message.replace(/&amp;/g, <span class=\"string\">\"&amp;amp;\"</span>).replace(/&lt;/g, <span class=\"string\">\"&amp;lt;\"</span>).replace(/&gt;/g, <span class=\"string\">\"&amp;gt;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> encodedMsg = user + <span class=\"string\">\" says \"</span> + msg;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> li = document.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">    li.textContent = encodedMsg;</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">\"messagesList\"</span>).appendChild(li);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">connection.start().then(function()&#123;</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">\"sendButton\"</span>).disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;).<span class=\"keyword\">catch</span>(function (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> console.error(err.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(<span class=\"string\">\"sendButton\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, function (<span class=\"keyword\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = document.getElementById(<span class=\"string\">\"userInput\"</span>).<span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = document.getElementById(<span class=\"string\">\"messageInput\"</span>).<span class=\"keyword\">value</span>;</span><br><span class=\"line\">    connection.invoke(<span class=\"string\">\"SendMessage\"</span>, user, message).<span class=\"keyword\">catch</span>(function (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> console.error(err.toString());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">event</span>.preventDefault();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p><em>Index.cshtml</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@page</span><br><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"row\"</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"col-6\"</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"col-6\"</span>&gt;</span><br><span class=\"line\">            用户...&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"userInput\"</span> /&gt;</span><br><span class=\"line\">            &lt;br /&gt;</span><br><span class=\"line\">            消息...&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"messageInput\"</span> /&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">\"button\"</span> id=<span class=\"string\">\"sendButton\"</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"发送信息\"</span> /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"col-12\"</span>&gt;</span><br><span class=\"line\">            &lt;hr /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"col-6\"</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"col-6\"</span>&gt;</span><br><span class=\"line\">            &lt;ul id=<span class=\"string\">\"messagesList\"</span>&gt;&lt;/ul&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"~/lib/signalr/dist/browser/signalr.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"~/js/chat.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>SignalR 是一套能让Asp.Net Core 轻松实现与Client即时互动的套件.<br>","more":"</p><h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p>在nuget中安装 Microsoft.AspNetCore.SignalR.Core</p><h4 id=\"注册SignalR服务\"><a href=\"#注册SignalR服务\" class=\"headerlink\" title=\"注册SignalR服务\"></a>注册SignalR服务</h4><p>在Startup.CofigureServices 加入SignalR的服务,同时在Startup.Configure将SignalR加到管道中.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.SignalR;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SignalRChat.Hubs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChatHub</span>:<span class=\"title\">Hub</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> Now =&gt; DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnConnectedAsync</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">\"ReceiveMessage\"</span>, <span class=\"string\">\"系统\"</span>,<span class=\"string\">$\"[<span class=\"subst\">&#123;Now&#125;</span>]<span class=\"subst\">&#123;Context.ConnectionId&#125;</span> 加入\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnDisconnectedAsync</span>(<span class=\"params\">Exception exception</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">\"ReceiveMessage\"</span>, <span class=\"string\">\"系统\"</span>, <span class=\"string\">$\"[<span class=\"subst\">&#123;Now&#125;</span>]<span class=\"subst\">&#123;Context.ConnectionId&#125;</span> 离开\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">SendMessage</span>(<span class=\"params\"><span class=\"keyword\">string</span> user,<span class=\"keyword\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Clients.All.SendAsync(<span class=\"string\">\"ReceiveMessage\"</span>, user, message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"SignalR-Client\"><a href=\"#SignalR-Client\" class=\"headerlink\" title=\"SignalR Client\"></a>SignalR Client</h4><h5 id=\"添加-SignalR-客户端库\"><a href=\"#添加-SignalR-客户端库\" class=\"headerlink\" title=\"添加 SignalR 客户端库\"></a>添加 SignalR 客户端库</h5><ul><li><p>在“解决方案资源管理器”中，右键单击项目，然后选择“添加” &gt; “客户端库”</p></li><li><p>在“添加客户端库”对话框中，对于“提供程序”，选择“unpkg”</p></li><li><p>对于“库”，输入 <code>@aspnet/signalr@1</code>，然后选择不是预览版的最新版本</p></li><li><p>选择“选择特定文件”，展开“dist/browser”文件夹，然后选择“signalr.js”和“signalr.min.js”</p></li><li><p>将“目标位置”设置为 wwwroot/lib/signalr/，然后选择“安装”</p></li></ul><p><em>chat.js</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> connection = <span class=\"keyword\">new</span> signalR.HubConnectionBuilder().withUrl(<span class=\"string\">\"/chatHub\"</span>).build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Disable send button until connection is established</span></span><br><span class=\"line\">document.getElementById(<span class=\"string\">\"sendButton\"</span>).disabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">connection.<span class=\"keyword\">on</span>(<span class=\"string\">\"ReceiveMessage\"</span>, function (user, message) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg = message.replace(/&amp;/g, <span class=\"string\">\"&amp;amp;\"</span>).replace(/&lt;/g, <span class=\"string\">\"&amp;lt;\"</span>).replace(/&gt;/g, <span class=\"string\">\"&amp;gt;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> encodedMsg = user + <span class=\"string\">\" says \"</span> + msg;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> li = document.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">    li.textContent = encodedMsg;</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">\"messagesList\"</span>).appendChild(li);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">connection.start().then(function()&#123;</span><br><span class=\"line\">    document.getElementById(<span class=\"string\">\"sendButton\"</span>).disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;).<span class=\"keyword\">catch</span>(function (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> console.error(err.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(<span class=\"string\">\"sendButton\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, function (<span class=\"keyword\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = document.getElementById(<span class=\"string\">\"userInput\"</span>).<span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = document.getElementById(<span class=\"string\">\"messageInput\"</span>).<span class=\"keyword\">value</span>;</span><br><span class=\"line\">    connection.invoke(<span class=\"string\">\"SendMessage\"</span>, user, message).<span class=\"keyword\">catch</span>(function (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> console.error(err.toString());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">event</span>.preventDefault();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p><em>Index.cshtml</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@page</span><br><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"row\"</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"col-6\"</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"col-6\"</span>&gt;</span><br><span class=\"line\">            用户...&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"userInput\"</span> /&gt;</span><br><span class=\"line\">            &lt;br /&gt;</span><br><span class=\"line\">            消息...&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"messageInput\"</span> /&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">\"button\"</span> id=<span class=\"string\">\"sendButton\"</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"发送信息\"</span> /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"col-12\"</span>&gt;</span><br><span class=\"line\">            &lt;hr /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"col-6\"</span>&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"col-6\"</span>&gt;</span><br><span class=\"line\">            &lt;ul id=<span class=\"string\">\"messagesList\"</span>&gt;&lt;/ul&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"~/lib/signalr/dist/browser/signalr.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"~/js/chat.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"Asp.Net Core Response快取","date":"2019-08-10T07:00:47.000Z","_content":"#### .Net Core Response简介\n\n对Response回传的结果使用适当的快取机制,可以有助于性能提升,避免重复调用.\n\nAsp.Net Core Response 快取分两种\n\n* Client 端缓存\n\n* Server 端快取\n\nAsp.Net Core 可以通过ResponseCache设定Response的暂存方式,并设置到要使用Response快取的Controller或Action\n<!--more-->\n\n#### Client 端缓存\n\n通过HttpHeader的Cache-Control告知浏览器,将页面保存至浏览器缓存区.Client端缓存只要设置ResponseCache即可.\n\n##### Client 端缓存设置\n\n*HomeController.cs*\n\n```cs\npublic class HomeController : Controller\n{\n    [ResponseCache(Duration = 60, Location = ResponseCacheLocation.Client)]\n    public IActionResult Index()\n    {\n        return View();\n    }\n}\n```\n\n##### Client 端缓存参数\n\n* Duration\n\n  设置快取有效时间(单位是秒)\n\n* Location\n\n  设置快取方式,有三种选项\n\n  * ResponseCacheLocation.Any\n\n    可共用的缓存\n\n  * ResponseCacheLocation.Client\n\n    不可共用的缓存,根据使用者区分\n\n  * ResponseCacheLocation.None\n\n    不使用缓存功能\n\n* NoStore\n\n  不保存Response结果\n\n* VaryByHeader\n\n  设置区分缓存的HttpHeader\n\n* VaryByQueryKeys\n\n  设置区分缓存的Url Query String\n\n* CacheProfileName\n\n  可以在MVC Service设置好CacheProfile,然后在多个地方使用\n\n  *Startup.cs*\n\n  ```cs\n  public void ConfigureServices(IServiceCoolection services)\n  {\n      services.AddMvc(options =>\n      {\n          options.CacheProfiles.Add(\"Default\",\n          new CacheProfile()\n          {\n              Duration = 60,\n              Location = ResponseCacheLocation.Client\n          });\n      });\n  }\n  ```\n\n  在Controller和Action,直接通过\\[ResponseCache(CacheProfileName = \"Default\")\\]来设置.\n\n#### Server 端快取\n\nServer 端Response快取适用于常被请求的页面或Api,且数据是可共用的数据,即所有请求返回的数据都是相同的.当在请求相同页面时,会把上次的处理结果从Server的快取中回传给Client,省去后续的操作.\n\n* 第一次请求Action时,会经过根据后续步骤,获得返回值.\n\n* 第二次请求Action时,由于上次回传结果已经存在Server快取,直接从快取回传上次的结果,省去后续步骤.\n\nServer快取需要用到 Microsoft.AspNetCore.ResponseCaching 套件.\n\n如果要搭配Server 端Response快取,除了使用\\[ResponseCache\\]外,还需要在DI容器中注入ResponseCaching 服务以及注册ResponseCaching的中间件.\n\n##### Service 端快取设置\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCaching(options => \n        {\n            options.UseCaseSensitivePaths = false;\n            options.MaximumBodySize = 1024;\n            options.SizeLimit = 100 * 1024 * 1024;\n        });\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseResponseCaching();\n        app.UseMvcWithDefaultRoute();\n    }\n}\n```\n\n##### Service 端快取参数\n\n* UseCaseSensitivePaths\n\n  Url是否区分大小写为不同的Response快取,默认为true\n\n* MaximumBodySize\n\n  单个Response快取的大小限制(单位Bytes),默认64MB\n\n* SizeLimit\n\n  Response快取的总大小限制(单位Bytes),默认为100MB\n\n##### Service 端快取条件\n\n* 回传状态必须是Http Status 200(OK)\n\n* Request 的Http Methods 必须是Get或Head\n\n* 不能有其他的中间件在ResponseCaching中间件加工之前修改Response\n\n* Http Header 不能用 Authorization\n\n* Http Header 的CacheContro必须是public的\n\n* Http Header 不能用Set-Cookie\n\n* Http Header的Vary值不能为\\*\n\n* 不能使用IHttpSendFileFeature\n\n* 不能设置 no-store\n\n* 单一回传快取不能大于 MaximunBodySize\n\n* 总快取大小不能大于SizeLimit\n","source":"_posts/Asp-Net-Core-Response快取.md","raw":"---\ntitle: Asp.Net Core Response快取\ndate: 2019-08-10 15:00:47\ncategories: .Net Core\ntags:\n - .Net Core\n - Response\n---\n#### .Net Core Response简介\n\n对Response回传的结果使用适当的快取机制,可以有助于性能提升,避免重复调用.\n\nAsp.Net Core Response 快取分两种\n\n* Client 端缓存\n\n* Server 端快取\n\nAsp.Net Core 可以通过ResponseCache设定Response的暂存方式,并设置到要使用Response快取的Controller或Action\n<!--more-->\n\n#### Client 端缓存\n\n通过HttpHeader的Cache-Control告知浏览器,将页面保存至浏览器缓存区.Client端缓存只要设置ResponseCache即可.\n\n##### Client 端缓存设置\n\n*HomeController.cs*\n\n```cs\npublic class HomeController : Controller\n{\n    [ResponseCache(Duration = 60, Location = ResponseCacheLocation.Client)]\n    public IActionResult Index()\n    {\n        return View();\n    }\n}\n```\n\n##### Client 端缓存参数\n\n* Duration\n\n  设置快取有效时间(单位是秒)\n\n* Location\n\n  设置快取方式,有三种选项\n\n  * ResponseCacheLocation.Any\n\n    可共用的缓存\n\n  * ResponseCacheLocation.Client\n\n    不可共用的缓存,根据使用者区分\n\n  * ResponseCacheLocation.None\n\n    不使用缓存功能\n\n* NoStore\n\n  不保存Response结果\n\n* VaryByHeader\n\n  设置区分缓存的HttpHeader\n\n* VaryByQueryKeys\n\n  设置区分缓存的Url Query String\n\n* CacheProfileName\n\n  可以在MVC Service设置好CacheProfile,然后在多个地方使用\n\n  *Startup.cs*\n\n  ```cs\n  public void ConfigureServices(IServiceCoolection services)\n  {\n      services.AddMvc(options =>\n      {\n          options.CacheProfiles.Add(\"Default\",\n          new CacheProfile()\n          {\n              Duration = 60,\n              Location = ResponseCacheLocation.Client\n          });\n      });\n  }\n  ```\n\n  在Controller和Action,直接通过\\[ResponseCache(CacheProfileName = \"Default\")\\]来设置.\n\n#### Server 端快取\n\nServer 端Response快取适用于常被请求的页面或Api,且数据是可共用的数据,即所有请求返回的数据都是相同的.当在请求相同页面时,会把上次的处理结果从Server的快取中回传给Client,省去后续的操作.\n\n* 第一次请求Action时,会经过根据后续步骤,获得返回值.\n\n* 第二次请求Action时,由于上次回传结果已经存在Server快取,直接从快取回传上次的结果,省去后续步骤.\n\nServer快取需要用到 Microsoft.AspNetCore.ResponseCaching 套件.\n\n如果要搭配Server 端Response快取,除了使用\\[ResponseCache\\]外,还需要在DI容器中注入ResponseCaching 服务以及注册ResponseCaching的中间件.\n\n##### Service 端快取设置\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCaching(options => \n        {\n            options.UseCaseSensitivePaths = false;\n            options.MaximumBodySize = 1024;\n            options.SizeLimit = 100 * 1024 * 1024;\n        });\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseResponseCaching();\n        app.UseMvcWithDefaultRoute();\n    }\n}\n```\n\n##### Service 端快取参数\n\n* UseCaseSensitivePaths\n\n  Url是否区分大小写为不同的Response快取,默认为true\n\n* MaximumBodySize\n\n  单个Response快取的大小限制(单位Bytes),默认64MB\n\n* SizeLimit\n\n  Response快取的总大小限制(单位Bytes),默认为100MB\n\n##### Service 端快取条件\n\n* 回传状态必须是Http Status 200(OK)\n\n* Request 的Http Methods 必须是Get或Head\n\n* 不能有其他的中间件在ResponseCaching中间件加工之前修改Response\n\n* Http Header 不能用 Authorization\n\n* Http Header 的CacheContro必须是public的\n\n* Http Header 不能用Set-Cookie\n\n* Http Header的Vary值不能为\\*\n\n* 不能使用IHttpSendFileFeature\n\n* 不能设置 no-store\n\n* 单一回传快取不能大于 MaximunBodySize\n\n* 总快取大小不能大于SizeLimit\n","slug":"Asp-Net-Core-Response快取","published":1,"updated":"2019-08-10T07:03:38.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1y20003tkui786lhrn7","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"Net-Core-Response简介\"><a href=\"#Net-Core-Response简介\" class=\"headerlink\" title=\".Net Core Response简介\"></a>.Net Core Response简介</h4><p>对Response回传的结果使用适当的快取机制,可以有助于性能提升,避免重复调用.</p><p>Asp.Net Core Response 快取分两种</p><ul><li><p>Client 端缓存</p></li><li><p>Server 端快取</p></li></ul><p>Asp.Net Core 可以通过ResponseCache设定Response的暂存方式,并设置到要使用Response快取的Controller或Action<br><a id=\"more\"></a></p><h4 id=\"Client-端缓存\"><a href=\"#Client-端缓存\" class=\"headerlink\" title=\"Client 端缓存\"></a>Client 端缓存</h4><p>通过HttpHeader的Cache-Control告知浏览器,将页面保存至浏览器缓存区.Client端缓存只要设置ResponseCache即可.</p><h5 id=\"Client-端缓存设置\"><a href=\"#Client-端缓存设置\" class=\"headerlink\" title=\"Client 端缓存设置\"></a>Client 端缓存设置</h5><p><em>HomeController.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">ResponseCache(Duration = 60, Location = ResponseCacheLocation.Client)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Client-端缓存参数\"><a href=\"#Client-端缓存参数\" class=\"headerlink\" title=\"Client 端缓存参数\"></a>Client 端缓存参数</h5><ul><li><p>Duration</p><p>设置快取有效时间(单位是秒)</p></li><li><p>Location</p><p>设置快取方式,有三种选项</p><ul><li><p>ResponseCacheLocation.Any</p><p>可共用的缓存</p></li><li><p>ResponseCacheLocation.Client</p><p>不可共用的缓存,根据使用者区分</p></li><li><p>ResponseCacheLocation.None</p><p>不使用缓存功能</p></li></ul></li><li><p>NoStore</p><p>不保存Response结果</p></li><li><p>VaryByHeader</p><p>设置区分缓存的HttpHeader</p></li><li><p>VaryByQueryKeys</p><p>设置区分缓存的Url Query String</p></li><li><p>CacheProfileName</p><p>可以在MVC Service设置好CacheProfile,然后在多个地方使用</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCoolection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.CacheProfiles.Add(<span class=\"string\">\"Default\"</span>,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CacheProfile()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Duration = <span class=\"number\">60</span>,</span><br><span class=\"line\">            Location = ResponseCacheLocation.Client</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在Controller和Action,直接通过[ResponseCache(CacheProfileName = “Default”)]来设置.</p></li></ul><h4 id=\"Server-端快取\"><a href=\"#Server-端快取\" class=\"headerlink\" title=\"Server 端快取\"></a>Server 端快取</h4><p>Server 端Response快取适用于常被请求的页面或Api,且数据是可共用的数据,即所有请求返回的数据都是相同的.当在请求相同页面时,会把上次的处理结果从Server的快取中回传给Client,省去后续的操作.</p><ul><li><p>第一次请求Action时,会经过根据后续步骤,获得返回值.</p></li><li><p>第二次请求Action时,由于上次回传结果已经存在Server快取,直接从快取回传上次的结果,省去后续步骤.</p></li></ul><p>Server快取需要用到 Microsoft.AspNetCore.ResponseCaching 套件.</p><p>如果要搭配Server 端Response快取,除了使用[ResponseCache]外,还需要在DI容器中注入ResponseCaching 服务以及注册ResponseCaching的中间件.</p><h5 id=\"Service-端快取设置\"><a href=\"#Service-端快取设置\" class=\"headerlink\" title=\"Service 端快取设置\"></a>Service 端快取设置</h5><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddResponseCaching(options =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.UseCaseSensitivePaths = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            options.MaximumBodySize = <span class=\"number\">1024</span>;</span><br><span class=\"line\">            options.SizeLimit = <span class=\"number\">100</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseResponseCaching();</span><br><span class=\"line\">        app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Service-端快取参数\"><a href=\"#Service-端快取参数\" class=\"headerlink\" title=\"Service 端快取参数\"></a>Service 端快取参数</h5><ul><li><p>UseCaseSensitivePaths</p><p>Url是否区分大小写为不同的Response快取,默认为true</p></li><li><p>MaximumBodySize</p><p>单个Response快取的大小限制(单位Bytes),默认64MB</p></li><li><p>SizeLimit</p><p>Response快取的总大小限制(单位Bytes),默认为100MB</p></li></ul><h5 id=\"Service-端快取条件\"><a href=\"#Service-端快取条件\" class=\"headerlink\" title=\"Service 端快取条件\"></a>Service 端快取条件</h5><ul><li><p>回传状态必须是Http Status 200(OK)</p></li><li><p>Request 的Http Methods 必须是Get或Head</p></li><li><p>不能有其他的中间件在ResponseCaching中间件加工之前修改Response</p></li><li><p>Http Header 不能用 Authorization</p></li><li><p>Http Header 的CacheContro必须是public的</p></li><li><p>Http Header 不能用Set-Cookie</p></li><li><p>Http Header的Vary值不能为*</p></li><li><p>不能使用IHttpSendFileFeature</p></li><li><p>不能设置 no-store</p></li><li><p>单一回传快取不能大于 MaximunBodySize</p></li><li><p>总快取大小不能大于SizeLimit</p></li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"Net-Core-Response简介\"><a href=\"#Net-Core-Response简介\" class=\"headerlink\" title=\".Net Core Response简介\"></a>.Net Core Response简介</h4><p>对Response回传的结果使用适当的快取机制,可以有助于性能提升,避免重复调用.</p><p>Asp.Net Core Response 快取分两种</p><ul><li><p>Client 端缓存</p></li><li><p>Server 端快取</p></li></ul><p>Asp.Net Core 可以通过ResponseCache设定Response的暂存方式,并设置到要使用Response快取的Controller或Action<br>","more":"</p><h4 id=\"Client-端缓存\"><a href=\"#Client-端缓存\" class=\"headerlink\" title=\"Client 端缓存\"></a>Client 端缓存</h4><p>通过HttpHeader的Cache-Control告知浏览器,将页面保存至浏览器缓存区.Client端缓存只要设置ResponseCache即可.</p><h5 id=\"Client-端缓存设置\"><a href=\"#Client-端缓存设置\" class=\"headerlink\" title=\"Client 端缓存设置\"></a>Client 端缓存设置</h5><p><em>HomeController.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">ResponseCache(Duration = 60, Location = ResponseCacheLocation.Client)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Client-端缓存参数\"><a href=\"#Client-端缓存参数\" class=\"headerlink\" title=\"Client 端缓存参数\"></a>Client 端缓存参数</h5><ul><li><p>Duration</p><p>设置快取有效时间(单位是秒)</p></li><li><p>Location</p><p>设置快取方式,有三种选项</p><ul><li><p>ResponseCacheLocation.Any</p><p>可共用的缓存</p></li><li><p>ResponseCacheLocation.Client</p><p>不可共用的缓存,根据使用者区分</p></li><li><p>ResponseCacheLocation.None</p><p>不使用缓存功能</p></li></ul></li><li><p>NoStore</p><p>不保存Response结果</p></li><li><p>VaryByHeader</p><p>设置区分缓存的HttpHeader</p></li><li><p>VaryByQueryKeys</p><p>设置区分缓存的Url Query String</p></li><li><p>CacheProfileName</p><p>可以在MVC Service设置好CacheProfile,然后在多个地方使用</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCoolection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.CacheProfiles.Add(<span class=\"string\">\"Default\"</span>,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CacheProfile()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Duration = <span class=\"number\">60</span>,</span><br><span class=\"line\">            Location = ResponseCacheLocation.Client</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在Controller和Action,直接通过[ResponseCache(CacheProfileName = “Default”)]来设置.</p></li></ul><h4 id=\"Server-端快取\"><a href=\"#Server-端快取\" class=\"headerlink\" title=\"Server 端快取\"></a>Server 端快取</h4><p>Server 端Response快取适用于常被请求的页面或Api,且数据是可共用的数据,即所有请求返回的数据都是相同的.当在请求相同页面时,会把上次的处理结果从Server的快取中回传给Client,省去后续的操作.</p><ul><li><p>第一次请求Action时,会经过根据后续步骤,获得返回值.</p></li><li><p>第二次请求Action时,由于上次回传结果已经存在Server快取,直接从快取回传上次的结果,省去后续步骤.</p></li></ul><p>Server快取需要用到 Microsoft.AspNetCore.ResponseCaching 套件.</p><p>如果要搭配Server 端Response快取,除了使用[ResponseCache]外,还需要在DI容器中注入ResponseCaching 服务以及注册ResponseCaching的中间件.</p><h5 id=\"Service-端快取设置\"><a href=\"#Service-端快取设置\" class=\"headerlink\" title=\"Service 端快取设置\"></a>Service 端快取设置</h5><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddResponseCaching(options =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.UseCaseSensitivePaths = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            options.MaximumBodySize = <span class=\"number\">1024</span>;</span><br><span class=\"line\">            options.SizeLimit = <span class=\"number\">100</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseResponseCaching();</span><br><span class=\"line\">        app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Service-端快取参数\"><a href=\"#Service-端快取参数\" class=\"headerlink\" title=\"Service 端快取参数\"></a>Service 端快取参数</h5><ul><li><p>UseCaseSensitivePaths</p><p>Url是否区分大小写为不同的Response快取,默认为true</p></li><li><p>MaximumBodySize</p><p>单个Response快取的大小限制(单位Bytes),默认64MB</p></li><li><p>SizeLimit</p><p>Response快取的总大小限制(单位Bytes),默认为100MB</p></li></ul><h5 id=\"Service-端快取条件\"><a href=\"#Service-端快取条件\" class=\"headerlink\" title=\"Service 端快取条件\"></a>Service 端快取条件</h5><ul><li><p>回传状态必须是Http Status 200(OK)</p></li><li><p>Request 的Http Methods 必须是Get或Head</p></li><li><p>不能有其他的中间件在ResponseCaching中间件加工之前修改Response</p></li><li><p>Http Header 不能用 Authorization</p></li><li><p>Http Header 的CacheContro必须是public的</p></li><li><p>Http Header 不能用Set-Cookie</p></li><li><p>Http Header的Vary值不能为*</p></li><li><p>不能使用IHttpSendFileFeature</p></li><li><p>不能设置 no-store</p></li><li><p>单一回传快取不能大于 MaximunBodySize</p></li><li><p>总快取大小不能大于SizeLimit</p></li></ul><!-- rebuild by neat -->"},{"title":"Asp.Net Core Web API的先进架构","date":"2018-06-21T15:58:04.000Z","_content":"##### 架构分层\n端口和适配器模式(又称六角形架构)可以解决业务逻辑与其他依赖项(如数据访问或API框架)耦合过于紧密的问题。使用此模式将允许您的API解决方案具有清晰的边界、具有单一职责的良好命名的对象，最终使其更容易开发和维护。架构分为API层,Domain层和Data层\n<!--more-->\n##### Domain层\n领域层具有以下功能:\n* 定义将在整个解决方案中使用的实体对象。这些模型将表示数据层的数据模型（DataModel）\n* 定义视图模型（ViewModel），将由API层针对HTTP请求和响应作为单个对象或对象集来使用\n* 定义接口，我们的数据层可以通过这些接口实现数据访问逻辑\n* 实现将包含从API层调用的方法的Supervisor。每个方法都代表一个API调用，并将数据从注入的数据层转换为视图模型以返回\n示例如下\n```cs\n// Album.cs\npublic sealed class Album\n{\n    public int AlbumId { get; set; }\n    public string Title { get; set; }\n    public int ArtistId { get; set; }\n        \n    public ICollection<Track> Tracks { get; set; } = new HashSet<Track>();\n    public Artist Artist { get; set; }\n}\n// AlbumViewModel.cs\npublic class AlbumViewModel\n{\n    public int AlbumId { get; set; }\n    public string Title { get; set; }\n    public int ArtistId { get; set; }\n    public string ArtistName { get; set; }\n\n    public ArtistViewModel Artist { get; set; }\n    public IList<TrackViewModel> Tracks { get; set; }\n}\n// IAlbumRepository.cs\npublic interface IAlbumRepository : IDisposable\n{\n    Task<List<Album>> GetAllAsync(CancellationToken ct = default(CancellationToken));\n    Task<Album> GetByIdAsync(int id, CancellationToken ct = default(CancellationToken));\n    Task<List<Album>> GetByArtistIdAsync(int id, CancellationToken ct = default(CancellationToken));\n    Task<Album> AddAsync(Album newAlbum, CancellationToken ct = default(CancellationToken));\n    Task<bool> UpdateAsync(Album album, CancellationToken ct = default(CancellationToken));\n    Task<bool> DeleteAsync(int id, CancellationToken ct = default(CancellationToken));\n}\n// Supervisor.cs\npublic async Task<AlbumViewModel> GetAlbumByIdAsync(int id, CancellationToken ct = default(CancellationToken))\n{\n    var albumViewModel = AlbumCoverter.Convert(await _albumRepository.GetByIdAsync(id, ct));\n    albumViewModel.Artist = await GetArtistByIdAsync(albumViewModel.ArtistId, ct);\n    albumViewModel.Tracks = await GetTrackByAlbumIdAsync(albumViewModel.AlbumId, ct);\n    albumViewModel.ArtistName = albumViewModel.Artist.Name;\n    return albumViewModel;\n}\n\n```\n\n##### Data层\n数据层的关键是使用领域层中开发的接口实现每个实体存储库。以领域层的专辑存储库为例，它就是实现了IAlbumRepository接口。每个存储库都将注入DBContext，允许使用实体框架核心访问SQL数据库\n```cs\npublic class AlbumRepository : IAlbumRepository\n{\n    private readonly ChinookContext _context;\n\n    public AlbumRepository(ChinookContext context)\n    {\n        _context = context;\n    }\n\n    private async Task<bool> AlbumExists(int id, CancellationToken ct = default(CancellationToken))\n    {\nreturn await GetByIdAsync(id, ct) != null;\n    }\n\n    public void Dispose()\n    {\n        _context.Dispose();\n    }\n\n    public async Task<List<Album>> GetAllAsync(CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.ToListAsync(ct);\n    }\n\n    public async Task<Album> GetByIdAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.FindAsync(id);\n    }\n\n    public async Task<Album> AddAsync(Album newAlbum, CancellationToken ct = default(CancellationToken))\n    {\n        _context.Album.Add(newAlbum);\n        await _context.SaveChangesAsync(ct);\n        return newAlbum;\n    }\n\n    public async Task<bool> UpdateAsync(Album album, CancellationToken ct = default(CancellationToken))\n    {\n        if (!await AlbumExists(album.AlbumId, ct))\n            return false;\n        _context.Album.Update(album);\n\n        _context.Update(album);\n        await _context.SaveChangesAsync(ct);\n        return true;\n    }\n\n    public async Task<bool> DeleteAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        if (!await AlbumExists(id, ct))\n \t     return false;\n        var toRemove = _context.Album.Find(id);\n        _context.Album.Remove(toRemove);\n        await _context.SaveChangesAsync(ct);\n        return true;\n    }\n\n    public async Task<List<Album>> GetByArtistIdAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.Where(a => a.ArtistId == id).ToListAsync(ct);\n    }\n}\n```\n\n##### API层\n这一层包含Web API端点逻辑的代码，包括控制器。这个解决方案的API项目将有一个单独的职责，那就是处理web服务器接收到的HTTP请求并返回HTTP响应，无论成功还是失败。在这个项目中，将会有非常少的业务逻辑。我们将处理在领域或数据项目中发生的异常和错误，以有效地与API的使用者进行通信。此通信将使用HTTP响应代码和在HTTP响应报文中返回的任何数据。\n```cs\n[Route(\"api/[controller]\")]\npublic class AlbumController : Controller\n{\n    private readonly ISupervisor _Supervisor;\n\n    public AlbumController(ISupervisor Supervisor)\n    {\n        _Supervisor = Supervisor;\n    }\n\n    [HttpGet]\n    [Produces(typeof(List<AlbumViewModel>))]\n    public async Task<IActionResult> Get(CancellationToken ct = default(CancellationToken))\n    {\n        try\n        {\n            return new ObjectResult(await _Supervisor.GetAllAlbumAsync(ct));\n        }\n        catch (Exception ex)\n        {\n            return StatusCode(500, ex);\n        }\n    } \n\n    ...\n}\n```","source":"_posts/Asp-Net-Core-Web-API的先进架构.md","raw":"---\ntitle: Asp.Net Core Web API的先进架构\ndate: 2018-06-21 23:58:04\ncategories: .Net Core\ntags:\n - .Net Core\n - Web API\n---\n##### 架构分层\n端口和适配器模式(又称六角形架构)可以解决业务逻辑与其他依赖项(如数据访问或API框架)耦合过于紧密的问题。使用此模式将允许您的API解决方案具有清晰的边界、具有单一职责的良好命名的对象，最终使其更容易开发和维护。架构分为API层,Domain层和Data层\n<!--more-->\n##### Domain层\n领域层具有以下功能:\n* 定义将在整个解决方案中使用的实体对象。这些模型将表示数据层的数据模型（DataModel）\n* 定义视图模型（ViewModel），将由API层针对HTTP请求和响应作为单个对象或对象集来使用\n* 定义接口，我们的数据层可以通过这些接口实现数据访问逻辑\n* 实现将包含从API层调用的方法的Supervisor。每个方法都代表一个API调用，并将数据从注入的数据层转换为视图模型以返回\n示例如下\n```cs\n// Album.cs\npublic sealed class Album\n{\n    public int AlbumId { get; set; }\n    public string Title { get; set; }\n    public int ArtistId { get; set; }\n        \n    public ICollection<Track> Tracks { get; set; } = new HashSet<Track>();\n    public Artist Artist { get; set; }\n}\n// AlbumViewModel.cs\npublic class AlbumViewModel\n{\n    public int AlbumId { get; set; }\n    public string Title { get; set; }\n    public int ArtistId { get; set; }\n    public string ArtistName { get; set; }\n\n    public ArtistViewModel Artist { get; set; }\n    public IList<TrackViewModel> Tracks { get; set; }\n}\n// IAlbumRepository.cs\npublic interface IAlbumRepository : IDisposable\n{\n    Task<List<Album>> GetAllAsync(CancellationToken ct = default(CancellationToken));\n    Task<Album> GetByIdAsync(int id, CancellationToken ct = default(CancellationToken));\n    Task<List<Album>> GetByArtistIdAsync(int id, CancellationToken ct = default(CancellationToken));\n    Task<Album> AddAsync(Album newAlbum, CancellationToken ct = default(CancellationToken));\n    Task<bool> UpdateAsync(Album album, CancellationToken ct = default(CancellationToken));\n    Task<bool> DeleteAsync(int id, CancellationToken ct = default(CancellationToken));\n}\n// Supervisor.cs\npublic async Task<AlbumViewModel> GetAlbumByIdAsync(int id, CancellationToken ct = default(CancellationToken))\n{\n    var albumViewModel = AlbumCoverter.Convert(await _albumRepository.GetByIdAsync(id, ct));\n    albumViewModel.Artist = await GetArtistByIdAsync(albumViewModel.ArtistId, ct);\n    albumViewModel.Tracks = await GetTrackByAlbumIdAsync(albumViewModel.AlbumId, ct);\n    albumViewModel.ArtistName = albumViewModel.Artist.Name;\n    return albumViewModel;\n}\n\n```\n\n##### Data层\n数据层的关键是使用领域层中开发的接口实现每个实体存储库。以领域层的专辑存储库为例，它就是实现了IAlbumRepository接口。每个存储库都将注入DBContext，允许使用实体框架核心访问SQL数据库\n```cs\npublic class AlbumRepository : IAlbumRepository\n{\n    private readonly ChinookContext _context;\n\n    public AlbumRepository(ChinookContext context)\n    {\n        _context = context;\n    }\n\n    private async Task<bool> AlbumExists(int id, CancellationToken ct = default(CancellationToken))\n    {\nreturn await GetByIdAsync(id, ct) != null;\n    }\n\n    public void Dispose()\n    {\n        _context.Dispose();\n    }\n\n    public async Task<List<Album>> GetAllAsync(CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.ToListAsync(ct);\n    }\n\n    public async Task<Album> GetByIdAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.FindAsync(id);\n    }\n\n    public async Task<Album> AddAsync(Album newAlbum, CancellationToken ct = default(CancellationToken))\n    {\n        _context.Album.Add(newAlbum);\n        await _context.SaveChangesAsync(ct);\n        return newAlbum;\n    }\n\n    public async Task<bool> UpdateAsync(Album album, CancellationToken ct = default(CancellationToken))\n    {\n        if (!await AlbumExists(album.AlbumId, ct))\n            return false;\n        _context.Album.Update(album);\n\n        _context.Update(album);\n        await _context.SaveChangesAsync(ct);\n        return true;\n    }\n\n    public async Task<bool> DeleteAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        if (!await AlbumExists(id, ct))\n \t     return false;\n        var toRemove = _context.Album.Find(id);\n        _context.Album.Remove(toRemove);\n        await _context.SaveChangesAsync(ct);\n        return true;\n    }\n\n    public async Task<List<Album>> GetByArtistIdAsync(int id, CancellationToken ct = default(CancellationToken))\n    {\n        return await _context.Album.Where(a => a.ArtistId == id).ToListAsync(ct);\n    }\n}\n```\n\n##### API层\n这一层包含Web API端点逻辑的代码，包括控制器。这个解决方案的API项目将有一个单独的职责，那就是处理web服务器接收到的HTTP请求并返回HTTP响应，无论成功还是失败。在这个项目中，将会有非常少的业务逻辑。我们将处理在领域或数据项目中发生的异常和错误，以有效地与API的使用者进行通信。此通信将使用HTTP响应代码和在HTTP响应报文中返回的任何数据。\n```cs\n[Route(\"api/[controller]\")]\npublic class AlbumController : Controller\n{\n    private readonly ISupervisor _Supervisor;\n\n    public AlbumController(ISupervisor Supervisor)\n    {\n        _Supervisor = Supervisor;\n    }\n\n    [HttpGet]\n    [Produces(typeof(List<AlbumViewModel>))]\n    public async Task<IActionResult> Get(CancellationToken ct = default(CancellationToken))\n    {\n        try\n        {\n            return new ObjectResult(await _Supervisor.GetAllAlbumAsync(ct));\n        }\n        catch (Exception ex)\n        {\n            return StatusCode(500, ex);\n        }\n    } \n\n    ...\n}\n```","slug":"Asp-Net-Core-Web-API的先进架构","published":1,"updated":"2019-06-25T15:48:40.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1y20004tkuiy9kap0rp","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"架构分层\"><a href=\"#架构分层\" class=\"headerlink\" title=\"架构分层\"></a>架构分层</h5><p>端口和适配器模式(又称六角形架构)可以解决业务逻辑与其他依赖项(如数据访问或API框架)耦合过于紧密的问题。使用此模式将允许您的API解决方案具有清晰的边界、具有单一职责的良好命名的对象，最终使其更容易开发和维护。架构分为API层,Domain层和Data层<br><a id=\"more\"></a></p><h5 id=\"Domain层\"><a href=\"#Domain层\" class=\"headerlink\" title=\"Domain层\"></a>Domain层</h5><p>领域层具有以下功能:</p><ul><li>定义将在整个解决方案中使用的实体对象。这些模型将表示数据层的数据模型（DataModel）</li><li>定义视图模型（ViewModel），将由API层针对HTTP请求和响应作为单个对象或对象集来使用</li><li>定义接口，我们的数据层可以通过这些接口实现数据访问逻辑</li><li>实现将包含从API层调用的方法的Supervisor。每个方法都代表一个API调用，并将数据从注入的数据层转换为视图模型以返回<br>示例如下<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Album.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Album</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AlbumId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ArtistId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">public</span> ICollection&lt;Track&gt; Tracks &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"keyword\">new</span> HashSet&lt;Track&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Artist Artist &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// AlbumViewModel.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumViewModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AlbumId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ArtistId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ArtistName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArtistViewModel Artist &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IList&lt;TrackViewModel&gt; Tracks &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// IAlbumRepository.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IAlbumRepository</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Task&lt;List&lt;Album&gt;&gt; GetAllAsync(CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken));</span><br><span class=\"line\">    <span class=\"function\">Task&lt;Album&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    Task&lt;List&lt;Album&gt;&gt; GetByArtistIdAsync(<span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken));</span><br><span class=\"line\">    <span class=\"function\">Task&lt;Album&gt; <span class=\"title\">AddAsync</span>(<span class=\"params\">Album newAlbum, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    <span class=\"function\">Task&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">UpdateAsync</span>(<span class=\"params\">Album album, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    <span class=\"function\">Task&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">DeleteAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Supervisor.cs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;AlbumViewModel&gt; <span class=\"title\">GetAlbumByIdAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> albumViewModel = AlbumCoverter.Convert(<span class=\"keyword\">await</span> _albumRepository.GetByIdAsync(id, ct));</span><br><span class=\"line\">    albumViewModel.Artist = <span class=\"keyword\">await</span> GetArtistByIdAsync(albumViewModel.ArtistId, ct);</span><br><span class=\"line\">    albumViewModel.Tracks = <span class=\"keyword\">await</span> GetTrackByAlbumIdAsync(albumViewModel.AlbumId, ct);</span><br><span class=\"line\">    albumViewModel.ArtistName = albumViewModel.Artist.Name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> albumViewModel;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id=\"Data层\"><a href=\"#Data层\" class=\"headerlink\" title=\"Data层\"></a>Data层</h5><p>数据层的关键是使用领域层中开发的接口实现每个实体存储库。以领域层的专辑存储库为例，它就是实现了IAlbumRepository接口。每个存储库都将注入DBContext，允许使用实体框架核心访问SQL数据库<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumRepository</span> : <span class=\"title\">IAlbumRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ChinookContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumRepository</span>(<span class=\"params\">ChinookContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">AlbumExists</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">await</span> GetByIdAsync(id, ct) != <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context.Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;List&lt;Album&gt;&gt; GetAllAsync(CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;Album&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.FindAsync(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;Album&gt; <span class=\"title\">AddAsync</span>(<span class=\"params\">Album newAlbum, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context.Album.Add(newAlbum);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newAlbum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">UpdateAsync</span>(<span class=\"params\">Album album, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">await</span> AlbumExists(album.AlbumId, ct))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        _context.Album.Update(album);</span><br><span class=\"line\"></span><br><span class=\"line\">        _context.Update(album);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">DeleteAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">await</span> AlbumExists(id, ct))</span><br><span class=\"line\"> \t     <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> toRemove = _context.Album.Find(id);</span><br><span class=\"line\">        _context.Album.Remove(toRemove);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;List&lt;Album&gt;&gt; GetByArtistIdAsync(<span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.Where(a =&gt; a.ArtistId == id).ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"API层\"><a href=\"#API层\" class=\"headerlink\" title=\"API层\"></a>API层</h5><p>这一层包含Web API端点逻辑的代码，包括控制器。这个解决方案的API项目将有一个单独的职责，那就是处理web服务器接收到的HTTP请求并返回HTTP响应，无论成功还是失败。在这个项目中，将会有非常少的业务逻辑。我们将处理在领域或数据项目中发生的异常和错误，以有效地与API的使用者进行通信。此通信将使用HTTP响应代码和在HTTP响应报文中返回的任何数据。<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISupervisor _Supervisor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumController</span>(<span class=\"params\">ISupervisor Supervisor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _Supervisor = Supervisor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    [<span class=\"meta\">Produces(typeof(List&lt;AlbumViewModel&gt;))</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">Get</span>(<span class=\"params\">CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ObjectResult(<span class=\"keyword\">await</span> _Supervisor.GetAllAlbumAsync(ct));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> StatusCode(<span class=\"number\">500</span>, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"架构分层\"><a href=\"#架构分层\" class=\"headerlink\" title=\"架构分层\"></a>架构分层</h5><p>端口和适配器模式(又称六角形架构)可以解决业务逻辑与其他依赖项(如数据访问或API框架)耦合过于紧密的问题。使用此模式将允许您的API解决方案具有清晰的边界、具有单一职责的良好命名的对象，最终使其更容易开发和维护。架构分为API层,Domain层和Data层<br>","more":"</p><h5 id=\"Domain层\"><a href=\"#Domain层\" class=\"headerlink\" title=\"Domain层\"></a>Domain层</h5><p>领域层具有以下功能:</p><ul><li>定义将在整个解决方案中使用的实体对象。这些模型将表示数据层的数据模型（DataModel）</li><li>定义视图模型（ViewModel），将由API层针对HTTP请求和响应作为单个对象或对象集来使用</li><li>定义接口，我们的数据层可以通过这些接口实现数据访问逻辑</li><li>实现将包含从API层调用的方法的Supervisor。每个方法都代表一个API调用，并将数据从注入的数据层转换为视图模型以返回<br>示例如下<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Album.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Album</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AlbumId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ArtistId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">public</span> ICollection&lt;Track&gt; Tracks &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"keyword\">new</span> HashSet&lt;Track&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Artist Artist &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// AlbumViewModel.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumViewModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AlbumId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ArtistId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ArtistName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArtistViewModel Artist &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IList&lt;TrackViewModel&gt; Tracks &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// IAlbumRepository.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IAlbumRepository</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Task&lt;List&lt;Album&gt;&gt; GetAllAsync(CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken));</span><br><span class=\"line\">    <span class=\"function\">Task&lt;Album&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    Task&lt;List&lt;Album&gt;&gt; GetByArtistIdAsync(<span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken));</span><br><span class=\"line\">    <span class=\"function\">Task&lt;Album&gt; <span class=\"title\">AddAsync</span>(<span class=\"params\">Album newAlbum, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    <span class=\"function\">Task&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">UpdateAsync</span>(<span class=\"params\">Album album, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">    <span class=\"function\">Task&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">DeleteAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Supervisor.cs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;AlbumViewModel&gt; <span class=\"title\">GetAlbumByIdAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> albumViewModel = AlbumCoverter.Convert(<span class=\"keyword\">await</span> _albumRepository.GetByIdAsync(id, ct));</span><br><span class=\"line\">    albumViewModel.Artist = <span class=\"keyword\">await</span> GetArtistByIdAsync(albumViewModel.ArtistId, ct);</span><br><span class=\"line\">    albumViewModel.Tracks = <span class=\"keyword\">await</span> GetTrackByAlbumIdAsync(albumViewModel.AlbumId, ct);</span><br><span class=\"line\">    albumViewModel.ArtistName = albumViewModel.Artist.Name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> albumViewModel;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id=\"Data层\"><a href=\"#Data层\" class=\"headerlink\" title=\"Data层\"></a>Data层</h5><p>数据层的关键是使用领域层中开发的接口实现每个实体存储库。以领域层的专辑存储库为例，它就是实现了IAlbumRepository接口。每个存储库都将注入DBContext，允许使用实体框架核心访问SQL数据库<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumRepository</span> : <span class=\"title\">IAlbumRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ChinookContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumRepository</span>(<span class=\"params\">ChinookContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">AlbumExists</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">await</span> GetByIdAsync(id, ct) != <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context.Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;List&lt;Album&gt;&gt; GetAllAsync(CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;Album&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.FindAsync(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;Album&gt; <span class=\"title\">AddAsync</span>(<span class=\"params\">Album newAlbum, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context.Album.Add(newAlbum);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newAlbum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">UpdateAsync</span>(<span class=\"params\">Album album, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">await</span> AlbumExists(album.AlbumId, ct))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        _context.Album.Update(album);</span><br><span class=\"line\"></span><br><span class=\"line\">        _context.Update(album);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">DeleteAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">await</span> AlbumExists(id, ct))</span><br><span class=\"line\"> \t     <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> toRemove = _context.Album.Find(id);</span><br><span class=\"line\">        _context.Album.Remove(toRemove);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;List&lt;Album&gt;&gt; GetByArtistIdAsync(<span class=\"keyword\">int</span> id, CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Album.Where(a =&gt; a.ArtistId == id).ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"API层\"><a href=\"#API层\" class=\"headerlink\" title=\"API层\"></a>API层</h5><p>这一层包含Web API端点逻辑的代码，包括控制器。这个解决方案的API项目将有一个单独的职责，那就是处理web服务器接收到的HTTP请求并返回HTTP响应，无论成功还是失败。在这个项目中，将会有非常少的业务逻辑。我们将处理在领域或数据项目中发生的异常和错误，以有效地与API的使用者进行通信。此通信将使用HTTP响应代码和在HTTP响应报文中返回的任何数据。<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ISupervisor _Supervisor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumController</span>(<span class=\"params\">ISupervisor Supervisor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _Supervisor = Supervisor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    [<span class=\"meta\">Produces(typeof(List&lt;AlbumViewModel&gt;))</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">Get</span>(<span class=\"params\">CancellationToken ct = <span class=\"keyword\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ObjectResult(<span class=\"keyword\">await</span> _Supervisor.GetAllAlbumAsync(ct));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> StatusCode(<span class=\"number\">500</span>, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"Asp.Net Core Url 重写","date":"2019-06-25T15:49:06.000Z","_content":"#### Url重写的引用\n* 需要引入nuget包 Microsoft.AspNetCore.Rewrite\n* 在Startup.cs 建立Url重写规则,并注册Url重写中间件\n  ```cs\n    public class  Startup\n    {\n        public void Configure(IApplicationBuilder app)\n        {\n            var rewrite = new RewriteOptions()\n                //Url重写\n                .AddRewrite(\"error.html\", \"home/error\", skipRemainingRules: true);\n                //Url重定向\n                .AddRedirect(\"main\", \"home/index\");\n            app.UseRewriter(rewrite);\n        }\n    }\n    ```\n<!--more-->\n#### Url重写\nUrl重写是属于Server端的转换事件,当Client端Request的时候,发现原地址被替换了,则自动回传新地址的内容.\n\n##### AddRewrite()方法\n有三个参数,当Url符合参数1时就将参数2路由的内容回传给Client,skipRemainingRules为true时,当找到匹配条件时,则不再继续往下寻找.参数1支持正则匹配.\n```cs\nAddRewrite(\"users?id=(\\w+)\", \"users/$1\", true);\n```\n#### Url重定向\nUrl重定向是属于Client的转换事件,当 Client 端 Request 來的時候，发现原地址被替换了，Server 會先回传給 Client 告知新地址，再由 Client 重新 Request 新地址.\n\n##### AddRedirect()方法\n有3个参数,当Url符合参数1时,会回传参数2的Url给Client,参数3用于指定回传的HTTP Stastus Code(301/302),不指定时默认为302,参数1支持正则匹配.\n```cs\nAddRedirect(\"api/(.*)/(.*)/(.*)\", \"api?p1=$1&p2=$2&p3=$3\", 301);\n```\n##### HTTP Status Code 301\n301是指该网址已经永久转移到另一个地方,常用于网站搬家和网站改版,新旧版本路径不相同,要重新对应的情况\n\n##### HTTP Status Code 302\n302是指该网站暂时被转移到另一个地方,常用于网站维护时.","source":"_posts/Asp-Net-Core-Url 重写.md","raw":"---\ntitle: Asp.Net Core Url 重写\ndate: 2019-06-25 23:49:06\ncategories: .Net Core\ntags:\n - .Net Core\n - Url 重写\n---\n#### Url重写的引用\n* 需要引入nuget包 Microsoft.AspNetCore.Rewrite\n* 在Startup.cs 建立Url重写规则,并注册Url重写中间件\n  ```cs\n    public class  Startup\n    {\n        public void Configure(IApplicationBuilder app)\n        {\n            var rewrite = new RewriteOptions()\n                //Url重写\n                .AddRewrite(\"error.html\", \"home/error\", skipRemainingRules: true);\n                //Url重定向\n                .AddRedirect(\"main\", \"home/index\");\n            app.UseRewriter(rewrite);\n        }\n    }\n    ```\n<!--more-->\n#### Url重写\nUrl重写是属于Server端的转换事件,当Client端Request的时候,发现原地址被替换了,则自动回传新地址的内容.\n\n##### AddRewrite()方法\n有三个参数,当Url符合参数1时就将参数2路由的内容回传给Client,skipRemainingRules为true时,当找到匹配条件时,则不再继续往下寻找.参数1支持正则匹配.\n```cs\nAddRewrite(\"users?id=(\\w+)\", \"users/$1\", true);\n```\n#### Url重定向\nUrl重定向是属于Client的转换事件,当 Client 端 Request 來的時候，发现原地址被替换了，Server 會先回传給 Client 告知新地址，再由 Client 重新 Request 新地址.\n\n##### AddRedirect()方法\n有3个参数,当Url符合参数1时,会回传参数2的Url给Client,参数3用于指定回传的HTTP Stastus Code(301/302),不指定时默认为302,参数1支持正则匹配.\n```cs\nAddRedirect(\"api/(.*)/(.*)/(.*)\", \"api?p1=$1&p2=$2&p3=$3\", 301);\n```\n##### HTTP Status Code 301\n301是指该网址已经永久转移到另一个地方,常用于网站搬家和网站改版,新旧版本路径不相同,要重新对应的情况\n\n##### HTTP Status Code 302\n302是指该网站暂时被转移到另一个地方,常用于网站维护时.","slug":"Asp-Net-Core-Url 重写","published":1,"updated":"2019-06-25T15:54:32.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1y30005tkui7852ro16","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"Url重写的引用\"><a href=\"#Url重写的引用\" class=\"headerlink\" title=\"Url重写的引用\"></a>Url重写的引用</h4><ul><li>需要引入nuget包 Microsoft.AspNetCore.Rewrite</li><li>在Startup.cs 建立Url重写规则,并注册Url重写中间件<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span>  <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rewrite = <span class=\"keyword\">new</span> RewriteOptions()</span><br><span class=\"line\">            <span class=\"comment\">//Url重写</span></span><br><span class=\"line\">            .AddRewrite(<span class=\"string\">\"error.html\"</span>, <span class=\"string\">\"home/error\"</span>, skipRemainingRules: <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//Url重定向</span></span><br><span class=\"line\">            .AddRedirect(<span class=\"string\">\"main\"</span>, <span class=\"string\">\"home/index\"</span>);</span><br><span class=\"line\">        app.UseRewriter(rewrite);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id=\"more\"></a><h4 id=\"Url重写\"><a href=\"#Url重写\" class=\"headerlink\" title=\"Url重写\"></a>Url重写</h4><p>Url重写是属于Server端的转换事件,当Client端Request的时候,发现原地址被替换了,则自动回传新地址的内容.</p><h5 id=\"AddRewrite-方法\"><a href=\"#AddRewrite-方法\" class=\"headerlink\" title=\"AddRewrite()方法\"></a>AddRewrite()方法</h5><p>有三个参数,当Url符合参数1时就将参数2路由的内容回传给Client,skipRemainingRules为true时,当找到匹配条件时,则不再继续往下寻找.参数1支持正则匹配.<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddRewrite(<span class=\"string\">\"users?id=(\\w+)\"</span>, <span class=\"string\">\"users/$1\"</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Url重定向\"><a href=\"#Url重定向\" class=\"headerlink\" title=\"Url重定向\"></a>Url重定向</h4><p>Url重定向是属于Client的转换事件,当 Client 端 Request 來的時候，发现原地址被替换了，Server 會先回传給 Client 告知新地址，再由 Client 重新 Request 新地址.</p><h5 id=\"AddRedirect-方法\"><a href=\"#AddRedirect-方法\" class=\"headerlink\" title=\"AddRedirect()方法\"></a>AddRedirect()方法</h5><p>有3个参数,当Url符合参数1时,会回传参数2的Url给Client,参数3用于指定回传的HTTP Stastus Code(301/302),不指定时默认为302,参数1支持正则匹配.<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddRedirect(<span class=\"string\">\"api/(.*)/(.*)/(.*)\"</span>, <span class=\"string\">\"api?p1=$1&amp;p2=$2&amp;p3=$3\"</span>, <span class=\"number\">301</span>);</span><br></pre></td></tr></table></figure><p></p><h5 id=\"HTTP-Status-Code-301\"><a href=\"#HTTP-Status-Code-301\" class=\"headerlink\" title=\"HTTP Status Code 301\"></a>HTTP Status Code 301</h5><p>301是指该网址已经永久转移到另一个地方,常用于网站搬家和网站改版,新旧版本路径不相同,要重新对应的情况</p><h5 id=\"HTTP-Status-Code-302\"><a href=\"#HTTP-Status-Code-302\" class=\"headerlink\" title=\"HTTP Status Code 302\"></a>HTTP Status Code 302</h5><p>302是指该网站暂时被转移到另一个地方,常用于网站维护时.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"Url重写的引用\"><a href=\"#Url重写的引用\" class=\"headerlink\" title=\"Url重写的引用\"></a>Url重写的引用</h4><ul><li>需要引入nuget包 Microsoft.AspNetCore.Rewrite</li><li>在Startup.cs 建立Url重写规则,并注册Url重写中间件<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span>  <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rewrite = <span class=\"keyword\">new</span> RewriteOptions()</span><br><span class=\"line\">            <span class=\"comment\">//Url重写</span></span><br><span class=\"line\">            .AddRewrite(<span class=\"string\">\"error.html\"</span>, <span class=\"string\">\"home/error\"</span>, skipRemainingRules: <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//Url重定向</span></span><br><span class=\"line\">            .AddRedirect(<span class=\"string\">\"main\"</span>, <span class=\"string\">\"home/index\"</span>);</span><br><span class=\"line\">        app.UseRewriter(rewrite);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul>","more":"<h4 id=\"Url重写\"><a href=\"#Url重写\" class=\"headerlink\" title=\"Url重写\"></a>Url重写</h4><p>Url重写是属于Server端的转换事件,当Client端Request的时候,发现原地址被替换了,则自动回传新地址的内容.</p><h5 id=\"AddRewrite-方法\"><a href=\"#AddRewrite-方法\" class=\"headerlink\" title=\"AddRewrite()方法\"></a>AddRewrite()方法</h5><p>有三个参数,当Url符合参数1时就将参数2路由的内容回传给Client,skipRemainingRules为true时,当找到匹配条件时,则不再继续往下寻找.参数1支持正则匹配.<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddRewrite(<span class=\"string\">\"users?id=(\\w+)\"</span>, <span class=\"string\">\"users/$1\"</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Url重定向\"><a href=\"#Url重定向\" class=\"headerlink\" title=\"Url重定向\"></a>Url重定向</h4><p>Url重定向是属于Client的转换事件,当 Client 端 Request 來的時候，发现原地址被替换了，Server 會先回传給 Client 告知新地址，再由 Client 重新 Request 新地址.</p><h5 id=\"AddRedirect-方法\"><a href=\"#AddRedirect-方法\" class=\"headerlink\" title=\"AddRedirect()方法\"></a>AddRedirect()方法</h5><p>有3个参数,当Url符合参数1时,会回传参数2的Url给Client,参数3用于指定回传的HTTP Stastus Code(301/302),不指定时默认为302,参数1支持正则匹配.<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddRedirect(<span class=\"string\">\"api/(.*)/(.*)/(.*)\"</span>, <span class=\"string\">\"api?p1=$1&amp;p2=$2&amp;p3=$3\"</span>, <span class=\"number\">301</span>);</span><br></pre></td></tr></table></figure><p></p><h5 id=\"HTTP-Status-Code-301\"><a href=\"#HTTP-Status-Code-301\" class=\"headerlink\" title=\"HTTP Status Code 301\"></a>HTTP Status Code 301</h5><p>301是指该网址已经永久转移到另一个地方,常用于网站搬家和网站改版,新旧版本路径不相同,要重新对应的情况</p><h5 id=\"HTTP-Status-Code-302\"><a href=\"#HTTP-Status-Code-302\" class=\"headerlink\" title=\"HTTP Status Code 302\"></a>HTTP Status Code 302</h5><p>302是指该网站暂时被转移到另一个地方,常用于网站维护时.</p><!-- rebuild by neat -->"},{"title":"Asp.Net Core 中间件","date":"2019-06-25T15:39:29.000Z","_content":"#### 定义\n.Net Core 里面的中间件串联在一起组成了管道,所有的 Request 及 Response都会经过管道.\n<!--more-->\n#### 建立中间件\n*FirstMiddleware.cs*\n```cs\npublic class TestMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public TestMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        await context.Response.WriteAsync($\"TestMiddleware 进入. \\r\\n\");\n\n        await _next(context);\n\n        await context.Response.WriteAsync($\"TestMiddleware 退出. \\r\\n\");\n    }\n}\n```\n#### 全局注册\n在Startup.Configue中注册,则全部的Request都会通过该中间件.\n\n*Startup.cs*\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseMiddleware&lt;TestMiddleware&gt;();\n    }\n}\n```\n#### 区域注册\n中间件也可以仅在特定的控制器和请求上注册.\n\n*ValueController.cs*\n```cs\n[MiddlewareFilter(typeof(TestMiddleware))]\npublic class ValueController : Controller\n{\n    [MiddlewareFilter(typeof(TestMiddleware))]\n    public IActionResult Index()\n    {\n        // ...\n    }\n}\n```\n#### 扩展方法注册\n大部分的中间件都会用一个静态方法来进行注册.\n\n*CustomMiddlewareExtensions.cs*\n```cs\npublic static class CustomMiddlewareExtensions\n{\n    public static IApplicationBuilder UseTestMiddleware(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware&lt;TestMiddleware&gt;();\n    }\n}\n```\n*Startup.cs*\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseTestMiddleware();\n    }\n}\n```","source":"_posts/Asp-Net-Core-中间件.md","raw":"---\ntitle: Asp.Net Core 中间件\ndate: 2019-06-25 23:39:29\ncategories: .Net Core\ntags:\n - .Net Core\n - Middleware\n---\n#### 定义\n.Net Core 里面的中间件串联在一起组成了管道,所有的 Request 及 Response都会经过管道.\n<!--more-->\n#### 建立中间件\n*FirstMiddleware.cs*\n```cs\npublic class TestMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public TestMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        await context.Response.WriteAsync($\"TestMiddleware 进入. \\r\\n\");\n\n        await _next(context);\n\n        await context.Response.WriteAsync($\"TestMiddleware 退出. \\r\\n\");\n    }\n}\n```\n#### 全局注册\n在Startup.Configue中注册,则全部的Request都会通过该中间件.\n\n*Startup.cs*\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseMiddleware&lt;TestMiddleware&gt;();\n    }\n}\n```\n#### 区域注册\n中间件也可以仅在特定的控制器和请求上注册.\n\n*ValueController.cs*\n```cs\n[MiddlewareFilter(typeof(TestMiddleware))]\npublic class ValueController : Controller\n{\n    [MiddlewareFilter(typeof(TestMiddleware))]\n    public IActionResult Index()\n    {\n        // ...\n    }\n}\n```\n#### 扩展方法注册\n大部分的中间件都会用一个静态方法来进行注册.\n\n*CustomMiddlewareExtensions.cs*\n```cs\npublic static class CustomMiddlewareExtensions\n{\n    public static IApplicationBuilder UseTestMiddleware(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware&lt;TestMiddleware&gt;();\n    }\n}\n```\n*Startup.cs*\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseTestMiddleware();\n    }\n}\n```","slug":"Asp-Net-Core-中间件","published":1,"updated":"2019-06-25T15:48:44.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1y40006tkui4ts8igjg","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>.Net Core 里面的中间件串联在一起组成了管道,所有的 Request 及 Response都会经过管道.<br><a id=\"more\"></a></p><h4 id=\"建立中间件\"><a href=\"#建立中间件\" class=\"headerlink\" title=\"建立中间件\"></a>建立中间件</h4><p><em>FirstMiddleware.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$\"TestMiddleware 进入. \\r\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _next(context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$\"TestMiddleware 退出. \\r\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h4><p>在Startup.Configue中注册,则全部的Request都会通过该中间件.</p><p><em>Startup.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseMiddleware&amp;lt;TestMiddleware&amp;gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"区域注册\"><a href=\"#区域注册\" class=\"headerlink\" title=\"区域注册\"></a>区域注册</h4><p>中间件也可以仅在特定的控制器和请求上注册.</p><p><em>ValueController.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">MiddlewareFilter(typeof(TestMiddleware))</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValueController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">MiddlewareFilter(typeof(TestMiddleware))</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"扩展方法注册\"><a href=\"#扩展方法注册\" class=\"headerlink\" title=\"扩展方法注册\"></a>扩展方法注册</h4><p>大部分的中间件都会用一个静态方法来进行注册.</p><p><em>CustomMiddlewareExtensions.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomMiddlewareExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">UseTestMiddleware</span>(<span class=\"params\"><span class=\"keyword\">this</span> IApplicationBuilder builder</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.UseMiddleware&amp;lt;TestMiddleware&amp;gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>Startup.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseTestMiddleware();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>.Net Core 里面的中间件串联在一起组成了管道,所有的 Request 及 Response都会经过管道.<br>","more":"</p><h4 id=\"建立中间件\"><a href=\"#建立中间件\" class=\"headerlink\" title=\"建立中间件\"></a>建立中间件</h4><p><em>FirstMiddleware.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$\"TestMiddleware 进入. \\r\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _next(context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$\"TestMiddleware 退出. \\r\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h4><p>在Startup.Configue中注册,则全部的Request都会通过该中间件.</p><p><em>Startup.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseMiddleware&amp;lt;TestMiddleware&amp;gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"区域注册\"><a href=\"#区域注册\" class=\"headerlink\" title=\"区域注册\"></a>区域注册</h4><p>中间件也可以仅在特定的控制器和请求上注册.</p><p><em>ValueController.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">MiddlewareFilter(typeof(TestMiddleware))</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValueController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">MiddlewareFilter(typeof(TestMiddleware))</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"扩展方法注册\"><a href=\"#扩展方法注册\" class=\"headerlink\" title=\"扩展方法注册\"></a>扩展方法注册</h4><p>大部分的中间件都会用一个静态方法来进行注册.</p><p><em>CustomMiddlewareExtensions.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomMiddlewareExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">UseTestMiddleware</span>(<span class=\"params\"><span class=\"keyword\">this</span> IApplicationBuilder builder</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.UseMiddleware&amp;lt;TestMiddleware&amp;gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>Startup.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseTestMiddleware();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"Asp.Net Core 压缩封包","date":"2019-08-10T07:04:49.000Z","_content":"#### 简介\n\nAsp.Net Core 不会自动把所有封包进行压缩,要对Response的内容进行压缩,可以使用ResponseCompression套件提供的压缩方式\n<!--more-->\n\n#### 启用封包压缩\n\n在Startup.ConfigureServices 加入封包压缩的服务以及Startup.Configure 注册封包压缩的中间件.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression();\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseResponseCompression();\n        app.UseStaticFiles();\n        app.UseMvcWithDefaultRoute();\n    }\n}\n```\n\n> ps:默认的压缩方式是Gzip\n\n#### ResponseCompressionOptions\n\n可以通过ResponseCompressionOptions调整要被压缩的MimeTypes以及压缩的方法等.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression(options =>\n        {\n            options.EnableForHttps = true;\n            options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(new[]\n            {\n                \"image/png\"\n            });\n        });\n        services.Configure<GzipCompressionProviderOptions>(options =>\n        {\n            options.Level = System.IO.Compression.CompressionLevel.Optimal;\n        });\n        services.AddMvc();\n    }\n}\n```\n\n* EnableForHttps\n\n  是否要对Https的封包进行压缩.默认为false\n\n* MimeType\n\n  设置要进行压缩的MimeTypes.默认的有text/plain, text/css, application/javascript, text/html, application/xml, text/xml, application/json, text/json.\n\n* GzipCompressionProviderOptions\n\n  设定Gzip的压缩方式,默认为CompressionLevelFastest 快速压缩.\n\n> 压缩的好处是Response的封包变小,节省流量,但会消耗Cpu效能\n\n##### 自定义压缩\n\n某些情况可能会需要自定义封包的压缩方式,例如Server to Server的Api对接,双方使用约定好的压缩方式.\n\n可以继承ICompressionProvider,实例化自定义的压缩方法.并通过HttpHeader的Accept-Encoding指定压缩方式.再将自定义的压缩方法加入到ResponseCompressionOptions.Providers.\n\n*CustomCompressionProvider.cs*\n\n```cs\npublic class CustomCompressionProvider:ICompressionProvider\n{\n    public string EncodingName => \"customcompression\";\n    public bool SupportsFlush => true;\n\n    public Stream CreateStream(Stream outputStream)\n    {\n        return outputStream;\n    }\n}\n```\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression(options =>\n        {\n            options.Providers.Add<CustomCompressionProvider>();\n        });\n        services.AddMvc();\n    }\n}\n```\n\n当Http Header的Accept-Encoding = customcompression 就会使用CustomCompressionProvider压缩封包.","source":"_posts/Asp-Net-Core-压缩封包.md","raw":"---\ntitle: Asp.Net Core 压缩封包\ndate: 2019-08-10 15:04:49\ncategories: .Net Core\ntags:\n - .Net Core\n - Gzip\n---\n#### 简介\n\nAsp.Net Core 不会自动把所有封包进行压缩,要对Response的内容进行压缩,可以使用ResponseCompression套件提供的压缩方式\n<!--more-->\n\n#### 启用封包压缩\n\n在Startup.ConfigureServices 加入封包压缩的服务以及Startup.Configure 注册封包压缩的中间件.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression();\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseResponseCompression();\n        app.UseStaticFiles();\n        app.UseMvcWithDefaultRoute();\n    }\n}\n```\n\n> ps:默认的压缩方式是Gzip\n\n#### ResponseCompressionOptions\n\n可以通过ResponseCompressionOptions调整要被压缩的MimeTypes以及压缩的方法等.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression(options =>\n        {\n            options.EnableForHttps = true;\n            options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(new[]\n            {\n                \"image/png\"\n            });\n        });\n        services.Configure<GzipCompressionProviderOptions>(options =>\n        {\n            options.Level = System.IO.Compression.CompressionLevel.Optimal;\n        });\n        services.AddMvc();\n    }\n}\n```\n\n* EnableForHttps\n\n  是否要对Https的封包进行压缩.默认为false\n\n* MimeType\n\n  设置要进行压缩的MimeTypes.默认的有text/plain, text/css, application/javascript, text/html, application/xml, text/xml, application/json, text/json.\n\n* GzipCompressionProviderOptions\n\n  设定Gzip的压缩方式,默认为CompressionLevelFastest 快速压缩.\n\n> 压缩的好处是Response的封包变小,节省流量,但会消耗Cpu效能\n\n##### 自定义压缩\n\n某些情况可能会需要自定义封包的压缩方式,例如Server to Server的Api对接,双方使用约定好的压缩方式.\n\n可以继承ICompressionProvider,实例化自定义的压缩方法.并通过HttpHeader的Accept-Encoding指定压缩方式.再将自定义的压缩方法加入到ResponseCompressionOptions.Providers.\n\n*CustomCompressionProvider.cs*\n\n```cs\npublic class CustomCompressionProvider:ICompressionProvider\n{\n    public string EncodingName => \"customcompression\";\n    public bool SupportsFlush => true;\n\n    public Stream CreateStream(Stream outputStream)\n    {\n        return outputStream;\n    }\n}\n```\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddResponseCompression(options =>\n        {\n            options.Providers.Add<CustomCompressionProvider>();\n        });\n        services.AddMvc();\n    }\n}\n```\n\n当Http Header的Accept-Encoding = customcompression 就会使用CustomCompressionProvider压缩封包.","slug":"Asp-Net-Core-压缩封包","published":1,"updated":"2019-08-10T07:07:21.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1y50007tkuivwblgglm","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Asp.Net Core 不会自动把所有封包进行压缩,要对Response的内容进行压缩,可以使用ResponseCompression套件提供的压缩方式<br><a id=\"more\"></a></p><h4 id=\"启用封包压缩\"><a href=\"#启用封包压缩\" class=\"headerlink\" title=\"启用封包压缩\"></a>启用封包压缩</h4><p>在Startup.ConfigureServices 加入封包压缩的服务以及Startup.Configure 注册封包压缩的中间件.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddResponseCompression();</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseResponseCompression();</span><br><span class=\"line\">        app.UseStaticFiles();</span><br><span class=\"line\">        app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ps:默认的压缩方式是Gzip</p></blockquote><h4 id=\"ResponseCompressionOptions\"><a href=\"#ResponseCompressionOptions\" class=\"headerlink\" title=\"ResponseCompressionOptions\"></a>ResponseCompressionOptions</h4><p>可以通过ResponseCompressionOptions调整要被压缩的MimeTypes以及压缩的方法等.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddResponseCompression(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.EnableForHttps = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(<span class=\"keyword\">new</span>[]</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.Configure&lt;GzipCompressionProviderOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.Level = System.IO.Compression.CompressionLevel.Optimal;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>EnableForHttps</p><p>是否要对Https的封包进行压缩.默认为false</p></li><li><p>MimeType</p><p>设置要进行压缩的MimeTypes.默认的有text/plain, text/css, application/javascript, text/html, application/xml, text/xml, application/json, text/json.</p></li><li><p>GzipCompressionProviderOptions</p><p>设定Gzip的压缩方式,默认为CompressionLevelFastest 快速压缩.</p></li></ul><blockquote><p>压缩的好处是Response的封包变小,节省流量,但会消耗Cpu效能</p></blockquote><h5 id=\"自定义压缩\"><a href=\"#自定义压缩\" class=\"headerlink\" title=\"自定义压缩\"></a>自定义压缩</h5><p>某些情况可能会需要自定义封包的压缩方式,例如Server to Server的Api对接,双方使用约定好的压缩方式.</p><p>可以继承ICompressionProvider,实例化自定义的压缩方法.并通过HttpHeader的Accept-Encoding指定压缩方式.再将自定义的压缩方法加入到ResponseCompressionOptions.Providers.</p><p><em>CustomCompressionProvider.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomCompressionProvider</span>:<span class=\"title\">ICompressionProvider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> EncodingName =&gt; <span class=\"string\">\"customcompression\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> SupportsFlush =&gt; <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Stream <span class=\"title\">CreateStream</span>(<span class=\"params\">Stream outputStream</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> outputStream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddResponseCompression(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.Providers.Add&lt;CustomCompressionProvider&gt;();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>当Http Header的Accept-Encoding = customcompression 就会使用CustomCompressionProvider压缩封包.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Asp.Net Core 不会自动把所有封包进行压缩,要对Response的内容进行压缩,可以使用ResponseCompression套件提供的压缩方式<br>","more":"</p><h4 id=\"启用封包压缩\"><a href=\"#启用封包压缩\" class=\"headerlink\" title=\"启用封包压缩\"></a>启用封包压缩</h4><p>在Startup.ConfigureServices 加入封包压缩的服务以及Startup.Configure 注册封包压缩的中间件.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddResponseCompression();</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseResponseCompression();</span><br><span class=\"line\">        app.UseStaticFiles();</span><br><span class=\"line\">        app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ps:默认的压缩方式是Gzip</p></blockquote><h4 id=\"ResponseCompressionOptions\"><a href=\"#ResponseCompressionOptions\" class=\"headerlink\" title=\"ResponseCompressionOptions\"></a>ResponseCompressionOptions</h4><p>可以通过ResponseCompressionOptions调整要被压缩的MimeTypes以及压缩的方法等.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddResponseCompression(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.EnableForHttps = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(<span class=\"keyword\">new</span>[]</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.Configure&lt;GzipCompressionProviderOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.Level = System.IO.Compression.CompressionLevel.Optimal;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>EnableForHttps</p><p>是否要对Https的封包进行压缩.默认为false</p></li><li><p>MimeType</p><p>设置要进行压缩的MimeTypes.默认的有text/plain, text/css, application/javascript, text/html, application/xml, text/xml, application/json, text/json.</p></li><li><p>GzipCompressionProviderOptions</p><p>设定Gzip的压缩方式,默认为CompressionLevelFastest 快速压缩.</p></li></ul><blockquote><p>压缩的好处是Response的封包变小,节省流量,但会消耗Cpu效能</p></blockquote><h5 id=\"自定义压缩\"><a href=\"#自定义压缩\" class=\"headerlink\" title=\"自定义压缩\"></a>自定义压缩</h5><p>某些情况可能会需要自定义封包的压缩方式,例如Server to Server的Api对接,双方使用约定好的压缩方式.</p><p>可以继承ICompressionProvider,实例化自定义的压缩方法.并通过HttpHeader的Accept-Encoding指定压缩方式.再将自定义的压缩方法加入到ResponseCompressionOptions.Providers.</p><p><em>CustomCompressionProvider.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomCompressionProvider</span>:<span class=\"title\">ICompressionProvider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> EncodingName =&gt; <span class=\"string\">\"customcompression\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> SupportsFlush =&gt; <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Stream <span class=\"title\">CreateStream</span>(<span class=\"params\">Stream outputStream</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> outputStream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddResponseCompression(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.Providers.Add&lt;CustomCompressionProvider&gt;();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>当Http Header的Accept-Encoding = customcompression 就会使用CustomCompressionProvider压缩封包.</p><!-- rebuild by neat -->"},{"title":"Asp.Net Core WebSocket","date":"2018-03-20T13:26:28.000Z","_content":"##### WebSocket是什么\nWebSocket 是一种在单个TCP连接上进行全双工通讯的协议,是建立在TCP上,且独立的协议.在WebSocket API中,浏览器和服务器只需要完成一次握手,两者之间就可以进行持久性的连接,并进行双向数据传输.\n为了建立WebSocket连接,浏览器通过Http1.1协议的101StatusCode进行握手\n<!--more-->\n##### 在Asp.Net Core中使用WebSocket\n```cs\n// Configure function\n/// Summary\n//这里主要是监听WebSocket的请求,然后Invoke Echo 方法进行相关操作.比如,它接收到浏览器请求发来WebSocket的Close命令了.那么在Echo方法直接进行相关的操作\n/// Summary\napp.Use(async (context, next) => \n{\n    if(context.Request.Path == \"/ws\")\n    {\n        if(context.WebSockets.IsWebSocketRequest)\n        {\n            WebSocket webSocket = await context.WebSockets.AcceptAsync();\n            await Echo(context, WebSocket);\n        }\n        else\n        {\n            context.Response.StatusCode = 400;\n        }\n    }\n});\n\n// Echo function\nprivate async Task Echo(HttpContext context, WebSocket webSocket)\n{\n    var buffer = new byte[1024 * 4];\n\n    WebSocketReceiveResult result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n    while(!result.CloseStatus.HasValue)\n    {\n        await webSocket.SendAsync(new ArraySegment<byte>(buffer, 0, result.Count), result.MessageType, result.EndOfMessage, CancellationToken.None);\n\n        result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n    }\n    await webSocket.CloseAsync(result.CloseStatus.Value, result.CloseStatusDescription, CancellationTaken.None);\n}\n\n// 修改Echo方法中Send方法的buffer修改,设定想要的回馈\nvar abuffer = Encoding.ASCII.GetBytes(\"Hola, This is robert from cnblogs\");\nawait webSocket.SendAsync(new ArraySegment<byte>(abuffer, 0, abuffer.Length), result.MessageType, result.EndOfMessage, CancellationToken.None);\nresult = await webSocket.ReceiveAsync(new ArraySegment<byte>(abuffer), CancellationToken.None);\n```\n","source":"_posts/Asp-Net-Core-WebSocket.md","raw":"---\ntitle: Asp.Net Core WebSocket\ndate: 2018-03-20 21:26:28\ncategories: .Net Core\ntags:\n - .Net Core\n - WebSocket\n---\n##### WebSocket是什么\nWebSocket 是一种在单个TCP连接上进行全双工通讯的协议,是建立在TCP上,且独立的协议.在WebSocket API中,浏览器和服务器只需要完成一次握手,两者之间就可以进行持久性的连接,并进行双向数据传输.\n为了建立WebSocket连接,浏览器通过Http1.1协议的101StatusCode进行握手\n<!--more-->\n##### 在Asp.Net Core中使用WebSocket\n```cs\n// Configure function\n/// Summary\n//这里主要是监听WebSocket的请求,然后Invoke Echo 方法进行相关操作.比如,它接收到浏览器请求发来WebSocket的Close命令了.那么在Echo方法直接进行相关的操作\n/// Summary\napp.Use(async (context, next) => \n{\n    if(context.Request.Path == \"/ws\")\n    {\n        if(context.WebSockets.IsWebSocketRequest)\n        {\n            WebSocket webSocket = await context.WebSockets.AcceptAsync();\n            await Echo(context, WebSocket);\n        }\n        else\n        {\n            context.Response.StatusCode = 400;\n        }\n    }\n});\n\n// Echo function\nprivate async Task Echo(HttpContext context, WebSocket webSocket)\n{\n    var buffer = new byte[1024 * 4];\n\n    WebSocketReceiveResult result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n    while(!result.CloseStatus.HasValue)\n    {\n        await webSocket.SendAsync(new ArraySegment<byte>(buffer, 0, result.Count), result.MessageType, result.EndOfMessage, CancellationToken.None);\n\n        result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n    }\n    await webSocket.CloseAsync(result.CloseStatus.Value, result.CloseStatusDescription, CancellationTaken.None);\n}\n\n// 修改Echo方法中Send方法的buffer修改,设定想要的回馈\nvar abuffer = Encoding.ASCII.GetBytes(\"Hola, This is robert from cnblogs\");\nawait webSocket.SendAsync(new ArraySegment<byte>(abuffer, 0, abuffer.Length), result.MessageType, result.EndOfMessage, CancellationToken.None);\nresult = await webSocket.ReceiveAsync(new ArraySegment<byte>(abuffer), CancellationToken.None);\n```\n","slug":"Asp-Net-Core-WebSocket","published":1,"updated":"2019-06-25T15:41:38.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1y60008tkui4jcritch","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"WebSocket是什么\"><a href=\"#WebSocket是什么\" class=\"headerlink\" title=\"WebSocket是什么\"></a>WebSocket是什么</h5><p>WebSocket 是一种在单个TCP连接上进行全双工通讯的协议,是建立在TCP上,且独立的协议.在WebSocket API中,浏览器和服务器只需要完成一次握手,两者之间就可以进行持久性的连接,并进行双向数据传输.<br>为了建立WebSocket连接,浏览器通过Http1.1协议的101StatusCode进行握手<br><a id=\"more\"></a></p><h5 id=\"在Asp-Net-Core中使用WebSocket\"><a href=\"#在Asp-Net-Core中使用WebSocket\" class=\"headerlink\" title=\"在Asp.Net Core中使用WebSocket\"></a>在Asp.Net Core中使用WebSocket</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Configure function</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Summary</span></span><br><span class=\"line\"><span class=\"comment\">//这里主要是监听WebSocket的请求,然后Invoke Echo 方法进行相关操作.比如,它接收到浏览器请求发来WebSocket的Close命令了.那么在Echo方法直接进行相关的操作</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Summary</span></span><br><span class=\"line\">app.Use(<span class=\"keyword\">async</span> (context, next) =&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(context.Request.Path == <span class=\"string\">\"/ws\"</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(context.WebSockets.IsWebSocketRequest)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            WebSocket webSocket = <span class=\"keyword\">await</span> context.WebSockets.AcceptAsync();</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Echo(context, WebSocket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Response.StatusCode = <span class=\"number\">400</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Echo function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Echo</span>(<span class=\"params\">HttpContext context, WebSocket webSocket</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    WebSocketReceiveResult result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"keyword\">byte</span>&gt;(buffer), CancellationToken.None);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!result.CloseStatus.HasValue)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> webSocket.SendAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"keyword\">byte</span>&gt;(buffer, <span class=\"number\">0</span>, result.Count), result.MessageType, result.EndOfMessage, CancellationToken.None);</span><br><span class=\"line\"></span><br><span class=\"line\">        result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"keyword\">byte</span>&gt;(buffer), CancellationToken.None);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> webSocket.CloseAsync(result.CloseStatus.Value, result.CloseStatusDescription, CancellationTaken.None);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改Echo方法中Send方法的buffer修改,设定想要的回馈</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> abuffer = Encoding.ASCII.GetBytes(<span class=\"string\">\"Hola, This is robert from cnblogs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">await</span> webSocket.SendAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"keyword\">byte</span>&gt;(abuffer, <span class=\"number\">0</span>, abuffer.Length), result.MessageType, result.EndOfMessage, CancellationToken.None);</span><br><span class=\"line\">result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"keyword\">byte</span>&gt;(abuffer), CancellationToken.None);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"WebSocket是什么\"><a href=\"#WebSocket是什么\" class=\"headerlink\" title=\"WebSocket是什么\"></a>WebSocket是什么</h5><p>WebSocket 是一种在单个TCP连接上进行全双工通讯的协议,是建立在TCP上,且独立的协议.在WebSocket API中,浏览器和服务器只需要完成一次握手,两者之间就可以进行持久性的连接,并进行双向数据传输.<br>为了建立WebSocket连接,浏览器通过Http1.1协议的101StatusCode进行握手<br>","more":"</p><h5 id=\"在Asp-Net-Core中使用WebSocket\"><a href=\"#在Asp-Net-Core中使用WebSocket\" class=\"headerlink\" title=\"在Asp.Net Core中使用WebSocket\"></a>在Asp.Net Core中使用WebSocket</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Configure function</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Summary</span></span><br><span class=\"line\"><span class=\"comment\">//这里主要是监听WebSocket的请求,然后Invoke Echo 方法进行相关操作.比如,它接收到浏览器请求发来WebSocket的Close命令了.那么在Echo方法直接进行相关的操作</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Summary</span></span><br><span class=\"line\">app.Use(<span class=\"keyword\">async</span> (context, next) =&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(context.Request.Path == <span class=\"string\">\"/ws\"</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(context.WebSockets.IsWebSocketRequest)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            WebSocket webSocket = <span class=\"keyword\">await</span> context.WebSockets.AcceptAsync();</span><br><span class=\"line\">            <span class=\"keyword\">await</span> Echo(context, WebSocket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Response.StatusCode = <span class=\"number\">400</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Echo function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Echo</span>(<span class=\"params\">HttpContext context, WebSocket webSocket</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    WebSocketReceiveResult result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"keyword\">byte</span>&gt;(buffer), CancellationToken.None);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!result.CloseStatus.HasValue)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> webSocket.SendAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"keyword\">byte</span>&gt;(buffer, <span class=\"number\">0</span>, result.Count), result.MessageType, result.EndOfMessage, CancellationToken.None);</span><br><span class=\"line\"></span><br><span class=\"line\">        result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"keyword\">byte</span>&gt;(buffer), CancellationToken.None);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> webSocket.CloseAsync(result.CloseStatus.Value, result.CloseStatusDescription, CancellationTaken.None);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改Echo方法中Send方法的buffer修改,设定想要的回馈</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> abuffer = Encoding.ASCII.GetBytes(<span class=\"string\">\"Hola, This is robert from cnblogs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">await</span> webSocket.SendAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"keyword\">byte</span>&gt;(abuffer, <span class=\"number\">0</span>, abuffer.Length), result.MessageType, result.EndOfMessage, CancellationToken.None);</span><br><span class=\"line\">result = <span class=\"keyword\">await</span> webSocket.ReceiveAsync(<span class=\"keyword\">new</span> ArraySegment&lt;<span class=\"keyword\">byte</span>&gt;(abuffer), CancellationToken.None);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"Asp.Net Core 异常处理","date":"2019-07-13T14:34:02.000Z","_content":"异常处理在程序开发中也是一个比较重要的事,一方面可以避免暴露不该暴露的东西,另一方面也在出现问题时,可以及时的定位到异常发生的位置.\n<!--more-->\n\n#### Exception Filter\n\nException Filter 只能够捕捉到Action和Action Filter 所发出的Exception.其他类型的Filter或Middleware产生的Exception,无法通过Exception Filter 拦截.并不太适合用来做全站通用的Exception Handler.\n\n*ExceptionFilter.cs*\n\n```cs\npublic class ExceptionFilter : IAsyncExceptionFilter\n{\n    public Task OnExceptionAsync(ExceptionContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name 出现异常,异常信息:{context.Exception.Message}}\");\n        return Task.CompletedTask;\n    }\n}\n```\n\n*Starpup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config => \n        {\n            config.Filters.Add(new ExceptionFilter());\n        });\n    }\n}\n```\n\n> PS:如果只是注册了一个Exception Filter,那么Filter注册的前后顺序并不重要.只有同类型的Filter才会关系到注册的先后顺序.\n\n#### Exception Middleware\n\nMiddleware 注册的层级可以在Filter的外层,也就是全部的Filter都会经过Middleware.那么只需要在Exception Middleware注册在所有Middleware的最外层,就可以捕捉到全站的异常.\n\n*ExceptionMiddleware.cs*\n\n```cs\npublic class ExceptionMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public ExceptionMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            await context.Response.WriteAsync($\"{GetType().Name} 出现异常,异常消息:{ex.Message}\");\n        }\n    }\n}\n```\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseMiddleware<ExceptionMiddleware>();\n    }\n}\n```\n\n> PS:Middleware的注册顺序很关键,越先注册会在越外层.ExceptionMiddleware注册在越外层,捕捉的范围就越大.\n\n#### Exception Handler\n\nAsp.Net Core有提供Exception Handler 的管道,可以直接调用UseExceptionHandler指定错误页面.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseExceptionHandler(\"/error\")\n    }\n}\n```\n\nExceptionHandlerOptions\n\nUseExceptionHandler 除了可以指派错误页面外,也可以自己实现错误发生触发的事件.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseExceptionHandler(new ExceptionHandlerOptions()\n        {\n            ExceptionHandler = async context =>\n            {\n                bool isApi = Regex.IsMatch(context.Request.Path.Value,\"^/api/\",RegexOptions.IgnoreCase);\n                if(isApi)\n                {\n                    context.Response.ContentType = \"application/json\";\n                    var json = @\"{ \"\"Message\"\":\"\"Internal Server Error\"\"}\";\n                    await context.Response.WriteAsync(json);\n                    return;\n                }\n                context.Response.Redirect(\"/error\");\n            }\n        });\n    }\n}\n```\n\n上面特別对 API 的错误进行了处理，当请求 `http://localhost:5000/api/*` 发生错误时，会回传 JSON 格式的错误。而且把 请求MVC发生的错误 ，改用转址的方式转到 `http://localhost:5000/error`\n\n#### UseDeveloperExceptionPage\n\nUseDeveloperExceptionPage 是Asp.Net Core提供的错误信息页面服务.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n    {\n        // 在开发阶段调用Asp.Net Core提供的错误信息页面\n        if(env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/error\");\n        }\n    }\n}\n```\n","source":"_posts/Asp-Net-Core-异常处理.md","raw":"---\ntitle: Asp.Net Core 异常处理\ndate: 2019-07-13 22:34:02\ncategories: .Net Core\ntags:\n - .Net Core\n - Exception\n---\n异常处理在程序开发中也是一个比较重要的事,一方面可以避免暴露不该暴露的东西,另一方面也在出现问题时,可以及时的定位到异常发生的位置.\n<!--more-->\n\n#### Exception Filter\n\nException Filter 只能够捕捉到Action和Action Filter 所发出的Exception.其他类型的Filter或Middleware产生的Exception,无法通过Exception Filter 拦截.并不太适合用来做全站通用的Exception Handler.\n\n*ExceptionFilter.cs*\n\n```cs\npublic class ExceptionFilter : IAsyncExceptionFilter\n{\n    public Task OnExceptionAsync(ExceptionContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name 出现异常,异常信息:{context.Exception.Message}}\");\n        return Task.CompletedTask;\n    }\n}\n```\n\n*Starpup.cs*\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config => \n        {\n            config.Filters.Add(new ExceptionFilter());\n        });\n    }\n}\n```\n\n> PS:如果只是注册了一个Exception Filter,那么Filter注册的前后顺序并不重要.只有同类型的Filter才会关系到注册的先后顺序.\n\n#### Exception Middleware\n\nMiddleware 注册的层级可以在Filter的外层,也就是全部的Filter都会经过Middleware.那么只需要在Exception Middleware注册在所有Middleware的最外层,就可以捕捉到全站的异常.\n\n*ExceptionMiddleware.cs*\n\n```cs\npublic class ExceptionMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public ExceptionMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            await context.Response.WriteAsync($\"{GetType().Name} 出现异常,异常消息:{ex.Message}\");\n        }\n    }\n}\n```\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseMiddleware<ExceptionMiddleware>();\n    }\n}\n```\n\n> PS:Middleware的注册顺序很关键,越先注册会在越外层.ExceptionMiddleware注册在越外层,捕捉的范围就越大.\n\n#### Exception Handler\n\nAsp.Net Core有提供Exception Handler 的管道,可以直接调用UseExceptionHandler指定错误页面.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseExceptionHandler(\"/error\")\n    }\n}\n```\n\nExceptionHandlerOptions\n\nUseExceptionHandler 除了可以指派错误页面外,也可以自己实现错误发生触发的事件.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseExceptionHandler(new ExceptionHandlerOptions()\n        {\n            ExceptionHandler = async context =>\n            {\n                bool isApi = Regex.IsMatch(context.Request.Path.Value,\"^/api/\",RegexOptions.IgnoreCase);\n                if(isApi)\n                {\n                    context.Response.ContentType = \"application/json\";\n                    var json = @\"{ \"\"Message\"\":\"\"Internal Server Error\"\"}\";\n                    await context.Response.WriteAsync(json);\n                    return;\n                }\n                context.Response.Redirect(\"/error\");\n            }\n        });\n    }\n}\n```\n\n上面特別对 API 的错误进行了处理，当请求 `http://localhost:5000/api/*` 发生错误时，会回传 JSON 格式的错误。而且把 请求MVC发生的错误 ，改用转址的方式转到 `http://localhost:5000/error`\n\n#### UseDeveloperExceptionPage\n\nUseDeveloperExceptionPage 是Asp.Net Core提供的错误信息页面服务.\n\n*Startup.cs*\n\n```cs\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n    {\n        // 在开发阶段调用Asp.Net Core提供的错误信息页面\n        if(env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/error\");\n        }\n    }\n}\n```\n","slug":"Asp-Net-Core-异常处理","published":1,"updated":"2019-07-29T13:58:07.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1y60009tkuiy3q3g7ok","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>异常处理在程序开发中也是一个比较重要的事,一方面可以避免暴露不该暴露的东西,另一方面也在出现问题时,可以及时的定位到异常发生的位置.<br><a id=\"more\"></a></p><h4 id=\"Exception-Filter\"><a href=\"#Exception-Filter\" class=\"headerlink\" title=\"Exception Filter\"></a>Exception Filter</h4><p>Exception Filter 只能够捕捉到Action和Action Filter 所发出的Exception.其他类型的Filter或Middleware产生的Exception,无法通过Exception Filter 拦截.并不太适合用来做全站通用的Exception Handler.</p><p><em>ExceptionFilter.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExceptionFilter</span> : <span class=\"title\">IAsyncExceptionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">OnExceptionAsync</span>(<span class=\"params\">ExceptionContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name 出现异常,异常信息:&#123;context.Exception.Message&#125;</span>&#125;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Task.CompletedTask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><em>Starpup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ExceptionFilter());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS:如果只是注册了一个Exception Filter,那么Filter注册的前后顺序并不重要.只有同类型的Filter才会关系到注册的先后顺序.</p></blockquote><h4 id=\"Exception-Middleware\"><a href=\"#Exception-Middleware\" class=\"headerlink\" title=\"Exception Middleware\"></a>Exception Middleware</h4><p>Middleware 注册的层级可以在Filter的外层,也就是全部的Filter都会经过Middleware.那么只需要在Exception Middleware注册在所有Middleware的最外层,就可以捕捉到全站的异常.</p><p><em>ExceptionMiddleware.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExceptionMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExceptionMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _next(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 出现异常,异常消息:<span class=\"subst\">&#123;ex.Message&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseMiddleware&lt;ExceptionMiddleware&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS:Middleware的注册顺序很关键,越先注册会在越外层.ExceptionMiddleware注册在越外层,捕捉的范围就越大.</p></blockquote><h4 id=\"Exception-Handler\"><a href=\"#Exception-Handler\" class=\"headerlink\" title=\"Exception Handler\"></a>Exception Handler</h4><p>Asp.Net Core有提供Exception Handler 的管道,可以直接调用UseExceptionHandler指定错误页面.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"string\">\"/error\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>ExceptionHandlerOptions</p><p>UseExceptionHandler 除了可以指派错误页面外,也可以自己实现错误发生触发的事件.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"keyword\">new</span> ExceptionHandlerOptions()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExceptionHandler = <span class=\"keyword\">async</span> context =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">bool</span> isApi = Regex.IsMatch(context.Request.Path.Value,<span class=\"string\">\"^/api/\"</span>,RegexOptions.IgnoreCase);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isApi)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    context.Response.ContentType = <span class=\"string\">\"application/json\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> json = <span class=\"string\">@\"&#123; \"\"Message\"\":\"\"Internal Server Error\"\"&#125;\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> context.Response.WriteAsync(json);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                context.Response.Redirect(<span class=\"string\">\"/error\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>上面特別对 API 的错误进行了处理，当请求 <code>http://localhost:5000/api/*</code> 发生错误时，会回传 JSON 格式的错误。而且把 请求MVC发生的错误 ，改用转址的方式转到 <code>http://localhost:5000/error</code></p><h4 id=\"UseDeveloperExceptionPage\"><a href=\"#UseDeveloperExceptionPage\" class=\"headerlink\" title=\"UseDeveloperExceptionPage\"></a>UseDeveloperExceptionPage</h4><p>UseDeveloperExceptionPage 是Asp.Net Core提供的错误信息页面服务.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在开发阶段调用Asp.Net Core提供的错误信息页面</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseExceptionHandler(<span class=\"string\">\"/error\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>异常处理在程序开发中也是一个比较重要的事,一方面可以避免暴露不该暴露的东西,另一方面也在出现问题时,可以及时的定位到异常发生的位置.<br>","more":"</p><h4 id=\"Exception-Filter\"><a href=\"#Exception-Filter\" class=\"headerlink\" title=\"Exception Filter\"></a>Exception Filter</h4><p>Exception Filter 只能够捕捉到Action和Action Filter 所发出的Exception.其他类型的Filter或Middleware产生的Exception,无法通过Exception Filter 拦截.并不太适合用来做全站通用的Exception Handler.</p><p><em>ExceptionFilter.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExceptionFilter</span> : <span class=\"title\">IAsyncExceptionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">OnExceptionAsync</span>(<span class=\"params\">ExceptionContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name 出现异常,异常信息:&#123;context.Exception.Message&#125;</span>&#125;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Task.CompletedTask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><em>Starpup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ExceptionFilter());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS:如果只是注册了一个Exception Filter,那么Filter注册的前后顺序并不重要.只有同类型的Filter才会关系到注册的先后顺序.</p></blockquote><h4 id=\"Exception-Middleware\"><a href=\"#Exception-Middleware\" class=\"headerlink\" title=\"Exception Middleware\"></a>Exception Middleware</h4><p>Middleware 注册的层级可以在Filter的外层,也就是全部的Filter都会经过Middleware.那么只需要在Exception Middleware注册在所有Middleware的最外层,就可以捕捉到全站的异常.</p><p><em>ExceptionMiddleware.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExceptionMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExceptionMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _next(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 出现异常,异常消息:<span class=\"subst\">&#123;ex.Message&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseMiddleware&lt;ExceptionMiddleware&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS:Middleware的注册顺序很关键,越先注册会在越外层.ExceptionMiddleware注册在越外层,捕捉的范围就越大.</p></blockquote><h4 id=\"Exception-Handler\"><a href=\"#Exception-Handler\" class=\"headerlink\" title=\"Exception Handler\"></a>Exception Handler</h4><p>Asp.Net Core有提供Exception Handler 的管道,可以直接调用UseExceptionHandler指定错误页面.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"string\">\"/error\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>ExceptionHandlerOptions</p><p>UseExceptionHandler 除了可以指派错误页面外,也可以自己实现错误发生触发的事件.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"keyword\">new</span> ExceptionHandlerOptions()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExceptionHandler = <span class=\"keyword\">async</span> context =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">bool</span> isApi = Regex.IsMatch(context.Request.Path.Value,<span class=\"string\">\"^/api/\"</span>,RegexOptions.IgnoreCase);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isApi)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    context.Response.ContentType = <span class=\"string\">\"application/json\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> json = <span class=\"string\">@\"&#123; \"\"Message\"\":\"\"Internal Server Error\"\"&#125;\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> context.Response.WriteAsync(json);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                context.Response.Redirect(<span class=\"string\">\"/error\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>上面特別对 API 的错误进行了处理，当请求 <code>http://localhost:5000/api/*</code> 发生错误时，会回传 JSON 格式的错误。而且把 请求MVC发生的错误 ，改用转址的方式转到 <code>http://localhost:5000/error</code></p><h4 id=\"UseDeveloperExceptionPage\"><a href=\"#UseDeveloperExceptionPage\" class=\"headerlink\" title=\"UseDeveloperExceptionPage\"></a>UseDeveloperExceptionPage</h4><p>UseDeveloperExceptionPage 是Asp.Net Core提供的错误信息页面服务.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在开发阶段调用Asp.Net Core提供的错误信息页面</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseExceptionHandler(<span class=\"string\">\"/error\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"Asp.Net Core 模型绑定","date":"2019-06-26T15:46:33.000Z","_content":"#### 概述\nASP.NET Core MVC 的模型绑定会把Http Request 中的数据，以映射的方式对应到相应的参数中去.\n<!--more-->\n#### 模型绑定\n要接收Client传来的数据,可以通过Action的参数接收,如下:\n```cs\nusing Microsft.AspNetCore,Mvc;\n\nnamespace Caty.Web.Controllers\n{\n    public class LoginController : Controller\n    {\n        public IActionResult Index(string username, string password)\n        {\n            return Content($\"username:{username},password:{password}\");\n        }\n    }\n}\n```\n其中username和password就是从Http Requset的数据被绑定的模型参数.\n\n默认的模型绑定会从Http Requset的三个地方取值(优先级由上到下)\n* Form\n\n  通过Http Post的Form取值\n\n* Route\n\n  通过MVC Route URL取值,如: http://localhost:5002/User/caty, 取的值就是caty.\n\n* Query\n\n  通过URL Query参数取值,如: http://localhost:5002/User?username=caty\n\n如果三者都传入,取值的优先顺序为Form>Route>Query\n\n#### 绑定属性\n除了上面提到的三个默认的绑定来源外,还可以通过模型绑定属性从Http Request的其他地方中绑定参数,有以下6个类别:\n\n* \\[FromHeader\\]\n\n  从Http Header取值\n\n* \\[FromForm\\]\n\n  通过Http Post的Form取值\n\n* \\[FromRoute\\]\n\n  通过MVC Route URL取值\n\n* \\[FromQuery\\]\n\n  通过URL Query参数取值\n\n* \\[FromBody\\]\n\n  从Http Body取值,通常用于取Json,Xml.\n\n  Asp.Net Core Mvc默认的序列化是使用Json,如果要使用Xml来进行模型绑定,需要在MVC服务中加入XmlSerializerFormatters.\n\n  *Startup.cs*\n\n  ```cs\n  public void ConfigureServices(IServiceCollection services)\n  {\n      services.AddMvc()\n              .AddXmlSerializerFormatters();\n  }\n  ```\n\n* \\[FromServices\\]\n\n  这不是从Http Requset取值,而是从DI容器取值.DI默认是构造器注入,但Controller可能会因为每个Action用到不一样的Service导致参数过多,所以也可以在Action注入Service.\n\n#### 例子\n\n```cs\npublic class UserController:Controller\n{\n    public IActionResult HeaderSample([FromHeader]string header)\n    {\n        return Content($\"header:{header}\");\n    }\n    public IActionResult FormSample([FromForm]string form)\n    {\n        return Content($\"form:{form}\");\n    }\n    public IActionResult IdSample([FromRoute]string id)\n    {\n        return Content($\"id:{id}\");\n    }\n    public IActionResult QuerySample([FromQuery]string query)\n    {\n        return Content($\"query:{query}\");\n    }\n    public IActionResult DISample([FromServices] ILogger<UserController> logger)\n    {\n        return Content($\"logger is null:{logger == null}\");\n    }\n    public IActionResult BodySample([FromBody]UserModel user)\n    {\n        return Ok(model);\n    }\n}\n\npublic class UserModel\n{\n    public string Code { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n```\n\n#### 模型验证\n\n模型绑定也可以验证模型,需要在模型的属性上面带上 ValidationAttributes.\n\n*UserModel.cs*\n\n```cs\npublic class UserModel\n{\n    [Required]\n    public string Code { get; set; }\n\n    [RegularExpression(@\"\\w+\")]\n    [StringLength(20, MinimumLength = 4)]\n    public string Name { get; set; }\n\n    [EmailAddress]\n    public string Email { get; set; }\n}\n```\n\n*UserController.cs*\n\n```cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace MyWebsite.Controllers\n{\n    public class UserController : Controller\n    {\n        public IActionResult BodySample([FromBody]UserModel model)\n        {\n            if (ModelState.IsValid)\n            {\n                return Ok(model);\n            }\n            return BadRequest(ModelState);\n        }\n    }\n}\n```\n\n#### 自定义模型验证\n\n*UserModel.cs*\n\n```cs\npublic class UserModel\n{\n    [Required]\n    public string Code { get; set; }\n\n    [RegularExpression(@\"\\w+\")]\n    [StringLength(20, MinimumLength = 4)]\n    public string Name { get; set; }\n\n    [EmailAddress]\n    public string Email { get; set; }\n\n    [AgeCheck(18,100)]\n    public DataTime BirthDate { get; set; }\n}\n```\n\n*AgeCheckAttribute.cs*\n\n```cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Caty.Web.Attributes\n{\n    public class AgeCheckAttribute : ValidationAttribute\n    {\n        public int MinimumAge { get; private set; }\n        public int MaximumAge { get; private set; }\n\n        public AgeCheckAttribute(int minimumAge, int maximumAge)\n        {\n            MinimumAge = minimumAge;\n            MaximumAge = maximumAge;\n        }\n\n        protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n        {\n            var date = Convert.ToDateTime(value);\n\n            if (date.AddYears(MinimumAge) > DateTime.Today\n                || date.AddYears(MaximumAge) < DateTime.Today)\n            {\n                return new ValidationResult(GetErrorMessage(validationContext));\n            }\n\n            return ValidationResult.Success;\n        }\n\n        private string GetErrorMessage(ValidationContext validationContext)\n        {\n            // 有带 ErrorMessage 的話优先使用\n            // [AgeCheck(18, 100, ErrorMessage=\"xxx\")] \n            if (!string.IsNullOrEmpty(this.ErrorMessage))\n            {\n                return this.ErrorMessage;\n            }\n\n            // 自定义错误信息\n            return $\"{validationContext.DisplayName} can't be in future\";\n        }\n    }\n}\n```","source":"_posts/Asp-Net-Core-模型绑定.md","raw":"---\ntitle: Asp.Net Core 模型绑定\ndate: 2019-06-26 23:46:33\ncategories: .Net Core\ntags:\n - .Net Core\n - Model\n---\n#### 概述\nASP.NET Core MVC 的模型绑定会把Http Request 中的数据，以映射的方式对应到相应的参数中去.\n<!--more-->\n#### 模型绑定\n要接收Client传来的数据,可以通过Action的参数接收,如下:\n```cs\nusing Microsft.AspNetCore,Mvc;\n\nnamespace Caty.Web.Controllers\n{\n    public class LoginController : Controller\n    {\n        public IActionResult Index(string username, string password)\n        {\n            return Content($\"username:{username},password:{password}\");\n        }\n    }\n}\n```\n其中username和password就是从Http Requset的数据被绑定的模型参数.\n\n默认的模型绑定会从Http Requset的三个地方取值(优先级由上到下)\n* Form\n\n  通过Http Post的Form取值\n\n* Route\n\n  通过MVC Route URL取值,如: http://localhost:5002/User/caty, 取的值就是caty.\n\n* Query\n\n  通过URL Query参数取值,如: http://localhost:5002/User?username=caty\n\n如果三者都传入,取值的优先顺序为Form>Route>Query\n\n#### 绑定属性\n除了上面提到的三个默认的绑定来源外,还可以通过模型绑定属性从Http Request的其他地方中绑定参数,有以下6个类别:\n\n* \\[FromHeader\\]\n\n  从Http Header取值\n\n* \\[FromForm\\]\n\n  通过Http Post的Form取值\n\n* \\[FromRoute\\]\n\n  通过MVC Route URL取值\n\n* \\[FromQuery\\]\n\n  通过URL Query参数取值\n\n* \\[FromBody\\]\n\n  从Http Body取值,通常用于取Json,Xml.\n\n  Asp.Net Core Mvc默认的序列化是使用Json,如果要使用Xml来进行模型绑定,需要在MVC服务中加入XmlSerializerFormatters.\n\n  *Startup.cs*\n\n  ```cs\n  public void ConfigureServices(IServiceCollection services)\n  {\n      services.AddMvc()\n              .AddXmlSerializerFormatters();\n  }\n  ```\n\n* \\[FromServices\\]\n\n  这不是从Http Requset取值,而是从DI容器取值.DI默认是构造器注入,但Controller可能会因为每个Action用到不一样的Service导致参数过多,所以也可以在Action注入Service.\n\n#### 例子\n\n```cs\npublic class UserController:Controller\n{\n    public IActionResult HeaderSample([FromHeader]string header)\n    {\n        return Content($\"header:{header}\");\n    }\n    public IActionResult FormSample([FromForm]string form)\n    {\n        return Content($\"form:{form}\");\n    }\n    public IActionResult IdSample([FromRoute]string id)\n    {\n        return Content($\"id:{id}\");\n    }\n    public IActionResult QuerySample([FromQuery]string query)\n    {\n        return Content($\"query:{query}\");\n    }\n    public IActionResult DISample([FromServices] ILogger<UserController> logger)\n    {\n        return Content($\"logger is null:{logger == null}\");\n    }\n    public IActionResult BodySample([FromBody]UserModel user)\n    {\n        return Ok(model);\n    }\n}\n\npublic class UserModel\n{\n    public string Code { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n```\n\n#### 模型验证\n\n模型绑定也可以验证模型,需要在模型的属性上面带上 ValidationAttributes.\n\n*UserModel.cs*\n\n```cs\npublic class UserModel\n{\n    [Required]\n    public string Code { get; set; }\n\n    [RegularExpression(@\"\\w+\")]\n    [StringLength(20, MinimumLength = 4)]\n    public string Name { get; set; }\n\n    [EmailAddress]\n    public string Email { get; set; }\n}\n```\n\n*UserController.cs*\n\n```cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace MyWebsite.Controllers\n{\n    public class UserController : Controller\n    {\n        public IActionResult BodySample([FromBody]UserModel model)\n        {\n            if (ModelState.IsValid)\n            {\n                return Ok(model);\n            }\n            return BadRequest(ModelState);\n        }\n    }\n}\n```\n\n#### 自定义模型验证\n\n*UserModel.cs*\n\n```cs\npublic class UserModel\n{\n    [Required]\n    public string Code { get; set; }\n\n    [RegularExpression(@\"\\w+\")]\n    [StringLength(20, MinimumLength = 4)]\n    public string Name { get; set; }\n\n    [EmailAddress]\n    public string Email { get; set; }\n\n    [AgeCheck(18,100)]\n    public DataTime BirthDate { get; set; }\n}\n```\n\n*AgeCheckAttribute.cs*\n\n```cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Caty.Web.Attributes\n{\n    public class AgeCheckAttribute : ValidationAttribute\n    {\n        public int MinimumAge { get; private set; }\n        public int MaximumAge { get; private set; }\n\n        public AgeCheckAttribute(int minimumAge, int maximumAge)\n        {\n            MinimumAge = minimumAge;\n            MaximumAge = maximumAge;\n        }\n\n        protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n        {\n            var date = Convert.ToDateTime(value);\n\n            if (date.AddYears(MinimumAge) > DateTime.Today\n                || date.AddYears(MaximumAge) < DateTime.Today)\n            {\n                return new ValidationResult(GetErrorMessage(validationContext));\n            }\n\n            return ValidationResult.Success;\n        }\n\n        private string GetErrorMessage(ValidationContext validationContext)\n        {\n            // 有带 ErrorMessage 的話优先使用\n            // [AgeCheck(18, 100, ErrorMessage=\"xxx\")] \n            if (!string.IsNullOrEmpty(this.ErrorMessage))\n            {\n                return this.ErrorMessage;\n            }\n\n            // 自定义错误信息\n            return $\"{validationContext.DisplayName} can't be in future\";\n        }\n    }\n}\n```","slug":"Asp-Net-Core-模型绑定","published":1,"updated":"2019-07-09T15:50:42.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1y8000atkuitegndqma","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>ASP.NET Core MVC 的模型绑定会把Http Request 中的数据，以映射的方式对应到相应的参数中去.<br><a id=\"more\"></a></p><h4 id=\"模型绑定\"><a href=\"#模型绑定\" class=\"headerlink\" title=\"模型绑定\"></a>模型绑定</h4><p>要接收Client传来的数据,可以通过Action的参数接收,如下:<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsft.AspNetCore,Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"><span class=\"keyword\">string</span> username, <span class=\"keyword\">string</span> password</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"username:<span class=\"subst\">&#123;username&#125;</span>,password:<span class=\"subst\">&#123;password&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中username和password就是从Http Requset的数据被绑定的模型参数.</p><p>默认的模型绑定会从Http Requset的三个地方取值(优先级由上到下)</p><ul><li><p>Form</p><p>通过Http Post的Form取值</p></li><li><p>Route</p><p>通过MVC Route URL取值,如: <a href=\"http://localhost:5002/User/caty\" target=\"_blank\" rel=\"noopener\">http://localhost:5002/User/caty</a>, 取的值就是caty.</p></li><li><p>Query</p><p>通过URL Query参数取值,如: <a href=\"http://localhost:5002/User?username=caty\" target=\"_blank\" rel=\"noopener\">http://localhost:5002/User?username=caty</a></p></li></ul><p>如果三者都传入,取值的优先顺序为Form&gt;Route&gt;Query</p><h4 id=\"绑定属性\"><a href=\"#绑定属性\" class=\"headerlink\" title=\"绑定属性\"></a>绑定属性</h4><p>除了上面提到的三个默认的绑定来源外,还可以通过模型绑定属性从Http Request的其他地方中绑定参数,有以下6个类别:</p><ul><li><p>[FromHeader]</p><p>从Http Header取值</p></li><li><p>[FromForm]</p><p>通过Http Post的Form取值</p></li><li><p>[FromRoute]</p><p>通过MVC Route URL取值</p></li><li><p>[FromQuery]</p><p>通过URL Query参数取值</p></li><li><p>[FromBody]</p><p>从Http Body取值,通常用于取Json,Xml.</p><p>Asp.Net Core Mvc默认的序列化是使用Json,如果要使用Xml来进行模型绑定,需要在MVC服务中加入XmlSerializerFormatters.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc()</span><br><span class=\"line\">            .AddXmlSerializerFormatters();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>[FromServices]</p><p>这不是从Http Requset取值,而是从DI容器取值.DI默认是构造器注入,但Controller可能会因为每个Action用到不一样的Service导致参数过多,所以也可以在Action注入Service.</p></li></ul><h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span>:<span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">HeaderSample</span>(<span class=\"params\">[FromHeader]<span class=\"keyword\">string</span> header</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"header:<span class=\"subst\">&#123;header&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">FormSample</span>(<span class=\"params\">[FromForm]<span class=\"keyword\">string</span> form</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"form:<span class=\"subst\">&#123;form&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">IdSample</span>(<span class=\"params\">[FromRoute]<span class=\"keyword\">string</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"id:<span class=\"subst\">&#123;id&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">QuerySample</span>(<span class=\"params\">[FromQuery]<span class=\"keyword\">string</span> query</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"query:<span class=\"subst\">&#123;query&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">DISample</span>(<span class=\"params\">[FromServices] ILogger&lt;UserController&gt; logger</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"logger is null:<span class=\"subst\">&#123;logger == <span class=\"literal\">null</span>&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">BodySample</span>(<span class=\"params\">[FromBody]UserModel user</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(model);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"模型验证\"><a href=\"#模型验证\" class=\"headerlink\" title=\"模型验证\"></a>模型验证</h4><p>模型绑定也可以验证模型,需要在模型的属性上面带上 ValidationAttributes.</p><p><em>UserModel.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">RegularExpression(@<span class=\"meta-string\">\"\\w+\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">StringLength(20, MinimumLength = 4)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">EmailAddress</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><em>UserController.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">MyWebsite.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">BodySample</span>(<span class=\"params\">[FromBody]UserModel model</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ModelState.IsValid)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Ok(model);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> BadRequest(ModelState);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"自定义模型验证\"><a href=\"#自定义模型验证\" class=\"headerlink\" title=\"自定义模型验证\"></a>自定义模型验证</h4><p><em>UserModel.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">RegularExpression(@<span class=\"meta-string\">\"\\w+\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">StringLength(20, MinimumLength = 4)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">EmailAddress</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">AgeCheck(18,100)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataTime BirthDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><em>AgeCheckAttribute.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel.DataAnnotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Attributes</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AgeCheckAttribute</span> : <span class=\"title\">ValidationAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinimumAge &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MaximumAge &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AgeCheckAttribute</span>(<span class=\"params\"><span class=\"keyword\">int</span> minimumAge, <span class=\"keyword\">int</span> maximumAge</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            MinimumAge = minimumAge;</span><br><span class=\"line\">            MaximumAge = maximumAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> ValidationResult <span class=\"title\">IsValid</span>(<span class=\"params\"><span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> date = Convert.ToDateTime(<span class=\"keyword\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (date.AddYears(MinimumAge) &gt; DateTime.Today</span><br><span class=\"line\">                || date.AddYears(MaximumAge) &lt; DateTime.Today)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ValidationResult(GetErrorMessage(validationContext));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ValidationResult.Success;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetErrorMessage</span>(<span class=\"params\">ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 有带 ErrorMessage 的話优先使用</span></span><br><span class=\"line\">            <span class=\"comment\">// [AgeCheck(18, 100, ErrorMessage=\"xxx\")] </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(<span class=\"keyword\">this</span>.ErrorMessage))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ErrorMessage;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 自定义错误信息</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">$\"<span class=\"subst\">&#123;validationContext.DisplayName&#125;</span> can't be in future\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>ASP.NET Core MVC 的模型绑定会把Http Request 中的数据，以映射的方式对应到相应的参数中去.<br>","more":"</p><h4 id=\"模型绑定\"><a href=\"#模型绑定\" class=\"headerlink\" title=\"模型绑定\"></a>模型绑定</h4><p>要接收Client传来的数据,可以通过Action的参数接收,如下:<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsft.AspNetCore,Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"><span class=\"keyword\">string</span> username, <span class=\"keyword\">string</span> password</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"username:<span class=\"subst\">&#123;username&#125;</span>,password:<span class=\"subst\">&#123;password&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中username和password就是从Http Requset的数据被绑定的模型参数.</p><p>默认的模型绑定会从Http Requset的三个地方取值(优先级由上到下)</p><ul><li><p>Form</p><p>通过Http Post的Form取值</p></li><li><p>Route</p><p>通过MVC Route URL取值,如: <a href=\"http://localhost:5002/User/caty\" target=\"_blank\" rel=\"noopener\">http://localhost:5002/User/caty</a>, 取的值就是caty.</p></li><li><p>Query</p><p>通过URL Query参数取值,如: <a href=\"http://localhost:5002/User?username=caty\" target=\"_blank\" rel=\"noopener\">http://localhost:5002/User?username=caty</a></p></li></ul><p>如果三者都传入,取值的优先顺序为Form&gt;Route&gt;Query</p><h4 id=\"绑定属性\"><a href=\"#绑定属性\" class=\"headerlink\" title=\"绑定属性\"></a>绑定属性</h4><p>除了上面提到的三个默认的绑定来源外,还可以通过模型绑定属性从Http Request的其他地方中绑定参数,有以下6个类别:</p><ul><li><p>[FromHeader]</p><p>从Http Header取值</p></li><li><p>[FromForm]</p><p>通过Http Post的Form取值</p></li><li><p>[FromRoute]</p><p>通过MVC Route URL取值</p></li><li><p>[FromQuery]</p><p>通过URL Query参数取值</p></li><li><p>[FromBody]</p><p>从Http Body取值,通常用于取Json,Xml.</p><p>Asp.Net Core Mvc默认的序列化是使用Json,如果要使用Xml来进行模型绑定,需要在MVC服务中加入XmlSerializerFormatters.</p><p><em>Startup.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc()</span><br><span class=\"line\">            .AddXmlSerializerFormatters();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>[FromServices]</p><p>这不是从Http Requset取值,而是从DI容器取值.DI默认是构造器注入,但Controller可能会因为每个Action用到不一样的Service导致参数过多,所以也可以在Action注入Service.</p></li></ul><h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span>:<span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">HeaderSample</span>(<span class=\"params\">[FromHeader]<span class=\"keyword\">string</span> header</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"header:<span class=\"subst\">&#123;header&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">FormSample</span>(<span class=\"params\">[FromForm]<span class=\"keyword\">string</span> form</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"form:<span class=\"subst\">&#123;form&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">IdSample</span>(<span class=\"params\">[FromRoute]<span class=\"keyword\">string</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"id:<span class=\"subst\">&#123;id&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">QuerySample</span>(<span class=\"params\">[FromQuery]<span class=\"keyword\">string</span> query</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"query:<span class=\"subst\">&#123;query&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">DISample</span>(<span class=\"params\">[FromServices] ILogger&lt;UserController&gt; logger</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(<span class=\"string\">$\"logger is null:<span class=\"subst\">&#123;logger == <span class=\"literal\">null</span>&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">BodySample</span>(<span class=\"params\">[FromBody]UserModel user</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(model);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"模型验证\"><a href=\"#模型验证\" class=\"headerlink\" title=\"模型验证\"></a>模型验证</h4><p>模型绑定也可以验证模型,需要在模型的属性上面带上 ValidationAttributes.</p><p><em>UserModel.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">RegularExpression(@<span class=\"meta-string\">\"\\w+\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">StringLength(20, MinimumLength = 4)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">EmailAddress</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><em>UserController.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">MyWebsite.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">BodySample</span>(<span class=\"params\">[FromBody]UserModel model</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ModelState.IsValid)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Ok(model);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> BadRequest(ModelState);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"自定义模型验证\"><a href=\"#自定义模型验证\" class=\"headerlink\" title=\"自定义模型验证\"></a>自定义模型验证</h4><p><em>UserModel.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Required</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">RegularExpression(@<span class=\"meta-string\">\"\\w+\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">StringLength(20, MinimumLength = 4)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">EmailAddress</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Email &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">AgeCheck(18,100)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataTime BirthDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><em>AgeCheckAttribute.cs</em></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel.DataAnnotations;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Attributes</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AgeCheckAttribute</span> : <span class=\"title\">ValidationAttribute</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinimumAge &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MaximumAge &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AgeCheckAttribute</span>(<span class=\"params\"><span class=\"keyword\">int</span> minimumAge, <span class=\"keyword\">int</span> maximumAge</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            MinimumAge = minimumAge;</span><br><span class=\"line\">            MaximumAge = maximumAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> ValidationResult <span class=\"title\">IsValid</span>(<span class=\"params\"><span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> date = Convert.ToDateTime(<span class=\"keyword\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (date.AddYears(MinimumAge) &gt; DateTime.Today</span><br><span class=\"line\">                || date.AddYears(MaximumAge) &lt; DateTime.Today)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ValidationResult(GetErrorMessage(validationContext));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ValidationResult.Success;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetErrorMessage</span>(<span class=\"params\">ValidationContext validationContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 有带 ErrorMessage 的話优先使用</span></span><br><span class=\"line\">            <span class=\"comment\">// [AgeCheck(18, 100, ErrorMessage=\"xxx\")] </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(<span class=\"keyword\">this</span>.ErrorMessage))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ErrorMessage;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 自定义错误信息</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">$\"<span class=\"subst\">&#123;validationContext.DisplayName&#125;</span> can't be in future\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"Asp.Net Core中使用Session","date":"2018-03-10T16:18:04.000Z","_content":"##### 添加Session\n在你的项目上基于NuGet添加：Microsoft.AspNetCore.Session。\n<!--more-->\n\n##### 修改Startup.cs\n在startup.cs找到方法ConfigureServices(IServiceCollection services) 注入Session(这个地方是Asp.net Core pipeline):services.AddSession();\n\n接下来我们要告诉Asp.net Core使用内存存储Session数据，在Configure(IApplicationBuilder app,...)中添加代码:app.UseSession();\n\n##### Session\n1. 在MVC Controller里使用HttpContext.Session\n```cs\nusing Microsoft.AspNetCore.Http;\n\npublic class HomeController:Controller\n{\n    public IActionResult Index()\n    {\n        HttpContext.Session.SetString(\"code\",\"123456\");\n        return View();  \n    }\n\n    public IActionResult About()\n    {\n        ViewBag.Code=HttpContext.Session.GetString(\"code\");\n        return View();\n    }\n}\n```\n\n2. 如果不是在Controller里，你可以注入IHttpContextAccessor\n```cs\npublic class SomeOtherClass\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n    private ISession _session=> _httpContextAccessor.HttpContext.Session;\n\n    public SomeOtherClass(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor=httpContextAccessor;\n    }\n\n    public void Set()\n    {\n        _session.SetString(\"code\",\"123456\");\n    }\n    \n    public void Get()\n    {\n        string code = _session.GetString(\"code\");\n    }\n}\n```\n\n##### 存储复杂对象\n存储对象时把对象序列化成一个json字符串存储。\n```cs\npublic static class SessionExtensions\n{\n    public static void SetObjectAsJson(this ISession session, string key, object value)\n    {\n        session.SetString(key, JsonConvert.SerializeObject(value));\n    }\n\n    public static T GetObjectFromJson<T>(this ISession session, string key)\n    {\n        var value = session.GetString(key);\n\n        return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value);\n    }\n}\n```\n\n```cs\nvar myComplexObject = new MyClass();\nHttpContext.Session.SetObjectAsJson(\"Test\", myComplexObject);\n\nvar myComplexObject = HttpContext.Session.GetObjectFromJson<MyClass>(\"Test\");\n```\n\n##### 使用SQL Server或Redis存储\n1、SQL Server\n\n添加引用  \"Microsoft.Extensions.Caching.SqlServer\": \"1.0.0\"\n\n注入：\n```cs\n// Microsoft SQL Server implementation of IDistributedCache.\n// Note that this would require setting up the session state database.\nservices.AddSqlServerCache(o =>\n{\n    o.ConnectionString = \"Server=.;Database=ASPNET5SessionState;Trusted_Connection=True;\";\n    o.SchemaName = \"dbo\";\n    o.TableName = \"Sessions\";\n});\n```\n\n2、Redis\n\n添加引用   \"Microsoft.Extensions.Caching.Redis\": \"1.0.0\"\n\n注入：\n```cs\n// Redis implementation of IDistributedCache.\n// This will override any previously registered IDistributedCache service.\nservices.AddSingleton<IDistributedCache, RedisCache>();\n```","source":"_posts/Asp-Net-Core中使用Session.md","raw":"---\ntitle: Asp.Net Core中使用Session\ndate: 2018-03-11 00:18:04\ncategories: .Net Core\ntags:\n - .Net Core\n - Session\n---\n##### 添加Session\n在你的项目上基于NuGet添加：Microsoft.AspNetCore.Session。\n<!--more-->\n\n##### 修改Startup.cs\n在startup.cs找到方法ConfigureServices(IServiceCollection services) 注入Session(这个地方是Asp.net Core pipeline):services.AddSession();\n\n接下来我们要告诉Asp.net Core使用内存存储Session数据，在Configure(IApplicationBuilder app,...)中添加代码:app.UseSession();\n\n##### Session\n1. 在MVC Controller里使用HttpContext.Session\n```cs\nusing Microsoft.AspNetCore.Http;\n\npublic class HomeController:Controller\n{\n    public IActionResult Index()\n    {\n        HttpContext.Session.SetString(\"code\",\"123456\");\n        return View();  \n    }\n\n    public IActionResult About()\n    {\n        ViewBag.Code=HttpContext.Session.GetString(\"code\");\n        return View();\n    }\n}\n```\n\n2. 如果不是在Controller里，你可以注入IHttpContextAccessor\n```cs\npublic class SomeOtherClass\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n    private ISession _session=> _httpContextAccessor.HttpContext.Session;\n\n    public SomeOtherClass(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor=httpContextAccessor;\n    }\n\n    public void Set()\n    {\n        _session.SetString(\"code\",\"123456\");\n    }\n    \n    public void Get()\n    {\n        string code = _session.GetString(\"code\");\n    }\n}\n```\n\n##### 存储复杂对象\n存储对象时把对象序列化成一个json字符串存储。\n```cs\npublic static class SessionExtensions\n{\n    public static void SetObjectAsJson(this ISession session, string key, object value)\n    {\n        session.SetString(key, JsonConvert.SerializeObject(value));\n    }\n\n    public static T GetObjectFromJson<T>(this ISession session, string key)\n    {\n        var value = session.GetString(key);\n\n        return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value);\n    }\n}\n```\n\n```cs\nvar myComplexObject = new MyClass();\nHttpContext.Session.SetObjectAsJson(\"Test\", myComplexObject);\n\nvar myComplexObject = HttpContext.Session.GetObjectFromJson<MyClass>(\"Test\");\n```\n\n##### 使用SQL Server或Redis存储\n1、SQL Server\n\n添加引用  \"Microsoft.Extensions.Caching.SqlServer\": \"1.0.0\"\n\n注入：\n```cs\n// Microsoft SQL Server implementation of IDistributedCache.\n// Note that this would require setting up the session state database.\nservices.AddSqlServerCache(o =>\n{\n    o.ConnectionString = \"Server=.;Database=ASPNET5SessionState;Trusted_Connection=True;\";\n    o.SchemaName = \"dbo\";\n    o.TableName = \"Sessions\";\n});\n```\n\n2、Redis\n\n添加引用   \"Microsoft.Extensions.Caching.Redis\": \"1.0.0\"\n\n注入：\n```cs\n// Redis implementation of IDistributedCache.\n// This will override any previously registered IDistributedCache service.\nservices.AddSingleton<IDistributedCache, RedisCache>();\n```","slug":"Asp-Net-Core中使用Session","published":1,"updated":"2018-06-05T16:19:12.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1y9000btkuidqild4s4","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"添加Session\"><a href=\"#添加Session\" class=\"headerlink\" title=\"添加Session\"></a>添加Session</h5><p>在你的项目上基于NuGet添加：Microsoft.AspNetCore.Session。<br><a id=\"more\"></a></p><h5 id=\"修改Startup-cs\"><a href=\"#修改Startup-cs\" class=\"headerlink\" title=\"修改Startup.cs\"></a>修改Startup.cs</h5><p>在startup.cs找到方法ConfigureServices(IServiceCollection services) 注入Session(这个地方是Asp.net Core pipeline):services.AddSession();</p><p>接下来我们要告诉Asp.net Core使用内存存储Session数据，在Configure(IApplicationBuilder app,…)中添加代码:app.UseSession();</p><h5 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h5><ol><li><p>在MVC Controller里使用HttpContext.Session</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span>:<span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        HttpContext.Session.SetString(<span class=\"string\">\"code\"</span>,<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">About</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ViewBag.Code=HttpContext.Session.GetString(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果不是在Controller里，你可以注入IHttpContextAccessor</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SomeOtherClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISession _session=&gt; _httpContextAccessor.HttpContext.Session;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SomeOtherClass</span>(<span class=\"params\">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _httpContextAccessor=httpContextAccessor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Set</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _session.SetString(<span class=\"string\">\"code\"</span>,<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> code = _session.GetString(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id=\"存储复杂对象\"><a href=\"#存储复杂对象\" class=\"headerlink\" title=\"存储复杂对象\"></a>存储复杂对象</h5><p>存储对象时把对象序列化成一个json字符串存储。<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetObjectAsJson</span>(<span class=\"params\"><span class=\"keyword\">this</span> ISession session, <span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        session.SetString(key, JsonConvert.SerializeObject(<span class=\"keyword\">value</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T GetObjectFromJson&lt;T&gt;(<span class=\"keyword\">this</span> ISession session, <span class=\"keyword\">string</span> key)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = session.GetString(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"keyword\">default</span>(T) : JsonConvert.DeserializeObject&lt;T&gt;(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myComplexObject = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">HttpContext.Session.SetObjectAsJson(<span class=\"string\">\"Test\"</span>, myComplexObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myComplexObject = HttpContext.Session.GetObjectFromJson&lt;MyClass&gt;(<span class=\"string\">\"Test\"</span>);</span><br></pre></td></tr></table></figure><h5 id=\"使用SQL-Server或Redis存储\"><a href=\"#使用SQL-Server或Redis存储\" class=\"headerlink\" title=\"使用SQL Server或Redis存储\"></a>使用SQL Server或Redis存储</h5><p>1、SQL Server</p><p>添加引用 “Microsoft.Extensions.Caching.SqlServer”: “1.0.0”</p><p>注入：<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Microsoft SQL Server implementation of IDistributedCache.</span></span><br><span class=\"line\"><span class=\"comment\">// Note that this would require setting up the session state database.</span></span><br><span class=\"line\">services.AddSqlServerCache(o =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    o.ConnectionString = <span class=\"string\">\"Server=.;Database=ASPNET5SessionState;Trusted_Connection=True;\"</span>;</span><br><span class=\"line\">    o.SchemaName = <span class=\"string\">\"dbo\"</span>;</span><br><span class=\"line\">    o.TableName = <span class=\"string\">\"Sessions\"</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>2、Redis</p><p>添加引用 “Microsoft.Extensions.Caching.Redis”: “1.0.0”</p><p>注入：<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Redis implementation of IDistributedCache.</span></span><br><span class=\"line\"><span class=\"comment\">// This will override any previously registered IDistributedCache service.</span></span><br><span class=\"line\">services.AddSingleton&lt;IDistributedCache, RedisCache&gt;();</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"添加Session\"><a href=\"#添加Session\" class=\"headerlink\" title=\"添加Session\"></a>添加Session</h5><p>在你的项目上基于NuGet添加：Microsoft.AspNetCore.Session。<br>","more":"</p><h5 id=\"修改Startup-cs\"><a href=\"#修改Startup-cs\" class=\"headerlink\" title=\"修改Startup.cs\"></a>修改Startup.cs</h5><p>在startup.cs找到方法ConfigureServices(IServiceCollection services) 注入Session(这个地方是Asp.net Core pipeline):services.AddSession();</p><p>接下来我们要告诉Asp.net Core使用内存存储Session数据，在Configure(IApplicationBuilder app,…)中添加代码:app.UseSession();</p><h5 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h5><ol><li><p>在MVC Controller里使用HttpContext.Session</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span>:<span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        HttpContext.Session.SetString(<span class=\"string\">\"code\"</span>,<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">About</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ViewBag.Code=HttpContext.Session.GetString(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果不是在Controller里，你可以注入IHttpContextAccessor</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SomeOtherClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISession _session=&gt; _httpContextAccessor.HttpContext.Session;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SomeOtherClass</span>(<span class=\"params\">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _httpContextAccessor=httpContextAccessor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Set</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _session.SetString(<span class=\"string\">\"code\"</span>,<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> code = _session.GetString(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id=\"存储复杂对象\"><a href=\"#存储复杂对象\" class=\"headerlink\" title=\"存储复杂对象\"></a>存储复杂对象</h5><p>存储对象时把对象序列化成一个json字符串存储。<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetObjectAsJson</span>(<span class=\"params\"><span class=\"keyword\">this</span> ISession session, <span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        session.SetString(key, JsonConvert.SerializeObject(<span class=\"keyword\">value</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T GetObjectFromJson&lt;T&gt;(<span class=\"keyword\">this</span> ISession session, <span class=\"keyword\">string</span> key)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = session.GetString(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"keyword\">default</span>(T) : JsonConvert.DeserializeObject&lt;T&gt;(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myComplexObject = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">HttpContext.Session.SetObjectAsJson(<span class=\"string\">\"Test\"</span>, myComplexObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myComplexObject = HttpContext.Session.GetObjectFromJson&lt;MyClass&gt;(<span class=\"string\">\"Test\"</span>);</span><br></pre></td></tr></table></figure><h5 id=\"使用SQL-Server或Redis存储\"><a href=\"#使用SQL-Server或Redis存储\" class=\"headerlink\" title=\"使用SQL Server或Redis存储\"></a>使用SQL Server或Redis存储</h5><p>1、SQL Server</p><p>添加引用 “Microsoft.Extensions.Caching.SqlServer”: “1.0.0”</p><p>注入：<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Microsoft SQL Server implementation of IDistributedCache.</span></span><br><span class=\"line\"><span class=\"comment\">// Note that this would require setting up the session state database.</span></span><br><span class=\"line\">services.AddSqlServerCache(o =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    o.ConnectionString = <span class=\"string\">\"Server=.;Database=ASPNET5SessionState;Trusted_Connection=True;\"</span>;</span><br><span class=\"line\">    o.SchemaName = <span class=\"string\">\"dbo\"</span>;</span><br><span class=\"line\">    o.TableName = <span class=\"string\">\"Sessions\"</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>2、Redis</p><p>添加引用 “Microsoft.Extensions.Caching.Redis”: “1.0.0”</p><p>注入：<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Redis implementation of IDistributedCache.</span></span><br><span class=\"line\"><span class=\"comment\">// This will override any previously registered IDistributedCache service.</span></span><br><span class=\"line\">services.AddSingleton&lt;IDistributedCache, RedisCache&gt;();</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"Asp.Net Core 过滤器","date":"2019-07-03T15:52:10.000Z","_content":"#### Filter 简介\nFilter的作用是在Action执行前或执行后做一些加工处理.跟中间件类似,但执行的顺序略有不同.把Filter用好了,可以减少代码量和提高执行效率.\n<!--more-->\n##### Filter 分类\n* Authorization Filter\n\n  优先级最高,常用于验证请求是否合法,不合格则跳过后续处理\n\n* Resource Filter\n\n  第二优先级,在授权之后,模型绑定之前执行,常用于需要对模型加工处理.\n\n* Action Filter\n\n  与Resource Filter类似,但不经过模型绑定\n\n* Exception Filter\n\n  异常处理的Filter\n\n* Result Filter\n\n  在Action完成后,最后会经过的Filter.\n\n##### Filter 运作方式\n\n每一个Request都会先经过已注册的中间件才会执行过滤器.\n\n顺序一般为:Request -> 中间件 -> Authorization Filters -> Resource Filters -> 模型绑定 -> Action Filters -> Action -> Action Filters -> Result Filters -> Resource Filters -> 中间件 -> Response\n\n#### 创建Filter\n\n*Authorization Filter.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace Caty.Web.Filters\n{\n    public class AuthorizationFilter : IAuthorizationFilter, IAsyncAuthorizationFilter\n    {\n        // 同步\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n        // 异步\n        public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n        {\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n    }\n}\n```\n*Resource Filter.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace Caty.Web.Filters\n{\n    public class ResourceFilter : IResourceFilter,IAsyncResourceFilter\n    {\n        // 同步\n        public void OnResourceExecuting(ResourceExecutingFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n\n        public void OnResourceExecuted(ResourceExecutedFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 退出.\\r\\n\");\n        }\n        // 异步\n        public async Task OnResourceExecutionAsync(AuthorizationFilterContext context)\n        {\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n            await next();\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 退出.\\r\\n\");\n        }\n    }\n}\n```\nAction Filter, Result Filter,Exception Filter 与 Resource Filter 类似,只是分别继承了不同的接口,\n* Action Filter 同步继承 IActionFilter,异步继承IAsyncActionFilter;\n* Result Filter 同步继承IResultFilter,异步继承IAsyncResultFilter;\n* Exception Filter 同步继承IExceptionFilter ,异步继承IAsyncExceptionFilter.\n\n#### 注册 Filter\n\n有两种注册方式,一种是全局注册,另一种是用\\[Attribute\\]来区域注册,只用于特定的控制器或接口.\n\n##### 全局注册\n\nStartup.cs\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config => \n        {\n            config.Filters.Add(new ResultFilter());\n            config.Filters.Add(new ExceptionFilter());\n            config.Filters.Add(new ResourceFilter());\n        });\n    }\n}\n```\n\n##### 区域注册\n\n在控制器或者接口上面加上\\[TypeFilter(type)\\]就可以区域注册Filter.\n\n```cs\nnamespace Caty.Web.Controllers\n{\n    [TypeFilter(typeof(AuthorizationFilter))]\n    public class HomeController : Controller\n    {\n        [TypeFilter(typeof(ActionFilter))]\n        public void Index()\n        {\n            Response.WriteAsync(\"Hello World! \\r\\n\");\n        }\n        \n        [TypeFilter(typeof(ActionFilter))]\n        public void Error()\n        {\n            throw new System.Exception(\"Error\");\n        }\n    }\n}\n```\n\n如果Filter继承Attribute,则可以用\\[Attribute\\]进行Filter的注册.\n\n```cs\npublic class AuthorizationFilter : Attribute, IAuthorizationFilter\n{\n    // ...\n}\npublic class ActionFilter : Attribute, IActionFilter\n{\n    // ...\n}\n```\n\n```cs\nnamespace Caty.Web.Controllers\n{\n    [AuthorizationFilter]\n    public class HomeController : Controller\n    {\n        [ActionFilter]\n        public void Index()\n        {\n            Response.WriteAsync(\"Hello World! \\r\\n\");\n        }\n        \n        [ActionFilter]\n        public void Error()\n        {\n            throw new System.Exception(\"Error\");\n        }\n    }\n}\n```\n\n#### 执行顺序\n\n预设注册同类型的Filter是以先进后出的方式处理封包,注册层级也会影响执行顺序.\n\nGlobal->Controller->Action\n\n也可以通过实现IOrderFilter修改执行顺序.\n\n```cs\npublic class ActionFilter : Attribute, IActionFilter, IOrderedFilter\n{\n    public string Name { get; set; }\n\n    public int Order { get; set; } = 0;\n\n    public void OnActionExecuting(ActionExecutingContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name}({Name}) 进入. \\r\\n\");\n    }\n    public void OnActionExecuted(ActionExecutedContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name}({Name}) 退出. \\r\\n\");\n    }\n}\n```\n\n在注册Filter时带上Order,数值越小优先级越高.\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config =>\n        {\n            config.Filters.Add(new ActionFilter() { Name = \"Global\", Order = 3 });\n        });\n    }\n}\n```\n","source":"_posts/Asp-Net-Core-过滤器.md","raw":"---\ntitle: Asp.Net Core 过滤器\ndate: 2019-07-03 23:52:10\ncategories: .Net Core\ntags:\n - .Net Core\n - Filter\n---\n#### Filter 简介\nFilter的作用是在Action执行前或执行后做一些加工处理.跟中间件类似,但执行的顺序略有不同.把Filter用好了,可以减少代码量和提高执行效率.\n<!--more-->\n##### Filter 分类\n* Authorization Filter\n\n  优先级最高,常用于验证请求是否合法,不合格则跳过后续处理\n\n* Resource Filter\n\n  第二优先级,在授权之后,模型绑定之前执行,常用于需要对模型加工处理.\n\n* Action Filter\n\n  与Resource Filter类似,但不经过模型绑定\n\n* Exception Filter\n\n  异常处理的Filter\n\n* Result Filter\n\n  在Action完成后,最后会经过的Filter.\n\n##### Filter 运作方式\n\n每一个Request都会先经过已注册的中间件才会执行过滤器.\n\n顺序一般为:Request -> 中间件 -> Authorization Filters -> Resource Filters -> 模型绑定 -> Action Filters -> Action -> Action Filters -> Result Filters -> Resource Filters -> 中间件 -> Response\n\n#### 创建Filter\n\n*Authorization Filter.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace Caty.Web.Filters\n{\n    public class AuthorizationFilter : IAuthorizationFilter, IAsyncAuthorizationFilter\n    {\n        // 同步\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n        // 异步\n        public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n        {\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n    }\n}\n```\n*Resource Filter.cs*\n```cs\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace Caty.Web.Filters\n{\n    public class ResourceFilter : IResourceFilter,IAsyncResourceFilter\n    {\n        // 同步\n        public void OnResourceExecuting(ResourceExecutingFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n        }\n\n        public void OnResourceExecuted(ResourceExecutedFilterContext context)\n        {\n            context.HttpContext.Response.WriteAsync($\"{GetType().Name} 退出.\\r\\n\");\n        }\n        // 异步\n        public async Task OnResourceExecutionAsync(AuthorizationFilterContext context)\n        {\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 进入.\\r\\n\");\n            await next();\n            await context.HttpContext.Response.WriteAsync($\"{GetType().Name} 退出.\\r\\n\");\n        }\n    }\n}\n```\nAction Filter, Result Filter,Exception Filter 与 Resource Filter 类似,只是分别继承了不同的接口,\n* Action Filter 同步继承 IActionFilter,异步继承IAsyncActionFilter;\n* Result Filter 同步继承IResultFilter,异步继承IAsyncResultFilter;\n* Exception Filter 同步继承IExceptionFilter ,异步继承IAsyncExceptionFilter.\n\n#### 注册 Filter\n\n有两种注册方式,一种是全局注册,另一种是用\\[Attribute\\]来区域注册,只用于特定的控制器或接口.\n\n##### 全局注册\n\nStartup.cs\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config => \n        {\n            config.Filters.Add(new ResultFilter());\n            config.Filters.Add(new ExceptionFilter());\n            config.Filters.Add(new ResourceFilter());\n        });\n    }\n}\n```\n\n##### 区域注册\n\n在控制器或者接口上面加上\\[TypeFilter(type)\\]就可以区域注册Filter.\n\n```cs\nnamespace Caty.Web.Controllers\n{\n    [TypeFilter(typeof(AuthorizationFilter))]\n    public class HomeController : Controller\n    {\n        [TypeFilter(typeof(ActionFilter))]\n        public void Index()\n        {\n            Response.WriteAsync(\"Hello World! \\r\\n\");\n        }\n        \n        [TypeFilter(typeof(ActionFilter))]\n        public void Error()\n        {\n            throw new System.Exception(\"Error\");\n        }\n    }\n}\n```\n\n如果Filter继承Attribute,则可以用\\[Attribute\\]进行Filter的注册.\n\n```cs\npublic class AuthorizationFilter : Attribute, IAuthorizationFilter\n{\n    // ...\n}\npublic class ActionFilter : Attribute, IActionFilter\n{\n    // ...\n}\n```\n\n```cs\nnamespace Caty.Web.Controllers\n{\n    [AuthorizationFilter]\n    public class HomeController : Controller\n    {\n        [ActionFilter]\n        public void Index()\n        {\n            Response.WriteAsync(\"Hello World! \\r\\n\");\n        }\n        \n        [ActionFilter]\n        public void Error()\n        {\n            throw new System.Exception(\"Error\");\n        }\n    }\n}\n```\n\n#### 执行顺序\n\n预设注册同类型的Filter是以先进后出的方式处理封包,注册层级也会影响执行顺序.\n\nGlobal->Controller->Action\n\n也可以通过实现IOrderFilter修改执行顺序.\n\n```cs\npublic class ActionFilter : Attribute, IActionFilter, IOrderedFilter\n{\n    public string Name { get; set; }\n\n    public int Order { get; set; } = 0;\n\n    public void OnActionExecuting(ActionExecutingContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name}({Name}) 进入. \\r\\n\");\n    }\n    public void OnActionExecuted(ActionExecutedContext context)\n    {\n        context.HttpContext.Response.WriteAsync($\"{GetType().Name}({Name}) 退出. \\r\\n\");\n    }\n}\n```\n\n在注册Filter时带上Order,数值越小优先级越高.\n\n```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc(config =>\n        {\n            config.Filters.Add(new ActionFilter() { Name = \"Global\", Order = 3 });\n        });\n    }\n}\n```\n","slug":"Asp-Net-Core-过滤器","published":1,"updated":"2019-07-09T15:56:00.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1ya000ctkuiinu0t3fu","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"Filter-简介\"><a href=\"#Filter-简介\" class=\"headerlink\" title=\"Filter 简介\"></a>Filter 简介</h4><p>Filter的作用是在Action执行前或执行后做一些加工处理.跟中间件类似,但执行的顺序略有不同.把Filter用好了,可以减少代码量和提高执行效率.<br><a id=\"more\"></a></p><h5 id=\"Filter-分类\"><a href=\"#Filter-分类\" class=\"headerlink\" title=\"Filter 分类\"></a>Filter 分类</h5><ul><li><p>Authorization Filter</p><p>优先级最高,常用于验证请求是否合法,不合格则跳过后续处理</p></li><li><p>Resource Filter</p><p>第二优先级,在授权之后,模型绑定之前执行,常用于需要对模型加工处理.</p></li><li><p>Action Filter</p><p>与Resource Filter类似,但不经过模型绑定</p></li><li><p>Exception Filter</p><p>异常处理的Filter</p></li><li><p>Result Filter</p><p>在Action完成后,最后会经过的Filter.</p></li></ul><h5 id=\"Filter-运作方式\"><a href=\"#Filter-运作方式\" class=\"headerlink\" title=\"Filter 运作方式\"></a>Filter 运作方式</h5><p>每一个Request都会先经过已注册的中间件才会执行过滤器.</p><p>顺序一般为:Request -&gt; 中间件 -&gt; Authorization Filters -&gt; Resource Filters -&gt; 模型绑定 -&gt; Action Filters -&gt; Action -&gt; Action Filters -&gt; Result Filters -&gt; Resource Filters -&gt; 中间件 -&gt; Response</p><h4 id=\"创建Filter\"><a href=\"#创建Filter\" class=\"headerlink\" title=\"创建Filter\"></a>创建Filter</h4><p><em>Authorization Filter.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Filters</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class AuthorizationFilter : IAuthorizationFilter, IAsyncAuthorizationFilter</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnAuthorization</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnAuthorizationAsync</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>Resource Filter.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Filters</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class ResourceFilter : IResourceFilter,IAsyncResourceFilter</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResourceExecuting</span>(<span class=\"params\">ResourceExecutingFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResourceExecuted</span>(<span class=\"params\">ResourceExecutedFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 退出.\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnResourceExecutionAsync</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 退出.\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Action Filter, Result Filter,Exception Filter 与 Resource Filter 类似,只是分别继承了不同的接口,</p><ul><li>Action Filter 同步继承 IActionFilter,异步继承IAsyncActionFilter;</li><li>Result Filter 同步继承IResultFilter,异步继承IAsyncResultFilter;</li><li>Exception Filter 同步继承IExceptionFilter ,异步继承IAsyncExceptionFilter.</li></ul><h4 id=\"注册-Filter\"><a href=\"#注册-Filter\" class=\"headerlink\" title=\"注册 Filter\"></a>注册 Filter</h4><p>有两种注册方式,一种是全局注册,另一种是用[Attribute]来区域注册,只用于特定的控制器或接口.</p><h5 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h5><p>Startup.cs</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ResultFilter());</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ExceptionFilter());</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ResourceFilter());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"区域注册\"><a href=\"#区域注册\" class=\"headerlink\" title=\"区域注册\"></a>区域注册</h5><p>在控制器或者接口上面加上[TypeFilter(type)]就可以区域注册Filter.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">TypeFilter(typeof(AuthorizationFilter))</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">TypeFilter(typeof(ActionFilter))</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Response.WriteAsync(<span class=\"string\">\"Hello World! \\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">TypeFilter(typeof(ActionFilter))</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Error</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.Exception(<span class=\"string\">\"Error\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>如果Filter继承Attribute,则可以用[Attribute]进行Filter的注册.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AuthorizationFilter : Attribute, IAuthorizationFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class ActionFilter : Attribute, IActionFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">AuthorizationFilter</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">ActionFilter</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Response.WriteAsync(<span class=\"string\">\"Hello World! \\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">ActionFilter</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Error</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.Exception(<span class=\"string\">\"Error\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h4><p>预设注册同类型的Filter是以先进后出的方式处理封包,注册层级也会影响执行顺序.</p><p>Global-&gt;Controller-&gt;Action</p><p>也可以通过实现IOrderFilter修改执行顺序.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ActionFilter : Attribute, IActionFilter, IOrderedFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Order &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span>(<span class=\"subst\">&#123;Name&#125;</span>) 进入. \\r\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span>(<span class=\"subst\">&#123;Name&#125;</span>) 退出. \\r\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在注册Filter时带上Order,数值越小优先级越高.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ActionFilter() &#123; Name = <span class=\"string\">\"Global\"</span>, Order = <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"Filter-简介\"><a href=\"#Filter-简介\" class=\"headerlink\" title=\"Filter 简介\"></a>Filter 简介</h4><p>Filter的作用是在Action执行前或执行后做一些加工处理.跟中间件类似,但执行的顺序略有不同.把Filter用好了,可以减少代码量和提高执行效率.<br>","more":"</p><h5 id=\"Filter-分类\"><a href=\"#Filter-分类\" class=\"headerlink\" title=\"Filter 分类\"></a>Filter 分类</h5><ul><li><p>Authorization Filter</p><p>优先级最高,常用于验证请求是否合法,不合格则跳过后续处理</p></li><li><p>Resource Filter</p><p>第二优先级,在授权之后,模型绑定之前执行,常用于需要对模型加工处理.</p></li><li><p>Action Filter</p><p>与Resource Filter类似,但不经过模型绑定</p></li><li><p>Exception Filter</p><p>异常处理的Filter</p></li><li><p>Result Filter</p><p>在Action完成后,最后会经过的Filter.</p></li></ul><h5 id=\"Filter-运作方式\"><a href=\"#Filter-运作方式\" class=\"headerlink\" title=\"Filter 运作方式\"></a>Filter 运作方式</h5><p>每一个Request都会先经过已注册的中间件才会执行过滤器.</p><p>顺序一般为:Request -&gt; 中间件 -&gt; Authorization Filters -&gt; Resource Filters -&gt; 模型绑定 -&gt; Action Filters -&gt; Action -&gt; Action Filters -&gt; Result Filters -&gt; Resource Filters -&gt; 中间件 -&gt; Response</p><h4 id=\"创建Filter\"><a href=\"#创建Filter\" class=\"headerlink\" title=\"创建Filter\"></a>创建Filter</h4><p><em>Authorization Filter.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Filters</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class AuthorizationFilter : IAuthorizationFilter, IAsyncAuthorizationFilter</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnAuthorization</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnAuthorizationAsync</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>Resource Filter.cs</em><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Filters</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class ResourceFilter : IResourceFilter,IAsyncResourceFilter</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResourceExecuting</span>(<span class=\"params\">ResourceExecutingFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResourceExecuted</span>(<span class=\"params\">ResourceExecutedFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 退出.\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnResourceExecutionAsync</span>(<span class=\"params\">AuthorizationFilterContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 进入.\\r\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">            <span class=\"keyword\">await</span> context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span> 退出.\\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Action Filter, Result Filter,Exception Filter 与 Resource Filter 类似,只是分别继承了不同的接口,</p><ul><li>Action Filter 同步继承 IActionFilter,异步继承IAsyncActionFilter;</li><li>Result Filter 同步继承IResultFilter,异步继承IAsyncResultFilter;</li><li>Exception Filter 同步继承IExceptionFilter ,异步继承IAsyncExceptionFilter.</li></ul><h4 id=\"注册-Filter\"><a href=\"#注册-Filter\" class=\"headerlink\" title=\"注册 Filter\"></a>注册 Filter</h4><p>有两种注册方式,一种是全局注册,另一种是用[Attribute]来区域注册,只用于特定的控制器或接口.</p><h5 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h5><p>Startup.cs</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt; </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ResultFilter());</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ExceptionFilter());</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ResourceFilter());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"区域注册\"><a href=\"#区域注册\" class=\"headerlink\" title=\"区域注册\"></a>区域注册</h5><p>在控制器或者接口上面加上[TypeFilter(type)]就可以区域注册Filter.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">TypeFilter(typeof(AuthorizationFilter))</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">TypeFilter(typeof(ActionFilter))</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Response.WriteAsync(<span class=\"string\">\"Hello World! \\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">TypeFilter(typeof(ActionFilter))</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Error</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.Exception(<span class=\"string\">\"Error\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>如果Filter继承Attribute,则可以用[Attribute]进行Filter的注册.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AuthorizationFilter : Attribute, IAuthorizationFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class ActionFilter : Attribute, IActionFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Web.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">AuthorizationFilter</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">ActionFilter</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Response.WriteAsync(<span class=\"string\">\"Hello World! \\r\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"meta\">ActionFilter</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Error</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.Exception(<span class=\"string\">\"Error\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h4><p>预设注册同类型的Filter是以先进后出的方式处理封包,注册层级也会影响执行顺序.</p><p>Global-&gt;Controller-&gt;Action</p><p>也可以通过实现IOrderFilter修改执行顺序.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ActionFilter : Attribute, IActionFilter, IOrderedFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Order &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span>(<span class=\"subst\">&#123;Name&#125;</span>) 进入. \\r\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$\"<span class=\"subst\">&#123;GetType().Name&#125;</span>(<span class=\"subst\">&#123;Name&#125;</span>) 退出. \\r\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在注册Filter时带上Order,数值越小优先级越高.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddMvc(config =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            config.Filters.Add(<span class=\"keyword\">new</span> ActionFilter() &#123; Name = <span class=\"string\">\"Global\"</span>, Order = <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"C# 7.0 核心技术指南摘录(一)","date":"2019-08-15T14:56:12.000Z","_content":"### C# 7.0 新特性\n\n1. 数字字面量的改进\n    C# 7 中,数字字面量可以使用下划线来改善可读性,它们称为数字分隔符而被编译器忽略.\n\n    ```cs\n        int Max = 1_000_000;\n    ```\n    <!--more-->\n\n2. 输出变量及参数忽略\n    C# 7 中,调用含有out参数的方法将更加容易.首先,可以非常自然地声明输出变量.\n\n    ```cs\n    bool successful = int.TryParse(\"123\",out int result);\n    Console.WriteLine(result);\n    ```\n\n    当调用含有多个out参数的方法时,可以使用下划线字符忽略你并不关心的参数.\n\n    ```cs\n    SomBigMethod(out _, out _, out int x, out _, out _);\n    Console.WriteLine(x);\n    ```\n\n3. 模式\n    is 运算符也可以自然地引入变量了,称为模式变量.\n\n    ```cs\n    void Foo(object o)\n    {\n        if(x is string s)\n        {\n            Console.WriteLine(s.Lenght);\n        }\n    }\n    ```\n\n    switch 语句同样支持模式,因此我们不仅可以选择常量还可以选择类型;可以使用 when 子句来指定一个判断条件;或是直接选择 null;\n\n    ```cs\n    switch(x)\n    {\n        case int i:\n            Console.WriteLine(\"It's an int!\");\n            break;\n        case string s:\n            Console.WriteLine(s.Length);\n            break;\n        case bool b when b == true:\n            Console.WriteLine(\"True\");\n            break;\n        case null:\n            Console.WriteLine(\"Nothing\");\n            break;\n    }\n    ```\n\n4. 局部方法\n    局部方法是声明在其他函数内部的方法\n\n    ```cs\n    void WriteCubs()\n    {\n        Console.WriteLine(Cube(3));\n        Console.WriteLine(Cube(4));\n        Console.WriteLine(Cube(5));\n\n        int Cube(int value) => value * value * value;\n    }\n    ```\n\n    局部方法仅仅在其包含函数内可见,它们可以像 Lambda 表达式那样捕获局部变量.\n\n5. 更多的表达式体成员\n    C# 6 引入了以 \"胖箭头\" 语法表示的表达式体的方法、只读属性、运算符以及索引器.而 C# 7 更将其扩展到了构造函数、读/写属性和终结器中.\n\n    ```cs\n    public class Person\n    {\n        string name;\n        public Person(string name) => Name = name;\n        public string Name\n        {\n            get => name;\n            set => name = value ?? \"\";\n        }\n\n        ~Person() => Console.WriteLine(\"finalize\");\n    }\n    ```\n\n6. 解构器\n    C# 7 引入了解构器模式,构造器一般接受一系列值(作为参数)并将其赋值给字段,而解构器则正相反,它将字段反向赋值给变量.以下示例为Person类书写了一个解构器(不包含异常处理)\n\n    ```cs\n    public void Deconstruct(out string firstName, out string lastName)\n    {\n        int spacePos = name.IndexOf(' ');\n        firstName = name.Substring(0,spacePos);\n        lastName = name.Substring(spacePos + 1);\n    }\n    ```\n\n    解构器以特定的语法进行调用\n\n    ```cs\n    var joe = new Person(\"Joe Bolgs\");\n    var (first, last) = joe;\n    Console.WriteLine(first);\n    Console.WriteLine(last);\n    ```\n\n7. 元组\n    也许对于 C# 7 来说最值得一提的改进当属显式的元组(tuple)支持\n    元组提供了一种存储一系列相关值的简单方式\n\n    ```cs\n    var bob = (\"Bob\", 23);\n    Console.WriteLine(bob.Item1);\n    Console.WriteLine(bob.Item2);\n    ```\n\n    C# 的新元组实质上时使用System.ValueTuple<...> 泛型结构的语法糖.多亏了编译器的\"魔力\",我们还可以对元组的元素进行命名\n\n    ```cs\n    var tuple = (Name:\"Bob\" , Age:23);\n    Console.WriteLine(tuple.Name);\n    Console.WriteLine(tuple.Age);\n    ```\n\n    有了元组,函数也不必通过一系列 out 参数来返回多个值了\n\n    ```cs\n    static (int row, int column) GetFilePosition() => (3,10);\n\n    static void Main()\n    {\n        var pos = GetFilePosition();\n        Console.WriteLine(pos.row);\n        Console.WriteLine(pos.column);\n    }\n    ```\n\n    元组隐式地支持解构模式,因此很容易解构为若干独立的变量.因此,上述 Main 方法中的 GetFilePosition 返回的元组将存储于两个局部变量 row 和 column 中\n\n    ```cs\n    static void Main()\n    {\n        (row, column) = GetFilePosition();\n        Console.WriteLine(row);\n        Console.WriteLine(column);\n    }\n    ```\n\n8. throw 表达式\n    在 C# 7 之前,throw 一直是一个语句.现在,它也可以作为表达式出现在表达式体函数中\n\n    ```cs\n    public string Foo() => throw new NotImplementedException();\n    ```\n\n    throw 表达式也可以出现在三无判断运算符中\n\n    ```cs\n    string Capitalize(string value) => value == null ? throw new ArgumentException(\"value\") : value == \"\" ? \"\" : char.ToUpper(value[0]) + value.Substring(1);\n    ```\n","source":"_posts/CSharp-7.0-核心技术指南摘录(一).md","raw":"---\ntitle: 'C# 7.0 核心技术指南摘录(一)'\ndate: 2019-08-15 22:56:12\ncategories: C#\ntags:\n - C#\n - 摘录\n---\n### C# 7.0 新特性\n\n1. 数字字面量的改进\n    C# 7 中,数字字面量可以使用下划线来改善可读性,它们称为数字分隔符而被编译器忽略.\n\n    ```cs\n        int Max = 1_000_000;\n    ```\n    <!--more-->\n\n2. 输出变量及参数忽略\n    C# 7 中,调用含有out参数的方法将更加容易.首先,可以非常自然地声明输出变量.\n\n    ```cs\n    bool successful = int.TryParse(\"123\",out int result);\n    Console.WriteLine(result);\n    ```\n\n    当调用含有多个out参数的方法时,可以使用下划线字符忽略你并不关心的参数.\n\n    ```cs\n    SomBigMethod(out _, out _, out int x, out _, out _);\n    Console.WriteLine(x);\n    ```\n\n3. 模式\n    is 运算符也可以自然地引入变量了,称为模式变量.\n\n    ```cs\n    void Foo(object o)\n    {\n        if(x is string s)\n        {\n            Console.WriteLine(s.Lenght);\n        }\n    }\n    ```\n\n    switch 语句同样支持模式,因此我们不仅可以选择常量还可以选择类型;可以使用 when 子句来指定一个判断条件;或是直接选择 null;\n\n    ```cs\n    switch(x)\n    {\n        case int i:\n            Console.WriteLine(\"It's an int!\");\n            break;\n        case string s:\n            Console.WriteLine(s.Length);\n            break;\n        case bool b when b == true:\n            Console.WriteLine(\"True\");\n            break;\n        case null:\n            Console.WriteLine(\"Nothing\");\n            break;\n    }\n    ```\n\n4. 局部方法\n    局部方法是声明在其他函数内部的方法\n\n    ```cs\n    void WriteCubs()\n    {\n        Console.WriteLine(Cube(3));\n        Console.WriteLine(Cube(4));\n        Console.WriteLine(Cube(5));\n\n        int Cube(int value) => value * value * value;\n    }\n    ```\n\n    局部方法仅仅在其包含函数内可见,它们可以像 Lambda 表达式那样捕获局部变量.\n\n5. 更多的表达式体成员\n    C# 6 引入了以 \"胖箭头\" 语法表示的表达式体的方法、只读属性、运算符以及索引器.而 C# 7 更将其扩展到了构造函数、读/写属性和终结器中.\n\n    ```cs\n    public class Person\n    {\n        string name;\n        public Person(string name) => Name = name;\n        public string Name\n        {\n            get => name;\n            set => name = value ?? \"\";\n        }\n\n        ~Person() => Console.WriteLine(\"finalize\");\n    }\n    ```\n\n6. 解构器\n    C# 7 引入了解构器模式,构造器一般接受一系列值(作为参数)并将其赋值给字段,而解构器则正相反,它将字段反向赋值给变量.以下示例为Person类书写了一个解构器(不包含异常处理)\n\n    ```cs\n    public void Deconstruct(out string firstName, out string lastName)\n    {\n        int spacePos = name.IndexOf(' ');\n        firstName = name.Substring(0,spacePos);\n        lastName = name.Substring(spacePos + 1);\n    }\n    ```\n\n    解构器以特定的语法进行调用\n\n    ```cs\n    var joe = new Person(\"Joe Bolgs\");\n    var (first, last) = joe;\n    Console.WriteLine(first);\n    Console.WriteLine(last);\n    ```\n\n7. 元组\n    也许对于 C# 7 来说最值得一提的改进当属显式的元组(tuple)支持\n    元组提供了一种存储一系列相关值的简单方式\n\n    ```cs\n    var bob = (\"Bob\", 23);\n    Console.WriteLine(bob.Item1);\n    Console.WriteLine(bob.Item2);\n    ```\n\n    C# 的新元组实质上时使用System.ValueTuple<...> 泛型结构的语法糖.多亏了编译器的\"魔力\",我们还可以对元组的元素进行命名\n\n    ```cs\n    var tuple = (Name:\"Bob\" , Age:23);\n    Console.WriteLine(tuple.Name);\n    Console.WriteLine(tuple.Age);\n    ```\n\n    有了元组,函数也不必通过一系列 out 参数来返回多个值了\n\n    ```cs\n    static (int row, int column) GetFilePosition() => (3,10);\n\n    static void Main()\n    {\n        var pos = GetFilePosition();\n        Console.WriteLine(pos.row);\n        Console.WriteLine(pos.column);\n    }\n    ```\n\n    元组隐式地支持解构模式,因此很容易解构为若干独立的变量.因此,上述 Main 方法中的 GetFilePosition 返回的元组将存储于两个局部变量 row 和 column 中\n\n    ```cs\n    static void Main()\n    {\n        (row, column) = GetFilePosition();\n        Console.WriteLine(row);\n        Console.WriteLine(column);\n    }\n    ```\n\n8. throw 表达式\n    在 C# 7 之前,throw 一直是一个语句.现在,它也可以作为表达式出现在表达式体函数中\n\n    ```cs\n    public string Foo() => throw new NotImplementedException();\n    ```\n\n    throw 表达式也可以出现在三无判断运算符中\n\n    ```cs\n    string Capitalize(string value) => value == null ? throw new ArgumentException(\"value\") : value == \"\" ? \"\" : char.ToUpper(value[0]) + value.Substring(1);\n    ```\n","slug":"CSharp-7.0-核心技术指南摘录(一)","published":1,"updated":"2019-08-16T15:41:54.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yb000dtkuij6w5xu49","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"C-7-0-新特性\"><a href=\"#C-7-0-新特性\" class=\"headerlink\" title=\"C# 7.0 新特性\"></a>C# 7.0 新特性</h3><ol><li><p>数字字面量的改进<br>C# 7 中,数字字面量可以使用下划线来改善可读性,它们称为数字分隔符而被编译器忽略.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> Max = <span class=\"number\">1</span>_000_000;</span><br></pre></td></tr></table></figure><a id=\"more\"></a></li><li><p>输出变量及参数忽略<br>C# 7 中,调用含有out参数的方法将更加容易.首先,可以非常自然地声明输出变量.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> successful = <span class=\"keyword\">int</span>.TryParse(<span class=\"string\">\"123\"</span>,<span class=\"keyword\">out</span> <span class=\"keyword\">int</span> result);</span><br><span class=\"line\">Console.WriteLine(result);</span><br></pre></td></tr></table></figure><p>当调用含有多个out参数的方法时,可以使用下划线字符忽略你并不关心的参数.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SomBigMethod(<span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> x, <span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> _);</span><br><span class=\"line\">Console.WriteLine(x);</span><br></pre></td></tr></table></figure></li><li><p>模式<br>is 运算符也可以自然地引入变量了,称为模式变量.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span>(<span class=\"params\"><span class=\"keyword\">object</span> o</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x <span class=\"keyword\">is</span> <span class=\"keyword\">string</span> s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(s.Lenght);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>switch 语句同样支持模式,因此我们不仅可以选择常量还可以选择类型;可以使用 when 子句来指定一个判断条件;或是直接选择 null;</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">int</span> i:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"It's an int!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">string</span> s:</span><br><span class=\"line\">        Console.WriteLine(s.Length);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">bool</span> b when b == <span class=\"literal\">true</span>:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"True\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">null</span>:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"Nothing\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>局部方法<br>局部方法是声明在其他函数内部的方法</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">WriteCubs</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">3</span>));</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">4</span>));</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Cube</span>(<span class=\"params\"><span class=\"keyword\">int</span> <span class=\"keyword\">value</span></span>) </span>=&gt; <span class=\"keyword\">value</span> * <span class=\"keyword\">value</span> * <span class=\"keyword\">value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>局部方法仅仅在其包含函数内可见,它们可以像 Lambda 表达式那样捕获局部变量.</p></li><li><p>更多的表达式体成员<br>C# 6 引入了以 “胖箭头” 语法表示的表达式体的方法、只读属性、运算符以及索引器.而 C# 7 更将其扩展到了构造函数、读/写属性和终结器中.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>) </span>=&gt; Name = name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; name;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; name = <span class=\"keyword\">value</span> ?? <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Person() =&gt; Console.WriteLine(<span class=\"string\">\"finalize\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解构器<br>C# 7 引入了解构器模式,构造器一般接受一系列值(作为参数)并将其赋值给字段,而解构器则正相反,它将字段反向赋值给变量.以下示例为Person类书写了一个解构器(不包含异常处理)</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> firstName, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> lastName</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> spacePos = name.IndexOf(<span class=\"string\">' '</span>);</span><br><span class=\"line\">    firstName = name.Substring(<span class=\"number\">0</span>,spacePos);</span><br><span class=\"line\">    lastName = name.Substring(spacePos + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>解构器以特定的语法进行调用</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> joe = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Joe Bolgs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> (first, last) = joe;</span><br><span class=\"line\">Console.WriteLine(first);</span><br><span class=\"line\">Console.WriteLine(last);</span><br></pre></td></tr></table></figure></li><li><p>元组<br>也许对于 C# 7 来说最值得一提的改进当属显式的元组(tuple)支持<br>元组提供了一种存储一系列相关值的简单方式</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bob = (<span class=\"string\">\"Bob\"</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">Console.WriteLine(bob.Item1);</span><br><span class=\"line\">Console.WriteLine(bob.Item2);</span><br></pre></td></tr></table></figure><p>C# 的新元组实质上时使用System.ValueTuple&lt;…&gt; 泛型结构的语法糖.多亏了编译器的”魔力”,我们还可以对元组的元素进行命名</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tuple = (Name:<span class=\"string\">\"Bob\"</span> , Age:<span class=\"number\">23</span>);</span><br><span class=\"line\">Console.WriteLine(tuple.Name);</span><br><span class=\"line\">Console.WriteLine(tuple.Age);</span><br></pre></td></tr></table></figure><p>有了元组,函数也不必通过一系列 out 参数来返回多个值了</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> (<span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> column) GetFilePosition() =&gt; (<span class=\"number\">3</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = GetFilePosition();</span><br><span class=\"line\">    Console.WriteLine(pos.row);</span><br><span class=\"line\">    Console.WriteLine(pos.column);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>元组隐式地支持解构模式,因此很容易解构为若干独立的变量.因此,上述 Main 方法中的 GetFilePosition 返回的元组将存储于两个局部变量 row 和 column 中</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    (row, column) = GetFilePosition();</span><br><span class=\"line\">    Console.WriteLine(row);</span><br><span class=\"line\">    Console.WriteLine(column);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>throw 表达式<br>在 C# 7 之前,throw 一直是一个语句.现在,它也可以作为表达式出现在表达式体函数中</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>=&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException();</span><br></pre></td></tr></table></figure><p>throw 表达式也可以出现在三无判断运算符中</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">string</span> <span class=\"title\">Capitalize</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"keyword\">value</span></span>) </span>=&gt; <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"value\"</span>) : <span class=\"keyword\">value</span> == <span class=\"string\">\"\"</span> ? <span class=\"string\">\"\"</span> : <span class=\"keyword\">char</span>.ToUpper(<span class=\"keyword\">value</span>[<span class=\"number\">0</span>]) + <span class=\"keyword\">value</span>.Substring(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"C-7-0-新特性\"><a href=\"#C-7-0-新特性\" class=\"headerlink\" title=\"C# 7.0 新特性\"></a>C# 7.0 新特性</h3><ol><li><p>数字字面量的改进<br>C# 7 中,数字字面量可以使用下划线来改善可读性,它们称为数字分隔符而被编译器忽略.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> Max = <span class=\"number\">1</span>_000_000;</span><br></pre></td></tr></table></figure>","more":"</li><li><p>输出变量及参数忽略<br>C# 7 中,调用含有out参数的方法将更加容易.首先,可以非常自然地声明输出变量.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> successful = <span class=\"keyword\">int</span>.TryParse(<span class=\"string\">\"123\"</span>,<span class=\"keyword\">out</span> <span class=\"keyword\">int</span> result);</span><br><span class=\"line\">Console.WriteLine(result);</span><br></pre></td></tr></table></figure><p>当调用含有多个out参数的方法时,可以使用下划线字符忽略你并不关心的参数.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SomBigMethod(<span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> x, <span class=\"keyword\">out</span> _, <span class=\"keyword\">out</span> _);</span><br><span class=\"line\">Console.WriteLine(x);</span><br></pre></td></tr></table></figure></li><li><p>模式<br>is 运算符也可以自然地引入变量了,称为模式变量.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span>(<span class=\"params\"><span class=\"keyword\">object</span> o</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x <span class=\"keyword\">is</span> <span class=\"keyword\">string</span> s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(s.Lenght);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>switch 语句同样支持模式,因此我们不仅可以选择常量还可以选择类型;可以使用 when 子句来指定一个判断条件;或是直接选择 null;</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">int</span> i:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"It's an int!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">string</span> s:</span><br><span class=\"line\">        Console.WriteLine(s.Length);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">bool</span> b when b == <span class=\"literal\">true</span>:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"True\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">null</span>:</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"Nothing\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>局部方法<br>局部方法是声明在其他函数内部的方法</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">WriteCubs</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">3</span>));</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">4</span>));</span><br><span class=\"line\">    Console.WriteLine(Cube(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Cube</span>(<span class=\"params\"><span class=\"keyword\">int</span> <span class=\"keyword\">value</span></span>) </span>=&gt; <span class=\"keyword\">value</span> * <span class=\"keyword\">value</span> * <span class=\"keyword\">value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>局部方法仅仅在其包含函数内可见,它们可以像 Lambda 表达式那样捕获局部变量.</p></li><li><p>更多的表达式体成员<br>C# 6 引入了以 “胖箭头” 语法表示的表达式体的方法、只读属性、运算符以及索引器.而 C# 7 更将其扩展到了构造函数、读/写属性和终结器中.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>) </span>=&gt; Name = name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; name;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; name = <span class=\"keyword\">value</span> ?? <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Person() =&gt; Console.WriteLine(<span class=\"string\">\"finalize\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解构器<br>C# 7 引入了解构器模式,构造器一般接受一系列值(作为参数)并将其赋值给字段,而解构器则正相反,它将字段反向赋值给变量.以下示例为Person类书写了一个解构器(不包含异常处理)</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> firstName, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> lastName</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> spacePos = name.IndexOf(<span class=\"string\">' '</span>);</span><br><span class=\"line\">    firstName = name.Substring(<span class=\"number\">0</span>,spacePos);</span><br><span class=\"line\">    lastName = name.Substring(spacePos + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>解构器以特定的语法进行调用</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> joe = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Joe Bolgs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> (first, last) = joe;</span><br><span class=\"line\">Console.WriteLine(first);</span><br><span class=\"line\">Console.WriteLine(last);</span><br></pre></td></tr></table></figure></li><li><p>元组<br>也许对于 C# 7 来说最值得一提的改进当属显式的元组(tuple)支持<br>元组提供了一种存储一系列相关值的简单方式</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bob = (<span class=\"string\">\"Bob\"</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">Console.WriteLine(bob.Item1);</span><br><span class=\"line\">Console.WriteLine(bob.Item2);</span><br></pre></td></tr></table></figure><p>C# 的新元组实质上时使用System.ValueTuple&lt;…&gt; 泛型结构的语法糖.多亏了编译器的”魔力”,我们还可以对元组的元素进行命名</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tuple = (Name:<span class=\"string\">\"Bob\"</span> , Age:<span class=\"number\">23</span>);</span><br><span class=\"line\">Console.WriteLine(tuple.Name);</span><br><span class=\"line\">Console.WriteLine(tuple.Age);</span><br></pre></td></tr></table></figure><p>有了元组,函数也不必通过一系列 out 参数来返回多个值了</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> (<span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> column) GetFilePosition() =&gt; (<span class=\"number\">3</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = GetFilePosition();</span><br><span class=\"line\">    Console.WriteLine(pos.row);</span><br><span class=\"line\">    Console.WriteLine(pos.column);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>元组隐式地支持解构模式,因此很容易解构为若干独立的变量.因此,上述 Main 方法中的 GetFilePosition 返回的元组将存储于两个局部变量 row 和 column 中</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    (row, column) = GetFilePosition();</span><br><span class=\"line\">    Console.WriteLine(row);</span><br><span class=\"line\">    Console.WriteLine(column);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>throw 表达式<br>在 C# 7 之前,throw 一直是一个语句.现在,它也可以作为表达式出现在表达式体函数中</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>=&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException();</span><br></pre></td></tr></table></figure><p>throw 表达式也可以出现在三无判断运算符中</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">string</span> <span class=\"title\">Capitalize</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"keyword\">value</span></span>) </span>=&gt; <span class=\"keyword\">value</span> == <span class=\"literal\">null</span> ? <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"value\"</span>) : <span class=\"keyword\">value</span> == <span class=\"string\">\"\"</span> ? <span class=\"string\">\"\"</span> : <span class=\"keyword\">char</span>.ToUpper(<span class=\"keyword\">value</span>[<span class=\"number\">0</span>]) + <span class=\"keyword\">value</span>.Substring(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->"},{"title":"C# 7.0 核心技术指南摘录(二)","date":"2019-08-16T14:05:55.000Z","_content":"### C# 6.0 新特性\n\n1. null 条件运算符\n    可以避免在调用方法或访问类型的成员之前显式地编写用于null判断的语句.在以下示例中,result将会为null而不会抛出 NullReferenceException.\n\n    ```cs\n    StringBuilder sb = null;\n    string result = sb?.ToString();\n    ```\n    <!--more-->\n2. 表达式体函数\n    可以以 Lambda 表达式的形式书写仅仅包含一个表达式的方法、属性、运算符以及索引器,使得代码更加简短.\n\n    ```cs\n    public int TimesTwo(int x) => x*2;\n    public string SomeProperty => \"Property value\";\n    ```\n\n3. 属性初始化器\n    可以对自动属性进行初始赋值.\n\n    ```cs\n    public DataTime TimeCreated { get; set; } = DateTime.Now;\n    public DateTime TimeEnd { get; } = DateTime.Now;\n    ```\n\n4. 索引初始化器\n    可以一次性初始化具有索引器的任何类型.\n\n    ```cs\n    var dict = new Dictionary<int,string>()\n    {\n        [3] = \"three\",\n        [10] = \"ten\"\n    };\n    ```\n\n5. 字符串插值\n    用更加简单的方式替代了string.Format\n\n    ```cs\n    string s = $\"It is {DateTime.Now.DayOfWeek} today\";\n    ```\n\n6. 异常过滤器\n    可以在 catch 块上再添加一个条件\n\n    ```cs\n    string html;\n    try\n    {\n        html = new WebClient().DownloadString(\"http://asef\");\n    }\n    catch(WebException ex) when (ex.Status == WedExceptionStatus.Timeout)\n    {\n        ...\n    }\n    ```\n\n7. using static\n    using static 指令可以引入一个类型的所有静态成员,这样就可以不用书写;类型而直接使用这些成员\n\n    ```cs\n    using static System.Console;\n\n    WriteLine(\"Hello world\");\n    ```\n\n8. nameof\n    nameof 运算符返回变量、类型或者其他符号的名称\n\n    ```cs\n    int capacity = 123;\n    string x = nameof(capacity);\n    string y = nameof(Uri.Host);\n    ```\n\n9. 可以在 catch 和 finally 块中使用 await.\n\n### C# 5.0 新特性\n\nC# 5.0 最大的新特性就是通过两个关键字, async 和 await 支持异步功能.异步功能支持异步延续,从而简化响应式和线程安全的富客户端应用程序的编写.它还有利于编写高并发和高效的 I/O 密集型应用程序,而不需要为每一个操作绑定一个线程资源\n\n#### C# 4.0 新特性\n\n1. 动态绑定\n    将绑定过程(解析类型与成员的过程)从编译时推迟到运行时.这种方法适用于一些需要避免使用复杂反射代码的场合.动态绑定还适合于实现动态语言以及 COM 组件的互操作\n\n2. 可选参数和命名参数\n    可选参数允许函数指定参数的默认值,这样调用者就可以省略一些参数,而命名参数则允许调用者按名字而非按位置指定参数\n\n3. 用泛型接口和委托实现类型变化\n    类型变化规则在 C# 4.0 进行了一定程度的放宽,因此泛型接口和泛型委托类型参数可以标记为协变或逆变,从而支持更加自然的类型转换.\n\n4. 改进 COM 互操作性\n    参数可以通过引用传递,并无须使用 ref 关键字(特别适用于与可选参数一同使用)\n    包含 COM 互操作类型的程序集可以链接而无须引用.链接的互操作类型支持类型相等转换,无须使用主互操作程序集,并且解决了版本控制和部署的难题\n    链接的互操作类型中的函数若返回 COM 变体类型,则会映射为 dynamic 而不是 object ,因此无须进行强制类型转换.\n\n### C# 3.0 新特性\n\n1. LINQ\n    LINQ 令 C# 程序可以直接编写查询并以静态方式检查其正确性,它可以查询本地集合(如列表或XML文档),也可以查询远程数据源(如数据库).\n\n2. 隐式类型局部变量\n    隐式类型局部变量允许在声明语句中省略变量类型,然后由编辑器推断其类型.这样可以简化代码并支持匿名类型.匿名类型是一些即时创建的类,它们常用于生成 LINQ 查询的最终输出结果.数组也可以隐式类型话.\n\n3. 对象初始化器\n    允许在调用构造器之后以内联的方式设置属性,从而简化对象的构造过程.对象初始化器不仅支持命名类型也支持匿名类型.\n\n4. Lambda 表达式\n    由编译器即时创建的微型函数,适用于创建\"流畅的\" LINQ 查询\n\n5. 扩展方法\n    可以在不修改类型定义的情况下使用新的方法扩展先用类型,使静态方法变得像实例方法一样.LINQ表达式的查询符就是使用扩展方法实现的.\n\n6. 查询表达式\n    提供了编写 LINQ 查询的更高级语法,大大简化了具有多个序列或范围变量的 LINQ 查询的编写过程\n\n7. 表达式树\n    是赋值给一种特殊类型 Expression<TDelegate> 的 Lambda 表达式的 DOM 模型.表达式树使 LINQ 查询能够远程执行,因为它们可以在运行时进行转换和翻译\n\n8. 自动化属性\n    自动化属性对在 get/set 中对私有字段直接读写的属性进行了简化,并将字段的读写逻辑交给编译器自动生成\n\n9. 分部方法\n    分部方法可以令自动生成的分部类自定义需要手动实现的钩子函数,而该函数可以在没有使用的情况下\"消失\"\n","source":"_posts/CSharp-7.0-核心技术指南摘录(二).md","raw":"---\ntitle: 'C# 7.0 核心技术指南摘录(二)'\ndate: 2019-08-16 22:05:55\ncategories: C#\ntags:\n - C#\n - 摘录\n---\n### C# 6.0 新特性\n\n1. null 条件运算符\n    可以避免在调用方法或访问类型的成员之前显式地编写用于null判断的语句.在以下示例中,result将会为null而不会抛出 NullReferenceException.\n\n    ```cs\n    StringBuilder sb = null;\n    string result = sb?.ToString();\n    ```\n    <!--more-->\n2. 表达式体函数\n    可以以 Lambda 表达式的形式书写仅仅包含一个表达式的方法、属性、运算符以及索引器,使得代码更加简短.\n\n    ```cs\n    public int TimesTwo(int x) => x*2;\n    public string SomeProperty => \"Property value\";\n    ```\n\n3. 属性初始化器\n    可以对自动属性进行初始赋值.\n\n    ```cs\n    public DataTime TimeCreated { get; set; } = DateTime.Now;\n    public DateTime TimeEnd { get; } = DateTime.Now;\n    ```\n\n4. 索引初始化器\n    可以一次性初始化具有索引器的任何类型.\n\n    ```cs\n    var dict = new Dictionary<int,string>()\n    {\n        [3] = \"three\",\n        [10] = \"ten\"\n    };\n    ```\n\n5. 字符串插值\n    用更加简单的方式替代了string.Format\n\n    ```cs\n    string s = $\"It is {DateTime.Now.DayOfWeek} today\";\n    ```\n\n6. 异常过滤器\n    可以在 catch 块上再添加一个条件\n\n    ```cs\n    string html;\n    try\n    {\n        html = new WebClient().DownloadString(\"http://asef\");\n    }\n    catch(WebException ex) when (ex.Status == WedExceptionStatus.Timeout)\n    {\n        ...\n    }\n    ```\n\n7. using static\n    using static 指令可以引入一个类型的所有静态成员,这样就可以不用书写;类型而直接使用这些成员\n\n    ```cs\n    using static System.Console;\n\n    WriteLine(\"Hello world\");\n    ```\n\n8. nameof\n    nameof 运算符返回变量、类型或者其他符号的名称\n\n    ```cs\n    int capacity = 123;\n    string x = nameof(capacity);\n    string y = nameof(Uri.Host);\n    ```\n\n9. 可以在 catch 和 finally 块中使用 await.\n\n### C# 5.0 新特性\n\nC# 5.0 最大的新特性就是通过两个关键字, async 和 await 支持异步功能.异步功能支持异步延续,从而简化响应式和线程安全的富客户端应用程序的编写.它还有利于编写高并发和高效的 I/O 密集型应用程序,而不需要为每一个操作绑定一个线程资源\n\n#### C# 4.0 新特性\n\n1. 动态绑定\n    将绑定过程(解析类型与成员的过程)从编译时推迟到运行时.这种方法适用于一些需要避免使用复杂反射代码的场合.动态绑定还适合于实现动态语言以及 COM 组件的互操作\n\n2. 可选参数和命名参数\n    可选参数允许函数指定参数的默认值,这样调用者就可以省略一些参数,而命名参数则允许调用者按名字而非按位置指定参数\n\n3. 用泛型接口和委托实现类型变化\n    类型变化规则在 C# 4.0 进行了一定程度的放宽,因此泛型接口和泛型委托类型参数可以标记为协变或逆变,从而支持更加自然的类型转换.\n\n4. 改进 COM 互操作性\n    参数可以通过引用传递,并无须使用 ref 关键字(特别适用于与可选参数一同使用)\n    包含 COM 互操作类型的程序集可以链接而无须引用.链接的互操作类型支持类型相等转换,无须使用主互操作程序集,并且解决了版本控制和部署的难题\n    链接的互操作类型中的函数若返回 COM 变体类型,则会映射为 dynamic 而不是 object ,因此无须进行强制类型转换.\n\n### C# 3.0 新特性\n\n1. LINQ\n    LINQ 令 C# 程序可以直接编写查询并以静态方式检查其正确性,它可以查询本地集合(如列表或XML文档),也可以查询远程数据源(如数据库).\n\n2. 隐式类型局部变量\n    隐式类型局部变量允许在声明语句中省略变量类型,然后由编辑器推断其类型.这样可以简化代码并支持匿名类型.匿名类型是一些即时创建的类,它们常用于生成 LINQ 查询的最终输出结果.数组也可以隐式类型话.\n\n3. 对象初始化器\n    允许在调用构造器之后以内联的方式设置属性,从而简化对象的构造过程.对象初始化器不仅支持命名类型也支持匿名类型.\n\n4. Lambda 表达式\n    由编译器即时创建的微型函数,适用于创建\"流畅的\" LINQ 查询\n\n5. 扩展方法\n    可以在不修改类型定义的情况下使用新的方法扩展先用类型,使静态方法变得像实例方法一样.LINQ表达式的查询符就是使用扩展方法实现的.\n\n6. 查询表达式\n    提供了编写 LINQ 查询的更高级语法,大大简化了具有多个序列或范围变量的 LINQ 查询的编写过程\n\n7. 表达式树\n    是赋值给一种特殊类型 Expression<TDelegate> 的 Lambda 表达式的 DOM 模型.表达式树使 LINQ 查询能够远程执行,因为它们可以在运行时进行转换和翻译\n\n8. 自动化属性\n    自动化属性对在 get/set 中对私有字段直接读写的属性进行了简化,并将字段的读写逻辑交给编译器自动生成\n\n9. 分部方法\n    分部方法可以令自动生成的分部类自定义需要手动实现的钩子函数,而该函数可以在没有使用的情况下\"消失\"\n","slug":"CSharp-7.0-核心技术指南摘录(二)","published":1,"updated":"2019-08-16T15:42:00.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yb000etkuik20fcr43","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"C-6-0-新特性\"><a href=\"#C-6-0-新特性\" class=\"headerlink\" title=\"C# 6.0 新特性\"></a>C# 6.0 新特性</h3><ol><li><p>null 条件运算符<br>可以避免在调用方法或访问类型的成员之前显式地编写用于null判断的语句.在以下示例中,result将会为null而不会抛出 NullReferenceException.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">string</span> result = sb?.ToString();</span><br></pre></td></tr></table></figure><a id=\"more\"></a></li><li><p>表达式体函数<br>可以以 Lambda 表达式的形式书写仅仅包含一个表达式的方法、属性、运算符以及索引器,使得代码更加简短.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">TimesTwo</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>) </span>=&gt; x*<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> SomeProperty =&gt; <span class=\"string\">\"Property value\"</span>;</span><br></pre></td></tr></table></figure></li><li><p>属性初始化器<br>可以对自动属性进行初始赋值.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> DataTime TimeCreated &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = DateTime.Now;</span><br><span class=\"line\"><span class=\"keyword\">public</span> DateTime TimeEnd &#123; <span class=\"keyword\">get</span>; &#125; = DateTime.Now;</span><br></pre></td></tr></table></figure></li><li><p>索引初始化器<br>可以一次性初始化具有索引器的任何类型.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dict = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">string</span>&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">3</span>] = <span class=\"string\">\"three\"</span>,</span><br><span class=\"line\">    [<span class=\"meta\">10</span>] = <span class=\"string\">\"ten\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>字符串插值<br>用更加简单的方式替代了string.Format</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> s = <span class=\"string\">$\"It is <span class=\"subst\">&#123;DateTime.Now.DayOfWeek&#125;</span> today\"</span>;</span><br></pre></td></tr></table></figure></li><li><p>异常过滤器<br>可以在 catch 块上再添加一个条件</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> html;</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    html = <span class=\"keyword\">new</span> WebClient().DownloadString(<span class=\"string\">\"http://asef\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(WebException ex) when (ex.Status == WedExceptionStatus.Timeout)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>using static<br>using static 指令可以引入一个类型的所有静态成员,这样就可以不用书写;类型而直接使用这些成员</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.Console;</span><br><span class=\"line\"></span><br><span class=\"line\">WriteLine(<span class=\"string\">\"Hello world\"</span>);</span><br></pre></td></tr></table></figure></li><li><p>nameof<br>nameof 运算符返回变量、类型或者其他符号的名称</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> capacity = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">string</span> x = <span class=\"keyword\">nameof</span>(capacity);</span><br><span class=\"line\"><span class=\"keyword\">string</span> y = <span class=\"keyword\">nameof</span>(Uri.Host);</span><br></pre></td></tr></table></figure></li><li><p>可以在 catch 和 finally 块中使用 await.</p></li></ol><h3 id=\"C-5-0-新特性\"><a href=\"#C-5-0-新特性\" class=\"headerlink\" title=\"C# 5.0 新特性\"></a>C# 5.0 新特性</h3><p>C# 5.0 最大的新特性就是通过两个关键字, async 和 await 支持异步功能.异步功能支持异步延续,从而简化响应式和线程安全的富客户端应用程序的编写.它还有利于编写高并发和高效的 I/O 密集型应用程序,而不需要为每一个操作绑定一个线程资源</p><h4 id=\"C-4-0-新特性\"><a href=\"#C-4-0-新特性\" class=\"headerlink\" title=\"C# 4.0 新特性\"></a>C# 4.0 新特性</h4><ol><li><p>动态绑定<br>将绑定过程(解析类型与成员的过程)从编译时推迟到运行时.这种方法适用于一些需要避免使用复杂反射代码的场合.动态绑定还适合于实现动态语言以及 COM 组件的互操作</p></li><li><p>可选参数和命名参数<br>可选参数允许函数指定参数的默认值,这样调用者就可以省略一些参数,而命名参数则允许调用者按名字而非按位置指定参数</p></li><li><p>用泛型接口和委托实现类型变化<br>类型变化规则在 C# 4.0 进行了一定程度的放宽,因此泛型接口和泛型委托类型参数可以标记为协变或逆变,从而支持更加自然的类型转换.</p></li><li><p>改进 COM 互操作性<br>参数可以通过引用传递,并无须使用 ref 关键字(特别适用于与可选参数一同使用)<br>包含 COM 互操作类型的程序集可以链接而无须引用.链接的互操作类型支持类型相等转换,无须使用主互操作程序集,并且解决了版本控制和部署的难题<br>链接的互操作类型中的函数若返回 COM 变体类型,则会映射为 dynamic 而不是 object ,因此无须进行强制类型转换.</p></li></ol><h3 id=\"C-3-0-新特性\"><a href=\"#C-3-0-新特性\" class=\"headerlink\" title=\"C# 3.0 新特性\"></a>C# 3.0 新特性</h3><ol><li><p>LINQ<br>LINQ 令 C# 程序可以直接编写查询并以静态方式检查其正确性,它可以查询本地集合(如列表或XML文档),也可以查询远程数据源(如数据库).</p></li><li><p>隐式类型局部变量<br>隐式类型局部变量允许在声明语句中省略变量类型,然后由编辑器推断其类型.这样可以简化代码并支持匿名类型.匿名类型是一些即时创建的类,它们常用于生成 LINQ 查询的最终输出结果.数组也可以隐式类型话.</p></li><li><p>对象初始化器<br>允许在调用构造器之后以内联的方式设置属性,从而简化对象的构造过程.对象初始化器不仅支持命名类型也支持匿名类型.</p></li><li><p>Lambda 表达式<br>由编译器即时创建的微型函数,适用于创建”流畅的” LINQ 查询</p></li><li><p>扩展方法<br>可以在不修改类型定义的情况下使用新的方法扩展先用类型,使静态方法变得像实例方法一样.LINQ表达式的查询符就是使用扩展方法实现的.</p></li><li><p>查询表达式<br>提供了编写 LINQ 查询的更高级语法,大大简化了具有多个序列或范围变量的 LINQ 查询的编写过程</p></li><li><p>表达式树<br>是赋值给一种特殊类型 Expression<tdelegate>的 Lambda 表达式的 DOM 模型.表达式树使 LINQ 查询能够远程执行,因为它们可以在运行时进行转换和翻译</tdelegate></p></li><li><p>自动化属性<br>自动化属性对在 get/set 中对私有字段直接读写的属性进行了简化,并将字段的读写逻辑交给编译器自动生成</p></li><li><p>分部方法<br>分部方法可以令自动生成的分部类自定义需要手动实现的钩子函数,而该函数可以在没有使用的情况下”消失”</p></li></ol><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"C-6-0-新特性\"><a href=\"#C-6-0-新特性\" class=\"headerlink\" title=\"C# 6.0 新特性\"></a>C# 6.0 新特性</h3><ol><li><p>null 条件运算符<br>可以避免在调用方法或访问类型的成员之前显式地编写用于null判断的语句.在以下示例中,result将会为null而不会抛出 NullReferenceException.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">string</span> result = sb?.ToString();</span><br></pre></td></tr></table></figure>","more":"</li><li><p>表达式体函数<br>可以以 Lambda 表达式的形式书写仅仅包含一个表达式的方法、属性、运算符以及索引器,使得代码更加简短.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">TimesTwo</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>) </span>=&gt; x*<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> SomeProperty =&gt; <span class=\"string\">\"Property value\"</span>;</span><br></pre></td></tr></table></figure></li><li><p>属性初始化器<br>可以对自动属性进行初始赋值.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> DataTime TimeCreated &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = DateTime.Now;</span><br><span class=\"line\"><span class=\"keyword\">public</span> DateTime TimeEnd &#123; <span class=\"keyword\">get</span>; &#125; = DateTime.Now;</span><br></pre></td></tr></table></figure></li><li><p>索引初始化器<br>可以一次性初始化具有索引器的任何类型.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dict = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">string</span>&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">3</span>] = <span class=\"string\">\"three\"</span>,</span><br><span class=\"line\">    [<span class=\"meta\">10</span>] = <span class=\"string\">\"ten\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>字符串插值<br>用更加简单的方式替代了string.Format</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> s = <span class=\"string\">$\"It is <span class=\"subst\">&#123;DateTime.Now.DayOfWeek&#125;</span> today\"</span>;</span><br></pre></td></tr></table></figure></li><li><p>异常过滤器<br>可以在 catch 块上再添加一个条件</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> html;</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    html = <span class=\"keyword\">new</span> WebClient().DownloadString(<span class=\"string\">\"http://asef\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(WebException ex) when (ex.Status == WedExceptionStatus.Timeout)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>using static<br>using static 指令可以引入一个类型的所有静态成员,这样就可以不用书写;类型而直接使用这些成员</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.Console;</span><br><span class=\"line\"></span><br><span class=\"line\">WriteLine(<span class=\"string\">\"Hello world\"</span>);</span><br></pre></td></tr></table></figure></li><li><p>nameof<br>nameof 运算符返回变量、类型或者其他符号的名称</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> capacity = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">string</span> x = <span class=\"keyword\">nameof</span>(capacity);</span><br><span class=\"line\"><span class=\"keyword\">string</span> y = <span class=\"keyword\">nameof</span>(Uri.Host);</span><br></pre></td></tr></table></figure></li><li><p>可以在 catch 和 finally 块中使用 await.</p></li></ol><h3 id=\"C-5-0-新特性\"><a href=\"#C-5-0-新特性\" class=\"headerlink\" title=\"C# 5.0 新特性\"></a>C# 5.0 新特性</h3><p>C# 5.0 最大的新特性就是通过两个关键字, async 和 await 支持异步功能.异步功能支持异步延续,从而简化响应式和线程安全的富客户端应用程序的编写.它还有利于编写高并发和高效的 I/O 密集型应用程序,而不需要为每一个操作绑定一个线程资源</p><h4 id=\"C-4-0-新特性\"><a href=\"#C-4-0-新特性\" class=\"headerlink\" title=\"C# 4.0 新特性\"></a>C# 4.0 新特性</h4><ol><li><p>动态绑定<br>将绑定过程(解析类型与成员的过程)从编译时推迟到运行时.这种方法适用于一些需要避免使用复杂反射代码的场合.动态绑定还适合于实现动态语言以及 COM 组件的互操作</p></li><li><p>可选参数和命名参数<br>可选参数允许函数指定参数的默认值,这样调用者就可以省略一些参数,而命名参数则允许调用者按名字而非按位置指定参数</p></li><li><p>用泛型接口和委托实现类型变化<br>类型变化规则在 C# 4.0 进行了一定程度的放宽,因此泛型接口和泛型委托类型参数可以标记为协变或逆变,从而支持更加自然的类型转换.</p></li><li><p>改进 COM 互操作性<br>参数可以通过引用传递,并无须使用 ref 关键字(特别适用于与可选参数一同使用)<br>包含 COM 互操作类型的程序集可以链接而无须引用.链接的互操作类型支持类型相等转换,无须使用主互操作程序集,并且解决了版本控制和部署的难题<br>链接的互操作类型中的函数若返回 COM 变体类型,则会映射为 dynamic 而不是 object ,因此无须进行强制类型转换.</p></li></ol><h3 id=\"C-3-0-新特性\"><a href=\"#C-3-0-新特性\" class=\"headerlink\" title=\"C# 3.0 新特性\"></a>C# 3.0 新特性</h3><ol><li><p>LINQ<br>LINQ 令 C# 程序可以直接编写查询并以静态方式检查其正确性,它可以查询本地集合(如列表或XML文档),也可以查询远程数据源(如数据库).</p></li><li><p>隐式类型局部变量<br>隐式类型局部变量允许在声明语句中省略变量类型,然后由编辑器推断其类型.这样可以简化代码并支持匿名类型.匿名类型是一些即时创建的类,它们常用于生成 LINQ 查询的最终输出结果.数组也可以隐式类型话.</p></li><li><p>对象初始化器<br>允许在调用构造器之后以内联的方式设置属性,从而简化对象的构造过程.对象初始化器不仅支持命名类型也支持匿名类型.</p></li><li><p>Lambda 表达式<br>由编译器即时创建的微型函数,适用于创建”流畅的” LINQ 查询</p></li><li><p>扩展方法<br>可以在不修改类型定义的情况下使用新的方法扩展先用类型,使静态方法变得像实例方法一样.LINQ表达式的查询符就是使用扩展方法实现的.</p></li><li><p>查询表达式<br>提供了编写 LINQ 查询的更高级语法,大大简化了具有多个序列或范围变量的 LINQ 查询的编写过程</p></li><li><p>表达式树<br>是赋值给一种特殊类型 Expression<tdelegate>的 Lambda 表达式的 DOM 模型.表达式树使 LINQ 查询能够远程执行,因为它们可以在运行时进行转换和翻译</tdelegate></p></li><li><p>自动化属性<br>自动化属性对在 get/set 中对私有字段直接读写的属性进行了简化,并将字段的读写逻辑交给编译器自动生成</p></li><li><p>分部方法<br>分部方法可以令自动生成的分部类自定义需要手动实现的钩子函数,而该函数可以在没有使用的情况下”消失”</p></li></ol><!-- rebuild by neat -->"},{"title":"CSharp 7.0 核心技术指南摘录(三)","date":"2019-08-19T15:14:58.000Z","_content":"### 解构器\n\n一个解构器就像构造器的反过程:构造器使用若干值作为参数,并且将它们赋值给字段;而解构器则相反将字段反向赋值给若干变量\n<!--more-->\n解构方法的名字必须为Deconstruct,并且拥有一个或多个out参数\n\n```cs\nclass Rectangle\n{\n    public readonly float Width, Height;\n\n    public Rectangle(float width, float height)\n    {\n        Width = width;\n        Height = height;\n    }\n\n    public void Deconstruct(out float width, out float height)\n    {\n        width = Width;\n        height = Height;\n    }\n}\n```\n\n调用解造器,语法如下\n\n```cs\nvar rect = new Rectangle(3 , 4);\n(float width, float height) = rect;\n```\n\n等价于\n\n```cs\nfloat width, height;\nrect.Deconstruct(out width, out height);\n// rect.Deconstruct(out var width, out var height);\n```\n\n解构调用允许隐式类型推断,可简写为\n\n```cs\n(var width, var height) = rect;\n// var (width, height) = rect;\n```\n\n如果解构中的变量已经定义过了,那么可以忽略类型声明\n\n```cs\nfloat width, height;\n(width, height) = rect;\n```\n\n### 委托\n\n委托是一种知道如何调用方法的对象\n委托类型定义了一个委托实例可以调用的方法,具体来说,它定义了方法的返回类型和参数类型.\n\n```cs\ndelegate int Transformer(int x);\nclasee Test\n{\n    static void Main()\n    {\n        Transformer t = Square;\n        // Transformer t = new Transformer(Square);\n        int result = t(3);\n        // int result = t.Invoke(3);\n        Console.WriteLine(result);\n    }\n    static int Square(int x) => x * x;\n}\n```\n\n委托实例字面上是调用者的代理:调用者调用委托,而委托调用目标方法.这种间接调用方式可以将调用者和目标方法解耦.\n\n#### 用委托书写插件方法\n\n委托变量可以在运行时指定一个目标方法,这个特性可用于编写插件方法,下面的例子中有一个名为Transform的公共方法,它对整数数组的每一个元素进行变换.Transfornm方法接受一个委托参数并以此为插件方法执行变换操作\n\n```cs\npublic delegate int Transformer (int x);\n\nclass Util\n{\n    public static void Transform(int[] values, Transformer t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t(values[i]);\n        }\n    }\n}\n\nclass Test\n{\n    static void Main()\n    {\n        int[] values = {1, 2, 3};\n        Util.Transform(values, Square);\n        foreach( int i in values)\n        {\n            Console.WriteLine(i+\" \");\n        }\n    }\n\n    static int Square(int x) => x * x;\n}\n```\n\n#### 多播委托\n\n所有的委托实例都拥有多播能力,这意味着一个委托实例可以引用一个目标方法,也可以引用一组目标方法.委托可以使用 + 和 += 联结多个委托实例, - 和 -= 会从左侧委托操作数上将右侧委托数删除.\n委托是不可变的,因此调用 += 和 -= 的实质是创建一个新的委托实例,并把它赋值给已有变量.\n若方法的执行时间很长,且该方法定时调用一个委托像调用者报告进程的执行情况.例如,在以下代码中,HardWord 方法通过调用 ProgressReporter 委托参数报告执行进度\n\n```cs\npublic delegate void PeogressReporter (int percentComplete);\n\npublic class Util\n{\n    public static void HardWork (ProgressReporter p)\n    {\n        for(int i = 0; i < 10; i++)\n        {\n            p(i * 10);\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n}\n```\n\n为了监视进度,在Main方法中创建了一个多播委托实例p,这样就可以通过两个独立的方法监视执行进度\n\n```cs\nclass Test\n{\n    static void Main()\n    {\n        ProgressReporter p = WriteProgressToConsole;\n        p += WriteProgressToFile;\n        Util.HardWork(p);\n    }\n\n    static void WriteProgressToConsole(int percentComplete) => Console.WriteLine(percentComplete);\n\n    static void WriteProgressToFile(int percentComplete) => System.IO.File.WriteAllText(\"process.txt\", percentComplete.ToString());\n}\n```\n\n#### 实例目标方法和静态目标方法\n\n将一个实例方法赋值给委托对象时,后者不但要维护方法的引用,还需要维护方法所属的实例的引用.System.Delegate 类的 Target 属性代表这个实例(如果委托引用的是一个静态方法,则该属性值为null).\n\n```cs\npublic delegate void ProgressReporter (int percentComplete);\n\nclass T\n{\n    static void Main()\n    {\n        X x = new X();\n        ProgressReporter p = x.InstanceProgress;\n        p(99);\n        Console.WriteLine(p.Target = x);\n        Console.WriteLine(p.Method);\n    }\n}\n\nclass X\n{\n    public void InstanceProgress(int percentComplete) => Console.WriteLine(percentComplete);\n}\n```\n\n#### 泛型委托类型\n\n委托类型可以包含泛型类型参数.\n\n```cs\npublic class Util\n{\n    public static void Transform<T> (T[] values, Transformer<T> t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t(values[i]);\n        }\n    }\n}\n\nclass Test\n{\n    static void Main()\n    {\n        int[] values = {1, 2, 3};\n        Util.Transform(values, Square);\n        foreach(int i in values)\n        {\n            Console.WriteLine(i + \" \");\n        }\n    }\n\n    static int Square(int x) => x * x;\n}\n```\n\n#### Func 和 Action 委托\n\n有了泛型委托,我们就可以定义出一些非常通用的小型委托类型,它们可以具有任意的返回类型和(合理的)任意数目的参数.它们就是定义在 System 命名空间下的 Func 和 Action 委托\n\n```cs\ndelegate TResult Func <out TResult> ();\ndelegate TResult Func <in T, out TResult> (T arg);\ndelegate TResult Func <in T1, in T2, out TResult> (T1 arg1, T2 arg2);\n....\n\ndelegate void Action ();\ndelegate void Action <in T> (T arg);\ndelegate void Action <in T1, in T2> (T1 arg1, T2 arg2);\n...\n\n```\n\n#### 委托和接口\n\n能用委托解决的问题,都可以用接口解决\n\n```cs\npublic interface ITransformer\n{\n    int Transform (int x);\n}\n\npublic class Util\n{\n    public static void TransformAll (int[] values, ITransformer t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t.Transform(values[i]);\n        }\n    }\n}\n\nclass Squarer : ITransformer\n{\n    public int Transform (int x) => x * x;\n}\n\nstatic void Main()\n{\n    int[] values = { 1, 2, 3};\n    Util.TransforAll(values, new Squarer());\n    foreach(int i in values)\n    {\n        Console.WriteLine(i + \" \");\n    }\n}\n```\n\n如果以下一个或多个条件成立,委托可能是比接口更好的选择\n\n* 接口内仅定义了一个方法\n* 需要多播能力\n* 订阅者需要多次实现接口\n\n#### 委托的兼容性\n\n##### 类型的兼容性\n\n即使签名相似,委托类型也互不兼容\n\n```cs\ndelegate void D1();\ndelegate void D2();\n\nD1 d1 = Method;\nD2 d2 = d1;     //Compile-time error\n```\n\n但是允许下面的写法\n\n```cs\nD2 d2 = new D2 (d1);\n```\n\n如果委托实例指向相同的目标方法,则认为它们是相等的\n如果多播委托按照相同的顺序引用相同的方法,则认为它们是相等的\n\n##### 参数的兼容性\n\n当调用方法时,可以给方法的参数提供更加特定的变量类型,这是正常的多态行为.基于同样的原因,委托也可以有比它目标方法参数类型更加具体的参数类型,这称为逆变.\n\n```cs\ndelegate void StringAction (string s);\n\nclass Test\n{\n    static void Main()\n    {\n        StringAction sa = new StringAction(ActOnObject);\n        sa(\"hello\");\n    }\n\n    static void ActOnObject (object o) => Console.WriteLine(o);\n}\n```\n\n##### 返回类型的兼容性\n\n调用方法时可能得到比请求类型更加特定的返回值类型,这也是正常的多态行为.基于同样的原因,委托的目标方法可能返回比委托声明的返回值类型更加特定的返回值类型,这称为协变.\n\n```cs\ndelegate object ObjectRetriever();\n\nclass Test\n{\n    static void Main()\n    {\n        ObjectRetriever o = new ObjectRetriver (RetrieveString);\n        object result = o();\n        Console.WriteLine(result);\n    }\n\n    static string RetrieveString() => \"hello\";\n}\n```\n\n##### 泛型委托类型的参数协变\n\n如果我们要定义一个泛型委托类型,那么最好参考如下的准则\n\n* 将只用于返回值类型的类型参数标记为协变(out)\n* 将只用于参数的任意类型标记为逆变(in)\n\n这样可以依照类型的继承关系自然地进行类型转换.\n\n```cs\ndelegate TResult Func<out TResult>();\nFunc<string> x = ...;\nFunc<object> y = x;\n\ndelegate void Action<in T> (T arg);\nAction<object> x = ...;\nAction<string> y = x;\n```\n","source":"_posts/CSharp-7.0-核心技术指南摘录(三).md","raw":"---\ntitle: CSharp 7.0 核心技术指南摘录(三)\ndate: 2019-08-19 23:14:58\ncategories: C#\ntags:\n - C#\n - 摘录\n - 解构器\n - 委托\n---\n### 解构器\n\n一个解构器就像构造器的反过程:构造器使用若干值作为参数,并且将它们赋值给字段;而解构器则相反将字段反向赋值给若干变量\n<!--more-->\n解构方法的名字必须为Deconstruct,并且拥有一个或多个out参数\n\n```cs\nclass Rectangle\n{\n    public readonly float Width, Height;\n\n    public Rectangle(float width, float height)\n    {\n        Width = width;\n        Height = height;\n    }\n\n    public void Deconstruct(out float width, out float height)\n    {\n        width = Width;\n        height = Height;\n    }\n}\n```\n\n调用解造器,语法如下\n\n```cs\nvar rect = new Rectangle(3 , 4);\n(float width, float height) = rect;\n```\n\n等价于\n\n```cs\nfloat width, height;\nrect.Deconstruct(out width, out height);\n// rect.Deconstruct(out var width, out var height);\n```\n\n解构调用允许隐式类型推断,可简写为\n\n```cs\n(var width, var height) = rect;\n// var (width, height) = rect;\n```\n\n如果解构中的变量已经定义过了,那么可以忽略类型声明\n\n```cs\nfloat width, height;\n(width, height) = rect;\n```\n\n### 委托\n\n委托是一种知道如何调用方法的对象\n委托类型定义了一个委托实例可以调用的方法,具体来说,它定义了方法的返回类型和参数类型.\n\n```cs\ndelegate int Transformer(int x);\nclasee Test\n{\n    static void Main()\n    {\n        Transformer t = Square;\n        // Transformer t = new Transformer(Square);\n        int result = t(3);\n        // int result = t.Invoke(3);\n        Console.WriteLine(result);\n    }\n    static int Square(int x) => x * x;\n}\n```\n\n委托实例字面上是调用者的代理:调用者调用委托,而委托调用目标方法.这种间接调用方式可以将调用者和目标方法解耦.\n\n#### 用委托书写插件方法\n\n委托变量可以在运行时指定一个目标方法,这个特性可用于编写插件方法,下面的例子中有一个名为Transform的公共方法,它对整数数组的每一个元素进行变换.Transfornm方法接受一个委托参数并以此为插件方法执行变换操作\n\n```cs\npublic delegate int Transformer (int x);\n\nclass Util\n{\n    public static void Transform(int[] values, Transformer t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t(values[i]);\n        }\n    }\n}\n\nclass Test\n{\n    static void Main()\n    {\n        int[] values = {1, 2, 3};\n        Util.Transform(values, Square);\n        foreach( int i in values)\n        {\n            Console.WriteLine(i+\" \");\n        }\n    }\n\n    static int Square(int x) => x * x;\n}\n```\n\n#### 多播委托\n\n所有的委托实例都拥有多播能力,这意味着一个委托实例可以引用一个目标方法,也可以引用一组目标方法.委托可以使用 + 和 += 联结多个委托实例, - 和 -= 会从左侧委托操作数上将右侧委托数删除.\n委托是不可变的,因此调用 += 和 -= 的实质是创建一个新的委托实例,并把它赋值给已有变量.\n若方法的执行时间很长,且该方法定时调用一个委托像调用者报告进程的执行情况.例如,在以下代码中,HardWord 方法通过调用 ProgressReporter 委托参数报告执行进度\n\n```cs\npublic delegate void PeogressReporter (int percentComplete);\n\npublic class Util\n{\n    public static void HardWork (ProgressReporter p)\n    {\n        for(int i = 0; i < 10; i++)\n        {\n            p(i * 10);\n            System.Threading.Thread.Sleep(100);\n        }\n    }\n}\n```\n\n为了监视进度,在Main方法中创建了一个多播委托实例p,这样就可以通过两个独立的方法监视执行进度\n\n```cs\nclass Test\n{\n    static void Main()\n    {\n        ProgressReporter p = WriteProgressToConsole;\n        p += WriteProgressToFile;\n        Util.HardWork(p);\n    }\n\n    static void WriteProgressToConsole(int percentComplete) => Console.WriteLine(percentComplete);\n\n    static void WriteProgressToFile(int percentComplete) => System.IO.File.WriteAllText(\"process.txt\", percentComplete.ToString());\n}\n```\n\n#### 实例目标方法和静态目标方法\n\n将一个实例方法赋值给委托对象时,后者不但要维护方法的引用,还需要维护方法所属的实例的引用.System.Delegate 类的 Target 属性代表这个实例(如果委托引用的是一个静态方法,则该属性值为null).\n\n```cs\npublic delegate void ProgressReporter (int percentComplete);\n\nclass T\n{\n    static void Main()\n    {\n        X x = new X();\n        ProgressReporter p = x.InstanceProgress;\n        p(99);\n        Console.WriteLine(p.Target = x);\n        Console.WriteLine(p.Method);\n    }\n}\n\nclass X\n{\n    public void InstanceProgress(int percentComplete) => Console.WriteLine(percentComplete);\n}\n```\n\n#### 泛型委托类型\n\n委托类型可以包含泛型类型参数.\n\n```cs\npublic class Util\n{\n    public static void Transform<T> (T[] values, Transformer<T> t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t(values[i]);\n        }\n    }\n}\n\nclass Test\n{\n    static void Main()\n    {\n        int[] values = {1, 2, 3};\n        Util.Transform(values, Square);\n        foreach(int i in values)\n        {\n            Console.WriteLine(i + \" \");\n        }\n    }\n\n    static int Square(int x) => x * x;\n}\n```\n\n#### Func 和 Action 委托\n\n有了泛型委托,我们就可以定义出一些非常通用的小型委托类型,它们可以具有任意的返回类型和(合理的)任意数目的参数.它们就是定义在 System 命名空间下的 Func 和 Action 委托\n\n```cs\ndelegate TResult Func <out TResult> ();\ndelegate TResult Func <in T, out TResult> (T arg);\ndelegate TResult Func <in T1, in T2, out TResult> (T1 arg1, T2 arg2);\n....\n\ndelegate void Action ();\ndelegate void Action <in T> (T arg);\ndelegate void Action <in T1, in T2> (T1 arg1, T2 arg2);\n...\n\n```\n\n#### 委托和接口\n\n能用委托解决的问题,都可以用接口解决\n\n```cs\npublic interface ITransformer\n{\n    int Transform (int x);\n}\n\npublic class Util\n{\n    public static void TransformAll (int[] values, ITransformer t)\n    {\n        for(int i = 0; i < values.Lenght; i++)\n        {\n            values[i] = t.Transform(values[i]);\n        }\n    }\n}\n\nclass Squarer : ITransformer\n{\n    public int Transform (int x) => x * x;\n}\n\nstatic void Main()\n{\n    int[] values = { 1, 2, 3};\n    Util.TransforAll(values, new Squarer());\n    foreach(int i in values)\n    {\n        Console.WriteLine(i + \" \");\n    }\n}\n```\n\n如果以下一个或多个条件成立,委托可能是比接口更好的选择\n\n* 接口内仅定义了一个方法\n* 需要多播能力\n* 订阅者需要多次实现接口\n\n#### 委托的兼容性\n\n##### 类型的兼容性\n\n即使签名相似,委托类型也互不兼容\n\n```cs\ndelegate void D1();\ndelegate void D2();\n\nD1 d1 = Method;\nD2 d2 = d1;     //Compile-time error\n```\n\n但是允许下面的写法\n\n```cs\nD2 d2 = new D2 (d1);\n```\n\n如果委托实例指向相同的目标方法,则认为它们是相等的\n如果多播委托按照相同的顺序引用相同的方法,则认为它们是相等的\n\n##### 参数的兼容性\n\n当调用方法时,可以给方法的参数提供更加特定的变量类型,这是正常的多态行为.基于同样的原因,委托也可以有比它目标方法参数类型更加具体的参数类型,这称为逆变.\n\n```cs\ndelegate void StringAction (string s);\n\nclass Test\n{\n    static void Main()\n    {\n        StringAction sa = new StringAction(ActOnObject);\n        sa(\"hello\");\n    }\n\n    static void ActOnObject (object o) => Console.WriteLine(o);\n}\n```\n\n##### 返回类型的兼容性\n\n调用方法时可能得到比请求类型更加特定的返回值类型,这也是正常的多态行为.基于同样的原因,委托的目标方法可能返回比委托声明的返回值类型更加特定的返回值类型,这称为协变.\n\n```cs\ndelegate object ObjectRetriever();\n\nclass Test\n{\n    static void Main()\n    {\n        ObjectRetriever o = new ObjectRetriver (RetrieveString);\n        object result = o();\n        Console.WriteLine(result);\n    }\n\n    static string RetrieveString() => \"hello\";\n}\n```\n\n##### 泛型委托类型的参数协变\n\n如果我们要定义一个泛型委托类型,那么最好参考如下的准则\n\n* 将只用于返回值类型的类型参数标记为协变(out)\n* 将只用于参数的任意类型标记为逆变(in)\n\n这样可以依照类型的继承关系自然地进行类型转换.\n\n```cs\ndelegate TResult Func<out TResult>();\nFunc<string> x = ...;\nFunc<object> y = x;\n\ndelegate void Action<in T> (T arg);\nAction<object> x = ...;\nAction<string> y = x;\n```\n","slug":"CSharp-7.0-核心技术指南摘录(三)","published":1,"updated":"2019-08-22T15:41:59.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yc000ftkuinkewywuo","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"解构器\"><a href=\"#解构器\" class=\"headerlink\" title=\"解构器\"></a>解构器</h3><p>一个解构器就像构造器的反过程:构造器使用若干值作为参数,并且将它们赋值给字段;而解构器则相反将字段反向赋值给若干变量<br><a id=\"more\"></a><br>解构方法的名字必须为Deconstruct,并且拥有一个或多个out参数</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">float</span> Width, Height;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span>(<span class=\"params\"><span class=\"keyword\">float</span> width, <span class=\"keyword\">float</span> height</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Width = width;</span><br><span class=\"line\">        Height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">float</span> width, <span class=\"keyword\">out</span> <span class=\"keyword\">float</span> height</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        width = Width;</span><br><span class=\"line\">        height = Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>调用解造器,语法如下</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">3</span> , <span class=\"number\">4</span>);</span><br><span class=\"line\">(<span class=\"keyword\">float</span> width, <span class=\"keyword\">float</span> height) = rect;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> width, height;</span><br><span class=\"line\">rect.Deconstruct(<span class=\"keyword\">out</span> width, <span class=\"keyword\">out</span> height);</span><br><span class=\"line\"><span class=\"comment\">// rect.Deconstruct(out var width, out var height);</span></span><br></pre></td></tr></table></figure><p>解构调用允许隐式类型推断,可简写为</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">var</span> width, <span class=\"keyword\">var</span> height) = rect;</span><br><span class=\"line\"><span class=\"comment\">// var (width, height) = rect;</span></span><br></pre></td></tr></table></figure><p>如果解构中的变量已经定义过了,那么可以忽略类型声明</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> width, height;</span><br><span class=\"line\">(width, height) = rect;</span><br></pre></td></tr></table></figure><h3 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h3><p>委托是一种知道如何调用方法的对象<br>委托类型定义了一个委托实例可以调用的方法,具体来说,它定义了方法的返回类型和参数类型.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">int</span> <span class=\"title\">Transformer</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>)</span>;</span><br><span class=\"line\">clasee Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Transformer t = Square;</span><br><span class=\"line\">        <span class=\"comment\">// Transformer t = new Transformer(Square);</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = t(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"comment\">// int result = t.Invoke(3);</span></span><br><span class=\"line\">        Console.WriteLine(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>) </span>=&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>委托实例字面上是调用者的代理:调用者调用委托,而委托调用目标方法.这种间接调用方式可以将调用者和目标方法解耦.</p><h4 id=\"用委托书写插件方法\"><a href=\"#用委托书写插件方法\" class=\"headerlink\" title=\"用委托书写插件方法\"></a>用委托书写插件方法</h4><p>委托变量可以在运行时指定一个目标方法,这个特性可用于编写插件方法,下面的例子中有一个名为Transform的公共方法,它对整数数组的每一个元素进行变换.Transfornm方法接受一个委托参数并以此为插件方法执行变换操作</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">int</span> <span class=\"title\">Transformer</span> (<span class=\"params\"><span class=\"keyword\">int</span> x</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Transform</span>(<span class=\"params\"><span class=\"keyword\">int</span>[] values, Transformer t</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] values = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        Util.Transform(values, Square);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>( <span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(i+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>) </span>=&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"多播委托\"><a href=\"#多播委托\" class=\"headerlink\" title=\"多播委托\"></a>多播委托</h4><p>所有的委托实例都拥有多播能力,这意味着一个委托实例可以引用一个目标方法,也可以引用一组目标方法.委托可以使用 + 和 += 联结多个委托实例, - 和 -= 会从左侧委托操作数上将右侧委托数删除.<br>委托是不可变的,因此调用 += 和 -= 的实质是创建一个新的委托实例,并把它赋值给已有变量.<br>若方法的执行时间很长,且该方法定时调用一个委托像调用者报告进程的执行情况.例如,在以下代码中,HardWord 方法通过调用 ProgressReporter 委托参数报告执行进度</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">PeogressReporter</span> (<span class=\"params\"><span class=\"keyword\">int</span> percentComplete</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">HardWork</span> (<span class=\"params\">ProgressReporter p</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p(i * <span class=\"number\">10</span>);</span><br><span class=\"line\">            System.Threading.Thread.Sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>为了监视进度,在Main方法中创建了一个多播委托实例p,这样就可以通过两个独立的方法监视执行进度</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ProgressReporter p = WriteProgressToConsole;</span><br><span class=\"line\">        p += WriteProgressToFile;</span><br><span class=\"line\">        Util.HardWork(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteProgressToConsole</span>(<span class=\"params\"><span class=\"keyword\">int</span> percentComplete</span>) </span>=&gt; Console.WriteLine(percentComplete);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteProgressToFile</span>(<span class=\"params\"><span class=\"keyword\">int</span> percentComplete</span>) </span>=&gt; System.IO.File.WriteAllText(<span class=\"string\">\"process.txt\"</span>, percentComplete.ToString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"实例目标方法和静态目标方法\"><a href=\"#实例目标方法和静态目标方法\" class=\"headerlink\" title=\"实例目标方法和静态目标方法\"></a>实例目标方法和静态目标方法</h4><p>将一个实例方法赋值给委托对象时,后者不但要维护方法的引用,还需要维护方法所属的实例的引用.System.Delegate 类的 Target 属性代表这个实例(如果委托引用的是一个静态方法,则该属性值为null).</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">ProgressReporter</span> (<span class=\"params\"><span class=\"keyword\">int</span> percentComplete</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">T</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        X x = <span class=\"keyword\">new</span> X();</span><br><span class=\"line\">        ProgressReporter p = x.InstanceProgress;</span><br><span class=\"line\">        p(<span class=\"number\">99</span>);</span><br><span class=\"line\">        Console.WriteLine(p.Target = x);</span><br><span class=\"line\">        Console.WriteLine(p.Method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">X</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InstanceProgress</span>(<span class=\"params\"><span class=\"keyword\">int</span> percentComplete</span>) </span>=&gt; Console.WriteLine(percentComplete);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"泛型委托类型\"><a href=\"#泛型委托类型\" class=\"headerlink\" title=\"泛型委托类型\"></a>泛型委托类型</h4><p>委托类型可以包含泛型类型参数.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Transform&lt;T&gt; (T[] values, Transformer&lt;T&gt; t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] values = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        Util.Transform(values, Square);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(i + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>) </span>=&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Func-和-Action-委托\"><a href=\"#Func-和-Action-委托\" class=\"headerlink\" title=\"Func 和 Action 委托\"></a>Func 和 Action 委托</h4><p>有了泛型委托,我们就可以定义出一些非常通用的小型委托类型,它们可以具有任意的返回类型和(合理的)任意数目的参数.它们就是定义在 System 命名空间下的 Func 和 Action 委托</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delegate</span> TResult Func &lt;<span class=\"keyword\">out</span> TResult&gt; ();</span><br><span class=\"line\"><span class=\"keyword\">delegate</span> TResult Func &lt;<span class=\"keyword\">in</span> T, <span class=\"keyword\">out</span> TResult&gt; (T arg);</span><br><span class=\"line\"><span class=\"keyword\">delegate</span> TResult Func &lt;<span class=\"keyword\">in</span> T1, <span class=\"keyword\">in</span> T2, <span class=\"keyword\">out</span> TResult&gt; (T1 arg1, T2 arg2);</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span> (<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> Action &lt;<span class=\"keyword\">in</span> T&gt; (T arg);</span><br><span class=\"line\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> Action &lt;<span class=\"keyword\">in</span> T1, <span class=\"keyword\">in</span> T2&gt; (T1 arg1, T2 arg2);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h4 id=\"委托和接口\"><a href=\"#委托和接口\" class=\"headerlink\" title=\"委托和接口\"></a>委托和接口</h4><p>能用委托解决的问题,都可以用接口解决</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ITransformer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Transform</span> (<span class=\"params\"><span class=\"keyword\">int</span> x</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TransformAll</span> (<span class=\"params\"><span class=\"keyword\">int</span>[] values, ITransformer t</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t.Transform(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Squarer</span> : <span class=\"title\">ITransformer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Transform</span> (<span class=\"params\"><span class=\"keyword\">int</span> x</span>) </span>=&gt; x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] values = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    Util.TransforAll(values, <span class=\"keyword\">new</span> Squarer());</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(<span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(i + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>如果以下一个或多个条件成立,委托可能是比接口更好的选择</p><ul><li>接口内仅定义了一个方法</li><li>需要多播能力</li><li>订阅者需要多次实现接口</li></ul><h4 id=\"委托的兼容性\"><a href=\"#委托的兼容性\" class=\"headerlink\" title=\"委托的兼容性\"></a>委托的兼容性</h4><h5 id=\"类型的兼容性\"><a href=\"#类型的兼容性\" class=\"headerlink\" title=\"类型的兼容性\"></a>类型的兼容性</h5><p>即使签名相似,委托类型也互不兼容</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">D1</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">D2</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">D1 d1 = Method;</span><br><span class=\"line\">D2 d2 = d1;     <span class=\"comment\">//Compile-time error</span></span><br></pre></td></tr></table></figure><p>但是允许下面的写法</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D2 d2 = <span class=\"keyword\">new</span> D2 (d1);</span><br></pre></td></tr></table></figure><p>如果委托实例指向相同的目标方法,则认为它们是相等的<br>如果多播委托按照相同的顺序引用相同的方法,则认为它们是相等的</p><h5 id=\"参数的兼容性\"><a href=\"#参数的兼容性\" class=\"headerlink\" title=\"参数的兼容性\"></a>参数的兼容性</h5><p>当调用方法时,可以给方法的参数提供更加特定的变量类型,这是正常的多态行为.基于同样的原因,委托也可以有比它目标方法参数类型更加具体的参数类型,这称为逆变.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">StringAction</span> (<span class=\"params\"><span class=\"keyword\">string</span> s</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        StringAction sa = <span class=\"keyword\">new</span> StringAction(ActOnObject);</span><br><span class=\"line\">        sa(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ActOnObject</span> (<span class=\"params\"><span class=\"keyword\">object</span> o</span>) </span>=&gt; Console.WriteLine(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"返回类型的兼容性\"><a href=\"#返回类型的兼容性\" class=\"headerlink\" title=\"返回类型的兼容性\"></a>返回类型的兼容性</h5><p>调用方法时可能得到比请求类型更加特定的返回值类型,这也是正常的多态行为.基于同样的原因,委托的目标方法可能返回比委托声明的返回值类型更加特定的返回值类型,这称为协变.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">object</span> <span class=\"title\">ObjectRetriever</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ObjectRetriever o = <span class=\"keyword\">new</span> ObjectRetriver (RetrieveString);</span><br><span class=\"line\">        <span class=\"keyword\">object</span> result = o();</span><br><span class=\"line\">        Console.WriteLine(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">RetrieveString</span>(<span class=\"params\"></span>) </span>=&gt; <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"泛型委托类型的参数协变\"><a href=\"#泛型委托类型的参数协变\" class=\"headerlink\" title=\"泛型委托类型的参数协变\"></a>泛型委托类型的参数协变</h5><p>如果我们要定义一个泛型委托类型,那么最好参考如下的准则</p><ul><li>将只用于返回值类型的类型参数标记为协变(out)</li><li>将只用于参数的任意类型标记为逆变(in)</li></ul><p>这样可以依照类型的继承关系自然地进行类型转换.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delegate</span> TResult Func&lt;<span class=\"keyword\">out</span> TResult&gt;();</span><br><span class=\"line\">Func&lt;<span class=\"keyword\">string</span>&gt; x = ...;</span><br><span class=\"line\">Func&lt;<span class=\"keyword\">object</span>&gt; y = x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> Action&lt;<span class=\"keyword\">in</span> T&gt; (T arg);</span><br><span class=\"line\">Action&lt;<span class=\"keyword\">object</span>&gt; x = ...;</span><br><span class=\"line\">Action&lt;<span class=\"keyword\">string</span>&gt; y = x;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"解构器\"><a href=\"#解构器\" class=\"headerlink\" title=\"解构器\"></a>解构器</h3><p>一个解构器就像构造器的反过程:构造器使用若干值作为参数,并且将它们赋值给字段;而解构器则相反将字段反向赋值给若干变量<br>","more":"<br>解构方法的名字必须为Deconstruct,并且拥有一个或多个out参数</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">float</span> Width, Height;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span>(<span class=\"params\"><span class=\"keyword\">float</span> width, <span class=\"keyword\">float</span> height</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Width = width;</span><br><span class=\"line\">        Height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">float</span> width, <span class=\"keyword\">out</span> <span class=\"keyword\">float</span> height</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        width = Width;</span><br><span class=\"line\">        height = Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>调用解造器,语法如下</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">3</span> , <span class=\"number\">4</span>);</span><br><span class=\"line\">(<span class=\"keyword\">float</span> width, <span class=\"keyword\">float</span> height) = rect;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> width, height;</span><br><span class=\"line\">rect.Deconstruct(<span class=\"keyword\">out</span> width, <span class=\"keyword\">out</span> height);</span><br><span class=\"line\"><span class=\"comment\">// rect.Deconstruct(out var width, out var height);</span></span><br></pre></td></tr></table></figure><p>解构调用允许隐式类型推断,可简写为</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">var</span> width, <span class=\"keyword\">var</span> height) = rect;</span><br><span class=\"line\"><span class=\"comment\">// var (width, height) = rect;</span></span><br></pre></td></tr></table></figure><p>如果解构中的变量已经定义过了,那么可以忽略类型声明</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> width, height;</span><br><span class=\"line\">(width, height) = rect;</span><br></pre></td></tr></table></figure><h3 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h3><p>委托是一种知道如何调用方法的对象<br>委托类型定义了一个委托实例可以调用的方法,具体来说,它定义了方法的返回类型和参数类型.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">int</span> <span class=\"title\">Transformer</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>)</span>;</span><br><span class=\"line\">clasee Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Transformer t = Square;</span><br><span class=\"line\">        <span class=\"comment\">// Transformer t = new Transformer(Square);</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = t(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"comment\">// int result = t.Invoke(3);</span></span><br><span class=\"line\">        Console.WriteLine(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>) </span>=&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>委托实例字面上是调用者的代理:调用者调用委托,而委托调用目标方法.这种间接调用方式可以将调用者和目标方法解耦.</p><h4 id=\"用委托书写插件方法\"><a href=\"#用委托书写插件方法\" class=\"headerlink\" title=\"用委托书写插件方法\"></a>用委托书写插件方法</h4><p>委托变量可以在运行时指定一个目标方法,这个特性可用于编写插件方法,下面的例子中有一个名为Transform的公共方法,它对整数数组的每一个元素进行变换.Transfornm方法接受一个委托参数并以此为插件方法执行变换操作</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">int</span> <span class=\"title\">Transformer</span> (<span class=\"params\"><span class=\"keyword\">int</span> x</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Transform</span>(<span class=\"params\"><span class=\"keyword\">int</span>[] values, Transformer t</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] values = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        Util.Transform(values, Square);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>( <span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(i+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>) </span>=&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"多播委托\"><a href=\"#多播委托\" class=\"headerlink\" title=\"多播委托\"></a>多播委托</h4><p>所有的委托实例都拥有多播能力,这意味着一个委托实例可以引用一个目标方法,也可以引用一组目标方法.委托可以使用 + 和 += 联结多个委托实例, - 和 -= 会从左侧委托操作数上将右侧委托数删除.<br>委托是不可变的,因此调用 += 和 -= 的实质是创建一个新的委托实例,并把它赋值给已有变量.<br>若方法的执行时间很长,且该方法定时调用一个委托像调用者报告进程的执行情况.例如,在以下代码中,HardWord 方法通过调用 ProgressReporter 委托参数报告执行进度</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">PeogressReporter</span> (<span class=\"params\"><span class=\"keyword\">int</span> percentComplete</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">HardWork</span> (<span class=\"params\">ProgressReporter p</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p(i * <span class=\"number\">10</span>);</span><br><span class=\"line\">            System.Threading.Thread.Sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>为了监视进度,在Main方法中创建了一个多播委托实例p,这样就可以通过两个独立的方法监视执行进度</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ProgressReporter p = WriteProgressToConsole;</span><br><span class=\"line\">        p += WriteProgressToFile;</span><br><span class=\"line\">        Util.HardWork(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteProgressToConsole</span>(<span class=\"params\"><span class=\"keyword\">int</span> percentComplete</span>) </span>=&gt; Console.WriteLine(percentComplete);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteProgressToFile</span>(<span class=\"params\"><span class=\"keyword\">int</span> percentComplete</span>) </span>=&gt; System.IO.File.WriteAllText(<span class=\"string\">\"process.txt\"</span>, percentComplete.ToString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"实例目标方法和静态目标方法\"><a href=\"#实例目标方法和静态目标方法\" class=\"headerlink\" title=\"实例目标方法和静态目标方法\"></a>实例目标方法和静态目标方法</h4><p>将一个实例方法赋值给委托对象时,后者不但要维护方法的引用,还需要维护方法所属的实例的引用.System.Delegate 类的 Target 属性代表这个实例(如果委托引用的是一个静态方法,则该属性值为null).</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">ProgressReporter</span> (<span class=\"params\"><span class=\"keyword\">int</span> percentComplete</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">T</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        X x = <span class=\"keyword\">new</span> X();</span><br><span class=\"line\">        ProgressReporter p = x.InstanceProgress;</span><br><span class=\"line\">        p(<span class=\"number\">99</span>);</span><br><span class=\"line\">        Console.WriteLine(p.Target = x);</span><br><span class=\"line\">        Console.WriteLine(p.Method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">X</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InstanceProgress</span>(<span class=\"params\"><span class=\"keyword\">int</span> percentComplete</span>) </span>=&gt; Console.WriteLine(percentComplete);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"泛型委托类型\"><a href=\"#泛型委托类型\" class=\"headerlink\" title=\"泛型委托类型\"></a>泛型委托类型</h4><p>委托类型可以包含泛型类型参数.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Transform&lt;T&gt; (T[] values, Transformer&lt;T&gt; t)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] values = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        Util.Transform(values, Square);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(i + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"keyword\">int</span> x</span>) </span>=&gt; x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Func-和-Action-委托\"><a href=\"#Func-和-Action-委托\" class=\"headerlink\" title=\"Func 和 Action 委托\"></a>Func 和 Action 委托</h4><p>有了泛型委托,我们就可以定义出一些非常通用的小型委托类型,它们可以具有任意的返回类型和(合理的)任意数目的参数.它们就是定义在 System 命名空间下的 Func 和 Action 委托</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delegate</span> TResult Func &lt;<span class=\"keyword\">out</span> TResult&gt; ();</span><br><span class=\"line\"><span class=\"keyword\">delegate</span> TResult Func &lt;<span class=\"keyword\">in</span> T, <span class=\"keyword\">out</span> TResult&gt; (T arg);</span><br><span class=\"line\"><span class=\"keyword\">delegate</span> TResult Func &lt;<span class=\"keyword\">in</span> T1, <span class=\"keyword\">in</span> T2, <span class=\"keyword\">out</span> TResult&gt; (T1 arg1, T2 arg2);</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span> (<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> Action &lt;<span class=\"keyword\">in</span> T&gt; (T arg);</span><br><span class=\"line\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> Action &lt;<span class=\"keyword\">in</span> T1, <span class=\"keyword\">in</span> T2&gt; (T1 arg1, T2 arg2);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h4 id=\"委托和接口\"><a href=\"#委托和接口\" class=\"headerlink\" title=\"委托和接口\"></a>委托和接口</h4><p>能用委托解决的问题,都可以用接口解决</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ITransformer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Transform</span> (<span class=\"params\"><span class=\"keyword\">int</span> x</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Util</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TransformAll</span> (<span class=\"params\"><span class=\"keyword\">int</span>[] values, ITransformer t</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; values.Lenght; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            values[i] = t.Transform(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Squarer</span> : <span class=\"title\">ITransformer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Transform</span> (<span class=\"params\"><span class=\"keyword\">int</span> x</span>) </span>=&gt; x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] values = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    Util.TransforAll(values, <span class=\"keyword\">new</span> Squarer());</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>(<span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(i + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>如果以下一个或多个条件成立,委托可能是比接口更好的选择</p><ul><li>接口内仅定义了一个方法</li><li>需要多播能力</li><li>订阅者需要多次实现接口</li></ul><h4 id=\"委托的兼容性\"><a href=\"#委托的兼容性\" class=\"headerlink\" title=\"委托的兼容性\"></a>委托的兼容性</h4><h5 id=\"类型的兼容性\"><a href=\"#类型的兼容性\" class=\"headerlink\" title=\"类型的兼容性\"></a>类型的兼容性</h5><p>即使签名相似,委托类型也互不兼容</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">D1</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">D2</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">D1 d1 = Method;</span><br><span class=\"line\">D2 d2 = d1;     <span class=\"comment\">//Compile-time error</span></span><br></pre></td></tr></table></figure><p>但是允许下面的写法</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D2 d2 = <span class=\"keyword\">new</span> D2 (d1);</span><br></pre></td></tr></table></figure><p>如果委托实例指向相同的目标方法,则认为它们是相等的<br>如果多播委托按照相同的顺序引用相同的方法,则认为它们是相等的</p><h5 id=\"参数的兼容性\"><a href=\"#参数的兼容性\" class=\"headerlink\" title=\"参数的兼容性\"></a>参数的兼容性</h5><p>当调用方法时,可以给方法的参数提供更加特定的变量类型,这是正常的多态行为.基于同样的原因,委托也可以有比它目标方法参数类型更加具体的参数类型,这称为逆变.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">StringAction</span> (<span class=\"params\"><span class=\"keyword\">string</span> s</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        StringAction sa = <span class=\"keyword\">new</span> StringAction(ActOnObject);</span><br><span class=\"line\">        sa(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ActOnObject</span> (<span class=\"params\"><span class=\"keyword\">object</span> o</span>) </span>=&gt; Console.WriteLine(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"返回类型的兼容性\"><a href=\"#返回类型的兼容性\" class=\"headerlink\" title=\"返回类型的兼容性\"></a>返回类型的兼容性</h5><p>调用方法时可能得到比请求类型更加特定的返回值类型,这也是正常的多态行为.基于同样的原因,委托的目标方法可能返回比委托声明的返回值类型更加特定的返回值类型,这称为协变.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">object</span> <span class=\"title\">ObjectRetriever</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ObjectRetriever o = <span class=\"keyword\">new</span> ObjectRetriver (RetrieveString);</span><br><span class=\"line\">        <span class=\"keyword\">object</span> result = o();</span><br><span class=\"line\">        Console.WriteLine(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">RetrieveString</span>(<span class=\"params\"></span>) </span>=&gt; <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"泛型委托类型的参数协变\"><a href=\"#泛型委托类型的参数协变\" class=\"headerlink\" title=\"泛型委托类型的参数协变\"></a>泛型委托类型的参数协变</h5><p>如果我们要定义一个泛型委托类型,那么最好参考如下的准则</p><ul><li>将只用于返回值类型的类型参数标记为协变(out)</li><li>将只用于参数的任意类型标记为逆变(in)</li></ul><p>这样可以依照类型的继承关系自然地进行类型转换.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delegate</span> TResult Func&lt;<span class=\"keyword\">out</span> TResult&gt;();</span><br><span class=\"line\">Func&lt;<span class=\"keyword\">string</span>&gt; x = ...;</span><br><span class=\"line\">Func&lt;<span class=\"keyword\">object</span>&gt; y = x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> Action&lt;<span class=\"keyword\">in</span> T&gt; (T arg);</span><br><span class=\"line\">Action&lt;<span class=\"keyword\">object</span>&gt; x = ...;</span><br><span class=\"line\">Action&lt;<span class=\"keyword\">string</span>&gt; y = x;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"CSharp 7.0 核心技术指南摘录(五)","date":"2019-09-01T15:14:58.000Z","_content":"### 字符分类静态方法\n\n静态方法 | 包含的方法 | 包含的 Unicode 分类\n:- | :- | :-\nIsLetter | A-Z,a-z和其他字母字符 | UpperCaseLetter, LowerCaseLetter, TitleCseLetter, ModifierLetter, OtherLetter\nIsUpper | 大写字母| UpperCaseLetter\nIsLower | 小写字母| LowerCaseLetter\nIsDigit | 0-9和其他字母表中的数字| DecimalDigitNumber\nIsLetterOrDigit | 字母和数字| (IsLetter, IsDigit)\nIsNumber | 所有数字以及 Unicode 分数和罗马数字符号| DecimalDigitNumber, LetterNumber, OtherNumber\nIsSeparator | 空格与所有 Unicode 分隔符| LineSeparator, ParagraphSeparator\nIsEhiteSpace | 所有的分隔符,以及 \\n, \\r, \\t, \\f和 \\v| LineSeparator, ParagraphSeparator\nIsPunctuation | 西方和其他字母表中的标点符号| DashPunctuation, ConnectorPunctuation, InitialQuotePunctuation, FinalQuotePunctuation\nIsSymbol | 大部分其他的可打印符号| MathSymbol, ModifierSymbol, OtherSymbol\nIsControl | 值小于 0x20 的不可打印的控制字符.例如 \\r, \\n, \\t, \\0 和 0x7F 与 0x9A 之间字符| (无)\n\n<!--more-->\n\n### 数值转换总结\n\n任务 | 函数 | 示例\n:- | :- | :-\n解析十进制数字 | Parse, TryParse | double i = double.Parse(\"3.5\");\n解析二进制,八进制,十六进制数字 | Convert.To('数字') | int i= Convert.ToInt32(\"1E\", 16);\n按十六进制格式化 | ToString('数字') | string hex = 45.ToString(\"X\");\n无损数值转换 | 隐式转换 | int i = 32; double d = i;\n截断式数值转换 | 显式转换 | double d = 23.5; int i = (int)d;\n舍入式数值转换 | Convert.To()数字 | double d = 23.5; int i = Convert.ToInt32(d);\n\n### 静态 Math 类的方法\n\n类别 | 方法\n:- | :-\n舍入 | Round, Truncate, Floor, Ceiling\n最大值/最小值 | Max, Min\n绝对值和符号 | Abs, Sign\n平方根 | Sqrt\n幂运算 | Pow, Exp\n对数运算 |Log, Log10\n三角函数 | Sin, Cos, Tan, Sinh, Cosh, Tanh, Asin, Acos, Atan\n","source":"_posts/CSharp-7.0-核心技术指南摘录(五) .md","raw":"---\ntitle: CSharp 7.0 核心技术指南摘录(五)\ndate: 2019-09-01 23:14:58\ncategories: C#\ntags:\n - C#\n - 摘录\n---\n### 字符分类静态方法\n\n静态方法 | 包含的方法 | 包含的 Unicode 分类\n:- | :- | :-\nIsLetter | A-Z,a-z和其他字母字符 | UpperCaseLetter, LowerCaseLetter, TitleCseLetter, ModifierLetter, OtherLetter\nIsUpper | 大写字母| UpperCaseLetter\nIsLower | 小写字母| LowerCaseLetter\nIsDigit | 0-9和其他字母表中的数字| DecimalDigitNumber\nIsLetterOrDigit | 字母和数字| (IsLetter, IsDigit)\nIsNumber | 所有数字以及 Unicode 分数和罗马数字符号| DecimalDigitNumber, LetterNumber, OtherNumber\nIsSeparator | 空格与所有 Unicode 分隔符| LineSeparator, ParagraphSeparator\nIsEhiteSpace | 所有的分隔符,以及 \\n, \\r, \\t, \\f和 \\v| LineSeparator, ParagraphSeparator\nIsPunctuation | 西方和其他字母表中的标点符号| DashPunctuation, ConnectorPunctuation, InitialQuotePunctuation, FinalQuotePunctuation\nIsSymbol | 大部分其他的可打印符号| MathSymbol, ModifierSymbol, OtherSymbol\nIsControl | 值小于 0x20 的不可打印的控制字符.例如 \\r, \\n, \\t, \\0 和 0x7F 与 0x9A 之间字符| (无)\n\n<!--more-->\n\n### 数值转换总结\n\n任务 | 函数 | 示例\n:- | :- | :-\n解析十进制数字 | Parse, TryParse | double i = double.Parse(\"3.5\");\n解析二进制,八进制,十六进制数字 | Convert.To('数字') | int i= Convert.ToInt32(\"1E\", 16);\n按十六进制格式化 | ToString('数字') | string hex = 45.ToString(\"X\");\n无损数值转换 | 隐式转换 | int i = 32; double d = i;\n截断式数值转换 | 显式转换 | double d = 23.5; int i = (int)d;\n舍入式数值转换 | Convert.To()数字 | double d = 23.5; int i = Convert.ToInt32(d);\n\n### 静态 Math 类的方法\n\n类别 | 方法\n:- | :-\n舍入 | Round, Truncate, Floor, Ceiling\n最大值/最小值 | Max, Min\n绝对值和符号 | Abs, Sign\n平方根 | Sqrt\n幂运算 | Pow, Exp\n对数运算 |Log, Log10\n三角函数 | Sin, Cos, Tan, Sinh, Cosh, Tanh, Asin, Acos, Atan\n","slug":"CSharp-7.0-核心技术指南摘录(五) ","published":1,"updated":"2019-11-02T04:49:36.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yd000gtkuisej3h2gy","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"字符分类静态方法\"><a href=\"#字符分类静态方法\" class=\"headerlink\" title=\"字符分类静态方法\"></a>字符分类静态方法</h3><table><thead><tr><th style=\"text-align:left\">静态方法</th><th style=\"text-align:left\">包含的方法</th><th style=\"text-align:left\">包含的 Unicode 分类</th></tr></thead><tbody><tr><td style=\"text-align:left\">IsLetter</td><td style=\"text-align:left\">A-Z,a-z和其他字母字符</td><td style=\"text-align:left\">UpperCaseLetter, LowerCaseLetter, TitleCseLetter, ModifierLetter, OtherLetter</td></tr><tr><td style=\"text-align:left\">IsUpper</td><td style=\"text-align:left\">大写字母</td><td style=\"text-align:left\">UpperCaseLetter</td></tr><tr><td style=\"text-align:left\">IsLower</td><td style=\"text-align:left\">小写字母</td><td style=\"text-align:left\">LowerCaseLetter</td></tr><tr><td style=\"text-align:left\">IsDigit</td><td style=\"text-align:left\">0-9和其他字母表中的数字</td><td style=\"text-align:left\">DecimalDigitNumber</td></tr><tr><td style=\"text-align:left\">IsLetterOrDigit</td><td style=\"text-align:left\">字母和数字</td><td style=\"text-align:left\">(IsLetter, IsDigit)</td></tr><tr><td style=\"text-align:left\">IsNumber</td><td style=\"text-align:left\">所有数字以及 Unicode 分数和罗马数字符号</td><td style=\"text-align:left\">DecimalDigitNumber, LetterNumber, OtherNumber</td></tr><tr><td style=\"text-align:left\">IsSeparator</td><td style=\"text-align:left\">空格与所有 Unicode 分隔符</td><td style=\"text-align:left\">LineSeparator, ParagraphSeparator</td></tr><tr><td style=\"text-align:left\">IsEhiteSpace</td><td style=\"text-align:left\">所有的分隔符,以及 \\n, \\r, \\t, \\f和 \\v</td><td style=\"text-align:left\">LineSeparator, ParagraphSeparator</td></tr><tr><td style=\"text-align:left\">IsPunctuation</td><td style=\"text-align:left\">西方和其他字母表中的标点符号</td><td style=\"text-align:left\">DashPunctuation, ConnectorPunctuation, InitialQuotePunctuation, FinalQuotePunctuation</td></tr><tr><td style=\"text-align:left\">IsSymbol</td><td style=\"text-align:left\">大部分其他的可打印符号</td><td style=\"text-align:left\">MathSymbol, ModifierSymbol, OtherSymbol</td></tr><tr><td style=\"text-align:left\">IsControl</td><td style=\"text-align:left\">值小于 0x20 的不可打印的控制字符.例如 \\r, \\n, \\t, \\0 和 0x7F 与 0x9A 之间字符</td><td style=\"text-align:left\">(无)</td></tr></tbody></table><a id=\"more\"></a><h3 id=\"数值转换总结\"><a href=\"#数值转换总结\" class=\"headerlink\" title=\"数值转换总结\"></a>数值转换总结</h3><table><thead><tr><th style=\"text-align:left\">任务</th><th style=\"text-align:left\">函数</th><th style=\"text-align:left\">示例</th></tr></thead><tbody><tr><td style=\"text-align:left\">解析十进制数字</td><td style=\"text-align:left\">Parse, TryParse</td><td style=\"text-align:left\">double i = double.Parse(“3.5”);</td></tr><tr><td style=\"text-align:left\">解析二进制,八进制,十六进制数字</td><td style=\"text-align:left\">Convert.To(‘数字’)</td><td style=\"text-align:left\">int i= Convert.ToInt32(“1E”, 16);</td></tr><tr><td style=\"text-align:left\">按十六进制格式化</td><td style=\"text-align:left\">ToString(‘数字’)</td><td style=\"text-align:left\">string hex = 45.ToString(“X”);</td></tr><tr><td style=\"text-align:left\">无损数值转换</td><td style=\"text-align:left\">隐式转换</td><td style=\"text-align:left\">int i = 32; double d = i;</td></tr><tr><td style=\"text-align:left\">截断式数值转换</td><td style=\"text-align:left\">显式转换</td><td style=\"text-align:left\">double d = 23.5; int i = (int)d;</td></tr><tr><td style=\"text-align:left\">舍入式数值转换</td><td style=\"text-align:left\">Convert.To()数字</td><td style=\"text-align:left\">double d = 23.5; int i = Convert.ToInt32(d);</td></tr></tbody></table><h3 id=\"静态-Math-类的方法\"><a href=\"#静态-Math-类的方法\" class=\"headerlink\" title=\"静态 Math 类的方法\"></a>静态 Math 类的方法</h3><table><thead><tr><th style=\"text-align:left\">类别</th><th style=\"text-align:left\">方法</th></tr></thead><tbody><tr><td style=\"text-align:left\">舍入</td><td style=\"text-align:left\">Round, Truncate, Floor, Ceiling</td></tr><tr><td style=\"text-align:left\">最大值/最小值</td><td style=\"text-align:left\">Max, Min</td></tr><tr><td style=\"text-align:left\">绝对值和符号</td><td style=\"text-align:left\">Abs, Sign</td></tr><tr><td style=\"text-align:left\">平方根</td><td style=\"text-align:left\">Sqrt</td></tr><tr><td style=\"text-align:left\">幂运算</td><td style=\"text-align:left\">Pow, Exp</td></tr><tr><td style=\"text-align:left\">对数运算</td><td style=\"text-align:left\">Log, Log10</td></tr><tr><td style=\"text-align:left\">三角函数</td><td style=\"text-align:left\">Sin, Cos, Tan, Sinh, Cosh, Tanh, Asin, Acos, Atan</td></tr></tbody></table><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"字符分类静态方法\"><a href=\"#字符分类静态方法\" class=\"headerlink\" title=\"字符分类静态方法\"></a>字符分类静态方法</h3><table><thead><tr><th style=\"text-align:left\">静态方法</th><th style=\"text-align:left\">包含的方法</th><th style=\"text-align:left\">包含的 Unicode 分类</th></tr></thead><tbody><tr><td style=\"text-align:left\">IsLetter</td><td style=\"text-align:left\">A-Z,a-z和其他字母字符</td><td style=\"text-align:left\">UpperCaseLetter, LowerCaseLetter, TitleCseLetter, ModifierLetter, OtherLetter</td></tr><tr><td style=\"text-align:left\">IsUpper</td><td style=\"text-align:left\">大写字母</td><td style=\"text-align:left\">UpperCaseLetter</td></tr><tr><td style=\"text-align:left\">IsLower</td><td style=\"text-align:left\">小写字母</td><td style=\"text-align:left\">LowerCaseLetter</td></tr><tr><td style=\"text-align:left\">IsDigit</td><td style=\"text-align:left\">0-9和其他字母表中的数字</td><td style=\"text-align:left\">DecimalDigitNumber</td></tr><tr><td style=\"text-align:left\">IsLetterOrDigit</td><td style=\"text-align:left\">字母和数字</td><td style=\"text-align:left\">(IsLetter, IsDigit)</td></tr><tr><td style=\"text-align:left\">IsNumber</td><td style=\"text-align:left\">所有数字以及 Unicode 分数和罗马数字符号</td><td style=\"text-align:left\">DecimalDigitNumber, LetterNumber, OtherNumber</td></tr><tr><td style=\"text-align:left\">IsSeparator</td><td style=\"text-align:left\">空格与所有 Unicode 分隔符</td><td style=\"text-align:left\">LineSeparator, ParagraphSeparator</td></tr><tr><td style=\"text-align:left\">IsEhiteSpace</td><td style=\"text-align:left\">所有的分隔符,以及 \\n, \\r, \\t, \\f和 \\v</td><td style=\"text-align:left\">LineSeparator, ParagraphSeparator</td></tr><tr><td style=\"text-align:left\">IsPunctuation</td><td style=\"text-align:left\">西方和其他字母表中的标点符号</td><td style=\"text-align:left\">DashPunctuation, ConnectorPunctuation, InitialQuotePunctuation, FinalQuotePunctuation</td></tr><tr><td style=\"text-align:left\">IsSymbol</td><td style=\"text-align:left\">大部分其他的可打印符号</td><td style=\"text-align:left\">MathSymbol, ModifierSymbol, OtherSymbol</td></tr><tr><td style=\"text-align:left\">IsControl</td><td style=\"text-align:left\">值小于 0x20 的不可打印的控制字符.例如 \\r, \\n, \\t, \\0 和 0x7F 与 0x9A 之间字符</td><td style=\"text-align:left\">(无)</td></tr></tbody></table>","more":"<h3 id=\"数值转换总结\"><a href=\"#数值转换总结\" class=\"headerlink\" title=\"数值转换总结\"></a>数值转换总结</h3><table><thead><tr><th style=\"text-align:left\">任务</th><th style=\"text-align:left\">函数</th><th style=\"text-align:left\">示例</th></tr></thead><tbody><tr><td style=\"text-align:left\">解析十进制数字</td><td style=\"text-align:left\">Parse, TryParse</td><td style=\"text-align:left\">double i = double.Parse(“3.5”);</td></tr><tr><td style=\"text-align:left\">解析二进制,八进制,十六进制数字</td><td style=\"text-align:left\">Convert.To(‘数字’)</td><td style=\"text-align:left\">int i= Convert.ToInt32(“1E”, 16);</td></tr><tr><td style=\"text-align:left\">按十六进制格式化</td><td style=\"text-align:left\">ToString(‘数字’)</td><td style=\"text-align:left\">string hex = 45.ToString(“X”);</td></tr><tr><td style=\"text-align:left\">无损数值转换</td><td style=\"text-align:left\">隐式转换</td><td style=\"text-align:left\">int i = 32; double d = i;</td></tr><tr><td style=\"text-align:left\">截断式数值转换</td><td style=\"text-align:left\">显式转换</td><td style=\"text-align:left\">double d = 23.5; int i = (int)d;</td></tr><tr><td style=\"text-align:left\">舍入式数值转换</td><td style=\"text-align:left\">Convert.To()数字</td><td style=\"text-align:left\">double d = 23.5; int i = Convert.ToInt32(d);</td></tr></tbody></table><h3 id=\"静态-Math-类的方法\"><a href=\"#静态-Math-类的方法\" class=\"headerlink\" title=\"静态 Math 类的方法\"></a>静态 Math 类的方法</h3><table><thead><tr><th style=\"text-align:left\">类别</th><th style=\"text-align:left\">方法</th></tr></thead><tbody><tr><td style=\"text-align:left\">舍入</td><td style=\"text-align:left\">Round, Truncate, Floor, Ceiling</td></tr><tr><td style=\"text-align:left\">最大值/最小值</td><td style=\"text-align:left\">Max, Min</td></tr><tr><td style=\"text-align:left\">绝对值和符号</td><td style=\"text-align:left\">Abs, Sign</td></tr><tr><td style=\"text-align:left\">平方根</td><td style=\"text-align:left\">Sqrt</td></tr><tr><td style=\"text-align:left\">幂运算</td><td style=\"text-align:left\">Pow, Exp</td></tr><tr><td style=\"text-align:left\">对数运算</td><td style=\"text-align:left\">Log, Log10</td></tr><tr><td style=\"text-align:left\">三角函数</td><td style=\"text-align:left\">Sin, Cos, Tan, Sinh, Cosh, Tanh, Asin, Acos, Atan</td></tr></tbody></table><!-- rebuild by neat -->"},{"title":"CSharp 7.0 核心技术指南摘录(四)","date":"2019-08-26T15:14:58.000Z","_content":"### 常用的异常类型\n\n以下所列出的异常类型在 CLR 和 .NET Framework 中广泛使用,可以在程序中抛出这些异常或将其作为基类型来派生自定义的异常类型\n\n* System.ArgumentException\n\n    当使用不恰当的函数参数调用函数时抛出.这通常表明应用程序有缺陷\n\n* System.ArgumentNullException\n\n    ArgumentException 的子类.它在函数的参数(意外的)为null时抛出\n\n* System.ArgumentOutOfRangeException\n\n    ArgumentException 的子类.当(通常是数字)参数太大或者太小的时候抛出.例如:当向只能接受正数的函数传递负数时抛出.\n\n* System.InvalidOperationException\n\n    当不论参数值如何,对象的状态无法使方法成功执行的时候抛出.例如:读取未打开的文件或在列表对象已修改的情况下用枚举器访问其下一个元素.\n\n* System.NotSupportedException\n\n    该异常抛出表示不支持特定的功能.例如:在一个 IsReadOnly 为 true 的集合上调用 Add 方法.\n\n* System.NotImplementedException\n\n    表示特定的函数还没有实现\n\n* System.ObjectDisposedException\n\n    当函数调用的对象已被销毁时抛出\n\n* NullReferenceException\n\n    当一个对象的值为null而访问其成员时抛出\n<!--more-->\n\n### 运算符函数\n\n运算符是通过声明运算符函数进行重载的.运算符函数具有以下规则\n\n* 函数名为 operator 关键字跟上运算符符号\n\n* 运算符函数必须是 static 和 public 的\n\n* 运算符函数的参数即操作数\n\n* 运算符函数的返回类型表示表达式的结果\n\n* 运算符函数电费操作数中至少有一个类型和声明运算符函数的类型是一致的\n\n在以下例子中,我们用名为 Note 的结构体表示音符,并重载其 + 运算符\n\n```cs\npublic struct Note\n{\n    int value;\n    public Note (int semitonesFromA)\n    {\n        value = semitonesFromA;\n    }\n    public static Note operator + (Note x, int semitones)\n    {\n        return new Note(x.value + semitones);\n    }\n    // public static Note operator + (Note x, int semitones) => new Note (x.value + semitones);\n}\n```\n\n这个重载令 Note 可以和 int 相加\n\n```cs\nNote B = new Note(2);\nNote CSharp = B + 2;\n```\n\n重载运算符会自动支持相应的复合赋值运算符.在上例中,因为我们重载了 + 号,所以自然就可以使用 += 了\n\n```cs\nCSharp += 2;\n```\n\n### 重载等号和比较运算符\n\n通常在我们使用结构体(或类,但不常见)时需要重载等号和比较运算符.重载等号和比较运算符有一些特殊的规则和要求,总结如下:\n\n* 成对重载: C# 编译器要求逻辑上成对的运算符必须同时定义.这些运算符包括(==,!=),(<,>)和(<=,>=)\n\n* Equals 和 GetHashCode: 在大多数情况下,如果重载了(==)和(!=)运算符,则通常也需要重载 object 中定义的 Equals 和 GetHashCode 方法.使之具有合理的行为.如果没有按要求重载,则 C# 编译器会发出警告\n\n* IComparable 和 IComparable< T >: 如果重载了(<,>) 和 (<=,>=) 运算符,那么还应当实现 IComparable 和 IComparable< T > 接口\n\n### 自定义隐式和自定义显式\n\n隐式和显式转换也是可以重载的运算符.这些转换经过重载后,一般能使强相关的类型(例如数字)之间的转换变得更加简明自然.\n\n如果要在弱相关的类型之间进行转换,则更适合采用以下方式\n\n* 编写一个以转换类型为参数的构造器\n\n* 编写(静态的)ToXXX 和 FromXXX 方法进行类型转换\n\n在以下例子中,我们定义了 Note 类型和 double 之类的转换规则\n\n```cs\npublic static implicit operator double (Note x) => 440 * Math.Pow(2, (double) x.value / 12);\n\npublic static explicit operator Note(double x) => new Note((int) (0.5 + 12 * Math.Log(x/440) / Math.Log(2)));\n\nNote n = (Note) 554.37;\ndouble x = n;\n```\n\n> PS: as 和 is 运算符会忽略自定义转换\n\n### 重载 true 和 false\n\ntrue 和 false 运算符只会在那些本身有布尔语义但无法转换为 bool 的类型中重载.例如,一个类型实现了三个状态逻辑,通过重载 true 和 false 运算符,这个类型就可以无缝地和以下条件语句以及运算符一起使用了: if, do, while, for, &&, || 和 ?:.System.Data.SqlTypes.SqlBoolean 结构体就提供了这个功能.\n\n```cs\nSqlBoolean a = SqlBoolean.Null;\nif(a)\n{\n    Console.WriteLine(\"True\");\n} \nelse if (!a)\n{\n    Console.WriteLine(\"False\");\n}\nelse\n{\n    Console.WriteLine(\"Null\");\n}\n// 输出为Null\n```\n\n下面代码重新实现了 SqlBoolean 中关于 true 和 false运算符的一部分代码\n\n```cs\npublic struct SqlBoolean\n{\n    public static bool operator true (SqlBoolean x) => x.m_value == True.m_value;\n    public static bool operator false (SqlBoolean x) => x.m_value == False.m_value;\n\n    public static SqlBoolean operator ! (SqlBoolean x)\n    {\n        if(x.m_value == Null.m_value) return Null;\n        if(x.m_value == False.m_value) return True;\n        return False;\n    }\n\n    public static readonly SqlBoolean Null = new SqlBoolean(0);\n    public static readonly SqlBoolean False = new SqlBoolean(1);\n    public static readonly SqlBoolean True = new SqlBoolean(2);\n\n    private SqlBoolean (byte value)\n    {\n        m_value = value;\n    }\n    private byte m_value;\n}\n```\n","source":"_posts/CSharp-7.0-核心技术指南摘录(四).md","raw":"---\ntitle: CSharp 7.0 核心技术指南摘录(四)\ndate: 2019-08-26 23:14:58\ncategories: C#\ntags:\n - C#\n - 摘录\n - 异常类型\n - 重载运算符\n---\n### 常用的异常类型\n\n以下所列出的异常类型在 CLR 和 .NET Framework 中广泛使用,可以在程序中抛出这些异常或将其作为基类型来派生自定义的异常类型\n\n* System.ArgumentException\n\n    当使用不恰当的函数参数调用函数时抛出.这通常表明应用程序有缺陷\n\n* System.ArgumentNullException\n\n    ArgumentException 的子类.它在函数的参数(意外的)为null时抛出\n\n* System.ArgumentOutOfRangeException\n\n    ArgumentException 的子类.当(通常是数字)参数太大或者太小的时候抛出.例如:当向只能接受正数的函数传递负数时抛出.\n\n* System.InvalidOperationException\n\n    当不论参数值如何,对象的状态无法使方法成功执行的时候抛出.例如:读取未打开的文件或在列表对象已修改的情况下用枚举器访问其下一个元素.\n\n* System.NotSupportedException\n\n    该异常抛出表示不支持特定的功能.例如:在一个 IsReadOnly 为 true 的集合上调用 Add 方法.\n\n* System.NotImplementedException\n\n    表示特定的函数还没有实现\n\n* System.ObjectDisposedException\n\n    当函数调用的对象已被销毁时抛出\n\n* NullReferenceException\n\n    当一个对象的值为null而访问其成员时抛出\n<!--more-->\n\n### 运算符函数\n\n运算符是通过声明运算符函数进行重载的.运算符函数具有以下规则\n\n* 函数名为 operator 关键字跟上运算符符号\n\n* 运算符函数必须是 static 和 public 的\n\n* 运算符函数的参数即操作数\n\n* 运算符函数的返回类型表示表达式的结果\n\n* 运算符函数电费操作数中至少有一个类型和声明运算符函数的类型是一致的\n\n在以下例子中,我们用名为 Note 的结构体表示音符,并重载其 + 运算符\n\n```cs\npublic struct Note\n{\n    int value;\n    public Note (int semitonesFromA)\n    {\n        value = semitonesFromA;\n    }\n    public static Note operator + (Note x, int semitones)\n    {\n        return new Note(x.value + semitones);\n    }\n    // public static Note operator + (Note x, int semitones) => new Note (x.value + semitones);\n}\n```\n\n这个重载令 Note 可以和 int 相加\n\n```cs\nNote B = new Note(2);\nNote CSharp = B + 2;\n```\n\n重载运算符会自动支持相应的复合赋值运算符.在上例中,因为我们重载了 + 号,所以自然就可以使用 += 了\n\n```cs\nCSharp += 2;\n```\n\n### 重载等号和比较运算符\n\n通常在我们使用结构体(或类,但不常见)时需要重载等号和比较运算符.重载等号和比较运算符有一些特殊的规则和要求,总结如下:\n\n* 成对重载: C# 编译器要求逻辑上成对的运算符必须同时定义.这些运算符包括(==,!=),(<,>)和(<=,>=)\n\n* Equals 和 GetHashCode: 在大多数情况下,如果重载了(==)和(!=)运算符,则通常也需要重载 object 中定义的 Equals 和 GetHashCode 方法.使之具有合理的行为.如果没有按要求重载,则 C# 编译器会发出警告\n\n* IComparable 和 IComparable< T >: 如果重载了(<,>) 和 (<=,>=) 运算符,那么还应当实现 IComparable 和 IComparable< T > 接口\n\n### 自定义隐式和自定义显式\n\n隐式和显式转换也是可以重载的运算符.这些转换经过重载后,一般能使强相关的类型(例如数字)之间的转换变得更加简明自然.\n\n如果要在弱相关的类型之间进行转换,则更适合采用以下方式\n\n* 编写一个以转换类型为参数的构造器\n\n* 编写(静态的)ToXXX 和 FromXXX 方法进行类型转换\n\n在以下例子中,我们定义了 Note 类型和 double 之类的转换规则\n\n```cs\npublic static implicit operator double (Note x) => 440 * Math.Pow(2, (double) x.value / 12);\n\npublic static explicit operator Note(double x) => new Note((int) (0.5 + 12 * Math.Log(x/440) / Math.Log(2)));\n\nNote n = (Note) 554.37;\ndouble x = n;\n```\n\n> PS: as 和 is 运算符会忽略自定义转换\n\n### 重载 true 和 false\n\ntrue 和 false 运算符只会在那些本身有布尔语义但无法转换为 bool 的类型中重载.例如,一个类型实现了三个状态逻辑,通过重载 true 和 false 运算符,这个类型就可以无缝地和以下条件语句以及运算符一起使用了: if, do, while, for, &&, || 和 ?:.System.Data.SqlTypes.SqlBoolean 结构体就提供了这个功能.\n\n```cs\nSqlBoolean a = SqlBoolean.Null;\nif(a)\n{\n    Console.WriteLine(\"True\");\n} \nelse if (!a)\n{\n    Console.WriteLine(\"False\");\n}\nelse\n{\n    Console.WriteLine(\"Null\");\n}\n// 输出为Null\n```\n\n下面代码重新实现了 SqlBoolean 中关于 true 和 false运算符的一部分代码\n\n```cs\npublic struct SqlBoolean\n{\n    public static bool operator true (SqlBoolean x) => x.m_value == True.m_value;\n    public static bool operator false (SqlBoolean x) => x.m_value == False.m_value;\n\n    public static SqlBoolean operator ! (SqlBoolean x)\n    {\n        if(x.m_value == Null.m_value) return Null;\n        if(x.m_value == False.m_value) return True;\n        return False;\n    }\n\n    public static readonly SqlBoolean Null = new SqlBoolean(0);\n    public static readonly SqlBoolean False = new SqlBoolean(1);\n    public static readonly SqlBoolean True = new SqlBoolean(2);\n\n    private SqlBoolean (byte value)\n    {\n        m_value = value;\n    }\n    private byte m_value;\n}\n```\n","slug":"CSharp-7.0-核心技术指南摘录(四)","published":1,"updated":"2019-08-29T16:06:45.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1ye000htkuipbdglwbv","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"常用的异常类型\"><a href=\"#常用的异常类型\" class=\"headerlink\" title=\"常用的异常类型\"></a>常用的异常类型</h3><p>以下所列出的异常类型在 CLR 和 .NET Framework 中广泛使用,可以在程序中抛出这些异常或将其作为基类型来派生自定义的异常类型</p><ul><li><p>System.ArgumentException</p><p>当使用不恰当的函数参数调用函数时抛出.这通常表明应用程序有缺陷</p></li><li><p>System.ArgumentNullException</p><p>ArgumentException 的子类.它在函数的参数(意外的)为null时抛出</p></li><li><p>System.ArgumentOutOfRangeException</p><p>ArgumentException 的子类.当(通常是数字)参数太大或者太小的时候抛出.例如:当向只能接受正数的函数传递负数时抛出.</p></li><li><p>System.InvalidOperationException</p><p>当不论参数值如何,对象的状态无法使方法成功执行的时候抛出.例如:读取未打开的文件或在列表对象已修改的情况下用枚举器访问其下一个元素.</p></li><li><p>System.NotSupportedException</p><p>该异常抛出表示不支持特定的功能.例如:在一个 IsReadOnly 为 true 的集合上调用 Add 方法.</p></li><li><p>System.NotImplementedException</p><p>表示特定的函数还没有实现</p></li><li><p>System.ObjectDisposedException</p><p>当函数调用的对象已被销毁时抛出</p></li><li><p>NullReferenceException</p><p>当一个对象的值为null而访问其成员时抛出</p><a id=\"more\"></a></li></ul><h3 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h3><p>运算符是通过声明运算符函数进行重载的.运算符函数具有以下规则</p><ul><li><p>函数名为 operator 关键字跟上运算符符号</p></li><li><p>运算符函数必须是 static 和 public 的</p></li><li><p>运算符函数的参数即操作数</p></li><li><p>运算符函数的返回类型表示表达式的结果</p></li><li><p>运算符函数电费操作数中至少有一个类型和声明运算符函数的类型是一致的</p></li></ul><p>在以下例子中,我们用名为 Note 的结构体表示音符,并重载其 + 运算符</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> Note</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Note</span> (<span class=\"params\"><span class=\"keyword\">int</span> semitonesFromA</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">value</span> = semitonesFromA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Note <span class=\"keyword\">operator</span> + (Note x, <span class=\"keyword\">int</span> semitones)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Note(x.<span class=\"keyword\">value</span> + semitones);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// public static Note operator + (Note x, int semitones) =&gt; new Note (x.value + semitones);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这个重载令 Note 可以和 int 相加</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Note B = <span class=\"keyword\">new</span> Note(<span class=\"number\">2</span>);</span><br><span class=\"line\">Note CSharp = B + <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure><p>重载运算符会自动支持相应的复合赋值运算符.在上例中,因为我们重载了 + 号,所以自然就可以使用 += 了</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSharp += <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure><h3 id=\"重载等号和比较运算符\"><a href=\"#重载等号和比较运算符\" class=\"headerlink\" title=\"重载等号和比较运算符\"></a>重载等号和比较运算符</h3><p>通常在我们使用结构体(或类,但不常见)时需要重载等号和比较运算符.重载等号和比较运算符有一些特殊的规则和要求,总结如下:</p><ul><li><p>成对重载: C# 编译器要求逻辑上成对的运算符必须同时定义.这些运算符包括(==,!=),(&lt;,&gt;)和(&lt;=,&gt;=)</p></li><li><p>Equals 和 GetHashCode: 在大多数情况下,如果重载了(==)和(!=)运算符,则通常也需要重载 object 中定义的 Equals 和 GetHashCode 方法.使之具有合理的行为.如果没有按要求重载,则 C# 编译器会发出警告</p></li><li><p>IComparable 和 IComparable&lt; T &gt;: 如果重载了(&lt;,&gt;) 和 (&lt;=,&gt;=) 运算符,那么还应当实现 IComparable 和 IComparable&lt; T &gt; 接口</p></li></ul><h3 id=\"自定义隐式和自定义显式\"><a href=\"#自定义隐式和自定义显式\" class=\"headerlink\" title=\"自定义隐式和自定义显式\"></a>自定义隐式和自定义显式</h3><p>隐式和显式转换也是可以重载的运算符.这些转换经过重载后,一般能使强相关的类型(例如数字)之间的转换变得更加简明自然.</p><p>如果要在弱相关的类型之间进行转换,则更适合采用以下方式</p><ul><li><p>编写一个以转换类型为参数的构造器</p></li><li><p>编写(静态的)ToXXX 和 FromXXX 方法进行类型转换</p></li></ul><p>在以下例子中,我们定义了 Note 类型和 double 之类的转换规则</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">implicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">double</span> (<span class=\"params\">Note x</span>) </span>=&gt; <span class=\"number\">440</span> * Math.Pow(<span class=\"number\">2</span>, (<span class=\"keyword\">double</span>) x.<span class=\"keyword\">value</span> / <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">Note</span>(<span class=\"params\"><span class=\"keyword\">double</span> x</span>) </span>=&gt; <span class=\"keyword\">new</span> Note((<span class=\"keyword\">int</span>) (<span class=\"number\">0.5</span> + <span class=\"number\">12</span> * Math.Log(x/<span class=\"number\">440</span>) / Math.Log(<span class=\"number\">2</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">Note n = (Note) <span class=\"number\">554.37</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> x = n;</span><br></pre></td></tr></table></figure><blockquote><p>PS: as 和 is 运算符会忽略自定义转换</p></blockquote><h3 id=\"重载-true-和-false\"><a href=\"#重载-true-和-false\" class=\"headerlink\" title=\"重载 true 和 false\"></a>重载 true 和 false</h3><p>true 和 false 运算符只会在那些本身有布尔语义但无法转换为 bool 的类型中重载.例如,一个类型实现了三个状态逻辑,通过重载 true 和 false 运算符,这个类型就可以无缝地和以下条件语句以及运算符一起使用了: if, do, while, for, &amp;&amp;, || 和 ?:.System.Data.SqlTypes.SqlBoolean 结构体就提供了这个功能.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SqlBoolean a = SqlBoolean.Null;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"True\"</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"False\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Null\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出为Null</span></span><br></pre></td></tr></table></figure><p>下面代码重新实现了 SqlBoolean 中关于 true 和 false运算符的一部分代码</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> SqlBoolean</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> <span class=\"title\">true</span> (<span class=\"params\">SqlBoolean x</span>) </span>=&gt; x.m_value == True.m_value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> <span class=\"title\">false</span> (<span class=\"params\">SqlBoolean x</span>) </span>=&gt; x.m_value == False.m_value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SqlBoolean <span class=\"keyword\">operator</span> ! (SqlBoolean x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x.m_value == Null.m_value) <span class=\"keyword\">return</span> Null;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x.m_value == False.m_value) <span class=\"keyword\">return</span> True;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> False;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean Null = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean False = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean True = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SqlBoolean</span> (<span class=\"params\"><span class=\"keyword\">byte</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        m_value = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span> m_value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"常用的异常类型\"><a href=\"#常用的异常类型\" class=\"headerlink\" title=\"常用的异常类型\"></a>常用的异常类型</h3><p>以下所列出的异常类型在 CLR 和 .NET Framework 中广泛使用,可以在程序中抛出这些异常或将其作为基类型来派生自定义的异常类型</p><ul><li><p>System.ArgumentException</p><p>当使用不恰当的函数参数调用函数时抛出.这通常表明应用程序有缺陷</p></li><li><p>System.ArgumentNullException</p><p>ArgumentException 的子类.它在函数的参数(意外的)为null时抛出</p></li><li><p>System.ArgumentOutOfRangeException</p><p>ArgumentException 的子类.当(通常是数字)参数太大或者太小的时候抛出.例如:当向只能接受正数的函数传递负数时抛出.</p></li><li><p>System.InvalidOperationException</p><p>当不论参数值如何,对象的状态无法使方法成功执行的时候抛出.例如:读取未打开的文件或在列表对象已修改的情况下用枚举器访问其下一个元素.</p></li><li><p>System.NotSupportedException</p><p>该异常抛出表示不支持特定的功能.例如:在一个 IsReadOnly 为 true 的集合上调用 Add 方法.</p></li><li><p>System.NotImplementedException</p><p>表示特定的函数还没有实现</p></li><li><p>System.ObjectDisposedException</p><p>当函数调用的对象已被销毁时抛出</p></li><li><p>NullReferenceException</p><p>当一个对象的值为null而访问其成员时抛出</p>","more":"</li></ul><h3 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h3><p>运算符是通过声明运算符函数进行重载的.运算符函数具有以下规则</p><ul><li><p>函数名为 operator 关键字跟上运算符符号</p></li><li><p>运算符函数必须是 static 和 public 的</p></li><li><p>运算符函数的参数即操作数</p></li><li><p>运算符函数的返回类型表示表达式的结果</p></li><li><p>运算符函数电费操作数中至少有一个类型和声明运算符函数的类型是一致的</p></li></ul><p>在以下例子中,我们用名为 Note 的结构体表示音符,并重载其 + 运算符</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> Note</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Note</span> (<span class=\"params\"><span class=\"keyword\">int</span> semitonesFromA</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">value</span> = semitonesFromA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Note <span class=\"keyword\">operator</span> + (Note x, <span class=\"keyword\">int</span> semitones)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Note(x.<span class=\"keyword\">value</span> + semitones);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// public static Note operator + (Note x, int semitones) =&gt; new Note (x.value + semitones);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这个重载令 Note 可以和 int 相加</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Note B = <span class=\"keyword\">new</span> Note(<span class=\"number\">2</span>);</span><br><span class=\"line\">Note CSharp = B + <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure><p>重载运算符会自动支持相应的复合赋值运算符.在上例中,因为我们重载了 + 号,所以自然就可以使用 += 了</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSharp += <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure><h3 id=\"重载等号和比较运算符\"><a href=\"#重载等号和比较运算符\" class=\"headerlink\" title=\"重载等号和比较运算符\"></a>重载等号和比较运算符</h3><p>通常在我们使用结构体(或类,但不常见)时需要重载等号和比较运算符.重载等号和比较运算符有一些特殊的规则和要求,总结如下:</p><ul><li><p>成对重载: C# 编译器要求逻辑上成对的运算符必须同时定义.这些运算符包括(==,!=),(&lt;,&gt;)和(&lt;=,&gt;=)</p></li><li><p>Equals 和 GetHashCode: 在大多数情况下,如果重载了(==)和(!=)运算符,则通常也需要重载 object 中定义的 Equals 和 GetHashCode 方法.使之具有合理的行为.如果没有按要求重载,则 C# 编译器会发出警告</p></li><li><p>IComparable 和 IComparable&lt; T &gt;: 如果重载了(&lt;,&gt;) 和 (&lt;=,&gt;=) 运算符,那么还应当实现 IComparable 和 IComparable&lt; T &gt; 接口</p></li></ul><h3 id=\"自定义隐式和自定义显式\"><a href=\"#自定义隐式和自定义显式\" class=\"headerlink\" title=\"自定义隐式和自定义显式\"></a>自定义隐式和自定义显式</h3><p>隐式和显式转换也是可以重载的运算符.这些转换经过重载后,一般能使强相关的类型(例如数字)之间的转换变得更加简明自然.</p><p>如果要在弱相关的类型之间进行转换,则更适合采用以下方式</p><ul><li><p>编写一个以转换类型为参数的构造器</p></li><li><p>编写(静态的)ToXXX 和 FromXXX 方法进行类型转换</p></li></ul><p>在以下例子中,我们定义了 Note 类型和 double 之类的转换规则</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">implicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">double</span> (<span class=\"params\">Note x</span>) </span>=&gt; <span class=\"number\">440</span> * Math.Pow(<span class=\"number\">2</span>, (<span class=\"keyword\">double</span>) x.<span class=\"keyword\">value</span> / <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">Note</span>(<span class=\"params\"><span class=\"keyword\">double</span> x</span>) </span>=&gt; <span class=\"keyword\">new</span> Note((<span class=\"keyword\">int</span>) (<span class=\"number\">0.5</span> + <span class=\"number\">12</span> * Math.Log(x/<span class=\"number\">440</span>) / Math.Log(<span class=\"number\">2</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">Note n = (Note) <span class=\"number\">554.37</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> x = n;</span><br></pre></td></tr></table></figure><blockquote><p>PS: as 和 is 运算符会忽略自定义转换</p></blockquote><h3 id=\"重载-true-和-false\"><a href=\"#重载-true-和-false\" class=\"headerlink\" title=\"重载 true 和 false\"></a>重载 true 和 false</h3><p>true 和 false 运算符只会在那些本身有布尔语义但无法转换为 bool 的类型中重载.例如,一个类型实现了三个状态逻辑,通过重载 true 和 false 运算符,这个类型就可以无缝地和以下条件语句以及运算符一起使用了: if, do, while, for, &amp;&amp;, || 和 ?:.System.Data.SqlTypes.SqlBoolean 结构体就提供了这个功能.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SqlBoolean a = SqlBoolean.Null;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"True\"</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"False\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Null\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出为Null</span></span><br></pre></td></tr></table></figure><p>下面代码重新实现了 SqlBoolean 中关于 true 和 false运算符的一部分代码</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> SqlBoolean</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> <span class=\"title\">true</span> (<span class=\"params\">SqlBoolean x</span>) </span>=&gt; x.m_value == True.m_value;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> <span class=\"title\">false</span> (<span class=\"params\">SqlBoolean x</span>) </span>=&gt; x.m_value == False.m_value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SqlBoolean <span class=\"keyword\">operator</span> ! (SqlBoolean x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x.m_value == Null.m_value) <span class=\"keyword\">return</span> Null;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x.m_value == False.m_value) <span class=\"keyword\">return</span> True;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> False;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean Null = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean False = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> SqlBoolean True = <span class=\"keyword\">new</span> SqlBoolean(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SqlBoolean</span> (<span class=\"params\"><span class=\"keyword\">byte</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        m_value = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span> m_value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"CSharp-Math类","date":"2019-04-02T14:27:45.000Z","_content":"### Math类\n#### Abs方法\n用于返回指定数字的绝对值\n```csharp\nint a = -957;\nint b  = Math.Abs(a);\n```\n<!--more-->\n#### Acos方法\n用于返回余弦值为指定数字的角度\n```cs\ndouble d = 0.5;\ndouble m = Math.Acos(d);\n```\n#### Asin方法\n用于返回正弦值的指定数字的角度\n```cs\ndouble d = 0.75;\ndouble m  = Math.Asin(d);\n```\n#### Atan方法\n用于返回正切值的指定数字的角度\n```cs\ndouble d = 0.75;\ndouble m  = Math.Atan(d);\n```\n#### Pow方法\n用于返回指定数字的指定次幂\n```cs\ndouble d = Match.Pow(2,3);//表示2的3次幂\n```\n#### Round方法\n用于将值舍入到最接近的整数或指定的小数位数\n```cs\n//将小数值舍入最接近的整数\ndouble d = Math.Round(2.44);//decimal/double\n//将小数值舍入到指定精度\nd = Math.Round(2.44,2);//decimal/double,int\n//将小数值舍入最接近的整数\nd = Math.Round(2.44,MidpointRounding.ToEven);//ToEven 舍入最接近的偶数;AwayFromZero 舍入绝对值较小的值\nd = Math.Round(2.44,2,MidpointRounding.ToEven);\n```","source":"_posts/CSharp-Math类.md","raw":"---\ntitle: 'CSharp-Math类'\ndate: 2019-04-02 22:27:45\ncategories: C# \ntags: \n - 基础\n - C#\n---\n### Math类\n#### Abs方法\n用于返回指定数字的绝对值\n```csharp\nint a = -957;\nint b  = Math.Abs(a);\n```\n<!--more-->\n#### Acos方法\n用于返回余弦值为指定数字的角度\n```cs\ndouble d = 0.5;\ndouble m = Math.Acos(d);\n```\n#### Asin方法\n用于返回正弦值的指定数字的角度\n```cs\ndouble d = 0.75;\ndouble m  = Math.Asin(d);\n```\n#### Atan方法\n用于返回正切值的指定数字的角度\n```cs\ndouble d = 0.75;\ndouble m  = Math.Atan(d);\n```\n#### Pow方法\n用于返回指定数字的指定次幂\n```cs\ndouble d = Match.Pow(2,3);//表示2的3次幂\n```\n#### Round方法\n用于将值舍入到最接近的整数或指定的小数位数\n```cs\n//将小数值舍入最接近的整数\ndouble d = Math.Round(2.44);//decimal/double\n//将小数值舍入到指定精度\nd = Math.Round(2.44,2);//decimal/double,int\n//将小数值舍入最接近的整数\nd = Math.Round(2.44,MidpointRounding.ToEven);//ToEven 舍入最接近的偶数;AwayFromZero 舍入绝对值较小的值\nd = Math.Round(2.44,2,MidpointRounding.ToEven);\n```","slug":"CSharp-Math类","published":1,"updated":"2019-04-02T16:28:08.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yf000itkuiixg14ixs","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"Math类\"><a href=\"#Math类\" class=\"headerlink\" title=\"Math类\"></a>Math类</h3><h4 id=\"Abs方法\"><a href=\"#Abs方法\" class=\"headerlink\" title=\"Abs方法\"></a>Abs方法</h4><p>用于返回指定数字的绝对值<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">-957</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b  = Math.Abs(a);</span><br></pre></td></tr></table></figure><p></p><a id=\"more\"></a><h4 id=\"Acos方法\"><a href=\"#Acos方法\" class=\"headerlink\" title=\"Acos方法\"></a>Acos方法</h4><p>用于返回余弦值为指定数字的角度<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> m = Math.Acos(d);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Asin方法\"><a href=\"#Asin方法\" class=\"headerlink\" title=\"Asin方法\"></a>Asin方法</h4><p>用于返回正弦值的指定数字的角度<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d = <span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> m  = Math.Asin(d);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Atan方法\"><a href=\"#Atan方法\" class=\"headerlink\" title=\"Atan方法\"></a>Atan方法</h4><p>用于返回正切值的指定数字的角度<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d = <span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> m  = Math.Atan(d);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Pow方法\"><a href=\"#Pow方法\" class=\"headerlink\" title=\"Pow方法\"></a>Pow方法</h4><p>用于返回指定数字的指定次幂<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d = Match.Pow(<span class=\"number\">2</span>,<span class=\"number\">3</span>);<span class=\"comment\">//表示2的3次幂</span></span><br></pre></td></tr></table></figure><p></p><h4 id=\"Round方法\"><a href=\"#Round方法\" class=\"headerlink\" title=\"Round方法\"></a>Round方法</h4><p>用于将值舍入到最接近的整数或指定的小数位数<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将小数值舍入最接近的整数</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> d = Math.Round(<span class=\"number\">2.44</span>);<span class=\"comment\">//decimal/double</span></span><br><span class=\"line\"><span class=\"comment\">//将小数值舍入到指定精度</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,<span class=\"number\">2</span>);<span class=\"comment\">//decimal/double,int</span></span><br><span class=\"line\"><span class=\"comment\">//将小数值舍入最接近的整数</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,MidpointRounding.ToEven);<span class=\"comment\">//ToEven 舍入最接近的偶数;AwayFromZero 舍入绝对值较小的值</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,<span class=\"number\">2</span>,MidpointRounding.ToEven);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"Math类\"><a href=\"#Math类\" class=\"headerlink\" title=\"Math类\"></a>Math类</h3><h4 id=\"Abs方法\"><a href=\"#Abs方法\" class=\"headerlink\" title=\"Abs方法\"></a>Abs方法</h4><p>用于返回指定数字的绝对值<br></p><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">-957</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b  = Math.Abs(a);</span><br></pre></td></tr></table></figure><p></p>","more":"<h4 id=\"Acos方法\"><a href=\"#Acos方法\" class=\"headerlink\" title=\"Acos方法\"></a>Acos方法</h4><p>用于返回余弦值为指定数字的角度<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> m = Math.Acos(d);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Asin方法\"><a href=\"#Asin方法\" class=\"headerlink\" title=\"Asin方法\"></a>Asin方法</h4><p>用于返回正弦值的指定数字的角度<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d = <span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> m  = Math.Asin(d);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Atan方法\"><a href=\"#Atan方法\" class=\"headerlink\" title=\"Atan方法\"></a>Atan方法</h4><p>用于返回正切值的指定数字的角度<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d = <span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> m  = Math.Atan(d);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Pow方法\"><a href=\"#Pow方法\" class=\"headerlink\" title=\"Pow方法\"></a>Pow方法</h4><p>用于返回指定数字的指定次幂<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> d = Match.Pow(<span class=\"number\">2</span>,<span class=\"number\">3</span>);<span class=\"comment\">//表示2的3次幂</span></span><br></pre></td></tr></table></figure><p></p><h4 id=\"Round方法\"><a href=\"#Round方法\" class=\"headerlink\" title=\"Round方法\"></a>Round方法</h4><p>用于将值舍入到最接近的整数或指定的小数位数<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将小数值舍入最接近的整数</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> d = Math.Round(<span class=\"number\">2.44</span>);<span class=\"comment\">//decimal/double</span></span><br><span class=\"line\"><span class=\"comment\">//将小数值舍入到指定精度</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,<span class=\"number\">2</span>);<span class=\"comment\">//decimal/double,int</span></span><br><span class=\"line\"><span class=\"comment\">//将小数值舍入最接近的整数</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,MidpointRounding.ToEven);<span class=\"comment\">//ToEven 舍入最接近的偶数;AwayFromZero 舍入绝对值较小的值</span></span><br><span class=\"line\">d = Math.Round(<span class=\"number\">2.44</span>,<span class=\"number\">2</span>,MidpointRounding.ToEven);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"CSharp-Aes加密","date":"2019-05-27T13:55:14.000Z","_content":"#### 起源\n最近负责的一个项目,对接的东西刚好有需要用到AES加密,就顺便学习记录一下\n<!--more-->\n#### Aes是什么\n在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准,是对称密钥加密中最流行的算法之一\n\n#### Aes加密\n```cs\n/// <summary>\n/// Aes加密 \n/// </summary>\n/// <param name=\"text\">明文</param>\n/// <param name=\"password\">密钥</param>\n/// <param name=\"iv\">偏移量</param>\n/// <returns>密文</returns>\npublic static string AesEncrypt(string text, string password, string iv)\n{\n\n    byte[] pwdBytes = Encoding.UTF8.GetBytes(password);\n    byte[] keyBytes = new byte[16];\n    int len = pwdBytes.Length;\n    if (len > keyBytes.Length)\n        len = keyBytes.Length;\n    Array.Copy(pwdBytes, keyBytes, len);\n    RijndaelManaged rhinelandCipher = new RijndaelManaged()\n    {\n        Mode = CipherMode.CBC,\n        Padding = PaddingMode.Zeros,\n        KeySize = 128,\n        BlockSize = 128,\n        Key = keyBytes,\n        IV = Encoding.UTF8.GetBytes(iv)\n    };\n\n    ICryptoTransform transform = rhinelandCipher.CreateEncryptor();\n    byte[] plainText = Encoding.UTF8.GetBytes(text);\n    byte[] cipherBytes = transform.TransformFinalBlock(plainText, 0, plainText.Length);\n\n    return Convert.ToBase64String(cipherBytes);\n\n}\n```\n\n#### Aes解密\n```cs\n/// <summary>\n/// Aes解密\n/// </summary>\n/// <param name=\"text\">密文</param>\n/// <param name=\"password\">密钥</param>\n/// <param name=\"iv\">偏移量</param>\n/// <returns>明文</returns>\npublic static string AesDecrypt(string text, string password, string iv)\n{\n    byte[] encryptedData = Convert.FromBase64String(text);\n    byte[] pwdBytes = Encoding.UTF8.GetBytes(password);\n    byte[] keyBytes = new byte[16];\n    int len = pwdBytes.Length;\n    if (len > keyBytes.Length) \n        len = keyBytes.Length;\n    Array.Copy(pwdBytes, keyBytes, len);\n    RijndaelManaged rhinelandCipher = new RijndaelManaged()\n    {\n        Mode = CipherMode.CBC,\n        Padding = PaddingMode.Zeros,\n        KeySize = 128,\n        BlockSize = 128,\n        Key = keyBytes,\n        IV = Encoding.UTF8.GetBytes(iv)\n    };\n\n    ICryptoTransform transform = rhinelandCipher.CreateDecryptor();\n    byte[] plainText = transform.TransformFinalBlock(encryptedData, 0, encryptedData.Length);\n    return Encoding.UTF8.GetString(plainText);\n}\n```\n\n#### 调用\n```cs\nstatic void Main(string[] args)\n{\n    //密钥\n    string password = \"1234567890123456\";\n    //加密初始化向量\n    string iv = \"1234567887654321\";\n    string message = AesEncrypt(\"abcdefghigklmnopqrstuvwxyz0123456789\", password, iv);\n    Console.WriteLine(message);\n    message = AesDecrypt(\"S8AclhU3eZDc0zV+upMD1dnm3ZwhoH+lNIA4U6+6O1w8QFy55oYo3fwgYUQdNNn0\", password, iv);\n    Console.WriteLine(message);\n}\n```\n","source":"_posts/CSharp-Aes加密.md","raw":"---\ntitle: CSharp-Aes加密\ndate: 2019-05-27 21:55:14\ncategories: C# \ntags: \n - 加密\n - C#\n---\n#### 起源\n最近负责的一个项目,对接的东西刚好有需要用到AES加密,就顺便学习记录一下\n<!--more-->\n#### Aes是什么\n在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准,是对称密钥加密中最流行的算法之一\n\n#### Aes加密\n```cs\n/// <summary>\n/// Aes加密 \n/// </summary>\n/// <param name=\"text\">明文</param>\n/// <param name=\"password\">密钥</param>\n/// <param name=\"iv\">偏移量</param>\n/// <returns>密文</returns>\npublic static string AesEncrypt(string text, string password, string iv)\n{\n\n    byte[] pwdBytes = Encoding.UTF8.GetBytes(password);\n    byte[] keyBytes = new byte[16];\n    int len = pwdBytes.Length;\n    if (len > keyBytes.Length)\n        len = keyBytes.Length;\n    Array.Copy(pwdBytes, keyBytes, len);\n    RijndaelManaged rhinelandCipher = new RijndaelManaged()\n    {\n        Mode = CipherMode.CBC,\n        Padding = PaddingMode.Zeros,\n        KeySize = 128,\n        BlockSize = 128,\n        Key = keyBytes,\n        IV = Encoding.UTF8.GetBytes(iv)\n    };\n\n    ICryptoTransform transform = rhinelandCipher.CreateEncryptor();\n    byte[] plainText = Encoding.UTF8.GetBytes(text);\n    byte[] cipherBytes = transform.TransformFinalBlock(plainText, 0, plainText.Length);\n\n    return Convert.ToBase64String(cipherBytes);\n\n}\n```\n\n#### Aes解密\n```cs\n/// <summary>\n/// Aes解密\n/// </summary>\n/// <param name=\"text\">密文</param>\n/// <param name=\"password\">密钥</param>\n/// <param name=\"iv\">偏移量</param>\n/// <returns>明文</returns>\npublic static string AesDecrypt(string text, string password, string iv)\n{\n    byte[] encryptedData = Convert.FromBase64String(text);\n    byte[] pwdBytes = Encoding.UTF8.GetBytes(password);\n    byte[] keyBytes = new byte[16];\n    int len = pwdBytes.Length;\n    if (len > keyBytes.Length) \n        len = keyBytes.Length;\n    Array.Copy(pwdBytes, keyBytes, len);\n    RijndaelManaged rhinelandCipher = new RijndaelManaged()\n    {\n        Mode = CipherMode.CBC,\n        Padding = PaddingMode.Zeros,\n        KeySize = 128,\n        BlockSize = 128,\n        Key = keyBytes,\n        IV = Encoding.UTF8.GetBytes(iv)\n    };\n\n    ICryptoTransform transform = rhinelandCipher.CreateDecryptor();\n    byte[] plainText = transform.TransformFinalBlock(encryptedData, 0, encryptedData.Length);\n    return Encoding.UTF8.GetString(plainText);\n}\n```\n\n#### 调用\n```cs\nstatic void Main(string[] args)\n{\n    //密钥\n    string password = \"1234567890123456\";\n    //加密初始化向量\n    string iv = \"1234567887654321\";\n    string message = AesEncrypt(\"abcdefghigklmnopqrstuvwxyz0123456789\", password, iv);\n    Console.WriteLine(message);\n    message = AesDecrypt(\"S8AclhU3eZDc0zV+upMD1dnm3ZwhoH+lNIA4U6+6O1w8QFy55oYo3fwgYUQdNNn0\", password, iv);\n    Console.WriteLine(message);\n}\n```\n","slug":"CSharp-Aes加密","published":1,"updated":"2019-05-27T14:14:33.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yg000jtkui66u02qdf","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h4><p>最近负责的一个项目,对接的东西刚好有需要用到AES加密,就顺便学习记录一下<br><a id=\"more\"></a></p><h4 id=\"Aes是什么\"><a href=\"#Aes是什么\" class=\"headerlink\" title=\"Aes是什么\"></a>Aes是什么</h4><p>在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准,是对称密钥加密中最流行的算法之一</p><h4 id=\"Aes加密\"><a href=\"#Aes加密\" class=\"headerlink\" title=\"Aes加密\"></a>Aes加密</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Aes加密 </span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"text\"&gt;</span>明文<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"password\"&gt;</span>密钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"iv\"&gt;</span>偏移量<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>密文<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">AesEncrypt</span>(<span class=\"params\"><span class=\"keyword\">string</span> text, <span class=\"keyword\">string</span> password, <span class=\"keyword\">string</span> iv</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] pwdBytes = Encoding.UTF8.GetBytes(password);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] keyBytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pwdBytes.Length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; keyBytes.Length)</span><br><span class=\"line\">        len = keyBytes.Length;</span><br><span class=\"line\">    Array.Copy(pwdBytes, keyBytes, len);</span><br><span class=\"line\">    RijndaelManaged rhinelandCipher = <span class=\"keyword\">new</span> RijndaelManaged()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Mode = CipherMode.CBC,</span><br><span class=\"line\">        Padding = PaddingMode.Zeros,</span><br><span class=\"line\">        KeySize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        BlockSize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        Key = keyBytes,</span><br><span class=\"line\">        IV = Encoding.UTF8.GetBytes(iv)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ICryptoTransform transform = rhinelandCipher.CreateEncryptor();</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] plainText = Encoding.UTF8.GetBytes(text);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] cipherBytes = transform.TransformFinalBlock(plainText, <span class=\"number\">0</span>, plainText.Length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Convert.ToBase64String(cipherBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Aes解密\"><a href=\"#Aes解密\" class=\"headerlink\" title=\"Aes解密\"></a>Aes解密</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Aes解密</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"text\"&gt;</span>密文<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"password\"&gt;</span>密钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"iv\"&gt;</span>偏移量<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>明文<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">AesDecrypt</span>(<span class=\"params\"><span class=\"keyword\">string</span> text, <span class=\"keyword\">string</span> password, <span class=\"keyword\">string</span> iv</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] encryptedData = Convert.FromBase64String(text);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] pwdBytes = Encoding.UTF8.GetBytes(password);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] keyBytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pwdBytes.Length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; keyBytes.Length) </span><br><span class=\"line\">        len = keyBytes.Length;</span><br><span class=\"line\">    Array.Copy(pwdBytes, keyBytes, len);</span><br><span class=\"line\">    RijndaelManaged rhinelandCipher = <span class=\"keyword\">new</span> RijndaelManaged()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Mode = CipherMode.CBC,</span><br><span class=\"line\">        Padding = PaddingMode.Zeros,</span><br><span class=\"line\">        KeySize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        BlockSize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        Key = keyBytes,</span><br><span class=\"line\">        IV = Encoding.UTF8.GetBytes(iv)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ICryptoTransform transform = rhinelandCipher.CreateDecryptor();</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] plainText = transform.TransformFinalBlock(encryptedData, <span class=\"number\">0</span>, encryptedData.Length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Encoding.UTF8.GetString(plainText);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//密钥</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> password = <span class=\"string\">\"1234567890123456\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//加密初始化向量</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> iv = <span class=\"string\">\"1234567887654321\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> message = AesEncrypt(<span class=\"string\">\"abcdefghigklmnopqrstuvwxyz0123456789\"</span>, password, iv);</span><br><span class=\"line\">    Console.WriteLine(message);</span><br><span class=\"line\">    message = AesDecrypt(<span class=\"string\">\"S8AclhU3eZDc0zV+upMD1dnm3ZwhoH+lNIA4U6+6O1w8QFy55oYo3fwgYUQdNNn0\"</span>, password, iv);</span><br><span class=\"line\">    Console.WriteLine(message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h4><p>最近负责的一个项目,对接的东西刚好有需要用到AES加密,就顺便学习记录一下<br>","more":"</p><h4 id=\"Aes是什么\"><a href=\"#Aes是什么\" class=\"headerlink\" title=\"Aes是什么\"></a>Aes是什么</h4><p>在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准,是对称密钥加密中最流行的算法之一</p><h4 id=\"Aes加密\"><a href=\"#Aes加密\" class=\"headerlink\" title=\"Aes加密\"></a>Aes加密</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Aes加密 </span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"text\"&gt;</span>明文<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"password\"&gt;</span>密钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"iv\"&gt;</span>偏移量<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>密文<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">AesEncrypt</span>(<span class=\"params\"><span class=\"keyword\">string</span> text, <span class=\"keyword\">string</span> password, <span class=\"keyword\">string</span> iv</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] pwdBytes = Encoding.UTF8.GetBytes(password);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] keyBytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pwdBytes.Length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; keyBytes.Length)</span><br><span class=\"line\">        len = keyBytes.Length;</span><br><span class=\"line\">    Array.Copy(pwdBytes, keyBytes, len);</span><br><span class=\"line\">    RijndaelManaged rhinelandCipher = <span class=\"keyword\">new</span> RijndaelManaged()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Mode = CipherMode.CBC,</span><br><span class=\"line\">        Padding = PaddingMode.Zeros,</span><br><span class=\"line\">        KeySize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        BlockSize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        Key = keyBytes,</span><br><span class=\"line\">        IV = Encoding.UTF8.GetBytes(iv)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ICryptoTransform transform = rhinelandCipher.CreateEncryptor();</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] plainText = Encoding.UTF8.GetBytes(text);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] cipherBytes = transform.TransformFinalBlock(plainText, <span class=\"number\">0</span>, plainText.Length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Convert.ToBase64String(cipherBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Aes解密\"><a href=\"#Aes解密\" class=\"headerlink\" title=\"Aes解密\"></a>Aes解密</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Aes解密</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"text\"&gt;</span>密文<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"password\"&gt;</span>密钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"iv\"&gt;</span>偏移量<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>明文<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">AesDecrypt</span>(<span class=\"params\"><span class=\"keyword\">string</span> text, <span class=\"keyword\">string</span> password, <span class=\"keyword\">string</span> iv</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] encryptedData = Convert.FromBase64String(text);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] pwdBytes = Encoding.UTF8.GetBytes(password);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] keyBytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = pwdBytes.Length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; keyBytes.Length) </span><br><span class=\"line\">        len = keyBytes.Length;</span><br><span class=\"line\">    Array.Copy(pwdBytes, keyBytes, len);</span><br><span class=\"line\">    RijndaelManaged rhinelandCipher = <span class=\"keyword\">new</span> RijndaelManaged()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Mode = CipherMode.CBC,</span><br><span class=\"line\">        Padding = PaddingMode.Zeros,</span><br><span class=\"line\">        KeySize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        BlockSize = <span class=\"number\">128</span>,</span><br><span class=\"line\">        Key = keyBytes,</span><br><span class=\"line\">        IV = Encoding.UTF8.GetBytes(iv)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    ICryptoTransform transform = rhinelandCipher.CreateDecryptor();</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] plainText = transform.TransformFinalBlock(encryptedData, <span class=\"number\">0</span>, encryptedData.Length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Encoding.UTF8.GetString(plainText);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//密钥</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> password = <span class=\"string\">\"1234567890123456\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//加密初始化向量</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> iv = <span class=\"string\">\"1234567887654321\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> message = AesEncrypt(<span class=\"string\">\"abcdefghigklmnopqrstuvwxyz0123456789\"</span>, password, iv);</span><br><span class=\"line\">    Console.WriteLine(message);</span><br><span class=\"line\">    message = AesDecrypt(<span class=\"string\">\"S8AclhU3eZDc0zV+upMD1dnm3ZwhoH+lNIA4U6+6O1w8QFy55oYo3fwgYUQdNNn0\"</span>, password, iv);</span><br><span class=\"line\">    Console.WriteLine(message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"CSharp-发送邮件","date":"2019-05-29T16:08:16.000Z","_content":"#### 起源\n最近负责的一个项目,客户提了一个需求,自动导出输出,按格式生成xls,并将xls文件当成附件发送邮件,就此,研究了一下C#怎么发送邮件.\n<!--more-->\n\n#### MailHelper.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Mail;\nusing System.Text;\n\nnamespace FrmSendMail\n{\n    class MailHelper\n    {\n\n        /// 正则表达式检测Email格式\n        /// </summary>\n        /// <param name=\"Email\"></param>\n        /// <returns></returns>\n        public static bool CheckEmail(string Email)\n        {\n            bool Flag = false;\n            string str = \"([a-zA-Z0-9_\\\\.\\\\-])+\\\\@(([a-zA-Z0-9\\\\-])+\\\\.)+([a-zA-Z0-9]{2,5})+\";\n            string[] result = GetPathPoint(Email, str);\n            if (result != null)\n            {\n                Flag = result.Contains(Email) ? true : Flag;\n            }\n\n            return Flag;\n        }\n\n        /// <summary>\n        /// 获取正则表达式匹配结果集\n        /// </summary>\n        /// <param name=\"value\">字符串</param>\n        /// <param name=\"regx\">正则表达式</param>\n        /// <returns></returns>\n        public static string[] GetPathPoint(string value, string regx)\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                return null;\n            bool isMatch = System.Text.RegularExpressions.Regex.IsMatch(value, regx);\n            if (!isMatch)\n                return null;\n            System.Text.RegularExpressions.MatchCollection matchCol = System.Text.RegularExpressions.Regex.Matches(value, regx);\n            string[] result = new string[matchCol.Count];\n            if (matchCol.Count > 0)\n            {\n                for (int i = 0; i < matchCol.Count; i++)\n                {\n                    result[i] = matchCol[i].Value;\n                }\n            }\n            return result;\n        }\n\n        /// <summary>\n        /// 设置邮件信息\n        /// </summary>\n        /// <param name=\"strToAddress\">收件人地址,多个用;分隔</param>\n        /// <param name=\"strCcAddress\">抄送人地址,多个用;分隔</param>\n        /// <param name=\"strSendAddress\">发件人地址</param>\n        /// <param name=\"strSendName\">发件人姓名</param>\n        /// <param name=\"strSubject\">邮件主题</param>\n        /// <param name=\"strBody\">邮件内容</param>\n        /// <param name=\"strFilePath\">邮件附件(绝对路径)</param>\n        /// <returns></returns>\n        public static MailMessage SetMailInfo(string strToAddress, string strCcAddress, string strSendAddress, string strSendName, string strSubject, string strBody, string strFilePath)\n        {\n            MailMessage msg = new System.Net.Mail.MailMessage();\n            //收件人邮箱\n            string[] toToAddressStrings = strToAddress.Split(\";\");\n            foreach (var str in toToAddressStrings)\n            {\n                if (CheckEmail(str))\n                {\n                    msg.To.Add(str);\n                }\n            }\n            //抄送人邮箱\n            string[] toCcAddressStrings = strCcAddress.Split(\";\");\n            foreach (var str in toCcAddressStrings)\n            {\n                if (CheckEmail(str))\n                {\n                    msg.CC.Add(str);\n                }\n            }\n            //发件人信息(地址,姓名,(编码))\n            msg.From = new MailAddress(strSendAddress, strSendName, Encoding.UTF8);\n            //邮件标题\n            msg.Subject = strSubject;\n            //邮件标题编码 \n            msg.SubjectEncoding = Encoding.UTF8;\n            //邮件内容   \n            msg.Body = strBody;\n            //邮件内容编码   \n            msg.BodyEncoding = Encoding.UTF8;\n            //邮件附件,第二个参数表示附件的文件类型，可以不用指定\n            if (!string.IsNullOrWhiteSpace(strFilePath))\n            {\n                msg.Attachments.Add(new Attachment(strFilePath, System.Net.Mime.MediaTypeNames.Application.Rtf));\n            }\n\n            //是否是HTML邮件   \n            msg.IsBodyHtml = false;\n            msg.Priority = MailPriority.High;//邮件优先级   \n            return msg;\n        }\n\n        /// <summary>\n        /// localhost 发送邮件(需要在本地搭建SMTP服务器)\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <returns></returns>\n        public static string SendMailLocalhost(MailMessage msg)\n        {\n            SmtpClient client = new SmtpClient();\n            client.Host = \"localhost\";\n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);  \n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n\n        /// <summary>\n        /// SMTP发送邮件\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"strSendAddress\"></param>\n        /// <param name=\"strSmtp\"></param>\n        /// <returns></returns>\n        public static string SendMailUseSmtp(MailMessage msg, string strSendAddress, string strSmtp)\n        {\n            SmtpClient client = new SmtpClient();\n            //邮箱和SMTP授权码\n            client.Credentials = new System.Net.NetworkCredential(strSendAddress, strSmtp);\n            client.Host = \"smtp.qq.com\";\n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);\n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (System.Net.Mail.SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n\n        /// <summary>\n        /// SSL-SMTP发送邮件\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"strSendAddress\"></param>\n        /// <param name=\"strSmtp\"></param>\n        /// <returns></returns>\n        public static string SendMailUseSslSmtp(MailMessage msg,string strSendAddress,string strSmtp)\n        {\n            SmtpClient client = new SmtpClient();\n            //GMail邮箱和SMTP授权码\n            client.Credentials = new System.Net.NetworkCredential(strSendAddress, strSmtp);\n            client.Port = 587;//Gmail使用的端口   \n            client.Host = \"smtp.qq.com\";\n            client.EnableSsl = true;//经过ssl加密   \n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);\n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (System.Net.Mail.SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n    }\n}\n```\n\n#### 调用\n```cs\nusing System;\nusing System.Net.Mail;\n\nnamespace FrmSendMail\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            MailMessage mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"localhost\",\n                \"localhost测试\", \"内容测试\", \"\");\n            string msg = MailHelper.SendMailLocalhost(mailInfo);\n            Console.WriteLine(msg);\n            mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"SMTP\",\n                \"SMTP测试\", \"内容测试\", \"\");\n            msg = MailHelper.SendMailUseSmtp(mailInfo, \"c@qq.com\", \"授权码\");\n            Console.WriteLine(msg);\n            mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"SSL-SMTP\",\n                \"SSL-SMTP测试\", \"内容测试\", \"\");\n            msg = MailHelper.SendMailUseSslSmtp(mailInfo, \"c@qq.com\", \"授权码\");\n            Console.WriteLine(msg);\n        }\n\n    }\n}\n```","source":"_posts/CSharp-发送邮件.md","raw":"---\ntitle: CSharp-发送邮件\ndate: 2019-05-30 00:08:16\ncategories: C# \ntags: \n - 邮件\n - C#\n---\n#### 起源\n最近负责的一个项目,客户提了一个需求,自动导出输出,按格式生成xls,并将xls文件当成附件发送邮件,就此,研究了一下C#怎么发送邮件.\n<!--more-->\n\n#### MailHelper.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Mail;\nusing System.Text;\n\nnamespace FrmSendMail\n{\n    class MailHelper\n    {\n\n        /// 正则表达式检测Email格式\n        /// </summary>\n        /// <param name=\"Email\"></param>\n        /// <returns></returns>\n        public static bool CheckEmail(string Email)\n        {\n            bool Flag = false;\n            string str = \"([a-zA-Z0-9_\\\\.\\\\-])+\\\\@(([a-zA-Z0-9\\\\-])+\\\\.)+([a-zA-Z0-9]{2,5})+\";\n            string[] result = GetPathPoint(Email, str);\n            if (result != null)\n            {\n                Flag = result.Contains(Email) ? true : Flag;\n            }\n\n            return Flag;\n        }\n\n        /// <summary>\n        /// 获取正则表达式匹配结果集\n        /// </summary>\n        /// <param name=\"value\">字符串</param>\n        /// <param name=\"regx\">正则表达式</param>\n        /// <returns></returns>\n        public static string[] GetPathPoint(string value, string regx)\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                return null;\n            bool isMatch = System.Text.RegularExpressions.Regex.IsMatch(value, regx);\n            if (!isMatch)\n                return null;\n            System.Text.RegularExpressions.MatchCollection matchCol = System.Text.RegularExpressions.Regex.Matches(value, regx);\n            string[] result = new string[matchCol.Count];\n            if (matchCol.Count > 0)\n            {\n                for (int i = 0; i < matchCol.Count; i++)\n                {\n                    result[i] = matchCol[i].Value;\n                }\n            }\n            return result;\n        }\n\n        /// <summary>\n        /// 设置邮件信息\n        /// </summary>\n        /// <param name=\"strToAddress\">收件人地址,多个用;分隔</param>\n        /// <param name=\"strCcAddress\">抄送人地址,多个用;分隔</param>\n        /// <param name=\"strSendAddress\">发件人地址</param>\n        /// <param name=\"strSendName\">发件人姓名</param>\n        /// <param name=\"strSubject\">邮件主题</param>\n        /// <param name=\"strBody\">邮件内容</param>\n        /// <param name=\"strFilePath\">邮件附件(绝对路径)</param>\n        /// <returns></returns>\n        public static MailMessage SetMailInfo(string strToAddress, string strCcAddress, string strSendAddress, string strSendName, string strSubject, string strBody, string strFilePath)\n        {\n            MailMessage msg = new System.Net.Mail.MailMessage();\n            //收件人邮箱\n            string[] toToAddressStrings = strToAddress.Split(\";\");\n            foreach (var str in toToAddressStrings)\n            {\n                if (CheckEmail(str))\n                {\n                    msg.To.Add(str);\n                }\n            }\n            //抄送人邮箱\n            string[] toCcAddressStrings = strCcAddress.Split(\";\");\n            foreach (var str in toCcAddressStrings)\n            {\n                if (CheckEmail(str))\n                {\n                    msg.CC.Add(str);\n                }\n            }\n            //发件人信息(地址,姓名,(编码))\n            msg.From = new MailAddress(strSendAddress, strSendName, Encoding.UTF8);\n            //邮件标题\n            msg.Subject = strSubject;\n            //邮件标题编码 \n            msg.SubjectEncoding = Encoding.UTF8;\n            //邮件内容   \n            msg.Body = strBody;\n            //邮件内容编码   \n            msg.BodyEncoding = Encoding.UTF8;\n            //邮件附件,第二个参数表示附件的文件类型，可以不用指定\n            if (!string.IsNullOrWhiteSpace(strFilePath))\n            {\n                msg.Attachments.Add(new Attachment(strFilePath, System.Net.Mime.MediaTypeNames.Application.Rtf));\n            }\n\n            //是否是HTML邮件   \n            msg.IsBodyHtml = false;\n            msg.Priority = MailPriority.High;//邮件优先级   \n            return msg;\n        }\n\n        /// <summary>\n        /// localhost 发送邮件(需要在本地搭建SMTP服务器)\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <returns></returns>\n        public static string SendMailLocalhost(MailMessage msg)\n        {\n            SmtpClient client = new SmtpClient();\n            client.Host = \"localhost\";\n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);  \n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n\n        /// <summary>\n        /// SMTP发送邮件\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"strSendAddress\"></param>\n        /// <param name=\"strSmtp\"></param>\n        /// <returns></returns>\n        public static string SendMailUseSmtp(MailMessage msg, string strSendAddress, string strSmtp)\n        {\n            SmtpClient client = new SmtpClient();\n            //邮箱和SMTP授权码\n            client.Credentials = new System.Net.NetworkCredential(strSendAddress, strSmtp);\n            client.Host = \"smtp.qq.com\";\n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);\n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (System.Net.Mail.SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n\n        /// <summary>\n        /// SSL-SMTP发送邮件\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"strSendAddress\"></param>\n        /// <param name=\"strSmtp\"></param>\n        /// <returns></returns>\n        public static string SendMailUseSslSmtp(MailMessage msg,string strSendAddress,string strSmtp)\n        {\n            SmtpClient client = new SmtpClient();\n            //GMail邮箱和SMTP授权码\n            client.Credentials = new System.Net.NetworkCredential(strSendAddress, strSmtp);\n            client.Port = 587;//Gmail使用的端口   \n            client.Host = \"smtp.qq.com\";\n            client.EnableSsl = true;//经过ssl加密   \n            object userState = msg;\n            try\n            {\n                //client.SendAsync(msg, userState);\n                client.Send(msg);\n                //简单一点儿可以client.Send(msg);   \n                return \"发送成功\";\n            }\n            catch (System.Net.Mail.SmtpException ex)\n            {\n                return \"发送邮件出错\" + ex.Message;\n            }\n        }\n    }\n}\n```\n\n#### 调用\n```cs\nusing System;\nusing System.Net.Mail;\n\nnamespace FrmSendMail\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            MailMessage mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"localhost\",\n                \"localhost测试\", \"内容测试\", \"\");\n            string msg = MailHelper.SendMailLocalhost(mailInfo);\n            Console.WriteLine(msg);\n            mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"SMTP\",\n                \"SMTP测试\", \"内容测试\", \"\");\n            msg = MailHelper.SendMailUseSmtp(mailInfo, \"c@qq.com\", \"授权码\");\n            Console.WriteLine(msg);\n            mailInfo = MailHelper.SetMailInfo(\"a@qq.com\", \"b@qq.com\", \"c@qq.com\",\n                \"SSL-SMTP\",\n                \"SSL-SMTP测试\", \"内容测试\", \"\");\n            msg = MailHelper.SendMailUseSslSmtp(mailInfo, \"c@qq.com\", \"授权码\");\n            Console.WriteLine(msg);\n        }\n\n    }\n}\n```","slug":"CSharp-发送邮件","published":1,"updated":"2019-05-29T16:14:39.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yg000ktkuiax33vzps","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h4><p>最近负责的一个项目,客户提了一个需求,自动导出输出,按格式生成xls,并将xls文件当成附件发送邮件,就此,研究了一下C#怎么发送邮件.<br><a id=\"more\"></a></p><h4 id=\"MailHelper-cs\"><a href=\"#MailHelper-cs\" class=\"headerlink\" title=\"MailHelper.cs\"></a>MailHelper.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Mail;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FrmSendMail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">MailHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 正则表达式检测Email格式</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"Email\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">CheckEmail</span>(<span class=\"params\"><span class=\"keyword\">string</span> Email</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> Flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> str = <span class=\"string\">\"([a-zA-Z0-9_\\\\.\\\\-])+\\\\@(([a-zA-Z0-9\\\\-])+\\\\.)+([a-zA-Z0-9]&#123;2,5&#125;)+\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">string</span>[] result = GetPathPoint(Email, str);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Flag = result.Contains(Email) ? <span class=\"literal\">true</span> : Flag;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Flag;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取正则表达式匹配结果集</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"regx\"&gt;</span>正则表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span>[] <span class=\"title\">GetPathPoint</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"keyword\">value</span>, <span class=\"keyword\">string</span> regx</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> isMatch = System.Text.RegularExpressions.Regex.IsMatch(<span class=\"keyword\">value</span>, regx);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isMatch)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            System.Text.RegularExpressions.MatchCollection matchCol = System.Text.RegularExpressions.Regex.Matches(<span class=\"keyword\">value</span>, regx);</span><br><span class=\"line\">            <span class=\"keyword\">string</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[matchCol.Count];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matchCol.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matchCol.Count; i++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    result[i] = matchCol[i].Value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 设置邮件信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strToAddress\"&gt;</span>收件人地址,多个用;分隔<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strCcAddress\"&gt;</span>抄送人地址,多个用;分隔<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSendAddress\"&gt;</span>发件人地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSendName\"&gt;</span>发件人姓名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSubject\"&gt;</span>邮件主题<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strBody\"&gt;</span>邮件内容<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strFilePath\"&gt;</span>邮件附件(绝对路径)<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MailMessage <span class=\"title\">SetMailInfo</span>(<span class=\"params\"><span class=\"keyword\">string</span> strToAddress, <span class=\"keyword\">string</span> strCcAddress, <span class=\"keyword\">string</span> strSendAddress, <span class=\"keyword\">string</span> strSendName, <span class=\"keyword\">string</span> strSubject, <span class=\"keyword\">string</span> strBody, <span class=\"keyword\">string</span> strFilePath</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            MailMessage msg = <span class=\"keyword\">new</span> System.Net.Mail.MailMessage();</span><br><span class=\"line\">            <span class=\"comment\">//收件人邮箱</span></span><br><span class=\"line\">            <span class=\"keyword\">string</span>[] toToAddressStrings = strToAddress.Split(<span class=\"string\">\";\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> str <span class=\"keyword\">in</span> toToAddressStrings)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (CheckEmail(str))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    msg.To.Add(str);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//抄送人邮箱</span></span><br><span class=\"line\">            <span class=\"keyword\">string</span>[] toCcAddressStrings = strCcAddress.Split(<span class=\"string\">\";\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> str <span class=\"keyword\">in</span> toCcAddressStrings)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (CheckEmail(str))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    msg.CC.Add(str);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//发件人信息(地址,姓名,(编码))</span></span><br><span class=\"line\">            msg.From = <span class=\"keyword\">new</span> MailAddress(strSendAddress, strSendName, Encoding.UTF8);</span><br><span class=\"line\">            <span class=\"comment\">//邮件标题</span></span><br><span class=\"line\">            msg.Subject = strSubject;</span><br><span class=\"line\">            <span class=\"comment\">//邮件标题编码 </span></span><br><span class=\"line\">            msg.SubjectEncoding = Encoding.UTF8;</span><br><span class=\"line\">            <span class=\"comment\">//邮件内容   </span></span><br><span class=\"line\">            msg.Body = strBody;</span><br><span class=\"line\">            <span class=\"comment\">//邮件内容编码   </span></span><br><span class=\"line\">            msg.BodyEncoding = Encoding.UTF8;</span><br><span class=\"line\">            <span class=\"comment\">//邮件附件,第二个参数表示附件的文件类型，可以不用指定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(strFilePath))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                msg.Attachments.Add(<span class=\"keyword\">new</span> Attachment(strFilePath, System.Net.Mime.MediaTypeNames.Application.Rtf));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//是否是HTML邮件   </span></span><br><span class=\"line\">            msg.IsBodyHtml = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            msg.Priority = MailPriority.High;<span class=\"comment\">//邮件优先级   </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> localhost 发送邮件(需要在本地搭建SMTP服务器)</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">SendMailLocalhost</span>(<span class=\"params\">MailMessage msg</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            client.Host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);  </span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送成功\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送邮件出错\"</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SMTP发送邮件</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSendAddress\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSmtp\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">SendMailUseSmtp</span>(<span class=\"params\">MailMessage msg, <span class=\"keyword\">string</span> strSendAddress, <span class=\"keyword\">string</span> strSmtp</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            <span class=\"comment\">//邮箱和SMTP授权码</span></span><br><span class=\"line\">            client.Credentials = <span class=\"keyword\">new</span> System.Net.NetworkCredential(strSendAddress, strSmtp);</span><br><span class=\"line\">            client.Host = <span class=\"string\">\"smtp.qq.com\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);</span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送成功\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (System.Net.Mail.SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送邮件出错\"</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SSL-SMTP发送邮件</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSendAddress\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSmtp\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">SendMailUseSslSmtp</span>(<span class=\"params\">MailMessage msg,<span class=\"keyword\">string</span> strSendAddress,<span class=\"keyword\">string</span> strSmtp</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            <span class=\"comment\">//GMail邮箱和SMTP授权码</span></span><br><span class=\"line\">            client.Credentials = <span class=\"keyword\">new</span> System.Net.NetworkCredential(strSendAddress, strSmtp);</span><br><span class=\"line\">            client.Port = <span class=\"number\">587</span>;<span class=\"comment\">//Gmail使用的端口   </span></span><br><span class=\"line\">            client.Host = <span class=\"string\">\"smtp.qq.com\"</span>;</span><br><span class=\"line\">            client.EnableSsl = <span class=\"literal\">true</span>;<span class=\"comment\">//经过ssl加密   </span></span><br><span class=\"line\">            <span class=\"keyword\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);</span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送成功\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (System.Net.Mail.SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送邮件出错\"</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Mail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FrmSendMail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            MailMessage mailInfo = MailHelper.SetMailInfo(<span class=\"string\">\"a@qq.com\"</span>, <span class=\"string\">\"b@qq.com\"</span>, <span class=\"string\">\"c@qq.com\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"localhost测试\"</span>, <span class=\"string\">\"内容测试\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">string</span> msg = MailHelper.SendMailLocalhost(mailInfo);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">            mailInfo = MailHelper.SetMailInfo(<span class=\"string\">\"a@qq.com\"</span>, <span class=\"string\">\"b@qq.com\"</span>, <span class=\"string\">\"c@qq.com\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SMTP\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SMTP测试\"</span>, <span class=\"string\">\"内容测试\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            msg = MailHelper.SendMailUseSmtp(mailInfo, <span class=\"string\">\"c@qq.com\"</span>, <span class=\"string\">\"授权码\"</span>);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">            mailInfo = MailHelper.SetMailInfo(<span class=\"string\">\"a@qq.com\"</span>, <span class=\"string\">\"b@qq.com\"</span>, <span class=\"string\">\"c@qq.com\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SSL-SMTP\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SSL-SMTP测试\"</span>, <span class=\"string\">\"内容测试\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            msg = MailHelper.SendMailUseSslSmtp(mailInfo, <span class=\"string\">\"c@qq.com\"</span>, <span class=\"string\">\"授权码\"</span>);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h4><p>最近负责的一个项目,客户提了一个需求,自动导出输出,按格式生成xls,并将xls文件当成附件发送邮件,就此,研究了一下C#怎么发送邮件.<br>","more":"</p><h4 id=\"MailHelper-cs\"><a href=\"#MailHelper-cs\" class=\"headerlink\" title=\"MailHelper.cs\"></a>MailHelper.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Mail;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FrmSendMail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">MailHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 正则表达式检测Email格式</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"Email\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">CheckEmail</span>(<span class=\"params\"><span class=\"keyword\">string</span> Email</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> Flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> str = <span class=\"string\">\"([a-zA-Z0-9_\\\\.\\\\-])+\\\\@(([a-zA-Z0-9\\\\-])+\\\\.)+([a-zA-Z0-9]&#123;2,5&#125;)+\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">string</span>[] result = GetPathPoint(Email, str);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Flag = result.Contains(Email) ? <span class=\"literal\">true</span> : Flag;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Flag;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取正则表达式匹配结果集</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"regx\"&gt;</span>正则表达式<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span>[] <span class=\"title\">GetPathPoint</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"keyword\">value</span>, <span class=\"keyword\">string</span> regx</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> isMatch = System.Text.RegularExpressions.Regex.IsMatch(<span class=\"keyword\">value</span>, regx);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isMatch)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            System.Text.RegularExpressions.MatchCollection matchCol = System.Text.RegularExpressions.Regex.Matches(<span class=\"keyword\">value</span>, regx);</span><br><span class=\"line\">            <span class=\"keyword\">string</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[matchCol.Count];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matchCol.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matchCol.Count; i++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    result[i] = matchCol[i].Value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 设置邮件信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strToAddress\"&gt;</span>收件人地址,多个用;分隔<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strCcAddress\"&gt;</span>抄送人地址,多个用;分隔<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSendAddress\"&gt;</span>发件人地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSendName\"&gt;</span>发件人姓名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSubject\"&gt;</span>邮件主题<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strBody\"&gt;</span>邮件内容<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strFilePath\"&gt;</span>邮件附件(绝对路径)<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MailMessage <span class=\"title\">SetMailInfo</span>(<span class=\"params\"><span class=\"keyword\">string</span> strToAddress, <span class=\"keyword\">string</span> strCcAddress, <span class=\"keyword\">string</span> strSendAddress, <span class=\"keyword\">string</span> strSendName, <span class=\"keyword\">string</span> strSubject, <span class=\"keyword\">string</span> strBody, <span class=\"keyword\">string</span> strFilePath</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            MailMessage msg = <span class=\"keyword\">new</span> System.Net.Mail.MailMessage();</span><br><span class=\"line\">            <span class=\"comment\">//收件人邮箱</span></span><br><span class=\"line\">            <span class=\"keyword\">string</span>[] toToAddressStrings = strToAddress.Split(<span class=\"string\">\";\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> str <span class=\"keyword\">in</span> toToAddressStrings)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (CheckEmail(str))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    msg.To.Add(str);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//抄送人邮箱</span></span><br><span class=\"line\">            <span class=\"keyword\">string</span>[] toCcAddressStrings = strCcAddress.Split(<span class=\"string\">\";\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> str <span class=\"keyword\">in</span> toCcAddressStrings)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (CheckEmail(str))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    msg.CC.Add(str);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//发件人信息(地址,姓名,(编码))</span></span><br><span class=\"line\">            msg.From = <span class=\"keyword\">new</span> MailAddress(strSendAddress, strSendName, Encoding.UTF8);</span><br><span class=\"line\">            <span class=\"comment\">//邮件标题</span></span><br><span class=\"line\">            msg.Subject = strSubject;</span><br><span class=\"line\">            <span class=\"comment\">//邮件标题编码 </span></span><br><span class=\"line\">            msg.SubjectEncoding = Encoding.UTF8;</span><br><span class=\"line\">            <span class=\"comment\">//邮件内容   </span></span><br><span class=\"line\">            msg.Body = strBody;</span><br><span class=\"line\">            <span class=\"comment\">//邮件内容编码   </span></span><br><span class=\"line\">            msg.BodyEncoding = Encoding.UTF8;</span><br><span class=\"line\">            <span class=\"comment\">//邮件附件,第二个参数表示附件的文件类型，可以不用指定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(strFilePath))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                msg.Attachments.Add(<span class=\"keyword\">new</span> Attachment(strFilePath, System.Net.Mime.MediaTypeNames.Application.Rtf));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//是否是HTML邮件   </span></span><br><span class=\"line\">            msg.IsBodyHtml = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            msg.Priority = MailPriority.High;<span class=\"comment\">//邮件优先级   </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> localhost 发送邮件(需要在本地搭建SMTP服务器)</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">SendMailLocalhost</span>(<span class=\"params\">MailMessage msg</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            client.Host = <span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);  </span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送成功\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送邮件出错\"</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SMTP发送邮件</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSendAddress\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSmtp\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">SendMailUseSmtp</span>(<span class=\"params\">MailMessage msg, <span class=\"keyword\">string</span> strSendAddress, <span class=\"keyword\">string</span> strSmtp</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            <span class=\"comment\">//邮箱和SMTP授权码</span></span><br><span class=\"line\">            client.Credentials = <span class=\"keyword\">new</span> System.Net.NetworkCredential(strSendAddress, strSmtp);</span><br><span class=\"line\">            client.Host = <span class=\"string\">\"smtp.qq.com\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);</span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送成功\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (System.Net.Mail.SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送邮件出错\"</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SSL-SMTP发送邮件</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSendAddress\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strSmtp\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">SendMailUseSslSmtp</span>(<span class=\"params\">MailMessage msg,<span class=\"keyword\">string</span> strSendAddress,<span class=\"keyword\">string</span> strSmtp</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            SmtpClient client = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">            <span class=\"comment\">//GMail邮箱和SMTP授权码</span></span><br><span class=\"line\">            client.Credentials = <span class=\"keyword\">new</span> System.Net.NetworkCredential(strSendAddress, strSmtp);</span><br><span class=\"line\">            client.Port = <span class=\"number\">587</span>;<span class=\"comment\">//Gmail使用的端口   </span></span><br><span class=\"line\">            client.Host = <span class=\"string\">\"smtp.qq.com\"</span>;</span><br><span class=\"line\">            client.EnableSsl = <span class=\"literal\">true</span>;<span class=\"comment\">//经过ssl加密   </span></span><br><span class=\"line\">            <span class=\"keyword\">object</span> userState = msg;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//client.SendAsync(msg, userState);</span></span><br><span class=\"line\">                client.Send(msg);</span><br><span class=\"line\">                <span class=\"comment\">//简单一点儿可以client.Send(msg);   </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送成功\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (System.Net.Mail.SmtpException ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"发送邮件出错\"</span> + ex.Message;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Mail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FrmSendMail</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            MailMessage mailInfo = MailHelper.SetMailInfo(<span class=\"string\">\"a@qq.com\"</span>, <span class=\"string\">\"b@qq.com\"</span>, <span class=\"string\">\"c@qq.com\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"localhost测试\"</span>, <span class=\"string\">\"内容测试\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">string</span> msg = MailHelper.SendMailLocalhost(mailInfo);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">            mailInfo = MailHelper.SetMailInfo(<span class=\"string\">\"a@qq.com\"</span>, <span class=\"string\">\"b@qq.com\"</span>, <span class=\"string\">\"c@qq.com\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SMTP\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SMTP测试\"</span>, <span class=\"string\">\"内容测试\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            msg = MailHelper.SendMailUseSmtp(mailInfo, <span class=\"string\">\"c@qq.com\"</span>, <span class=\"string\">\"授权码\"</span>);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">            mailInfo = MailHelper.SetMailInfo(<span class=\"string\">\"a@qq.com\"</span>, <span class=\"string\">\"b@qq.com\"</span>, <span class=\"string\">\"c@qq.com\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SSL-SMTP\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"SSL-SMTP测试\"</span>, <span class=\"string\">\"内容测试\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            msg = MailHelper.SendMailUseSslSmtp(mailInfo, <span class=\"string\">\"c@qq.com\"</span>, <span class=\"string\">\"授权码\"</span>);</span><br><span class=\"line\">            Console.WriteLine(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"CSharp-利用委托解决跨线程操作控件产生的问题","date":"2018-03-14T14:47:19.000Z","_content":"```cs\nprivate delegate void AddVirus(string name);  \n//声明一个委托。当然AddVirus是什么都可以，自己取。括号内的参数也根据实际情况自己决定  \nvoid SearchVirus(string path)  \n{  \n    if (VirusList.InvokeRequired)//判断VirusList这个控件是不是该线程创建的，如果为true则不是  \n    {  \n    AddVirus add = new AddVirus(SearchVirus);//实例化委托  \n    VirusList.Invoke(add, path);//重新调用  \n    }  \n    else  \n    {  \n    VirusList.Items.Add(filename);//如果VirusList是该线程创建的，则执行添加操作  \n    }  \n}  \n```\n","source":"_posts/CSharp-利用委托解决跨线程操作控件产生的问题.md","raw":"---\ntitle: CSharp-利用委托解决跨线程操作控件产生的问题\ndate: 2018-03-14 22:47:19\ncategories: C# \ntags: \n - 委托\n - winform\n - C#\n---\n```cs\nprivate delegate void AddVirus(string name);  \n//声明一个委托。当然AddVirus是什么都可以，自己取。括号内的参数也根据实际情况自己决定  \nvoid SearchVirus(string path)  \n{  \n    if (VirusList.InvokeRequired)//判断VirusList这个控件是不是该线程创建的，如果为true则不是  \n    {  \n    AddVirus add = new AddVirus(SearchVirus);//实例化委托  \n    VirusList.Invoke(add, path);//重新调用  \n    }  \n    else  \n    {  \n    VirusList.Items.Add(filename);//如果VirusList是该线程创建的，则执行添加操作  \n    }  \n}  \n```\n","slug":"CSharp-利用委托解决跨线程操作控件产生的问题","published":1,"updated":"2019-04-02T14:45:13.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yh000ltkui6f15ubc4","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">AddVirus</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)</span>;  </span><br><span class=\"line\"><span class=\"comment\">//声明一个委托。当然AddVirus是什么都可以，自己取。括号内的参数也根据实际情况自己决定  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SearchVirus</span>(<span class=\"params\"><span class=\"keyword\">string</span> path</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VirusList.InvokeRequired)<span class=\"comment\">//判断VirusList这个控件是不是该线程创建的，如果为true则不是  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    AddVirus <span class=\"keyword\">add</span> = <span class=\"keyword\">new</span> AddVirus(SearchVirus);<span class=\"comment\">//实例化委托  </span></span><br><span class=\"line\">    VirusList.Invoke(<span class=\"keyword\">add</span>, path);<span class=\"comment\">//重新调用  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    VirusList.Items.Add(filename);<span class=\"comment\">//如果VirusList是该线程创建的，则执行添加操作  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">AddVirus</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)</span>;  </span><br><span class=\"line\"><span class=\"comment\">//声明一个委托。当然AddVirus是什么都可以，自己取。括号内的参数也根据实际情况自己决定  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SearchVirus</span>(<span class=\"params\"><span class=\"keyword\">string</span> path</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VirusList.InvokeRequired)<span class=\"comment\">//判断VirusList这个控件是不是该线程创建的，如果为true则不是  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    AddVirus <span class=\"keyword\">add</span> = <span class=\"keyword\">new</span> AddVirus(SearchVirus);<span class=\"comment\">//实例化委托  </span></span><br><span class=\"line\">    VirusList.Invoke(<span class=\"keyword\">add</span>, path);<span class=\"comment\">//重新调用  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    VirusList.Items.Add(filename);<span class=\"comment\">//如果VirusList是该线程创建的，则执行添加操作  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"CSharp-在Winform中使用Sqlite","date":"2018-12-11T14:48:20.000Z","_content":"近期了解了一下Sqlite数据库,便想把之前写的一个爬虫项目的数据库里添加Sqlite支持,一开始想着用EF去完成的,后面尝试过后,发现EF用起来并不是那么方便,就改成用Sqlite的ORM框架,这里采用的是sqlite-net-pcl,nuget查找sqlite-net-pcl并选择即可.\n<!--more-->\n##### 定义实体类\n```cs\npublic class Book\n{\n    [PrimaryKey, AutoIncrement]\n    public int BookId { get; set; }\n    public string BookName { get; set; }\n    public string BookLink { get; set; }\n    public string DownloadLink { get; set; }\n}\n```\n##### 定义数据库连接\n```cs\npublic class BookSqliteDb : SQLiteConnection\n{\n    //定义属性，便于外部访问数据表\n    public TableQuery<Book> Books { get { return this.Table<Book>(); } }\n\n    public BookSqliteDb(string dbPath) : base(dbPath)\n    {\n        //创建数据表\n        CreateTable<Book>();\n    }\n}\n```\n##### 调用\n```cs\n//定义Sqlite文件路径\nprivate string dbPath = $\"{Environment.CurrentDirectory}\\\\Kindle.db\";\n\n//增加\nList<Book> books = new List<Book>()\n{\n    new Book() { BookId = \"1\", BookName = \"将夜\", BookLink = \"www.baidu.com\", DownloadLink = \"www.baidu.com\" }\n};\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    int count = Kindledb.InsertAll(books);\n}\n\n//修改\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    var book = Kindledb.Books.FirstOrDefault(x => x.BookName == \"将夜\");\n    if (book != null)\n    {\n        book.BookLink = \"\";\n        int count = Kindledb.Update(book);\n    }\n}\n\n//删除\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    int count = Kindledb.Books.Delete(x => x.BookName == \"将夜\");\n}\n\n//查询\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    var books = Kindledb.Books.Where(x => x.BookName == \"将夜\").OrderByDescending(x => x.BookId).ToList();\n    string str = $\"{DateTime.Now}, 查到{books.Count}条记录\";\n}\n```","source":"_posts/CSharp-在Winform中使用Sqlite.md","raw":"---\ntitle: 'CSharp-在Winform中使用Sqlite'\ndate: 2018-12-11 22:48:20\ncategories: C# \ntags: \n - Sqlite\n - C#\n---\n近期了解了一下Sqlite数据库,便想把之前写的一个爬虫项目的数据库里添加Sqlite支持,一开始想着用EF去完成的,后面尝试过后,发现EF用起来并不是那么方便,就改成用Sqlite的ORM框架,这里采用的是sqlite-net-pcl,nuget查找sqlite-net-pcl并选择即可.\n<!--more-->\n##### 定义实体类\n```cs\npublic class Book\n{\n    [PrimaryKey, AutoIncrement]\n    public int BookId { get; set; }\n    public string BookName { get; set; }\n    public string BookLink { get; set; }\n    public string DownloadLink { get; set; }\n}\n```\n##### 定义数据库连接\n```cs\npublic class BookSqliteDb : SQLiteConnection\n{\n    //定义属性，便于外部访问数据表\n    public TableQuery<Book> Books { get { return this.Table<Book>(); } }\n\n    public BookSqliteDb(string dbPath) : base(dbPath)\n    {\n        //创建数据表\n        CreateTable<Book>();\n    }\n}\n```\n##### 调用\n```cs\n//定义Sqlite文件路径\nprivate string dbPath = $\"{Environment.CurrentDirectory}\\\\Kindle.db\";\n\n//增加\nList<Book> books = new List<Book>()\n{\n    new Book() { BookId = \"1\", BookName = \"将夜\", BookLink = \"www.baidu.com\", DownloadLink = \"www.baidu.com\" }\n};\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    int count = Kindledb.InsertAll(books);\n}\n\n//修改\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    var book = Kindledb.Books.FirstOrDefault(x => x.BookName == \"将夜\");\n    if (book != null)\n    {\n        book.BookLink = \"\";\n        int count = Kindledb.Update(book);\n    }\n}\n\n//删除\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    int count = Kindledb.Books.Delete(x => x.BookName == \"将夜\");\n}\n\n//查询\nusing (var Kindledb = new BookSqliteDb(dbPath))\n{\n    var books = Kindledb.Books.Where(x => x.BookName == \"将夜\").OrderByDescending(x => x.BookId).ToList();\n    string str = $\"{DateTime.Now}, 查到{books.Count}条记录\";\n}\n```","slug":"CSharp-在Winform中使用Sqlite","published":1,"updated":"2019-04-02T14:45:27.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yh000mtkui7cseu8t3","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>近期了解了一下Sqlite数据库,便想把之前写的一个爬虫项目的数据库里添加Sqlite支持,一开始想着用EF去完成的,后面尝试过后,发现EF用起来并不是那么方便,就改成用Sqlite的ORM框架,这里采用的是sqlite-net-pcl,nuget查找sqlite-net-pcl并选择即可.<br><a id=\"more\"></a></p><h5 id=\"定义实体类\"><a href=\"#定义实体类\" class=\"headerlink\" title=\"定义实体类\"></a>定义实体类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Book</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">PrimaryKey, AutoIncrement</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BookId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> BookName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> BookLink &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> DownloadLink &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"定义数据库连接\"><a href=\"#定义数据库连接\" class=\"headerlink\" title=\"定义数据库连接\"></a>定义数据库连接</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BookSqliteDb</span> : <span class=\"title\">SQLiteConnection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义属性，便于外部访问数据表</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TableQuery&lt;Book&gt; Books &#123; <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Table&lt;Book&gt;(); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookSqliteDb</span>(<span class=\"params\"><span class=\"keyword\">string</span> dbPath</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbPath</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建数据表</span></span><br><span class=\"line\">        CreateTable&lt;Book&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Sqlite文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> dbPath = <span class=\"string\">$\"<span class=\"subst\">&#123;Environment.CurrentDirectory&#125;</span>\\\\Kindle.db\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//增加</span></span><br><span class=\"line\">List&lt;Book&gt; books = <span class=\"keyword\">new</span> List&lt;Book&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Book() &#123; BookId = <span class=\"string\">\"1\"</span>, BookName = <span class=\"string\">\"将夜\"</span>, BookLink = <span class=\"string\">\"www.baidu.com\"</span>, DownloadLink = <span class=\"string\">\"www.baidu.com\"</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = Kindledb.InsertAll(books);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> book = Kindledb.Books.FirstOrDefault(x =&gt; x.BookName == <span class=\"string\">\"将夜\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (book != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        book.BookLink = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = Kindledb.Update(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = Kindledb.Books.Delete(x =&gt; x.BookName == <span class=\"string\">\"将夜\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> books = Kindledb.Books.Where(x =&gt; x.BookName == <span class=\"string\">\"将夜\"</span>).OrderByDescending(x =&gt; x.BookId).ToList();</span><br><span class=\"line\">    <span class=\"keyword\">string</span> str = <span class=\"string\">$\"<span class=\"subst\">&#123;DateTime.Now&#125;</span>, 查到<span class=\"subst\">&#123;books.Count&#125;</span>条记录\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>近期了解了一下Sqlite数据库,便想把之前写的一个爬虫项目的数据库里添加Sqlite支持,一开始想着用EF去完成的,后面尝试过后,发现EF用起来并不是那么方便,就改成用Sqlite的ORM框架,这里采用的是sqlite-net-pcl,nuget查找sqlite-net-pcl并选择即可.<br>","more":"</p><h5 id=\"定义实体类\"><a href=\"#定义实体类\" class=\"headerlink\" title=\"定义实体类\"></a>定义实体类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Book</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">PrimaryKey, AutoIncrement</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> BookId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> BookName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> BookLink &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> DownloadLink &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"定义数据库连接\"><a href=\"#定义数据库连接\" class=\"headerlink\" title=\"定义数据库连接\"></a>定义数据库连接</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BookSqliteDb</span> : <span class=\"title\">SQLiteConnection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义属性，便于外部访问数据表</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TableQuery&lt;Book&gt; Books &#123; <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Table&lt;Book&gt;(); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookSqliteDb</span>(<span class=\"params\"><span class=\"keyword\">string</span> dbPath</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbPath</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建数据表</span></span><br><span class=\"line\">        CreateTable&lt;Book&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Sqlite文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> dbPath = <span class=\"string\">$\"<span class=\"subst\">&#123;Environment.CurrentDirectory&#125;</span>\\\\Kindle.db\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//增加</span></span><br><span class=\"line\">List&lt;Book&gt; books = <span class=\"keyword\">new</span> List&lt;Book&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Book() &#123; BookId = <span class=\"string\">\"1\"</span>, BookName = <span class=\"string\">\"将夜\"</span>, BookLink = <span class=\"string\">\"www.baidu.com\"</span>, DownloadLink = <span class=\"string\">\"www.baidu.com\"</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = Kindledb.InsertAll(books);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> book = Kindledb.Books.FirstOrDefault(x =&gt; x.BookName == <span class=\"string\">\"将夜\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (book != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        book.BookLink = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = Kindledb.Update(book);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = Kindledb.Books.Delete(x =&gt; x.BookName == <span class=\"string\">\"将夜\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> Kindledb = <span class=\"keyword\">new</span> BookSqliteDb(dbPath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> books = Kindledb.Books.Where(x =&gt; x.BookName == <span class=\"string\">\"将夜\"</span>).OrderByDescending(x =&gt; x.BookId).ToList();</span><br><span class=\"line\">    <span class=\"keyword\">string</span> str = <span class=\"string\">$\"<span class=\"subst\">&#123;DateTime.Now&#125;</span>, 查到<span class=\"subst\">&#123;books.Count&#125;</span>条记录\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"CSharp-字符串处理","date":"2019-04-03T14:59:11.000Z","_content":"### 字符串处理\n#### AddDays方法\n用于将指定的天数加到指定实例的值上\n```cs\n//DateTime结构的AddDays方法\nDateTime dt = DateTine.Now;\nDateTime result = dt.AddDays(30);\n//Calender类的AddDays方法\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nDataTime dtresult = cal.AddDays(dt, 10);\n```\n<!--more-->\n#### Compare方法\n用于全面比较两个字符串对象\n* Compare方法各个参数说明\n    | 参数 | 描述 |\n    | :------: | :------: |\n    | strA和strB | 待比较的两个字符串 |\n    | ignorCase | 指定是否忽略大小写 |\n    | indexA和indexB | 需要比较两个字符串中的子串时,indexA和indexB为strA和strB中子字符串的起始位置 |\n    | length | 待比较字符串的最大长度 |\n    | culture | 字符串的区域信息 |\n* Compare返回值说明\n    | 参数条件 | 返回值 |\n    | :------: | :------: |\n    | strA大于strB | 负整数 |\n    | strA小于strB | 正整数 |\n    | strA等于strB | 0 |\n* 示例\n    ```cs\n    int i = String.Compare(\"A\",\"B\");\n    ```\n#### CompareTo方法\n用于将当前字符串对象与另一个字符串对象做比较\n```cs\nString StrA = \"Caty\"\nint result = StrA.CompareTo(\"chchaty\");\n```\n#### DateDiff方法\n用于获取日期时间的间隔数\n* 参数说明\n    | 参数 | 描述 |\n    | :------: | :------: |\n    | Interval | DateInterval枚举值或String表达式,表示要用做Date1和Date2之差的单位的时间间隔 |\n    | Date1 | 要用于计算的第1个日期/时间 |\n    | Date2 | 要用于计算的第2个日期/时间 |\n    | DayOfWeek | 用于指定一周的第一天,默认星期天 |\n    | WeekOfYear | 用于指定一年的第一周,默认一月一号 |\n    | 返回值 | 返回一个Long值,用于指定两个Date值之间的时间间隔数 |\n* 示例\n    ```cs\n    DateTime dt = DateTine.Now;\n    DateTime result = dt.AddDays(30);\n    long dat = DateAndTime.DateDiff(\"s\", dt, result, FirstDayOfWeek.Sunday, FirstWeekOfYear.FirstFourDays);\n    ```\n#### Equals方法\n用于确定两个String对象是否具有相同的值\n * StringComparison枚举值说明\n    | 枚举值 | 描述 |\n    | :------: | :------: |\n    | CurrentCulture | 使用区域敏感排序规则和当前区域比较字符串 |\n    | CurrentCultureIgnoreCase | 使用区域敏感排序规则和当前区域比较字符串,忽略大小写 |\n    | InvariantCulture | 使用区域敏感排序规则和固定区域比较字符串 |\n    | InvariantCultureIgnoreCase | 使用区域敏感排序规则和固定区域比较字符串,忽略大小写 |\n    | Ordinal | 使用序号排序规则比较字符串 |\n    | OrdinalIgnoreCase | 使用序号排序规则比较字符串,忽略大小写 |\n * 示例\n    ```cs\n    bool result = string.Equals(\"hello\",\"HELLO\",StringComparison.OrdinalIgnoreCase);\n    string a = \"Caty\"\n    bool result = a.Equals(\"caty\");\n    ```\n#### Format方法\n将指定的String中的格式项替换为指定的Object实例的值的文本等效项\n```cs\nstring str = string.Format(\"{0}\",\"Caty\");\nobject[] obj = new object[] { \"C#\", \".Net\"};\nstring str = string.Format(Culture.CurrentCulture, \"$123456\", obj);\n```\n#### GetDayOfWeek方法\n用于返回指定DateTime中的日期是星期几\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nstring str = cal.GetDayOfWeek(dt);\n```\n#### GetMonth方法\n用于返回指定日期中的月份\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetMonth(dt);\n```\n#### GetYear方法\n用于返回指定日期中的年份\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetYear(dt);\n```\n#### GetMonthsInYear方法\n用于返回指定年份中的月数\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetMonthsInYear(cal.GetYear(dt));\n```\n#### GetText方法\n用于检索文本数据\n * TextDataFormat的枚举值说明\n    | 枚举值 | 描述 |\n    | :------: | :------: |\n    | Text | 指定标准的ANSI文本格式 |\n    | UnicodeText | 指定标准的Windows Unicode文本格式 |\n    | Rtf | 指定有RTF数据组成的文本 |\n    | Html | 指定有HTML数据组成的文本 |\n    | CommaSeparatedValue | 指定以逗号分隔值的格式 |\n * 示例\n    ```cs\n    string str = Clipboard.GetText();\n    ```\n#### IndexOf方法\n用于确定指定字符串在字符串中的索引\n```cs\nstring str = \"caty\"\nint a = str.IndexOf('c');\nint b = str.IndexOf(\"at\",1,2);//从第二个字符开始搜索,,搜索两个字符数\n```\n#### IsLeapYear方法\n用于判断年份是否为闰年\n```cs\nint resullt = DateTime.IsLeapYear(2014);\n```\n#### IsMatch方法\n用于验证输入字符是否与正则表达式相匹配\n```cs\nstring str = \"caty\";\nbool result = Regex.IsMatch(str,@\"^.{8,}$\");\n```\n#### IsUpper方法\n用于判断指定字符串中指定位置的字符是否大写\n```cs\nbool result = char.IsUpper(\"Caty\",0);\n```\n#### Join方法\n用于在指定String数组的每个元素之间串联指定的分隔符String,从而产生单个串联的字符串\n```cs\nstring [] arr = new string[5] { \"1\", \"2\", \"3\", \"4\",\" 5\" };\nstring result = String.Join(\",\",arr);\n```\n#### LastIndexOf方法\n用于确定指定字符在字符串中最后一次出现的索引位置\n```cs\nstring str = \"ChCaty\";\nint result = str.LastIndexOf(\"C\");\n```\n","source":"_posts/CSharp-字符串处理.md","raw":"---\ntitle: CSharp-字符串处理\ndate: 2019-04-03 22:59:11\ncategories: C# \ntags: \n - 基础\n - C#\n---\n### 字符串处理\n#### AddDays方法\n用于将指定的天数加到指定实例的值上\n```cs\n//DateTime结构的AddDays方法\nDateTime dt = DateTine.Now;\nDateTime result = dt.AddDays(30);\n//Calender类的AddDays方法\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nDataTime dtresult = cal.AddDays(dt, 10);\n```\n<!--more-->\n#### Compare方法\n用于全面比较两个字符串对象\n* Compare方法各个参数说明\n    | 参数 | 描述 |\n    | :------: | :------: |\n    | strA和strB | 待比较的两个字符串 |\n    | ignorCase | 指定是否忽略大小写 |\n    | indexA和indexB | 需要比较两个字符串中的子串时,indexA和indexB为strA和strB中子字符串的起始位置 |\n    | length | 待比较字符串的最大长度 |\n    | culture | 字符串的区域信息 |\n* Compare返回值说明\n    | 参数条件 | 返回值 |\n    | :------: | :------: |\n    | strA大于strB | 负整数 |\n    | strA小于strB | 正整数 |\n    | strA等于strB | 0 |\n* 示例\n    ```cs\n    int i = String.Compare(\"A\",\"B\");\n    ```\n#### CompareTo方法\n用于将当前字符串对象与另一个字符串对象做比较\n```cs\nString StrA = \"Caty\"\nint result = StrA.CompareTo(\"chchaty\");\n```\n#### DateDiff方法\n用于获取日期时间的间隔数\n* 参数说明\n    | 参数 | 描述 |\n    | :------: | :------: |\n    | Interval | DateInterval枚举值或String表达式,表示要用做Date1和Date2之差的单位的时间间隔 |\n    | Date1 | 要用于计算的第1个日期/时间 |\n    | Date2 | 要用于计算的第2个日期/时间 |\n    | DayOfWeek | 用于指定一周的第一天,默认星期天 |\n    | WeekOfYear | 用于指定一年的第一周,默认一月一号 |\n    | 返回值 | 返回一个Long值,用于指定两个Date值之间的时间间隔数 |\n* 示例\n    ```cs\n    DateTime dt = DateTine.Now;\n    DateTime result = dt.AddDays(30);\n    long dat = DateAndTime.DateDiff(\"s\", dt, result, FirstDayOfWeek.Sunday, FirstWeekOfYear.FirstFourDays);\n    ```\n#### Equals方法\n用于确定两个String对象是否具有相同的值\n * StringComparison枚举值说明\n    | 枚举值 | 描述 |\n    | :------: | :------: |\n    | CurrentCulture | 使用区域敏感排序规则和当前区域比较字符串 |\n    | CurrentCultureIgnoreCase | 使用区域敏感排序规则和当前区域比较字符串,忽略大小写 |\n    | InvariantCulture | 使用区域敏感排序规则和固定区域比较字符串 |\n    | InvariantCultureIgnoreCase | 使用区域敏感排序规则和固定区域比较字符串,忽略大小写 |\n    | Ordinal | 使用序号排序规则比较字符串 |\n    | OrdinalIgnoreCase | 使用序号排序规则比较字符串,忽略大小写 |\n * 示例\n    ```cs\n    bool result = string.Equals(\"hello\",\"HELLO\",StringComparison.OrdinalIgnoreCase);\n    string a = \"Caty\"\n    bool result = a.Equals(\"caty\");\n    ```\n#### Format方法\n将指定的String中的格式项替换为指定的Object实例的值的文本等效项\n```cs\nstring str = string.Format(\"{0}\",\"Caty\");\nobject[] obj = new object[] { \"C#\", \".Net\"};\nstring str = string.Format(Culture.CurrentCulture, \"$123456\", obj);\n```\n#### GetDayOfWeek方法\n用于返回指定DateTime中的日期是星期几\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nstring str = cal.GetDayOfWeek(dt);\n```\n#### GetMonth方法\n用于返回指定日期中的月份\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetMonth(dt);\n```\n#### GetYear方法\n用于返回指定日期中的年份\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetYear(dt);\n```\n#### GetMonthsInYear方法\n用于返回指定年份中的月数\n```cs\nDateTime dt = new DateTime(2011,4,1,new GregorianCalendar());\nCalendar cal = CultureInfo.InvariantCulture.Calendar;\nint i = cal.GetMonthsInYear(cal.GetYear(dt));\n```\n#### GetText方法\n用于检索文本数据\n * TextDataFormat的枚举值说明\n    | 枚举值 | 描述 |\n    | :------: | :------: |\n    | Text | 指定标准的ANSI文本格式 |\n    | UnicodeText | 指定标准的Windows Unicode文本格式 |\n    | Rtf | 指定有RTF数据组成的文本 |\n    | Html | 指定有HTML数据组成的文本 |\n    | CommaSeparatedValue | 指定以逗号分隔值的格式 |\n * 示例\n    ```cs\n    string str = Clipboard.GetText();\n    ```\n#### IndexOf方法\n用于确定指定字符串在字符串中的索引\n```cs\nstring str = \"caty\"\nint a = str.IndexOf('c');\nint b = str.IndexOf(\"at\",1,2);//从第二个字符开始搜索,,搜索两个字符数\n```\n#### IsLeapYear方法\n用于判断年份是否为闰年\n```cs\nint resullt = DateTime.IsLeapYear(2014);\n```\n#### IsMatch方法\n用于验证输入字符是否与正则表达式相匹配\n```cs\nstring str = \"caty\";\nbool result = Regex.IsMatch(str,@\"^.{8,}$\");\n```\n#### IsUpper方法\n用于判断指定字符串中指定位置的字符是否大写\n```cs\nbool result = char.IsUpper(\"Caty\",0);\n```\n#### Join方法\n用于在指定String数组的每个元素之间串联指定的分隔符String,从而产生单个串联的字符串\n```cs\nstring [] arr = new string[5] { \"1\", \"2\", \"3\", \"4\",\" 5\" };\nstring result = String.Join(\",\",arr);\n```\n#### LastIndexOf方法\n用于确定指定字符在字符串中最后一次出现的索引位置\n```cs\nstring str = \"ChCaty\";\nint result = str.LastIndexOf(\"C\");\n```\n","slug":"CSharp-字符串处理","published":1,"updated":"2019-04-04T15:27:35.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yi000ntkuimos36u6z","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h3><h4 id=\"AddDays方法\"><a href=\"#AddDays方法\" class=\"headerlink\" title=\"AddDays方法\"></a>AddDays方法</h4><p>用于将指定的天数加到指定实例的值上<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DateTime结构的AddDays方法</span></span><br><span class=\"line\">DateTime dt = DateTine.Now;</span><br><span class=\"line\">DateTime result = dt.AddDays(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"comment\">//Calender类的AddDays方法</span></span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\">DataTime dtresult = cal.AddDays(dt, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure><p></p><a id=\"more\"></a><h4 id=\"Compare方法\"><a href=\"#Compare方法\" class=\"headerlink\" title=\"Compare方法\"></a>Compare方法</h4><p>用于全面比较两个字符串对象</p><ul><li>Compare方法各个参数说明<br>| 参数 | 描述 |<br>| :——: | :——: |<br>| strA和strB | 待比较的两个字符串 |<br>| ignorCase | 指定是否忽略大小写 |<br>| indexA和indexB | 需要比较两个字符串中的子串时,indexA和indexB为strA和strB中子字符串的起始位置 |<br>| length | 待比较字符串的最大长度 |<br>| culture | 字符串的区域信息 |</li><li>Compare返回值说明<br>| 参数条件 | 返回值 |<br>| :——: | :——: |<br>| strA大于strB | 负整数 |<br>| strA小于strB | 正整数 |<br>| strA等于strB | 0 |</li><li>示例<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = String.Compare(<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"CompareTo方法\"><a href=\"#CompareTo方法\" class=\"headerlink\" title=\"CompareTo方法\"></a>CompareTo方法</h4><p>用于将当前字符串对象与另一个字符串对象做比较<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String StrA = <span class=\"string\">\"Caty\"</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> result = StrA.CompareTo(<span class=\"string\">\"chchaty\"</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"DateDiff方法\"><a href=\"#DateDiff方法\" class=\"headerlink\" title=\"DateDiff方法\"></a>DateDiff方法</h4><p>用于获取日期时间的间隔数</p><ul><li>参数说明<br>| 参数 | 描述 |<br>| :——: | :——: |<br>| Interval | DateInterval枚举值或String表达式,表示要用做Date1和Date2之差的单位的时间间隔 |<br>| Date1 | 要用于计算的第1个日期/时间 |<br>| Date2 | 要用于计算的第2个日期/时间 |<br>| DayOfWeek | 用于指定一周的第一天,默认星期天 |<br>| WeekOfYear | 用于指定一年的第一周,默认一月一号 |<br>| 返回值 | 返回一个Long值,用于指定两个Date值之间的时间间隔数 |</li><li>示例<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = DateTine.Now;</span><br><span class=\"line\">DateTime result = dt.AddDays(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">long</span> dat = DateAndTime.DateDiff(<span class=\"string\">\"s\"</span>, dt, result, FirstDayOfWeek.Sunday, FirstWeekOfYear.FirstFourDays);</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"Equals方法\"><a href=\"#Equals方法\" class=\"headerlink\" title=\"Equals方法\"></a>Equals方法</h4><p>用于确定两个String对象是否具有相同的值</p><ul><li>StringComparison枚举值说明<br>| 枚举值 | 描述 |<br>| :——: | :——: |<br>| CurrentCulture | 使用区域敏感排序规则和当前区域比较字符串 |<br>| CurrentCultureIgnoreCase | 使用区域敏感排序规则和当前区域比较字符串,忽略大小写 |<br>| InvariantCulture | 使用区域敏感排序规则和固定区域比较字符串 |<br>| InvariantCultureIgnoreCase | 使用区域敏感排序规则和固定区域比较字符串,忽略大小写 |<br>| Ordinal | 使用序号排序规则比较字符串 |<br>| OrdinalIgnoreCase | 使用序号排序规则比较字符串,忽略大小写 |</li><li>示例<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> result = <span class=\"keyword\">string</span>.Equals(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"HELLO\"</span>,StringComparison.OrdinalIgnoreCase);</span><br><span class=\"line\"><span class=\"keyword\">string</span> a = <span class=\"string\">\"Caty\"</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> result = a.Equals(<span class=\"string\">\"caty\"</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"Format方法\"><a href=\"#Format方法\" class=\"headerlink\" title=\"Format方法\"></a>Format方法</h4><p>将指定的String中的格式项替换为指定的Object实例的值的文本等效项<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0&#125;\"</span>,<span class=\"string\">\"Caty\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">object</span>[] obj = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[] &#123; <span class=\"string\">\"C#\"</span>, <span class=\"string\">\".Net\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">string</span> str = <span class=\"keyword\">string</span>.Format(Culture.CurrentCulture, <span class=\"string\">\"$123456\"</span>, obj);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GetDayOfWeek方法\"><a href=\"#GetDayOfWeek方法\" class=\"headerlink\" title=\"GetDayOfWeek方法\"></a>GetDayOfWeek方法</h4><p>用于返回指定DateTime中的日期是星期几<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">string</span> str = cal.GetDayOfWeek(dt);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GetMonth方法\"><a href=\"#GetMonth方法\" class=\"headerlink\" title=\"GetMonth方法\"></a>GetMonth方法</h4><p>用于返回指定日期中的月份<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = cal.GetMonth(dt);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GetYear方法\"><a href=\"#GetYear方法\" class=\"headerlink\" title=\"GetYear方法\"></a>GetYear方法</h4><p>用于返回指定日期中的年份<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = cal.GetYear(dt);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GetMonthsInYear方法\"><a href=\"#GetMonthsInYear方法\" class=\"headerlink\" title=\"GetMonthsInYear方法\"></a>GetMonthsInYear方法</h4><p>用于返回指定年份中的月数<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = cal.GetMonthsInYear(cal.GetYear(dt));</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GetText方法\"><a href=\"#GetText方法\" class=\"headerlink\" title=\"GetText方法\"></a>GetText方法</h4><p>用于检索文本数据</p><ul><li>TextDataFormat的枚举值说明<br>| 枚举值 | 描述 |<br>| :——: | :——: |<br>| Text | 指定标准的ANSI文本格式 |<br>| UnicodeText | 指定标准的Windows Unicode文本格式 |<br>| Rtf | 指定有RTF数据组成的文本 |<br>| Html | 指定有HTML数据组成的文本 |<br>| CommaSeparatedValue | 指定以逗号分隔值的格式 |</li><li>示例<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str = Clipboard.GetText();</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"IndexOf方法\"><a href=\"#IndexOf方法\" class=\"headerlink\" title=\"IndexOf方法\"></a>IndexOf方法</h4><p>用于确定指定字符串在字符串中的索引<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str = <span class=\"string\">\"caty\"</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = str.IndexOf(<span class=\"string\">'c'</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = str.IndexOf(<span class=\"string\">\"at\"</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);<span class=\"comment\">//从第二个字符开始搜索,,搜索两个字符数</span></span><br></pre></td></tr></table></figure><p></p><h4 id=\"IsLeapYear方法\"><a href=\"#IsLeapYear方法\" class=\"headerlink\" title=\"IsLeapYear方法\"></a>IsLeapYear方法</h4><p>用于判断年份是否为闰年<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> resullt = DateTime.IsLeapYear(<span class=\"number\">2014</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"IsMatch方法\"><a href=\"#IsMatch方法\" class=\"headerlink\" title=\"IsMatch方法\"></a>IsMatch方法</h4><p>用于验证输入字符是否与正则表达式相匹配<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str = <span class=\"string\">\"caty\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> result = Regex.IsMatch(str,<span class=\"string\">@\"^.&#123;8,&#125;$\"</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"IsUpper方法\"><a href=\"#IsUpper方法\" class=\"headerlink\" title=\"IsUpper方法\"></a>IsUpper方法</h4><p>用于判断指定字符串中指定位置的字符是否大写<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> result = <span class=\"keyword\">char</span>.IsUpper(<span class=\"string\">\"Caty\"</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Join方法\"><a href=\"#Join方法\" class=\"headerlink\" title=\"Join方法\"></a>Join方法</h4><p>用于在指定String数组的每个元素之间串联指定的分隔符String,从而产生单个串联的字符串<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> [] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[<span class=\"number\">5</span>] &#123; <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"4\"</span>,<span class=\"string\">\" 5\"</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">string</span> result = String.Join(<span class=\"string\">\",\"</span>,arr);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"LastIndexOf方法\"><a href=\"#LastIndexOf方法\" class=\"headerlink\" title=\"LastIndexOf方法\"></a>LastIndexOf方法</h4><p>用于确定指定字符在字符串中最后一次出现的索引位置<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str = <span class=\"string\">\"ChCaty\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> result = str.LastIndexOf(<span class=\"string\">\"C\"</span>);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h3><h4 id=\"AddDays方法\"><a href=\"#AddDays方法\" class=\"headerlink\" title=\"AddDays方法\"></a>AddDays方法</h4><p>用于将指定的天数加到指定实例的值上<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DateTime结构的AddDays方法</span></span><br><span class=\"line\">DateTime dt = DateTine.Now;</span><br><span class=\"line\">DateTime result = dt.AddDays(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"comment\">//Calender类的AddDays方法</span></span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\">DataTime dtresult = cal.AddDays(dt, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure><p></p>","more":"<h4 id=\"Compare方法\"><a href=\"#Compare方法\" class=\"headerlink\" title=\"Compare方法\"></a>Compare方法</h4><p>用于全面比较两个字符串对象</p><ul><li>Compare方法各个参数说明<br>| 参数 | 描述 |<br>| :——: | :——: |<br>| strA和strB | 待比较的两个字符串 |<br>| ignorCase | 指定是否忽略大小写 |<br>| indexA和indexB | 需要比较两个字符串中的子串时,indexA和indexB为strA和strB中子字符串的起始位置 |<br>| length | 待比较字符串的最大长度 |<br>| culture | 字符串的区域信息 |</li><li>Compare返回值说明<br>| 参数条件 | 返回值 |<br>| :——: | :——: |<br>| strA大于strB | 负整数 |<br>| strA小于strB | 正整数 |<br>| strA等于strB | 0 |</li><li>示例<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = String.Compare(<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"CompareTo方法\"><a href=\"#CompareTo方法\" class=\"headerlink\" title=\"CompareTo方法\"></a>CompareTo方法</h4><p>用于将当前字符串对象与另一个字符串对象做比较<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String StrA = <span class=\"string\">\"Caty\"</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> result = StrA.CompareTo(<span class=\"string\">\"chchaty\"</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"DateDiff方法\"><a href=\"#DateDiff方法\" class=\"headerlink\" title=\"DateDiff方法\"></a>DateDiff方法</h4><p>用于获取日期时间的间隔数</p><ul><li>参数说明<br>| 参数 | 描述 |<br>| :——: | :——: |<br>| Interval | DateInterval枚举值或String表达式,表示要用做Date1和Date2之差的单位的时间间隔 |<br>| Date1 | 要用于计算的第1个日期/时间 |<br>| Date2 | 要用于计算的第2个日期/时间 |<br>| DayOfWeek | 用于指定一周的第一天,默认星期天 |<br>| WeekOfYear | 用于指定一年的第一周,默认一月一号 |<br>| 返回值 | 返回一个Long值,用于指定两个Date值之间的时间间隔数 |</li><li>示例<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = DateTine.Now;</span><br><span class=\"line\">DateTime result = dt.AddDays(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">long</span> dat = DateAndTime.DateDiff(<span class=\"string\">\"s\"</span>, dt, result, FirstDayOfWeek.Sunday, FirstWeekOfYear.FirstFourDays);</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"Equals方法\"><a href=\"#Equals方法\" class=\"headerlink\" title=\"Equals方法\"></a>Equals方法</h4><p>用于确定两个String对象是否具有相同的值</p><ul><li>StringComparison枚举值说明<br>| 枚举值 | 描述 |<br>| :——: | :——: |<br>| CurrentCulture | 使用区域敏感排序规则和当前区域比较字符串 |<br>| CurrentCultureIgnoreCase | 使用区域敏感排序规则和当前区域比较字符串,忽略大小写 |<br>| InvariantCulture | 使用区域敏感排序规则和固定区域比较字符串 |<br>| InvariantCultureIgnoreCase | 使用区域敏感排序规则和固定区域比较字符串,忽略大小写 |<br>| Ordinal | 使用序号排序规则比较字符串 |<br>| OrdinalIgnoreCase | 使用序号排序规则比较字符串,忽略大小写 |</li><li>示例<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> result = <span class=\"keyword\">string</span>.Equals(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"HELLO\"</span>,StringComparison.OrdinalIgnoreCase);</span><br><span class=\"line\"><span class=\"keyword\">string</span> a = <span class=\"string\">\"Caty\"</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> result = a.Equals(<span class=\"string\">\"caty\"</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"Format方法\"><a href=\"#Format方法\" class=\"headerlink\" title=\"Format方法\"></a>Format方法</h4><p>将指定的String中的格式项替换为指定的Object实例的值的文本等效项<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0&#125;\"</span>,<span class=\"string\">\"Caty\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">object</span>[] obj = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[] &#123; <span class=\"string\">\"C#\"</span>, <span class=\"string\">\".Net\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">string</span> str = <span class=\"keyword\">string</span>.Format(Culture.CurrentCulture, <span class=\"string\">\"$123456\"</span>, obj);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GetDayOfWeek方法\"><a href=\"#GetDayOfWeek方法\" class=\"headerlink\" title=\"GetDayOfWeek方法\"></a>GetDayOfWeek方法</h4><p>用于返回指定DateTime中的日期是星期几<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">string</span> str = cal.GetDayOfWeek(dt);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GetMonth方法\"><a href=\"#GetMonth方法\" class=\"headerlink\" title=\"GetMonth方法\"></a>GetMonth方法</h4><p>用于返回指定日期中的月份<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = cal.GetMonth(dt);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GetYear方法\"><a href=\"#GetYear方法\" class=\"headerlink\" title=\"GetYear方法\"></a>GetYear方法</h4><p>用于返回指定日期中的年份<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = cal.GetYear(dt);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GetMonthsInYear方法\"><a href=\"#GetMonthsInYear方法\" class=\"headerlink\" title=\"GetMonthsInYear方法\"></a>GetMonthsInYear方法</h4><p>用于返回指定年份中的月数<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateTime dt = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2011</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> GregorianCalendar());</span><br><span class=\"line\">Calendar cal = CultureInfo.InvariantCulture.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = cal.GetMonthsInYear(cal.GetYear(dt));</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GetText方法\"><a href=\"#GetText方法\" class=\"headerlink\" title=\"GetText方法\"></a>GetText方法</h4><p>用于检索文本数据</p><ul><li>TextDataFormat的枚举值说明<br>| 枚举值 | 描述 |<br>| :——: | :——: |<br>| Text | 指定标准的ANSI文本格式 |<br>| UnicodeText | 指定标准的Windows Unicode文本格式 |<br>| Rtf | 指定有RTF数据组成的文本 |<br>| Html | 指定有HTML数据组成的文本 |<br>| CommaSeparatedValue | 指定以逗号分隔值的格式 |</li><li>示例<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str = Clipboard.GetText();</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"IndexOf方法\"><a href=\"#IndexOf方法\" class=\"headerlink\" title=\"IndexOf方法\"></a>IndexOf方法</h4><p>用于确定指定字符串在字符串中的索引<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str = <span class=\"string\">\"caty\"</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = str.IndexOf(<span class=\"string\">'c'</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = str.IndexOf(<span class=\"string\">\"at\"</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);<span class=\"comment\">//从第二个字符开始搜索,,搜索两个字符数</span></span><br></pre></td></tr></table></figure><p></p><h4 id=\"IsLeapYear方法\"><a href=\"#IsLeapYear方法\" class=\"headerlink\" title=\"IsLeapYear方法\"></a>IsLeapYear方法</h4><p>用于判断年份是否为闰年<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> resullt = DateTime.IsLeapYear(<span class=\"number\">2014</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"IsMatch方法\"><a href=\"#IsMatch方法\" class=\"headerlink\" title=\"IsMatch方法\"></a>IsMatch方法</h4><p>用于验证输入字符是否与正则表达式相匹配<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str = <span class=\"string\">\"caty\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> result = Regex.IsMatch(str,<span class=\"string\">@\"^.&#123;8,&#125;$\"</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"IsUpper方法\"><a href=\"#IsUpper方法\" class=\"headerlink\" title=\"IsUpper方法\"></a>IsUpper方法</h4><p>用于判断指定字符串中指定位置的字符是否大写<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> result = <span class=\"keyword\">char</span>.IsUpper(<span class=\"string\">\"Caty\"</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Join方法\"><a href=\"#Join方法\" class=\"headerlink\" title=\"Join方法\"></a>Join方法</h4><p>用于在指定String数组的每个元素之间串联指定的分隔符String,从而产生单个串联的字符串<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> [] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[<span class=\"number\">5</span>] &#123; <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"4\"</span>,<span class=\"string\">\" 5\"</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">string</span> result = String.Join(<span class=\"string\">\",\"</span>,arr);</span><br></pre></td></tr></table></figure><p></p><h4 id=\"LastIndexOf方法\"><a href=\"#LastIndexOf方法\" class=\"headerlink\" title=\"LastIndexOf方法\"></a>LastIndexOf方法</h4><p>用于确定指定字符在字符串中最后一次出现的索引位置<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> str = <span class=\"string\">\"ChCaty\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> result = str.LastIndexOf(<span class=\"string\">\"C\"</span>);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"CSharp-常用关键字和基础类","date":"2019-03-30T15:41:06.000Z","_content":"#### abstract关键字-抽象类\nabstract 关键字可以和类，属性，方法，索引器以及事件一起使用。在类声明中使用abstract关键字以指示某个类只能是其他类的基类\n<!--more-->\n##### 特性\n* 抽象类不能实例化\n* 抽象类可以包含抽象方法和抽象访问器\n* 抽象类不能被继承\n* 从抽象类派生的非抽象类必须包括继承的所有抽象方法和抽象访问器的实现\n\n#### base关键字-从派生类中访问基类的成员\nbase关键字用于从派生类中访问基类的成员\n##### 使用范围\n* 调用基类上已被其他方法重写的方法\n* 指定创建派生类实例时应调用的基类基类构造函数\n\n#### Console类-控制台中的输入流，输出流和错误流\nConsole类表示控制台应用程序的标准输入流。输出流和错误流，无法继承此类\n##### 属性\n| 属性 | 描述 |\n| :------: | :------: |\n| ForeGroundColor | 获取或设置控制台的前景色 |\n| BackgroundColor | 获取或设置控制台的背景色 |\n| BufferHeight | 获取或设置缓冲区高度 |\n| BufferWidth | 获取或设置缓冲区宽度 |\n| CapsLock | 获取一个值，该值指示CapsLock键盘切换键是打开的还是关闭的 |\n| NumberLock | 获取一个值，该值指示NumLock键盘切换键是打开的还是关闭的 |\n| KeyAvailable | 获取一个值，该值指示按键操作在输入流是否可用 |\n| CursorTop | 获取或设置光标在缓冲区中的行位置 |\n| CursorLeft | 获取或设置光标在缓冲区中的列位置 |\n| CursorSize | 获取或设置光标在字符单元格中的高度 |\n| CursorVisible | 获取或设置光标是否可见 |\n| In | 获取标准输入流 |\n| Out | 获取标准输出流 |\n| Error | 获取标准错误输出流 |\n| InputEncoding | 获取或设置控制台用于读取输入的编码 |\n| OutEncoding | 获取或设置控制台用于写入输出的编码 |\n| LargestWindowHeight | 根据当前字体和屏幕分辨率获取控制台窗口可能有的最大行数 |\n| LargestWindowWidth | 根据当前字体和屏幕分辨率获取控制台窗口可能有的最大列数 |\n| Title | 获取或设置要显示在控制台标题栏中的标题 |\n| TreatControlCAsInput | 获取或设置一个值，该值指示是将修改键【Control】和控制台键【C】的组合（Ctrl+C）视为普通输入，还是视为由操作系统处理的中断 |\n| WindowHeight | 获取或设置控制台窗口区域的高度 |\n| WindowWidth | 获取或设置控制台窗口区域的宽度 |\n| WindowLeft | 获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置 |\n| WindowTop | 获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置 |\n##### 方法\n| 方法 | 描述 |\n| :------: | :------: |\n| Beep | 通过控制台扬声器播放提示音 |\n| Clear | 清除控制台缓冲区和夏国英的控制台窗口的显示信息 |\n| MoveBufferArea | 将屏幕缓冲区的制定源区域复制到指定的目标区域 |\n| OpenStandarError | 获取标准错误流 |\n| OpenStandarInput | 获取标准输入流 |\n| OpenStandarOutput | 获取标注输出流 |\n| Read | 从标准输入流读取下一个字符 |\n| ReadKey | 获取用户按下的下一个字符或功能键 |\n| ReadLine | 从标准输入流读取下一行字符 |\n| ReadColor | 将控制台的前景色和背景色设置为默认值 |\n| SetBufferSize | 将屏幕缓冲区的高度和宽度设置为指定值 |\n| SetCursorPosition | 设置光标位置 |\n| SetError | 将Error属性设置为指定TextWriter对象 |\n| SetIn | 将In属性设置为指定TextWriter对象 |\n| SetOut | 将Out属性设置为指定TextWriter对象 |\n| SetWindowPosition | 设置控制台窗口相对于屏幕缓冲区的位置 |\n| SetWindowSize | 将控制台窗口的高度和宽度设置为指定值 |\n| Write | 将指定值的文本表示形式写入标准输出流 |\n| WriteLine | 将指定的数据（后跟当前行终止符）表示形式写入标准输出流 |\n\n#### Convert类-类型转换\nConvert类用于将一个基本数据类型转换为另一个基本数据类型\n##### 方法\n| 方法 | 描述 |\n| :------: | :------: |\n| FromBase64CharArray | 将Unicode字符数组的子集转换成等效成等效的8位无符号整数数组，参数指定输入数组的子集及要转换的元素数 |\n| FromBase64String | 将指定的String转换成等效成等效的8位无符号整数数组 |\n| GetHashCode | 用作特定类型的哈希函数 |\n| ToBase64CharArray | 将8位无符号整数数组的子集转换为用Base64数字编码的Unicode字符数组的等价子集 |\n| ToBase64String | 将8位无符号整数数组的值转换为与其等效的String表示形式 |\n| ToBoolean | 将指定的值转换为等效的布尔值 |\n| ToByte | 将指定的值转换为8位无符号整数 |\n| ToChar | 将指定的值转换为Unicode字符 |\n| ToDateTime | 将指定的值转换为DateTime |\n| ToDecimal | 将指定的值转换为Decimal数字 |\n| ToDouble | 将指定的值转换为双精度浮点数 |\n| ToInt16 | 将指定的值转换为16位有符号整数 |\n| ToInt32 | 将指定的值转换为32位有符号整数 |\n| ToInt64 | 将指定的值转换为64位有符号整数 |\n| ToSByte | 将指定的值转换为8位有符号整数 |\n| ToSingle | 将指定的值转换为单精度浮点数 |\n| ToString | 将指定的值转换为与其等效的String表示形式 |\n| ToUInt16 | 将指定的值转换为16位有符号整数 |\n| ToUInt32 | 将指定的值转换为32位有符号整数 |\n| ToUInt64 | 将指定的值转换为64位有符号整数 |\n\n#### Dispose方法-释放资源\nDispose方法用于执行与释放或重置非托管资源相关的应用程序定义的任务\n\n\n","source":"_posts/CSharp-常用关键字和基础类.md","raw":"---\ntitle: 'CSharp-常用关键字和基础类'\ndate: 2019-03-30 23:41:06\ncategories: C#\ntags:\n - C#\n - 基础\n---\n#### abstract关键字-抽象类\nabstract 关键字可以和类，属性，方法，索引器以及事件一起使用。在类声明中使用abstract关键字以指示某个类只能是其他类的基类\n<!--more-->\n##### 特性\n* 抽象类不能实例化\n* 抽象类可以包含抽象方法和抽象访问器\n* 抽象类不能被继承\n* 从抽象类派生的非抽象类必须包括继承的所有抽象方法和抽象访问器的实现\n\n#### base关键字-从派生类中访问基类的成员\nbase关键字用于从派生类中访问基类的成员\n##### 使用范围\n* 调用基类上已被其他方法重写的方法\n* 指定创建派生类实例时应调用的基类基类构造函数\n\n#### Console类-控制台中的输入流，输出流和错误流\nConsole类表示控制台应用程序的标准输入流。输出流和错误流，无法继承此类\n##### 属性\n| 属性 | 描述 |\n| :------: | :------: |\n| ForeGroundColor | 获取或设置控制台的前景色 |\n| BackgroundColor | 获取或设置控制台的背景色 |\n| BufferHeight | 获取或设置缓冲区高度 |\n| BufferWidth | 获取或设置缓冲区宽度 |\n| CapsLock | 获取一个值，该值指示CapsLock键盘切换键是打开的还是关闭的 |\n| NumberLock | 获取一个值，该值指示NumLock键盘切换键是打开的还是关闭的 |\n| KeyAvailable | 获取一个值，该值指示按键操作在输入流是否可用 |\n| CursorTop | 获取或设置光标在缓冲区中的行位置 |\n| CursorLeft | 获取或设置光标在缓冲区中的列位置 |\n| CursorSize | 获取或设置光标在字符单元格中的高度 |\n| CursorVisible | 获取或设置光标是否可见 |\n| In | 获取标准输入流 |\n| Out | 获取标准输出流 |\n| Error | 获取标准错误输出流 |\n| InputEncoding | 获取或设置控制台用于读取输入的编码 |\n| OutEncoding | 获取或设置控制台用于写入输出的编码 |\n| LargestWindowHeight | 根据当前字体和屏幕分辨率获取控制台窗口可能有的最大行数 |\n| LargestWindowWidth | 根据当前字体和屏幕分辨率获取控制台窗口可能有的最大列数 |\n| Title | 获取或设置要显示在控制台标题栏中的标题 |\n| TreatControlCAsInput | 获取或设置一个值，该值指示是将修改键【Control】和控制台键【C】的组合（Ctrl+C）视为普通输入，还是视为由操作系统处理的中断 |\n| WindowHeight | 获取或设置控制台窗口区域的高度 |\n| WindowWidth | 获取或设置控制台窗口区域的宽度 |\n| WindowLeft | 获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置 |\n| WindowTop | 获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置 |\n##### 方法\n| 方法 | 描述 |\n| :------: | :------: |\n| Beep | 通过控制台扬声器播放提示音 |\n| Clear | 清除控制台缓冲区和夏国英的控制台窗口的显示信息 |\n| MoveBufferArea | 将屏幕缓冲区的制定源区域复制到指定的目标区域 |\n| OpenStandarError | 获取标准错误流 |\n| OpenStandarInput | 获取标准输入流 |\n| OpenStandarOutput | 获取标注输出流 |\n| Read | 从标准输入流读取下一个字符 |\n| ReadKey | 获取用户按下的下一个字符或功能键 |\n| ReadLine | 从标准输入流读取下一行字符 |\n| ReadColor | 将控制台的前景色和背景色设置为默认值 |\n| SetBufferSize | 将屏幕缓冲区的高度和宽度设置为指定值 |\n| SetCursorPosition | 设置光标位置 |\n| SetError | 将Error属性设置为指定TextWriter对象 |\n| SetIn | 将In属性设置为指定TextWriter对象 |\n| SetOut | 将Out属性设置为指定TextWriter对象 |\n| SetWindowPosition | 设置控制台窗口相对于屏幕缓冲区的位置 |\n| SetWindowSize | 将控制台窗口的高度和宽度设置为指定值 |\n| Write | 将指定值的文本表示形式写入标准输出流 |\n| WriteLine | 将指定的数据（后跟当前行终止符）表示形式写入标准输出流 |\n\n#### Convert类-类型转换\nConvert类用于将一个基本数据类型转换为另一个基本数据类型\n##### 方法\n| 方法 | 描述 |\n| :------: | :------: |\n| FromBase64CharArray | 将Unicode字符数组的子集转换成等效成等效的8位无符号整数数组，参数指定输入数组的子集及要转换的元素数 |\n| FromBase64String | 将指定的String转换成等效成等效的8位无符号整数数组 |\n| GetHashCode | 用作特定类型的哈希函数 |\n| ToBase64CharArray | 将8位无符号整数数组的子集转换为用Base64数字编码的Unicode字符数组的等价子集 |\n| ToBase64String | 将8位无符号整数数组的值转换为与其等效的String表示形式 |\n| ToBoolean | 将指定的值转换为等效的布尔值 |\n| ToByte | 将指定的值转换为8位无符号整数 |\n| ToChar | 将指定的值转换为Unicode字符 |\n| ToDateTime | 将指定的值转换为DateTime |\n| ToDecimal | 将指定的值转换为Decimal数字 |\n| ToDouble | 将指定的值转换为双精度浮点数 |\n| ToInt16 | 将指定的值转换为16位有符号整数 |\n| ToInt32 | 将指定的值转换为32位有符号整数 |\n| ToInt64 | 将指定的值转换为64位有符号整数 |\n| ToSByte | 将指定的值转换为8位有符号整数 |\n| ToSingle | 将指定的值转换为单精度浮点数 |\n| ToString | 将指定的值转换为与其等效的String表示形式 |\n| ToUInt16 | 将指定的值转换为16位有符号整数 |\n| ToUInt32 | 将指定的值转换为32位有符号整数 |\n| ToUInt64 | 将指定的值转换为64位有符号整数 |\n\n#### Dispose方法-释放资源\nDispose方法用于执行与释放或重置非托管资源相关的应用程序定义的任务\n\n\n","slug":"CSharp-常用关键字和基础类","published":1,"updated":"2019-04-02T14:45:06.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yj000otkuisezrsxoz","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"abstract关键字-抽象类\"><a href=\"#abstract关键字-抽象类\" class=\"headerlink\" title=\"abstract关键字-抽象类\"></a>abstract关键字-抽象类</h4><p>abstract 关键字可以和类，属性，方法，索引器以及事件一起使用。在类声明中使用abstract关键字以指示某个类只能是其他类的基类<br><a id=\"more\"></a></p><h5 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h5><ul><li>抽象类不能实例化</li><li>抽象类可以包含抽象方法和抽象访问器</li><li>抽象类不能被继承</li><li>从抽象类派生的非抽象类必须包括继承的所有抽象方法和抽象访问器的实现</li></ul><h4 id=\"base关键字-从派生类中访问基类的成员\"><a href=\"#base关键字-从派生类中访问基类的成员\" class=\"headerlink\" title=\"base关键字-从派生类中访问基类的成员\"></a>base关键字-从派生类中访问基类的成员</h4><p>base关键字用于从派生类中访问基类的成员</p><h5 id=\"使用范围\"><a href=\"#使用范围\" class=\"headerlink\" title=\"使用范围\"></a>使用范围</h5><ul><li>调用基类上已被其他方法重写的方法</li><li>指定创建派生类实例时应调用的基类基类构造函数</li></ul><h4 id=\"Console类-控制台中的输入流，输出流和错误流\"><a href=\"#Console类-控制台中的输入流，输出流和错误流\" class=\"headerlink\" title=\"Console类-控制台中的输入流，输出流和错误流\"></a>Console类-控制台中的输入流，输出流和错误流</h4><p>Console类表示控制台应用程序的标准输入流。输出流和错误流，无法继承此类</p><h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><table><thead><tr><th style=\"text-align:center\">属性</th><th style=\"text-align:center\">描述</th></tr></thead><tbody><tr><td style=\"text-align:center\">ForeGroundColor</td><td style=\"text-align:center\">获取或设置控制台的前景色</td></tr><tr><td style=\"text-align:center\">BackgroundColor</td><td style=\"text-align:center\">获取或设置控制台的背景色</td></tr><tr><td style=\"text-align:center\">BufferHeight</td><td style=\"text-align:center\">获取或设置缓冲区高度</td></tr><tr><td style=\"text-align:center\">BufferWidth</td><td style=\"text-align:center\">获取或设置缓冲区宽度</td></tr><tr><td style=\"text-align:center\">CapsLock</td><td style=\"text-align:center\">获取一个值，该值指示CapsLock键盘切换键是打开的还是关闭的</td></tr><tr><td style=\"text-align:center\">NumberLock</td><td style=\"text-align:center\">获取一个值，该值指示NumLock键盘切换键是打开的还是关闭的</td></tr><tr><td style=\"text-align:center\">KeyAvailable</td><td style=\"text-align:center\">获取一个值，该值指示按键操作在输入流是否可用</td></tr><tr><td style=\"text-align:center\">CursorTop</td><td style=\"text-align:center\">获取或设置光标在缓冲区中的行位置</td></tr><tr><td style=\"text-align:center\">CursorLeft</td><td style=\"text-align:center\">获取或设置光标在缓冲区中的列位置</td></tr><tr><td style=\"text-align:center\">CursorSize</td><td style=\"text-align:center\">获取或设置光标在字符单元格中的高度</td></tr><tr><td style=\"text-align:center\">CursorVisible</td><td style=\"text-align:center\">获取或设置光标是否可见</td></tr><tr><td style=\"text-align:center\">In</td><td style=\"text-align:center\">获取标准输入流</td></tr><tr><td style=\"text-align:center\">Out</td><td style=\"text-align:center\">获取标准输出流</td></tr><tr><td style=\"text-align:center\">Error</td><td style=\"text-align:center\">获取标准错误输出流</td></tr><tr><td style=\"text-align:center\">InputEncoding</td><td style=\"text-align:center\">获取或设置控制台用于读取输入的编码</td></tr><tr><td style=\"text-align:center\">OutEncoding</td><td style=\"text-align:center\">获取或设置控制台用于写入输出的编码</td></tr><tr><td style=\"text-align:center\">LargestWindowHeight</td><td style=\"text-align:center\">根据当前字体和屏幕分辨率获取控制台窗口可能有的最大行数</td></tr><tr><td style=\"text-align:center\">LargestWindowWidth</td><td style=\"text-align:center\">根据当前字体和屏幕分辨率获取控制台窗口可能有的最大列数</td></tr><tr><td style=\"text-align:center\">Title</td><td style=\"text-align:center\">获取或设置要显示在控制台标题栏中的标题</td></tr><tr><td style=\"text-align:center\">TreatControlCAsInput</td><td style=\"text-align:center\">获取或设置一个值，该值指示是将修改键【Control】和控制台键【C】的组合（Ctrl+C）视为普通输入，还是视为由操作系统处理的中断</td></tr><tr><td style=\"text-align:center\">WindowHeight</td><td style=\"text-align:center\">获取或设置控制台窗口区域的高度</td></tr><tr><td style=\"text-align:center\">WindowWidth</td><td style=\"text-align:center\">获取或设置控制台窗口区域的宽度</td></tr><tr><td style=\"text-align:center\">WindowLeft</td><td style=\"text-align:center\">获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置</td></tr><tr><td style=\"text-align:center\">WindowTop</td><td style=\"text-align:center\">获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置</td></tr></tbody></table><h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><table><thead><tr><th style=\"text-align:center\">方法</th><th style=\"text-align:center\">描述</th></tr></thead><tbody><tr><td style=\"text-align:center\">Beep</td><td style=\"text-align:center\">通过控制台扬声器播放提示音</td></tr><tr><td style=\"text-align:center\">Clear</td><td style=\"text-align:center\">清除控制台缓冲区和夏国英的控制台窗口的显示信息</td></tr><tr><td style=\"text-align:center\">MoveBufferArea</td><td style=\"text-align:center\">将屏幕缓冲区的制定源区域复制到指定的目标区域</td></tr><tr><td style=\"text-align:center\">OpenStandarError</td><td style=\"text-align:center\">获取标准错误流</td></tr><tr><td style=\"text-align:center\">OpenStandarInput</td><td style=\"text-align:center\">获取标准输入流</td></tr><tr><td style=\"text-align:center\">OpenStandarOutput</td><td style=\"text-align:center\">获取标注输出流</td></tr><tr><td style=\"text-align:center\">Read</td><td style=\"text-align:center\">从标准输入流读取下一个字符</td></tr><tr><td style=\"text-align:center\">ReadKey</td><td style=\"text-align:center\">获取用户按下的下一个字符或功能键</td></tr><tr><td style=\"text-align:center\">ReadLine</td><td style=\"text-align:center\">从标准输入流读取下一行字符</td></tr><tr><td style=\"text-align:center\">ReadColor</td><td style=\"text-align:center\">将控制台的前景色和背景色设置为默认值</td></tr><tr><td style=\"text-align:center\">SetBufferSize</td><td style=\"text-align:center\">将屏幕缓冲区的高度和宽度设置为指定值</td></tr><tr><td style=\"text-align:center\">SetCursorPosition</td><td style=\"text-align:center\">设置光标位置</td></tr><tr><td style=\"text-align:center\">SetError</td><td style=\"text-align:center\">将Error属性设置为指定TextWriter对象</td></tr><tr><td style=\"text-align:center\">SetIn</td><td style=\"text-align:center\">将In属性设置为指定TextWriter对象</td></tr><tr><td style=\"text-align:center\">SetOut</td><td style=\"text-align:center\">将Out属性设置为指定TextWriter对象</td></tr><tr><td style=\"text-align:center\">SetWindowPosition</td><td style=\"text-align:center\">设置控制台窗口相对于屏幕缓冲区的位置</td></tr><tr><td style=\"text-align:center\">SetWindowSize</td><td style=\"text-align:center\">将控制台窗口的高度和宽度设置为指定值</td></tr><tr><td style=\"text-align:center\">Write</td><td style=\"text-align:center\">将指定值的文本表示形式写入标准输出流</td></tr><tr><td style=\"text-align:center\">WriteLine</td><td style=\"text-align:center\">将指定的数据（后跟当前行终止符）表示形式写入标准输出流</td></tr></tbody></table><h4 id=\"Convert类-类型转换\"><a href=\"#Convert类-类型转换\" class=\"headerlink\" title=\"Convert类-类型转换\"></a>Convert类-类型转换</h4><p>Convert类用于将一个基本数据类型转换为另一个基本数据类型</p><h5 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h5><table><thead><tr><th style=\"text-align:center\">方法</th><th style=\"text-align:center\">描述</th></tr></thead><tbody><tr><td style=\"text-align:center\">FromBase64CharArray</td><td style=\"text-align:center\">将Unicode字符数组的子集转换成等效成等效的8位无符号整数数组，参数指定输入数组的子集及要转换的元素数</td></tr><tr><td style=\"text-align:center\">FromBase64String</td><td style=\"text-align:center\">将指定的String转换成等效成等效的8位无符号整数数组</td></tr><tr><td style=\"text-align:center\">GetHashCode</td><td style=\"text-align:center\">用作特定类型的哈希函数</td></tr><tr><td style=\"text-align:center\">ToBase64CharArray</td><td style=\"text-align:center\">将8位无符号整数数组的子集转换为用Base64数字编码的Unicode字符数组的等价子集</td></tr><tr><td style=\"text-align:center\">ToBase64String</td><td style=\"text-align:center\">将8位无符号整数数组的值转换为与其等效的String表示形式</td></tr><tr><td style=\"text-align:center\">ToBoolean</td><td style=\"text-align:center\">将指定的值转换为等效的布尔值</td></tr><tr><td style=\"text-align:center\">ToByte</td><td style=\"text-align:center\">将指定的值转换为8位无符号整数</td></tr><tr><td style=\"text-align:center\">ToChar</td><td style=\"text-align:center\">将指定的值转换为Unicode字符</td></tr><tr><td style=\"text-align:center\">ToDateTime</td><td style=\"text-align:center\">将指定的值转换为DateTime</td></tr><tr><td style=\"text-align:center\">ToDecimal</td><td style=\"text-align:center\">将指定的值转换为Decimal数字</td></tr><tr><td style=\"text-align:center\">ToDouble</td><td style=\"text-align:center\">将指定的值转换为双精度浮点数</td></tr><tr><td style=\"text-align:center\">ToInt16</td><td style=\"text-align:center\">将指定的值转换为16位有符号整数</td></tr><tr><td style=\"text-align:center\">ToInt32</td><td style=\"text-align:center\">将指定的值转换为32位有符号整数</td></tr><tr><td style=\"text-align:center\">ToInt64</td><td style=\"text-align:center\">将指定的值转换为64位有符号整数</td></tr><tr><td style=\"text-align:center\">ToSByte</td><td style=\"text-align:center\">将指定的值转换为8位有符号整数</td></tr><tr><td style=\"text-align:center\">ToSingle</td><td style=\"text-align:center\">将指定的值转换为单精度浮点数</td></tr><tr><td style=\"text-align:center\">ToString</td><td style=\"text-align:center\">将指定的值转换为与其等效的String表示形式</td></tr><tr><td style=\"text-align:center\">ToUInt16</td><td style=\"text-align:center\">将指定的值转换为16位有符号整数</td></tr><tr><td style=\"text-align:center\">ToUInt32</td><td style=\"text-align:center\">将指定的值转换为32位有符号整数</td></tr><tr><td style=\"text-align:center\">ToUInt64</td><td style=\"text-align:center\">将指定的值转换为64位有符号整数</td></tr></tbody></table><h4 id=\"Dispose方法-释放资源\"><a href=\"#Dispose方法-释放资源\" class=\"headerlink\" title=\"Dispose方法-释放资源\"></a>Dispose方法-释放资源</h4><p>Dispose方法用于执行与释放或重置非托管资源相关的应用程序定义的任务</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"abstract关键字-抽象类\"><a href=\"#abstract关键字-抽象类\" class=\"headerlink\" title=\"abstract关键字-抽象类\"></a>abstract关键字-抽象类</h4><p>abstract 关键字可以和类，属性，方法，索引器以及事件一起使用。在类声明中使用abstract关键字以指示某个类只能是其他类的基类<br>","more":"</p><h5 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h5><ul><li>抽象类不能实例化</li><li>抽象类可以包含抽象方法和抽象访问器</li><li>抽象类不能被继承</li><li>从抽象类派生的非抽象类必须包括继承的所有抽象方法和抽象访问器的实现</li></ul><h4 id=\"base关键字-从派生类中访问基类的成员\"><a href=\"#base关键字-从派生类中访问基类的成员\" class=\"headerlink\" title=\"base关键字-从派生类中访问基类的成员\"></a>base关键字-从派生类中访问基类的成员</h4><p>base关键字用于从派生类中访问基类的成员</p><h5 id=\"使用范围\"><a href=\"#使用范围\" class=\"headerlink\" title=\"使用范围\"></a>使用范围</h5><ul><li>调用基类上已被其他方法重写的方法</li><li>指定创建派生类实例时应调用的基类基类构造函数</li></ul><h4 id=\"Console类-控制台中的输入流，输出流和错误流\"><a href=\"#Console类-控制台中的输入流，输出流和错误流\" class=\"headerlink\" title=\"Console类-控制台中的输入流，输出流和错误流\"></a>Console类-控制台中的输入流，输出流和错误流</h4><p>Console类表示控制台应用程序的标准输入流。输出流和错误流，无法继承此类</p><h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><table><thead><tr><th style=\"text-align:center\">属性</th><th style=\"text-align:center\">描述</th></tr></thead><tbody><tr><td style=\"text-align:center\">ForeGroundColor</td><td style=\"text-align:center\">获取或设置控制台的前景色</td></tr><tr><td style=\"text-align:center\">BackgroundColor</td><td style=\"text-align:center\">获取或设置控制台的背景色</td></tr><tr><td style=\"text-align:center\">BufferHeight</td><td style=\"text-align:center\">获取或设置缓冲区高度</td></tr><tr><td style=\"text-align:center\">BufferWidth</td><td style=\"text-align:center\">获取或设置缓冲区宽度</td></tr><tr><td style=\"text-align:center\">CapsLock</td><td style=\"text-align:center\">获取一个值，该值指示CapsLock键盘切换键是打开的还是关闭的</td></tr><tr><td style=\"text-align:center\">NumberLock</td><td style=\"text-align:center\">获取一个值，该值指示NumLock键盘切换键是打开的还是关闭的</td></tr><tr><td style=\"text-align:center\">KeyAvailable</td><td style=\"text-align:center\">获取一个值，该值指示按键操作在输入流是否可用</td></tr><tr><td style=\"text-align:center\">CursorTop</td><td style=\"text-align:center\">获取或设置光标在缓冲区中的行位置</td></tr><tr><td style=\"text-align:center\">CursorLeft</td><td style=\"text-align:center\">获取或设置光标在缓冲区中的列位置</td></tr><tr><td style=\"text-align:center\">CursorSize</td><td style=\"text-align:center\">获取或设置光标在字符单元格中的高度</td></tr><tr><td style=\"text-align:center\">CursorVisible</td><td style=\"text-align:center\">获取或设置光标是否可见</td></tr><tr><td style=\"text-align:center\">In</td><td style=\"text-align:center\">获取标准输入流</td></tr><tr><td style=\"text-align:center\">Out</td><td style=\"text-align:center\">获取标准输出流</td></tr><tr><td style=\"text-align:center\">Error</td><td style=\"text-align:center\">获取标准错误输出流</td></tr><tr><td style=\"text-align:center\">InputEncoding</td><td style=\"text-align:center\">获取或设置控制台用于读取输入的编码</td></tr><tr><td style=\"text-align:center\">OutEncoding</td><td style=\"text-align:center\">获取或设置控制台用于写入输出的编码</td></tr><tr><td style=\"text-align:center\">LargestWindowHeight</td><td style=\"text-align:center\">根据当前字体和屏幕分辨率获取控制台窗口可能有的最大行数</td></tr><tr><td style=\"text-align:center\">LargestWindowWidth</td><td style=\"text-align:center\">根据当前字体和屏幕分辨率获取控制台窗口可能有的最大列数</td></tr><tr><td style=\"text-align:center\">Title</td><td style=\"text-align:center\">获取或设置要显示在控制台标题栏中的标题</td></tr><tr><td style=\"text-align:center\">TreatControlCAsInput</td><td style=\"text-align:center\">获取或设置一个值，该值指示是将修改键【Control】和控制台键【C】的组合（Ctrl+C）视为普通输入，还是视为由操作系统处理的中断</td></tr><tr><td style=\"text-align:center\">WindowHeight</td><td style=\"text-align:center\">获取或设置控制台窗口区域的高度</td></tr><tr><td style=\"text-align:center\">WindowWidth</td><td style=\"text-align:center\">获取或设置控制台窗口区域的宽度</td></tr><tr><td style=\"text-align:center\">WindowLeft</td><td style=\"text-align:center\">获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置</td></tr><tr><td style=\"text-align:center\">WindowTop</td><td style=\"text-align:center\">获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置</td></tr></tbody></table><h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><table><thead><tr><th style=\"text-align:center\">方法</th><th style=\"text-align:center\">描述</th></tr></thead><tbody><tr><td style=\"text-align:center\">Beep</td><td style=\"text-align:center\">通过控制台扬声器播放提示音</td></tr><tr><td style=\"text-align:center\">Clear</td><td style=\"text-align:center\">清除控制台缓冲区和夏国英的控制台窗口的显示信息</td></tr><tr><td style=\"text-align:center\">MoveBufferArea</td><td style=\"text-align:center\">将屏幕缓冲区的制定源区域复制到指定的目标区域</td></tr><tr><td style=\"text-align:center\">OpenStandarError</td><td style=\"text-align:center\">获取标准错误流</td></tr><tr><td style=\"text-align:center\">OpenStandarInput</td><td style=\"text-align:center\">获取标准输入流</td></tr><tr><td style=\"text-align:center\">OpenStandarOutput</td><td style=\"text-align:center\">获取标注输出流</td></tr><tr><td style=\"text-align:center\">Read</td><td style=\"text-align:center\">从标准输入流读取下一个字符</td></tr><tr><td style=\"text-align:center\">ReadKey</td><td style=\"text-align:center\">获取用户按下的下一个字符或功能键</td></tr><tr><td style=\"text-align:center\">ReadLine</td><td style=\"text-align:center\">从标准输入流读取下一行字符</td></tr><tr><td style=\"text-align:center\">ReadColor</td><td style=\"text-align:center\">将控制台的前景色和背景色设置为默认值</td></tr><tr><td style=\"text-align:center\">SetBufferSize</td><td style=\"text-align:center\">将屏幕缓冲区的高度和宽度设置为指定值</td></tr><tr><td style=\"text-align:center\">SetCursorPosition</td><td style=\"text-align:center\">设置光标位置</td></tr><tr><td style=\"text-align:center\">SetError</td><td style=\"text-align:center\">将Error属性设置为指定TextWriter对象</td></tr><tr><td style=\"text-align:center\">SetIn</td><td style=\"text-align:center\">将In属性设置为指定TextWriter对象</td></tr><tr><td style=\"text-align:center\">SetOut</td><td style=\"text-align:center\">将Out属性设置为指定TextWriter对象</td></tr><tr><td style=\"text-align:center\">SetWindowPosition</td><td style=\"text-align:center\">设置控制台窗口相对于屏幕缓冲区的位置</td></tr><tr><td style=\"text-align:center\">SetWindowSize</td><td style=\"text-align:center\">将控制台窗口的高度和宽度设置为指定值</td></tr><tr><td style=\"text-align:center\">Write</td><td style=\"text-align:center\">将指定值的文本表示形式写入标准输出流</td></tr><tr><td style=\"text-align:center\">WriteLine</td><td style=\"text-align:center\">将指定的数据（后跟当前行终止符）表示形式写入标准输出流</td></tr></tbody></table><h4 id=\"Convert类-类型转换\"><a href=\"#Convert类-类型转换\" class=\"headerlink\" title=\"Convert类-类型转换\"></a>Convert类-类型转换</h4><p>Convert类用于将一个基本数据类型转换为另一个基本数据类型</p><h5 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h5><table><thead><tr><th style=\"text-align:center\">方法</th><th style=\"text-align:center\">描述</th></tr></thead><tbody><tr><td style=\"text-align:center\">FromBase64CharArray</td><td style=\"text-align:center\">将Unicode字符数组的子集转换成等效成等效的8位无符号整数数组，参数指定输入数组的子集及要转换的元素数</td></tr><tr><td style=\"text-align:center\">FromBase64String</td><td style=\"text-align:center\">将指定的String转换成等效成等效的8位无符号整数数组</td></tr><tr><td style=\"text-align:center\">GetHashCode</td><td style=\"text-align:center\">用作特定类型的哈希函数</td></tr><tr><td style=\"text-align:center\">ToBase64CharArray</td><td style=\"text-align:center\">将8位无符号整数数组的子集转换为用Base64数字编码的Unicode字符数组的等价子集</td></tr><tr><td style=\"text-align:center\">ToBase64String</td><td style=\"text-align:center\">将8位无符号整数数组的值转换为与其等效的String表示形式</td></tr><tr><td style=\"text-align:center\">ToBoolean</td><td style=\"text-align:center\">将指定的值转换为等效的布尔值</td></tr><tr><td style=\"text-align:center\">ToByte</td><td style=\"text-align:center\">将指定的值转换为8位无符号整数</td></tr><tr><td style=\"text-align:center\">ToChar</td><td style=\"text-align:center\">将指定的值转换为Unicode字符</td></tr><tr><td style=\"text-align:center\">ToDateTime</td><td style=\"text-align:center\">将指定的值转换为DateTime</td></tr><tr><td style=\"text-align:center\">ToDecimal</td><td style=\"text-align:center\">将指定的值转换为Decimal数字</td></tr><tr><td style=\"text-align:center\">ToDouble</td><td style=\"text-align:center\">将指定的值转换为双精度浮点数</td></tr><tr><td style=\"text-align:center\">ToInt16</td><td style=\"text-align:center\">将指定的值转换为16位有符号整数</td></tr><tr><td style=\"text-align:center\">ToInt32</td><td style=\"text-align:center\">将指定的值转换为32位有符号整数</td></tr><tr><td style=\"text-align:center\">ToInt64</td><td style=\"text-align:center\">将指定的值转换为64位有符号整数</td></tr><tr><td style=\"text-align:center\">ToSByte</td><td style=\"text-align:center\">将指定的值转换为8位有符号整数</td></tr><tr><td style=\"text-align:center\">ToSingle</td><td style=\"text-align:center\">将指定的值转换为单精度浮点数</td></tr><tr><td style=\"text-align:center\">ToString</td><td style=\"text-align:center\">将指定的值转换为与其等效的String表示形式</td></tr><tr><td style=\"text-align:center\">ToUInt16</td><td style=\"text-align:center\">将指定的值转换为16位有符号整数</td></tr><tr><td style=\"text-align:center\">ToUInt32</td><td style=\"text-align:center\">将指定的值转换为32位有符号整数</td></tr><tr><td style=\"text-align:center\">ToUInt64</td><td style=\"text-align:center\">将指定的值转换为64位有符号整数</td></tr></tbody></table><h4 id=\"Dispose方法-释放资源\"><a href=\"#Dispose方法-释放资源\" class=\"headerlink\" title=\"Dispose方法-释放资源\"></a>Dispose方法-释放资源</h4><p>Dispose方法用于执行与释放或重置非托管资源相关的应用程序定义的任务</p><!-- rebuild by neat -->"},{"title":"CSharp-复制对象的方式","date":"2018-06-09T14:38:24.000Z","_content":"在代码中经常会遇到需要把对象复制一遍，或者把属性名相同的值复制一遍。\n<!--more-->\n##### 解决方法\n以People为例\n```cs\npublic class People\n{\n    public string IdCard { get; set; }\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n```\n1. 手动赋值\n```cs\nPeople p = new People() {IdCrad = \"445221XXXXXXXX\", Name=\"caty\", Age=21 };\nPeople h = new People() {IdCrad = p.IdCard, Name = p.Name, Age = p.Age };\n```\n2. 反射\n```cs\nprivate static TOut TransReflection<TIn, TOut>(TIn tIn)\n{\n    TOut tOut = Activator.CreateInstance<TOut>();\n    var tInType = tIn.GetType();\n    foreach (var itemOut in tOut.GetType().GetProperties())\n    {\n        var itemIn = tInType.GetProperty(itemOut.Name); ;\n        if (itemIn != null)\n        {\n            itemOut.SetValue(tOut, itemIn.GetValue(tIn));\n        }\n    }\n    return tOut;\n}\n\nPeople pp = TransReflection<People, People>(p);\n```\n3. 序列化\n需引入Newtonsoft.Json 包\n```cs\nPeople ss= JsonConvert.DeserializeObject<People>(JsonConvert.SerializeObject(s));\n```\n4. 表达式树\n```cs\npublic static class TransExpression<TIn, TOut>\n{\n    private static readonly Func<TIn, TOut> cache = GetFunc();\n    private static Func<TIn, TOut> GetFunc()\n    {\n        ParameterExpression parameterExpression = Expression.Parameter(typeof(TIn), \"p\");\n        List<MemberBinding> memberBindingList = new List<MemberBinding>();\n        foreach (var item in typeof(TOut).GetProperties())\n        {\n　　　　　　　if (!item.CanWrite)\n　　　　　　　　    continue;\n            MemberExpression property = Expression.Property(parameterExpression, typeof(TIn).GetProperty(item.Name));\n            MemberBinding memberBinding = Expression.Bind(item, property);\n            memberBindingList.Add(memberBinding);\n        }\n\n        MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(typeof(TOut)), memberBindingList.ToArray());\n        Expression<Func<TIn, TOut>> lambda = Expression.Lambda<Func<TIn, TOut>>(memberInitExpression, new ParameterExpression[] { parameterExpression });\n        return lambda.Compile();\n    }\n\n    public static TOut Trans(TIn tIn)\n    {\n        return cache(tIn);\n    }\n}\n\nPeople pp = TransExpression<People,People>,Trans(p);\n```\n","source":"_posts/CSharp-通过表达式树复制对象.md","raw":"---\ntitle: CSharp-复制对象的方式\ndate: 2018-06-09 22:38:24\ncategories: C# \ntags: \n - 复制对象\n - C#\n---\n在代码中经常会遇到需要把对象复制一遍，或者把属性名相同的值复制一遍。\n<!--more-->\n##### 解决方法\n以People为例\n```cs\npublic class People\n{\n    public string IdCard { get; set; }\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n```\n1. 手动赋值\n```cs\nPeople p = new People() {IdCrad = \"445221XXXXXXXX\", Name=\"caty\", Age=21 };\nPeople h = new People() {IdCrad = p.IdCard, Name = p.Name, Age = p.Age };\n```\n2. 反射\n```cs\nprivate static TOut TransReflection<TIn, TOut>(TIn tIn)\n{\n    TOut tOut = Activator.CreateInstance<TOut>();\n    var tInType = tIn.GetType();\n    foreach (var itemOut in tOut.GetType().GetProperties())\n    {\n        var itemIn = tInType.GetProperty(itemOut.Name); ;\n        if (itemIn != null)\n        {\n            itemOut.SetValue(tOut, itemIn.GetValue(tIn));\n        }\n    }\n    return tOut;\n}\n\nPeople pp = TransReflection<People, People>(p);\n```\n3. 序列化\n需引入Newtonsoft.Json 包\n```cs\nPeople ss= JsonConvert.DeserializeObject<People>(JsonConvert.SerializeObject(s));\n```\n4. 表达式树\n```cs\npublic static class TransExpression<TIn, TOut>\n{\n    private static readonly Func<TIn, TOut> cache = GetFunc();\n    private static Func<TIn, TOut> GetFunc()\n    {\n        ParameterExpression parameterExpression = Expression.Parameter(typeof(TIn), \"p\");\n        List<MemberBinding> memberBindingList = new List<MemberBinding>();\n        foreach (var item in typeof(TOut).GetProperties())\n        {\n　　　　　　　if (!item.CanWrite)\n　　　　　　　　    continue;\n            MemberExpression property = Expression.Property(parameterExpression, typeof(TIn).GetProperty(item.Name));\n            MemberBinding memberBinding = Expression.Bind(item, property);\n            memberBindingList.Add(memberBinding);\n        }\n\n        MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(typeof(TOut)), memberBindingList.ToArray());\n        Expression<Func<TIn, TOut>> lambda = Expression.Lambda<Func<TIn, TOut>>(memberInitExpression, new ParameterExpression[] { parameterExpression });\n        return lambda.Compile();\n    }\n\n    public static TOut Trans(TIn tIn)\n    {\n        return cache(tIn);\n    }\n}\n\nPeople pp = TransExpression<People,People>,Trans(p);\n```\n","slug":"CSharp-通过表达式树复制对象","published":1,"updated":"2019-04-02T14:45:20.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yj000ptkuimakoysv8","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>在代码中经常会遇到需要把对象复制一遍，或者把属性名相同的值复制一遍。<br><a id=\"more\"></a></p><h5 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h5><p>以People为例<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">People</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> IdCard &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Age &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><ol><li><p>手动赋值</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">People p = <span class=\"keyword\">new</span> People() &#123;IdCrad = <span class=\"string\">\"445221XXXXXXXX\"</span>, Name=<span class=\"string\">\"caty\"</span>, Age=<span class=\"number\">21</span> &#125;;</span><br><span class=\"line\">People h = <span class=\"keyword\">new</span> People() &#123;IdCrad = p.IdCard, Name = p.Name, Age = p.Age &#125;;</span><br></pre></td></tr></table></figure></li><li><p>反射</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TOut TransReflection&lt;TIn, TOut&gt;(TIn tIn)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    TOut tOut = Activator.CreateInstance&lt;TOut&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tInType = tIn.GetType();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> itemOut <span class=\"keyword\">in</span> tOut.GetType().GetProperties())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemIn = tInType.GetProperty(itemOut.Name); ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (itemIn != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            itemOut.SetValue(tOut, itemIn.GetValue(tIn));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tOut;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">People pp = TransReflection&lt;People, People&gt;(p);</span><br></pre></td></tr></table></figure></li><li><p>序列化<br>需引入Newtonsoft.Json 包</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">People ss= JsonConvert.DeserializeObject&lt;People&gt;(JsonConvert.SerializeObject(s));</span><br></pre></td></tr></table></figure></li><li><p>表达式树</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class TransExpression&lt;TIn, TOut&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Func&lt;TIn, TOut&gt; cache = GetFunc();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Func&lt;TIn, TOut&gt; <span class=\"title\">GetFunc</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ParameterExpression parameterExpression = Expression.Parameter(<span class=\"keyword\">typeof</span>(TIn), <span class=\"string\">\"p\"</span>);</span><br><span class=\"line\">        List&lt;MemberBinding&gt; memberBindingList = <span class=\"keyword\">new</span> List&lt;MemberBinding&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> <span class=\"title\">typeof</span>(<span class=\"params\">TOut</span>).<span class=\"title\">GetProperties</span>(<span class=\"params\"></span>))</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">　　　　　　　<span class=\"keyword\">if</span> (!item.CanWrite)</span><br><span class=\"line\">　　　　　　　　    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            MemberExpression property = Expression.Property(parameterExpression, <span class=\"keyword\">typeof</span>(TIn).GetProperty(item.Name));</span><br><span class=\"line\">            MemberBinding memberBinding = Expression.Bind(item, property);</span><br><span class=\"line\">            memberBindingList.Add(memberBinding);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(<span class=\"keyword\">typeof</span>(TOut)), memberBindingList.ToArray());</span><br><span class=\"line\">        Expression&lt;Func&lt;TIn, TOut&gt;&gt; lambda = Expression.Lambda&lt;Func&lt;TIn, TOut&gt;&gt;(memberInitExpression, <span class=\"keyword\">new</span> ParameterExpression[] &#123; parameterExpression &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lambda.Compile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TOut <span class=\"title\">Trans</span>(<span class=\"params\">TIn tIn</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache(tIn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">People pp = TransExpression&lt;People,People&gt;,Trans(p);</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>在代码中经常会遇到需要把对象复制一遍，或者把属性名相同的值复制一遍。<br>","more":"</p><h5 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h5><p>以People为例<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">People</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> IdCard &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Age &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><ol><li><p>手动赋值</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">People p = <span class=\"keyword\">new</span> People() &#123;IdCrad = <span class=\"string\">\"445221XXXXXXXX\"</span>, Name=<span class=\"string\">\"caty\"</span>, Age=<span class=\"number\">21</span> &#125;;</span><br><span class=\"line\">People h = <span class=\"keyword\">new</span> People() &#123;IdCrad = p.IdCard, Name = p.Name, Age = p.Age &#125;;</span><br></pre></td></tr></table></figure></li><li><p>反射</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TOut TransReflection&lt;TIn, TOut&gt;(TIn tIn)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    TOut tOut = Activator.CreateInstance&lt;TOut&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tInType = tIn.GetType();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> itemOut <span class=\"keyword\">in</span> tOut.GetType().GetProperties())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemIn = tInType.GetProperty(itemOut.Name); ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (itemIn != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            itemOut.SetValue(tOut, itemIn.GetValue(tIn));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tOut;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">People pp = TransReflection&lt;People, People&gt;(p);</span><br></pre></td></tr></table></figure></li><li><p>序列化<br>需引入Newtonsoft.Json 包</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">People ss= JsonConvert.DeserializeObject&lt;People&gt;(JsonConvert.SerializeObject(s));</span><br></pre></td></tr></table></figure></li><li><p>表达式树</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class TransExpression&lt;TIn, TOut&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Func&lt;TIn, TOut&gt; cache = GetFunc();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Func&lt;TIn, TOut&gt; <span class=\"title\">GetFunc</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ParameterExpression parameterExpression = Expression.Parameter(<span class=\"keyword\">typeof</span>(TIn), <span class=\"string\">\"p\"</span>);</span><br><span class=\"line\">        List&lt;MemberBinding&gt; memberBindingList = <span class=\"keyword\">new</span> List&lt;MemberBinding&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> <span class=\"title\">typeof</span>(<span class=\"params\">TOut</span>).<span class=\"title\">GetProperties</span>(<span class=\"params\"></span>))</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">　　　　　　　<span class=\"keyword\">if</span> (!item.CanWrite)</span><br><span class=\"line\">　　　　　　　　    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            MemberExpression property = Expression.Property(parameterExpression, <span class=\"keyword\">typeof</span>(TIn).GetProperty(item.Name));</span><br><span class=\"line\">            MemberBinding memberBinding = Expression.Bind(item, property);</span><br><span class=\"line\">            memberBindingList.Add(memberBinding);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(<span class=\"keyword\">typeof</span>(TOut)), memberBindingList.ToArray());</span><br><span class=\"line\">        Expression&lt;Func&lt;TIn, TOut&gt;&gt; lambda = Expression.Lambda&lt;Func&lt;TIn, TOut&gt;&gt;(memberInitExpression, <span class=\"keyword\">new</span> ParameterExpression[] &#123; parameterExpression &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lambda.Compile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TOut <span class=\"title\">Trans</span>(<span class=\"params\">TIn tIn</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache(tIn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">People pp = TransExpression&lt;People,People&gt;,Trans(p);</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->"},{"title":"EF Core实现DB First和Code First","date":"2018-06-10T13:38:41.000Z","_content":"##### 安装 Entity Framework Core\n```cs\n// MsSql\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer\n// 柚子的MySql\nInstall-Package Pomelo.EntityFrameworkCore.MySql\n// 官方的MySql\nInstall-Package MySql.Data.EntityFrameworkCore\n// 程序包管理器控制台\nInstall-Package Microsoft.EntityFrameworkCore.Tools\n// 安装设计包\nInstall-Package Microsoft.EntityFrameworkCore.Design\n// 数据库提供程序设计包(EF Core 2.0不再需要)\n// MsSql\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer.Design\n// MySql\nInstall-Package Pomelo.EntityFrameworkCore.MySql.Design\n```\n<!--more-->\n##### DB First -- 从现有数据库创建模型\n```cs\n// MsSql\nScaffold-DbContext -Connection \"Server=localhost;User Id=root;Password=123456;Database=vanfj\" -Provider \"Microsoft.EntityFrameworkCore.SqlServer\" -OutputDir \"Models\"\n// MySql\nScaffold-DbContext -Connection \"Server=localhost;User Id=root;Password=123456;Database=vanfj\" -Provider \"Pomelo.EntityFrameworkCore.MySql\" -OutputDir \"Models\"\n// 将Connection中的连接字符串替换为自己的数据库连接，将OutputDir中的Models替换为自己要生成的文件目录名\n```\n##### CodeFirst -- 从模型生成到数据库\n###### 创建上下文\nIRSContext.cs\n```cs\npublic class IRSContext:DbContext\n{\n    public IRSContext(DbContextOptions options) : base(options) { }\n\n    public DbSet<Role> Roles { get; set; }\n    public DbSet<User> Users { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<User>().ToTable(\"User\");\n        modelBuilder.Entity<Role>().ToTable(\"Role\");\n    }\n}\n```\nUser.cs\n```cs\npublic class User\n{\n    public int UserId { get; set; }\n    public string UserCode { get; set; }\n    public string UserPwd { get; set; }\n    public string UserName { get; set; }\n}\n```\nRole.cs\n```cs\npublic class Role\n{\n    public int RoleId { get; set; }\n    public string RoleName { get; set; }\n    public string RoleDecs { get; set; }\n}\n```\n####### 注入上下文\nStartup.cs\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    //AddDbContext注入方式 \n    var connection = Configuration.GetConnectionString(\"SqlServer\");\n    services.AddDbContext<IRSContext>(options => options.UseSqlServer(connection, b => b.UseRowNumberForPaging()));\n    services.AddScoped<DbContext, IRSContext>();\n    services.AddMvc();\n\n    //AddDbContextPool注入方式\n    services.AddDbContextPool<IRSContext>(options => options.UseSqlServer(Configuration.GetConnectionString(\"SqlServer\")));\n    services.AddMvc().AddJsonOptions(options => options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore);\n}\n```\n###### appsettings.json连接字符串\n```cs\n{\n    \"ConnectionStrings\": \n    {\n        \"SqlServer\": \"Data Source=.;Initial Catalog=IRSDb;User Id=sa;Password=123;\"\n    },\n}\n```\n##### 执行NuGet命令,创建数据库\n```cs\n// 第一次执行初始化\nAdd-Migration InitialCreate\n// 添加一个迁移数据库 迁移的名称 目录（及其子命名空间）路径是相对于项目目录。 默认值为\"Migrations\"。\nAdd-Migration -Name <String> -OutputDir <String>\n// 删除上次的迁移数据库 不检查以查看迁移是否已应用到数据库。\nRemove-Migration -Force\n// 目标迁移。 如果为\"0\"，将恢复所有迁移。 默认到最后一个迁移。\nUpdate-Database \nUpdate-Database LastGoodMigration //还原迁移\n// 删除数据库 显示的数据库会被丢弃，但没有删除它\nDrop-Database -WhatIf\n// 获取有关 DbContext 类型的信息\nGet-DbContext \n// 从数据库更新DbContext和实体的类型\nScaffold-DbContext \n-Connection <String>\t// 数据库的连接字符串。\n-Provider <String>\t// 要使用的提供程序。 （例如 Microsoft.EntityFrameworkCore.SqlServer)\n-OutputDir <String >\t// 要将文件放入的目录。 路径是相对于项目目录。\n--Context <String >\t// 若要生成的 dbcontext 名称。\n-Schemas <String[]>\t// 要生成实体类型的表架构。\n-Tables <String[]>\t// 要生成实体类型的表。\n-DataAnnotations\t// 使用属性来配置该模型 （如果可能）。 如果省略，则使用仅 fluent API。\n-UseDatabaseNames\t// 使用直接从数据库表和列名称。\n-Force // 覆盖现有文件。\n\n// 从迁移中生成的 SQL 脚本\nScript-Migration\n-From <String>\t// 开始迁移。 默认值为 0 （初始数据库）\n-To <String>\t// 结束的迁移。 默认到最后一个迁移\n-Idempotent\t// 生成可以在任何迁移的数据库使用的脚本\n-Output <String>\t// 要将结果写入的文件\n```\n","source":"_posts/EF-Core实现DB-First和Code-First.md","raw":"---\ntitle: EF Core实现DB First和Code First\ndate: 2018-06-10 21:38:41\ncategories: .Net Core\ntags: \n - .Net Core\n - EF Core\n---\n##### 安装 Entity Framework Core\n```cs\n// MsSql\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer\n// 柚子的MySql\nInstall-Package Pomelo.EntityFrameworkCore.MySql\n// 官方的MySql\nInstall-Package MySql.Data.EntityFrameworkCore\n// 程序包管理器控制台\nInstall-Package Microsoft.EntityFrameworkCore.Tools\n// 安装设计包\nInstall-Package Microsoft.EntityFrameworkCore.Design\n// 数据库提供程序设计包(EF Core 2.0不再需要)\n// MsSql\nInstall-Package Microsoft.EntityFrameworkCore.SqlServer.Design\n// MySql\nInstall-Package Pomelo.EntityFrameworkCore.MySql.Design\n```\n<!--more-->\n##### DB First -- 从现有数据库创建模型\n```cs\n// MsSql\nScaffold-DbContext -Connection \"Server=localhost;User Id=root;Password=123456;Database=vanfj\" -Provider \"Microsoft.EntityFrameworkCore.SqlServer\" -OutputDir \"Models\"\n// MySql\nScaffold-DbContext -Connection \"Server=localhost;User Id=root;Password=123456;Database=vanfj\" -Provider \"Pomelo.EntityFrameworkCore.MySql\" -OutputDir \"Models\"\n// 将Connection中的连接字符串替换为自己的数据库连接，将OutputDir中的Models替换为自己要生成的文件目录名\n```\n##### CodeFirst -- 从模型生成到数据库\n###### 创建上下文\nIRSContext.cs\n```cs\npublic class IRSContext:DbContext\n{\n    public IRSContext(DbContextOptions options) : base(options) { }\n\n    public DbSet<Role> Roles { get; set; }\n    public DbSet<User> Users { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<User>().ToTable(\"User\");\n        modelBuilder.Entity<Role>().ToTable(\"Role\");\n    }\n}\n```\nUser.cs\n```cs\npublic class User\n{\n    public int UserId { get; set; }\n    public string UserCode { get; set; }\n    public string UserPwd { get; set; }\n    public string UserName { get; set; }\n}\n```\nRole.cs\n```cs\npublic class Role\n{\n    public int RoleId { get; set; }\n    public string RoleName { get; set; }\n    public string RoleDecs { get; set; }\n}\n```\n####### 注入上下文\nStartup.cs\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    //AddDbContext注入方式 \n    var connection = Configuration.GetConnectionString(\"SqlServer\");\n    services.AddDbContext<IRSContext>(options => options.UseSqlServer(connection, b => b.UseRowNumberForPaging()));\n    services.AddScoped<DbContext, IRSContext>();\n    services.AddMvc();\n\n    //AddDbContextPool注入方式\n    services.AddDbContextPool<IRSContext>(options => options.UseSqlServer(Configuration.GetConnectionString(\"SqlServer\")));\n    services.AddMvc().AddJsonOptions(options => options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore);\n}\n```\n###### appsettings.json连接字符串\n```cs\n{\n    \"ConnectionStrings\": \n    {\n        \"SqlServer\": \"Data Source=.;Initial Catalog=IRSDb;User Id=sa;Password=123;\"\n    },\n}\n```\n##### 执行NuGet命令,创建数据库\n```cs\n// 第一次执行初始化\nAdd-Migration InitialCreate\n// 添加一个迁移数据库 迁移的名称 目录（及其子命名空间）路径是相对于项目目录。 默认值为\"Migrations\"。\nAdd-Migration -Name <String> -OutputDir <String>\n// 删除上次的迁移数据库 不检查以查看迁移是否已应用到数据库。\nRemove-Migration -Force\n// 目标迁移。 如果为\"0\"，将恢复所有迁移。 默认到最后一个迁移。\nUpdate-Database \nUpdate-Database LastGoodMigration //还原迁移\n// 删除数据库 显示的数据库会被丢弃，但没有删除它\nDrop-Database -WhatIf\n// 获取有关 DbContext 类型的信息\nGet-DbContext \n// 从数据库更新DbContext和实体的类型\nScaffold-DbContext \n-Connection <String>\t// 数据库的连接字符串。\n-Provider <String>\t// 要使用的提供程序。 （例如 Microsoft.EntityFrameworkCore.SqlServer)\n-OutputDir <String >\t// 要将文件放入的目录。 路径是相对于项目目录。\n--Context <String >\t// 若要生成的 dbcontext 名称。\n-Schemas <String[]>\t// 要生成实体类型的表架构。\n-Tables <String[]>\t// 要生成实体类型的表。\n-DataAnnotations\t// 使用属性来配置该模型 （如果可能）。 如果省略，则使用仅 fluent API。\n-UseDatabaseNames\t// 使用直接从数据库表和列名称。\n-Force // 覆盖现有文件。\n\n// 从迁移中生成的 SQL 脚本\nScript-Migration\n-From <String>\t// 开始迁移。 默认值为 0 （初始数据库）\n-To <String>\t// 结束的迁移。 默认到最后一个迁移\n-Idempotent\t// 生成可以在任何迁移的数据库使用的脚本\n-Output <String>\t// 要将结果写入的文件\n```\n","slug":"EF-Core实现DB-First和Code-First","published":1,"updated":"2018-06-10T14:11:55.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yk000qtkuih808vlfv","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"安装-Entity-Framework-Core\"><a href=\"#安装-Entity-Framework-Core\" class=\"headerlink\" title=\"安装 Entity Framework Core\"></a>安装 Entity Framework Core</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.SqlServer</span><br><span class=\"line\"><span class=\"comment\">// 柚子的MySql</span></span><br><span class=\"line\">Install-Package Pomelo.EntityFrameworkCore.MySql</span><br><span class=\"line\"><span class=\"comment\">// 官方的MySql</span></span><br><span class=\"line\">Install-Package MySql.Data.EntityFrameworkCore</span><br><span class=\"line\"><span class=\"comment\">// 程序包管理器控制台</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.Tools</span><br><span class=\"line\"><span class=\"comment\">// 安装设计包</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.Design</span><br><span class=\"line\"><span class=\"comment\">// 数据库提供程序设计包(EF Core 2.0不再需要)</span></span><br><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.SqlServer.Design</span><br><span class=\"line\"><span class=\"comment\">// MySql</span></span><br><span class=\"line\">Install-Package Pomelo.EntityFrameworkCore.MySql.Design</span><br></pre></td></tr></table></figure><a id=\"more\"></a><h5 id=\"DB-First-–-从现有数据库创建模型\"><a href=\"#DB-First-–-从现有数据库创建模型\" class=\"headerlink\" title=\"DB First – 从现有数据库创建模型\"></a>DB First – 从现有数据库创建模型</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Scaffold-DbContext -Connection <span class=\"string\">\"Server=localhost;User Id=root;Password=123456;Database=vanfj\"</span> -Provider <span class=\"string\">\"Microsoft.EntityFrameworkCore.SqlServer\"</span> -OutputDir <span class=\"string\">\"Models\"</span></span><br><span class=\"line\"><span class=\"comment\">// MySql</span></span><br><span class=\"line\">Scaffold-DbContext -Connection <span class=\"string\">\"Server=localhost;User Id=root;Password=123456;Database=vanfj\"</span> -Provider <span class=\"string\">\"Pomelo.EntityFrameworkCore.MySql\"</span> -OutputDir <span class=\"string\">\"Models\"</span></span><br><span class=\"line\"><span class=\"comment\">// 将Connection中的连接字符串替换为自己的数据库连接，将OutputDir中的Models替换为自己要生成的文件目录名</span></span><br></pre></td></tr></table></figure><h5 id=\"CodeFirst-–-从模型生成到数据库\"><a href=\"#CodeFirst-–-从模型生成到数据库\" class=\"headerlink\" title=\"CodeFirst – 从模型生成到数据库\"></a>CodeFirst – 从模型生成到数据库</h5><h6 id=\"创建上下文\"><a href=\"#创建上下文\" class=\"headerlink\" title=\"创建上下文\"></a>创建上下文</h6><p>IRSContext.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IRSContext</span>:<span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IRSContext</span>(<span class=\"params\">DbContextOptions options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DbSet&lt;Role&gt; Roles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DbSet&lt;User&gt; Users &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder modelBuilder</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        modelBuilder.Entity&lt;User&gt;().ToTable(<span class=\"string\">\"User\"</span>);</span><br><span class=\"line\">        modelBuilder.Entity&lt;Role&gt;().ToTable(<span class=\"string\">\"Role\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>User.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> UserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserPwd &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Role.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Role</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> RoleId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> RoleName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> RoleDecs &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>####### 注入上下文<br>Startup.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//AddDbContext注入方式 </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> connection = Configuration.GetConnectionString(<span class=\"string\">\"SqlServer\"</span>);</span><br><span class=\"line\">    services.AddDbContext&lt;IRSContext&gt;(options =&gt; options.UseSqlServer(connection, b =&gt; b.UseRowNumberForPaging()));</span><br><span class=\"line\">    services.AddScoped&lt;DbContext, IRSContext&gt;();</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//AddDbContextPool注入方式</span></span><br><span class=\"line\">    services.AddDbContextPool&lt;IRSContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString(<span class=\"string\">\"SqlServer\"</span>)));</span><br><span class=\"line\">    services.AddMvc().AddJsonOptions(options =&gt; options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h6 id=\"appsettings-json连接字符串\"><a href=\"#appsettings-json连接字符串\" class=\"headerlink\" title=\"appsettings.json连接字符串\"></a>appsettings.json连接字符串</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"ConnectionStrings\"</span>: </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"SqlServer\"</span>: <span class=\"string\">\"Data Source=.;Initial Catalog=IRSDb;User Id=sa;Password=123;\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"执行NuGet命令-创建数据库\"><a href=\"#执行NuGet命令-创建数据库\" class=\"headerlink\" title=\"执行NuGet命令,创建数据库\"></a>执行NuGet命令,创建数据库</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一次执行初始化</span></span><br><span class=\"line\">Add-Migration InitialCreate</span><br><span class=\"line\"><span class=\"comment\">// 添加一个迁移数据库 迁移的名称 目录（及其子命名空间）路径是相对于项目目录。 默认值为\"Migrations\"。</span></span><br><span class=\"line\">Add-Migration -Name &lt;String&gt; -OutputDir &lt;String&gt;</span><br><span class=\"line\"><span class=\"comment\">// 删除上次的迁移数据库 不检查以查看迁移是否已应用到数据库。</span></span><br><span class=\"line\">Remove-Migration -Force</span><br><span class=\"line\"><span class=\"comment\">// 目标迁移。 如果为\"0\"，将恢复所有迁移。 默认到最后一个迁移。</span></span><br><span class=\"line\">Update-Database </span><br><span class=\"line\">Update-Database LastGoodMigration <span class=\"comment\">//还原迁移</span></span><br><span class=\"line\"><span class=\"comment\">// 删除数据库 显示的数据库会被丢弃，但没有删除它</span></span><br><span class=\"line\">Drop-Database -WhatIf</span><br><span class=\"line\"><span class=\"comment\">// 获取有关 DbContext 类型的信息</span></span><br><span class=\"line\">Get-DbContext </span><br><span class=\"line\"><span class=\"comment\">// 从数据库更新DbContext和实体的类型</span></span><br><span class=\"line\">Scaffold-DbContext </span><br><span class=\"line\">-Connection &lt;String&gt;\t<span class=\"comment\">// 数据库的连接字符串。</span></span><br><span class=\"line\">-Provider &lt;String&gt;\t<span class=\"comment\">// 要使用的提供程序。 （例如 Microsoft.EntityFrameworkCore.SqlServer)</span></span><br><span class=\"line\">-OutputDir &lt;String &gt;\t<span class=\"comment\">// 要将文件放入的目录。 路径是相对于项目目录。</span></span><br><span class=\"line\">--Context &lt;String &gt;\t<span class=\"comment\">// 若要生成的 dbcontext 名称。</span></span><br><span class=\"line\">-Schemas &lt;String[]&gt;\t<span class=\"comment\">// 要生成实体类型的表架构。</span></span><br><span class=\"line\">-Tables &lt;String[]&gt;\t<span class=\"comment\">// 要生成实体类型的表。</span></span><br><span class=\"line\">-DataAnnotations\t<span class=\"comment\">// 使用属性来配置该模型 （如果可能）。 如果省略，则使用仅 fluent API。</span></span><br><span class=\"line\">-UseDatabaseNames\t<span class=\"comment\">// 使用直接从数据库表和列名称。</span></span><br><span class=\"line\">-Force <span class=\"comment\">// 覆盖现有文件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从迁移中生成的 SQL 脚本</span></span><br><span class=\"line\">Script-Migration</span><br><span class=\"line\">-From &lt;String&gt;\t<span class=\"comment\">// 开始迁移。 默认值为 0 （初始数据库）</span></span><br><span class=\"line\">-To &lt;String&gt;\t<span class=\"comment\">// 结束的迁移。 默认到最后一个迁移</span></span><br><span class=\"line\">-Idempotent\t<span class=\"comment\">// 生成可以在任何迁移的数据库使用的脚本</span></span><br><span class=\"line\">-Output &lt;String&gt;\t<span class=\"comment\">// 要将结果写入的文件</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"安装-Entity-Framework-Core\"><a href=\"#安装-Entity-Framework-Core\" class=\"headerlink\" title=\"安装 Entity Framework Core\"></a>安装 Entity Framework Core</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.SqlServer</span><br><span class=\"line\"><span class=\"comment\">// 柚子的MySql</span></span><br><span class=\"line\">Install-Package Pomelo.EntityFrameworkCore.MySql</span><br><span class=\"line\"><span class=\"comment\">// 官方的MySql</span></span><br><span class=\"line\">Install-Package MySql.Data.EntityFrameworkCore</span><br><span class=\"line\"><span class=\"comment\">// 程序包管理器控制台</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.Tools</span><br><span class=\"line\"><span class=\"comment\">// 安装设计包</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.Design</span><br><span class=\"line\"><span class=\"comment\">// 数据库提供程序设计包(EF Core 2.0不再需要)</span></span><br><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Install-Package Microsoft.EntityFrameworkCore.SqlServer.Design</span><br><span class=\"line\"><span class=\"comment\">// MySql</span></span><br><span class=\"line\">Install-Package Pomelo.EntityFrameworkCore.MySql.Design</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"DB-First-–-从现有数据库创建模型\"><a href=\"#DB-First-–-从现有数据库创建模型\" class=\"headerlink\" title=\"DB First – 从现有数据库创建模型\"></a>DB First – 从现有数据库创建模型</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MsSql</span></span><br><span class=\"line\">Scaffold-DbContext -Connection <span class=\"string\">\"Server=localhost;User Id=root;Password=123456;Database=vanfj\"</span> -Provider <span class=\"string\">\"Microsoft.EntityFrameworkCore.SqlServer\"</span> -OutputDir <span class=\"string\">\"Models\"</span></span><br><span class=\"line\"><span class=\"comment\">// MySql</span></span><br><span class=\"line\">Scaffold-DbContext -Connection <span class=\"string\">\"Server=localhost;User Id=root;Password=123456;Database=vanfj\"</span> -Provider <span class=\"string\">\"Pomelo.EntityFrameworkCore.MySql\"</span> -OutputDir <span class=\"string\">\"Models\"</span></span><br><span class=\"line\"><span class=\"comment\">// 将Connection中的连接字符串替换为自己的数据库连接，将OutputDir中的Models替换为自己要生成的文件目录名</span></span><br></pre></td></tr></table></figure><h5 id=\"CodeFirst-–-从模型生成到数据库\"><a href=\"#CodeFirst-–-从模型生成到数据库\" class=\"headerlink\" title=\"CodeFirst – 从模型生成到数据库\"></a>CodeFirst – 从模型生成到数据库</h5><h6 id=\"创建上下文\"><a href=\"#创建上下文\" class=\"headerlink\" title=\"创建上下文\"></a>创建上下文</h6><p>IRSContext.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IRSContext</span>:<span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IRSContext</span>(<span class=\"params\">DbContextOptions options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DbSet&lt;Role&gt; Roles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DbSet&lt;User&gt; Users &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder modelBuilder</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        modelBuilder.Entity&lt;User&gt;().ToTable(<span class=\"string\">\"User\"</span>);</span><br><span class=\"line\">        modelBuilder.Entity&lt;Role&gt;().ToTable(<span class=\"string\">\"Role\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>User.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> UserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserPwd &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Role.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Role</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> RoleId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> RoleName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> RoleDecs &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>####### 注入上下文<br>Startup.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//AddDbContext注入方式 </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> connection = Configuration.GetConnectionString(<span class=\"string\">\"SqlServer\"</span>);</span><br><span class=\"line\">    services.AddDbContext&lt;IRSContext&gt;(options =&gt; options.UseSqlServer(connection, b =&gt; b.UseRowNumberForPaging()));</span><br><span class=\"line\">    services.AddScoped&lt;DbContext, IRSContext&gt;();</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//AddDbContextPool注入方式</span></span><br><span class=\"line\">    services.AddDbContextPool&lt;IRSContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString(<span class=\"string\">\"SqlServer\"</span>)));</span><br><span class=\"line\">    services.AddMvc().AddJsonOptions(options =&gt; options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h6 id=\"appsettings-json连接字符串\"><a href=\"#appsettings-json连接字符串\" class=\"headerlink\" title=\"appsettings.json连接字符串\"></a>appsettings.json连接字符串</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"ConnectionStrings\"</span>: </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"SqlServer\"</span>: <span class=\"string\">\"Data Source=.;Initial Catalog=IRSDb;User Id=sa;Password=123;\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"执行NuGet命令-创建数据库\"><a href=\"#执行NuGet命令-创建数据库\" class=\"headerlink\" title=\"执行NuGet命令,创建数据库\"></a>执行NuGet命令,创建数据库</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一次执行初始化</span></span><br><span class=\"line\">Add-Migration InitialCreate</span><br><span class=\"line\"><span class=\"comment\">// 添加一个迁移数据库 迁移的名称 目录（及其子命名空间）路径是相对于项目目录。 默认值为\"Migrations\"。</span></span><br><span class=\"line\">Add-Migration -Name &lt;String&gt; -OutputDir &lt;String&gt;</span><br><span class=\"line\"><span class=\"comment\">// 删除上次的迁移数据库 不检查以查看迁移是否已应用到数据库。</span></span><br><span class=\"line\">Remove-Migration -Force</span><br><span class=\"line\"><span class=\"comment\">// 目标迁移。 如果为\"0\"，将恢复所有迁移。 默认到最后一个迁移。</span></span><br><span class=\"line\">Update-Database </span><br><span class=\"line\">Update-Database LastGoodMigration <span class=\"comment\">//还原迁移</span></span><br><span class=\"line\"><span class=\"comment\">// 删除数据库 显示的数据库会被丢弃，但没有删除它</span></span><br><span class=\"line\">Drop-Database -WhatIf</span><br><span class=\"line\"><span class=\"comment\">// 获取有关 DbContext 类型的信息</span></span><br><span class=\"line\">Get-DbContext </span><br><span class=\"line\"><span class=\"comment\">// 从数据库更新DbContext和实体的类型</span></span><br><span class=\"line\">Scaffold-DbContext </span><br><span class=\"line\">-Connection &lt;String&gt;\t<span class=\"comment\">// 数据库的连接字符串。</span></span><br><span class=\"line\">-Provider &lt;String&gt;\t<span class=\"comment\">// 要使用的提供程序。 （例如 Microsoft.EntityFrameworkCore.SqlServer)</span></span><br><span class=\"line\">-OutputDir &lt;String &gt;\t<span class=\"comment\">// 要将文件放入的目录。 路径是相对于项目目录。</span></span><br><span class=\"line\">--Context &lt;String &gt;\t<span class=\"comment\">// 若要生成的 dbcontext 名称。</span></span><br><span class=\"line\">-Schemas &lt;String[]&gt;\t<span class=\"comment\">// 要生成实体类型的表架构。</span></span><br><span class=\"line\">-Tables &lt;String[]&gt;\t<span class=\"comment\">// 要生成实体类型的表。</span></span><br><span class=\"line\">-DataAnnotations\t<span class=\"comment\">// 使用属性来配置该模型 （如果可能）。 如果省略，则使用仅 fluent API。</span></span><br><span class=\"line\">-UseDatabaseNames\t<span class=\"comment\">// 使用直接从数据库表和列名称。</span></span><br><span class=\"line\">-Force <span class=\"comment\">// 覆盖现有文件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从迁移中生成的 SQL 脚本</span></span><br><span class=\"line\">Script-Migration</span><br><span class=\"line\">-From &lt;String&gt;\t<span class=\"comment\">// 开始迁移。 默认值为 0 （初始数据库）</span></span><br><span class=\"line\">-To &lt;String&gt;\t<span class=\"comment\">// 结束的迁移。 默认到最后一个迁移</span></span><br><span class=\"line\">-Idempotent\t<span class=\"comment\">// 生成可以在任何迁移的数据库使用的脚本</span></span><br><span class=\"line\">-Output &lt;String&gt;\t<span class=\"comment\">// 要将结果写入的文件</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net Core MVC 三层架构框架","date":"2018-03-06T15:41:49.000Z","_content":"Asp.Net Core 出来也很长时间,研究了一段时间,并基于Asp.Net Core + EF Core搭建了一个MVC的三层结构,其中用到了依赖注入和控制反转\n<!--more-->\n#### BLL层\n##### IBaseService.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Interface\n{\n    public interface IBaseService<T> where T:class,new()\n    {\n        IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n        bool DeleteEntity(T entity);\n        bool EditEntity(T entity);\n        T AddEntity(T entity);\n    }\n}\n```\n\n##### IService.cs\n```cs\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Interface\n{\n    public partial interface IFaceService : IBaseService<Face>\n    {\n\n    }\n    public partial interface IPeopleService : IBaseService<People>\n    {\n\n    }\n}\n```\n\n##### BaseService.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Implements\n{\n    public class BaseService<T> where T : class, new()\n    {\n        private IBaseDal<T> _baseDal;\n        public BaseService(IBaseDal<T> baseDal)\n        {\n            _baseDal = baseDal;\n        }\n        //查询\n        public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n        {\n            return _baseDal.LoadEntities(whereLambda);\n        }\n        //分页岔村\n        public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n        {\n            return _baseDal.LoadPageEntities<s>(pageIndex, pageSize, out totalCount, whereLambda, orderbyLambda, isAsc);\n        }\n        /// <summary>\n        /// 删除\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool DeleteEntity(T entity)\n        {\n            _baseDal.DeleteEntity(entity);\n            return _baseDal.SaveChanges();\n        }\n        /// <summary>\n        /// 更新\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool EditEntity(T entity)\n        {\n            _baseDal.EditEntity(entity);\n            return _baseDal.SaveChanges();\n        }\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public T AddEntity(T entity)\n        {\n            _baseDal.AddEntity(entity);\n            _baseDal.SaveChanges();\n            return entity;\n        }\n    }\n}\n```\n\n##### Service.cs\n```cs\nusing Caty.Album.BLL.Interface;\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Implements\n{\n    public partial class FaceService:BaseService<Face>,IFaceService\n    {\n        private IFaceDal _faceDal;\n        public FaceService(IFaceDal faceDal):base(faceDal)\n        {\n            _faceDal = faceDal;\n        }\n    }\n\n    public partial class PeopleService:BaseService<People>,IPeopleService\n    {\n        private IPeopleDal _peopleDal;\n        public PeopleService(IPeopleDal peopleDal) : base(peopleDal)\n        {\n            _peopleDal = peopleDal;\n        }\n    }\n}\n```\n\n#### Dal层\n##### IBaseDal.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Interface\n{\n    public interface IBaseDal<T> where T:class, new()\n    {\n        IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n        bool DeleteEntity(T entity);\n        bool EditEntity(T entity);\n        T AddEntity(T entity);\n        bool SaveChanges();\n    }\n}\n```\n\n##### IDal.cs\n```cs\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Interface\n{\n    public partial interface IUserDal : IBaseDal<User>\n    {\n        \n    }\n    public partial interface IRoleDal : IBaseDal<Role>\n    {\n\n    }\n}\n```\n\n##### BaseDal.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Implements\n{\n    public class BaseDal<T> : IBaseDal<T> where T : class, new()\n    {\n        protected readonly AlbumContext Db;\n        public BaseDal(AlbumContext dbContext)\n        {\n            Db = dbContext;\n        }\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public T AddEntity(T entity)\n        {\n            Db.Set<T>().Add(entity);\n            // Db.SaveChanges();\n            return entity;\n        }\n        /// <summary>\n        /// 删除\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool DeleteEntity(T entity)\n        {\n            Db.Entry<T>(entity).State = EntityState.Deleted;\n            return true;\n            // return Db.SaveChanges() > 0;\n        }\n        /// <summary>\n        /// 更新\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool EditEntity(T entity)\n        {\n            Db.Entry<T>(entity).State = EntityState.Modified;\n            return true;\n            // return Db.SaveChanges() > 0;\n        }\n        /// <summary>\n        /// 查询过滤\n        /// </summary>\n        /// <param name=\"whereLambda\"></param>\n        /// <returns></returns>\n        public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n        {\n            return Db.Set<T>().Where<T>(whereLambda);\n        }\n        /// <summary>\n        /// 分页\n        /// </summary>\n        /// <typeparam name=\"s\"></typeparam>\n        /// <param name=\"pageIndex\"></param>\n        /// <param name=\"pageSize\"></param>\n        /// <param name=\"totalCount\"></param>\n        /// <param name=\"whereLambda\"></param>\n        /// <param name=\"orderbyLambda\"></param>\n        /// <param name=\"isAsc\"></param>\n        /// <returns></returns>\n        public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n        {\n            var temp = Db.Set<T>().Where<T>(whereLambda);\n            totalCount = temp.Count();\n            if (isAsc) //升序\n            {\n                temp = temp.OrderBy<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n            }\n            else\n            {\n                temp = temp.OrderByDescending<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n            }\n            return temp;\n        }\n        /// <summary>\n        /// 一个业务中经常设计多张表操作,一次连接数据库完成所有数据的保存,提高性能,工作单元模式\n        /// </summary>\n        /// <returns></returns>\n        public bool SaveChanges()\n        {\n            return Db.SaveChanges() > 0;\n        }\n    }\n}\n```\n\n##### Dal.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Implements\n{\n    public partial class UserDal : BaseDal<User>, IUserDal\n    {\n        public UserDal(AlbumContext dbContext) : base(dbContext)\n        {\n\n        }\n    }\n    public partial class RoleDal : BaseDal<Role>, IRoleDal\n    {\n        public RoleDal(AlbumContext dbContext) : base(dbContext)\n        {\n\n        }\n    }\n}\n```\n\n#### Model层\n##### AlbumContext.cs\n```cs\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Album.Model\n{\n    public class AlbumContext:DbContext\n    {\n        public AlbumContext() : base() { }\n        public AlbumContext(DbContextOptions options) : base(options) { }\n\n        public DbSet<User> Users { get; set; }\n        public DbSet<Role> Roles { get; set; }\n        public DbSet<Right> Rights { get; set; }\n        public DbSet<UserRole> UserRoles { get; set; }\n        public DbSet<UserRight> UserRights { get; set; }\n        public DbSet<RoleRight> RoleRights { get; set; }\n        public DbSet<Face> Faces { get; set; }\n        public DbSet<Group> Groups { get; set; }\n        public DbSet<People> Peoples { get; set; }\n        public DbSet<PeopleGroup> PeopleGroups { get; set; }\n    }\n}\n```\n\n#### 依赖注入\n修改Stratup.cs下的ConfigureServices方法的代码\n##### Startup.cs\n```cs\n public void ConfigureServices(IServiceCollection services)\n    {\n        //添加ef的依赖  \n        var connection = \"server=.;uid=sa;pwd=123;database=AlbumDb\";\n        services.AddDbContext<AlbumContext>(options => options.UseSqlServer(connection));\n        services.AddScoped<DbContext, AlbumContext>();\n        services.AddMvc();\n\n        #region 依赖注入\n        services.AddScoped<IFaceDal, FaceDal>();\n        services.AddScoped<IPeopleDal, PeopleDal>();\n        services.AddScoped<IGroupDal, GroupDal>();\n        services.AddScoped<IPeopleGroupDal, PeopleGroupDal>();\n        services.AddScoped<IFaceService, FaceService>();\n        services.AddScoped<IPeopleService, PeopleService>();\n        services.AddScoped<IGroupService, GroupService>();\n        services.AddScoped<IPeopleGroupService, PeopleGroupService>();\n        #endregion\n    }\n```","source":"_posts/Net-Core-MVC-三层架构框架.md","raw":"---\ntitle: .Net Core MVC 三层架构框架\ndate: 2018-03-06 23:41:49\ncategories: .Net Core\ntags:\n - .Net Core\n - MVC\n---\nAsp.Net Core 出来也很长时间,研究了一段时间,并基于Asp.Net Core + EF Core搭建了一个MVC的三层结构,其中用到了依赖注入和控制反转\n<!--more-->\n#### BLL层\n##### IBaseService.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Interface\n{\n    public interface IBaseService<T> where T:class,new()\n    {\n        IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n        bool DeleteEntity(T entity);\n        bool EditEntity(T entity);\n        T AddEntity(T entity);\n    }\n}\n```\n\n##### IService.cs\n```cs\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Interface\n{\n    public partial interface IFaceService : IBaseService<Face>\n    {\n\n    }\n    public partial interface IPeopleService : IBaseService<People>\n    {\n\n    }\n}\n```\n\n##### BaseService.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Implements\n{\n    public class BaseService<T> where T : class, new()\n    {\n        private IBaseDal<T> _baseDal;\n        public BaseService(IBaseDal<T> baseDal)\n        {\n            _baseDal = baseDal;\n        }\n        //查询\n        public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n        {\n            return _baseDal.LoadEntities(whereLambda);\n        }\n        //分页岔村\n        public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n        {\n            return _baseDal.LoadPageEntities<s>(pageIndex, pageSize, out totalCount, whereLambda, orderbyLambda, isAsc);\n        }\n        /// <summary>\n        /// 删除\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool DeleteEntity(T entity)\n        {\n            _baseDal.DeleteEntity(entity);\n            return _baseDal.SaveChanges();\n        }\n        /// <summary>\n        /// 更新\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool EditEntity(T entity)\n        {\n            _baseDal.EditEntity(entity);\n            return _baseDal.SaveChanges();\n        }\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public T AddEntity(T entity)\n        {\n            _baseDal.AddEntity(entity);\n            _baseDal.SaveChanges();\n            return entity;\n        }\n    }\n}\n```\n\n##### Service.cs\n```cs\nusing Caty.Album.BLL.Interface;\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Text;\n\nnamespace Caty.Album.BLL.Implements\n{\n    public partial class FaceService:BaseService<Face>,IFaceService\n    {\n        private IFaceDal _faceDal;\n        public FaceService(IFaceDal faceDal):base(faceDal)\n        {\n            _faceDal = faceDal;\n        }\n    }\n\n    public partial class PeopleService:BaseService<People>,IPeopleService\n    {\n        private IPeopleDal _peopleDal;\n        public PeopleService(IPeopleDal peopleDal) : base(peopleDal)\n        {\n            _peopleDal = peopleDal;\n        }\n    }\n}\n```\n\n#### Dal层\n##### IBaseDal.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Interface\n{\n    public interface IBaseDal<T> where T:class, new()\n    {\n        IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n        IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n        bool DeleteEntity(T entity);\n        bool EditEntity(T entity);\n        T AddEntity(T entity);\n        bool SaveChanges();\n    }\n}\n```\n\n##### IDal.cs\n```cs\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Interface\n{\n    public partial interface IUserDal : IBaseDal<User>\n    {\n        \n    }\n    public partial interface IRoleDal : IBaseDal<Role>\n    {\n\n    }\n}\n```\n\n##### BaseDal.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Implements\n{\n    public class BaseDal<T> : IBaseDal<T> where T : class, new()\n    {\n        protected readonly AlbumContext Db;\n        public BaseDal(AlbumContext dbContext)\n        {\n            Db = dbContext;\n        }\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public T AddEntity(T entity)\n        {\n            Db.Set<T>().Add(entity);\n            // Db.SaveChanges();\n            return entity;\n        }\n        /// <summary>\n        /// 删除\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool DeleteEntity(T entity)\n        {\n            Db.Entry<T>(entity).State = EntityState.Deleted;\n            return true;\n            // return Db.SaveChanges() > 0;\n        }\n        /// <summary>\n        /// 更新\n        /// </summary>\n        /// <param name=\"entity\"></param>\n        /// <returns></returns>\n        public bool EditEntity(T entity)\n        {\n            Db.Entry<T>(entity).State = EntityState.Modified;\n            return true;\n            // return Db.SaveChanges() > 0;\n        }\n        /// <summary>\n        /// 查询过滤\n        /// </summary>\n        /// <param name=\"whereLambda\"></param>\n        /// <returns></returns>\n        public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n        {\n            return Db.Set<T>().Where<T>(whereLambda);\n        }\n        /// <summary>\n        /// 分页\n        /// </summary>\n        /// <typeparam name=\"s\"></typeparam>\n        /// <param name=\"pageIndex\"></param>\n        /// <param name=\"pageSize\"></param>\n        /// <param name=\"totalCount\"></param>\n        /// <param name=\"whereLambda\"></param>\n        /// <param name=\"orderbyLambda\"></param>\n        /// <param name=\"isAsc\"></param>\n        /// <returns></returns>\n        public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n        {\n            var temp = Db.Set<T>().Where<T>(whereLambda);\n            totalCount = temp.Count();\n            if (isAsc) //升序\n            {\n                temp = temp.OrderBy<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n            }\n            else\n            {\n                temp = temp.OrderByDescending<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n            }\n            return temp;\n        }\n        /// <summary>\n        /// 一个业务中经常设计多张表操作,一次连接数据库完成所有数据的保存,提高性能,工作单元模式\n        /// </summary>\n        /// <returns></returns>\n        public bool SaveChanges()\n        {\n            return Db.SaveChanges() > 0;\n        }\n    }\n}\n```\n\n##### Dal.cs\n```cs\nusing Caty.Album.Dal.Interface;\nusing Caty.Album.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Album.Dal.Implements\n{\n    public partial class UserDal : BaseDal<User>, IUserDal\n    {\n        public UserDal(AlbumContext dbContext) : base(dbContext)\n        {\n\n        }\n    }\n    public partial class RoleDal : BaseDal<Role>, IRoleDal\n    {\n        public RoleDal(AlbumContext dbContext) : base(dbContext)\n        {\n\n        }\n    }\n}\n```\n\n#### Model层\n##### AlbumContext.cs\n```cs\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Album.Model\n{\n    public class AlbumContext:DbContext\n    {\n        public AlbumContext() : base() { }\n        public AlbumContext(DbContextOptions options) : base(options) { }\n\n        public DbSet<User> Users { get; set; }\n        public DbSet<Role> Roles { get; set; }\n        public DbSet<Right> Rights { get; set; }\n        public DbSet<UserRole> UserRoles { get; set; }\n        public DbSet<UserRight> UserRights { get; set; }\n        public DbSet<RoleRight> RoleRights { get; set; }\n        public DbSet<Face> Faces { get; set; }\n        public DbSet<Group> Groups { get; set; }\n        public DbSet<People> Peoples { get; set; }\n        public DbSet<PeopleGroup> PeopleGroups { get; set; }\n    }\n}\n```\n\n#### 依赖注入\n修改Stratup.cs下的ConfigureServices方法的代码\n##### Startup.cs\n```cs\n public void ConfigureServices(IServiceCollection services)\n    {\n        //添加ef的依赖  \n        var connection = \"server=.;uid=sa;pwd=123;database=AlbumDb\";\n        services.AddDbContext<AlbumContext>(options => options.UseSqlServer(connection));\n        services.AddScoped<DbContext, AlbumContext>();\n        services.AddMvc();\n\n        #region 依赖注入\n        services.AddScoped<IFaceDal, FaceDal>();\n        services.AddScoped<IPeopleDal, PeopleDal>();\n        services.AddScoped<IGroupDal, GroupDal>();\n        services.AddScoped<IPeopleGroupDal, PeopleGroupDal>();\n        services.AddScoped<IFaceService, FaceService>();\n        services.AddScoped<IPeopleService, PeopleService>();\n        services.AddScoped<IGroupService, GroupService>();\n        services.AddScoped<IPeopleGroupService, PeopleGroupService>();\n        #endregion\n    }\n```","slug":"Net-Core-MVC-三层架构框架","published":1,"updated":"2018-03-11T14:20:06.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yk000rtkui7qcsbphm","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>Asp.Net Core 出来也很长时间,研究了一段时间,并基于Asp.Net Core + EF Core搭建了一个MVC的三层结构,其中用到了依赖注入和控制反转<br><a id=\"more\"></a></p><h4 id=\"BLL层\"><a href=\"#BLL层\" class=\"headerlink\" title=\"BLL层\"></a>BLL层</h4><h5 id=\"IBaseService-cs\"><a href=\"#IBaseService-cs\" class=\"headerlink\" title=\"IBaseService.cs\"></a>IBaseService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseService&lt;T&gt; where T:class,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">        IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"IService-cs\"><a href=\"#IService-cs\" class=\"headerlink\" title=\"IService.cs\"></a>IService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial interface IFaceService : IBaseService&lt;Face&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public partial interface IPeopleService : IBaseService&lt;People&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"BaseService-cs\"><a href=\"#BaseService-cs\" class=\"headerlink\" title=\"BaseService.cs\"></a>BaseService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class BaseService&lt;T&gt; where T : class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IBaseDal&lt;T&gt; _baseDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\">IBaseDal&lt;T&gt; baseDal</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _baseDal = baseDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//查询</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.LoadEntities(whereLambda);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//分页岔村</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.LoadPageEntities&lt;s&gt;(pageIndex, pageSize, <span class=\"keyword\">out</span> totalCount, whereLambda, orderbyLambda, isAsc);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _baseDal.DeleteEntity(entity);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.SaveChanges();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _baseDal.EditEntity(entity);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.SaveChanges();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _baseDal.AddEntity(entity);</span><br><span class=\"line\">            _baseDal.SaveChanges();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Service-cs\"><a href=\"#Service-cs\" class=\"headerlink\" title=\"Service.cs\"></a>Service.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.BLL.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq.Expressions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial class FaceService:BaseService&lt;Face&gt;,IFaceService</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IFaceDal _faceDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FaceService</span>(<span class=\"params\">IFaceDal faceDal</span>):<span class=\"title\">base</span>(<span class=\"params\">faceDal</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _faceDal = faceDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public partial class PeopleService:BaseService&lt;People&gt;,IPeopleService</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IPeopleDal _peopleDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleService</span>(<span class=\"params\">IPeopleDal peopleDal</span>) : <span class=\"title\">base</span>(<span class=\"params\">peopleDal</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _peopleDal = peopleDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Dal层\"><a href=\"#Dal层\" class=\"headerlink\" title=\"Dal层\"></a>Dal层</h4><h5 id=\"IBaseDal-cs\"><a href=\"#IBaseDal-cs\" class=\"headerlink\" title=\"IBaseDal.cs\"></a>IBaseDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseDal&lt;T&gt; where T:class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">        IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"IDal-cs\"><a href=\"#IDal-cs\" class=\"headerlink\" title=\"IDal.cs\"></a>IDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial interface IUserDal : IBaseDal&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public partial interface IRoleDal : IBaseDal&lt;Role&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"BaseDal-cs\"><a href=\"#BaseDal-cs\" class=\"headerlink\" title=\"BaseDal.cs\"></a>BaseDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.EntityFrameworkCore;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class BaseDal&lt;T&gt; : IBaseDal&lt;T&gt; where T : class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">readonly</span> AlbumContext Db;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseDal</span>(<span class=\"params\">AlbumContext dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Db = dbContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Db.Set&lt;T&gt;().Add(entity);</span><br><span class=\"line\">            <span class=\"comment\">// Db.SaveChanges();</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Db.Entry&lt;T&gt;(entity).State = EntityState.Deleted;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// return Db.SaveChanges() &gt; 0;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Db.Entry&lt;T&gt;(entity).State = EntityState.Modified;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// return Db.SaveChanges() &gt; 0;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"s\"&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">            totalCount = temp.Count();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isAsc) <span class=\"comment\">//升序</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp = temp.OrderBy&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp = temp.OrderByDescending&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 一个业务中经常设计多张表操作,一次连接数据库完成所有数据的保存,提高性能,工作单元模式</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Dal-cs\"><a href=\"#Dal-cs\" class=\"headerlink\" title=\"Dal.cs\"></a>Dal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial class UserDal : BaseDal&lt;User&gt;, IUserDal</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDal</span>(<span class=\"params\">AlbumContext dbContext</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public partial class RoleDal : BaseDal&lt;Role&gt;, IRoleDal</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RoleDal</span>(<span class=\"params\">AlbumContext dbContext</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Model层\"><a href=\"#Model层\" class=\"headerlink\" title=\"Model层\"></a>Model层</h4><h5 id=\"AlbumContext-cs\"><a href=\"#AlbumContext-cs\" class=\"headerlink\" title=\"AlbumContext.cs\"></a>AlbumContext.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.EntityFrameworkCore;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Model</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumContext</span>:<span class=\"title\">DbContext</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumContext</span>(<span class=\"params\"></span>) : <span class=\"title\">base</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumContext</span>(<span class=\"params\">DbContextOptions options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;User&gt; Users &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Role&gt; Roles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Right&gt; Rights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;UserRole&gt; UserRoles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;UserRight&gt; UserRights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;RoleRight&gt; RoleRights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Face&gt; Faces &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Group&gt; Groups &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;People&gt; Peoples &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;PeopleGroup&gt; PeopleGroups &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h4><p>修改Stratup.cs下的ConfigureServices方法的代码</p><h5 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//添加ef的依赖  </span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> connection = <span class=\"string\">\"server=.;uid=sa;pwd=123;database=AlbumDb\"</span>;</span><br><span class=\"line\">       services.AddDbContext&lt;AlbumContext&gt;(options =&gt; options.UseSqlServer(connection));</span><br><span class=\"line\">       services.AddScoped&lt;DbContext, AlbumContext&gt;();</span><br><span class=\"line\">       services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 依赖注入</span></span><br><span class=\"line\">       services.AddScoped&lt;IFaceDal, FaceDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleDal, PeopleDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IGroupDal, GroupDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleGroupDal, PeopleGroupDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IFaceService, FaceService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleService, PeopleService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IGroupService, GroupService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleGroupService, PeopleGroupService&gt;();</span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>Asp.Net Core 出来也很长时间,研究了一段时间,并基于Asp.Net Core + EF Core搭建了一个MVC的三层结构,其中用到了依赖注入和控制反转<br>","more":"</p><h4 id=\"BLL层\"><a href=\"#BLL层\" class=\"headerlink\" title=\"BLL层\"></a>BLL层</h4><h5 id=\"IBaseService-cs\"><a href=\"#IBaseService-cs\" class=\"headerlink\" title=\"IBaseService.cs\"></a>IBaseService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseService&lt;T&gt; where T:class,new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">        IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"IService-cs\"><a href=\"#IService-cs\" class=\"headerlink\" title=\"IService.cs\"></a>IService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial interface IFaceService : IBaseService&lt;Face&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public partial interface IPeopleService : IBaseService&lt;People&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"BaseService-cs\"><a href=\"#BaseService-cs\" class=\"headerlink\" title=\"BaseService.cs\"></a>BaseService.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class BaseService&lt;T&gt; where T : class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IBaseDal&lt;T&gt; _baseDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\">IBaseDal&lt;T&gt; baseDal</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _baseDal = baseDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//查询</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.LoadEntities(whereLambda);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//分页岔村</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.LoadPageEntities&lt;s&gt;(pageIndex, pageSize, <span class=\"keyword\">out</span> totalCount, whereLambda, orderbyLambda, isAsc);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _baseDal.DeleteEntity(entity);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.SaveChanges();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _baseDal.EditEntity(entity);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _baseDal.SaveChanges();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _baseDal.AddEntity(entity);</span><br><span class=\"line\">            _baseDal.SaveChanges();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Service-cs\"><a href=\"#Service-cs\" class=\"headerlink\" title=\"Service.cs\"></a>Service.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.BLL.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq.Expressions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.BLL.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial class FaceService:BaseService&lt;Face&gt;,IFaceService</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IFaceDal _faceDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FaceService</span>(<span class=\"params\">IFaceDal faceDal</span>):<span class=\"title\">base</span>(<span class=\"params\">faceDal</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _faceDal = faceDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public partial class PeopleService:BaseService&lt;People&gt;,IPeopleService</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> IPeopleDal _peopleDal;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeopleService</span>(<span class=\"params\">IPeopleDal peopleDal</span>) : <span class=\"title\">base</span>(<span class=\"params\">peopleDal</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _peopleDal = peopleDal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Dal层\"><a href=\"#Dal层\" class=\"headerlink\" title=\"Dal层\"></a>Dal层</h4><h5 id=\"IBaseDal-cs\"><a href=\"#IBaseDal-cs\" class=\"headerlink\" title=\"IBaseDal.cs\"></a>IBaseDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseDal&lt;T&gt; where T:class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">        IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"IDal-cs\"><a href=\"#IDal-cs\" class=\"headerlink\" title=\"IDal.cs\"></a>IDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial interface IUserDal : IBaseDal&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public partial interface IRoleDal : IBaseDal&lt;Role&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"BaseDal-cs\"><a href=\"#BaseDal-cs\" class=\"headerlink\" title=\"BaseDal.cs\"></a>BaseDal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.EntityFrameworkCore;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class BaseDal&lt;T&gt; : IBaseDal&lt;T&gt; where T : class, new()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">readonly</span> AlbumContext Db;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseDal</span>(<span class=\"params\">AlbumContext dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Db = dbContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Db.Set&lt;T&gt;().Add(entity);</span><br><span class=\"line\">            <span class=\"comment\">// Db.SaveChanges();</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Db.Entry&lt;T&gt;(entity).State = EntityState.Deleted;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// return Db.SaveChanges() &gt; 0;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Db.Entry&lt;T&gt;(entity).State = EntityState.Modified;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// return Db.SaveChanges() &gt; 0;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"s\"&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">            totalCount = temp.Count();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isAsc) <span class=\"comment\">//升序</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp = temp.OrderBy&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp = temp.OrderByDescending&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 一个业务中经常设计多张表操作,一次连接数据库完成所有数据的保存,提高性能,工作单元模式</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Dal-cs\"><a href=\"#Dal-cs\" class=\"headerlink\" title=\"Dal.cs\"></a>Dal.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Dal.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Album.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Dal.Implements</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial class UserDal : BaseDal&lt;User&gt;, IUserDal</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDal</span>(<span class=\"params\">AlbumContext dbContext</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public partial class RoleDal : BaseDal&lt;Role&gt;, IRoleDal</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RoleDal</span>(<span class=\"params\">AlbumContext dbContext</span>) : <span class=\"title\">base</span>(<span class=\"params\">dbContext</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Model层\"><a href=\"#Model层\" class=\"headerlink\" title=\"Model层\"></a>Model层</h4><h5 id=\"AlbumContext-cs\"><a href=\"#AlbumContext-cs\" class=\"headerlink\" title=\"AlbumContext.cs\"></a>AlbumContext.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.EntityFrameworkCore;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Model</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AlbumContext</span>:<span class=\"title\">DbContext</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumContext</span>(<span class=\"params\"></span>) : <span class=\"title\">base</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlbumContext</span>(<span class=\"params\">DbContextOptions options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;User&gt; Users &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Role&gt; Roles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Right&gt; Rights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;UserRole&gt; UserRoles &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;UserRight&gt; UserRights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;RoleRight&gt; RoleRights &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Face&gt; Faces &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;Group&gt; Groups &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;People&gt; Peoples &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> DbSet&lt;PeopleGroup&gt; PeopleGroups &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h4><p>修改Stratup.cs下的ConfigureServices方法的代码</p><h5 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//添加ef的依赖  </span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> connection = <span class=\"string\">\"server=.;uid=sa;pwd=123;database=AlbumDb\"</span>;</span><br><span class=\"line\">       services.AddDbContext&lt;AlbumContext&gt;(options =&gt; options.UseSqlServer(connection));</span><br><span class=\"line\">       services.AddScoped&lt;DbContext, AlbumContext&gt;();</span><br><span class=\"line\">       services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 依赖注入</span></span><br><span class=\"line\">       services.AddScoped&lt;IFaceDal, FaceDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleDal, PeopleDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IGroupDal, GroupDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleGroupDal, PeopleGroupDal&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IFaceService, FaceService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleService, PeopleService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IGroupService, GroupService&gt;();</span><br><span class=\"line\">       services.AddScoped&lt;IPeopleGroupService, PeopleGroupService&gt;();</span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"IdentityServer4 ClientCredential模式","date":"2019-11-02T04:48:58.000Z","_content":"#### 使用客户端认证保护Api\n\n此博客介绍了使用IdentityServer保护API的最基本场景.\n在这种情况下,我们将定义一个API和要访问它的客户端.客户端将在IdentityServer上请求访问令牌,并使用它来访问API.\n\n#### 准备\n\n先交代一下需要用的到包以及版本\n\n* .Net Core 3.0.0\n* IdentityServer4.AccessTokenValidation 3.0.1\n* IdentityServer4 3.0.2\n* IdentityModel 4.0.0\n\n#### IdentityServerCenter\n\n这是一个ASP.NET Core Web Api项目,认证服务中心,主要用为Token的发放,引用IdentityServer4包\n\n<!--more-->\n\n##### Config.cs\n\n```cs\npublic class Config\n{\n    public static IEnumerable<ApiResource> GetResources()\n    {\n        return new List<ApiResource>()\n        {\n            new ApiResource(\"api\", \"My Api\")\n        };\n    }\n\n    public static IEnumerable<Client> GetClients()\n    {\n        return new List<Client>\n        {\n            new Client()\n            {\n                ClientId = \"client\",\n                AllowedGrantTypes = GrantTypes.ClientCredentials,\n                ClientSecrets = new List<Secret>\n                {\n                    new Secret(\"secret\".Sha256())\n                },\n                AllowedScopes = {\"api\"}\n            }\n        };\n    }\n}\n```\n\n##### Startup.cs\n\n```cs\npublic class Startup\n{\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddIdentityServer()\n            .AddDeveloperSigningCredential()\n            .AddInMemoryApiResources(Config.GetResources())\n            .AddInMemoryClients(Config.GetClients());\n        services.AddControllers();\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        app.UseHttpsRedirection();\n        app.UseIdentityServer();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}\n```\n\n通过查看launchsettings.json,获知和修改项目运行时的端口.\n","source":"_posts/IdentityServer4-ClientCredential模式.md","raw":"---\ntitle: IdentityServer4 ClientCredential模式\ndate: 2019-11-02 12:48:58\ncategories: .Net Core\ntags:\n - .Net Core\n - IdentityServer4\n---\n#### 使用客户端认证保护Api\n\n此博客介绍了使用IdentityServer保护API的最基本场景.\n在这种情况下,我们将定义一个API和要访问它的客户端.客户端将在IdentityServer上请求访问令牌,并使用它来访问API.\n\n#### 准备\n\n先交代一下需要用的到包以及版本\n\n* .Net Core 3.0.0\n* IdentityServer4.AccessTokenValidation 3.0.1\n* IdentityServer4 3.0.2\n* IdentityModel 4.0.0\n\n#### IdentityServerCenter\n\n这是一个ASP.NET Core Web Api项目,认证服务中心,主要用为Token的发放,引用IdentityServer4包\n\n<!--more-->\n\n##### Config.cs\n\n```cs\npublic class Config\n{\n    public static IEnumerable<ApiResource> GetResources()\n    {\n        return new List<ApiResource>()\n        {\n            new ApiResource(\"api\", \"My Api\")\n        };\n    }\n\n    public static IEnumerable<Client> GetClients()\n    {\n        return new List<Client>\n        {\n            new Client()\n            {\n                ClientId = \"client\",\n                AllowedGrantTypes = GrantTypes.ClientCredentials,\n                ClientSecrets = new List<Secret>\n                {\n                    new Secret(\"secret\".Sha256())\n                },\n                AllowedScopes = {\"api\"}\n            }\n        };\n    }\n}\n```\n\n##### Startup.cs\n\n```cs\npublic class Startup\n{\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddIdentityServer()\n            .AddDeveloperSigningCredential()\n            .AddInMemoryApiResources(Config.GetResources())\n            .AddInMemoryClients(Config.GetClients());\n        services.AddControllers();\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        app.UseHttpsRedirection();\n        app.UseIdentityServer();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}\n```\n\n通过查看launchsettings.json,获知和修改项目运行时的端口.\n","slug":"IdentityServer4-ClientCredential模式","published":1,"updated":"2019-12-30T16:14:01.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yl000stkuirisr7nfr","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"使用客户端认证保护Api\"><a href=\"#使用客户端认证保护Api\" class=\"headerlink\" title=\"使用客户端认证保护Api\"></a>使用客户端认证保护Api</h4><p>此博客介绍了使用IdentityServer保护API的最基本场景.<br>在这种情况下,我们将定义一个API和要访问它的客户端.客户端将在IdentityServer上请求访问令牌,并使用它来访问API.</p><h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>先交代一下需要用的到包以及版本</p><ul><li>.Net Core 3.0.0</li><li>IdentityServer4.AccessTokenValidation 3.0.1</li><li>IdentityServer4 3.0.2</li><li>IdentityModel 4.0.0</li></ul><h4 id=\"IdentityServerCenter\"><a href=\"#IdentityServerCenter\" class=\"headerlink\" title=\"IdentityServerCenter\"></a>IdentityServerCenter</h4><p>这是一个ASP.NET Core Web Api项目,认证服务中心,主要用为Token的发放,引用IdentityServer4包</p><a id=\"more\"></a><h5 id=\"Config-cs\"><a href=\"#Config-cs\" class=\"headerlink\" title=\"Config.cs\"></a>Config.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Config</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;ApiResource&gt; <span class=\"title\">GetResources</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> List&lt;ApiResource&gt;()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ApiResource(<span class=\"string\">\"api\"</span>, <span class=\"string\">\"My Api\"</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;Client&gt; <span class=\"title\">GetClients</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> List&lt;Client&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Client()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ClientId = <span class=\"string\">\"client\"</span>,</span><br><span class=\"line\">                AllowedGrantTypes = GrantTypes.ClientCredentials,</span><br><span class=\"line\">                ClientSecrets = <span class=\"keyword\">new</span> List&lt;Secret&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Secret(<span class=\"string\">\"secret\"</span>.Sha256())</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                AllowedScopes = &#123;<span class=\"string\">\"api\"</span>&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Configuration = configuration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddIdentityServer()</span><br><span class=\"line\">            .AddDeveloperSigningCredential()</span><br><span class=\"line\">            .AddInMemoryApiResources(Config.GetResources())</span><br><span class=\"line\">            .AddInMemoryClients(Config.GetClients());</span><br><span class=\"line\">        services.AddControllers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        app.UseHttpsRedirection();</span><br><span class=\"line\">        app.UseIdentityServer();</span><br><span class=\"line\">        app.UseRouting();</span><br><span class=\"line\">        app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            endpoints.MapControllers();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过查看launchsettings.json,获知和修改项目运行时的端口.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"使用客户端认证保护Api\"><a href=\"#使用客户端认证保护Api\" class=\"headerlink\" title=\"使用客户端认证保护Api\"></a>使用客户端认证保护Api</h4><p>此博客介绍了使用IdentityServer保护API的最基本场景.<br>在这种情况下,我们将定义一个API和要访问它的客户端.客户端将在IdentityServer上请求访问令牌,并使用它来访问API.</p><h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>先交代一下需要用的到包以及版本</p><ul><li>.Net Core 3.0.0</li><li>IdentityServer4.AccessTokenValidation 3.0.1</li><li>IdentityServer4 3.0.2</li><li>IdentityModel 4.0.0</li></ul><h4 id=\"IdentityServerCenter\"><a href=\"#IdentityServerCenter\" class=\"headerlink\" title=\"IdentityServerCenter\"></a>IdentityServerCenter</h4><p>这是一个ASP.NET Core Web Api项目,认证服务中心,主要用为Token的发放,引用IdentityServer4包</p>","more":"<h5 id=\"Config-cs\"><a href=\"#Config-cs\" class=\"headerlink\" title=\"Config.cs\"></a>Config.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Config</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;ApiResource&gt; <span class=\"title\">GetResources</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> List&lt;ApiResource&gt;()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ApiResource(<span class=\"string\">\"api\"</span>, <span class=\"string\">\"My Api\"</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;Client&gt; <span class=\"title\">GetClients</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> List&lt;Client&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Client()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ClientId = <span class=\"string\">\"client\"</span>,</span><br><span class=\"line\">                AllowedGrantTypes = GrantTypes.ClientCredentials,</span><br><span class=\"line\">                ClientSecrets = <span class=\"keyword\">new</span> List&lt;Secret&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Secret(<span class=\"string\">\"secret\"</span>.Sha256())</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                AllowedScopes = &#123;<span class=\"string\">\"api\"</span>&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Configuration = configuration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        services.AddIdentityServer()</span><br><span class=\"line\">            .AddDeveloperSigningCredential()</span><br><span class=\"line\">            .AddInMemoryApiResources(Config.GetResources())</span><br><span class=\"line\">            .AddInMemoryClients(Config.GetClients());</span><br><span class=\"line\">        services.AddControllers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        app.UseHttpsRedirection();</span><br><span class=\"line\">        app.UseIdentityServer();</span><br><span class=\"line\">        app.UseRouting();</span><br><span class=\"line\">        app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            endpoints.MapControllers();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过查看launchsettings.json,获知和修改项目运行时的端口.</p><!-- rebuild by neat -->"},{"title":".Net Core Ocelot","date":"2018-03-29T10:15:26.000Z","_content":"Ocelot是一个用.Net Core实现并且开源的API网关,它功能强大,包括了：路由、请求聚合、服务发现、认证、鉴权、限流熔断，并内置了负载均衡器与Service Fabric、Butterfly Tracing集成。\n<!--more-->\n##### 安装Ocelot\n通过nuget安装Ocelot\n```cs\nInstall-Package Ocelot\n```\n\n##### 配置\nOcelot.json\n最基本的配置信息\n```cs\n{\n    \"ReRoutes\":[],\n    \"GlobalConfiguration\":{\n        \"BaseUrl\":\"https://chcaty.com\"\n    }\n}\n```\n\n将配置文件加入Asp.Net Core Configuration\n```cs\npublic static IWebHost BuildWebHost(string[] args) => WebHost.CreateDefaultBuilder(args).ConfigureAppConfiguration((hostingContext,builder) => {\n    builder.SetBasePath(hostingContext.HostingEnvironment.ContentRootPath).AddJsonFile(\"Ocelot.json\");\n}).UseStartUp<StartUp>().Build();\n```\n\n配置依赖注入和中间件\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddOcelot();\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if(env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    app.UseOcelot().Wait();\n}\n```\n","source":"_posts/Net-Core-Ocelot.md","raw":"---\ntitle: .Net Core Ocelot\ndate: 2018-03-29 18:15:26\ncategories: .Net Core\ntags:\n - .Net Core\n - Ocelot\n---\nOcelot是一个用.Net Core实现并且开源的API网关,它功能强大,包括了：路由、请求聚合、服务发现、认证、鉴权、限流熔断，并内置了负载均衡器与Service Fabric、Butterfly Tracing集成。\n<!--more-->\n##### 安装Ocelot\n通过nuget安装Ocelot\n```cs\nInstall-Package Ocelot\n```\n\n##### 配置\nOcelot.json\n最基本的配置信息\n```cs\n{\n    \"ReRoutes\":[],\n    \"GlobalConfiguration\":{\n        \"BaseUrl\":\"https://chcaty.com\"\n    }\n}\n```\n\n将配置文件加入Asp.Net Core Configuration\n```cs\npublic static IWebHost BuildWebHost(string[] args) => WebHost.CreateDefaultBuilder(args).ConfigureAppConfiguration((hostingContext,builder) => {\n    builder.SetBasePath(hostingContext.HostingEnvironment.ContentRootPath).AddJsonFile(\"Ocelot.json\");\n}).UseStartUp<StartUp>().Build();\n```\n\n配置依赖注入和中间件\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddOcelot();\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if(env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    app.UseOcelot().Wait();\n}\n```\n","slug":"Net-Core-Ocelot","published":1,"updated":"2018-03-29T13:47:38.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1ym000ttkuin35lfewt","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>Ocelot是一个用.Net Core实现并且开源的API网关,它功能强大,包括了：路由、请求聚合、服务发现、认证、鉴权、限流熔断，并内置了负载均衡器与Service Fabric、Butterfly Tracing集成。<br><a id=\"more\"></a></p><h5 id=\"安装Ocelot\"><a href=\"#安装Ocelot\" class=\"headerlink\" title=\"安装Ocelot\"></a>安装Ocelot</h5><p>通过nuget安装Ocelot<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package Ocelot</span><br></pre></td></tr></table></figure><p></p><h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><p>Ocelot.json<br>最基本的配置信息<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"ReRoutes\"</span>:[],</span><br><span class=\"line\">    <span class=\"string\">\"GlobalConfiguration\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"BaseUrl\"</span>:<span class=\"string\">\"https://chcaty.com\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>将配置文件加入Asp.Net Core Configuration<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHost <span class=\"title\">BuildWebHost</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span>=&gt; WebHost.CreateDefaultBuilder(args).ConfigureAppConfiguration((hostingContext,builder) =&gt; &#123;</span><br><span class=\"line\">    builder.SetBasePath(hostingContext.HostingEnvironment.ContentRootPath).AddJsonFile(<span class=\"string\">\"Ocelot.json\"</span>);</span><br><span class=\"line\">&#125;).UseStartUp&lt;StartUp&gt;().Build();</span><br></pre></td></tr></table></figure><p></p><p>配置依赖注入和中间件<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddOcelot();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    app.UseOcelot().Wait();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>Ocelot是一个用.Net Core实现并且开源的API网关,它功能强大,包括了：路由、请求聚合、服务发现、认证、鉴权、限流熔断，并内置了负载均衡器与Service Fabric、Butterfly Tracing集成。<br>","more":"</p><h5 id=\"安装Ocelot\"><a href=\"#安装Ocelot\" class=\"headerlink\" title=\"安装Ocelot\"></a>安装Ocelot</h5><p>通过nuget安装Ocelot<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package Ocelot</span><br></pre></td></tr></table></figure><p></p><h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><p>Ocelot.json<br>最基本的配置信息<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"ReRoutes\"</span>:[],</span><br><span class=\"line\">    <span class=\"string\">\"GlobalConfiguration\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"BaseUrl\"</span>:<span class=\"string\">\"https://chcaty.com\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>将配置文件加入Asp.Net Core Configuration<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHost <span class=\"title\">BuildWebHost</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span>=&gt; WebHost.CreateDefaultBuilder(args).ConfigureAppConfiguration((hostingContext,builder) =&gt; &#123;</span><br><span class=\"line\">    builder.SetBasePath(hostingContext.HostingEnvironment.ContentRootPath).AddJsonFile(<span class=\"string\">\"Ocelot.json\"</span>);</span><br><span class=\"line\">&#125;).UseStartUp&lt;StartUp&gt;().Build();</span><br></pre></td></tr></table></figure><p></p><p>配置依赖注入和中间件<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddOcelot();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    app.UseOcelot().Wait();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":".Net Core 使用swagger进行API接口文档管理","date":"2018-03-11T14:20:31.000Z","_content":"##### 什么是Swagger\nSwagger可以从不同的代码中,根据注释生成API信息,swagger拥有强大的社区,并且对于各种语言都支持良好,有很多的工具可以通过swagger生成的文件生成API文档\n<!--more-->\n\n##### .Net Core中使用\n.Net Core中使用,首先要用nuget引用Swashbuckle.AspNetCore,在startup.cs中加入如下代码\n\n###### Startup.cs\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n    services.AddSwaggerGen(c => \n    {\n        c.SwaggerDoc(\"v1\", new Info { Title = \"Hello\", Version = \"v1\" });\n        var basePath = PlatformServices.Default.Application.ApplicationBasePath;\n        var xmlPath = Path.Combine(basePath, \"WebApplication2.xml\");\n        c.IncludeXmlComments(xmlPath);\n    });\n    services.AddMvcCore().AddApiExplorer();\n}\n\npublic void Configure(IApplicationBuilderapp, IHostingEnvironment env)\n{\n    if(env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    app.UseMvcWithDefaultRoute();\n    app.UseSwagger(c =>\n    {\n\n    });\n    app.UseSwaggerUI(c =>\n    {\n        c.ShowExtensions();\n        c.VaildatorUrl(null);\n\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"test V1\");\n    });\n}\n```\n\n以上部分为加载swagger的代码,位于startup.cs中,下面是controller代码\n###### ValuesController.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace WebApplication2.Controllers\n{\n    /// <summary>\n    /// 测试信息\n    /// </summmary>\n    /// <returns></returns>\n    [Route(\"api/[controller]/[action]\")]\n    public class ValuesController : Controller\n    {\n        /// <summary>\n        /// 获得所有信息\n        /// </summmary>\n        /// <returns></returns>\n        [HttpGet]\n        public IEnumercble<string> Get()\n        {\n            return new string[] { \"value1\", \"value2\" };\n        }\n\n        /// <summary>\n        /// 根据ID获取信息\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        /// <returns></returns>\n        // Get api/values/5\n        [HttpGet(\"{id}\")]\n        public string Get(int id)\n        {\n            return \"value\";\n        }\n\n        /// <summary>\n        /// Post数据信息\n        /// </summmary>\n        /// <param name=\"value\"></param>\n        // POST api/values\n        [HttpPost]\n        public void Post([FromBody]string value)\n        {\n\n        }\n\n        /// <summary>\n        /// 根据ID put数据\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"value\"></param>\n        // PUT api/values/5\n        [HttpPut(\"{id}\")]\n        public void Put(int id, [FromBody]string value)\n        {\n\n        }\n\n        /// <summary>\n        /// 根据ID删除数据\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        // DELETE api/values/5\n        [HttpDelete(\"{id}\")]\n        public void Delete(int id)\n        {\n\n        }\n\n        /// <summary>\n        /// 复杂数据操作\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        [HttpPost]\n        public namevalue test(namevalue _info)\n        {\n            return _info;\n        }\n    }\n\n    public class namevalue\n    {\n        /// <summary>\n        /// name的信息\n        /// </summmary>\n        public String name { get; set; }\n\n        /// <summary>\n        /// value的信息\n        /// </summmary>\n        public String value { get; set; }\n    }\n}\n```\n\n","source":"_posts/Net-Core-使用swagger进行API接口文档管理.md","raw":"---\ntitle: .Net Core 使用swagger进行API接口文档管理\ndate: 2018-03-11 22:20:31\ncategories: .Net Core\ntags:\n - .Net Core\n - WebApi\n---\n##### 什么是Swagger\nSwagger可以从不同的代码中,根据注释生成API信息,swagger拥有强大的社区,并且对于各种语言都支持良好,有很多的工具可以通过swagger生成的文件生成API文档\n<!--more-->\n\n##### .Net Core中使用\n.Net Core中使用,首先要用nuget引用Swashbuckle.AspNetCore,在startup.cs中加入如下代码\n\n###### Startup.cs\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n    services.AddSwaggerGen(c => \n    {\n        c.SwaggerDoc(\"v1\", new Info { Title = \"Hello\", Version = \"v1\" });\n        var basePath = PlatformServices.Default.Application.ApplicationBasePath;\n        var xmlPath = Path.Combine(basePath, \"WebApplication2.xml\");\n        c.IncludeXmlComments(xmlPath);\n    });\n    services.AddMvcCore().AddApiExplorer();\n}\n\npublic void Configure(IApplicationBuilderapp, IHostingEnvironment env)\n{\n    if(env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    app.UseMvcWithDefaultRoute();\n    app.UseSwagger(c =>\n    {\n\n    });\n    app.UseSwaggerUI(c =>\n    {\n        c.ShowExtensions();\n        c.VaildatorUrl(null);\n\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"test V1\");\n    });\n}\n```\n\n以上部分为加载swagger的代码,位于startup.cs中,下面是controller代码\n###### ValuesController.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace WebApplication2.Controllers\n{\n    /// <summary>\n    /// 测试信息\n    /// </summmary>\n    /// <returns></returns>\n    [Route(\"api/[controller]/[action]\")]\n    public class ValuesController : Controller\n    {\n        /// <summary>\n        /// 获得所有信息\n        /// </summmary>\n        /// <returns></returns>\n        [HttpGet]\n        public IEnumercble<string> Get()\n        {\n            return new string[] { \"value1\", \"value2\" };\n        }\n\n        /// <summary>\n        /// 根据ID获取信息\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        /// <returns></returns>\n        // Get api/values/5\n        [HttpGet(\"{id}\")]\n        public string Get(int id)\n        {\n            return \"value\";\n        }\n\n        /// <summary>\n        /// Post数据信息\n        /// </summmary>\n        /// <param name=\"value\"></param>\n        // POST api/values\n        [HttpPost]\n        public void Post([FromBody]string value)\n        {\n\n        }\n\n        /// <summary>\n        /// 根据ID put数据\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"value\"></param>\n        // PUT api/values/5\n        [HttpPut(\"{id}\")]\n        public void Put(int id, [FromBody]string value)\n        {\n\n        }\n\n        /// <summary>\n        /// 根据ID删除数据\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        // DELETE api/values/5\n        [HttpDelete(\"{id}\")]\n        public void Delete(int id)\n        {\n\n        }\n\n        /// <summary>\n        /// 复杂数据操作\n        /// </summmary>\n        /// <param name=\"id\"></param>\n        [HttpPost]\n        public namevalue test(namevalue _info)\n        {\n            return _info;\n        }\n    }\n\n    public class namevalue\n    {\n        /// <summary>\n        /// name的信息\n        /// </summmary>\n        public String name { get; set; }\n\n        /// <summary>\n        /// value的信息\n        /// </summmary>\n        public String value { get; set; }\n    }\n}\n```\n\n","slug":"Net-Core-使用swagger进行API接口文档管理","published":1,"updated":"2018-03-11T16:00:54.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1ym000utkuirj7uhcdo","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"什么是Swagger\"><a href=\"#什么是Swagger\" class=\"headerlink\" title=\"什么是Swagger\"></a>什么是Swagger</h5><p>Swagger可以从不同的代码中,根据注释生成API信息,swagger拥有强大的社区,并且对于各种语言都支持良好,有很多的工具可以通过swagger生成的文件生成API文档<br><a id=\"more\"></a></p><h5 id=\"Net-Core中使用\"><a href=\"#Net-Core中使用\" class=\"headerlink\" title=\".Net Core中使用\"></a>.Net Core中使用</h5><p>.Net Core中使用,首先要用nuget引用Swashbuckle.AspNetCore,在startup.cs中加入如下代码</p><h6 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\">    services.AddSwaggerGen(c =&gt; </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> Info &#123; Title = <span class=\"string\">\"Hello\"</span>, Version = <span class=\"string\">\"v1\"</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> basePath = PlatformServices.Default.Application.ApplicationBasePath;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlPath = Path.Combine(basePath, <span class=\"string\">\"WebApplication2.xml\"</span>);</span><br><span class=\"line\">        c.IncludeXmlComments(xmlPath);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    services.AddMvcCore().AddApiExplorer();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilderapp, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    app.UseSwagger(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.ShowExtensions();</span><br><span class=\"line\">        c.VaildatorUrl(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        c.SwaggerEndpoint(<span class=\"string\">\"/swagger/v1/swagger.json\"</span>, <span class=\"string\">\"test V1\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>以上部分为加载swagger的代码,位于startup.cs中,下面是controller代码</p><h6 id=\"ValuesController-cs\"><a href=\"#ValuesController-cs\" class=\"headerlink\" title=\"ValuesController.cs\"></a>ValuesController.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WebApplication2.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 测试信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]/[action]\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValuesController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获得所有信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumercble&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] &#123; <span class=\"string\">\"value1\"</span>, <span class=\"string\">\"value2\"</span> &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID获取信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// Get api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"value\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Post数据信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// POST api/values</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromBody]<span class=\"keyword\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID put数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// PUT api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPut(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Put</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, [FromBody]<span class=\"keyword\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID删除数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// DELETE api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpDelete(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Delete</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 复杂数据操作</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> namevalue <span class=\"title\">test</span>(<span class=\"params\">namevalue _info</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _info;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">namevalue</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> name的信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> value的信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"keyword\">value</span> &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"什么是Swagger\"><a href=\"#什么是Swagger\" class=\"headerlink\" title=\"什么是Swagger\"></a>什么是Swagger</h5><p>Swagger可以从不同的代码中,根据注释生成API信息,swagger拥有强大的社区,并且对于各种语言都支持良好,有很多的工具可以通过swagger生成的文件生成API文档<br>","more":"</p><h5 id=\"Net-Core中使用\"><a href=\"#Net-Core中使用\" class=\"headerlink\" title=\".Net Core中使用\"></a>.Net Core中使用</h5><p>.Net Core中使用,首先要用nuget引用Swashbuckle.AspNetCore,在startup.cs中加入如下代码</p><h6 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\">    services.AddSwaggerGen(c =&gt; </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> Info &#123; Title = <span class=\"string\">\"Hello\"</span>, Version = <span class=\"string\">\"v1\"</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> basePath = PlatformServices.Default.Application.ApplicationBasePath;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlPath = Path.Combine(basePath, <span class=\"string\">\"WebApplication2.xml\"</span>);</span><br><span class=\"line\">        c.IncludeXmlComments(xmlPath);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    services.AddMvcCore().AddApiExplorer();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilderapp, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">    app.UseSwagger(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.ShowExtensions();</span><br><span class=\"line\">        c.VaildatorUrl(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        c.SwaggerEndpoint(<span class=\"string\">\"/swagger/v1/swagger.json\"</span>, <span class=\"string\">\"test V1\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>以上部分为加载swagger的代码,位于startup.cs中,下面是controller代码</p><h6 id=\"ValuesController-cs\"><a href=\"#ValuesController-cs\" class=\"headerlink\" title=\"ValuesController.cs\"></a>ValuesController.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WebApplication2.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 测试信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]/[action]\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValuesController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获得所有信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumercble&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] &#123; <span class=\"string\">\"value1\"</span>, <span class=\"string\">\"value2\"</span> &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID获取信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// Get api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"value\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Post数据信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// POST api/values</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Post</span>(<span class=\"params\">[FromBody]<span class=\"keyword\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID put数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// PUT api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPut(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Put</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, [FromBody]<span class=\"keyword\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据ID删除数据</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\">// DELETE api/values/5</span></span><br><span class=\"line\">        [<span class=\"meta\">HttpDelete(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Delete</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 复杂数据操作</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> namevalue <span class=\"title\">test</span>(<span class=\"params\">namevalue _info</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _info;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">namevalue</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> name的信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> value的信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"keyword\">value</span> &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net Core 修改IOC为Autofac","date":"2018-03-17T01:42:34.000Z","_content":"本文主要讲解如何更换Asp.Net Core的IOC为Autofac\n<!--more-->\n\n##### 安装Autofac\n在Nuget上，找到Autofac和Autofac.Extensions.DependencyInjection，直接安装。\n\n##### 创建容器并注册依赖\n修改Startup.cs中的代码，主要ConfigureServices(IServiceCollection services)方法。其中该方法默认的返回值为void，这里需要修改返回值为IServiceProvider。代码如下：\n```cs\npublic IContainer ApplicationContainer { get; private set; }\n// ConfigureServices is where you register dependencies. This gets\n// called by the runtime before the Configure method, below.\npublic IServiceProvider ConfigureServices(IServiceCollection services)\n{\n    // Add services to the collection.\n    services.AddMvc();\n\n    // Create the container builder.\n    var builder = new ContainerBuilder();\n\n    // Register dependencies, populate the services from\n    // the collection, and build the container. If you want\n    // to dispose of the container at the end of the app,\n    // be sure to keep a reference to it as a property or field.\n    builder.RegisterType<MyType>().As<IMyType>();\n    builder.Populate(services);\n    this.ApplicationContainer = builder.Build();\n\n    // Create the IServiceProvider based on the container.\n    return new AutofacServiceProvider(this.ApplicationContainer);\n}\n```","source":"_posts/Net-Core-修改IOC为Autofac.md","raw":"---\ntitle: .Net Core 修改IOC为Autofac\ndate: 2018-03-17 09:42:34\ncategories: .Net Core\ntags:\n - .Net Core\n - Autofac\n---\n本文主要讲解如何更换Asp.Net Core的IOC为Autofac\n<!--more-->\n\n##### 安装Autofac\n在Nuget上，找到Autofac和Autofac.Extensions.DependencyInjection，直接安装。\n\n##### 创建容器并注册依赖\n修改Startup.cs中的代码，主要ConfigureServices(IServiceCollection services)方法。其中该方法默认的返回值为void，这里需要修改返回值为IServiceProvider。代码如下：\n```cs\npublic IContainer ApplicationContainer { get; private set; }\n// ConfigureServices is where you register dependencies. This gets\n// called by the runtime before the Configure method, below.\npublic IServiceProvider ConfigureServices(IServiceCollection services)\n{\n    // Add services to the collection.\n    services.AddMvc();\n\n    // Create the container builder.\n    var builder = new ContainerBuilder();\n\n    // Register dependencies, populate the services from\n    // the collection, and build the container. If you want\n    // to dispose of the container at the end of the app,\n    // be sure to keep a reference to it as a property or field.\n    builder.RegisterType<MyType>().As<IMyType>();\n    builder.Populate(services);\n    this.ApplicationContainer = builder.Build();\n\n    // Create the IServiceProvider based on the container.\n    return new AutofacServiceProvider(this.ApplicationContainer);\n}\n```","slug":"Net-Core-修改IOC为Autofac","published":1,"updated":"2018-03-17T01:47:55.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yn000vtkuiq5d5gp5f","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>本文主要讲解如何更换Asp.Net Core的IOC为Autofac<br><a id=\"more\"></a></p><h5 id=\"安装Autofac\"><a href=\"#安装Autofac\" class=\"headerlink\" title=\"安装Autofac\"></a>安装Autofac</h5><p>在Nuget上，找到Autofac和Autofac.Extensions.DependencyInjection，直接安装。</p><h5 id=\"创建容器并注册依赖\"><a href=\"#创建容器并注册依赖\" class=\"headerlink\" title=\"创建容器并注册依赖\"></a>创建容器并注册依赖</h5><p>修改Startup.cs中的代码，主要ConfigureServices(IServiceCollection services)方法。其中该方法默认的返回值为void，这里需要修改返回值为IServiceProvider。代码如下：<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IContainer ApplicationContainer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">// ConfigureServices is where you register dependencies. This gets</span></span><br><span class=\"line\"><span class=\"comment\">// called by the runtime before the Configure method, below.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IServiceProvider <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Add services to the collection.</span></span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create the container builder.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ContainerBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register dependencies, populate the services from</span></span><br><span class=\"line\">    <span class=\"comment\">// the collection, and build the container. If you want</span></span><br><span class=\"line\">    <span class=\"comment\">// to dispose of the container at the end of the app,</span></span><br><span class=\"line\">    <span class=\"comment\">// be sure to keep a reference to it as a property or field.</span></span><br><span class=\"line\">    builder.RegisterType&lt;MyType&gt;().As&lt;IMyType&gt;();</span><br><span class=\"line\">    builder.Populate(services);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ApplicationContainer = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create the IServiceProvider based on the container.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutofacServiceProvider(<span class=\"keyword\">this</span>.ApplicationContainer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>本文主要讲解如何更换Asp.Net Core的IOC为Autofac<br>","more":"</p><h5 id=\"安装Autofac\"><a href=\"#安装Autofac\" class=\"headerlink\" title=\"安装Autofac\"></a>安装Autofac</h5><p>在Nuget上，找到Autofac和Autofac.Extensions.DependencyInjection，直接安装。</p><h5 id=\"创建容器并注册依赖\"><a href=\"#创建容器并注册依赖\" class=\"headerlink\" title=\"创建容器并注册依赖\"></a>创建容器并注册依赖</h5><p>修改Startup.cs中的代码，主要ConfigureServices(IServiceCollection services)方法。其中该方法默认的返回值为void，这里需要修改返回值为IServiceProvider。代码如下：<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IContainer ApplicationContainer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">// ConfigureServices is where you register dependencies. This gets</span></span><br><span class=\"line\"><span class=\"comment\">// called by the runtime before the Configure method, below.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IServiceProvider <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Add services to the collection.</span></span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create the container builder.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ContainerBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register dependencies, populate the services from</span></span><br><span class=\"line\">    <span class=\"comment\">// the collection, and build the container. If you want</span></span><br><span class=\"line\">    <span class=\"comment\">// to dispose of the container at the end of the app,</span></span><br><span class=\"line\">    <span class=\"comment\">// be sure to keep a reference to it as a property or field.</span></span><br><span class=\"line\">    builder.RegisterType&lt;MyType&gt;().As&lt;IMyType&gt;();</span><br><span class=\"line\">    builder.Populate(services);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ApplicationContainer = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create the IServiceProvider based on the container.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutofacServiceProvider(<span class=\"keyword\">this</span>.ApplicationContainer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":".Net Core-从零开始搭建框架(一)","date":"2019-02-21T15:27:08.000Z","_content":"之前一直想学习一下用Vs Code开发,趁着最近有做一个小项目的想法,顺路学习一下\n<!--more-->\n#### Vs Code 技巧\n##### 推荐的Vs Code插件\n1. vscode-solution-explorer //解决方案\n2. C#\n3. C# Extensions\n4. C# XML Documentation Comments //三行注释\n\n##### 常用的命令\n1. F1 或 Ctrl+Shift+P: 打开命令面板\n2. Ctrl+` 打开命令行\n3. Shift+Alt+F 代码格式化\n4. Ctrl+B 侧边栏显/隐\n5. Ctrl+Shift+E 显示资源管理器\n6. Ctrl_Tab 切换文件\n\n##### Vs Code 运行生成XML注释文件\n先在对应的项目csproj文件里节点PropertyGroup内添加代码：\n``` cs\n<GenerateDocumentationFile>true</GenerateDocumentationFile>\n<NoWarn>$(NoWarn);1591<Warn>\n```\n\n#### 创建项目和集成Swagger\n先创建一个空白的解决方案,再往里面添加对应的项目,先添加一个ASP.NET CORE WEBAPI项目,名称为Caty.Core.Api.通过vscode-solution-explorer插件,这一步将十分简单,就像在vs中一样.\n\n##### 引入swagger插件\n在终端控制台输入命令:dotnet add YourProjectName.csproj package Swashbuckle.AspNetCore\n\n##### 要增加的引用\n1. using System.IO;\n2. using Swashbuckle.AspNetCore.Swagger;\n3. using System.Reflection;\n\n##### 添加配置和Swagger中间件\n1. 打开Startup.cs类，编辑ConfigureServices类\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n\n    #region Swagger\n    services.AddSwaggerGen(c =>{\n        c.SwaggerDoc(\"v1\", new Info{\n            Version = \"v1.0.0\",\n            Title = \"Core Api\",\n            Description = \"基础框架\",\n            TermsOfService = \"None\",\n            Contact =new Swashbuckle.AspNetCore.Swagger.Contact{ Name = \"Caty\", Email = \"1120873075@qq.com\", Url = \"https://chcaty.github.io/\" }\n        });\n        //添加读取注释服务(需在生成时输出xml注释文件)\n        var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";  \n        var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); \n        c.IncludeXmlComments(xmlPath,true);//true表示显示控制器注释\n\n        //添加header验证信息\n        var security  = new Dictionary<string,IEnumerable<string>>{ {\"Admin\",new string[] {} },};\n        c.AddSecurityRequirement(security);\n        c.AddSecurityDefinition(\"Admin\",new ApiKeyScheme\n        {\n            Description =  \"JWT授权 参数结构: \\\"Authorization: Admin {token}\\\"\",\n            Name = \"Authorization\",//默认的参数名\n            In = \"header\",//存放信息的位置(请求头中)\n            Type =\"apiKey\"\n        });\n    }) ;\n    #endregion\n}\n```\n\n2. 编辑Configure类\n```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    else\n    {\n        app.UseHsts();\n    }\n\n    app.UseHttpsRedirection();\n    app.UseMvc();\n\n    #region Swagger \n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\",\"Api Help V1\");\n    });\n    #endregion\n}\n```\n\n#### 在框架中引入Dapper\n在解决方案中添加Business,Service,Entity,Common 四个类库\n##### Entity类库创建User实体类\n```cs\nusing System;\nnamespace Caty.Core.Entity\n{\n    public class User\n    {\n        /// <summary>\n        /// 用户Id\n        /// </summary>\n        public int Id { get; set; }\n\n        /// <summary>\n        /// 用户名\n        /// </summary>\n        public string UserName { get; set; }\n\n        /// <summary>\n        /// 密码\n        /// </summary>\n        public string Password { get; set; }\n\n        /// <summary>\n        /// 性别（0女，1男）\n        /// </summary>\n        public bool Gender { get; set; }\n\n        /// <summary>\n        /// 出生年月日\n        /// </summary>\n        public DateTime Birthday { get; set; }\n\n        /// <summary>\n        /// 创建人\n        /// </summary>\n        public int CreateUserId { get; set; }\n\n        /// <summary>\n        /// 创建日期\n        /// </summary>\n        public DateTime CreateDate { get; set; }\n\n        /// <summary>\n        /// 更新人\n        /// </summary>\n        public int UpdateUserId { get; set; }\n\n        /// <summary>\n        /// 更新日期\n        /// </summary>\n        public DateTime UpdateDate { get; set; }\n\n        /// <summary>\n        /// 删除标志\n        /// </summary>\n        public int IsDeleted { get; set; }\n    }\n}\n```\n\n##### 在Common中设置连接字符串和DbConnection\n```cs\nusing System;\nusing System.Data;\nusing System.Data.SqlClient;\n\nnamespace Caty.Core.Common\n{\n    public class DataBaseConfig\n    {\n        #region SqlServer连接配置\n        private static string DefaultSqlConnectionString =  @\"Data Source=.;Initial Catalog=Light;User ID=sa;Password=sa;\";\n        public static IDbConnection GetSqlConnection(string sqlConnectionString = null)\n        {\n            if(string.IsNullOrWhiteSpace(sqlConnectionString))\n            {\n                sqlConnectionString = DefaultSqlConnectionString;\n            }\n            IDbConnection conn = new SqlConnection(sqlConnectionString);\n            conn.Open();\n            return conn;\n        }\n        #endregion\n    }\n}\n```\n\n##### 使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它\n定义\n```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace Caty.Core.Interface\n{\n    public interface IBaseService<T> where T:class\n    {\n        /// <summary>\n        /// 添加一个实体\n        /// </summary>\n        /// <param name=\"entity\">实体类型</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        bool CreateEntity(T entity,string connectionString = null);\n\n        /// <summary>\n        /// 根据主键Id获得一个实体\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        T RetriveOneEntityById(int id,string connectionString = null);\n\n        /// <summary>\n        /// 获得全部实体\n        /// </summary>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        IEnumerable<T> RetriveAllEntity(string connectionString = null);\n\n        /// <summary>\n        /// 修改一个实体\n        /// </summary>\n        /// <param name=\"entity\">要修改的实体</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        bool UpdateEntity(T entity,string connectionString = null);\n\n        /// <summary>\n        /// 根据主键Id删除一个实体\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"connectionString\"></param>\n        /// <returns></returns>\n        bool DeleteEntityById(int id,string connectionString = null);\n    }\n}\n```\n继承\n```cs\nusing System;\nusing Caty.Core.Entity;\n\nnamespace Caty.Core.Interface \n{\n    public partial  interface IUserService :IBaseService<User>\n    {\n        \n    }\n}\n```\n\n##### 实现IUserRepository定义的接口\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing Caty.Core.Common;\nusing Caty.Core.Entity;\nusing Caty.Core.Interface;\nusing Dapper;\n\nnamespace Caty.Core.Implement\n{\n    /// <summary>\n    /// 用户仓储\n    /// </summary>\n    public class UserService : IUserService\n    {\n        /// <summary>\n        /// 创建一个用户\n        /// </summary>\n        /// <param name=\"entity\">用户</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool CreateEntity(User entity, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string insertSql = @\"INSERT INTO [dbo].[User]\n                                             ([UserName]\n                                             ,[Password]\n                                             ,[Gender]\n                                             ,[Birthday]\n                                             ,[CreateUserId]\n                                             ,[CreateDate]\n                                             ,[UpdateUserId]\n                                             ,[UpdateDate]\n                                             ,[IsDeleted])\n                                       VALUES\n                                             (@UserName\n                                             ,@Password\n                                             ,@Gender\n                                             ,@Birthday\n                                             ,@CreateUserId\n                                             ,@CreateDate\n                                             ,@UpdateUserId\n                                             ,@UpdateDate\n                                             ,@IsDeleted)\";\n                return conn.Execute(insertSql, entity) > 0;\n            }\n        }\n\n        /// <summary>\n        /// 根据主键Id删除一个用户\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool DeleteEntityById(int id, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string deleteSql = @\"DELETE FROM [dbo].[User]\n                                              WHERE Id = @Id\";\n                return conn.Execute(deleteSql, new { Id = id }) > 0;\n            }\n        }\n\n        /// <summary>\n        /// 获取所有用户\n        /// </summary>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public IEnumerable<User> RetriveAllEntity(string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string querySql = @\"SELECT [Id]\n                                            ,[UserName]\n                                            ,[Password]\n                                            ,[Gender]\n                                            ,[Birthday]\n                                            ,[CreateUserId]\n                                            ,[CreateDate]\n                                            ,[UpdateUserId]\n                                            ,[UpdateDate]\n                                            ,[IsDeleted]\n                                        FROM [dbo].[User]\";\n                return conn.Query<User>(querySql);\n            }\n        }\n\n        /// <summary>\n        /// 根据主键Id获取一个用户\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public User RetriveOneEntityById(int id, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string querySql = @\"SELECT [Id]\n                                           ,[UserName]\n                                            ,[Password]\n                                            ,[Gender]\n                                            ,[Birthday]\n                                            ,[CreateUserId]\n                                            ,[CreateDate]\n                                            ,[UpdateUserId]\n                                           ,[UpdateDate]\n                                           ,[IsDeleted]\n                                       FROM [dbo].[User]\n                                     WHERE Id = @Id\";\n                return conn.QueryFirstOrDefault<User>(querySql, new { Id = id });\n            }\n        }\n        /// <summary>\n        /// 修改一个用户\n        /// </summary>\n        /// <param name=\"entity\">要修改的用户</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool UpdateEntity(User entity, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string updateSql = @\"UPDATE [dbo].[User]\n                                    SET [UserName] = @UserName\n                                    ,[Password] = @Password\n                                    ,[Gender] = @Gender\n                                    ,[Birthday] = @Birthday\n                                    ,[UpdateUserId] = @UpdateUserId\n                                    ,[UpdateDate] = @UpdateDate\n                                    ,[IsDeleted] = @IsDeleted\n                                    WHERE Id = @Id\";\n                return conn.Execute(updateSql, entity) > 0;\n            }\n        }\n    }\n}\n```\n未完待续....","source":"_posts/Net-Core-从零开始搭建框架(一).md","raw":"---\ntitle: .Net Core-从零开始搭建框架(一)\ndate: 2019-02-21 23:27:08\ncategories: .Net Core\ntags:\n - .Net Core\n - Swagger\n - 框架\n - Dapper\n---\n之前一直想学习一下用Vs Code开发,趁着最近有做一个小项目的想法,顺路学习一下\n<!--more-->\n#### Vs Code 技巧\n##### 推荐的Vs Code插件\n1. vscode-solution-explorer //解决方案\n2. C#\n3. C# Extensions\n4. C# XML Documentation Comments //三行注释\n\n##### 常用的命令\n1. F1 或 Ctrl+Shift+P: 打开命令面板\n2. Ctrl+` 打开命令行\n3. Shift+Alt+F 代码格式化\n4. Ctrl+B 侧边栏显/隐\n5. Ctrl+Shift+E 显示资源管理器\n6. Ctrl_Tab 切换文件\n\n##### Vs Code 运行生成XML注释文件\n先在对应的项目csproj文件里节点PropertyGroup内添加代码：\n``` cs\n<GenerateDocumentationFile>true</GenerateDocumentationFile>\n<NoWarn>$(NoWarn);1591<Warn>\n```\n\n#### 创建项目和集成Swagger\n先创建一个空白的解决方案,再往里面添加对应的项目,先添加一个ASP.NET CORE WEBAPI项目,名称为Caty.Core.Api.通过vscode-solution-explorer插件,这一步将十分简单,就像在vs中一样.\n\n##### 引入swagger插件\n在终端控制台输入命令:dotnet add YourProjectName.csproj package Swashbuckle.AspNetCore\n\n##### 要增加的引用\n1. using System.IO;\n2. using Swashbuckle.AspNetCore.Swagger;\n3. using System.Reflection;\n\n##### 添加配置和Swagger中间件\n1. 打开Startup.cs类，编辑ConfigureServices类\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n\n    #region Swagger\n    services.AddSwaggerGen(c =>{\n        c.SwaggerDoc(\"v1\", new Info{\n            Version = \"v1.0.0\",\n            Title = \"Core Api\",\n            Description = \"基础框架\",\n            TermsOfService = \"None\",\n            Contact =new Swashbuckle.AspNetCore.Swagger.Contact{ Name = \"Caty\", Email = \"1120873075@qq.com\", Url = \"https://chcaty.github.io/\" }\n        });\n        //添加读取注释服务(需在生成时输出xml注释文件)\n        var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";  \n        var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); \n        c.IncludeXmlComments(xmlPath,true);//true表示显示控制器注释\n\n        //添加header验证信息\n        var security  = new Dictionary<string,IEnumerable<string>>{ {\"Admin\",new string[] {} },};\n        c.AddSecurityRequirement(security);\n        c.AddSecurityDefinition(\"Admin\",new ApiKeyScheme\n        {\n            Description =  \"JWT授权 参数结构: \\\"Authorization: Admin {token}\\\"\",\n            Name = \"Authorization\",//默认的参数名\n            In = \"header\",//存放信息的位置(请求头中)\n            Type =\"apiKey\"\n        });\n    }) ;\n    #endregion\n}\n```\n\n2. 编辑Configure类\n```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    else\n    {\n        app.UseHsts();\n    }\n\n    app.UseHttpsRedirection();\n    app.UseMvc();\n\n    #region Swagger \n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\",\"Api Help V1\");\n    });\n    #endregion\n}\n```\n\n#### 在框架中引入Dapper\n在解决方案中添加Business,Service,Entity,Common 四个类库\n##### Entity类库创建User实体类\n```cs\nusing System;\nnamespace Caty.Core.Entity\n{\n    public class User\n    {\n        /// <summary>\n        /// 用户Id\n        /// </summary>\n        public int Id { get; set; }\n\n        /// <summary>\n        /// 用户名\n        /// </summary>\n        public string UserName { get; set; }\n\n        /// <summary>\n        /// 密码\n        /// </summary>\n        public string Password { get; set; }\n\n        /// <summary>\n        /// 性别（0女，1男）\n        /// </summary>\n        public bool Gender { get; set; }\n\n        /// <summary>\n        /// 出生年月日\n        /// </summary>\n        public DateTime Birthday { get; set; }\n\n        /// <summary>\n        /// 创建人\n        /// </summary>\n        public int CreateUserId { get; set; }\n\n        /// <summary>\n        /// 创建日期\n        /// </summary>\n        public DateTime CreateDate { get; set; }\n\n        /// <summary>\n        /// 更新人\n        /// </summary>\n        public int UpdateUserId { get; set; }\n\n        /// <summary>\n        /// 更新日期\n        /// </summary>\n        public DateTime UpdateDate { get; set; }\n\n        /// <summary>\n        /// 删除标志\n        /// </summary>\n        public int IsDeleted { get; set; }\n    }\n}\n```\n\n##### 在Common中设置连接字符串和DbConnection\n```cs\nusing System;\nusing System.Data;\nusing System.Data.SqlClient;\n\nnamespace Caty.Core.Common\n{\n    public class DataBaseConfig\n    {\n        #region SqlServer连接配置\n        private static string DefaultSqlConnectionString =  @\"Data Source=.;Initial Catalog=Light;User ID=sa;Password=sa;\";\n        public static IDbConnection GetSqlConnection(string sqlConnectionString = null)\n        {\n            if(string.IsNullOrWhiteSpace(sqlConnectionString))\n            {\n                sqlConnectionString = DefaultSqlConnectionString;\n            }\n            IDbConnection conn = new SqlConnection(sqlConnectionString);\n            conn.Open();\n            return conn;\n        }\n        #endregion\n    }\n}\n```\n\n##### 使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它\n定义\n```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace Caty.Core.Interface\n{\n    public interface IBaseService<T> where T:class\n    {\n        /// <summary>\n        /// 添加一个实体\n        /// </summary>\n        /// <param name=\"entity\">实体类型</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        bool CreateEntity(T entity,string connectionString = null);\n\n        /// <summary>\n        /// 根据主键Id获得一个实体\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        T RetriveOneEntityById(int id,string connectionString = null);\n\n        /// <summary>\n        /// 获得全部实体\n        /// </summary>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        IEnumerable<T> RetriveAllEntity(string connectionString = null);\n\n        /// <summary>\n        /// 修改一个实体\n        /// </summary>\n        /// <param name=\"entity\">要修改的实体</param>\n        /// <param name=\"connectionString\">连接字符串</param>\n        /// <returns></returns>\n        bool UpdateEntity(T entity,string connectionString = null);\n\n        /// <summary>\n        /// 根据主键Id删除一个实体\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"connectionString\"></param>\n        /// <returns></returns>\n        bool DeleteEntityById(int id,string connectionString = null);\n    }\n}\n```\n继承\n```cs\nusing System;\nusing Caty.Core.Entity;\n\nnamespace Caty.Core.Interface \n{\n    public partial  interface IUserService :IBaseService<User>\n    {\n        \n    }\n}\n```\n\n##### 实现IUserRepository定义的接口\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing Caty.Core.Common;\nusing Caty.Core.Entity;\nusing Caty.Core.Interface;\nusing Dapper;\n\nnamespace Caty.Core.Implement\n{\n    /// <summary>\n    /// 用户仓储\n    /// </summary>\n    public class UserService : IUserService\n    {\n        /// <summary>\n        /// 创建一个用户\n        /// </summary>\n        /// <param name=\"entity\">用户</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool CreateEntity(User entity, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string insertSql = @\"INSERT INTO [dbo].[User]\n                                             ([UserName]\n                                             ,[Password]\n                                             ,[Gender]\n                                             ,[Birthday]\n                                             ,[CreateUserId]\n                                             ,[CreateDate]\n                                             ,[UpdateUserId]\n                                             ,[UpdateDate]\n                                             ,[IsDeleted])\n                                       VALUES\n                                             (@UserName\n                                             ,@Password\n                                             ,@Gender\n                                             ,@Birthday\n                                             ,@CreateUserId\n                                             ,@CreateDate\n                                             ,@UpdateUserId\n                                             ,@UpdateDate\n                                             ,@IsDeleted)\";\n                return conn.Execute(insertSql, entity) > 0;\n            }\n        }\n\n        /// <summary>\n        /// 根据主键Id删除一个用户\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool DeleteEntityById(int id, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string deleteSql = @\"DELETE FROM [dbo].[User]\n                                              WHERE Id = @Id\";\n                return conn.Execute(deleteSql, new { Id = id }) > 0;\n            }\n        }\n\n        /// <summary>\n        /// 获取所有用户\n        /// </summary>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public IEnumerable<User> RetriveAllEntity(string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string querySql = @\"SELECT [Id]\n                                            ,[UserName]\n                                            ,[Password]\n                                            ,[Gender]\n                                            ,[Birthday]\n                                            ,[CreateUserId]\n                                            ,[CreateDate]\n                                            ,[UpdateUserId]\n                                            ,[UpdateDate]\n                                            ,[IsDeleted]\n                                        FROM [dbo].[User]\";\n                return conn.Query<User>(querySql);\n            }\n        }\n\n        /// <summary>\n        /// 根据主键Id获取一个用户\n        /// </summary>\n        /// <param name=\"id\">主键Id</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public User RetriveOneEntityById(int id, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string querySql = @\"SELECT [Id]\n                                           ,[UserName]\n                                            ,[Password]\n                                            ,[Gender]\n                                            ,[Birthday]\n                                            ,[CreateUserId]\n                                            ,[CreateDate]\n                                            ,[UpdateUserId]\n                                           ,[UpdateDate]\n                                           ,[IsDeleted]\n                                       FROM [dbo].[User]\n                                     WHERE Id = @Id\";\n                return conn.QueryFirstOrDefault<User>(querySql, new { Id = id });\n            }\n        }\n        /// <summary>\n        /// 修改一个用户\n        /// </summary>\n        /// <param name=\"entity\">要修改的用户</param>\n        /// <param name=\"connectionString\">链接字符串</param>\n        /// <returns></returns>\n        public bool UpdateEntity(User entity, string connectionString = null)\n        {\n            using (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))\n            {\n                string updateSql = @\"UPDATE [dbo].[User]\n                                    SET [UserName] = @UserName\n                                    ,[Password] = @Password\n                                    ,[Gender] = @Gender\n                                    ,[Birthday] = @Birthday\n                                    ,[UpdateUserId] = @UpdateUserId\n                                    ,[UpdateDate] = @UpdateDate\n                                    ,[IsDeleted] = @IsDeleted\n                                    WHERE Id = @Id\";\n                return conn.Execute(updateSql, entity) > 0;\n            }\n        }\n    }\n}\n```\n未完待续....","slug":"Net-Core-从零开始搭建框架(一)","published":1,"updated":"2019-02-22T02:11:55.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej1yo000wtkuigrkyah4v","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>之前一直想学习一下用Vs Code开发,趁着最近有做一个小项目的想法,顺路学习一下<br><a id=\"more\"></a></p><h4 id=\"Vs-Code-技巧\"><a href=\"#Vs-Code-技巧\" class=\"headerlink\" title=\"Vs Code 技巧\"></a>Vs Code 技巧</h4><h5 id=\"推荐的Vs-Code插件\"><a href=\"#推荐的Vs-Code插件\" class=\"headerlink\" title=\"推荐的Vs Code插件\"></a>推荐的Vs Code插件</h5><ol><li>vscode-solution-explorer //解决方案</li><li>C#</li><li>C# Extensions</li><li>C# XML Documentation Comments //三行注释</li></ol><h5 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h5><ol><li>F1 或 Ctrl+Shift+P: 打开命令面板</li><li>Ctrl+` 打开命令行</li><li>Shift+Alt+F 代码格式化</li><li>Ctrl+B 侧边栏显/隐</li><li>Ctrl+Shift+E 显示资源管理器</li><li>Ctrl_Tab 切换文件</li></ol><h5 id=\"Vs-Code-运行生成XML注释文件\"><a href=\"#Vs-Code-运行生成XML注释文件\" class=\"headerlink\" title=\"Vs Code 运行生成XML注释文件\"></a>Vs Code 运行生成XML注释文件</h5><p>先在对应的项目csproj文件里节点PropertyGroup内添加代码：<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;GenerateDocumentationFile&gt;<span class=\"literal\">true</span>&lt;/GenerateDocumentationFile&gt;</span><br><span class=\"line\">&lt;NoWarn&gt;$(NoWarn);<span class=\"number\">1591</span>&lt;Warn&gt;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"创建项目和集成Swagger\"><a href=\"#创建项目和集成Swagger\" class=\"headerlink\" title=\"创建项目和集成Swagger\"></a>创建项目和集成Swagger</h4><p>先创建一个空白的解决方案,再往里面添加对应的项目,先添加一个ASP.NET CORE WEBAPI项目,名称为Caty.Core.Api.通过vscode-solution-explorer插件,这一步将十分简单,就像在vs中一样.</p><h5 id=\"引入swagger插件\"><a href=\"#引入swagger插件\" class=\"headerlink\" title=\"引入swagger插件\"></a>引入swagger插件</h5><p>在终端控制台输入命令:dotnet add YourProjectName.csproj package Swashbuckle.AspNetCore</p><h5 id=\"要增加的引用\"><a href=\"#要增加的引用\" class=\"headerlink\" title=\"要增加的引用\"></a>要增加的引用</h5><ol><li>using System.IO;</li><li>using Swashbuckle.AspNetCore.Swagger;</li><li>using System.Reflection;</li></ol><h5 id=\"添加配置和Swagger中间件\"><a href=\"#添加配置和Swagger中间件\" class=\"headerlink\" title=\"添加配置和Swagger中间件\"></a>添加配置和Swagger中间件</h5><ol><li><p>打开Startup.cs类，编辑ConfigureServices类</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">    services.AddSwaggerGen(c =&gt;&#123;</span><br><span class=\"line\">        c.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> Info&#123;</span><br><span class=\"line\">            Version = <span class=\"string\">\"v1.0.0\"</span>,</span><br><span class=\"line\">            Title = <span class=\"string\">\"Core Api\"</span>,</span><br><span class=\"line\">            Description = <span class=\"string\">\"基础框架\"</span>,</span><br><span class=\"line\">            TermsOfService = <span class=\"string\">\"None\"</span>,</span><br><span class=\"line\">            Contact =<span class=\"keyword\">new</span> Swashbuckle.AspNetCore.Swagger.Contact&#123; Name = <span class=\"string\">\"Caty\"</span>, Email = <span class=\"string\">\"1120873075@qq.com\"</span>, Url = <span class=\"string\">\"https://chcaty.github.io/\"</span> &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//添加读取注释服务(需在生成时输出xml注释文件)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlFile = <span class=\"string\">$\"<span class=\"subst\">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml\"</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); </span><br><span class=\"line\">        c.IncludeXmlComments(xmlPath,<span class=\"literal\">true</span>);<span class=\"comment\">//true表示显示控制器注释</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加header验证信息</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> security  = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>,IEnumerable&lt;<span class=\"keyword\">string</span>&gt;&gt;&#123; &#123;<span class=\"string\">\"Admin\"</span>,<span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] &#123;&#125; &#125;,&#125;;</span><br><span class=\"line\">        c.AddSecurityRequirement(security);</span><br><span class=\"line\">        c.AddSecurityDefinition(<span class=\"string\">\"Admin\"</span>,<span class=\"keyword\">new</span> ApiKeyScheme</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Description =  <span class=\"string\">\"JWT授权 参数结构: \\\"Authorization: Admin &#123;token&#125;\\\"\"</span>,</span><br><span class=\"line\">            Name = <span class=\"string\">\"Authorization\"</span>,<span class=\"comment\">//默认的参数名</span></span><br><span class=\"line\">            In = <span class=\"string\">\"header\"</span>,<span class=\"comment\">//存放信息的位置(请求头中)</span></span><br><span class=\"line\">            Type =<span class=\"string\">\"apiKey\"</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;) ;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑Configure类</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseHsts();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger </span></span><br><span class=\"line\">    app.UseSwagger();</span><br><span class=\"line\">    app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SwaggerEndpoint(<span class=\"string\">\"/swagger/v1/swagger.json\"</span>,<span class=\"string\">\"Api Help V1\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"在框架中引入Dapper\"><a href=\"#在框架中引入Dapper\" class=\"headerlink\" title=\"在框架中引入Dapper\"></a>在框架中引入Dapper</h4><p>在解决方案中添加Business,Service,Entity,Common 四个类库</p><h5 id=\"Entity类库创建User实体类\"><a href=\"#Entity类库创建User实体类\" class=\"headerlink\" title=\"Entity类库创建User实体类\"></a>Entity类库创建User实体类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Entity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 用户Id</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 用户名</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 密码</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Password &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 性别（0女，1男）</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Gender &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 出生年月日</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime Birthday &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建人</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CreateUserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建日期</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime CreateDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新人</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> UpdateUserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新日期</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime UpdateDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除标志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> IsDeleted &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"在Common中设置连接字符串和DbConnection\"><a href=\"#在Common中设置连接字符串和DbConnection\" class=\"headerlink\" title=\"在Common中设置连接字符串和DbConnection\"></a>在Common中设置连接字符串和DbConnection</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.SqlClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DataBaseConfig</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">region</span> SqlServer连接配置</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> DefaultSqlConnectionString =  <span class=\"string\">@\"Data Source=.;Initial Catalog=Light;User ID=sa;Password=sa;\"</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDbConnection <span class=\"title\">GetSqlConnection</span>(<span class=\"params\"><span class=\"keyword\">string</span> sqlConnectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(sqlConnectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sqlConnectionString = DefaultSqlConnectionString;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            IDbConnection conn = <span class=\"keyword\">new</span> SqlConnection(sqlConnectionString);</span><br><span class=\"line\">            conn.Open();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"使用泛型针对每一个表定义基本的CRUD接口-然后IUserRepository继承它\"><a href=\"#使用泛型针对每一个表定义基本的CRUD接口-然后IUserRepository继承它\" class=\"headerlink\" title=\"使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它\"></a>使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它</h5><p>定义<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseService&lt;T&gt; where T:class</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实体类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">CreateEntity</span>(<span class=\"params\">T entity,<span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id获得一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">RetriveOneEntityById</span>(<span class=\"params\"><span class=\"keyword\">int</span> id,<span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获得全部实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">IEnumerable&lt;T&gt; <span class=\"title\">RetriveAllEntity</span>(<span class=\"params\"><span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 修改一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>要修改的实体<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">UpdateEntity</span>(<span class=\"params\">T entity,<span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id删除一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntityById</span>(<span class=\"params\"><span class=\"keyword\">int</span> id,<span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>继承<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Interface</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial  interface IUserService :IBaseService&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"实现IUserRepository定义的接口\"><a href=\"#实现IUserRepository定义的接口\" class=\"headerlink\" title=\"实现IUserRepository定义的接口\"></a>实现IUserRepository定义的接口</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Common;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Dapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Implement</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 用户仓储</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserService</span> : <span class=\"title\">IUserService</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>用户<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">CreateEntity</span>(<span class=\"params\">User entity, <span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> insertSql = <span class=\"string\">@\"INSERT INTO [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                             ([UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[IsDeleted])</span></span><br><span class=\"line\"><span class=\"string\">                                       VALUES</span></span><br><span class=\"line\"><span class=\"string\">                                             (@UserName</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Password</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Gender</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Birthday</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@CreateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@CreateDate</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@UpdateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@UpdateDate</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@IsDeleted)\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(insertSql, entity) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id删除一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntityById</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, <span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> deleteSql = <span class=\"string\">@\"DELETE FROM [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                              WHERE Id = @Id\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(deleteSql, <span class=\"keyword\">new</span> &#123; Id = id &#125;) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取所有用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;User&gt; <span class=\"title\">RetriveAllEntity</span>(<span class=\"params\"><span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> querySql = <span class=\"string\">@\"SELECT [Id]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[IsDeleted]</span></span><br><span class=\"line\"><span class=\"string\">                                        FROM [dbo].[User]\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Query&lt;User&gt;(querySql);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id获取一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">RetriveOneEntityById</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, <span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> querySql = <span class=\"string\">@\"SELECT [Id]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[IsDeleted]</span></span><br><span class=\"line\"><span class=\"string\">                                       FROM [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                     WHERE Id = @Id\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.QueryFirstOrDefault&lt;User&gt;(querySql, <span class=\"keyword\">new</span> &#123; Id = id &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 修改一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>要修改的用户<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">UpdateEntity</span>(<span class=\"params\">User entity, <span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> updateSql = <span class=\"string\">@\"UPDATE [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                    SET [UserName] = @UserName</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Password] = @Password</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Gender] = @Gender</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Birthday] = @Birthday</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[UpdateUserId] = @UpdateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[UpdateDate] = @UpdateDate</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[IsDeleted] = @IsDeleted</span></span><br><span class=\"line\"><span class=\"string\">                                    WHERE Id = @Id\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(updateSql, entity) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>未完待续….</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>之前一直想学习一下用Vs Code开发,趁着最近有做一个小项目的想法,顺路学习一下<br>","more":"</p><h4 id=\"Vs-Code-技巧\"><a href=\"#Vs-Code-技巧\" class=\"headerlink\" title=\"Vs Code 技巧\"></a>Vs Code 技巧</h4><h5 id=\"推荐的Vs-Code插件\"><a href=\"#推荐的Vs-Code插件\" class=\"headerlink\" title=\"推荐的Vs Code插件\"></a>推荐的Vs Code插件</h5><ol><li>vscode-solution-explorer //解决方案</li><li>C#</li><li>C# Extensions</li><li>C# XML Documentation Comments //三行注释</li></ol><h5 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h5><ol><li>F1 或 Ctrl+Shift+P: 打开命令面板</li><li>Ctrl+` 打开命令行</li><li>Shift+Alt+F 代码格式化</li><li>Ctrl+B 侧边栏显/隐</li><li>Ctrl+Shift+E 显示资源管理器</li><li>Ctrl_Tab 切换文件</li></ol><h5 id=\"Vs-Code-运行生成XML注释文件\"><a href=\"#Vs-Code-运行生成XML注释文件\" class=\"headerlink\" title=\"Vs Code 运行生成XML注释文件\"></a>Vs Code 运行生成XML注释文件</h5><p>先在对应的项目csproj文件里节点PropertyGroup内添加代码：<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;GenerateDocumentationFile&gt;<span class=\"literal\">true</span>&lt;/GenerateDocumentationFile&gt;</span><br><span class=\"line\">&lt;NoWarn&gt;$(NoWarn);<span class=\"number\">1591</span>&lt;Warn&gt;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"创建项目和集成Swagger\"><a href=\"#创建项目和集成Swagger\" class=\"headerlink\" title=\"创建项目和集成Swagger\"></a>创建项目和集成Swagger</h4><p>先创建一个空白的解决方案,再往里面添加对应的项目,先添加一个ASP.NET CORE WEBAPI项目,名称为Caty.Core.Api.通过vscode-solution-explorer插件,这一步将十分简单,就像在vs中一样.</p><h5 id=\"引入swagger插件\"><a href=\"#引入swagger插件\" class=\"headerlink\" title=\"引入swagger插件\"></a>引入swagger插件</h5><p>在终端控制台输入命令:dotnet add YourProjectName.csproj package Swashbuckle.AspNetCore</p><h5 id=\"要增加的引用\"><a href=\"#要增加的引用\" class=\"headerlink\" title=\"要增加的引用\"></a>要增加的引用</h5><ol><li>using System.IO;</li><li>using Swashbuckle.AspNetCore.Swagger;</li><li>using System.Reflection;</li></ol><h5 id=\"添加配置和Swagger中间件\"><a href=\"#添加配置和Swagger中间件\" class=\"headerlink\" title=\"添加配置和Swagger中间件\"></a>添加配置和Swagger中间件</h5><ol><li><p>打开Startup.cs类，编辑ConfigureServices类</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">    services.AddSwaggerGen(c =&gt;&#123;</span><br><span class=\"line\">        c.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> Info&#123;</span><br><span class=\"line\">            Version = <span class=\"string\">\"v1.0.0\"</span>,</span><br><span class=\"line\">            Title = <span class=\"string\">\"Core Api\"</span>,</span><br><span class=\"line\">            Description = <span class=\"string\">\"基础框架\"</span>,</span><br><span class=\"line\">            TermsOfService = <span class=\"string\">\"None\"</span>,</span><br><span class=\"line\">            Contact =<span class=\"keyword\">new</span> Swashbuckle.AspNetCore.Swagger.Contact&#123; Name = <span class=\"string\">\"Caty\"</span>, Email = <span class=\"string\">\"1120873075@qq.com\"</span>, Url = <span class=\"string\">\"https://chcaty.github.io/\"</span> &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//添加读取注释服务(需在生成时输出xml注释文件)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlFile = <span class=\"string\">$\"<span class=\"subst\">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml\"</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); </span><br><span class=\"line\">        c.IncludeXmlComments(xmlPath,<span class=\"literal\">true</span>);<span class=\"comment\">//true表示显示控制器注释</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加header验证信息</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> security  = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>,IEnumerable&lt;<span class=\"keyword\">string</span>&gt;&gt;&#123; &#123;<span class=\"string\">\"Admin\"</span>,<span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] &#123;&#125; &#125;,&#125;;</span><br><span class=\"line\">        c.AddSecurityRequirement(security);</span><br><span class=\"line\">        c.AddSecurityDefinition(<span class=\"string\">\"Admin\"</span>,<span class=\"keyword\">new</span> ApiKeyScheme</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Description =  <span class=\"string\">\"JWT授权 参数结构: \\\"Authorization: Admin &#123;token&#125;\\\"\"</span>,</span><br><span class=\"line\">            Name = <span class=\"string\">\"Authorization\"</span>,<span class=\"comment\">//默认的参数名</span></span><br><span class=\"line\">            In = <span class=\"string\">\"header\"</span>,<span class=\"comment\">//存放信息的位置(请求头中)</span></span><br><span class=\"line\">            Type =<span class=\"string\">\"apiKey\"</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;) ;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑Configure类</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseHsts();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger </span></span><br><span class=\"line\">    app.UseSwagger();</span><br><span class=\"line\">    app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SwaggerEndpoint(<span class=\"string\">\"/swagger/v1/swagger.json\"</span>,<span class=\"string\">\"Api Help V1\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"在框架中引入Dapper\"><a href=\"#在框架中引入Dapper\" class=\"headerlink\" title=\"在框架中引入Dapper\"></a>在框架中引入Dapper</h4><p>在解决方案中添加Business,Service,Entity,Common 四个类库</p><h5 id=\"Entity类库创建User实体类\"><a href=\"#Entity类库创建User实体类\" class=\"headerlink\" title=\"Entity类库创建User实体类\"></a>Entity类库创建User实体类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Entity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 用户Id</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 用户名</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 密码</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Password &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 性别（0女，1男）</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Gender &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 出生年月日</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime Birthday &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建人</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CreateUserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建日期</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime CreateDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新人</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> UpdateUserId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 更新日期</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> DateTime UpdateDate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除标志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> IsDeleted &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"在Common中设置连接字符串和DbConnection\"><a href=\"#在Common中设置连接字符串和DbConnection\" class=\"headerlink\" title=\"在Common中设置连接字符串和DbConnection\"></a>在Common中设置连接字符串和DbConnection</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data.SqlClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Common</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DataBaseConfig</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">region</span> SqlServer连接配置</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> DefaultSqlConnectionString =  <span class=\"string\">@\"Data Source=.;Initial Catalog=Light;User ID=sa;Password=sa;\"</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDbConnection <span class=\"title\">GetSqlConnection</span>(<span class=\"params\"><span class=\"keyword\">string</span> sqlConnectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(sqlConnectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sqlConnectionString = DefaultSqlConnectionString;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            IDbConnection conn = <span class=\"keyword\">new</span> SqlConnection(sqlConnectionString);</span><br><span class=\"line\">            conn.Open();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"使用泛型针对每一个表定义基本的CRUD接口-然后IUserRepository继承它\"><a href=\"#使用泛型针对每一个表定义基本的CRUD接口-然后IUserRepository继承它\" class=\"headerlink\" title=\"使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它\"></a>使用泛型针对每一个表定义基本的CRUD接口,然后IUserRepository继承它</h5><p>定义<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Interface</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public interface IBaseService&lt;T&gt; where T:class</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 添加一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实体类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">CreateEntity</span>(<span class=\"params\">T entity,<span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id获得一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">RetriveOneEntityById</span>(<span class=\"params\"><span class=\"keyword\">int</span> id,<span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获得全部实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">IEnumerable&lt;T&gt; <span class=\"title\">RetriveAllEntity</span>(<span class=\"params\"><span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 修改一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>要修改的实体<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">UpdateEntity</span>(<span class=\"params\">T entity,<span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id删除一个实体</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntityById</span>(<span class=\"params\"><span class=\"keyword\">int</span> id,<span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>继承<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Interface</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public partial  interface IUserService :IBaseService&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"实现IUserRepository定义的接口\"><a href=\"#实现IUserRepository定义的接口\" class=\"headerlink\" title=\"实现IUserRepository定义的接口\"></a>实现IUserRepository定义的接口</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Common;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Entity;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Core.Interface;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Dapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Core.Implement</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 用户仓储</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserService</span> : <span class=\"title\">IUserService</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 创建一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>用户<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">CreateEntity</span>(<span class=\"params\">User entity, <span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> insertSql = <span class=\"string\">@\"INSERT INTO [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                             ([UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                             ,[IsDeleted])</span></span><br><span class=\"line\"><span class=\"string\">                                       VALUES</span></span><br><span class=\"line\"><span class=\"string\">                                             (@UserName</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Password</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Gender</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@Birthday</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@CreateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@CreateDate</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@UpdateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@UpdateDate</span></span><br><span class=\"line\"><span class=\"string\">                                             ,@IsDeleted)\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(insertSql, entity) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id删除一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntityById</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, <span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> deleteSql = <span class=\"string\">@\"DELETE FROM [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                              WHERE Id = @Id\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(deleteSql, <span class=\"keyword\">new</span> &#123; Id = id &#125;) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取所有用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;User&gt; <span class=\"title\">RetriveAllEntity</span>(<span class=\"params\"><span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> querySql = <span class=\"string\">@\"SELECT [Id]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[IsDeleted]</span></span><br><span class=\"line\"><span class=\"string\">                                        FROM [dbo].[User]\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Query&lt;User&gt;(querySql);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键Id获取一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span>主键Id<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">RetriveOneEntityById</span>(<span class=\"params\"><span class=\"keyword\">int</span> id, <span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> querySql = <span class=\"string\">@\"SELECT [Id]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[UserName]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Password]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Gender]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[Birthday]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[CreateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                            ,[UpdateUserId]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[UpdateDate]</span></span><br><span class=\"line\"><span class=\"string\">                                           ,[IsDeleted]</span></span><br><span class=\"line\"><span class=\"string\">                                       FROM [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                     WHERE Id = @Id\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.QueryFirstOrDefault&lt;User&gt;(querySql, <span class=\"keyword\">new</span> &#123; Id = id &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 修改一个用户</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>要修改的用户<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connectionString\"&gt;</span>链接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">UpdateEntity</span>(<span class=\"params\">User entity, <span class=\"keyword\">string</span> connectionString = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (IDbConnection conn = DataBaseConfig.GetSqlConnection(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">string</span> updateSql = <span class=\"string\">@\"UPDATE [dbo].[User]</span></span><br><span class=\"line\"><span class=\"string\">                                    SET [UserName] = @UserName</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Password] = @Password</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Gender] = @Gender</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[Birthday] = @Birthday</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[UpdateUserId] = @UpdateUserId</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[UpdateDate] = @UpdateDate</span></span><br><span class=\"line\"><span class=\"string\">                                    ,[IsDeleted] = @IsDeleted</span></span><br><span class=\"line\"><span class=\"string\">                                    WHERE Id = @Id\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> conn.Execute(updateSql, entity) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>未完待续….</p><!-- rebuild by neat -->"},{"title":".Net Core 使用日志NLog","date":"2018-03-16T13:40:12.000Z","_content":"将 ASP.NET Core 提供的默认日志提供程序替换成 NLog。\n<!--more-->\n\n##### 添加相关依赖\n```\nInstall-Package NLog.Extensions.Logging -Pre\nInstall-Package NLog.Web.AspNetCore\n```\n\n##### 创建好Nlog配置文件(nlog.config)\n```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"  \n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n      autoReload=\"true\"  \n      internalLogLevel=\"Warn\"  \n      internalLogFile=\"internal-nlog.txt\">  \n  \n  <!--define various log targets-->  \n  <targets>  \n  \n    <!--write logs to file-->  \n    <target xsi:type=\"File\" name=\"allfile\" fileName=\"nlog-all-${shortdate}.log\"  \n                 layout=\"${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}\" />  \n  \n    <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"nlog-my-${shortdate}.log\"  \n                 layout=\"${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}\" />  \n  \n    <target xsi:type=\"Null\" name=\"blackhole\" />  \n  \n  </targets>  \n  \n  <rules>  \n    <!--All logs, including from Microsoft-->  \n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" />  \n  \n    <!--Skip Microsoft logs and so log only own logs-->  \n    <logger name=\"Microsoft.*\" minlevel=\"Trace\" writeTo=\"blackhole\" final=\"true\" />  \n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" />  \n  </rules>  \n</nlog>  \n```\n\n##### Startup.cs中添加使用的服务\n```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)  \n{\n    loggerFactory.AddNLog();//添加NLog  \n    env.ConfigureNLog(\"nlog.config\");//读取Nlog配置文件  \n    //..............  \n} \n```\n\n##### 使用日志\n```cs\n//获得日志的实例  \nstatic Logger Logger = LogManager.GetCurrentClassLogger();  \npublic IActionResult Index()  \n{\n    Logger.Info(\"普通信息日志-----------\");  \n    Logger.Debug(\"调试日志-----------\");  \n    Logger.Error(\"错误日志-----------\");  \n    Logger.Fatal(\"异常日志-----------\");  \n    Logger.Warn(\"警告日志-----------\");  \n    Logger.Trace(\"跟踪日志-----------\");  \n    Logger.Log(NLog.LogLevel.Warn, \"Log日志------------------\");  \n    return View();  \n}  \n```","source":"_posts/Net-Core-使用日志NLog.md","raw":"---\ntitle: .Net Core 使用日志NLog\ndate: 2018-03-16 21:40:12\ncategories: .Net Core\ntags:\n - .Net Core\n - NLog\n---\n将 ASP.NET Core 提供的默认日志提供程序替换成 NLog。\n<!--more-->\n\n##### 添加相关依赖\n```\nInstall-Package NLog.Extensions.Logging -Pre\nInstall-Package NLog.Web.AspNetCore\n```\n\n##### 创建好Nlog配置文件(nlog.config)\n```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"  \n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n      autoReload=\"true\"  \n      internalLogLevel=\"Warn\"  \n      internalLogFile=\"internal-nlog.txt\">  \n  \n  <!--define various log targets-->  \n  <targets>  \n  \n    <!--write logs to file-->  \n    <target xsi:type=\"File\" name=\"allfile\" fileName=\"nlog-all-${shortdate}.log\"  \n                 layout=\"${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}\" />  \n  \n    <target xsi:type=\"File\" name=\"ownFile-web\" fileName=\"nlog-my-${shortdate}.log\"  \n                 layout=\"${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}\" />  \n  \n    <target xsi:type=\"Null\" name=\"blackhole\" />  \n  \n  </targets>  \n  \n  <rules>  \n    <!--All logs, including from Microsoft-->  \n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"allfile\" />  \n  \n    <!--Skip Microsoft logs and so log only own logs-->  \n    <logger name=\"Microsoft.*\" minlevel=\"Trace\" writeTo=\"blackhole\" final=\"true\" />  \n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"ownFile-web\" />  \n  </rules>  \n</nlog>  \n```\n\n##### Startup.cs中添加使用的服务\n```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)  \n{\n    loggerFactory.AddNLog();//添加NLog  \n    env.ConfigureNLog(\"nlog.config\");//读取Nlog配置文件  \n    //..............  \n} \n```\n\n##### 使用日志\n```cs\n//获得日志的实例  \nstatic Logger Logger = LogManager.GetCurrentClassLogger();  \npublic IActionResult Index()  \n{\n    Logger.Info(\"普通信息日志-----------\");  \n    Logger.Debug(\"调试日志-----------\");  \n    Logger.Error(\"错误日志-----------\");  \n    Logger.Fatal(\"异常日志-----------\");  \n    Logger.Warn(\"警告日志-----------\");  \n    Logger.Trace(\"跟踪日志-----------\");  \n    Logger.Log(NLog.LogLevel.Warn, \"Log日志------------------\");  \n    return View();  \n}  \n```","slug":"Net-Core-使用日志NLog","published":1,"updated":"2018-03-16T14:00:41.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23e003xtkui7y44tgpx","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>将 ASP.NET Core 提供的默认日志提供程序替换成 NLog。<br><a id=\"more\"></a></p><h5 id=\"添加相关依赖\"><a href=\"#添加相关依赖\" class=\"headerlink\" title=\"添加相关依赖\"></a>添加相关依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package NLog.Extensions.Logging -Pre</span><br><span class=\"line\">Install-Package NLog.Web.AspNetCore</span><br></pre></td></tr></table></figure><h5 id=\"创建好Nlog配置文件-nlog-config\"><a href=\"#创建好Nlog配置文件-nlog-config\" class=\"headerlink\" title=\"创建好Nlog配置文件(nlog.config)\"></a>创建好Nlog配置文件(nlog.config)</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span> ?&gt;  </span><br><span class=\"line\">&lt;nlog xmlns=<span class=\"string\">\"http://www.nlog-project.org/schemas/NLog.xsd\"</span>  </span><br><span class=\"line\">      xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>  </span><br><span class=\"line\">      autoReload=<span class=\"string\">\"true\"</span>  </span><br><span class=\"line\">      internalLogLevel=<span class=\"string\">\"Warn\"</span>  </span><br><span class=\"line\">      internalLogFile=<span class=\"string\">\"internal-nlog.txt\"</span>&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;!--define various log targets--&gt;  </span><br><span class=\"line\">  &lt;targets&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;!--write logs to file--&gt;  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">\"File\"</span> name=<span class=\"string\">\"allfile\"</span> fileName=<span class=\"string\">\"nlog-all-$&#123;shortdate&#125;.log\"</span>  </span><br><span class=\"line\">                 layout=<span class=\"string\">\"$&#123;longdate&#125;|$&#123;logger&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;message&#125; $&#123;exception&#125;\"</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">\"File\"</span> name=<span class=\"string\">\"ownFile-web\"</span> fileName=<span class=\"string\">\"nlog-my-$&#123;shortdate&#125;.log\"</span>  </span><br><span class=\"line\">                 layout=<span class=\"string\">\"$&#123;longdate&#125;|$&#123;logger&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;message&#125; $&#123;exception&#125;\"</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">\"Null\"</span> name=<span class=\"string\">\"blackhole\"</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;/targets&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;rules&gt;  </span><br><span class=\"line\">    &lt;!--All logs, including <span class=\"keyword\">from</span> Microsoft--&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">\"*\"</span> minlevel=<span class=\"string\">\"Trace\"</span> writeTo=<span class=\"string\">\"allfile\"</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;!--Skip Microsoft logs and so log only own logs--&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">\"Microsoft.*\"</span> minlevel=<span class=\"string\">\"Trace\"</span> writeTo=<span class=\"string\">\"blackhole\"</span> final=<span class=\"string\">\"true\"</span> /&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">\"*\"</span> minlevel=<span class=\"string\">\"Trace\"</span> writeTo=<span class=\"string\">\"ownFile-web\"</span> /&gt;  </span><br><span class=\"line\">  &lt;/rules&gt;  </span><br><span class=\"line\">&lt;/nlog&gt;</span><br></pre></td></tr></table></figure><h5 id=\"Startup-cs中添加使用的服务\"><a href=\"#Startup-cs中添加使用的服务\" class=\"headerlink\" title=\"Startup.cs中添加使用的服务\"></a>Startup.cs中添加使用的服务</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddNLog();<span class=\"comment\">//添加NLog  </span></span><br><span class=\"line\">    env.ConfigureNLog(<span class=\"string\">\"nlog.config\"</span>);<span class=\"comment\">//读取Nlog配置文件  </span></span><br><span class=\"line\">    <span class=\"comment\">//..............  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"使用日志\"><a href=\"#使用日志\" class=\"headerlink\" title=\"使用日志\"></a>使用日志</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获得日志的实例  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> Logger Logger = LogManager.GetCurrentClassLogger();  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Logger.Info(<span class=\"string\">\"普通信息日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Debug(<span class=\"string\">\"调试日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Error(<span class=\"string\">\"错误日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Fatal(<span class=\"string\">\"异常日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Warn(<span class=\"string\">\"警告日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Trace(<span class=\"string\">\"跟踪日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Log(NLog.LogLevel.Warn, <span class=\"string\">\"Log日志------------------\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>将 ASP.NET Core 提供的默认日志提供程序替换成 NLog。<br>","more":"</p><h5 id=\"添加相关依赖\"><a href=\"#添加相关依赖\" class=\"headerlink\" title=\"添加相关依赖\"></a>添加相关依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package NLog.Extensions.Logging -Pre</span><br><span class=\"line\">Install-Package NLog.Web.AspNetCore</span><br></pre></td></tr></table></figure><h5 id=\"创建好Nlog配置文件-nlog-config\"><a href=\"#创建好Nlog配置文件-nlog-config\" class=\"headerlink\" title=\"创建好Nlog配置文件(nlog.config)\"></a>创建好Nlog配置文件(nlog.config)</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span> ?&gt;  </span><br><span class=\"line\">&lt;nlog xmlns=<span class=\"string\">\"http://www.nlog-project.org/schemas/NLog.xsd\"</span>  </span><br><span class=\"line\">      xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>  </span><br><span class=\"line\">      autoReload=<span class=\"string\">\"true\"</span>  </span><br><span class=\"line\">      internalLogLevel=<span class=\"string\">\"Warn\"</span>  </span><br><span class=\"line\">      internalLogFile=<span class=\"string\">\"internal-nlog.txt\"</span>&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;!--define various log targets--&gt;  </span><br><span class=\"line\">  &lt;targets&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;!--write logs to file--&gt;  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">\"File\"</span> name=<span class=\"string\">\"allfile\"</span> fileName=<span class=\"string\">\"nlog-all-$&#123;shortdate&#125;.log\"</span>  </span><br><span class=\"line\">                 layout=<span class=\"string\">\"$&#123;longdate&#125;|$&#123;logger&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;message&#125; $&#123;exception&#125;\"</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">\"File\"</span> name=<span class=\"string\">\"ownFile-web\"</span> fileName=<span class=\"string\">\"nlog-my-$&#123;shortdate&#125;.log\"</span>  </span><br><span class=\"line\">                 layout=<span class=\"string\">\"$&#123;longdate&#125;|$&#123;logger&#125;|$&#123;uppercase:$&#123;level&#125;&#125;|$&#123;message&#125; $&#123;exception&#125;\"</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;target xsi:type=<span class=\"string\">\"Null\"</span> name=<span class=\"string\">\"blackhole\"</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;/targets&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;rules&gt;  </span><br><span class=\"line\">    &lt;!--All logs, including <span class=\"keyword\">from</span> Microsoft--&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">\"*\"</span> minlevel=<span class=\"string\">\"Trace\"</span> writeTo=<span class=\"string\">\"allfile\"</span> /&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;!--Skip Microsoft logs and so log only own logs--&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">\"Microsoft.*\"</span> minlevel=<span class=\"string\">\"Trace\"</span> writeTo=<span class=\"string\">\"blackhole\"</span> final=<span class=\"string\">\"true\"</span> /&gt;  </span><br><span class=\"line\">    &lt;logger name=<span class=\"string\">\"*\"</span> minlevel=<span class=\"string\">\"Trace\"</span> writeTo=<span class=\"string\">\"ownFile-web\"</span> /&gt;  </span><br><span class=\"line\">  &lt;/rules&gt;  </span><br><span class=\"line\">&lt;/nlog&gt;</span><br></pre></td></tr></table></figure><h5 id=\"Startup-cs中添加使用的服务\"><a href=\"#Startup-cs中添加使用的服务\" class=\"headerlink\" title=\"Startup.cs中添加使用的服务\"></a>Startup.cs中添加使用的服务</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddNLog();<span class=\"comment\">//添加NLog  </span></span><br><span class=\"line\">    env.ConfigureNLog(<span class=\"string\">\"nlog.config\"</span>);<span class=\"comment\">//读取Nlog配置文件  </span></span><br><span class=\"line\">    <span class=\"comment\">//..............  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"使用日志\"><a href=\"#使用日志\" class=\"headerlink\" title=\"使用日志\"></a>使用日志</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获得日志的实例  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> Logger Logger = LogManager.GetCurrentClassLogger();  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Logger.Info(<span class=\"string\">\"普通信息日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Debug(<span class=\"string\">\"调试日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Error(<span class=\"string\">\"错误日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Fatal(<span class=\"string\">\"异常日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Warn(<span class=\"string\">\"警告日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Trace(<span class=\"string\">\"跟踪日志-----------\"</span>);  </span><br><span class=\"line\">    Logger.Log(NLog.LogLevel.Warn, <span class=\"string\">\"Log日志------------------\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net Core 单例模式","date":"2018-06-11T11:49:03.000Z","_content":"##### 单例模式的定义\n单体模式保证一个类只有一个实例, 并提供一个全局访问该实例的方法\n<!--more-->\n\n##### .Net Core实现单例模式的代码\n###### ChocolateBoiler.cs\n```cs\nnamespace SingletonPattern\n{\n    public class ChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static ChocolateBoiler _uniqueInstance;\n\n        private ChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        public static ChocolateBoiler GetInstance()\n        {\n            return _uniqueInstance ?? (_uniqueInstance = new ChocolateBoiler());\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n```\n\n###### SynchronizedChocolateBoiler.cs\n```cs\nusing System.Runtime.CompilerServices;\nnamespace SingletonPattern\n{\n    public class SynchronizedChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static SynchronizedChocolateBoiler _uniqueInstance;\n\n        private SynchronizedChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        [MethodImpl(MethodImplOptions.Synchronized)]\n        public static SynchronizedChocolateBoiler GetInstance()\n        {\n            return _uniqueInstance ?? (_uniqueInstance = new SynchronizedChocolateBoiler());\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n\n```\n\n###### DoubleCheckChocolateBoiler.cs\n```cs\nnamespace SingletonPattern\n{\n    public class DoubleCheckChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static volatile DoubleCheckChocolateBoiler _uniqueInstance;\n        private static readonly object LockHelper = new object();\n\n        private DoubleCheckChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        public static DoubleCheckChocolateBoiler GetInstance()\n        {\n            if (_uniqueInstance == null)\n            {\n                lock (LockHelper)\n                {\n                    if (_uniqueInstance == null)\n                    {\n                        _uniqueInstance = new DoubleCheckChocolateBoiler();\n                    }\n                }\n            }\n            return _uniqueInstance;\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n```","source":"_posts/Net-Core-单例模式.md","raw":"---\ntitle: .Net Core 单例模式\ndate: 2018-06-11 19:49:03\ncategories : .Net Core\ntags: \n - .Net Core\n - 设计模式\n---\n##### 单例模式的定义\n单体模式保证一个类只有一个实例, 并提供一个全局访问该实例的方法\n<!--more-->\n\n##### .Net Core实现单例模式的代码\n###### ChocolateBoiler.cs\n```cs\nnamespace SingletonPattern\n{\n    public class ChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static ChocolateBoiler _uniqueInstance;\n\n        private ChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        public static ChocolateBoiler GetInstance()\n        {\n            return _uniqueInstance ?? (_uniqueInstance = new ChocolateBoiler());\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n```\n\n###### SynchronizedChocolateBoiler.cs\n```cs\nusing System.Runtime.CompilerServices;\nnamespace SingletonPattern\n{\n    public class SynchronizedChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static SynchronizedChocolateBoiler _uniqueInstance;\n\n        private SynchronizedChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        [MethodImpl(MethodImplOptions.Synchronized)]\n        public static SynchronizedChocolateBoiler GetInstance()\n        {\n            return _uniqueInstance ?? (_uniqueInstance = new SynchronizedChocolateBoiler());\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n\n```\n\n###### DoubleCheckChocolateBoiler.cs\n```cs\nnamespace SingletonPattern\n{\n    public class DoubleCheckChocolateBoiler\n    {\n        public bool Empty { get; private set; }\n        public bool Boiled { get; private set; }\n\n        private static volatile DoubleCheckChocolateBoiler _uniqueInstance;\n        private static readonly object LockHelper = new object();\n\n        private DoubleCheckChocolateBoiler()\n        {\n            Empty = true;\n            Boiled = false;\n        }\n\n        public static DoubleCheckChocolateBoiler GetInstance()\n        {\n            if (_uniqueInstance == null)\n            {\n                lock (LockHelper)\n                {\n                    if (_uniqueInstance == null)\n                    {\n                        _uniqueInstance = new DoubleCheckChocolateBoiler();\n                    }\n                }\n            }\n            return _uniqueInstance;\n        }\n\n        public void Fill()\n        {\n            if (Empty)\n            {\n                Empty = false;\n                Boiled = false;\n            }\n        }\n\n        public void Drain()\n        {\n            if (!Empty && Boiled)\n            {\n                Empty = true;\n            }\n        }\n\n        public void Boil()\n        {\n            if (!Empty && !Boiled)\n            {\n                Boiled = true;\n            }\n        }\n    }\n}\n```","slug":"Net-Core-单例模式","published":1,"updated":"2018-06-11T13:17:34.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23g0041tkui2exglldk","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"单例模式的定义\"><a href=\"#单例模式的定义\" class=\"headerlink\" title=\"单例模式的定义\"></a>单例模式的定义</h5><p>单体模式保证一个类只有一个实例, 并提供一个全局访问该实例的方法<br><a id=\"more\"></a></p><h5 id=\"Net-Core实现单例模式的代码\"><a href=\"#Net-Core实现单例模式的代码\" class=\"headerlink\" title=\".Net Core实现单例模式的代码\"></a>.Net Core实现单例模式的代码</h5><h6 id=\"ChocolateBoiler-cs\"><a href=\"#ChocolateBoiler-cs\" class=\"headerlink\" title=\"ChocolateBoiler.cs\"></a>ChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ChocolateBoiler _uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance ?? (_uniqueInstance = <span class=\"keyword\">new</span> ChocolateBoiler());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"SynchronizedChocolateBoiler-cs\"><a href=\"#SynchronizedChocolateBoiler-cs\" class=\"headerlink\" title=\"SynchronizedChocolateBoiler.cs\"></a>SynchronizedChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.CompilerServices;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SynchronizedChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SynchronizedChocolateBoiler _uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SynchronizedChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">MethodImpl(MethodImplOptions.Synchronized)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SynchronizedChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance ?? (_uniqueInstance = <span class=\"keyword\">new</span> SynchronizedChocolateBoiler());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"DoubleCheckChocolateBoiler-cs\"><a href=\"#DoubleCheckChocolateBoiler-cs\" class=\"headerlink\" title=\"DoubleCheckChocolateBoiler.cs\"></a>DoubleCheckChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DoubleCheckChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> DoubleCheckChocolateBoiler _uniqueInstance;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> LockHelper = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DoubleCheckChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DoubleCheckChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_uniqueInstance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">lock</span> (LockHelper)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (_uniqueInstance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        _uniqueInstance = <span class=\"keyword\">new</span> DoubleCheckChocolateBoiler();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"单例模式的定义\"><a href=\"#单例模式的定义\" class=\"headerlink\" title=\"单例模式的定义\"></a>单例模式的定义</h5><p>单体模式保证一个类只有一个实例, 并提供一个全局访问该实例的方法<br>","more":"</p><h5 id=\"Net-Core实现单例模式的代码\"><a href=\"#Net-Core实现单例模式的代码\" class=\"headerlink\" title=\".Net Core实现单例模式的代码\"></a>.Net Core实现单例模式的代码</h5><h6 id=\"ChocolateBoiler-cs\"><a href=\"#ChocolateBoiler-cs\" class=\"headerlink\" title=\"ChocolateBoiler.cs\"></a>ChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ChocolateBoiler _uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance ?? (_uniqueInstance = <span class=\"keyword\">new</span> ChocolateBoiler());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"SynchronizedChocolateBoiler-cs\"><a href=\"#SynchronizedChocolateBoiler-cs\" class=\"headerlink\" title=\"SynchronizedChocolateBoiler.cs\"></a>SynchronizedChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.CompilerServices;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SynchronizedChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SynchronizedChocolateBoiler _uniqueInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SynchronizedChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">MethodImpl(MethodImplOptions.Synchronized)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SynchronizedChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance ?? (_uniqueInstance = <span class=\"keyword\">new</span> SynchronizedChocolateBoiler());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"DoubleCheckChocolateBoiler-cs\"><a href=\"#DoubleCheckChocolateBoiler-cs\" class=\"headerlink\" title=\"DoubleCheckChocolateBoiler.cs\"></a>DoubleCheckChocolateBoiler.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingletonPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DoubleCheckChocolateBoiler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Empty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> Boiled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> DoubleCheckChocolateBoiler _uniqueInstance;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> LockHelper = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DoubleCheckChocolateBoiler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DoubleCheckChocolateBoiler <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_uniqueInstance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">lock</span> (LockHelper)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (_uniqueInstance == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        _uniqueInstance = <span class=\"keyword\">new</span> DoubleCheckChocolateBoiler();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _uniqueInstance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drain</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Empty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Empty &amp;&amp; !Boiled)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Boiled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net Core 抽象工厂模式","date":"2018-04-16T12:03:13.000Z","_content":"##### 抽象工厂的定义\n抽象工厂提供了一个接口,这个接口可以创建一族相关或依赖的对象而无需指明它们具体的类.\n<!--more-->\n\n##### 工厂方法和抽象工厂的比较\n工厂方法是通过继承来实现创建对象工作的,而抽象工厂则是通过组合的方法.\n工厂方法是让子类来创建对象,客户只需要知道抽象类,子类做具体的实现,解耦.\n抽象工厂提供了一个可以创建一族产品的抽象类,这个类的实现类/子类决定产品是如何产出的,也是解耦.\n抽象工厂的优点是:可以创建一族相关的产品.缺点是它的接口比较大,如果添加了产品需要改接口.\n而工厂方法只负责生产一个产品.\n抽象工厂也经常使用工厂方法来实现具体的工厂.\n而工厂方法也经常使用抽象的创造者,它来使用子类创建出的具体产品.\n\n##### .Net Core实现抽象工厂\n###### IGredient.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IGredient\n    {\n        string Name { get; }\n    }\n}\n```\n\n###### ICheese.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface ICheese : IGredient\n    {\n        \n    }\n}\n```\n\n###### IClams.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IClams : IGredient\n    {\n        \n    }\n}\n```\n\n###### IDough.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IDough : IGredient\n    {\n        \n    }\n}\n```\n\n###### ISauce.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface ISauce : IGredient\n    {\n        \n    }\n}\n```\n\n###### IPizzalngredientFactory.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IPizzalngredientFactory\n    {\n        IDough CreateDough();\n        ICheese CreateCheese();\n        IClams CreateClams();\n        ISauce CreateSauce();\n    }\n}\n```\n\n###### PizzaStore.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public abstract class PizzaStore\n    {\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n\n        protected abstract Pizza CreatePizza(string type);\n    }\n}\n```\n\n###### Pizza.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public abstract class Pizza\n    {\n        public string Name { get; set; }\n        public IDough Dough { get; protected set; }\n        public ISauce Sauce { get; protected set; }\n        public ICheese Cheese { get; protected set; }\n        public IClams Clams { get; protected set; }\n\n        public abstract void Propare();\n\n        \n    }\n}\n```","source":"_posts/Net-Core-抽象工厂模式.md","raw":"---\ntitle: .Net Core 抽象工厂模式\ndate: 2018-04-16 20:03:13\ncategories : .Net Core\ntags: \n - .Net Core\n - 设计模式\n---\n##### 抽象工厂的定义\n抽象工厂提供了一个接口,这个接口可以创建一族相关或依赖的对象而无需指明它们具体的类.\n<!--more-->\n\n##### 工厂方法和抽象工厂的比较\n工厂方法是通过继承来实现创建对象工作的,而抽象工厂则是通过组合的方法.\n工厂方法是让子类来创建对象,客户只需要知道抽象类,子类做具体的实现,解耦.\n抽象工厂提供了一个可以创建一族产品的抽象类,这个类的实现类/子类决定产品是如何产出的,也是解耦.\n抽象工厂的优点是:可以创建一族相关的产品.缺点是它的接口比较大,如果添加了产品需要改接口.\n而工厂方法只负责生产一个产品.\n抽象工厂也经常使用工厂方法来实现具体的工厂.\n而工厂方法也经常使用抽象的创造者,它来使用子类创建出的具体产品.\n\n##### .Net Core实现抽象工厂\n###### IGredient.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IGredient\n    {\n        string Name { get; }\n    }\n}\n```\n\n###### ICheese.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface ICheese : IGredient\n    {\n        \n    }\n}\n```\n\n###### IClams.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IClams : IGredient\n    {\n        \n    }\n}\n```\n\n###### IDough.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IDough : IGredient\n    {\n        \n    }\n}\n```\n\n###### ISauce.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface ISauce : IGredient\n    {\n        \n    }\n}\n```\n\n###### IPizzalngredientFactory.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public interface IPizzalngredientFactory\n    {\n        IDough CreateDough();\n        ICheese CreateCheese();\n        IClams CreateClams();\n        ISauce CreateSauce();\n    }\n}\n```\n\n###### PizzaStore.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public abstract class PizzaStore\n    {\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n\n        protected abstract Pizza CreatePizza(string type);\n    }\n}\n```\n\n###### Pizza.cs\n```cs\nnamespace AbtractFactoryPattern.Abstractions\n{\n    public abstract class Pizza\n    {\n        public string Name { get; set; }\n        public IDough Dough { get; protected set; }\n        public ISauce Sauce { get; protected set; }\n        public ICheese Cheese { get; protected set; }\n        public IClams Clams { get; protected set; }\n\n        public abstract void Propare();\n\n        \n    }\n}\n```","slug":"Net-Core-抽象工厂模式","published":1,"updated":"2018-04-16T13:11:22.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23i0045tkuiwn921v2n","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"抽象工厂的定义\"><a href=\"#抽象工厂的定义\" class=\"headerlink\" title=\"抽象工厂的定义\"></a>抽象工厂的定义</h5><p>抽象工厂提供了一个接口,这个接口可以创建一族相关或依赖的对象而无需指明它们具体的类.<br><a id=\"more\"></a></p><h5 id=\"工厂方法和抽象工厂的比较\"><a href=\"#工厂方法和抽象工厂的比较\" class=\"headerlink\" title=\"工厂方法和抽象工厂的比较\"></a>工厂方法和抽象工厂的比较</h5><p>工厂方法是通过继承来实现创建对象工作的,而抽象工厂则是通过组合的方法.<br>工厂方法是让子类来创建对象,客户只需要知道抽象类,子类做具体的实现,解耦.<br>抽象工厂提供了一个可以创建一族产品的抽象类,这个类的实现类/子类决定产品是如何产出的,也是解耦.<br>抽象工厂的优点是:可以创建一族相关的产品.缺点是它的接口比较大,如果添加了产品需要改接口.<br>而工厂方法只负责生产一个产品.<br>抽象工厂也经常使用工厂方法来实现具体的工厂.<br>而工厂方法也经常使用抽象的创造者,它来使用子类创建出的具体产品.</p><h5 id=\"Net-Core实现抽象工厂\"><a href=\"#Net-Core实现抽象工厂\" class=\"headerlink\" title=\".Net Core实现抽象工厂\"></a>.Net Core实现抽象工厂</h5><h6 id=\"IGredient-cs\"><a href=\"#IGredient-cs\" class=\"headerlink\" title=\"IGredient.cs\"></a>IGredient.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"ICheese-cs\"><a href=\"#ICheese-cs\" class=\"headerlink\" title=\"ICheese.cs\"></a>ICheese.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICheese</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"IClams-cs\"><a href=\"#IClams-cs\" class=\"headerlink\" title=\"IClams.cs\"></a>IClams.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IClams</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"IDough-cs\"><a href=\"#IDough-cs\" class=\"headerlink\" title=\"IDough.cs\"></a>IDough.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDough</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"ISauce-cs\"><a href=\"#ISauce-cs\" class=\"headerlink\" title=\"ISauce.cs\"></a>ISauce.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISauce</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"IPizzalngredientFactory-cs\"><a href=\"#IPizzalngredientFactory-cs\" class=\"headerlink\" title=\"IPizzalngredientFactory.cs\"></a>IPizzalngredientFactory.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IPizzalngredientFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IDough <span class=\"title\">CreateDough</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">ICheese <span class=\"title\">CreateCheese</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">IClams <span class=\"title\">CreateClams</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">ISauce <span class=\"title\">CreateSauce</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"PizzaStore-cs\"><a href=\"#PizzaStore-cs\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Pizza-cs\"><a href=\"#Pizza-cs\" class=\"headerlink\" title=\"Pizza.cs\"></a>Pizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IDough Dough &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ISauce Sauce &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ICheese Cheese &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IClams Clams &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">Propare</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"抽象工厂的定义\"><a href=\"#抽象工厂的定义\" class=\"headerlink\" title=\"抽象工厂的定义\"></a>抽象工厂的定义</h5><p>抽象工厂提供了一个接口,这个接口可以创建一族相关或依赖的对象而无需指明它们具体的类.<br>","more":"</p><h5 id=\"工厂方法和抽象工厂的比较\"><a href=\"#工厂方法和抽象工厂的比较\" class=\"headerlink\" title=\"工厂方法和抽象工厂的比较\"></a>工厂方法和抽象工厂的比较</h5><p>工厂方法是通过继承来实现创建对象工作的,而抽象工厂则是通过组合的方法.<br>工厂方法是让子类来创建对象,客户只需要知道抽象类,子类做具体的实现,解耦.<br>抽象工厂提供了一个可以创建一族产品的抽象类,这个类的实现类/子类决定产品是如何产出的,也是解耦.<br>抽象工厂的优点是:可以创建一族相关的产品.缺点是它的接口比较大,如果添加了产品需要改接口.<br>而工厂方法只负责生产一个产品.<br>抽象工厂也经常使用工厂方法来实现具体的工厂.<br>而工厂方法也经常使用抽象的创造者,它来使用子类创建出的具体产品.</p><h5 id=\"Net-Core实现抽象工厂\"><a href=\"#Net-Core实现抽象工厂\" class=\"headerlink\" title=\".Net Core实现抽象工厂\"></a>.Net Core实现抽象工厂</h5><h6 id=\"IGredient-cs\"><a href=\"#IGredient-cs\" class=\"headerlink\" title=\"IGredient.cs\"></a>IGredient.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"ICheese-cs\"><a href=\"#ICheese-cs\" class=\"headerlink\" title=\"ICheese.cs\"></a>ICheese.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICheese</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"IClams-cs\"><a href=\"#IClams-cs\" class=\"headerlink\" title=\"IClams.cs\"></a>IClams.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IClams</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"IDough-cs\"><a href=\"#IDough-cs\" class=\"headerlink\" title=\"IDough.cs\"></a>IDough.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDough</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"ISauce-cs\"><a href=\"#ISauce-cs\" class=\"headerlink\" title=\"ISauce.cs\"></a>ISauce.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISauce</span> : <span class=\"title\">IGredient</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"IPizzalngredientFactory-cs\"><a href=\"#IPizzalngredientFactory-cs\" class=\"headerlink\" title=\"IPizzalngredientFactory.cs\"></a>IPizzalngredientFactory.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IPizzalngredientFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">IDough <span class=\"title\">CreateDough</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">ICheese <span class=\"title\">CreateCheese</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">IClams <span class=\"title\">CreateClams</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        <span class=\"function\">ISauce <span class=\"title\">CreateSauce</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"PizzaStore-cs\"><a href=\"#PizzaStore-cs\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Pizza-cs\"><a href=\"#Pizza-cs\" class=\"headerlink\" title=\"Pizza.cs\"></a>Pizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">AbtractFactoryPattern.Abstractions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IDough Dough &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ISauce Sauce &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> ICheese Cheese &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> IClams Clams &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">protected</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">Propare</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net Core RSA/RSA2算法","date":"2018-03-08T10:24:12.000Z","_content":"RSA2是在原来SHA1WithRSA签名算法的基础上,新增了支持SHA256WithRSA的签名算法.该算法比该SHA1WithRSA有更强的安全能力.\n<!--more-->\n###### RSA加解密 使用OpenSSL的公钥加密/私钥解密\n```cs\npublic class RSAHelper\n{\n    private readonly RSA_privateKeyRsaProvider;\n    \n    private readonly RSA_publicKeyRsaProvider;\n\n    private readonly HashAlgorithmName_hashAlgorithmName;\n\n    private readonly Encoding _encoding;\n\n    /// <summary>\n    /// 实例化RSAHelper\n    /// </summary>\n    /// <param name=\"rsaType\">加密算法类型RSA SHA1;RSA2 SHA256 密钥长度至少为2048</param>\n    /// <param name=\"encoding\">编码类型</param>\n    /// <param name=\"privateKey\">私钥</param>\n    /// <param name=\"publicKey\">公钥</param>\n    public RSAHelper(RSAType rsaType,Encoding encoding,string privateKey,string publicKey = null)\n    {\n        _encoding = encoding;\n        if(!string.IsNullOrEmpty(privateKey))\n        {\n            _privateKeyRsaProvider = CreateRsaProviderFromPrivateKey(privateKey);\n        }\n        if(!string.IsNullOrEmpty(publicKey))\n        {\n            _publicKeyRsaProvider = CreateRsaProviderFromPublicKey(publicKey);\n        }\n\n        _hashAlgorithName = rsaType == RSAType.RSA?HashAlgorithmName.SHA1:HashAlgorithName.SHA256;\n    }\n\n    /// <summary>\n    /// 使用私钥签名\n    /// </summary>\n    /// <param name=\"data\">原始数据</param>\n    /// <returns></returns>\n    public string Sign(string data)\n    {\n        byte[] dataBytes = _encoding.GetBytes(data);\n\n        var signatureBytes = _privateKeyRsaProvider.SignData(dataBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);\n        return Convert.ToBase64String(signatureBytes);\n    }\n\n    /// <summary>\n    /// 使用公钥签名\n    /// </summary>\n    /// <param name=\"data\">原始数据</param>\n    /// <param name=\"sign\">签名</param>\n    /// <returns></returns>\n    public bool Verify(stringt data,string sign)\n    {\n        byte[] dataBytes = _encoding.GetBytes(data);\n\n        byte[] signBytes = Convert.FromBase64String(sign);\n        var verify = _publicKeyRsaProvider.VerifyData(dataBytes,signBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);\n        return varify;\n    }\n\n    // 解密\n    public string Decrypt(string cipherText)\n    {\n        if(_privateKeyRsaProvider == null)\n        {\n            throw new Exception(\"_privateKeyRsaProvider is null\");\n        }\n        return Encoding.UTF8.GetString(_privateKeyRsaProvider.Decrypt(Convert.FromBase64String(cipherText), RSAEncryptionPadding.Pkcs1));\n    }\n\n    // 加密\n    public string Encrypt(string text)\n    {\n        if(_publicKeyRsaProvider == null)\n        {\n            throw new Exception(\"_publicKeyRsaProvider is null\");\n        }\n        return Convert.ToBase64String(_publicKeyRsaProvider.Encrypt(Encoding.UTF8.GetBytes(text), RSAEncryptionPadding.Pkcs1));\n    }\n\n    // 使用私钥创建RSA实例    \n    public RSA CreateRsaProviderFromPrivateKey(string privateKey)    {        \n        var privateKeyBits = Convert.FromBase64String(privateKey);\n        var rsa = RSA.Create();      \n        var rsaParameters = new RSAParameters();  \n        using (BinaryReader binr = new BinaryReader(new MemoryStream(privateKeyBits)))        \n        {            \n            byte bt = 0;       \n            ushort twobytes = 0;            \n            twobytes = binr.ReadUInt16();      \n            if (twobytes == 0x8130)             \n            {   \n                binr.ReadByte();\n            }      \n            else if (twobytes == 0x8230)   \n            {             \n                binr.ReadInt16();\n            }        \n            else            \n            {    \n                throw new Exception(\"Unexpected value read binr.ReadUInt16()\"); \n            }           \n            twobytes = binr.ReadUInt16();      \n            \n            if (twobytes != 0x0102)      \n            {\n                throw new Exception(\"Unexpected version\");\n            }            \n            bt = binr.ReadByte();        \n\n            if (bt != 0x00)  \n            {\n                throw new Exception(\"Unexpected value read binr.ReadByte()\");\n            }            \n            rsaParameters.Modulus = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.Exponent = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.D = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.P = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.Q = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.DP = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.DQ = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.InverseQ = binr.ReadBytes(GetIntegerSize(binr));        \n        }        \n        rsa.ImportParameters(rsaParameters);    \n        return rsa;    \n    }\n        \n    // 使用公钥创建RSA实例    \n    public RSA CreateRsaProviderFromPublicKey(string publicKeyString)   \n    {        \n        // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = \"1.2.840.113549.1.1.1\"        \n        byte[] seqOid = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };    \n\n        byte[] seq = new byte[15];      \n\n        var x509Key = Convert.FromBase64String(publicKeyString);        \n        // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------        \n        using (MemoryStream mem = new MemoryStream(x509Key))        \n        {            \n            using (BinaryReader binr = new BinaryReader(mem))  //wrap Memory Stream with BinaryReader for easy reading            \n            {                \n                byte bt = 0;                \n                ushort twobytes = 0;                \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)                    \n                {\n                    binr.ReadByte();\n                }    \n                //advance 1 byte                \n                else if (twobytes == 0x8230)             \n                {       \n                    binr.ReadInt16(); \n                }  \n                //advance 2 bytes                \n                else     \n                {               \n                    return null;\n                }                \n                seq = binr.ReadBytes(15);       \n                //read the Sequence OID                \n                if (!CompareBytearrays(seq, seqOid))   \n                { \n                    //make sure Sequence for OID is correct                    \n                    return null;  \n                }              \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8103) \n                {\n                    //data read as little endian order (actual data order for Bit String is 03 81)                    \n                    binr.ReadByte();\n                }    \n                //advance 1 byte                \n                else if (twobytes == 0x8203)                 \n                {   \n                    binr.ReadInt16();  \n                } \n                //advance 2 bytes                \n                else                \n                {    \n                    return null;  \n                }              \n                bt = binr.ReadByte();                \n                if (bt != 0x00)     \n                //expect null byte next                \n                {    \n                    return null;   \n                }             \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8130) \n                //data read as little endian order (actual data order for Sequence is 30 81)                  \n                {  \n                    binr.ReadByte();   \n                } \n                //advance 1 byte                \n                else if (twobytes == 0x8230)                    \n                {\n                    binr.ReadInt16();  \n                }\n                //advance 2 bytes                \n                else                   \n                { \n                    return null;\n                }                \n                twobytes = binr.ReadUInt16();        \n                byte lowbyte = 0x00;            \n                byte highbyte = 0x00;        \n                \n                if (twobytes == 0x8102) \n                //data read as little endian order (actual data order for Integer is 02 81)                    \n                {\n                    lowbyte = binr.ReadByte(); \n                } \n                // read next bytes which is bytes in modulus                \n                else if (twobytes == 0x8202)                \n                {                    \n                    highbyte = binr.ReadByte(); //advance 2 bytes                    \n                    lowbyte = binr.ReadByte();                \n                }                \n                else\n                {                    \n                    return null;\n                }          \n\n                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   \n                //reverse byte order since asn.1 key uses big endian order                \n                int modsize = BitConverter.ToInt32(modint, 0);                \n                int firstbyte = binr.PeekChar();            \n\n                if (firstbyte == 0x00)                \n                {   \n                    //if first byte (highest order) of modulus is zero, don't include it                    \n                    binr.ReadByte();    \n                    //skip this null byte                    \n                    modsize -= 1;   \n                    //reduce modulus buffer size by 1                }                \n                    byte[] modulus = binr.ReadBytes(modsize);   \n                    //read the modulus bytes                \n                    if (binr.ReadByte() != 0x02)          \n                    //expect an Integer for the exponent data           \n                    {         \n                        return null;\n                    }              \n\n                    int expbytes = (int)binr.ReadByte();    \n\n                    // should only need one byte for actual exponent data (for all useful values)                \n                    byte[] exponent = binr.ReadBytes(expbytes);                \n                    // ------- create RSACryptoServiceProvider instance and initialize with public key -----                \n                    var rsa = RSA.Create();                \n                    RSAParameters rsaKeyInfo = new RSAParameters                \n                    {                    \n                        Modulus = modulus,                    \n                        Exponent = exponent                \n                    };                \n                    rsa.ImportParameters(rsaKeyInfo);        \n                    return rsa;            \n                }        \n            }    \n        } \n           \n        // 导入密钥算法    \n        private int GetIntegerSize(BinaryReader binr)    \n        {      \n            byte bt = 0;        \n            int count = 0;        \n            bt = binr.ReadByte();    \n\n            if (bt != 0x02)          \n            {\n                return 0; \n            }       \n            bt = binr.ReadByte();      \n            if (bt == 0x81)            \n            {\n                count = binr.ReadByte();\n            }  \n            else if (bt == 0x82)        \n            {\n                var highbyte = binr.ReadByte();\n                var lowbyte = binr.ReadByte();\n                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };            \n                count = BitConverter.ToInt32(modint, 0);        \n            }\n            else        \n            {            \n                count = bt;        \n            }\n            while (binr.ReadByte() == 0x00)        \n            {            \n                count -= 1;        \n            }        \n            binr.BaseStream.Seek(-1, SeekOrigin.Current);  \n            return count;    \n        }  \n        \n        private bool CompareBytearrays(byte[] a, byte[] b)    \n        { \n            if (a.Length != b.Length)      \n            {\n                return false;    \n            }\n            int i = 0;    \n\n            foreach (byte c in a)        \n            {\n                if (c != b[i])\n                {\n                    return false; \n                }           \n                i++;        \n            }        \n            return true;    \n        } \n    }\n\n    /// <summary>\n    /// RSA算法类型\n    /// </summary>\n    public enum RSAType \n    {  \n        /// <summary>    \n        /// SHA1    \n        /// </summary>    \n        RSA = 0,\n            \n        /// <summary>    \n        /// RSA2 密钥长度至少为2048    \n        /// SHA256    \n        /// </summary>    \n        RSA2 \n    }\n}\n```\n\n###### 使用\n```cs\nstatic void Main(string[] args)\n{    \n    //2048 公钥    \n    string publicKey = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQAB\";    \n    \n    //2048 私钥    \n    string privateKey = \"MIIEpAIBAAKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQABAoIBAQCRZLUlOUvjIVqYvhznRK1OG6p45s8JY1r+UnPIId2Bt46oSLeUkZvZVeCnfq9k0Bzb8AVGwVPhtPEDh73z3dEYcT/lwjLXAkyPB6gG5ZfI/vvC/k7JYV01+neFmktw2/FIJWjEMMF2dvLNZ/Pm4bX1Dz9SfD/45Hwr8wqrvRzvFZsj5qqOxv9RPAudOYwCwZskKp/GF+L+3Ycod1Wu98imzMZUH+L5dQuDGg3kvf3ljIAegTPoqYBg0imNPYY/EGoFKnbxlK5S5/5uAFb16dGJqAz3XQCz9Is/IWrOTu0etteqV2Ncs8uqPdjed+b0j8CMsr4U1xjwPQ8WwdaJtTkRAoGBANAndgiGZkCVcc9975/AYdgFp35W6D+hGQAZlL6DmnucUFdXbWa/x2rTSEXlkvgk9X/PxOptUYsLJkzysTgfDywZwuIXLm9B3oNmv3bVgPXsgDsvDfaHYCgz0nHK6NSrX2AeX3yO/dFuoZsuk+J+UyRigMqYj0wjmxUlqj183hinAoGBAMYMOBgF77OXRII7GAuEut/nBeh2sBrgyzR7FmJMs5kvRh6Ck8wp3ysgMvX4lxh1ep8iCw1R2cguqNATr1klOdsCTOE9RrhuvOp3JrYzuIAK6MpH/uBICy4w1rW2+gQySsHcH40r+tNaTFQ7dQ1tef//iy/IW8v8i0t+csztE1JnAoGABdtWYt8FOYP688+jUmdjWWSvVcq0NjYeMfaGTOX/DsNTL2HyXhW/Uq4nNnBDNmAz2CjMbZwt0y+5ICkj+2REVQVUinAEinTcAe5+LKXNPx4sbX3hcrJUbk0m+rSu4G0B/f5cyXBsi9wFCAzDdHgBduCepxSr04Sc9Hde1uQQi7kCgYB0U20HP0Vh+TG2RLuE2HtjVDD2L/CUeQEiXEHzjxXWnhvTg+MIAnggvpLwQwmMxkQ2ACr5sd/3YuCpB0bxV5o594nsqq9FWVYBaecFEjAGlWHSnqMoXWijwu/6X/VOTbP3VjH6G6ECT4GR4DKKpokIQrMgZ9DzaezvdOA9WesFdQKBgQCWfeOQTitRJ0NZACFUn3Fs3Rvgc9eN9YSWj4RtqkmGPMPvguWo+SKhlk3IbYjrRBc5WVOdoX8JXb2/+nAGhPCuUZckWVmZe5pMSr4EkNQdYeY8kOXGSjoTOUH34ZdKeS+e399BkBWIiXUejX/Srln0H4KoHnTWgxwNpTsBCgXu8Q==\";    \n    var rsa = new RSAHelper(RSAType.RSA2,Encoding.UTF8, privateKey, publicKey);    \n    string str = \"博客园 http://www.cnblogs.com/\";   \n    Console.WriteLine(\"原始字符串：\"+str);    \n    \n    //加密    \n    string enStr = rsa.Encrypt(str);    \n    Console.WriteLine(\"加密字符串：\"+enStr);    \n    \n    //解密    \n    string deStr = rsa.Decrypt(enStr);    \n    Console.WriteLine(\"解密字符串：\"+deStr);    \n    \n    //私钥签名    \n    string signStr = rsa.Sign(str);    \n    Console.WriteLine(\"字符串签名：\" + signStr);    \n    \n    //公钥验证签名    \n    bool signVerify = rsa.Verify(str,signStr);    \n    Console.WriteLine(\"验证签名：\" + signVerify);    \n    Console.ReadKey(); \n}\n```","source":"_posts/Net-Core-RSA-RSA2算法.md","raw":"---\ntitle: .Net Core RSA/RSA2算法\ndate: 2018-03-08 18:24:12\ncategories: .Net Core\ntags:\n - .Net Core\n - RSA算法\n---\nRSA2是在原来SHA1WithRSA签名算法的基础上,新增了支持SHA256WithRSA的签名算法.该算法比该SHA1WithRSA有更强的安全能力.\n<!--more-->\n###### RSA加解密 使用OpenSSL的公钥加密/私钥解密\n```cs\npublic class RSAHelper\n{\n    private readonly RSA_privateKeyRsaProvider;\n    \n    private readonly RSA_publicKeyRsaProvider;\n\n    private readonly HashAlgorithmName_hashAlgorithmName;\n\n    private readonly Encoding _encoding;\n\n    /// <summary>\n    /// 实例化RSAHelper\n    /// </summary>\n    /// <param name=\"rsaType\">加密算法类型RSA SHA1;RSA2 SHA256 密钥长度至少为2048</param>\n    /// <param name=\"encoding\">编码类型</param>\n    /// <param name=\"privateKey\">私钥</param>\n    /// <param name=\"publicKey\">公钥</param>\n    public RSAHelper(RSAType rsaType,Encoding encoding,string privateKey,string publicKey = null)\n    {\n        _encoding = encoding;\n        if(!string.IsNullOrEmpty(privateKey))\n        {\n            _privateKeyRsaProvider = CreateRsaProviderFromPrivateKey(privateKey);\n        }\n        if(!string.IsNullOrEmpty(publicKey))\n        {\n            _publicKeyRsaProvider = CreateRsaProviderFromPublicKey(publicKey);\n        }\n\n        _hashAlgorithName = rsaType == RSAType.RSA?HashAlgorithmName.SHA1:HashAlgorithName.SHA256;\n    }\n\n    /// <summary>\n    /// 使用私钥签名\n    /// </summary>\n    /// <param name=\"data\">原始数据</param>\n    /// <returns></returns>\n    public string Sign(string data)\n    {\n        byte[] dataBytes = _encoding.GetBytes(data);\n\n        var signatureBytes = _privateKeyRsaProvider.SignData(dataBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);\n        return Convert.ToBase64String(signatureBytes);\n    }\n\n    /// <summary>\n    /// 使用公钥签名\n    /// </summary>\n    /// <param name=\"data\">原始数据</param>\n    /// <param name=\"sign\">签名</param>\n    /// <returns></returns>\n    public bool Verify(stringt data,string sign)\n    {\n        byte[] dataBytes = _encoding.GetBytes(data);\n\n        byte[] signBytes = Convert.FromBase64String(sign);\n        var verify = _publicKeyRsaProvider.VerifyData(dataBytes,signBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);\n        return varify;\n    }\n\n    // 解密\n    public string Decrypt(string cipherText)\n    {\n        if(_privateKeyRsaProvider == null)\n        {\n            throw new Exception(\"_privateKeyRsaProvider is null\");\n        }\n        return Encoding.UTF8.GetString(_privateKeyRsaProvider.Decrypt(Convert.FromBase64String(cipherText), RSAEncryptionPadding.Pkcs1));\n    }\n\n    // 加密\n    public string Encrypt(string text)\n    {\n        if(_publicKeyRsaProvider == null)\n        {\n            throw new Exception(\"_publicKeyRsaProvider is null\");\n        }\n        return Convert.ToBase64String(_publicKeyRsaProvider.Encrypt(Encoding.UTF8.GetBytes(text), RSAEncryptionPadding.Pkcs1));\n    }\n\n    // 使用私钥创建RSA实例    \n    public RSA CreateRsaProviderFromPrivateKey(string privateKey)    {        \n        var privateKeyBits = Convert.FromBase64String(privateKey);\n        var rsa = RSA.Create();      \n        var rsaParameters = new RSAParameters();  \n        using (BinaryReader binr = new BinaryReader(new MemoryStream(privateKeyBits)))        \n        {            \n            byte bt = 0;       \n            ushort twobytes = 0;            \n            twobytes = binr.ReadUInt16();      \n            if (twobytes == 0x8130)             \n            {   \n                binr.ReadByte();\n            }      \n            else if (twobytes == 0x8230)   \n            {             \n                binr.ReadInt16();\n            }        \n            else            \n            {    \n                throw new Exception(\"Unexpected value read binr.ReadUInt16()\"); \n            }           \n            twobytes = binr.ReadUInt16();      \n            \n            if (twobytes != 0x0102)      \n            {\n                throw new Exception(\"Unexpected version\");\n            }            \n            bt = binr.ReadByte();        \n\n            if (bt != 0x00)  \n            {\n                throw new Exception(\"Unexpected value read binr.ReadByte()\");\n            }            \n            rsaParameters.Modulus = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.Exponent = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.D = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.P = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.Q = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.DP = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.DQ = binr.ReadBytes(GetIntegerSize(binr));            \n            rsaParameters.InverseQ = binr.ReadBytes(GetIntegerSize(binr));        \n        }        \n        rsa.ImportParameters(rsaParameters);    \n        return rsa;    \n    }\n        \n    // 使用公钥创建RSA实例    \n    public RSA CreateRsaProviderFromPublicKey(string publicKeyString)   \n    {        \n        // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = \"1.2.840.113549.1.1.1\"        \n        byte[] seqOid = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };    \n\n        byte[] seq = new byte[15];      \n\n        var x509Key = Convert.FromBase64String(publicKeyString);        \n        // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------        \n        using (MemoryStream mem = new MemoryStream(x509Key))        \n        {            \n            using (BinaryReader binr = new BinaryReader(mem))  //wrap Memory Stream with BinaryReader for easy reading            \n            {                \n                byte bt = 0;                \n                ushort twobytes = 0;                \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)                    \n                {\n                    binr.ReadByte();\n                }    \n                //advance 1 byte                \n                else if (twobytes == 0x8230)             \n                {       \n                    binr.ReadInt16(); \n                }  \n                //advance 2 bytes                \n                else     \n                {               \n                    return null;\n                }                \n                seq = binr.ReadBytes(15);       \n                //read the Sequence OID                \n                if (!CompareBytearrays(seq, seqOid))   \n                { \n                    //make sure Sequence for OID is correct                    \n                    return null;  \n                }              \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8103) \n                {\n                    //data read as little endian order (actual data order for Bit String is 03 81)                    \n                    binr.ReadByte();\n                }    \n                //advance 1 byte                \n                else if (twobytes == 0x8203)                 \n                {   \n                    binr.ReadInt16();  \n                } \n                //advance 2 bytes                \n                else                \n                {    \n                    return null;  \n                }              \n                bt = binr.ReadByte();                \n                if (bt != 0x00)     \n                //expect null byte next                \n                {    \n                    return null;   \n                }             \n                twobytes = binr.ReadUInt16();                \n                if (twobytes == 0x8130) \n                //data read as little endian order (actual data order for Sequence is 30 81)                  \n                {  \n                    binr.ReadByte();   \n                } \n                //advance 1 byte                \n                else if (twobytes == 0x8230)                    \n                {\n                    binr.ReadInt16();  \n                }\n                //advance 2 bytes                \n                else                   \n                { \n                    return null;\n                }                \n                twobytes = binr.ReadUInt16();        \n                byte lowbyte = 0x00;            \n                byte highbyte = 0x00;        \n                \n                if (twobytes == 0x8102) \n                //data read as little endian order (actual data order for Integer is 02 81)                    \n                {\n                    lowbyte = binr.ReadByte(); \n                } \n                // read next bytes which is bytes in modulus                \n                else if (twobytes == 0x8202)                \n                {                    \n                    highbyte = binr.ReadByte(); //advance 2 bytes                    \n                    lowbyte = binr.ReadByte();                \n                }                \n                else\n                {                    \n                    return null;\n                }          \n\n                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   \n                //reverse byte order since asn.1 key uses big endian order                \n                int modsize = BitConverter.ToInt32(modint, 0);                \n                int firstbyte = binr.PeekChar();            \n\n                if (firstbyte == 0x00)                \n                {   \n                    //if first byte (highest order) of modulus is zero, don't include it                    \n                    binr.ReadByte();    \n                    //skip this null byte                    \n                    modsize -= 1;   \n                    //reduce modulus buffer size by 1                }                \n                    byte[] modulus = binr.ReadBytes(modsize);   \n                    //read the modulus bytes                \n                    if (binr.ReadByte() != 0x02)          \n                    //expect an Integer for the exponent data           \n                    {         \n                        return null;\n                    }              \n\n                    int expbytes = (int)binr.ReadByte();    \n\n                    // should only need one byte for actual exponent data (for all useful values)                \n                    byte[] exponent = binr.ReadBytes(expbytes);                \n                    // ------- create RSACryptoServiceProvider instance and initialize with public key -----                \n                    var rsa = RSA.Create();                \n                    RSAParameters rsaKeyInfo = new RSAParameters                \n                    {                    \n                        Modulus = modulus,                    \n                        Exponent = exponent                \n                    };                \n                    rsa.ImportParameters(rsaKeyInfo);        \n                    return rsa;            \n                }        \n            }    \n        } \n           \n        // 导入密钥算法    \n        private int GetIntegerSize(BinaryReader binr)    \n        {      \n            byte bt = 0;        \n            int count = 0;        \n            bt = binr.ReadByte();    \n\n            if (bt != 0x02)          \n            {\n                return 0; \n            }       \n            bt = binr.ReadByte();      \n            if (bt == 0x81)            \n            {\n                count = binr.ReadByte();\n            }  \n            else if (bt == 0x82)        \n            {\n                var highbyte = binr.ReadByte();\n                var lowbyte = binr.ReadByte();\n                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };            \n                count = BitConverter.ToInt32(modint, 0);        \n            }\n            else        \n            {            \n                count = bt;        \n            }\n            while (binr.ReadByte() == 0x00)        \n            {            \n                count -= 1;        \n            }        \n            binr.BaseStream.Seek(-1, SeekOrigin.Current);  \n            return count;    \n        }  \n        \n        private bool CompareBytearrays(byte[] a, byte[] b)    \n        { \n            if (a.Length != b.Length)      \n            {\n                return false;    \n            }\n            int i = 0;    \n\n            foreach (byte c in a)        \n            {\n                if (c != b[i])\n                {\n                    return false; \n                }           \n                i++;        \n            }        \n            return true;    \n        } \n    }\n\n    /// <summary>\n    /// RSA算法类型\n    /// </summary>\n    public enum RSAType \n    {  \n        /// <summary>    \n        /// SHA1    \n        /// </summary>    \n        RSA = 0,\n            \n        /// <summary>    \n        /// RSA2 密钥长度至少为2048    \n        /// SHA256    \n        /// </summary>    \n        RSA2 \n    }\n}\n```\n\n###### 使用\n```cs\nstatic void Main(string[] args)\n{    \n    //2048 公钥    \n    string publicKey = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQAB\";    \n    \n    //2048 私钥    \n    string privateKey = \"MIIEpAIBAAKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQABAoIBAQCRZLUlOUvjIVqYvhznRK1OG6p45s8JY1r+UnPIId2Bt46oSLeUkZvZVeCnfq9k0Bzb8AVGwVPhtPEDh73z3dEYcT/lwjLXAkyPB6gG5ZfI/vvC/k7JYV01+neFmktw2/FIJWjEMMF2dvLNZ/Pm4bX1Dz9SfD/45Hwr8wqrvRzvFZsj5qqOxv9RPAudOYwCwZskKp/GF+L+3Ycod1Wu98imzMZUH+L5dQuDGg3kvf3ljIAegTPoqYBg0imNPYY/EGoFKnbxlK5S5/5uAFb16dGJqAz3XQCz9Is/IWrOTu0etteqV2Ncs8uqPdjed+b0j8CMsr4U1xjwPQ8WwdaJtTkRAoGBANAndgiGZkCVcc9975/AYdgFp35W6D+hGQAZlL6DmnucUFdXbWa/x2rTSEXlkvgk9X/PxOptUYsLJkzysTgfDywZwuIXLm9B3oNmv3bVgPXsgDsvDfaHYCgz0nHK6NSrX2AeX3yO/dFuoZsuk+J+UyRigMqYj0wjmxUlqj183hinAoGBAMYMOBgF77OXRII7GAuEut/nBeh2sBrgyzR7FmJMs5kvRh6Ck8wp3ysgMvX4lxh1ep8iCw1R2cguqNATr1klOdsCTOE9RrhuvOp3JrYzuIAK6MpH/uBICy4w1rW2+gQySsHcH40r+tNaTFQ7dQ1tef//iy/IW8v8i0t+csztE1JnAoGABdtWYt8FOYP688+jUmdjWWSvVcq0NjYeMfaGTOX/DsNTL2HyXhW/Uq4nNnBDNmAz2CjMbZwt0y+5ICkj+2REVQVUinAEinTcAe5+LKXNPx4sbX3hcrJUbk0m+rSu4G0B/f5cyXBsi9wFCAzDdHgBduCepxSr04Sc9Hde1uQQi7kCgYB0U20HP0Vh+TG2RLuE2HtjVDD2L/CUeQEiXEHzjxXWnhvTg+MIAnggvpLwQwmMxkQ2ACr5sd/3YuCpB0bxV5o594nsqq9FWVYBaecFEjAGlWHSnqMoXWijwu/6X/VOTbP3VjH6G6ECT4GR4DKKpokIQrMgZ9DzaezvdOA9WesFdQKBgQCWfeOQTitRJ0NZACFUn3Fs3Rvgc9eN9YSWj4RtqkmGPMPvguWo+SKhlk3IbYjrRBc5WVOdoX8JXb2/+nAGhPCuUZckWVmZe5pMSr4EkNQdYeY8kOXGSjoTOUH34ZdKeS+e399BkBWIiXUejX/Srln0H4KoHnTWgxwNpTsBCgXu8Q==\";    \n    var rsa = new RSAHelper(RSAType.RSA2,Encoding.UTF8, privateKey, publicKey);    \n    string str = \"博客园 http://www.cnblogs.com/\";   \n    Console.WriteLine(\"原始字符串：\"+str);    \n    \n    //加密    \n    string enStr = rsa.Encrypt(str);    \n    Console.WriteLine(\"加密字符串：\"+enStr);    \n    \n    //解密    \n    string deStr = rsa.Decrypt(enStr);    \n    Console.WriteLine(\"解密字符串：\"+deStr);    \n    \n    //私钥签名    \n    string signStr = rsa.Sign(str);    \n    Console.WriteLine(\"字符串签名：\" + signStr);    \n    \n    //公钥验证签名    \n    bool signVerify = rsa.Verify(str,signStr);    \n    Console.WriteLine(\"验证签名：\" + signVerify);    \n    Console.ReadKey(); \n}\n```","slug":"Net-Core-RSA-RSA2算法","published":1,"updated":"2018-03-08T15:27:09.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23j0048tkuisirz4aub","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>RSA2是在原来SHA1WithRSA签名算法的基础上,新增了支持SHA256WithRSA的签名算法.该算法比该SHA1WithRSA有更强的安全能力.<br><a id=\"more\"></a></p><h6 id=\"RSA加解密-使用OpenSSL的公钥加密-私钥解密\"><a href=\"#RSA加解密-使用OpenSSL的公钥加密-私钥解密\" class=\"headerlink\" title=\"RSA加解密 使用OpenSSL的公钥加密/私钥解密\"></a>RSA加解密 使用OpenSSL的公钥加密/私钥解密</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">RSAHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RSA_privateKeyRsaProvider;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RSA_publicKeyRsaProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> HashAlgorithmName_hashAlgorithmName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Encoding _encoding;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 实例化RSAHelper</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"rsaType\"&gt;</span>加密算法类型RSA SHA1;RSA2 SHA256 密钥长度至少为2048<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"encoding\"&gt;</span>编码类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"privateKey\"&gt;</span>私钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"publicKey\"&gt;</span>公钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RSAHelper</span>(<span class=\"params\">RSAType rsaType,Encoding encoding,<span class=\"keyword\">string</span> privateKey,<span class=\"keyword\">string</span> publicKey = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _encoding = encoding;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">string</span>.IsNullOrEmpty(privateKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _privateKeyRsaProvider = CreateRsaProviderFromPrivateKey(privateKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">string</span>.IsNullOrEmpty(publicKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _publicKeyRsaProvider = CreateRsaProviderFromPublicKey(publicKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        _hashAlgorithName = rsaType == RSAType.RSA?HashAlgorithmName.SHA1:HashAlgorithName.SHA256;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 使用私钥签名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"data\"&gt;</span>原始数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">Sign</span>(<span class=\"params\"><span class=\"keyword\">string</span> data</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] dataBytes = _encoding.GetBytes(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> signatureBytes = _privateKeyRsaProvider.SignData(dataBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToBase64String(signatureBytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 使用公钥签名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"data\"&gt;</span>原始数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"sign\"&gt;</span>签名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Verify</span>(<span class=\"params\">stringt data,<span class=\"keyword\">string</span> sign</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] dataBytes = _encoding.GetBytes(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] signBytes = Convert.FromBase64String(sign);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> verify = _publicKeyRsaProvider.VerifyData(dataBytes,signBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> varify;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解密</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">Decrypt</span>(<span class=\"params\"><span class=\"keyword\">string</span> cipherText</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_privateKeyRsaProvider == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"_privateKeyRsaProvider is null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Encoding.UTF8.GetString(_privateKeyRsaProvider.Decrypt(Convert.FromBase64String(cipherText), RSAEncryptionPadding.Pkcs1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加密</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">Encrypt</span>(<span class=\"params\"><span class=\"keyword\">string</span> text</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_publicKeyRsaProvider == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"_publicKeyRsaProvider is null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToBase64String(_publicKeyRsaProvider.Encrypt(Encoding.UTF8.GetBytes(text), RSAEncryptionPadding.Pkcs1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用私钥创建RSA实例    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RSA <span class=\"title\">CreateRsaProviderFromPrivateKey</span>(<span class=\"params\"><span class=\"keyword\">string</span> privateKey</span>)    </span>&#123;        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> privateKeyBits = Convert.FromBase64String(privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rsa = RSA.Create();      </span><br><span class=\"line\">        <span class=\"keyword\">var</span> rsaParameters = <span class=\"keyword\">new</span> RSAParameters();  </span><br><span class=\"line\">        <span class=\"keyword\">using</span> (BinaryReader binr = <span class=\"keyword\">new</span> BinaryReader(<span class=\"keyword\">new</span> MemoryStream(privateKeyBits)))        </span><br><span class=\"line\">        &#123;            </span><br><span class=\"line\">            <span class=\"keyword\">byte</span> bt = <span class=\"number\">0</span>;       </span><br><span class=\"line\">            <span class=\"keyword\">ushort</span> twobytes = <span class=\"number\">0</span>;            </span><br><span class=\"line\">            twobytes = binr.ReadUInt16();      </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>)             </span><br><span class=\"line\">            &#123;   </span><br><span class=\"line\">                binr.ReadByte();</span><br><span class=\"line\">            &#125;      </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)   </span><br><span class=\"line\">            &#123;             </span><br><span class=\"line\">                binr.ReadInt16();</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            <span class=\"keyword\">else</span>            </span><br><span class=\"line\">            &#123;    </span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Unexpected value read binr.ReadUInt16()\"</span>); </span><br><span class=\"line\">            &#125;           </span><br><span class=\"line\">            twobytes = binr.ReadUInt16();      </span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (twobytes != <span class=\"number\">0x0102</span>)      </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Unexpected version\"</span>);</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            bt = binr.ReadByte();        </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x00</span>)  </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Unexpected value read binr.ReadByte()\"</span>);</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            rsaParameters.Modulus = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.Exponent = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.D = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.P = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.Q = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.DP = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.DQ = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.InverseQ = binr.ReadBytes(GetIntegerSize(binr));        </span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">        rsa.ImportParameters(rsaParameters);    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> rsa;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 使用公钥创建RSA实例    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RSA <span class=\"title\">CreateRsaProviderFromPublicKey</span>(<span class=\"params\"><span class=\"keyword\">string</span> publicKeyString</span>)   </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;        </span><br><span class=\"line\">        <span class=\"comment\">// encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = \"1.2.840.113549.1.1.1\"        </span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] seqOid = &#123; <span class=\"number\">0x30</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x06</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x2A</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0xF7</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0x00</span> &#125;;    </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] seq = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">15</span>];      </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> x509Key = Convert.FromBase64String(publicKeyString);        </span><br><span class=\"line\">        <span class=\"comment\">// ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------        </span></span><br><span class=\"line\">        <span class=\"keyword\">using</span> (MemoryStream mem = <span class=\"keyword\">new</span> MemoryStream(x509Key))        </span><br><span class=\"line\">        &#123;            </span><br><span class=\"line\">            <span class=\"keyword\">using</span> (BinaryReader binr = <span class=\"keyword\">new</span> BinaryReader(mem))  <span class=\"comment\">//wrap Memory Stream with BinaryReader for easy reading            </span></span><br><span class=\"line\">            &#123;                </span><br><span class=\"line\">                <span class=\"keyword\">byte</span> bt = <span class=\"number\">0</span>;                </span><br><span class=\"line\">                <span class=\"keyword\">ushort</span> twobytes = <span class=\"number\">0</span>;                </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>) <span class=\"comment\">//data read as little endian order (actual data order for Sequence is 30 81)                    </span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    binr.ReadByte();</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)             </span><br><span class=\"line\">                &#123;       </span><br><span class=\"line\">                    binr.ReadInt16(); </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>     </span><br><span class=\"line\">                &#123;               </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                seq = binr.ReadBytes(<span class=\"number\">15</span>);       </span><br><span class=\"line\">                <span class=\"comment\">//read the Sequence OID                </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!CompareBytearrays(seq, seqOid))   </span><br><span class=\"line\">                &#123; </span><br><span class=\"line\">                    <span class=\"comment\">//make sure Sequence for OID is correct                    </span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8103</span>) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//data read as little endian order (actual data order for Bit String is 03 81)                    </span></span><br><span class=\"line\">                    binr.ReadByte();</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8203</span>)                 </span><br><span class=\"line\">                &#123;   </span><br><span class=\"line\">                    binr.ReadInt16();  </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>                </span><br><span class=\"line\">                &#123;    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                bt = binr.ReadByte();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x00</span>)     </span><br><span class=\"line\">                <span class=\"comment\">//expect null byte next                </span></span><br><span class=\"line\">                &#123;    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;   </span><br><span class=\"line\">                &#125;             </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>) </span><br><span class=\"line\">                <span class=\"comment\">//data read as little endian order (actual data order for Sequence is 30 81)                  </span></span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">                    binr.ReadByte();   </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)                    </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    binr.ReadInt16();  </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>                   </span><br><span class=\"line\">                &#123; </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();        </span><br><span class=\"line\">                <span class=\"keyword\">byte</span> lowbyte = <span class=\"number\">0x00</span>;            </span><br><span class=\"line\">                <span class=\"keyword\">byte</span> highbyte = <span class=\"number\">0x00</span>;        </span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8102</span>) </span><br><span class=\"line\">                <span class=\"comment\">//data read as little endian order (actual data order for Integer is 02 81)                    </span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    lowbyte = binr.ReadByte(); </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">// read next bytes which is bytes in modulus                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8202</span>)                </span><br><span class=\"line\">                &#123;                    </span><br><span class=\"line\">                    highbyte = binr.ReadByte(); <span class=\"comment\">//advance 2 bytes                    </span></span><br><span class=\"line\">                    lowbyte = binr.ReadByte();                </span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;                    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;          </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] modint = &#123; lowbyte, highbyte, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span> &#125;;   </span><br><span class=\"line\">                <span class=\"comment\">//reverse byte order since asn.1 key uses big endian order                </span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> modsize = BitConverter.ToInt32(modint, <span class=\"number\">0</span>);                </span><br><span class=\"line\">                <span class=\"keyword\">int</span> firstbyte = binr.PeekChar();            </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (firstbyte == <span class=\"number\">0x00</span>)                </span><br><span class=\"line\">                &#123;   </span><br><span class=\"line\">                    <span class=\"comment\">//if first byte (highest order) of modulus is zero, don't include it                    </span></span><br><span class=\"line\">                    binr.ReadByte();    </span><br><span class=\"line\">                    <span class=\"comment\">//skip this null byte                    </span></span><br><span class=\"line\">                    modsize -= <span class=\"number\">1</span>;   </span><br><span class=\"line\">                    <span class=\"comment\">//reduce modulus buffer size by 1                &#125;                </span></span><br><span class=\"line\">                    <span class=\"keyword\">byte</span>[] modulus = binr.ReadBytes(modsize);   </span><br><span class=\"line\">                    <span class=\"comment\">//read the modulus bytes                </span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binr.ReadByte() != <span class=\"number\">0x02</span>)          </span><br><span class=\"line\">                    <span class=\"comment\">//expect an Integer for the exponent data           </span></span><br><span class=\"line\">                    &#123;         </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    &#125;              </span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> expbytes = (<span class=\"keyword\">int</span>)binr.ReadByte();    </span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// should only need one byte for actual exponent data (for all useful values)                </span></span><br><span class=\"line\">                    <span class=\"keyword\">byte</span>[] exponent = binr.ReadBytes(expbytes);                </span><br><span class=\"line\">                    <span class=\"comment\">// ------- create RSACryptoServiceProvider instance and initialize with public key -----                </span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> rsa = RSA.Create();                </span><br><span class=\"line\">                    RSAParameters rsaKeyInfo = <span class=\"keyword\">new</span> RSAParameters                </span><br><span class=\"line\">                    &#123;                    </span><br><span class=\"line\">                        Modulus = modulus,                    </span><br><span class=\"line\">                        Exponent = exponent                </span><br><span class=\"line\">                    &#125;;                </span><br><span class=\"line\">                    rsa.ImportParameters(rsaKeyInfo);        </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> rsa;            </span><br><span class=\"line\">                &#125;        </span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">           </span><br><span class=\"line\">        <span class=\"comment\">// 导入密钥算法    </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">GetIntegerSize</span>(<span class=\"params\">BinaryReader binr</span>)    </span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;      </span><br><span class=\"line\">            <span class=\"keyword\">byte</span> bt = <span class=\"number\">0</span>;        </span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;        </span><br><span class=\"line\">            bt = binr.ReadByte();    </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x02</span>)          </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">            &#125;       </span><br><span class=\"line\">            bt = binr.ReadByte();      </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt == <span class=\"number\">0x81</span>)            </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                count = binr.ReadByte();</span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bt == <span class=\"number\">0x82</span>)        </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> highbyte = binr.ReadByte();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> lowbyte = binr.ReadByte();</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] modint = &#123; lowbyte, highbyte, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span> &#125;;            </span><br><span class=\"line\">                count = BitConverter.ToInt32(modint, <span class=\"number\">0</span>);        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>        </span><br><span class=\"line\">            &#123;            </span><br><span class=\"line\">                count = bt;        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (binr.ReadByte() == <span class=\"number\">0x00</span>)        </span><br><span class=\"line\">            &#123;            </span><br><span class=\"line\">                count -= <span class=\"number\">1</span>;        </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            binr.BaseStream.Seek(<span class=\"number\">-1</span>, SeekOrigin.Current);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;    </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> <span class=\"title\">CompareBytearrays</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] a, <span class=\"keyword\">byte</span>[] b</span>)    </span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a.Length != b.Length)      </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;    </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">byte</span> c <span class=\"keyword\">in</span> a)        </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c != b[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">                &#125;           </span><br><span class=\"line\">                i++;        </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;    </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> RSA算法类型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> RSAType </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span>    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SHA1    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span>    </span></span><br><span class=\"line\">        RSA = <span class=\"number\">0</span>,</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span>    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> RSA2 密钥长度至少为2048    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SHA256    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span>    </span></span><br><span class=\"line\">        RSA2 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;    </span><br><span class=\"line\">    <span class=\"comment\">//2048 公钥    </span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> publicKey = <span class=\"string\">\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQAB\"</span>;    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2048 私钥    </span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> privateKey = <span class=\"string\">\"MIIEpAIBAAKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQABAoIBAQCRZLUlOUvjIVqYvhznRK1OG6p45s8JY1r+UnPIId2Bt46oSLeUkZvZVeCnfq9k0Bzb8AVGwVPhtPEDh73z3dEYcT/lwjLXAkyPB6gG5ZfI/vvC/k7JYV01+neFmktw2/FIJWjEMMF2dvLNZ/Pm4bX1Dz9SfD/45Hwr8wqrvRzvFZsj5qqOxv9RPAudOYwCwZskKp/GF+L+3Ycod1Wu98imzMZUH+L5dQuDGg3kvf3ljIAegTPoqYBg0imNPYY/EGoFKnbxlK5S5/5uAFb16dGJqAz3XQCz9Is/IWrOTu0etteqV2Ncs8uqPdjed+b0j8CMsr4U1xjwPQ8WwdaJtTkRAoGBANAndgiGZkCVcc9975/AYdgFp35W6D+hGQAZlL6DmnucUFdXbWa/x2rTSEXlkvgk9X/PxOptUYsLJkzysTgfDywZwuIXLm9B3oNmv3bVgPXsgDsvDfaHYCgz0nHK6NSrX2AeX3yO/dFuoZsuk+J+UyRigMqYj0wjmxUlqj183hinAoGBAMYMOBgF77OXRII7GAuEut/nBeh2sBrgyzR7FmJMs5kvRh6Ck8wp3ysgMvX4lxh1ep8iCw1R2cguqNATr1klOdsCTOE9RrhuvOp3JrYzuIAK6MpH/uBICy4w1rW2+gQySsHcH40r+tNaTFQ7dQ1tef//iy/IW8v8i0t+csztE1JnAoGABdtWYt8FOYP688+jUmdjWWSvVcq0NjYeMfaGTOX/DsNTL2HyXhW/Uq4nNnBDNmAz2CjMbZwt0y+5ICkj+2REVQVUinAEinTcAe5+LKXNPx4sbX3hcrJUbk0m+rSu4G0B/f5cyXBsi9wFCAzDdHgBduCepxSr04Sc9Hde1uQQi7kCgYB0U20HP0Vh+TG2RLuE2HtjVDD2L/CUeQEiXEHzjxXWnhvTg+MIAnggvpLwQwmMxkQ2ACr5sd/3YuCpB0bxV5o594nsqq9FWVYBaecFEjAGlWHSnqMoXWijwu/6X/VOTbP3VjH6G6ECT4GR4DKKpokIQrMgZ9DzaezvdOA9WesFdQKBgQCWfeOQTitRJ0NZACFUn3Fs3Rvgc9eN9YSWj4RtqkmGPMPvguWo+SKhlk3IbYjrRBc5WVOdoX8JXb2/+nAGhPCuUZckWVmZe5pMSr4EkNQdYeY8kOXGSjoTOUH34ZdKeS+e399BkBWIiXUejX/Srln0H4KoHnTWgxwNpTsBCgXu8Q==\"</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> rsa = <span class=\"keyword\">new</span> RSAHelper(RSAType.RSA2,Encoding.UTF8, privateKey, publicKey);    </span><br><span class=\"line\">    <span class=\"keyword\">string</span> str = <span class=\"string\">\"博客园 http://www.cnblogs.com/\"</span>;   </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"原始字符串：\"</span>+str);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//加密    </span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> enStr = rsa.Encrypt(str);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"加密字符串：\"</span>+enStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//解密    </span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> deStr = rsa.Decrypt(enStr);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"解密字符串：\"</span>+deStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//私钥签名    </span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> signStr = rsa.Sign(str);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"字符串签名：\"</span> + signStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//公钥验证签名    </span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> signVerify = rsa.Verify(str,signStr);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"验证签名：\"</span> + signVerify);    </span><br><span class=\"line\">    Console.ReadKey(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>RSA2是在原来SHA1WithRSA签名算法的基础上,新增了支持SHA256WithRSA的签名算法.该算法比该SHA1WithRSA有更强的安全能力.<br>","more":"</p><h6 id=\"RSA加解密-使用OpenSSL的公钥加密-私钥解密\"><a href=\"#RSA加解密-使用OpenSSL的公钥加密-私钥解密\" class=\"headerlink\" title=\"RSA加解密 使用OpenSSL的公钥加密/私钥解密\"></a>RSA加解密 使用OpenSSL的公钥加密/私钥解密</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">RSAHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RSA_privateKeyRsaProvider;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RSA_publicKeyRsaProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> HashAlgorithmName_hashAlgorithmName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Encoding _encoding;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 实例化RSAHelper</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"rsaType\"&gt;</span>加密算法类型RSA SHA1;RSA2 SHA256 密钥长度至少为2048<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"encoding\"&gt;</span>编码类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"privateKey\"&gt;</span>私钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"publicKey\"&gt;</span>公钥<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RSAHelper</span>(<span class=\"params\">RSAType rsaType,Encoding encoding,<span class=\"keyword\">string</span> privateKey,<span class=\"keyword\">string</span> publicKey = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _encoding = encoding;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">string</span>.IsNullOrEmpty(privateKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _privateKeyRsaProvider = CreateRsaProviderFromPrivateKey(privateKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">string</span>.IsNullOrEmpty(publicKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _publicKeyRsaProvider = CreateRsaProviderFromPublicKey(publicKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        _hashAlgorithName = rsaType == RSAType.RSA?HashAlgorithmName.SHA1:HashAlgorithName.SHA256;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 使用私钥签名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"data\"&gt;</span>原始数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">Sign</span>(<span class=\"params\"><span class=\"keyword\">string</span> data</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] dataBytes = _encoding.GetBytes(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> signatureBytes = _privateKeyRsaProvider.SignData(dataBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToBase64String(signatureBytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 使用公钥签名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"data\"&gt;</span>原始数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"sign\"&gt;</span>签名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Verify</span>(<span class=\"params\">stringt data,<span class=\"keyword\">string</span> sign</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] dataBytes = _encoding.GetBytes(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] signBytes = Convert.FromBase64String(sign);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> verify = _publicKeyRsaProvider.VerifyData(dataBytes,signBytes,_hashAlgorithmName,RSASignaturePadding.Pkcs1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> varify;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解密</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">Decrypt</span>(<span class=\"params\"><span class=\"keyword\">string</span> cipherText</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_privateKeyRsaProvider == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"_privateKeyRsaProvider is null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Encoding.UTF8.GetString(_privateKeyRsaProvider.Decrypt(Convert.FromBase64String(cipherText), RSAEncryptionPadding.Pkcs1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加密</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">Encrypt</span>(<span class=\"params\"><span class=\"keyword\">string</span> text</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_publicKeyRsaProvider == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"_publicKeyRsaProvider is null\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToBase64String(_publicKeyRsaProvider.Encrypt(Encoding.UTF8.GetBytes(text), RSAEncryptionPadding.Pkcs1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用私钥创建RSA实例    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RSA <span class=\"title\">CreateRsaProviderFromPrivateKey</span>(<span class=\"params\"><span class=\"keyword\">string</span> privateKey</span>)    </span>&#123;        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> privateKeyBits = Convert.FromBase64String(privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rsa = RSA.Create();      </span><br><span class=\"line\">        <span class=\"keyword\">var</span> rsaParameters = <span class=\"keyword\">new</span> RSAParameters();  </span><br><span class=\"line\">        <span class=\"keyword\">using</span> (BinaryReader binr = <span class=\"keyword\">new</span> BinaryReader(<span class=\"keyword\">new</span> MemoryStream(privateKeyBits)))        </span><br><span class=\"line\">        &#123;            </span><br><span class=\"line\">            <span class=\"keyword\">byte</span> bt = <span class=\"number\">0</span>;       </span><br><span class=\"line\">            <span class=\"keyword\">ushort</span> twobytes = <span class=\"number\">0</span>;            </span><br><span class=\"line\">            twobytes = binr.ReadUInt16();      </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>)             </span><br><span class=\"line\">            &#123;   </span><br><span class=\"line\">                binr.ReadByte();</span><br><span class=\"line\">            &#125;      </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)   </span><br><span class=\"line\">            &#123;             </span><br><span class=\"line\">                binr.ReadInt16();</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            <span class=\"keyword\">else</span>            </span><br><span class=\"line\">            &#123;    </span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Unexpected value read binr.ReadUInt16()\"</span>); </span><br><span class=\"line\">            &#125;           </span><br><span class=\"line\">            twobytes = binr.ReadUInt16();      </span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (twobytes != <span class=\"number\">0x0102</span>)      </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Unexpected version\"</span>);</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            bt = binr.ReadByte();        </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x00</span>)  </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Unexpected value read binr.ReadByte()\"</span>);</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            rsaParameters.Modulus = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.Exponent = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.D = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.P = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.Q = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.DP = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.DQ = binr.ReadBytes(GetIntegerSize(binr));            </span><br><span class=\"line\">            rsaParameters.InverseQ = binr.ReadBytes(GetIntegerSize(binr));        </span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">        rsa.ImportParameters(rsaParameters);    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> rsa;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 使用公钥创建RSA实例    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RSA <span class=\"title\">CreateRsaProviderFromPublicKey</span>(<span class=\"params\"><span class=\"keyword\">string</span> publicKeyString</span>)   </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;        </span><br><span class=\"line\">        <span class=\"comment\">// encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = \"1.2.840.113549.1.1.1\"        </span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] seqOid = &#123; <span class=\"number\">0x30</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x06</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x2A</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x86</span>, <span class=\"number\">0xF7</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x05</span>, <span class=\"number\">0x00</span> &#125;;    </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] seq = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">15</span>];      </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> x509Key = Convert.FromBase64String(publicKeyString);        </span><br><span class=\"line\">        <span class=\"comment\">// ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------        </span></span><br><span class=\"line\">        <span class=\"keyword\">using</span> (MemoryStream mem = <span class=\"keyword\">new</span> MemoryStream(x509Key))        </span><br><span class=\"line\">        &#123;            </span><br><span class=\"line\">            <span class=\"keyword\">using</span> (BinaryReader binr = <span class=\"keyword\">new</span> BinaryReader(mem))  <span class=\"comment\">//wrap Memory Stream with BinaryReader for easy reading            </span></span><br><span class=\"line\">            &#123;                </span><br><span class=\"line\">                <span class=\"keyword\">byte</span> bt = <span class=\"number\">0</span>;                </span><br><span class=\"line\">                <span class=\"keyword\">ushort</span> twobytes = <span class=\"number\">0</span>;                </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>) <span class=\"comment\">//data read as little endian order (actual data order for Sequence is 30 81)                    </span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    binr.ReadByte();</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)             </span><br><span class=\"line\">                &#123;       </span><br><span class=\"line\">                    binr.ReadInt16(); </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>     </span><br><span class=\"line\">                &#123;               </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                seq = binr.ReadBytes(<span class=\"number\">15</span>);       </span><br><span class=\"line\">                <span class=\"comment\">//read the Sequence OID                </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!CompareBytearrays(seq, seqOid))   </span><br><span class=\"line\">                &#123; </span><br><span class=\"line\">                    <span class=\"comment\">//make sure Sequence for OID is correct                    </span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8103</span>) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//data read as little endian order (actual data order for Bit String is 03 81)                    </span></span><br><span class=\"line\">                    binr.ReadByte();</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8203</span>)                 </span><br><span class=\"line\">                &#123;   </span><br><span class=\"line\">                    binr.ReadInt16();  </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>                </span><br><span class=\"line\">                &#123;    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                bt = binr.ReadByte();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x00</span>)     </span><br><span class=\"line\">                <span class=\"comment\">//expect null byte next                </span></span><br><span class=\"line\">                &#123;    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;   </span><br><span class=\"line\">                &#125;             </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8130</span>) </span><br><span class=\"line\">                <span class=\"comment\">//data read as little endian order (actual data order for Sequence is 30 81)                  </span></span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">                    binr.ReadByte();   </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">//advance 1 byte                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8230</span>)                    </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    binr.ReadInt16();  </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//advance 2 bytes                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>                   </span><br><span class=\"line\">                &#123; </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                twobytes = binr.ReadUInt16();        </span><br><span class=\"line\">                <span class=\"keyword\">byte</span> lowbyte = <span class=\"number\">0x00</span>;            </span><br><span class=\"line\">                <span class=\"keyword\">byte</span> highbyte = <span class=\"number\">0x00</span>;        </span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8102</span>) </span><br><span class=\"line\">                <span class=\"comment\">//data read as little endian order (actual data order for Integer is 02 81)                    </span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    lowbyte = binr.ReadByte(); </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">// read next bytes which is bytes in modulus                </span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twobytes == <span class=\"number\">0x8202</span>)                </span><br><span class=\"line\">                &#123;                    </span><br><span class=\"line\">                    highbyte = binr.ReadByte(); <span class=\"comment\">//advance 2 bytes                    </span></span><br><span class=\"line\">                    lowbyte = binr.ReadByte();                </span><br><span class=\"line\">                &#125;                </span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;                    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;          </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] modint = &#123; lowbyte, highbyte, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span> &#125;;   </span><br><span class=\"line\">                <span class=\"comment\">//reverse byte order since asn.1 key uses big endian order                </span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> modsize = BitConverter.ToInt32(modint, <span class=\"number\">0</span>);                </span><br><span class=\"line\">                <span class=\"keyword\">int</span> firstbyte = binr.PeekChar();            </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (firstbyte == <span class=\"number\">0x00</span>)                </span><br><span class=\"line\">                &#123;   </span><br><span class=\"line\">                    <span class=\"comment\">//if first byte (highest order) of modulus is zero, don't include it                    </span></span><br><span class=\"line\">                    binr.ReadByte();    </span><br><span class=\"line\">                    <span class=\"comment\">//skip this null byte                    </span></span><br><span class=\"line\">                    modsize -= <span class=\"number\">1</span>;   </span><br><span class=\"line\">                    <span class=\"comment\">//reduce modulus buffer size by 1                &#125;                </span></span><br><span class=\"line\">                    <span class=\"keyword\">byte</span>[] modulus = binr.ReadBytes(modsize);   </span><br><span class=\"line\">                    <span class=\"comment\">//read the modulus bytes                </span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binr.ReadByte() != <span class=\"number\">0x02</span>)          </span><br><span class=\"line\">                    <span class=\"comment\">//expect an Integer for the exponent data           </span></span><br><span class=\"line\">                    &#123;         </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    &#125;              </span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> expbytes = (<span class=\"keyword\">int</span>)binr.ReadByte();    </span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// should only need one byte for actual exponent data (for all useful values)                </span></span><br><span class=\"line\">                    <span class=\"keyword\">byte</span>[] exponent = binr.ReadBytes(expbytes);                </span><br><span class=\"line\">                    <span class=\"comment\">// ------- create RSACryptoServiceProvider instance and initialize with public key -----                </span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> rsa = RSA.Create();                </span><br><span class=\"line\">                    RSAParameters rsaKeyInfo = <span class=\"keyword\">new</span> RSAParameters                </span><br><span class=\"line\">                    &#123;                    </span><br><span class=\"line\">                        Modulus = modulus,                    </span><br><span class=\"line\">                        Exponent = exponent                </span><br><span class=\"line\">                    &#125;;                </span><br><span class=\"line\">                    rsa.ImportParameters(rsaKeyInfo);        </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> rsa;            </span><br><span class=\"line\">                &#125;        </span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">           </span><br><span class=\"line\">        <span class=\"comment\">// 导入密钥算法    </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">GetIntegerSize</span>(<span class=\"params\">BinaryReader binr</span>)    </span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;      </span><br><span class=\"line\">            <span class=\"keyword\">byte</span> bt = <span class=\"number\">0</span>;        </span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;        </span><br><span class=\"line\">            bt = binr.ReadByte();    </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt != <span class=\"number\">0x02</span>)          </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">            &#125;       </span><br><span class=\"line\">            bt = binr.ReadByte();      </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bt == <span class=\"number\">0x81</span>)            </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                count = binr.ReadByte();</span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bt == <span class=\"number\">0x82</span>)        </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> highbyte = binr.ReadByte();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> lowbyte = binr.ReadByte();</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] modint = &#123; lowbyte, highbyte, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span> &#125;;            </span><br><span class=\"line\">                count = BitConverter.ToInt32(modint, <span class=\"number\">0</span>);        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>        </span><br><span class=\"line\">            &#123;            </span><br><span class=\"line\">                count = bt;        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (binr.ReadByte() == <span class=\"number\">0x00</span>)        </span><br><span class=\"line\">            &#123;            </span><br><span class=\"line\">                count -= <span class=\"number\">1</span>;        </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            binr.BaseStream.Seek(<span class=\"number\">-1</span>, SeekOrigin.Current);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;    </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> <span class=\"title\">CompareBytearrays</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] a, <span class=\"keyword\">byte</span>[] b</span>)    </span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a.Length != b.Length)      </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;    </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">byte</span> c <span class=\"keyword\">in</span> a)        </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c != b[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">                &#125;           </span><br><span class=\"line\">                i++;        </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;    </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> RSA算法类型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> RSAType </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span>    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SHA1    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span>    </span></span><br><span class=\"line\">        RSA = <span class=\"number\">0</span>,</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span>    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> RSA2 密钥长度至少为2048    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> SHA256    </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span>    </span></span><br><span class=\"line\">        RSA2 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;    </span><br><span class=\"line\">    <span class=\"comment\">//2048 公钥    </span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> publicKey = <span class=\"string\">\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQAB\"</span>;    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2048 私钥    </span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> privateKey = <span class=\"string\">\"MIIEpAIBAAKCAQEAoQh0wEqx/R2H1v00IU12Oc30fosRC/frhH89L6G+fzeaqI19MYQhEPMU13wpeqRONCUta+2iC1sgCNQ9qGGf19yGdZUfueaB1Nu9rdueQKXgVurGHJ+5N71UFm+OP1XcnFUCK4wT5d7ZIifXxuqLehP9Ts6sNjhVfa+yU+VjF5HoIe69OJEPo7OxRZcRTe17khc93Ic+PfyqswQJJlY/bgpcLJQnM+QuHmxNtF7/FpAx9YEQsShsGpVo7JaKgLo+s6AFoJ4QldQKir2vbN9vcKRbG3piElPilWDpjXQkOJZhUloh/jd7QrKFimZFldJ1r6Q59QYUyGKZARUe0KZpMQIDAQABAoIBAQCRZLUlOUvjIVqYvhznRK1OG6p45s8JY1r+UnPIId2Bt46oSLeUkZvZVeCnfq9k0Bzb8AVGwVPhtPEDh73z3dEYcT/lwjLXAkyPB6gG5ZfI/vvC/k7JYV01+neFmktw2/FIJWjEMMF2dvLNZ/Pm4bX1Dz9SfD/45Hwr8wqrvRzvFZsj5qqOxv9RPAudOYwCwZskKp/GF+L+3Ycod1Wu98imzMZUH+L5dQuDGg3kvf3ljIAegTPoqYBg0imNPYY/EGoFKnbxlK5S5/5uAFb16dGJqAz3XQCz9Is/IWrOTu0etteqV2Ncs8uqPdjed+b0j8CMsr4U1xjwPQ8WwdaJtTkRAoGBANAndgiGZkCVcc9975/AYdgFp35W6D+hGQAZlL6DmnucUFdXbWa/x2rTSEXlkvgk9X/PxOptUYsLJkzysTgfDywZwuIXLm9B3oNmv3bVgPXsgDsvDfaHYCgz0nHK6NSrX2AeX3yO/dFuoZsuk+J+UyRigMqYj0wjmxUlqj183hinAoGBAMYMOBgF77OXRII7GAuEut/nBeh2sBrgyzR7FmJMs5kvRh6Ck8wp3ysgMvX4lxh1ep8iCw1R2cguqNATr1klOdsCTOE9RrhuvOp3JrYzuIAK6MpH/uBICy4w1rW2+gQySsHcH40r+tNaTFQ7dQ1tef//iy/IW8v8i0t+csztE1JnAoGABdtWYt8FOYP688+jUmdjWWSvVcq0NjYeMfaGTOX/DsNTL2HyXhW/Uq4nNnBDNmAz2CjMbZwt0y+5ICkj+2REVQVUinAEinTcAe5+LKXNPx4sbX3hcrJUbk0m+rSu4G0B/f5cyXBsi9wFCAzDdHgBduCepxSr04Sc9Hde1uQQi7kCgYB0U20HP0Vh+TG2RLuE2HtjVDD2L/CUeQEiXEHzjxXWnhvTg+MIAnggvpLwQwmMxkQ2ACr5sd/3YuCpB0bxV5o594nsqq9FWVYBaecFEjAGlWHSnqMoXWijwu/6X/VOTbP3VjH6G6ECT4GR4DKKpokIQrMgZ9DzaezvdOA9WesFdQKBgQCWfeOQTitRJ0NZACFUn3Fs3Rvgc9eN9YSWj4RtqkmGPMPvguWo+SKhlk3IbYjrRBc5WVOdoX8JXb2/+nAGhPCuUZckWVmZe5pMSr4EkNQdYeY8kOXGSjoTOUH34ZdKeS+e399BkBWIiXUejX/Srln0H4KoHnTWgxwNpTsBCgXu8Q==\"</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> rsa = <span class=\"keyword\">new</span> RSAHelper(RSAType.RSA2,Encoding.UTF8, privateKey, publicKey);    </span><br><span class=\"line\">    <span class=\"keyword\">string</span> str = <span class=\"string\">\"博客园 http://www.cnblogs.com/\"</span>;   </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"原始字符串：\"</span>+str);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//加密    </span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> enStr = rsa.Encrypt(str);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"加密字符串：\"</span>+enStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//解密    </span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> deStr = rsa.Decrypt(enStr);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"解密字符串：\"</span>+deStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//私钥签名    </span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> signStr = rsa.Sign(str);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"字符串签名：\"</span> + signStr);    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//公钥验证签名    </span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> signVerify = rsa.Verify(str,signStr);    </span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"验证签名：\"</span> + signVerify);    </span><br><span class=\"line\">    Console.ReadKey(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net Core 简单工厂和工厂方法模式","date":"2018-04-14T13:35:44.000Z","_content":"##### 简单工厂的定义\n简单工厂负责创建对象的细节工作,通过传入的类型参数,建立并返回不同类型的对象.\n<!--more-->\n\n##### .Net Core实现简单工厂\n###### Pizza.cs\n```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace SimpleFactory.Pizzas\n{\n    public abstract class Pizza\n    {\n        public string Name { get; protectes set; }\n        public string Dough { get; protectes set; }\n        public string Sauce { get; protectes set; }\n        protected List<string> Toppingd = new List<string>();\n\n        public void Prepare()\n        {\n            Console.WriteLine($\"Preparing:{Name}\");\n            Console.WriteLine($\"Tossing:{Dough}\");\n            Console.WriteLine($\"Adding sauce:{Sauce}\");\n            Console.WriteLine($\"Adding toppings\");\n            Toppings.ForEach(x => Console.WriteLine($\"{x}\"));\n        }\n\n        public void Bake()\n        {\n            Console.WriteLine(\"Bake for 25 minutes\");\n        }\n\n        public void Cut()\n        {\n            Console.WriteLine(\"Cutting the pizza into diagnol slices\");\n        }\n\n        public void Box()\n        {\n            Console.WriteLine(\"Placing pizza in official PizzaStore box......\");\n        }\n    }\n}\n```\n\n###### CheesePizza.cs\n```cs\nnamespace SimpleFactory.Pizzas\n{\n    public class CheesePizza: Pizza\n    {\n        public CheesePizza()\n        {\n            Name = \"Cheese Pizza\";\n            Dough = \"Think Dough\";\n            Sauce = \"Salad\";\n            Toppings.Add(\"Grated ReggianoCheese\");\n        }\n    }\n} \n```\n\n###### ClamPizza.ca\n```cs\nnamespace SimpleFactory.Pizzas\n{\n    public class ClamPizza: Pizza\n    {\n        public ClamPizza()\n        {\n            Name = \"Clam Pizza\";\n            Dough = \"Soft Dough\";\n            Sauce = \"Tomato sauce\";\n            Toppings.Add(\"Shrimp meat\");\n        }\n    }\n} \n```\n\n###### SimplePizzaFactory\n```cs\nusing SimpleFactory.Pizzas;\n\nnamespace SimpleFactory\n{\n    public class SimplePizzaFactory\n    {\n        public Pizza CreatePizza(string type)\n        {\n            Pizza pizza = null;\n            switch(type)\n            {\n                case \"cheese\":\n                    pizza = new CheesePizza();\n                    break;\n                case \"clam\":\n                    pizza = new ClamPizza();\n                    break;\n            }\n            return pizza;\n        }\n    }\n}\n```\n\n###### PizzaStore.cs\n```cs\nusing SimpleFactory.Pizzas;\n\nnamespace SimpleFactory\n{\n    public class PizzaStore\n    {\n        private readonly SimplePizzaFactory _factory;\n\n        public PizzaStore(SimplePizzaFactory factory)\n        {\n            _factory = factory;\n        }\n\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = _factory.CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nnamespace SimpleFactory\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var pizzaStore = new PizzaStore(new SimplePizzaFactory());\n            var cheesePizza = pizzaStore.OrderPizza(\"cheese\");\n            var clamPizza = pizzaStore.OrderPizza(\"clam\");\n            Consloe.ReadKey();\n        }\n    }\n}\n```\n\n##### 工厂方法的定义\n工厂方法把对象创建的动作交给了子类,并让它决定创建哪些对象.\n\n##### .Net Core实现工厂方法\n###### ChicagoCheesePizza.cs\n```cs\nnamespace FactoryMethodPattern.Pizzas\n{\n    public class ChicagoCheesePizza: Pizza\n    {\n        public ChicagoCheesePizza()\n        {\n            Name = \"Chicago Cheese Pizza\";\n            Dough = \"Think Dough\";\n            Sauce = \"Salad\";\n            Toppings.Add(\"Grated ReggianoCheese\");\n        }\n    }\n} \n```\n\n###### ChicagoClamPizza.ca\n```cs\nnamespace FactoryMethodPattern.Pizzas\n{\n    public class ChicagoClamPizza: Pizza\n    {\n        public ChicagoClamPizza()\n        {\n            Name = \"Chicago Clam Pizza\";\n            Dough = \"Soft Dough\";\n            Sauce = \"Tomato sauce\";\n            Toppings.Add(\"Shrimp meat\");\n        }\n    }\n} \n```\n\n###### PizzaStore.cs\n```cs\nusing FactoryMethodPattern.Pizzas;\n\nnamespace FactoryMethodPattern\n{\n    public abstract class PizzaStore\n    {\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n\n        protected abstract Pizza CreatePizza(string type);\n    }\n}\n```\n\n###### ChicagoPizzaStore.cs\n```cs\nusing FactoryMethodPattern.Pizzas;\n\nnamespace FactoryMethodPattern\n{\n    public class ChicagoPizzaStore:PizzaStore\n    {\n        protected override Pizza CreatePizza(string type)\n        {\n            Pizza pizza = null;\n            switch(type)\n            {\n                case \"cheese\":\n                    pizza = new ChicagoCheesePizza();\n                    break;\n                case \"clam\":\n                    pizza = new ChicagoClamPizza();\n                    break;\n            }\n            return pizza;\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nnamespace FactoryMethodPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var chicagoStore = new ChicagoPizzaStore();\n            var cheesePizza = chicagoStore.OrderPizza(\"cheese\");\n            var clamPizza = chicagoStore.OrderPizza(\"clam\");\n            Consloe.ReadKey();\n        }\n    }\n}\n```","source":"_posts/Net-Core-简单工厂和工厂方法模式.md","raw":"---\ntitle: .Net Core 简单工厂和工厂方法模式\ndate: 2018-04-14 21:35:44\ncategories : .Net Core\ntags: \n - .Net Core\n - 设计模式\n---\n##### 简单工厂的定义\n简单工厂负责创建对象的细节工作,通过传入的类型参数,建立并返回不同类型的对象.\n<!--more-->\n\n##### .Net Core实现简单工厂\n###### Pizza.cs\n```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace SimpleFactory.Pizzas\n{\n    public abstract class Pizza\n    {\n        public string Name { get; protectes set; }\n        public string Dough { get; protectes set; }\n        public string Sauce { get; protectes set; }\n        protected List<string> Toppingd = new List<string>();\n\n        public void Prepare()\n        {\n            Console.WriteLine($\"Preparing:{Name}\");\n            Console.WriteLine($\"Tossing:{Dough}\");\n            Console.WriteLine($\"Adding sauce:{Sauce}\");\n            Console.WriteLine($\"Adding toppings\");\n            Toppings.ForEach(x => Console.WriteLine($\"{x}\"));\n        }\n\n        public void Bake()\n        {\n            Console.WriteLine(\"Bake for 25 minutes\");\n        }\n\n        public void Cut()\n        {\n            Console.WriteLine(\"Cutting the pizza into diagnol slices\");\n        }\n\n        public void Box()\n        {\n            Console.WriteLine(\"Placing pizza in official PizzaStore box......\");\n        }\n    }\n}\n```\n\n###### CheesePizza.cs\n```cs\nnamespace SimpleFactory.Pizzas\n{\n    public class CheesePizza: Pizza\n    {\n        public CheesePizza()\n        {\n            Name = \"Cheese Pizza\";\n            Dough = \"Think Dough\";\n            Sauce = \"Salad\";\n            Toppings.Add(\"Grated ReggianoCheese\");\n        }\n    }\n} \n```\n\n###### ClamPizza.ca\n```cs\nnamespace SimpleFactory.Pizzas\n{\n    public class ClamPizza: Pizza\n    {\n        public ClamPizza()\n        {\n            Name = \"Clam Pizza\";\n            Dough = \"Soft Dough\";\n            Sauce = \"Tomato sauce\";\n            Toppings.Add(\"Shrimp meat\");\n        }\n    }\n} \n```\n\n###### SimplePizzaFactory\n```cs\nusing SimpleFactory.Pizzas;\n\nnamespace SimpleFactory\n{\n    public class SimplePizzaFactory\n    {\n        public Pizza CreatePizza(string type)\n        {\n            Pizza pizza = null;\n            switch(type)\n            {\n                case \"cheese\":\n                    pizza = new CheesePizza();\n                    break;\n                case \"clam\":\n                    pizza = new ClamPizza();\n                    break;\n            }\n            return pizza;\n        }\n    }\n}\n```\n\n###### PizzaStore.cs\n```cs\nusing SimpleFactory.Pizzas;\n\nnamespace SimpleFactory\n{\n    public class PizzaStore\n    {\n        private readonly SimplePizzaFactory _factory;\n\n        public PizzaStore(SimplePizzaFactory factory)\n        {\n            _factory = factory;\n        }\n\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = _factory.CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nnamespace SimpleFactory\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var pizzaStore = new PizzaStore(new SimplePizzaFactory());\n            var cheesePizza = pizzaStore.OrderPizza(\"cheese\");\n            var clamPizza = pizzaStore.OrderPizza(\"clam\");\n            Consloe.ReadKey();\n        }\n    }\n}\n```\n\n##### 工厂方法的定义\n工厂方法把对象创建的动作交给了子类,并让它决定创建哪些对象.\n\n##### .Net Core实现工厂方法\n###### ChicagoCheesePizza.cs\n```cs\nnamespace FactoryMethodPattern.Pizzas\n{\n    public class ChicagoCheesePizza: Pizza\n    {\n        public ChicagoCheesePizza()\n        {\n            Name = \"Chicago Cheese Pizza\";\n            Dough = \"Think Dough\";\n            Sauce = \"Salad\";\n            Toppings.Add(\"Grated ReggianoCheese\");\n        }\n    }\n} \n```\n\n###### ChicagoClamPizza.ca\n```cs\nnamespace FactoryMethodPattern.Pizzas\n{\n    public class ChicagoClamPizza: Pizza\n    {\n        public ChicagoClamPizza()\n        {\n            Name = \"Chicago Clam Pizza\";\n            Dough = \"Soft Dough\";\n            Sauce = \"Tomato sauce\";\n            Toppings.Add(\"Shrimp meat\");\n        }\n    }\n} \n```\n\n###### PizzaStore.cs\n```cs\nusing FactoryMethodPattern.Pizzas;\n\nnamespace FactoryMethodPattern\n{\n    public abstract class PizzaStore\n    {\n        public Pizza OrderPizza(string type)\n        {\n            var pizza = CreatePizza(type);\n            pizza.Prepare();\n            pizza.Bake();\n            pizza.Cut();\n            pizza.Box();\n            return pizza;\n        }\n\n        protected abstract Pizza CreatePizza(string type);\n    }\n}\n```\n\n###### ChicagoPizzaStore.cs\n```cs\nusing FactoryMethodPattern.Pizzas;\n\nnamespace FactoryMethodPattern\n{\n    public class ChicagoPizzaStore:PizzaStore\n    {\n        protected override Pizza CreatePizza(string type)\n        {\n            Pizza pizza = null;\n            switch(type)\n            {\n                case \"cheese\":\n                    pizza = new ChicagoCheesePizza();\n                    break;\n                case \"clam\":\n                    pizza = new ChicagoClamPizza();\n                    break;\n            }\n            return pizza;\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nnamespace FactoryMethodPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var chicagoStore = new ChicagoPizzaStore();\n            var cheesePizza = chicagoStore.OrderPizza(\"cheese\");\n            var clamPizza = chicagoStore.OrderPizza(\"clam\");\n            Consloe.ReadKey();\n        }\n    }\n}\n```","slug":"Net-Core-简单工厂和工厂方法模式","published":1,"updated":"2018-04-14T14:52:27.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23l004btkuihet5kl0i","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"简单工厂的定义\"><a href=\"#简单工厂的定义\" class=\"headerlink\" title=\"简单工厂的定义\"></a>简单工厂的定义</h5><p>简单工厂负责创建对象的细节工作,通过传入的类型参数,建立并返回不同类型的对象.<br><a id=\"more\"></a></p><h5 id=\"Net-Core实现简单工厂\"><a href=\"#Net-Core实现简单工厂\" class=\"headerlink\" title=\".Net Core实现简单工厂\"></a>.Net Core实现简单工厂</h5><h6 id=\"Pizza-cs\"><a href=\"#Pizza-cs\" class=\"headerlink\" title=\"Pizza.cs\"></a>Pizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Dough &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Sauce &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> List&lt;<span class=\"keyword\">string</span>&gt; Toppingd = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Prepare</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"Preparing:<span class=\"subst\">&#123;Name&#125;</span>\"</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"Tossing:<span class=\"subst\">&#123;Dough&#125;</span>\"</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"Adding sauce:<span class=\"subst\">&#123;Sauce&#125;</span>\"</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"Adding toppings\"</span>);</span><br><span class=\"line\">            Toppings.ForEach(x =&gt; Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;x&#125;</span>\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Bake</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Bake for 25 minutes\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Cut</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Cutting the pizza into diagnol slices\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Box</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Placing pizza in official PizzaStore box......\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"CheesePizza-cs\"><a href=\"#CheesePizza-cs\" class=\"headerlink\" title=\"CheesePizza.cs\"></a>CheesePizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CheesePizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CheesePizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Name = <span class=\"string\">\"Cheese Pizza\"</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">\"Think Dough\"</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">\"Salad\"</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">\"Grated ReggianoCheese\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"ClamPizza-ca\"><a href=\"#ClamPizza-ca\" class=\"headerlink\" title=\"ClamPizza.ca\"></a>ClamPizza.ca</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ClamPizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClamPizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Name = <span class=\"string\">\"Clam Pizza\"</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">\"Soft Dough\"</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">\"Tomato sauce\"</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">\"Shrimp meat\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"SimplePizzaFactory\"><a href=\"#SimplePizzaFactory\" class=\"headerlink\" title=\"SimplePizzaFactory\"></a>SimplePizzaFactory</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SimpleFactory.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimplePizzaFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Pizza pizza = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"cheese\"</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> CheesePizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"clam\"</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ClamPizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"PizzaStore-cs\"><a href=\"#PizzaStore-cs\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SimpleFactory.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SimplePizzaFactory _factory;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PizzaStore</span>(<span class=\"params\">SimplePizzaFactory factory</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _factory = factory;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = _factory.CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizzaStore = <span class=\"keyword\">new</span> PizzaStore(<span class=\"keyword\">new</span> SimplePizzaFactory());</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cheesePizza = pizzaStore.OrderPizza(<span class=\"string\">\"cheese\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clamPizza = pizzaStore.OrderPizza(<span class=\"string\">\"clam\"</span>);</span><br><span class=\"line\">            Consloe.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"工厂方法的定义\"><a href=\"#工厂方法的定义\" class=\"headerlink\" title=\"工厂方法的定义\"></a>工厂方法的定义</h5><p>工厂方法把对象创建的动作交给了子类,并让它决定创建哪些对象.</p><h5 id=\"Net-Core实现工厂方法\"><a href=\"#Net-Core实现工厂方法\" class=\"headerlink\" title=\".Net Core实现工厂方法\"></a>.Net Core实现工厂方法</h5><h6 id=\"ChicagoCheesePizza-cs\"><a href=\"#ChicagoCheesePizza-cs\" class=\"headerlink\" title=\"ChicagoCheesePizza.cs\"></a>ChicagoCheesePizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoCheesePizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoCheesePizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Name = <span class=\"string\">\"Chicago Cheese Pizza\"</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">\"Think Dough\"</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">\"Salad\"</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">\"Grated ReggianoCheese\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"ChicagoClamPizza-ca\"><a href=\"#ChicagoClamPizza-ca\" class=\"headerlink\" title=\"ChicagoClamPizza.ca\"></a>ChicagoClamPizza.ca</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoClamPizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoClamPizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Name = <span class=\"string\">\"Chicago Clam Pizza\"</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">\"Soft Dough\"</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">\"Tomato sauce\"</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">\"Shrimp meat\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"PizzaStore-cs-1\"><a href=\"#PizzaStore-cs-1\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FactoryMethodPattern.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"ChicagoPizzaStore-cs\"><a href=\"#ChicagoPizzaStore-cs\" class=\"headerlink\" title=\"ChicagoPizzaStore.cs\"></a>ChicagoPizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FactoryMethodPattern.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoPizzaStore</span>:<span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Pizza pizza = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"cheese\"</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ChicagoCheesePizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"clam\"</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ChicagoClamPizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Program-cs-1\"><a href=\"#Program-cs-1\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> chicagoStore = <span class=\"keyword\">new</span> ChicagoPizzaStore();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cheesePizza = chicagoStore.OrderPizza(<span class=\"string\">\"cheese\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clamPizza = chicagoStore.OrderPizza(<span class=\"string\">\"clam\"</span>);</span><br><span class=\"line\">            Consloe.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"简单工厂的定义\"><a href=\"#简单工厂的定义\" class=\"headerlink\" title=\"简单工厂的定义\"></a>简单工厂的定义</h5><p>简单工厂负责创建对象的细节工作,通过传入的类型参数,建立并返回不同类型的对象.<br>","more":"</p><h5 id=\"Net-Core实现简单工厂\"><a href=\"#Net-Core实现简单工厂\" class=\"headerlink\" title=\".Net Core实现简单工厂\"></a>.Net Core实现简单工厂</h5><h6 id=\"Pizza-cs\"><a href=\"#Pizza-cs\" class=\"headerlink\" title=\"Pizza.cs\"></a>Pizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Dough &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Sauce &#123; <span class=\"keyword\">get</span>; protectes <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> List&lt;<span class=\"keyword\">string</span>&gt; Toppingd = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Prepare</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"Preparing:<span class=\"subst\">&#123;Name&#125;</span>\"</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"Tossing:<span class=\"subst\">&#123;Dough&#125;</span>\"</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"Adding sauce:<span class=\"subst\">&#123;Sauce&#125;</span>\"</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"Adding toppings\"</span>);</span><br><span class=\"line\">            Toppings.ForEach(x =&gt; Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;x&#125;</span>\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Bake</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Bake for 25 minutes\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Cut</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Cutting the pizza into diagnol slices\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Box</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Placing pizza in official PizzaStore box......\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"CheesePizza-cs\"><a href=\"#CheesePizza-cs\" class=\"headerlink\" title=\"CheesePizza.cs\"></a>CheesePizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CheesePizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CheesePizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Name = <span class=\"string\">\"Cheese Pizza\"</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">\"Think Dough\"</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">\"Salad\"</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">\"Grated ReggianoCheese\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"ClamPizza-ca\"><a href=\"#ClamPizza-ca\" class=\"headerlink\" title=\"ClamPizza.ca\"></a>ClamPizza.ca</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ClamPizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClamPizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Name = <span class=\"string\">\"Clam Pizza\"</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">\"Soft Dough\"</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">\"Tomato sauce\"</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">\"Shrimp meat\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"SimplePizzaFactory\"><a href=\"#SimplePizzaFactory\" class=\"headerlink\" title=\"SimplePizzaFactory\"></a>SimplePizzaFactory</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SimpleFactory.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimplePizzaFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Pizza pizza = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"cheese\"</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> CheesePizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"clam\"</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ClamPizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"PizzaStore-cs\"><a href=\"#PizzaStore-cs\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SimpleFactory.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SimplePizzaFactory _factory;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PizzaStore</span>(<span class=\"params\">SimplePizzaFactory factory</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _factory = factory;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = _factory.CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SimpleFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizzaStore = <span class=\"keyword\">new</span> PizzaStore(<span class=\"keyword\">new</span> SimplePizzaFactory());</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cheesePizza = pizzaStore.OrderPizza(<span class=\"string\">\"cheese\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clamPizza = pizzaStore.OrderPizza(<span class=\"string\">\"clam\"</span>);</span><br><span class=\"line\">            Consloe.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"工厂方法的定义\"><a href=\"#工厂方法的定义\" class=\"headerlink\" title=\"工厂方法的定义\"></a>工厂方法的定义</h5><p>工厂方法把对象创建的动作交给了子类,并让它决定创建哪些对象.</p><h5 id=\"Net-Core实现工厂方法\"><a href=\"#Net-Core实现工厂方法\" class=\"headerlink\" title=\".Net Core实现工厂方法\"></a>.Net Core实现工厂方法</h5><h6 id=\"ChicagoCheesePizza-cs\"><a href=\"#ChicagoCheesePizza-cs\" class=\"headerlink\" title=\"ChicagoCheesePizza.cs\"></a>ChicagoCheesePizza.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoCheesePizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoCheesePizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Name = <span class=\"string\">\"Chicago Cheese Pizza\"</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">\"Think Dough\"</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">\"Salad\"</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">\"Grated ReggianoCheese\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"ChicagoClamPizza-ca\"><a href=\"#ChicagoClamPizza-ca\" class=\"headerlink\" title=\"ChicagoClamPizza.ca\"></a>ChicagoClamPizza.ca</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern.Pizzas</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoClamPizza</span>: <span class=\"title\">Pizza</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoClamPizza</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Name = <span class=\"string\">\"Chicago Clam Pizza\"</span>;</span><br><span class=\"line\">            Dough = <span class=\"string\">\"Soft Dough\"</span>;</span><br><span class=\"line\">            Sauce = <span class=\"string\">\"Tomato sauce\"</span>;</span><br><span class=\"line\">            Toppings.Add(<span class=\"string\">\"Shrimp meat\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"PizzaStore-cs-1\"><a href=\"#PizzaStore-cs-1\" class=\"headerlink\" title=\"PizzaStore.cs\"></a>PizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FactoryMethodPattern.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">OrderPizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pizza = CreatePizza(type);</span><br><span class=\"line\">            pizza.Prepare();</span><br><span class=\"line\">            pizza.Bake();</span><br><span class=\"line\">            pizza.Cut();</span><br><span class=\"line\">            pizza.Box();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"ChicagoPizzaStore-cs\"><a href=\"#ChicagoPizzaStore-cs\" class=\"headerlink\" title=\"ChicagoPizzaStore.cs\"></a>ChicagoPizzaStore.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> FactoryMethodPattern.Pizzas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChicagoPizzaStore</span>:<span class=\"title\">PizzaStore</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> Pizza <span class=\"title\">CreatePizza</span>(<span class=\"params\"><span class=\"keyword\">string</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Pizza pizza = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"cheese\"</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ChicagoCheesePizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"clam\"</span>:</span><br><span class=\"line\">                    pizza = <span class=\"keyword\">new</span> ChicagoClamPizza();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pizza;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Program-cs-1\"><a href=\"#Program-cs-1\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">FactoryMethodPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> chicagoStore = <span class=\"keyword\">new</span> ChicagoPizzaStore();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cheesePizza = chicagoStore.OrderPizza(<span class=\"string\">\"cheese\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clamPizza = chicagoStore.OrderPizza(<span class=\"string\">\"clam\"</span>);</span><br><span class=\"line\">            Consloe.ReadKey();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net Core 观察者模式","date":"2018-04-05T14:27:26.000Z","_content":"##### 观察者模式的定义\n一个目标物件管理所有相依于它的观察者物件,并且在它本身的状态改变时主动发出通知\n<!--more-->\n\n##### .Net Core实现观察者模式的代码\n###### Person.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    public class Person\n    {\n        public event EventHandle<FallsIllEventArgs> FallsIll;\n\n        public void OnFallsIll()\n        {\n            FallsIll?.Invoke(this, new FallsIllEventArgs(\"China Beijing\"));\n        }\n    }\n}\n```\n\n###### FallsIllEventArgs.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    public readonly string Address;\n\n    public FallsIllEventArgs(string address)\n    {\n        this.Address = address;\n    }\n}\n```\n\n##### Program.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var person = new Person();\n            person.FallsIll += OnFallsIll;\n            person.OnFallsIll();\n            person.FallsIll -= OnFallsIll;\n        }\n\n        private static void OnFallsIll(object sender, FallsIllEventArgs eventArgs)\n        {\n            Console.WriteLine($'A doctor has been called to(eventArgs.Address)');\n        }\n    }\n}\n```","source":"_posts/Net-Core-观察者模式.md","raw":"---\ntitle: .Net Core 观察者模式\ndate: 2018-04-05 22:27:26\ncategories : .Net Core\ntags: \n - .Net Core\n - 设计模式\n---\n##### 观察者模式的定义\n一个目标物件管理所有相依于它的观察者物件,并且在它本身的状态改变时主动发出通知\n<!--more-->\n\n##### .Net Core实现观察者模式的代码\n###### Person.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    public class Person\n    {\n        public event EventHandle<FallsIllEventArgs> FallsIll;\n\n        public void OnFallsIll()\n        {\n            FallsIll?.Invoke(this, new FallsIllEventArgs(\"China Beijing\"));\n        }\n    }\n}\n```\n\n###### FallsIllEventArgs.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    public readonly string Address;\n\n    public FallsIllEventArgs(string address)\n    {\n        this.Address = address;\n    }\n}\n```\n\n##### Program.cs\n```cs\nusing System;\nnamespace ObserverPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var person = new Person();\n            person.FallsIll += OnFallsIll;\n            person.OnFallsIll();\n            person.FallsIll -= OnFallsIll;\n        }\n\n        private static void OnFallsIll(object sender, FallsIllEventArgs eventArgs)\n        {\n            Console.WriteLine($'A doctor has been called to(eventArgs.Address)');\n        }\n    }\n}\n```","slug":"Net-Core-观察者模式","published":1,"updated":"2018-04-05T14:51:50.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23m004etkuidq08skkm","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"观察者模式的定义\"><a href=\"#观察者模式的定义\" class=\"headerlink\" title=\"观察者模式的定义\"></a>观察者模式的定义</h5><p>一个目标物件管理所有相依于它的观察者物件,并且在它本身的状态改变时主动发出通知<br><a id=\"more\"></a></p><h5 id=\"Net-Core实现观察者模式的代码\"><a href=\"#Net-Core实现观察者模式的代码\" class=\"headerlink\" title=\".Net Core实现观察者模式的代码\"></a>.Net Core实现观察者模式的代码</h5><h6 id=\"Person-cs\"><a href=\"#Person-cs\" class=\"headerlink\" title=\"Person.cs\"></a>Person.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandle&lt;FallsIllEventArgs&gt; FallsIll;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnFallsIll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            FallsIll?.Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> FallsIllEventArgs(<span class=\"string\">\"China Beijing\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"FallsIllEventArgs-cs\"><a href=\"#FallsIllEventArgs-cs\" class=\"headerlink\" title=\"FallsIllEventArgs.cs\"></a>FallsIllEventArgs.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> Address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FallsIllEventArgs</span>(<span class=\"params\"><span class=\"keyword\">string</span> address</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">            person.FallsIll += OnFallsIll;</span><br><span class=\"line\">            person.OnFallsIll();</span><br><span class=\"line\">            person.FallsIll -= OnFallsIll;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OnFallsIll</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, FallsIllEventArgs eventArgs</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Console.WriteLine($<span class=\"string\">'A doctor has been called to(eventArgs.Address)'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"观察者模式的定义\"><a href=\"#观察者模式的定义\" class=\"headerlink\" title=\"观察者模式的定义\"></a>观察者模式的定义</h5><p>一个目标物件管理所有相依于它的观察者物件,并且在它本身的状态改变时主动发出通知<br>","more":"</p><h5 id=\"Net-Core实现观察者模式的代码\"><a href=\"#Net-Core实现观察者模式的代码\" class=\"headerlink\" title=\".Net Core实现观察者模式的代码\"></a>.Net Core实现观察者模式的代码</h5><h6 id=\"Person-cs\"><a href=\"#Person-cs\" class=\"headerlink\" title=\"Person.cs\"></a>Person.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandle&lt;FallsIllEventArgs&gt; FallsIll;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnFallsIll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            FallsIll?.Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> FallsIllEventArgs(<span class=\"string\">\"China Beijing\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"FallsIllEventArgs-cs\"><a href=\"#FallsIllEventArgs-cs\" class=\"headerlink\" title=\"FallsIllEventArgs.cs\"></a>FallsIllEventArgs.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> Address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FallsIllEventArgs</span>(<span class=\"params\"><span class=\"keyword\">string</span> address</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ObserverPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">            person.FallsIll += OnFallsIll;</span><br><span class=\"line\">            person.OnFallsIll();</span><br><span class=\"line\">            person.FallsIll -= OnFallsIll;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OnFallsIll</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, FallsIllEventArgs eventArgs</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Console.WriteLine($<span class=\"string\">'A doctor has been called to(eventArgs.Address)'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net Log4net封装","date":"2018-03-06T04:26:10.000Z","_content":"log4net是.Net下一个非常优秀的开源日志记录组件。log4net记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。\n封装如下\n<!--more-->\n#### ILoger.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    public interface ILoger\n    {\n        void Write(string msg);\n        void Write(string msg, LogMessageType type);\n        void Write(string message, LogMessageType messageType, Type type);\n        void Write(string message, LogMessageType messageType, Exception ex);\n\n        void Write(string message, LogMessageType messageType, Exception ex, Type type);\n\n        void Write<T>(T entity, LogMessageType messageType);\n        void Write<T>(T entity, LogMessageType messageType, Exception ex, Type type);\n\n        void Assert(bool condition, string message);\n        void Assert(bool condition, string message, Type type);\n    }\n}\n```\n\n#### Log4netLoger.cs\n```cs\nusing log4net;\nusing log4net.Repository;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{ \n    public class Log4netLoger : ILoger\n    {\n        private static ILog loger = null;\n        public Log4netLoger()\n        {\n            ILoggerRepository repository = LogManager.CreateRepository(\"AlbumRepository\");\n            try\n            {\n                if (loger == null)\n                {\n                    try\n                    {\n                        //string logerName = System.Configuration.ConfigurationManager.AppSettings[\"NiMisLog\"];\n                        loger = LogManager.GetLogger(repository.Name,\"Album\");\n                    }\n                    catch\n                    {\n                        loger = LogManager.GetLogger(repository.Name, \"Album\");\n                    }\n                }\n            }\n            catch\n            {\n                loger = LogManager.GetLogger(repository.Name, \"Album\");\n            }\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        public void Write(string message)\n        {\n            DoLog(message, LogMessageType.Info, null, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        public void Write(string message, LogMessageType messageType)\n        {\n            DoLog(message, messageType, null, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"type\"></param>\n        public void Write(string message, LogMessageType messageType, Type type)\n        {\n            DoLog(message, messageType, null, type);\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        public void Write(string message, LogMessageType messageType, Exception ex)\n        {\n            DoLog(message, messageType, ex, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        /// <param name=\"type\"></param>\n        public void Write(string message, LogMessageType messageType, Exception ex, Type type)\n        {\n            DoLog(message, messageType, ex, type);\n        }\n\n        public void Write<T>(T entity, LogMessageType messageType)\n        {\n            Write(entity, messageType, null, null);\n        }\n\n        /// <summary>\n        /// 将日志写入数据库中，主要是操作日志\n        /// </summary>\n        /// <param name=\"entity\">数据表</param>\n        /// <param name=\"messageType\"></param>\n        /// <param name=\"ex\"></param>\n        /// <param name=\"type\"></param>\n        public void Write<T>(T entity, LogMessageType messageType, Exception ex, Type type)\n        {\n            //if (dt == null || dt.Rows.Count < 1)\n            //    return;\n            //int rowCount = dt.Rows.Count;\n            //int columnCount = dt.Columns.Count;\n            //string message = string.Empty;\n            //StringBuilder build = new StringBuilder();\n            //DataRow dr = null;\n\n            //build.Append(\"\\r\\n\");\n            //for (int j = 0; j < columnCount; j++)\n            //{\n            //    string Field = dt.Columns[j].ColumnName;\n            //    build.Append(Field + \"\\t\");\n            //}\n            //build.Append(\"\\r\\n\");\n\n            //for (int i = 0; i < rowCount; i++)\n            //{\n            //    dr = dt.Rows[i]; for (int j = 0; j < columnCount; j++)\n            //    {\n            //        string Value = dt.Rows[i][j].ToString();\n            //        build.Append(Value + \"\\t\");\n            //    }\n            //    build.Append(\"\\r\\n\");\n            //}\n            //message = build.ToString();\n\n\n            //if (type == null)\n            //{\n            //    type = Type.GetType(\"System.Object\");\n            //}\n            //DoLog(message, messageType, ex, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 断言\n        /// </summary>\n        /// <param name=\"condition\">条件</param>\n        /// <param name=\"message\">日志信息</param>\n        public void Assert(bool condition, string message)\n        {\n            Assert(condition, message, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 断言\n        /// </summary>\n        /// <param name=\"condition\">条件</param>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"type\">日志类型</param>\n        public void Assert(bool condition, string message, Type type)\n        {\n            if (condition == false)\n                Write(message, LogMessageType.Info);\n        }\n\n        /// <summary>\n        /// 保存日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        /// <param name=\"type\">日志类型</param>\n        private void DoLog(string message, LogMessageType messageType, Exception ex, Type type)\n        {\n            switch (messageType)\n            {\n                case LogMessageType.Debug:\n                    loger.Debug(message, ex);\n                    break;\n                case LogMessageType.Info:\n                    loger.Info(message, ex);\n                    break;\n                case LogMessageType.Warn:\n                    loger.Warn(message, ex);\n                    break;\n                case LogMessageType.Error:\n                    loger.Error(message, ex);\n                    break;\n                case LogMessageType.Fatal:\n                    loger.Fatal(message, ex);\n                    break;\n            }\n        }\n    }\n}\n```\n\n#### Loger.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    /// <summary>\n    /// 日志器\n    /// </summary>\n    public static class Loger\n    {\n        private static ILoger loger;\n        public static ILoger Instance\n        {\n            get\n            {\n                if (loger == null)\n                {\n                    try\n                    {\n                        loger = new Log4netLoger();\n                    }\n                    catch (Exception)\n                    {\n                        throw new Exception(\"Log4Net配置文件丢失或配置Log4Net出现错误。\");\n                    }\n                }\n                return loger;\n            }\n        }\n    }\n}\n\n```\n\n#### LogMessageType.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    /// <summary>\n    /// 日志类型\n    /// </summary>\n    public enum LogMessageType\n    {\n        /// <summary>\n        /// 调试\n        /// </summary>\n        Debug,\n        /// <summary>\n        /// 信息\n        /// </summary>\n        Info,\n        /// <summary>\n        /// 警告\n        /// </summary>\n        Warn,\n        /// <summary>\n        /// 错误\n        /// </summary>\n        Error,\n        /// <summary>\n        /// 致命错误\n        /// </summary>\n        Fatal\n    }\n}\n```\n","source":"_posts/Net-Log4net封装.md","raw":"---\ntitle: .Net Log4net封装\ndate: 2018-03-06 12:26:10\ncategories: .Net\ntags: \n - .Net\n - Log4net\n---\nlog4net是.Net下一个非常优秀的开源日志记录组件。log4net记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。\n封装如下\n<!--more-->\n#### ILoger.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    public interface ILoger\n    {\n        void Write(string msg);\n        void Write(string msg, LogMessageType type);\n        void Write(string message, LogMessageType messageType, Type type);\n        void Write(string message, LogMessageType messageType, Exception ex);\n\n        void Write(string message, LogMessageType messageType, Exception ex, Type type);\n\n        void Write<T>(T entity, LogMessageType messageType);\n        void Write<T>(T entity, LogMessageType messageType, Exception ex, Type type);\n\n        void Assert(bool condition, string message);\n        void Assert(bool condition, string message, Type type);\n    }\n}\n```\n\n#### Log4netLoger.cs\n```cs\nusing log4net;\nusing log4net.Repository;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{ \n    public class Log4netLoger : ILoger\n    {\n        private static ILog loger = null;\n        public Log4netLoger()\n        {\n            ILoggerRepository repository = LogManager.CreateRepository(\"AlbumRepository\");\n            try\n            {\n                if (loger == null)\n                {\n                    try\n                    {\n                        //string logerName = System.Configuration.ConfigurationManager.AppSettings[\"NiMisLog\"];\n                        loger = LogManager.GetLogger(repository.Name,\"Album\");\n                    }\n                    catch\n                    {\n                        loger = LogManager.GetLogger(repository.Name, \"Album\");\n                    }\n                }\n            }\n            catch\n            {\n                loger = LogManager.GetLogger(repository.Name, \"Album\");\n            }\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        public void Write(string message)\n        {\n            DoLog(message, LogMessageType.Info, null, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        public void Write(string message, LogMessageType messageType)\n        {\n            DoLog(message, messageType, null, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"type\"></param>\n        public void Write(string message, LogMessageType messageType, Type type)\n        {\n            DoLog(message, messageType, null, type);\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        public void Write(string message, LogMessageType messageType, Exception ex)\n        {\n            DoLog(message, messageType, ex, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 写入日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        /// <param name=\"type\"></param>\n        public void Write(string message, LogMessageType messageType, Exception ex, Type type)\n        {\n            DoLog(message, messageType, ex, type);\n        }\n\n        public void Write<T>(T entity, LogMessageType messageType)\n        {\n            Write(entity, messageType, null, null);\n        }\n\n        /// <summary>\n        /// 将日志写入数据库中，主要是操作日志\n        /// </summary>\n        /// <param name=\"entity\">数据表</param>\n        /// <param name=\"messageType\"></param>\n        /// <param name=\"ex\"></param>\n        /// <param name=\"type\"></param>\n        public void Write<T>(T entity, LogMessageType messageType, Exception ex, Type type)\n        {\n            //if (dt == null || dt.Rows.Count < 1)\n            //    return;\n            //int rowCount = dt.Rows.Count;\n            //int columnCount = dt.Columns.Count;\n            //string message = string.Empty;\n            //StringBuilder build = new StringBuilder();\n            //DataRow dr = null;\n\n            //build.Append(\"\\r\\n\");\n            //for (int j = 0; j < columnCount; j++)\n            //{\n            //    string Field = dt.Columns[j].ColumnName;\n            //    build.Append(Field + \"\\t\");\n            //}\n            //build.Append(\"\\r\\n\");\n\n            //for (int i = 0; i < rowCount; i++)\n            //{\n            //    dr = dt.Rows[i]; for (int j = 0; j < columnCount; j++)\n            //    {\n            //        string Value = dt.Rows[i][j].ToString();\n            //        build.Append(Value + \"\\t\");\n            //    }\n            //    build.Append(\"\\r\\n\");\n            //}\n            //message = build.ToString();\n\n\n            //if (type == null)\n            //{\n            //    type = Type.GetType(\"System.Object\");\n            //}\n            //DoLog(message, messageType, ex, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 断言\n        /// </summary>\n        /// <param name=\"condition\">条件</param>\n        /// <param name=\"message\">日志信息</param>\n        public void Assert(bool condition, string message)\n        {\n            Assert(condition, message, Type.GetType(\"System.Object\"));\n        }\n\n        /// <summary>\n        /// 断言\n        /// </summary>\n        /// <param name=\"condition\">条件</param>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"type\">日志类型</param>\n        public void Assert(bool condition, string message, Type type)\n        {\n            if (condition == false)\n                Write(message, LogMessageType.Info);\n        }\n\n        /// <summary>\n        /// 保存日志\n        /// </summary>\n        /// <param name=\"message\">日志信息</param>\n        /// <param name=\"messageType\">日志类型</param>\n        /// <param name=\"ex\">错误</param>\n        /// <param name=\"type\">日志类型</param>\n        private void DoLog(string message, LogMessageType messageType, Exception ex, Type type)\n        {\n            switch (messageType)\n            {\n                case LogMessageType.Debug:\n                    loger.Debug(message, ex);\n                    break;\n                case LogMessageType.Info:\n                    loger.Info(message, ex);\n                    break;\n                case LogMessageType.Warn:\n                    loger.Warn(message, ex);\n                    break;\n                case LogMessageType.Error:\n                    loger.Error(message, ex);\n                    break;\n                case LogMessageType.Fatal:\n                    loger.Fatal(message, ex);\n                    break;\n            }\n        }\n    }\n}\n```\n\n#### Loger.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    /// <summary>\n    /// 日志器\n    /// </summary>\n    public static class Loger\n    {\n        private static ILoger loger;\n        public static ILoger Instance\n        {\n            get\n            {\n                if (loger == null)\n                {\n                    try\n                    {\n                        loger = new Log4netLoger();\n                    }\n                    catch (Exception)\n                    {\n                        throw new Exception(\"Log4Net配置文件丢失或配置Log4Net出现错误。\");\n                    }\n                }\n                return loger;\n            }\n        }\n    }\n}\n\n```\n\n#### LogMessageType.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Caty.Album.Utilities.Log\n{\n    /// <summary>\n    /// 日志类型\n    /// </summary>\n    public enum LogMessageType\n    {\n        /// <summary>\n        /// 调试\n        /// </summary>\n        Debug,\n        /// <summary>\n        /// 信息\n        /// </summary>\n        Info,\n        /// <summary>\n        /// 警告\n        /// </summary>\n        Warn,\n        /// <summary>\n        /// 错误\n        /// </summary>\n        Error,\n        /// <summary>\n        /// 致命错误\n        /// </summary>\n        Fatal\n    }\n}\n```\n","slug":"Net-Log4net封装","published":1,"updated":"2018-03-08T15:20:44.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23n004htkuivmgzqdwf","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>log4net是.Net下一个非常优秀的开源日志记录组件。log4net记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。<br>封装如下<br><a id=\"more\"></a></p><h4 id=\"ILoger-cs\"><a href=\"#ILoger-cs\" class=\"headerlink\" title=\"ILoger.cs\"></a>ILoger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ILoger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg, LogMessageType type</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Type type</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Exception ex</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">void</span> Write&lt;T&gt;(T entity, LogMessageType messageType);</span><br><span class=\"line\">        <span class=\"keyword\">void</span> Write&lt;T&gt;(T entity, LogMessageType messageType, Exception ex, Type type);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"keyword\">bool</span> condition, <span class=\"keyword\">string</span> message</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"keyword\">bool</span> condition, <span class=\"keyword\">string</span> message, Type type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Log4netLoger-cs\"><a href=\"#Log4netLoger-cs\" class=\"headerlink\" title=\"Log4netLoger.cs\"></a>Log4netLoger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> log4net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> log4net.Repository;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Log4netLoger</span> : <span class=\"title\">ILoger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ILog loger = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Log4netLoger</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            ILoggerRepository repository = LogManager.CreateRepository(<span class=\"string\">\"AlbumRepository\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (loger == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//string logerName = System.Configuration.ConfigurationManager.AppSettings[\"NiMisLog\"];</span></span><br><span class=\"line\">                        loger = LogManager.GetLogger(repository.Name,<span class=\"string\">\"Album\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loger = LogManager.GetLogger(repository.Name, <span class=\"string\">\"Album\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                loger = LogManager.GetLogger(repository.Name, <span class=\"string\">\"Album\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DoLog(message, LogMessageType.Info, <span class=\"literal\">null</span>, Type.GetType(<span class=\"string\">\"System.Object\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DoLog(message, messageType, <span class=\"literal\">null</span>, Type.GetType(<span class=\"string\">\"System.Object\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DoLog(message, messageType, <span class=\"literal\">null</span>, type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ex\"&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Exception ex</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DoLog(message, messageType, ex, Type.GetType(<span class=\"string\">\"System.Object\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ex\"&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DoLog(message, messageType, ex, type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> Write&lt;T&gt;(T entity, LogMessageType messageType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Write(entity, messageType, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将日志写入数据库中，主要是操作日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>数据表<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ex\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> Write&lt;T&gt;(T entity, LogMessageType messageType, Exception ex, Type type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//if (dt == null || dt.Rows.Count &lt; 1)</span></span><br><span class=\"line\">            <span class=\"comment\">//    return;</span></span><br><span class=\"line\">            <span class=\"comment\">//int rowCount = dt.Rows.Count;</span></span><br><span class=\"line\">            <span class=\"comment\">//int columnCount = dt.Columns.Count;</span></span><br><span class=\"line\">            <span class=\"comment\">//string message = string.Empty;</span></span><br><span class=\"line\">            <span class=\"comment\">//StringBuilder build = new StringBuilder();</span></span><br><span class=\"line\">            <span class=\"comment\">//DataRow dr = null;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//build.Append(\"\\r\\n\");</span></span><br><span class=\"line\">            <span class=\"comment\">//for (int j = 0; j &lt; columnCount; j++)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    string Field = dt.Columns[j].ColumnName;</span></span><br><span class=\"line\">            <span class=\"comment\">//    build.Append(Field + \"\\t\");</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//build.Append(\"\\r\\n\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//for (int i = 0; i &lt; rowCount; i++)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    dr = dt.Rows[i]; for (int j = 0; j &lt; columnCount; j++)</span></span><br><span class=\"line\">            <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//        string Value = dt.Rows[i][j].ToString();</span></span><br><span class=\"line\">            <span class=\"comment\">//        build.Append(Value + \"\\t\");</span></span><br><span class=\"line\">            <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//    build.Append(\"\\r\\n\");</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//message = build.ToString();</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//if (type == null)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    type = Type.GetType(\"System.Object\");</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//DoLog(message, messageType, ex, Type.GetType(\"System.Object\"));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 断言</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"condition\"&gt;</span>条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"keyword\">bool</span> condition, <span class=\"keyword\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Assert(condition, message, Type.GetType(<span class=\"string\">\"System.Object\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 断言</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"condition\"&gt;</span>条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"keyword\">bool</span> condition, <span class=\"keyword\">string</span> message, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (condition == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                Write(message, LogMessageType.Info);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 保存日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ex\"&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">DoLog</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (messageType)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Debug:</span><br><span class=\"line\">                    loger.Debug(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Info:</span><br><span class=\"line\">                    loger.Info(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Warn:</span><br><span class=\"line\">                    loger.Warn(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Error:</span><br><span class=\"line\">                    loger.Error(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Fatal:</span><br><span class=\"line\">                    loger.Fatal(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Loger-cs\"><a href=\"#Loger-cs\" class=\"headerlink\" title=\"Loger.cs\"></a>Loger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 日志器</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Loger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ILoger loger;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ILoger Instance</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (loger == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loger = <span class=\"keyword\">new</span> Log4netLoger();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> (Exception)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Log4Net配置文件丢失或配置Log4Net出现错误。\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> loger;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"LogMessageType-cs\"><a href=\"#LogMessageType-cs\" class=\"headerlink\" title=\"LogMessageType.cs\"></a>LogMessageType.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 日志类型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> LogMessageType</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 调试</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Debug,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Info,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 警告</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Warn,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 错误</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Error,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 致命错误</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Fatal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>log4net是.Net下一个非常优秀的开源日志记录组件。log4net记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。<br>封装如下<br>","more":"</p><h4 id=\"ILoger-cs\"><a href=\"#ILoger-cs\" class=\"headerlink\" title=\"ILoger.cs\"></a>ILoger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ILoger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg, LogMessageType type</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Type type</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Exception ex</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">void</span> Write&lt;T&gt;(T entity, LogMessageType messageType);</span><br><span class=\"line\">        <span class=\"keyword\">void</span> Write&lt;T&gt;(T entity, LogMessageType messageType, Exception ex, Type type);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"keyword\">bool</span> condition, <span class=\"keyword\">string</span> message</span>)</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"keyword\">bool</span> condition, <span class=\"keyword\">string</span> message, Type type</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Log4netLoger-cs\"><a href=\"#Log4netLoger-cs\" class=\"headerlink\" title=\"Log4netLoger.cs\"></a>Log4netLoger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> log4net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> log4net.Repository;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Log4netLoger</span> : <span class=\"title\">ILoger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ILog loger = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Log4netLoger</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            ILoggerRepository repository = LogManager.CreateRepository(<span class=\"string\">\"AlbumRepository\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (loger == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//string logerName = System.Configuration.ConfigurationManager.AppSettings[\"NiMisLog\"];</span></span><br><span class=\"line\">                        loger = LogManager.GetLogger(repository.Name,<span class=\"string\">\"Album\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loger = LogManager.GetLogger(repository.Name, <span class=\"string\">\"Album\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                loger = LogManager.GetLogger(repository.Name, <span class=\"string\">\"Album\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DoLog(message, LogMessageType.Info, <span class=\"literal\">null</span>, Type.GetType(<span class=\"string\">\"System.Object\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DoLog(message, messageType, <span class=\"literal\">null</span>, Type.GetType(<span class=\"string\">\"System.Object\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DoLog(message, messageType, <span class=\"literal\">null</span>, type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ex\"&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Exception ex</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DoLog(message, messageType, ex, Type.GetType(<span class=\"string\">\"System.Object\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 写入日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ex\"&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Write</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            DoLog(message, messageType, ex, type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> Write&lt;T&gt;(T entity, LogMessageType messageType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Write(entity, messageType, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将日志写入数据库中，主要是操作日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>数据表<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ex\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> Write&lt;T&gt;(T entity, LogMessageType messageType, Exception ex, Type type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//if (dt == null || dt.Rows.Count &lt; 1)</span></span><br><span class=\"line\">            <span class=\"comment\">//    return;</span></span><br><span class=\"line\">            <span class=\"comment\">//int rowCount = dt.Rows.Count;</span></span><br><span class=\"line\">            <span class=\"comment\">//int columnCount = dt.Columns.Count;</span></span><br><span class=\"line\">            <span class=\"comment\">//string message = string.Empty;</span></span><br><span class=\"line\">            <span class=\"comment\">//StringBuilder build = new StringBuilder();</span></span><br><span class=\"line\">            <span class=\"comment\">//DataRow dr = null;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//build.Append(\"\\r\\n\");</span></span><br><span class=\"line\">            <span class=\"comment\">//for (int j = 0; j &lt; columnCount; j++)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    string Field = dt.Columns[j].ColumnName;</span></span><br><span class=\"line\">            <span class=\"comment\">//    build.Append(Field + \"\\t\");</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//build.Append(\"\\r\\n\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//for (int i = 0; i &lt; rowCount; i++)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    dr = dt.Rows[i]; for (int j = 0; j &lt; columnCount; j++)</span></span><br><span class=\"line\">            <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//        string Value = dt.Rows[i][j].ToString();</span></span><br><span class=\"line\">            <span class=\"comment\">//        build.Append(Value + \"\\t\");</span></span><br><span class=\"line\">            <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//    build.Append(\"\\r\\n\");</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//message = build.ToString();</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//if (type == null)</span></span><br><span class=\"line\">            <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//    type = Type.GetType(\"System.Object\");</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//DoLog(message, messageType, ex, Type.GetType(\"System.Object\"));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 断言</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"condition\"&gt;</span>条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"keyword\">bool</span> condition, <span class=\"keyword\">string</span> message</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Assert(condition, message, Type.GetType(<span class=\"string\">\"System.Object\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 断言</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"condition\"&gt;</span>条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Assert</span>(<span class=\"params\"><span class=\"keyword\">bool</span> condition, <span class=\"keyword\">string</span> message, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (condition == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                Write(message, LogMessageType.Info);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 保存日志</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"message\"&gt;</span>日志信息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ex\"&gt;</span>错误<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span>日志类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">DoLog</span>(<span class=\"params\"><span class=\"keyword\">string</span> message, LogMessageType messageType, Exception ex, Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (messageType)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Debug:</span><br><span class=\"line\">                    loger.Debug(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Info:</span><br><span class=\"line\">                    loger.Info(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Warn:</span><br><span class=\"line\">                    loger.Warn(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Error:</span><br><span class=\"line\">                    loger.Error(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> LogMessageType.Fatal:</span><br><span class=\"line\">                    loger.Fatal(message, ex);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"Loger-cs\"><a href=\"#Loger-cs\" class=\"headerlink\" title=\"Loger.cs\"></a>Loger.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 日志器</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Loger</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ILoger loger;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ILoger Instance</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (loger == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loger = <span class=\"keyword\">new</span> Log4netLoger();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> (Exception)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Log4Net配置文件丢失或配置Log4Net出现错误。\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> loger;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"LogMessageType-cs\"><a href=\"#LogMessageType-cs\" class=\"headerlink\" title=\"LogMessageType.cs\"></a>LogMessageType.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Album.Utilities.Log</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 日志类型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> LogMessageType</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 调试</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Debug,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Info,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 警告</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Warn,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 错误</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Error,</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 致命错误</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Fatal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net Core 装饰模式","date":"2018-04-05T15:14:57.000Z","_content":"##### 装饰模式的定义\n动态的对某个对象进行扩展(附加额外的职责),装饰器是除了继承之外的另外一种为对象扩展功能的方法\n<!--more-->\n\n##### .Net Core实现装饰模式的代码\n###### Beverage.cs\n```cs\nnamespace DecoratorPattern.Core\n{\n    public abstract class Beverage\n    {\n        public virtual string Description{ get; private set; } = \"Unknown Beverage\";\n        public abstract double Cost();\n    }\n}\n```\n\n###### CondimentDecorator.cs\n```cs\nnamespace DecoratorPattern.Core\n{\n    public abstract class CondimentDecorator : Beverage\n    {\n        public abstract override string Description{ get; }\n    }\n}\n```\n\n###### Espresso.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Coffee\n{\n    public class Espresso : Beverage\n    {\n        public Espresso()\n        {\n            Description = \"Espresso\";\n        }\n        public override double Cost()\n        {\n            return 1.99;\n        }\n    }\n}\n```\n\n###### HouseBlend.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Coffee\n{\n    public class HouseBlend : Beverage\n    {\n        public HouseBlend()\n        {\n            Description = \"HouseBlend\";\n        }\n        public override double Cost()\n        {\n            return 0.89;\n        }\n    }\n}\n```\n\n###### Mocha.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Condiments\n{\n    public class Mocha : CodimentDecorator\n    {\n        private readonly Beverage beverage;\n\n        public Mocha(Beverage beverage) => this.beverage = beverage;\n\n        public override string Description => $\"{beverage.Description},Mocha\";\n\n        public override doublr Cost()\n        {\n            return 0.20 + beverage.Cost();\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nusing DecoratorPattern.Core;\nusing DecoratorPattern.Coffee;\n\nnamespace DecoratorPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var beverage = new Espresso();\n            Console.WriteLine($\"{beverage.Description}${beverage.Cost()}\");\n\n            Beverage beverage2 = new HouseBlend();\n            beverage2 = new Mocha(beverage2);\n            Console.WriteLine($\"{beverage2.Description}${beverage2.Cost()}\");\n        }\n    }\n}\n```\n","source":"_posts/Net-Core-装饰模式.md","raw":"---\ntitle: .Net Core 装饰模式\ndate: 2018-04-05 23:14:57\ncategories: .Net Core\ntags:\n - .Net Core\n - 设计模式\n---\n##### 装饰模式的定义\n动态的对某个对象进行扩展(附加额外的职责),装饰器是除了继承之外的另外一种为对象扩展功能的方法\n<!--more-->\n\n##### .Net Core实现装饰模式的代码\n###### Beverage.cs\n```cs\nnamespace DecoratorPattern.Core\n{\n    public abstract class Beverage\n    {\n        public virtual string Description{ get; private set; } = \"Unknown Beverage\";\n        public abstract double Cost();\n    }\n}\n```\n\n###### CondimentDecorator.cs\n```cs\nnamespace DecoratorPattern.Core\n{\n    public abstract class CondimentDecorator : Beverage\n    {\n        public abstract override string Description{ get; }\n    }\n}\n```\n\n###### Espresso.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Coffee\n{\n    public class Espresso : Beverage\n    {\n        public Espresso()\n        {\n            Description = \"Espresso\";\n        }\n        public override double Cost()\n        {\n            return 1.99;\n        }\n    }\n}\n```\n\n###### HouseBlend.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Coffee\n{\n    public class HouseBlend : Beverage\n    {\n        public HouseBlend()\n        {\n            Description = \"HouseBlend\";\n        }\n        public override double Cost()\n        {\n            return 0.89;\n        }\n    }\n}\n```\n\n###### Mocha.cs\n```cs\nusing DecoratorPattern.Core;\nnamespace DecoratorPattern.Condiments\n{\n    public class Mocha : CodimentDecorator\n    {\n        private readonly Beverage beverage;\n\n        public Mocha(Beverage beverage) => this.beverage = beverage;\n\n        public override string Description => $\"{beverage.Description},Mocha\";\n\n        public override doublr Cost()\n        {\n            return 0.20 + beverage.Cost();\n        }\n    }\n}\n```\n\n###### Program.cs\n```cs\nusing System;\nusing DecoratorPattern.Core;\nusing DecoratorPattern.Coffee;\n\nnamespace DecoratorPattern\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var beverage = new Espresso();\n            Console.WriteLine($\"{beverage.Description}${beverage.Cost()}\");\n\n            Beverage beverage2 = new HouseBlend();\n            beverage2 = new Mocha(beverage2);\n            Console.WriteLine($\"{beverage2.Description}${beverage2.Cost()}\");\n        }\n    }\n}\n```\n","slug":"Net-Core-装饰模式","published":1,"updated":"2018-04-05T15:48:20.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23o004ktkuiokniaws1","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"装饰模式的定义\"><a href=\"#装饰模式的定义\" class=\"headerlink\" title=\"装饰模式的定义\"></a>装饰模式的定义</h5><p>动态的对某个对象进行扩展(附加额外的职责),装饰器是除了继承之外的另外一种为对象扩展功能的方法<br><a id=\"more\"></a></p><h5 id=\"Net-Core实现装饰模式的代码\"><a href=\"#Net-Core实现装饰模式的代码\" class=\"headerlink\" title=\".Net Core实现装饰模式的代码\"></a>.Net Core实现装饰模式的代码</h5><h6 id=\"Beverage-cs\"><a href=\"#Beverage-cs\" class=\"headerlink\" title=\"Beverage.cs\"></a>Beverage.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Core</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">string</span> Description&#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125; = <span class=\"string\">\"Unknown Beverage\"</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"CondimentDecorator-cs\"><a href=\"#CondimentDecorator-cs\" class=\"headerlink\" title=\"CondimentDecorator.cs\"></a>CondimentDecorator.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Core</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">CondimentDecorator</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> Description&#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Espresso-cs\"><a href=\"#Espresso-cs\" class=\"headerlink\" title=\"Espresso.cs\"></a>Espresso.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Coffee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Espresso</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Espresso</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Description = <span class=\"string\">\"Espresso\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"HouseBlend-cs\"><a href=\"#HouseBlend-cs\" class=\"headerlink\" title=\"HouseBlend.cs\"></a>HouseBlend.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Coffee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HouseBlend</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HouseBlend</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Description = <span class=\"string\">\"HouseBlend\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.89</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Mocha-cs\"><a href=\"#Mocha-cs\" class=\"headerlink\" title=\"Mocha.cs\"></a>Mocha.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Condiments</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> : <span class=\"title\">CodimentDecorator</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Beverage beverage;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mocha</span>(<span class=\"params\">Beverage beverage</span>) </span>=&gt; <span class=\"keyword\">this</span>.beverage = beverage;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> Description =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;beverage.Description&#125;</span>,Mocha\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> doublr <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.20</span> + beverage.Cost();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Coffee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> beverage = <span class=\"keyword\">new</span> Espresso();</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;beverage.Description&#125;</span>$<span class=\"subst\">&#123;beverage.Cost()&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Beverage beverage2 = <span class=\"keyword\">new</span> HouseBlend();</span><br><span class=\"line\">            beverage2 = <span class=\"keyword\">new</span> Mocha(beverage2);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;beverage2.Description&#125;</span>$<span class=\"subst\">&#123;beverage2.Cost()&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"装饰模式的定义\"><a href=\"#装饰模式的定义\" class=\"headerlink\" title=\"装饰模式的定义\"></a>装饰模式的定义</h5><p>动态的对某个对象进行扩展(附加额外的职责),装饰器是除了继承之外的另外一种为对象扩展功能的方法<br>","more":"</p><h5 id=\"Net-Core实现装饰模式的代码\"><a href=\"#Net-Core实现装饰模式的代码\" class=\"headerlink\" title=\".Net Core实现装饰模式的代码\"></a>.Net Core实现装饰模式的代码</h5><h6 id=\"Beverage-cs\"><a href=\"#Beverage-cs\" class=\"headerlink\" title=\"Beverage.cs\"></a>Beverage.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Core</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">string</span> Description&#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125; = <span class=\"string\">\"Unknown Beverage\"</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"CondimentDecorator-cs\"><a href=\"#CondimentDecorator-cs\" class=\"headerlink\" title=\"CondimentDecorator.cs\"></a>CondimentDecorator.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Core</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">CondimentDecorator</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> Description&#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Espresso-cs\"><a href=\"#Espresso-cs\" class=\"headerlink\" title=\"Espresso.cs\"></a>Espresso.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Coffee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Espresso</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Espresso</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Description = <span class=\"string\">\"Espresso\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"HouseBlend-cs\"><a href=\"#HouseBlend-cs\" class=\"headerlink\" title=\"HouseBlend.cs\"></a>HouseBlend.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Coffee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HouseBlend</span> : <span class=\"title\">Beverage</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HouseBlend</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Description = <span class=\"string\">\"HouseBlend\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.89</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Mocha-cs\"><a href=\"#Mocha-cs\" class=\"headerlink\" title=\"Mocha.cs\"></a>Mocha.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern.Condiments</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> : <span class=\"title\">CodimentDecorator</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Beverage beverage;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mocha</span>(<span class=\"params\">Beverage beverage</span>) </span>=&gt; <span class=\"keyword\">this</span>.beverage = beverage;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> Description =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;beverage.Description&#125;</span>,Mocha\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> doublr <span class=\"title\">Cost</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.20</span> + beverage.Cost();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Core;</span><br><span class=\"line\"><span class=\"keyword\">using</span> DecoratorPattern.Coffee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DecoratorPattern</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> beverage = <span class=\"keyword\">new</span> Espresso();</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;beverage.Description&#125;</span>$<span class=\"subst\">&#123;beverage.Cost()&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Beverage beverage2 = <span class=\"keyword\">new</span> HouseBlend();</span><br><span class=\"line\">            beverage2 = <span class=\"keyword\">new</span> Mocha(beverage2);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;beverage2.Description&#125;</span>$<span class=\"subst\">&#123;beverage2.Cost()&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net Core 配置与自动更新","date":"2018-03-07T14:27:31.000Z","_content":".Net Core将之前Web.Config中的配置迁移到了appsettings.json文件中，并使用ConfigurationBuilder来读取该配置文件可设置在设置文件变化后自动重新加载，避免了重启程序。\n<!--more-->\n```cs\nvar builder = new ConfigurationBuilder()\n .SetBasePath(env.ContentRootPath)\n .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n .AddEnvironmentVariables();\n```\n\n#### 配置信息读取\n配置的读取比以前方便很多，可以直接使用。在ConfigurationBuilder调用Build()方法以后，就可直接取值\n```cs\nConfiguration = builder.Build();\nvar value = Configuration[\"Section:Key\"];\n```\n当配置更新以后，使用Configuration[\"Section:Key\"]得到的也是最新的值。\n\n#### 配置强类型\n可以直接使用强类型，把配置文件转换成你的对象直接使用，只要对象的属性与配置中一一对应即可。\n```cs\nservices.Configure<DatabaseOption>(configuration.GetSection(\"Database\"));\n```\n然后在构造函数中注入\n```cs\npublic EntityFrameWorkConfigure(IOptions<DatabaseOption> dataBaseOption)\n {\n     _dataBaseOption = dataBaseOption;\n }\n```\n##### 注意：IOptions<T>是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。\n\n#### 使用IOptionsSnapshot<T>自动更新\n如果你希望在使用强类型的时候，也可以自动更新你的配置而不用重启程序，你可以使用IOptionsSnapshot<T>\n```cs\npublic EntityFrameWorkConfigure(IOptionsSnapshot<DatabaseOption> dataBaseOption)\n {\n     _dataBaseOption = dataBaseOption;\n }\n```\n\n> 原文地址:http://www.zkea.net/codesnippet/detail/post-80","source":"_posts/Net-Core-配置与自动更新.md","raw":"---\ntitle: .Net Core 配置与自动更新\ndate: 2018-03-07 22:27:31\ncategories: .Net Core\ntags: \n - .Net Core\n---\n.Net Core将之前Web.Config中的配置迁移到了appsettings.json文件中，并使用ConfigurationBuilder来读取该配置文件可设置在设置文件变化后自动重新加载，避免了重启程序。\n<!--more-->\n```cs\nvar builder = new ConfigurationBuilder()\n .SetBasePath(env.ContentRootPath)\n .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n .AddEnvironmentVariables();\n```\n\n#### 配置信息读取\n配置的读取比以前方便很多，可以直接使用。在ConfigurationBuilder调用Build()方法以后，就可直接取值\n```cs\nConfiguration = builder.Build();\nvar value = Configuration[\"Section:Key\"];\n```\n当配置更新以后，使用Configuration[\"Section:Key\"]得到的也是最新的值。\n\n#### 配置强类型\n可以直接使用强类型，把配置文件转换成你的对象直接使用，只要对象的属性与配置中一一对应即可。\n```cs\nservices.Configure<DatabaseOption>(configuration.GetSection(\"Database\"));\n```\n然后在构造函数中注入\n```cs\npublic EntityFrameWorkConfigure(IOptions<DatabaseOption> dataBaseOption)\n {\n     _dataBaseOption = dataBaseOption;\n }\n```\n##### 注意：IOptions<T>是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。\n\n#### 使用IOptionsSnapshot<T>自动更新\n如果你希望在使用强类型的时候，也可以自动更新你的配置而不用重启程序，你可以使用IOptionsSnapshot<T>\n```cs\npublic EntityFrameWorkConfigure(IOptionsSnapshot<DatabaseOption> dataBaseOption)\n {\n     _dataBaseOption = dataBaseOption;\n }\n```\n\n> 原文地址:http://www.zkea.net/codesnippet/detail/post-80","slug":"Net-Core-配置与自动更新","published":1,"updated":"2018-03-08T15:20:34.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23u004ntkui23bnexgm","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>.Net Core将之前Web.Config中的配置迁移到了appsettings.json文件中，并使用ConfigurationBuilder来读取该配置文件可设置在设置文件变化后自动重新加载，避免了重启程序。<br><a id=\"more\"></a><br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\"> .SetBasePath(env.ContentRootPath)</span><br><span class=\"line\"> .AddJsonFile(<span class=\"string\">\"appsettings.json\"</span>, optional: <span class=\"literal\">true</span>, reloadOnChange: <span class=\"literal\">true</span>)</span><br><span class=\"line\"> .AddJsonFile(<span class=\"string\">$\"appsettings.<span class=\"subst\">&#123;env.EnvironmentName&#125;</span>.json\"</span>, optional: <span class=\"literal\">true</span>)</span><br><span class=\"line\"> .AddEnvironmentVariables();</span><br></pre></td></tr></table></figure><p></p><h4 id=\"配置信息读取\"><a href=\"#配置信息读取\" class=\"headerlink\" title=\"配置信息读取\"></a>配置信息读取</h4><p>配置的读取比以前方便很多，可以直接使用。在ConfigurationBuilder调用Build()方法以后，就可直接取值<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration = builder.Build();</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = Configuration[<span class=\"string\">\"Section:Key\"</span>];</span><br></pre></td></tr></table></figure><p></p><p>当配置更新以后，使用Configuration[“Section:Key”]得到的也是最新的值。</p><h4 id=\"配置强类型\"><a href=\"#配置强类型\" class=\"headerlink\" title=\"配置强类型\"></a>配置强类型</h4><p>可以直接使用强类型，把配置文件转换成你的对象直接使用，只要对象的属性与配置中一一对应即可。<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.Configure&lt;DatabaseOption&gt;(configuration.GetSection(<span class=\"string\">\"Database\"</span>));</span><br></pre></td></tr></table></figure><p></p><p>然后在构造函数中注入<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EntityFrameWorkConfigure</span>(<span class=\"params\">IOptions&lt;DatabaseOption&gt; dataBaseOption</span>)</span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">     _dataBaseOption = dataBaseOption;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"注意：IOptions是单例的，即当你修改了appsettings-json也不会改变它的值，这样一定要重启你的程序才会更新。\"><a href=\"#注意：IOptions是单例的，即当你修改了appsettings-json也不会改变它的值，这样一定要重启你的程序才会更新。\" class=\"headerlink\" title=\"注意：IOptions是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。\"></a>注意：IOptions<t>是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。</t></h5><h4 id=\"使用IOptionsSnapshot自动更新\"><a href=\"#使用IOptionsSnapshot自动更新\" class=\"headerlink\" title=\"使用IOptionsSnapshot自动更新\"></a>使用IOptionsSnapshot<t>自动更新</t></h4><p>如果你希望在使用强类型的时候，也可以自动更新你的配置而不用重启程序，你可以使用IOptionsSnapshot<t><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EntityFrameWorkConfigure</span>(<span class=\"params\">IOptionsSnapshot&lt;DatabaseOption&gt; dataBaseOption</span>)</span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">     _dataBaseOption = dataBaseOption;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></t></p><blockquote><p>原文地址:<a href=\"http://www.zkea.net/codesnippet/detail/post-80\" target=\"_blank\" rel=\"noopener\">http://www.zkea.net/codesnippet/detail/post-80</a></p></blockquote><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>.Net Core将之前Web.Config中的配置迁移到了appsettings.json文件中，并使用ConfigurationBuilder来读取该配置文件可设置在设置文件变化后自动重新加载，避免了重启程序。<br>","more":"<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\"> .SetBasePath(env.ContentRootPath)</span><br><span class=\"line\"> .AddJsonFile(<span class=\"string\">\"appsettings.json\"</span>, optional: <span class=\"literal\">true</span>, reloadOnChange: <span class=\"literal\">true</span>)</span><br><span class=\"line\"> .AddJsonFile(<span class=\"string\">$\"appsettings.<span class=\"subst\">&#123;env.EnvironmentName&#125;</span>.json\"</span>, optional: <span class=\"literal\">true</span>)</span><br><span class=\"line\"> .AddEnvironmentVariables();</span><br></pre></td></tr></table></figure><p></p><h4 id=\"配置信息读取\"><a href=\"#配置信息读取\" class=\"headerlink\" title=\"配置信息读取\"></a>配置信息读取</h4><p>配置的读取比以前方便很多，可以直接使用。在ConfigurationBuilder调用Build()方法以后，就可直接取值<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration = builder.Build();</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = Configuration[<span class=\"string\">\"Section:Key\"</span>];</span><br></pre></td></tr></table></figure><p></p><p>当配置更新以后，使用Configuration[“Section:Key”]得到的也是最新的值。</p><h4 id=\"配置强类型\"><a href=\"#配置强类型\" class=\"headerlink\" title=\"配置强类型\"></a>配置强类型</h4><p>可以直接使用强类型，把配置文件转换成你的对象直接使用，只要对象的属性与配置中一一对应即可。<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.Configure&lt;DatabaseOption&gt;(configuration.GetSection(<span class=\"string\">\"Database\"</span>));</span><br></pre></td></tr></table></figure><p></p><p>然后在构造函数中注入<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EntityFrameWorkConfigure</span>(<span class=\"params\">IOptions&lt;DatabaseOption&gt; dataBaseOption</span>)</span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">     _dataBaseOption = dataBaseOption;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"注意：IOptions是单例的，即当你修改了appsettings-json也不会改变它的值，这样一定要重启你的程序才会更新。\"><a href=\"#注意：IOptions是单例的，即当你修改了appsettings-json也不会改变它的值，这样一定要重启你的程序才会更新。\" class=\"headerlink\" title=\"注意：IOptions是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。\"></a>注意：IOptions<t>是单例的，即当你修改了appsettings.json也不会改变它的值，这样一定要重启你的程序才会更新。</t></h5><h4 id=\"使用IOptionsSnapshot自动更新\"><a href=\"#使用IOptionsSnapshot自动更新\" class=\"headerlink\" title=\"使用IOptionsSnapshot自动更新\"></a>使用IOptionsSnapshot<t>自动更新</t></h4><p>如果你希望在使用强类型的时候，也可以自动更新你的配置而不用重启程序，你可以使用IOptionsSnapshot<t><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EntityFrameWorkConfigure</span>(<span class=\"params\">IOptionsSnapshot&lt;DatabaseOption&gt; dataBaseOption</span>)</span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">     _dataBaseOption = dataBaseOption;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></t></p><blockquote><p>原文地址:<a href=\"http://www.zkea.net/codesnippet/detail/post-80\" target=\"_blank\" rel=\"noopener\">http://www.zkea.net/codesnippet/detail/post-80</a></p></blockquote><!-- rebuild by neat -->"},{"title":"亲密关系:通往灵魂的桥梁+无拘无束的关系","date":"2020-03-10T06:28:19.000Z","_content":"\n\"寻找真挚永恒的亲密关系,其实就是寻找自我.\"","source":"_posts/亲密关系-通往灵魂的桥梁-无拘无束的关系.md","raw":"---\ntitle: '亲密关系:通往灵魂的桥梁+无拘无束的关系'\ndate: 2020-03-10 14:28:19\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 亲密关系\n---\n\n\"寻找真挚永恒的亲密关系,其实就是寻找自我.\"","slug":"亲密关系-通往灵魂的桥梁-无拘无束的关系","published":1,"updated":"2020-03-10T08:44:31.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23v004qtkui2sqdhqq3","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>“寻找真挚永恒的亲密关系,其实就是寻找自我.”</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>“寻找真挚永恒的亲密关系,其实就是寻找自我.”</p><!-- rebuild by neat -->"},{"title":"人性的弱点:如何赢得友谊并影响他人","date":"2020-03-11T13:24:58.000Z","_content":"“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”\n<!-- more -->\n\n### 第一篇 人际关系的3大技巧\n\n#### 第1章 想采蜜就请善待蜂巢\n\n* 法则1:避免批评、指责或抱怨。\n* 指责和批评，不能让人长久地改变，反而会招来怨恨。\n* 人际交往中，您一定要明白：我们不是和理性打交道，而是和有情感、有偏见、骄傲、虚荣、活生生的人在打交道。\n* 批评、指责和抱怨，傻子都懂，且大多数傻子还会做；理解和宽容则需要良好的修养和自制力。\n\n### 第2章 人际交往的秘诀\n\n* 法则2：诚挚地赞美别人。\n* 按照西格蒙德·弗洛伊德的说法，一个人做事的动机源自两点：“对性和成功的欲望”。美国著名哲学家约翰·杜威的观点有所不同。他说：人类内心深处最重要的欲望是实现“对重视的渴求”。\n* “凡爱心、善行，应即刻兑现。不要迟疑，不要停留。光阴易逝，时不我待，人生只有一次。”\n\n### 第3章 换位思考\n\n* 法则3：激发他人的主动性。\n* 明天，也许您要请某人办什么事情。切莫着急，开口前请问问自己：“我怎么做，才能让对方有兴趣，并按我的意图去做？”\n* 成功的秘诀是什么？理解他人，站在他人的角度看问题，就当是自己的问题一样。\n* 想要说服别人，首先要激发别人的认可和需求欲望。\n","source":"_posts/人性的弱点-如何赢得友谊并影响他人.md","raw":"---\ntitle: '人性的弱点:如何赢得友谊并影响他人'\ndate: 2020-03-11 21:24:58\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 人际交往\n---\n“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”\n<!-- more -->\n\n### 第一篇 人际关系的3大技巧\n\n#### 第1章 想采蜜就请善待蜂巢\n\n* 法则1:避免批评、指责或抱怨。\n* 指责和批评，不能让人长久地改变，反而会招来怨恨。\n* 人际交往中，您一定要明白：我们不是和理性打交道，而是和有情感、有偏见、骄傲、虚荣、活生生的人在打交道。\n* 批评、指责和抱怨，傻子都懂，且大多数傻子还会做；理解和宽容则需要良好的修养和自制力。\n\n### 第2章 人际交往的秘诀\n\n* 法则2：诚挚地赞美别人。\n* 按照西格蒙德·弗洛伊德的说法，一个人做事的动机源自两点：“对性和成功的欲望”。美国著名哲学家约翰·杜威的观点有所不同。他说：人类内心深处最重要的欲望是实现“对重视的渴求”。\n* “凡爱心、善行，应即刻兑现。不要迟疑，不要停留。光阴易逝，时不我待，人生只有一次。”\n\n### 第3章 换位思考\n\n* 法则3：激发他人的主动性。\n* 明天，也许您要请某人办什么事情。切莫着急，开口前请问问自己：“我怎么做，才能让对方有兴趣，并按我的意图去做？”\n* 成功的秘诀是什么？理解他人，站在他人的角度看问题，就当是自己的问题一样。\n* 想要说服别人，首先要激发别人的认可和需求欲望。\n","slug":"人性的弱点-如何赢得友谊并影响他人","published":1,"updated":"2020-03-11T14:10:51.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23w004ttkuismtznm5c","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”<br><a id=\"more\"></a></p><h3 id=\"第一篇-人际关系的3大技巧\"><a href=\"#第一篇-人际关系的3大技巧\" class=\"headerlink\" title=\"第一篇 人际关系的3大技巧\"></a>第一篇 人际关系的3大技巧</h3><h4 id=\"第1章-想采蜜就请善待蜂巢\"><a href=\"#第1章-想采蜜就请善待蜂巢\" class=\"headerlink\" title=\"第1章 想采蜜就请善待蜂巢\"></a>第1章 想采蜜就请善待蜂巢</h4><ul><li>法则1:避免批评、指责或抱怨。</li><li>指责和批评，不能让人长久地改变，反而会招来怨恨。</li><li>人际交往中，您一定要明白：我们不是和理性打交道，而是和有情感、有偏见、骄傲、虚荣、活生生的人在打交道。</li><li>批评、指责和抱怨，傻子都懂，且大多数傻子还会做；理解和宽容则需要良好的修养和自制力。</li></ul><h3 id=\"第2章-人际交往的秘诀\"><a href=\"#第2章-人际交往的秘诀\" class=\"headerlink\" title=\"第2章 人际交往的秘诀\"></a>第2章 人际交往的秘诀</h3><ul><li>法则2：诚挚地赞美别人。</li><li>按照西格蒙德·弗洛伊德的说法，一个人做事的动机源自两点：“对性和成功的欲望”。美国著名哲学家约翰·杜威的观点有所不同。他说：人类内心深处最重要的欲望是实现“对重视的渴求”。</li><li>“凡爱心、善行，应即刻兑现。不要迟疑，不要停留。光阴易逝，时不我待，人生只有一次。”</li></ul><h3 id=\"第3章-换位思考\"><a href=\"#第3章-换位思考\" class=\"headerlink\" title=\"第3章 换位思考\"></a>第3章 换位思考</h3><ul><li>法则3：激发他人的主动性。</li><li>明天，也许您要请某人办什么事情。切莫着急，开口前请问问自己：“我怎么做，才能让对方有兴趣，并按我的意图去做？”</li><li>成功的秘诀是什么？理解他人，站在他人的角度看问题，就当是自己的问题一样。</li><li>想要说服别人，首先要激发别人的认可和需求欲望。</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>“人际交往能力决定了我受大家欢迎的程度，我要幸福，我要富裕。这一切的一切，都要看我能否掌握书里所说的人际交往技巧。”<br>","more":"</p><h3 id=\"第一篇-人际关系的3大技巧\"><a href=\"#第一篇-人际关系的3大技巧\" class=\"headerlink\" title=\"第一篇 人际关系的3大技巧\"></a>第一篇 人际关系的3大技巧</h3><h4 id=\"第1章-想采蜜就请善待蜂巢\"><a href=\"#第1章-想采蜜就请善待蜂巢\" class=\"headerlink\" title=\"第1章 想采蜜就请善待蜂巢\"></a>第1章 想采蜜就请善待蜂巢</h4><ul><li>法则1:避免批评、指责或抱怨。</li><li>指责和批评，不能让人长久地改变，反而会招来怨恨。</li><li>人际交往中，您一定要明白：我们不是和理性打交道，而是和有情感、有偏见、骄傲、虚荣、活生生的人在打交道。</li><li>批评、指责和抱怨，傻子都懂，且大多数傻子还会做；理解和宽容则需要良好的修养和自制力。</li></ul><h3 id=\"第2章-人际交往的秘诀\"><a href=\"#第2章-人际交往的秘诀\" class=\"headerlink\" title=\"第2章 人际交往的秘诀\"></a>第2章 人际交往的秘诀</h3><ul><li>法则2：诚挚地赞美别人。</li><li>按照西格蒙德·弗洛伊德的说法，一个人做事的动机源自两点：“对性和成功的欲望”。美国著名哲学家约翰·杜威的观点有所不同。他说：人类内心深处最重要的欲望是实现“对重视的渴求”。</li><li>“凡爱心、善行，应即刻兑现。不要迟疑，不要停留。光阴易逝，时不我待，人生只有一次。”</li></ul><h3 id=\"第3章-换位思考\"><a href=\"#第3章-换位思考\" class=\"headerlink\" title=\"第3章 换位思考\"></a>第3章 换位思考</h3><ul><li>法则3：激发他人的主动性。</li><li>明天，也许您要请某人办什么事情。切莫着急，开口前请问问自己：“我怎么做，才能让对方有兴趣，并按我的意图去做？”</li><li>成功的秘诀是什么？理解他人，站在他人的角度看问题，就当是自己的问题一样。</li><li>想要说服别人，首先要激发别人的认可和需求欲望。</li></ul><!-- rebuild by neat -->"},{"title":".Net Linq","date":"2019-07-16T13:47:47.000Z","_content":"#### Linq简介\n\nLinq,语言集成查询,它允许使用C#或VB代码以查询数据库相同的方式来操作不同的数据源.\n<!--more-->\n##### Linq体系结构\n\n* Linq to Objects 对内存中集合的操作\n\n* Linq to DataSets 对数据集Datatable的操作\n\n* Linq to Sql 对Sql Server数据源的操作\n\n* Line to Entities 对Entity Framework的一部分并取代Linq to Sql作为在数据库上使用Linq的标准机制\n\n* Linq to Xml 对Xml数据源的操作\n\n##### Linq的语法\n\nLinq查询表达式以from子句开头,以select子句结束.在两个子句之间,可以使用where,orderby等查询操作符.\n\n```cs\nint[] arr = new int[] { 1, 4, 2, 6, 7, 9, 5, 1, 2, 4 };\nvar query = from r in arr where r < 6 orderby r select r\nvar query2 = arr.Where(r => r < 6).OrderBy(r => r);\nConsole.WriteLine($\"query个数:{query.Count()},query2个数:{query2.Count()}\");\nforeach(var item in query)\n{\n    Console.WriteLine(item);\n}\noreach (var item in query2)\n{\n    Console.WriteLine(item);\n}\n```\n\nLinq的语法分为Lanbda语法和Query语法.\n\n#### Linq to Objects\n\n##### 标准查询操作符\n\n1. 筛选操作符(Where,OfType&lt;TResult>)\n\n   * Where 根据表达式函数过滤元素\n\n    ```cs\n    int[] arr = new int[] { 1, 4, 2, 6, 7, 9, 5, 1, 2, 4 };\n    var query = from r in arr where r < 6 orderby r select r\n    var query2 = arr.Where(r => r < 6).OrderBy(r => r);\n    ```\n\n   * OfType&lt;TResult> 类型筛选\n\n    ```cs\n    object[] data = { \"One\", 2, 3, \"Four\", \"Five\", 6 };\n    var typeFilter = data.OfType<int>();\n    ```\n\n2. 投射操作符(Select,SelectMany)\n\n   * Select是把要遍历的集合IEnumerable逐一遍历，**每次返回一个T**，合并之后直接返回一个IEnumerable.\n\n   * SelectMany则把原有的集合IEnumerable每个元素遍历一遍，**每次返回一个IEnumerable**，把这些IEnumerable的“T”合并之后整体返回一个IEnumerable\n\n   * 例子\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<List<int>> numbers = new List<List<int>>()\n        {\n            new List<int>{1,2,3},\n            new List<int>{4,5,6},\n            new List<int>{7,8,9}\n        };\n        var tokens = numbers.Select(s => s);\n        var tokens1 = numbers.SelectMany(s => s);\n        foreach (List<int> line in tokens)\n        {\n            foreach (int token in line)\n            {\n                Console.WriteLine($\"Select:{token.ToString()}\");\n            }\n        }\n        foreach (int token in tokens1)\n        {\n            Console.WriteLine($\"Select Many:{token.ToString()}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n3. 排序操作符(OrderBy,ThenBy,OrderByDescending,ThenByDescending,Reverse)\n\n   * OrderBy,OrderByDescending 升序排序,降序排序(连续调用,以最后一个为准排序)\n\n   * ThenBy,ThenByDescending 是在使用OrderBy或OrderByDescending之后,再次对结果进行二次排序\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\"},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\"},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"user\"},\n        };\n        var tokens = users.Select(s => s).OrderBy(s => s.UserId).OrderBy(r => r.UserName);\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.WriteLine(\"ThenBy\");\n        tokens = users.Select(s => s).OrderBy(s => s.UserId).ThenBy(r => r.UserName);\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n   * Revise 反转集合中的元素顺序\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\"},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\"},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"user\"},\n        };\n        var tokens = users.OrderBy(s => s.UserName).Reverse();\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n4. 连接操作符(Join,GroupJoin)\n\n   * Join 根据特定的条件合并两个数据源\n\n   * GroupJoin 基于键相等对两个序列的元素进行关联并对结果进行分组.\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\",RoleId =1},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\",RoleId=2},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\",RoleId=3},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=5,UserCode=\"b0002\",UserName=\"user\",RoleId=1},\n        };\n        List<Role> roles = new List<Role>()\n        {\n            new Role(){RoleId = 1,RoleName=\"管理员\"},\n            new Role(){RoleId = 2,RoleName=\"普通用户\"},\n            new Role(){RoleId=3,RoleName=\"被封禁用户\"}\n        };\n        var lists = users.Join(roles, u => u.RoleId, r => r.RoleId, (u, r) => new { u, r }).Select(o => o).ToList();\n        Console.WriteLine(\"Join\");\n        foreach (var user in lists)\n        {\n            Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:{user.r.RoleId},RoleName:{user.r.RoleName}\");\n        }\n        var tokens = users.GroupJoin(roles,u=>u.RoleId,r=>r.RoleId, (u,r) => new { u, r }).Select(o=>o).ToList();\n        Console.WriteLine(\"GroupJoin\");\n        foreach (var user in tokens)\n        {\n            if (user.r.Count() >0)\n            {\n                Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:{user.r.FirstOrDefault().RoleId},RoleName:{user.r.FirstOrDefault().RoleName}\");\n            }\n            else\n            {\n                Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:NULL,RoleName:NULL\");\n            }\n        }\n        Console.ReadLine();\n    }\n    ```\n\n5. 组合操作符(GroupBy,ToLookup)\n\n   * GroupBy 根据关键字值对查询结果进行分组\n\n   * ToLookup 通过创建一对多的字典来组合元素\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\",RoleId=1},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\",RoleId=2},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\",RoleId=3},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\",RoleId=2},\n            new User(){UserId=5,UserCode=\"b0002\",UserName=\"user\",RoleId=1},\n        };\n        List<Role> roles = new List<Role>()\n        {\n            new Role(){RoleId = 1,RoleName=\"管理员\"},\n            new Role(){RoleId = 2,RoleName=\"普通用户\"},\n            new Role(){RoleId=3,RoleName=\"被封禁用户\"}\n        };\n        var lists = users.GroupBy(u => new { u.RoleId, u.UserName }).ToList();\n        Console.WriteLine(\"GroupBy\");\n        foreach (var user in lists)\n        {\n            Console.WriteLine($\"UserName:{user.Key.UserName},RoleId:{user.Key.RoleId},Count:{user.Count()}\");\n        }\n        var tolookup = users.ToLookup(u => u.UserName, u => u.UserId);\n        Console.WriteLine(\"ToLookup\");\n        if(tolookup.Contains(\"admin\"))\n        {\n            foreach(var item in tolookup[\"admin\"])\n            {\n                Console.WriteLine(item);\n            }\n        }\n        Console.ReadLine();\n    }\n    ```\n\n6. 限定操作符(Any,All,Contains)\n\n   * Any 是否包含满足条件的元素\n\n   * All 是否所有元素都满足条件\n\n   * Contains 某一元素是否包含在集合中\n\n    ```cs\n    bool any = users.Any(u => u.UserId == 1);\n    bool all = users.All(u => u.UserId != 0);\n    User user = new User() { UserId = 1, UserCode = \"a0001\", UserName = \"admin\", RoleId = 1 };\n    users.Add(user);\n    bool contain = users.Contains(user);\n    Console.WriteLine($\"any:{any},all:{all},contain:{contain}\");\n    ```\n\n7. 分区操作符(Take,Skip,TakeWhile,SkipWhile)\n\n   * Take 从集合中提取指定数量的元素\n\n   * Skip 从集合中跳过指定数量的元素\n\n   * TakeWhile 提取第一个条件为真时的元素\n\n   * SkipWhere 跳过集合中第一个满足条件的元素,返回剩余的所有元素\n\n    ```cs\n    var take = users.Take(2).ToList();\n    var skip = users.Skip(2).ToList();\n    var takewhile = users.TakeWhile(u => u.UserName == \"admin\").ToList();\n    var skipwhile = users.SkipWhile(u => u.UserName == \"admin\").ToList();\n    foreach(var t in take)\n    {\n        Console.WriteLine($\"take UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in skip)\n    {\n        Console.WriteLine($\"skip UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in takewhile)\n    {\n        Console.WriteLine($\"takewhile UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in skipwhile)\n    {\n        Console.WriteLine($\"skipwhile UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    Console.ReadLine();\n     ```\n\n8. Set操作符(Distinct,Union,Intersect,Except,Zip)\n\n   * Distinct 从集合中删除重复元素\n\n   * Union,Intersect,Except 并集,交集,差集\n\n   * Zip 把两个集合相应的项目合并起来,从到大较小的集合的末尾时停止.\n\n    ```cs\n    var distinct = users.Select(u=>u.UserName).Distinct().ToList();\n    foreach (var t in distinct)\n    {\n        Console.WriteLine($\"Distinct UserName:{t}\");\n    }\n    var startwitha = users.Where(u => u.UserCode.StartsWith('a')).ToList();\n    var endwithr = users.Where(u => u.UserName.EndsWith('r')).ToList();\n    var union = startwitha.Union(endwithr);\n    foreach(var u in union)\n    {\n        Console.WriteLine($\"Union UserId={u.UserId},UserCode={u.UserCode},UserName={u.UserName}\");\n    }\n    var intersect = startwitha.Intersect(endwithr);\n    foreach(var i in intersect)\n    {\n        Console.WriteLine($\"Intersect UserId={i.UserId},UserCode={i.UserCode},UserName={i.UserName}\");\n    }\n    var except = startwitha.Except(endwithr);\n    foreach(var e in except)\n    {\n        Console.WriteLine($\"Except UserId={e.UserId},UserCode={e.UserCode},UserName={e.UserName}\");\n    }\n    var zip = startwitha.Zip(endwithr, (first, second) => first.UserName + \"+\" + second.UserName);\n    foreach(var z in zip)\n    {\n        Console.WriteLine($\"Zip ={z}\");\n    }\n    ```\n\n9. 元素操作符(First,FirstOrDefault,Last,LastOrDefault,ElementAt,ElementAtOrDefault,Single,SingleOrDefault)\n\n   * First 返回第一个满足条件的元素,若不存在,则引发异常\n\n   * FirstOrDefault 返回第一个满足条件的元素,若不存在,则返回默认值\n\n   * Last 返回最后一个满足条件的元素,若不存在,则引发异常\n\n   * LastOrDefault 返回最后一个满足条件的元素,若不存在,则返回默认值\n\n   * ElementAt 返回指定索引位置的元素,若不存在,则引发异常\n\n   * ElementAtOrDefault 返回指定索引位置的元素,若不存在,则返回默认值\n\n   * Single 只返回一个满足条件的元素,若不存在或多个元素都满足条件,则引发异常\n\n   * SingleOrDefault 只返回一个满足条件的元素,若不存在,则返回默认值,若多个元素都满足条件,则引发异常\n\n    ```cs\n    var first = users.Where(u => u.UserName == \"admin\").First();\n    Console.WriteLine($\"First UserId:{first.UserId},UserCode:{first.UserCode},UserName:{first.UserName}\");\n    var firstordefault = users.Where(u => u.UserId == 6).FirstOrDefault();\n    if (firstordefault != null)\n    {\n        Console.WriteLine($\"FirstOrDefault UserId:{firstordefault.UserId},UserCode:{firstordefault.UserCode},UserName:{firstordefault.UserName}\");\n    }\n    var last = users.Where(u => u.UserName == \"admin\").Last();\n    Console.WriteLine($\"Last UserId:{last.UserId},UserCode:{last.UserCode},UserName:{last.UserName}\");\n    var lastordefault = users.Where(u => u.UserName == \"admin\").LastOrDefault();\n    Console.WriteLine($\"LastOrDefault UserId:{lastordefault.UserId},UserCode:{lastordefault.UserCode},UserName:{lastordefault.UserName}\");\n    var elementat = users.Where(u => true).ElementAt(1);\n    Console.WriteLine($\"ElementAt UserId:{elementat.UserId},UserCode:{elementat.UserCode},UserName:{elementat.UserName}\");\n    var elementatordefault = users.Where(u => true).ElementAtOrDefault(3);\n    Console.WriteLine($\"ElementAtOrDefault UserId:{elementatordefault.UserId},UserCode:{elementatordefault.UserCode},UserName:{elementatordefault.UserName}\");\n    var single = users.Where(u => u.UserId == 1).Single();\n    Console.WriteLine($\"Single UserId:{single.UserId},UserCode:{single.UserCode},UserName:{single.UserName}\");\n    var singleordefault = users.Where(u => u.UserName == \"admin\").SingleOrDefault();\n    if (singleordefault != null)\n    {\n        Console.WriteLine(\"SingleOrDefault UserId:{singleordefault.UserId},UserCode:{singleordefault.UserCode},UserName:{singleordefault.UserName}\");\n    }\n    Console.ReadLine();\n     ```\n\n10. 聚合操作符(Count,Sum,Min,Max,Average,Aggregate)\n\n    * Count 返回集合中的项数\n\n    * Sum 计算所有值的总和\n\n    * Min,Max,Average 最小值,最大值,平均值\n\n    * Aggregate 对序列进行累加\n\n    ```cs\n    var count = users.Count();\n    Console.WriteLine($\"Count:{count}\");\n    var sum = users.Sum(u => u.UserId);\n    Console.WriteLine($\"Sum:{sum}\");\n    var min = users.Min(u => u.UserId);\n    Console.WriteLine($\"Min:{min}\");\n    var max = users.Max(u => u.UserCode);\n    Console.WriteLine($\"Max:{max}\");\n    var average = users.Average(u => u.UserId);\n    Console.WriteLine($\"Average:{average}\");\n    var nums = Enumerable.Range(2, 4);\n    var aggregate = nums.Aggregate(1, (a, b) => a * b);\n    Console.WriteLine($\"Aggregate:{aggregate}\");\n    ```\n\n11. 转换操作符(ToArray,AsEnumerable,ToList,ToDictionary,Cast&lt;TResult>)\n\n    使用类型转换符会立刻立即执行结果,将查询结果放在数组/列表和字典中.\n\n     ```cs\n     User[] array = users.Where(u => u.UserName == \"admin\").ToArray();\n     List<User> list = users.Where(u => u.UserName == \"user\").ToList();\n     Dictionary<string, User> dic = users.Where(u => u.UserId == 1).ToDictionary(u => u.UserCode);\n     IEnumerable<User> enumerable = users.Where(u => true).AsEnumerable();\n     User user = users.Where(u => u.UserId == 1).Cast<User>().Single();\n     ```\n\n12. 生成操作符(Empty,Range,Repeat)\n\n    * Empty 生成空集合\n    * Range 生成一系列数字的集合\n    * Repeat 返回始终重复一个值的集合\n\n    ```cs\n    var empty = Enumerable.Empty<int>();\n    Console.WriteLine($\"Count:{empty.Count()}\");\n    var range = Enumerable.Range(1, 100);\n    foreach(var r in range)\n    {\n        Console.WriteLine($\"Range:{r}\");\n    }\n    var repeat = Enumerable.Repeat(5, 10);\n    foreach (var r in repeat)\n    {\n        Console.WriteLine($\"Repeat:{r}\");\n    }\n    ```\n","source":"_posts/Net-Linq.md","raw":"---\ntitle: .Net Linq\ndate: 2019-07-16 21:47:47\ncategories: .Net\ntags:\n - .Net\n - Linq\n---\n#### Linq简介\n\nLinq,语言集成查询,它允许使用C#或VB代码以查询数据库相同的方式来操作不同的数据源.\n<!--more-->\n##### Linq体系结构\n\n* Linq to Objects 对内存中集合的操作\n\n* Linq to DataSets 对数据集Datatable的操作\n\n* Linq to Sql 对Sql Server数据源的操作\n\n* Line to Entities 对Entity Framework的一部分并取代Linq to Sql作为在数据库上使用Linq的标准机制\n\n* Linq to Xml 对Xml数据源的操作\n\n##### Linq的语法\n\nLinq查询表达式以from子句开头,以select子句结束.在两个子句之间,可以使用where,orderby等查询操作符.\n\n```cs\nint[] arr = new int[] { 1, 4, 2, 6, 7, 9, 5, 1, 2, 4 };\nvar query = from r in arr where r < 6 orderby r select r\nvar query2 = arr.Where(r => r < 6).OrderBy(r => r);\nConsole.WriteLine($\"query个数:{query.Count()},query2个数:{query2.Count()}\");\nforeach(var item in query)\n{\n    Console.WriteLine(item);\n}\noreach (var item in query2)\n{\n    Console.WriteLine(item);\n}\n```\n\nLinq的语法分为Lanbda语法和Query语法.\n\n#### Linq to Objects\n\n##### 标准查询操作符\n\n1. 筛选操作符(Where,OfType&lt;TResult>)\n\n   * Where 根据表达式函数过滤元素\n\n    ```cs\n    int[] arr = new int[] { 1, 4, 2, 6, 7, 9, 5, 1, 2, 4 };\n    var query = from r in arr where r < 6 orderby r select r\n    var query2 = arr.Where(r => r < 6).OrderBy(r => r);\n    ```\n\n   * OfType&lt;TResult> 类型筛选\n\n    ```cs\n    object[] data = { \"One\", 2, 3, \"Four\", \"Five\", 6 };\n    var typeFilter = data.OfType<int>();\n    ```\n\n2. 投射操作符(Select,SelectMany)\n\n   * Select是把要遍历的集合IEnumerable逐一遍历，**每次返回一个T**，合并之后直接返回一个IEnumerable.\n\n   * SelectMany则把原有的集合IEnumerable每个元素遍历一遍，**每次返回一个IEnumerable**，把这些IEnumerable的“T”合并之后整体返回一个IEnumerable\n\n   * 例子\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<List<int>> numbers = new List<List<int>>()\n        {\n            new List<int>{1,2,3},\n            new List<int>{4,5,6},\n            new List<int>{7,8,9}\n        };\n        var tokens = numbers.Select(s => s);\n        var tokens1 = numbers.SelectMany(s => s);\n        foreach (List<int> line in tokens)\n        {\n            foreach (int token in line)\n            {\n                Console.WriteLine($\"Select:{token.ToString()}\");\n            }\n        }\n        foreach (int token in tokens1)\n        {\n            Console.WriteLine($\"Select Many:{token.ToString()}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n3. 排序操作符(OrderBy,ThenBy,OrderByDescending,ThenByDescending,Reverse)\n\n   * OrderBy,OrderByDescending 升序排序,降序排序(连续调用,以最后一个为准排序)\n\n   * ThenBy,ThenByDescending 是在使用OrderBy或OrderByDescending之后,再次对结果进行二次排序\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\"},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\"},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"user\"},\n        };\n        var tokens = users.Select(s => s).OrderBy(s => s.UserId).OrderBy(r => r.UserName);\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.WriteLine(\"ThenBy\");\n        tokens = users.Select(s => s).OrderBy(s => s.UserId).ThenBy(r => r.UserName);\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n   * Revise 反转集合中的元素顺序\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\"},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\"},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"user\"},\n        };\n        var tokens = users.OrderBy(s => s.UserName).Reverse();\n        foreach (var user in tokens)\n        {\n            Console.WriteLine($\"UserId:{user.UserId},UserName:{user.UserName}\");\n        }\n        Console.ReadLine();\n    }\n    ```\n\n4. 连接操作符(Join,GroupJoin)\n\n   * Join 根据特定的条件合并两个数据源\n\n   * GroupJoin 基于键相等对两个序列的元素进行关联并对结果进行分组.\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\",RoleId =1},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\",RoleId=2},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\",RoleId=3},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\"},\n            new User(){UserId=5,UserCode=\"b0002\",UserName=\"user\",RoleId=1},\n        };\n        List<Role> roles = new List<Role>()\n        {\n            new Role(){RoleId = 1,RoleName=\"管理员\"},\n            new Role(){RoleId = 2,RoleName=\"普通用户\"},\n            new Role(){RoleId=3,RoleName=\"被封禁用户\"}\n        };\n        var lists = users.Join(roles, u => u.RoleId, r => r.RoleId, (u, r) => new { u, r }).Select(o => o).ToList();\n        Console.WriteLine(\"Join\");\n        foreach (var user in lists)\n        {\n            Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:{user.r.RoleId},RoleName:{user.r.RoleName}\");\n        }\n        var tokens = users.GroupJoin(roles,u=>u.RoleId,r=>r.RoleId, (u,r) => new { u, r }).Select(o=>o).ToList();\n        Console.WriteLine(\"GroupJoin\");\n        foreach (var user in tokens)\n        {\n            if (user.r.Count() >0)\n            {\n                Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:{user.r.FirstOrDefault().RoleId},RoleName:{user.r.FirstOrDefault().RoleName}\");\n            }\n            else\n            {\n                Console.WriteLine($\"UserId:{user.u.UserId},UserName:{user.u.UserName},RoleId:NULL,RoleName:NULL\");\n            }\n        }\n        Console.ReadLine();\n    }\n    ```\n\n5. 组合操作符(GroupBy,ToLookup)\n\n   * GroupBy 根据关键字值对查询结果进行分组\n\n   * ToLookup 通过创建一对多的字典来组合元素\n\n    ```cs\n    private static void Main(string[] args)\n    {\n        List<User> users = new List<User>()\n        {\n            new User(){UserId=1,UserCode=\"a0001\",UserName=\"admin\",RoleId=1},\n            new User(){UserId=2,UserCode=\"b0001\",UserName=\"super\",RoleId=2},\n            new User(){UserId=3,UserCode=\"a0002\",UserName=\"user\",RoleId=3},\n            new User(){UserId=4,UserCode=\"b0002\",UserName=\"admin\",RoleId=2},\n            new User(){UserId=5,UserCode=\"b0002\",UserName=\"user\",RoleId=1},\n        };\n        List<Role> roles = new List<Role>()\n        {\n            new Role(){RoleId = 1,RoleName=\"管理员\"},\n            new Role(){RoleId = 2,RoleName=\"普通用户\"},\n            new Role(){RoleId=3,RoleName=\"被封禁用户\"}\n        };\n        var lists = users.GroupBy(u => new { u.RoleId, u.UserName }).ToList();\n        Console.WriteLine(\"GroupBy\");\n        foreach (var user in lists)\n        {\n            Console.WriteLine($\"UserName:{user.Key.UserName},RoleId:{user.Key.RoleId},Count:{user.Count()}\");\n        }\n        var tolookup = users.ToLookup(u => u.UserName, u => u.UserId);\n        Console.WriteLine(\"ToLookup\");\n        if(tolookup.Contains(\"admin\"))\n        {\n            foreach(var item in tolookup[\"admin\"])\n            {\n                Console.WriteLine(item);\n            }\n        }\n        Console.ReadLine();\n    }\n    ```\n\n6. 限定操作符(Any,All,Contains)\n\n   * Any 是否包含满足条件的元素\n\n   * All 是否所有元素都满足条件\n\n   * Contains 某一元素是否包含在集合中\n\n    ```cs\n    bool any = users.Any(u => u.UserId == 1);\n    bool all = users.All(u => u.UserId != 0);\n    User user = new User() { UserId = 1, UserCode = \"a0001\", UserName = \"admin\", RoleId = 1 };\n    users.Add(user);\n    bool contain = users.Contains(user);\n    Console.WriteLine($\"any:{any},all:{all},contain:{contain}\");\n    ```\n\n7. 分区操作符(Take,Skip,TakeWhile,SkipWhile)\n\n   * Take 从集合中提取指定数量的元素\n\n   * Skip 从集合中跳过指定数量的元素\n\n   * TakeWhile 提取第一个条件为真时的元素\n\n   * SkipWhere 跳过集合中第一个满足条件的元素,返回剩余的所有元素\n\n    ```cs\n    var take = users.Take(2).ToList();\n    var skip = users.Skip(2).ToList();\n    var takewhile = users.TakeWhile(u => u.UserName == \"admin\").ToList();\n    var skipwhile = users.SkipWhile(u => u.UserName == \"admin\").ToList();\n    foreach(var t in take)\n    {\n        Console.WriteLine($\"take UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in skip)\n    {\n        Console.WriteLine($\"skip UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in takewhile)\n    {\n        Console.WriteLine($\"takewhile UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    foreach (var t in skipwhile)\n    {\n        Console.WriteLine($\"skipwhile UserId:{t.UserId},UserCode:{t.UserCode},UserName:{t.UserName}\");\n    }\n    Console.ReadLine();\n     ```\n\n8. Set操作符(Distinct,Union,Intersect,Except,Zip)\n\n   * Distinct 从集合中删除重复元素\n\n   * Union,Intersect,Except 并集,交集,差集\n\n   * Zip 把两个集合相应的项目合并起来,从到大较小的集合的末尾时停止.\n\n    ```cs\n    var distinct = users.Select(u=>u.UserName).Distinct().ToList();\n    foreach (var t in distinct)\n    {\n        Console.WriteLine($\"Distinct UserName:{t}\");\n    }\n    var startwitha = users.Where(u => u.UserCode.StartsWith('a')).ToList();\n    var endwithr = users.Where(u => u.UserName.EndsWith('r')).ToList();\n    var union = startwitha.Union(endwithr);\n    foreach(var u in union)\n    {\n        Console.WriteLine($\"Union UserId={u.UserId},UserCode={u.UserCode},UserName={u.UserName}\");\n    }\n    var intersect = startwitha.Intersect(endwithr);\n    foreach(var i in intersect)\n    {\n        Console.WriteLine($\"Intersect UserId={i.UserId},UserCode={i.UserCode},UserName={i.UserName}\");\n    }\n    var except = startwitha.Except(endwithr);\n    foreach(var e in except)\n    {\n        Console.WriteLine($\"Except UserId={e.UserId},UserCode={e.UserCode},UserName={e.UserName}\");\n    }\n    var zip = startwitha.Zip(endwithr, (first, second) => first.UserName + \"+\" + second.UserName);\n    foreach(var z in zip)\n    {\n        Console.WriteLine($\"Zip ={z}\");\n    }\n    ```\n\n9. 元素操作符(First,FirstOrDefault,Last,LastOrDefault,ElementAt,ElementAtOrDefault,Single,SingleOrDefault)\n\n   * First 返回第一个满足条件的元素,若不存在,则引发异常\n\n   * FirstOrDefault 返回第一个满足条件的元素,若不存在,则返回默认值\n\n   * Last 返回最后一个满足条件的元素,若不存在,则引发异常\n\n   * LastOrDefault 返回最后一个满足条件的元素,若不存在,则返回默认值\n\n   * ElementAt 返回指定索引位置的元素,若不存在,则引发异常\n\n   * ElementAtOrDefault 返回指定索引位置的元素,若不存在,则返回默认值\n\n   * Single 只返回一个满足条件的元素,若不存在或多个元素都满足条件,则引发异常\n\n   * SingleOrDefault 只返回一个满足条件的元素,若不存在,则返回默认值,若多个元素都满足条件,则引发异常\n\n    ```cs\n    var first = users.Where(u => u.UserName == \"admin\").First();\n    Console.WriteLine($\"First UserId:{first.UserId},UserCode:{first.UserCode},UserName:{first.UserName}\");\n    var firstordefault = users.Where(u => u.UserId == 6).FirstOrDefault();\n    if (firstordefault != null)\n    {\n        Console.WriteLine($\"FirstOrDefault UserId:{firstordefault.UserId},UserCode:{firstordefault.UserCode},UserName:{firstordefault.UserName}\");\n    }\n    var last = users.Where(u => u.UserName == \"admin\").Last();\n    Console.WriteLine($\"Last UserId:{last.UserId},UserCode:{last.UserCode},UserName:{last.UserName}\");\n    var lastordefault = users.Where(u => u.UserName == \"admin\").LastOrDefault();\n    Console.WriteLine($\"LastOrDefault UserId:{lastordefault.UserId},UserCode:{lastordefault.UserCode},UserName:{lastordefault.UserName}\");\n    var elementat = users.Where(u => true).ElementAt(1);\n    Console.WriteLine($\"ElementAt UserId:{elementat.UserId},UserCode:{elementat.UserCode},UserName:{elementat.UserName}\");\n    var elementatordefault = users.Where(u => true).ElementAtOrDefault(3);\n    Console.WriteLine($\"ElementAtOrDefault UserId:{elementatordefault.UserId},UserCode:{elementatordefault.UserCode},UserName:{elementatordefault.UserName}\");\n    var single = users.Where(u => u.UserId == 1).Single();\n    Console.WriteLine($\"Single UserId:{single.UserId},UserCode:{single.UserCode},UserName:{single.UserName}\");\n    var singleordefault = users.Where(u => u.UserName == \"admin\").SingleOrDefault();\n    if (singleordefault != null)\n    {\n        Console.WriteLine(\"SingleOrDefault UserId:{singleordefault.UserId},UserCode:{singleordefault.UserCode},UserName:{singleordefault.UserName}\");\n    }\n    Console.ReadLine();\n     ```\n\n10. 聚合操作符(Count,Sum,Min,Max,Average,Aggregate)\n\n    * Count 返回集合中的项数\n\n    * Sum 计算所有值的总和\n\n    * Min,Max,Average 最小值,最大值,平均值\n\n    * Aggregate 对序列进行累加\n\n    ```cs\n    var count = users.Count();\n    Console.WriteLine($\"Count:{count}\");\n    var sum = users.Sum(u => u.UserId);\n    Console.WriteLine($\"Sum:{sum}\");\n    var min = users.Min(u => u.UserId);\n    Console.WriteLine($\"Min:{min}\");\n    var max = users.Max(u => u.UserCode);\n    Console.WriteLine($\"Max:{max}\");\n    var average = users.Average(u => u.UserId);\n    Console.WriteLine($\"Average:{average}\");\n    var nums = Enumerable.Range(2, 4);\n    var aggregate = nums.Aggregate(1, (a, b) => a * b);\n    Console.WriteLine($\"Aggregate:{aggregate}\");\n    ```\n\n11. 转换操作符(ToArray,AsEnumerable,ToList,ToDictionary,Cast&lt;TResult>)\n\n    使用类型转换符会立刻立即执行结果,将查询结果放在数组/列表和字典中.\n\n     ```cs\n     User[] array = users.Where(u => u.UserName == \"admin\").ToArray();\n     List<User> list = users.Where(u => u.UserName == \"user\").ToList();\n     Dictionary<string, User> dic = users.Where(u => u.UserId == 1).ToDictionary(u => u.UserCode);\n     IEnumerable<User> enumerable = users.Where(u => true).AsEnumerable();\n     User user = users.Where(u => u.UserId == 1).Cast<User>().Single();\n     ```\n\n12. 生成操作符(Empty,Range,Repeat)\n\n    * Empty 生成空集合\n    * Range 生成一系列数字的集合\n    * Repeat 返回始终重复一个值的集合\n\n    ```cs\n    var empty = Enumerable.Empty<int>();\n    Console.WriteLine($\"Count:{empty.Count()}\");\n    var range = Enumerable.Range(1, 100);\n    foreach(var r in range)\n    {\n        Console.WriteLine($\"Range:{r}\");\n    }\n    var repeat = Enumerable.Repeat(5, 10);\n    foreach (var r in repeat)\n    {\n        Console.WriteLine($\"Repeat:{r}\");\n    }\n    ```\n","slug":"Net-Linq","published":1,"updated":"2019-07-16T14:07:03.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23x004wtkuis5incfzm","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"Linq简介\"><a href=\"#Linq简介\" class=\"headerlink\" title=\"Linq简介\"></a>Linq简介</h4><p>Linq,语言集成查询,它允许使用C#或VB代码以查询数据库相同的方式来操作不同的数据源.<br><a id=\"more\"></a></p><h5 id=\"Linq体系结构\"><a href=\"#Linq体系结构\" class=\"headerlink\" title=\"Linq体系结构\"></a>Linq体系结构</h5><ul><li><p>Linq to Objects 对内存中集合的操作</p></li><li><p>Linq to DataSets 对数据集Datatable的操作</p></li><li><p>Linq to Sql 对Sql Server数据源的操作</p></li><li><p>Line to Entities 对Entity Framework的一部分并取代Linq to Sql作为在数据库上使用Linq的标准机制</p></li><li><p>Linq to Xml 对Xml数据源的操作</p></li></ul><h5 id=\"Linq的语法\"><a href=\"#Linq的语法\" class=\"headerlink\" title=\"Linq的语法\"></a>Linq的语法</h5><p>Linq查询表达式以from子句开头,以select子句结束.在两个子句之间,可以使用where,orderby等查询操作符.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> r <span class=\"keyword\">in</span> arr <span class=\"keyword\">where</span> r &lt; <span class=\"number\">6</span> <span class=\"keyword\">orderby</span> r <span class=\"keyword\">select</span> r</span><br><span class=\"line\"><span class=\"keyword\">var</span> query2 = arr.Where(r =&gt; r &lt; <span class=\"number\">6</span>).OrderBy(r =&gt; r);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"query个数:<span class=\"subst\">&#123;query.Count()&#125;</span>,query2个数:<span class=\"subst\">&#123;query2.Count()&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> query)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oreach (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> query2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Linq的语法分为Lanbda语法和Query语法.</p><h4 id=\"Linq-to-Objects\"><a href=\"#Linq-to-Objects\" class=\"headerlink\" title=\"Linq to Objects\"></a>Linq to Objects</h4><h5 id=\"标准查询操作符\"><a href=\"#标准查询操作符\" class=\"headerlink\" title=\"标准查询操作符\"></a>标准查询操作符</h5><ol><li><p>筛选操作符(Where,OfType&lt;TResult&gt;)</p><ul><li><p>Where 根据表达式函数过滤元素</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> r <span class=\"keyword\">in</span> arr <span class=\"keyword\">where</span> r &lt; <span class=\"number\">6</span> <span class=\"keyword\">orderby</span> r <span class=\"keyword\">select</span> r</span><br><span class=\"line\"><span class=\"keyword\">var</span> query2 = arr.Where(r =&gt; r &lt; <span class=\"number\">6</span>).OrderBy(r =&gt; r);</span><br></pre></td></tr></table></figure></li><li><p>OfType&lt;TResult&gt; 类型筛选</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span>[] data = &#123; <span class=\"string\">\"One\"</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">\"Four\"</span>, <span class=\"string\">\"Five\"</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> typeFilter = data.OfType&lt;<span class=\"keyword\">int</span>&gt;();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>投射操作符(Select,SelectMany)</p><ul><li><p>Select是把要遍历的集合IEnumerable逐一遍历，<strong>每次返回一个T</strong>，合并之后直接返回一个IEnumerable.</p></li><li><p>SelectMany则把原有的集合IEnumerable每个元素遍历一遍，<strong>每次返回一个IEnumerable</strong>，把这些IEnumerable的“T”合并之后整体返回一个IEnumerable</p></li><li><p>例子</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;List&lt;<span class=\"keyword\">int</span>&gt;&gt; numbers = <span class=\"keyword\">new</span> List&lt;List&lt;<span class=\"keyword\">int</span>&gt;&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = numbers.Select(s =&gt; s);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens1 = numbers.SelectMany(s =&gt; s);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (List&lt;<span class=\"keyword\">int</span>&gt; line <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">int</span> token <span class=\"keyword\">in</span> line)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"Select:<span class=\"subst\">&#123;token.ToString()&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">int</span> token <span class=\"keyword\">in</span> tokens1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"Select Many:<span class=\"subst\">&#123;token.ToString()&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>排序操作符(OrderBy,ThenBy,OrderByDescending,ThenByDescending,Reverse)</p><ul><li><p>OrderBy,OrderByDescending 升序排序,降序排序(连续调用,以最后一个为准排序)</p></li><li><p>ThenBy,ThenByDescending 是在使用OrderBy或OrderByDescending之后,再次对结果进行二次排序</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">\"a0001\"</span>,UserName=<span class=\"string\">\"admin\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">\"b0001\"</span>,UserName=<span class=\"string\">\"super\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">\"a0002\"</span>,UserName=<span class=\"string\">\"user\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"admin\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"user\"</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.Select(s =&gt; s).OrderBy(s =&gt; s.UserId).OrderBy(r =&gt; r.UserName);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"ThenBy\"</span>);</span><br><span class=\"line\">    tokens = users.Select(s =&gt; s).OrderBy(s =&gt; s.UserId).ThenBy(r =&gt; r.UserName);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Revise 反转集合中的元素顺序</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">\"a0001\"</span>,UserName=<span class=\"string\">\"admin\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">\"b0001\"</span>,UserName=<span class=\"string\">\"super\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">\"a0002\"</span>,UserName=<span class=\"string\">\"user\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"admin\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"user\"</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.OrderBy(s =&gt; s.UserName).Reverse();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>连接操作符(Join,GroupJoin)</p><ul><li><p>Join 根据特定的条件合并两个数据源</p></li><li><p>GroupJoin 基于键相等对两个序列的元素进行关联并对结果进行分组.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">\"a0001\"</span>,UserName=<span class=\"string\">\"admin\"</span>,RoleId =<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">\"b0001\"</span>,UserName=<span class=\"string\">\"super\"</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">\"a0002\"</span>,UserName=<span class=\"string\">\"user\"</span>,RoleId=<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"admin\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">5</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"user\"</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    List&lt;Role&gt; roles = <span class=\"keyword\">new</span> List&lt;Role&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">1</span>,RoleName=<span class=\"string\">\"管理员\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">2</span>,RoleName=<span class=\"string\">\"普通用户\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId=<span class=\"number\">3</span>,RoleName=<span class=\"string\">\"被封禁用户\"</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lists = users.Join(roles, u =&gt; u.RoleId, r =&gt; r.RoleId, (u, r) =&gt; <span class=\"keyword\">new</span> &#123; u, r &#125;).Select(o =&gt; o).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Join\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> lists)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.r.RoleId&#125;</span>,RoleName:<span class=\"subst\">&#123;user.r.RoleName&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.GroupJoin(roles,u=&gt;u.RoleId,r=&gt;r.RoleId, (u,r) =&gt; <span class=\"keyword\">new</span> &#123; u, r &#125;).Select(o=&gt;o).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"GroupJoin\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user.r.Count() &gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.r.FirstOrDefault().RoleId&#125;</span>,RoleName:<span class=\"subst\">&#123;user.r.FirstOrDefault().RoleName&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:NULL,RoleName:NULL\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>组合操作符(GroupBy,ToLookup)</p><ul><li><p>GroupBy 根据关键字值对查询结果进行分组</p></li><li><p>ToLookup 通过创建一对多的字典来组合元素</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">\"a0001\"</span>,UserName=<span class=\"string\">\"admin\"</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">\"b0001\"</span>,UserName=<span class=\"string\">\"super\"</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">\"a0002\"</span>,UserName=<span class=\"string\">\"user\"</span>,RoleId=<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"admin\"</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">5</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"user\"</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    List&lt;Role&gt; roles = <span class=\"keyword\">new</span> List&lt;Role&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">1</span>,RoleName=<span class=\"string\">\"管理员\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">2</span>,RoleName=<span class=\"string\">\"普通用户\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId=<span class=\"number\">3</span>,RoleName=<span class=\"string\">\"被封禁用户\"</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lists = users.GroupBy(u =&gt; <span class=\"keyword\">new</span> &#123; u.RoleId, u.UserName &#125;).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"GroupBy\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> lists)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"UserName:<span class=\"subst\">&#123;user.Key.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.Key.RoleId&#125;</span>,Count:<span class=\"subst\">&#123;user.Count()&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tolookup = users.ToLookup(u =&gt; u.UserName, u =&gt; u.UserId);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"ToLookup\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tolookup.Contains(<span class=\"string\">\"admin\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> tolookup[<span class=\"string\">\"admin\"</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>限定操作符(Any,All,Contains)</p><ul><li><p>Any 是否包含满足条件的元素</p></li><li><p>All 是否所有元素都满足条件</p></li><li><p>Contains 某一元素是否包含在集合中</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> any = users.Any(u =&gt; u.UserId == <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">bool</span> all = users.All(u =&gt; u.UserId != <span class=\"number\">0</span>);</span><br><span class=\"line\">User user = <span class=\"keyword\">new</span> User() &#123; UserId = <span class=\"number\">1</span>, UserCode = <span class=\"string\">\"a0001\"</span>, UserName = <span class=\"string\">\"admin\"</span>, RoleId = <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">users.Add(user);</span><br><span class=\"line\"><span class=\"keyword\">bool</span> contain = users.Contains(user);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"any:<span class=\"subst\">&#123;any&#125;</span>,all:<span class=\"subst\">&#123;all&#125;</span>,contain:<span class=\"subst\">&#123;contain&#125;</span>\"</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>分区操作符(Take,Skip,TakeWhile,SkipWhile)</p><ul><li><p>Take 从集合中提取指定数量的元素</p></li><li><p>Skip 从集合中跳过指定数量的元素</p></li><li><p>TakeWhile 提取第一个条件为真时的元素</p></li><li><p>SkipWhere 跳过集合中第一个满足条件的元素,返回剩余的所有元素</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> take = users.Take(<span class=\"number\">2</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> skip = users.Skip(<span class=\"number\">2</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> takewhile = users.TakeWhile(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> skipwhile = users.SkipWhile(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> take)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"take UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> skip)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"skip UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> takewhile)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"takewhile UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> skipwhile)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"skipwhile UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Console.ReadLine();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Set操作符(Distinct,Union,Intersect,Except,Zip)</p><ul><li><p>Distinct 从集合中删除重复元素</p></li><li><p>Union,Intersect,Except 并集,交集,差集</p></li><li><p>Zip 把两个集合相应的项目合并起来,从到大较小的集合的末尾时停止.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> distinct = users.Select(u=&gt;u.UserName).Distinct().ToList();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> distinct)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Distinct UserName:<span class=\"subst\">&#123;t&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> startwitha = users.Where(u =&gt; u.UserCode.StartsWith(<span class=\"string\">'a'</span>)).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> endwithr = users.Where(u =&gt; u.UserName.EndsWith(<span class=\"string\">'r'</span>)).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> union = startwitha.Union(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> u <span class=\"keyword\">in</span> union)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Union UserId=<span class=\"subst\">&#123;u.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;u.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;u.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = startwitha.Intersect(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> intersect)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Intersect UserId=<span class=\"subst\">&#123;i.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;i.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;i.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> except = startwitha.Except(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> e <span class=\"keyword\">in</span> except)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Except UserId=<span class=\"subst\">&#123;e.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;e.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;e.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> zip = startwitha.Zip(endwithr, (first, second) =&gt; first.UserName + <span class=\"string\">\"+\"</span> + second.UserName);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> z <span class=\"keyword\">in</span> zip)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Zip =<span class=\"subst\">&#123;z&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>元素操作符(First,FirstOrDefault,Last,LastOrDefault,ElementAt,ElementAtOrDefault,Single,SingleOrDefault)</p><ul><li><p>First 返回第一个满足条件的元素,若不存在,则引发异常</p></li><li><p>FirstOrDefault 返回第一个满足条件的元素,若不存在,则返回默认值</p></li><li><p>Last 返回最后一个满足条件的元素,若不存在,则引发异常</p></li><li><p>LastOrDefault 返回最后一个满足条件的元素,若不存在,则返回默认值</p></li><li><p>ElementAt 返回指定索引位置的元素,若不存在,则引发异常</p></li><li><p>ElementAtOrDefault 返回指定索引位置的元素,若不存在,则返回默认值</p></li><li><p>Single 只返回一个满足条件的元素,若不存在或多个元素都满足条件,则引发异常</p></li><li><p>SingleOrDefault 只返回一个满足条件的元素,若不存在,则返回默认值,若多个元素都满足条件,则引发异常</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = users.Where(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).First();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"First UserId:<span class=\"subst\">&#123;first.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;first.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;first.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> firstordefault = users.Where(u =&gt; u.UserId == <span class=\"number\">6</span>).FirstOrDefault();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (firstordefault != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"FirstOrDefault UserId:<span class=\"subst\">&#123;firstordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;firstordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;firstordefault.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> last = users.Where(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).Last();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Last UserId:<span class=\"subst\">&#123;last.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;last.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;last.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastordefault = users.Where(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).LastOrDefault();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"LastOrDefault UserId:<span class=\"subst\">&#123;lastordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;lastordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;lastordefault.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> elementat = users.Where(u =&gt; <span class=\"literal\">true</span>).ElementAt(<span class=\"number\">1</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"ElementAt UserId:<span class=\"subst\">&#123;elementat.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;elementat.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;elementat.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> elementatordefault = users.Where(u =&gt; <span class=\"literal\">true</span>).ElementAtOrDefault(<span class=\"number\">3</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"ElementAtOrDefault UserId:<span class=\"subst\">&#123;elementatordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;elementatordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;elementatordefault.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> single = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).Single();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Single UserId:<span class=\"subst\">&#123;single.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;single.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;single.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> singleordefault = users.Where(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).SingleOrDefault();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (singleordefault != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"SingleOrDefault UserId:&#123;singleordefault.UserId&#125;,UserCode:&#123;singleordefault.UserCode&#125;,UserName:&#123;singleordefault.UserName&#125;\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Console.ReadLine();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>聚合操作符(Count,Sum,Min,Max,Average,Aggregate)</p><ul><li><p>Count 返回集合中的项数</p></li><li><p>Sum 计算所有值的总和</p></li><li><p>Min,Max,Average 最小值,最大值,平均值</p></li><li><p>Aggregate 对序列进行累加</p></li></ul><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = users.Count();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Count:<span class=\"subst\">&#123;count&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = users.Sum(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Sum:<span class=\"subst\">&#123;sum&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> min = users.Min(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Min:<span class=\"subst\">&#123;min&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = users.Max(u =&gt; u.UserCode);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Max:<span class=\"subst\">&#123;max&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> average = users.Average(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Average:<span class=\"subst\">&#123;average&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nums = Enumerable.Range(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> aggregate = nums.Aggregate(<span class=\"number\">1</span>, (a, b) =&gt; a * b);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Aggregate:<span class=\"subst\">&#123;aggregate&#125;</span>\"</span>);</span><br></pre></td></tr></table></figure></li><li><p>转换操作符(ToArray,AsEnumerable,ToList,ToDictionary,Cast&lt;TResult&gt;)</p><p>使用类型转换符会立刻立即执行结果,将查询结果放在数组/列表和字典中.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User[] array = users.Where(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).ToArray();</span><br><span class=\"line\">List&lt;User&gt; list = users.Where(u =&gt; u.UserName == <span class=\"string\">\"user\"</span>).ToList();</span><br><span class=\"line\">Dictionary&lt;<span class=\"keyword\">string</span>, User&gt; dic = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).ToDictionary(u =&gt; u.UserCode);</span><br><span class=\"line\">IEnumerable&lt;User&gt; enumerable = users.Where(u =&gt; <span class=\"literal\">true</span>).AsEnumerable();</span><br><span class=\"line\">User user = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).Cast&lt;User&gt;().Single();</span><br></pre></td></tr></table></figure></li><li><p>生成操作符(Empty,Range,Repeat)</p><ul><li>Empty 生成空集合</li><li>Range 生成一系列数字的集合</li><li>Repeat 返回始终重复一个值的集合</li></ul><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> empty = Enumerable.Empty&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Count:<span class=\"subst\">&#123;empty.Count()&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> range = Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> range)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Range:<span class=\"subst\">&#123;r&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> repeat = Enumerable.Repeat(<span class=\"number\">5</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> repeat)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Repeat:<span class=\"subst\">&#123;r&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"Linq简介\"><a href=\"#Linq简介\" class=\"headerlink\" title=\"Linq简介\"></a>Linq简介</h4><p>Linq,语言集成查询,它允许使用C#或VB代码以查询数据库相同的方式来操作不同的数据源.<br>","more":"</p><h5 id=\"Linq体系结构\"><a href=\"#Linq体系结构\" class=\"headerlink\" title=\"Linq体系结构\"></a>Linq体系结构</h5><ul><li><p>Linq to Objects 对内存中集合的操作</p></li><li><p>Linq to DataSets 对数据集Datatable的操作</p></li><li><p>Linq to Sql 对Sql Server数据源的操作</p></li><li><p>Line to Entities 对Entity Framework的一部分并取代Linq to Sql作为在数据库上使用Linq的标准机制</p></li><li><p>Linq to Xml 对Xml数据源的操作</p></li></ul><h5 id=\"Linq的语法\"><a href=\"#Linq的语法\" class=\"headerlink\" title=\"Linq的语法\"></a>Linq的语法</h5><p>Linq查询表达式以from子句开头,以select子句结束.在两个子句之间,可以使用where,orderby等查询操作符.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> r <span class=\"keyword\">in</span> arr <span class=\"keyword\">where</span> r &lt; <span class=\"number\">6</span> <span class=\"keyword\">orderby</span> r <span class=\"keyword\">select</span> r</span><br><span class=\"line\"><span class=\"keyword\">var</span> query2 = arr.Where(r =&gt; r &lt; <span class=\"number\">6</span>).OrderBy(r =&gt; r);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"query个数:<span class=\"subst\">&#123;query.Count()&#125;</span>,query2个数:<span class=\"subst\">&#123;query2.Count()&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> query)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oreach (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> query2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Linq的语法分为Lanbda语法和Query语法.</p><h4 id=\"Linq-to-Objects\"><a href=\"#Linq-to-Objects\" class=\"headerlink\" title=\"Linq to Objects\"></a>Linq to Objects</h4><h5 id=\"标准查询操作符\"><a href=\"#标准查询操作符\" class=\"headerlink\" title=\"标准查询操作符\"></a>标准查询操作符</h5><ol><li><p>筛选操作符(Where,OfType&lt;TResult&gt;)</p><ul><li><p>Where 根据表达式函数过滤元素</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> r <span class=\"keyword\">in</span> arr <span class=\"keyword\">where</span> r &lt; <span class=\"number\">6</span> <span class=\"keyword\">orderby</span> r <span class=\"keyword\">select</span> r</span><br><span class=\"line\"><span class=\"keyword\">var</span> query2 = arr.Where(r =&gt; r &lt; <span class=\"number\">6</span>).OrderBy(r =&gt; r);</span><br></pre></td></tr></table></figure></li><li><p>OfType&lt;TResult&gt; 类型筛选</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span>[] data = &#123; <span class=\"string\">\"One\"</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">\"Four\"</span>, <span class=\"string\">\"Five\"</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> typeFilter = data.OfType&lt;<span class=\"keyword\">int</span>&gt;();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>投射操作符(Select,SelectMany)</p><ul><li><p>Select是把要遍历的集合IEnumerable逐一遍历，<strong>每次返回一个T</strong>，合并之后直接返回一个IEnumerable.</p></li><li><p>SelectMany则把原有的集合IEnumerable每个元素遍历一遍，<strong>每次返回一个IEnumerable</strong>，把这些IEnumerable的“T”合并之后整体返回一个IEnumerable</p></li><li><p>例子</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;List&lt;<span class=\"keyword\">int</span>&gt;&gt; numbers = <span class=\"keyword\">new</span> List&lt;List&lt;<span class=\"keyword\">int</span>&gt;&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = numbers.Select(s =&gt; s);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens1 = numbers.SelectMany(s =&gt; s);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (List&lt;<span class=\"keyword\">int</span>&gt; line <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">int</span> token <span class=\"keyword\">in</span> line)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"Select:<span class=\"subst\">&#123;token.ToString()&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">int</span> token <span class=\"keyword\">in</span> tokens1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"Select Many:<span class=\"subst\">&#123;token.ToString()&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>排序操作符(OrderBy,ThenBy,OrderByDescending,ThenByDescending,Reverse)</p><ul><li><p>OrderBy,OrderByDescending 升序排序,降序排序(连续调用,以最后一个为准排序)</p></li><li><p>ThenBy,ThenByDescending 是在使用OrderBy或OrderByDescending之后,再次对结果进行二次排序</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">\"a0001\"</span>,UserName=<span class=\"string\">\"admin\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">\"b0001\"</span>,UserName=<span class=\"string\">\"super\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">\"a0002\"</span>,UserName=<span class=\"string\">\"user\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"admin\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"user\"</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.Select(s =&gt; s).OrderBy(s =&gt; s.UserId).OrderBy(r =&gt; r.UserName);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"ThenBy\"</span>);</span><br><span class=\"line\">    tokens = users.Select(s =&gt; s).OrderBy(s =&gt; s.UserId).ThenBy(r =&gt; r.UserName);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Revise 反转集合中的元素顺序</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">\"a0001\"</span>,UserName=<span class=\"string\">\"admin\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">\"b0001\"</span>,UserName=<span class=\"string\">\"super\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">\"a0002\"</span>,UserName=<span class=\"string\">\"user\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"admin\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"user\"</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.OrderBy(s =&gt; s.UserName).Reverse();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>连接操作符(Join,GroupJoin)</p><ul><li><p>Join 根据特定的条件合并两个数据源</p></li><li><p>GroupJoin 基于键相等对两个序列的元素进行关联并对结果进行分组.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">\"a0001\"</span>,UserName=<span class=\"string\">\"admin\"</span>,RoleId =<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">\"b0001\"</span>,UserName=<span class=\"string\">\"super\"</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">\"a0002\"</span>,UserName=<span class=\"string\">\"user\"</span>,RoleId=<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"admin\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">5</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"user\"</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    List&lt;Role&gt; roles = <span class=\"keyword\">new</span> List&lt;Role&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">1</span>,RoleName=<span class=\"string\">\"管理员\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">2</span>,RoleName=<span class=\"string\">\"普通用户\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId=<span class=\"number\">3</span>,RoleName=<span class=\"string\">\"被封禁用户\"</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lists = users.Join(roles, u =&gt; u.RoleId, r =&gt; r.RoleId, (u, r) =&gt; <span class=\"keyword\">new</span> &#123; u, r &#125;).Select(o =&gt; o).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Join\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> lists)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.r.RoleId&#125;</span>,RoleName:<span class=\"subst\">&#123;user.r.RoleName&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokens = users.GroupJoin(roles,u=&gt;u.RoleId,r=&gt;r.RoleId, (u,r) =&gt; <span class=\"keyword\">new</span> &#123; u, r &#125;).Select(o=&gt;o).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"GroupJoin\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> tokens)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user.r.Count() &gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.r.FirstOrDefault().RoleId&#125;</span>,RoleName:<span class=\"subst\">&#123;user.r.FirstOrDefault().RoleName&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"UserId:<span class=\"subst\">&#123;user.u.UserId&#125;</span>,UserName:<span class=\"subst\">&#123;user.u.UserName&#125;</span>,RoleId:NULL,RoleName:NULL\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>组合操作符(GroupBy,ToLookup)</p><ul><li><p>GroupBy 根据关键字值对查询结果进行分组</p></li><li><p>ToLookup 通过创建一对多的字典来组合元素</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    List&lt;User&gt; users = <span class=\"keyword\">new</span> List&lt;User&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">1</span>,UserCode=<span class=\"string\">\"a0001\"</span>,UserName=<span class=\"string\">\"admin\"</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">2</span>,UserCode=<span class=\"string\">\"b0001\"</span>,UserName=<span class=\"string\">\"super\"</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">3</span>,UserCode=<span class=\"string\">\"a0002\"</span>,UserName=<span class=\"string\">\"user\"</span>,RoleId=<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">4</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"admin\"</span>,RoleId=<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User()&#123;UserId=<span class=\"number\">5</span>,UserCode=<span class=\"string\">\"b0002\"</span>,UserName=<span class=\"string\">\"user\"</span>,RoleId=<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    List&lt;Role&gt; roles = <span class=\"keyword\">new</span> List&lt;Role&gt;()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">1</span>,RoleName=<span class=\"string\">\"管理员\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId = <span class=\"number\">2</span>,RoleName=<span class=\"string\">\"普通用户\"</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Role()&#123;RoleId=<span class=\"number\">3</span>,RoleName=<span class=\"string\">\"被封禁用户\"</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lists = users.GroupBy(u =&gt; <span class=\"keyword\">new</span> &#123; u.RoleId, u.UserName &#125;).ToList();</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"GroupBy\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> user <span class=\"keyword\">in</span> lists)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"UserName:<span class=\"subst\">&#123;user.Key.UserName&#125;</span>,RoleId:<span class=\"subst\">&#123;user.Key.RoleId&#125;</span>,Count:<span class=\"subst\">&#123;user.Count()&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tolookup = users.ToLookup(u =&gt; u.UserName, u =&gt; u.UserId);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"ToLookup\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tolookup.Contains(<span class=\"string\">\"admin\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> tolookup[<span class=\"string\">\"admin\"</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.ReadLine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>限定操作符(Any,All,Contains)</p><ul><li><p>Any 是否包含满足条件的元素</p></li><li><p>All 是否所有元素都满足条件</p></li><li><p>Contains 某一元素是否包含在集合中</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> any = users.Any(u =&gt; u.UserId == <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">bool</span> all = users.All(u =&gt; u.UserId != <span class=\"number\">0</span>);</span><br><span class=\"line\">User user = <span class=\"keyword\">new</span> User() &#123; UserId = <span class=\"number\">1</span>, UserCode = <span class=\"string\">\"a0001\"</span>, UserName = <span class=\"string\">\"admin\"</span>, RoleId = <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">users.Add(user);</span><br><span class=\"line\"><span class=\"keyword\">bool</span> contain = users.Contains(user);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"any:<span class=\"subst\">&#123;any&#125;</span>,all:<span class=\"subst\">&#123;all&#125;</span>,contain:<span class=\"subst\">&#123;contain&#125;</span>\"</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>分区操作符(Take,Skip,TakeWhile,SkipWhile)</p><ul><li><p>Take 从集合中提取指定数量的元素</p></li><li><p>Skip 从集合中跳过指定数量的元素</p></li><li><p>TakeWhile 提取第一个条件为真时的元素</p></li><li><p>SkipWhere 跳过集合中第一个满足条件的元素,返回剩余的所有元素</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> take = users.Take(<span class=\"number\">2</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> skip = users.Skip(<span class=\"number\">2</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> takewhile = users.TakeWhile(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> skipwhile = users.SkipWhile(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).ToList();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> take)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"take UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> skip)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"skip UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> takewhile)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"takewhile UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> skipwhile)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"skipwhile UserId:<span class=\"subst\">&#123;t.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;t.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;t.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Console.ReadLine();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Set操作符(Distinct,Union,Intersect,Except,Zip)</p><ul><li><p>Distinct 从集合中删除重复元素</p></li><li><p>Union,Intersect,Except 并集,交集,差集</p></li><li><p>Zip 把两个集合相应的项目合并起来,从到大较小的集合的末尾时停止.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> distinct = users.Select(u=&gt;u.UserName).Distinct().ToList();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> distinct)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Distinct UserName:<span class=\"subst\">&#123;t&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> startwitha = users.Where(u =&gt; u.UserCode.StartsWith(<span class=\"string\">'a'</span>)).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> endwithr = users.Where(u =&gt; u.UserName.EndsWith(<span class=\"string\">'r'</span>)).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> union = startwitha.Union(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> u <span class=\"keyword\">in</span> union)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Union UserId=<span class=\"subst\">&#123;u.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;u.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;u.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = startwitha.Intersect(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> intersect)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Intersect UserId=<span class=\"subst\">&#123;i.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;i.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;i.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> except = startwitha.Except(endwithr);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> e <span class=\"keyword\">in</span> except)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Except UserId=<span class=\"subst\">&#123;e.UserId&#125;</span>,UserCode=<span class=\"subst\">&#123;e.UserCode&#125;</span>,UserName=<span class=\"subst\">&#123;e.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> zip = startwitha.Zip(endwithr, (first, second) =&gt; first.UserName + <span class=\"string\">\"+\"</span> + second.UserName);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> z <span class=\"keyword\">in</span> zip)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Zip =<span class=\"subst\">&#123;z&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>元素操作符(First,FirstOrDefault,Last,LastOrDefault,ElementAt,ElementAtOrDefault,Single,SingleOrDefault)</p><ul><li><p>First 返回第一个满足条件的元素,若不存在,则引发异常</p></li><li><p>FirstOrDefault 返回第一个满足条件的元素,若不存在,则返回默认值</p></li><li><p>Last 返回最后一个满足条件的元素,若不存在,则引发异常</p></li><li><p>LastOrDefault 返回最后一个满足条件的元素,若不存在,则返回默认值</p></li><li><p>ElementAt 返回指定索引位置的元素,若不存在,则引发异常</p></li><li><p>ElementAtOrDefault 返回指定索引位置的元素,若不存在,则返回默认值</p></li><li><p>Single 只返回一个满足条件的元素,若不存在或多个元素都满足条件,则引发异常</p></li><li><p>SingleOrDefault 只返回一个满足条件的元素,若不存在,则返回默认值,若多个元素都满足条件,则引发异常</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = users.Where(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).First();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"First UserId:<span class=\"subst\">&#123;first.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;first.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;first.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> firstordefault = users.Where(u =&gt; u.UserId == <span class=\"number\">6</span>).FirstOrDefault();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (firstordefault != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"FirstOrDefault UserId:<span class=\"subst\">&#123;firstordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;firstordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;firstordefault.UserName&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> last = users.Where(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).Last();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Last UserId:<span class=\"subst\">&#123;last.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;last.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;last.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastordefault = users.Where(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).LastOrDefault();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"LastOrDefault UserId:<span class=\"subst\">&#123;lastordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;lastordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;lastordefault.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> elementat = users.Where(u =&gt; <span class=\"literal\">true</span>).ElementAt(<span class=\"number\">1</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"ElementAt UserId:<span class=\"subst\">&#123;elementat.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;elementat.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;elementat.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> elementatordefault = users.Where(u =&gt; <span class=\"literal\">true</span>).ElementAtOrDefault(<span class=\"number\">3</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"ElementAtOrDefault UserId:<span class=\"subst\">&#123;elementatordefault.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;elementatordefault.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;elementatordefault.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> single = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).Single();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Single UserId:<span class=\"subst\">&#123;single.UserId&#125;</span>,UserCode:<span class=\"subst\">&#123;single.UserCode&#125;</span>,UserName:<span class=\"subst\">&#123;single.UserName&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> singleordefault = users.Where(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).SingleOrDefault();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (singleordefault != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"SingleOrDefault UserId:&#123;singleordefault.UserId&#125;,UserCode:&#123;singleordefault.UserCode&#125;,UserName:&#123;singleordefault.UserName&#125;\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Console.ReadLine();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>聚合操作符(Count,Sum,Min,Max,Average,Aggregate)</p><ul><li><p>Count 返回集合中的项数</p></li><li><p>Sum 计算所有值的总和</p></li><li><p>Min,Max,Average 最小值,最大值,平均值</p></li><li><p>Aggregate 对序列进行累加</p></li></ul><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = users.Count();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Count:<span class=\"subst\">&#123;count&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = users.Sum(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Sum:<span class=\"subst\">&#123;sum&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> min = users.Min(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Min:<span class=\"subst\">&#123;min&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = users.Max(u =&gt; u.UserCode);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Max:<span class=\"subst\">&#123;max&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> average = users.Average(u =&gt; u.UserId);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Average:<span class=\"subst\">&#123;average&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nums = Enumerable.Range(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> aggregate = nums.Aggregate(<span class=\"number\">1</span>, (a, b) =&gt; a * b);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Aggregate:<span class=\"subst\">&#123;aggregate&#125;</span>\"</span>);</span><br></pre></td></tr></table></figure></li><li><p>转换操作符(ToArray,AsEnumerable,ToList,ToDictionary,Cast&lt;TResult&gt;)</p><p>使用类型转换符会立刻立即执行结果,将查询结果放在数组/列表和字典中.</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User[] array = users.Where(u =&gt; u.UserName == <span class=\"string\">\"admin\"</span>).ToArray();</span><br><span class=\"line\">List&lt;User&gt; list = users.Where(u =&gt; u.UserName == <span class=\"string\">\"user\"</span>).ToList();</span><br><span class=\"line\">Dictionary&lt;<span class=\"keyword\">string</span>, User&gt; dic = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).ToDictionary(u =&gt; u.UserCode);</span><br><span class=\"line\">IEnumerable&lt;User&gt; enumerable = users.Where(u =&gt; <span class=\"literal\">true</span>).AsEnumerable();</span><br><span class=\"line\">User user = users.Where(u =&gt; u.UserId == <span class=\"number\">1</span>).Cast&lt;User&gt;().Single();</span><br></pre></td></tr></table></figure></li><li><p>生成操作符(Empty,Range,Repeat)</p><ul><li>Empty 生成空集合</li><li>Range 生成一系列数字的集合</li><li>Repeat 返回始终重复一个值的集合</li></ul><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> empty = Enumerable.Empty&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Count:<span class=\"subst\">&#123;empty.Count()&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> range = Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> range)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Range:<span class=\"subst\">&#123;r&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> repeat = Enumerable.Repeat(<span class=\"number\">5</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> repeat)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"Repeat:<span class=\"subst\">&#123;r&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->"},{"title":"Wcf创建Http和Webservice接口","date":"2018-03-09T15:37:05.000Z","_content":"不需要部署在iis上，直接打开exe程序即可开启接口。\n同时支持创建一个支持http请求和Webservice接口的wcf服务\n<!--more-->\n\n##### Http请求\n设置了兼容性，不用继承接口，在一个类里可以完成url和参数的设置\n###### HttpInterface.cs\n```cs\n    /// <summary>\n    /// http://127.0.0.1:8880\n    /// </summary>\n    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]\n    [ServiceContract]\n    public class HttpInterface\n    { \n        /// <summary>\n        /// 测试接口\n        /// 调用示例 http://127.0.0.1:8880/wcfapp/TestHttp?test1=测试\n        /// </summary>\n        /// <param name=\"idCardNo\"></param>\n        /// <returns></returns>\n        [OperationContract]\n        [WebInvoke(Method = \"*\",\n        UriTemplate = \"wcfapp/testhttp?test1={test1}\",\n        RequestFormat = WebMessageFormat.Json,\n        ResponseFormat = WebMessageFormat.Xml,\n        BodyStyle = WebMessageBodyStyle.Bare)]\n        public string TestHttp (string test1)\n        {\n            return string.Format(\"HTTP返回测试内容 = {0}\",test1);\n        } \n    }\n```\n\n##### WebService\n调用接口时注意，方法名= 类名\n###### WSInterface.cs\n```cs\n    /// <summary>\n    /// http://127.0.0.1:8881/wstest?wsdl\n    /// </summary>\n    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]\n    [ServiceContract]\n    public class WSInterface\n    { \n\n        [OperationContract]\n        public string TestWS(string test1)\n        {\n            return string.Format(\"Webservice返回测试内容 = {0}\", test1);\n        }\n    }\n```\n\n##### 使用\n###### Program.cs\n```cs\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                Console.Title = \"同时支持http和Webservice交互的服务\";  \n\n                //可以突出重点输出内容\n                Console.ForegroundColor = ConsoleColor.Yellow;\n                Console.WriteLine(\"WCF服务正在初始化.....\");\n                Console.ForegroundColor = ConsoleColor.Gray;\n       \n\n                #region 支持Post和Get\n                Console.WriteLine(\"======================================\");\n                String HttpUrl = \"http://127.0.0.1:8880\";\n                Uri address = new Uri(HttpUrl);\n                WebServiceHost http_host = new WebServiceHost(typeof(HttpInterface), address);  //绑定处理的类\n                http_host.Description.Behaviors.Add(new ServiceMetadataBehavior() { HttpGetEnabled = true });\n                http_host.Open();\n                Console.WriteLine(\"Http请求URL--->\" + HttpUrl);\n                #endregion\n\n                #region 支持Webservice\n                String WsUrl = \"http://127.0.0.1:8881/wstest\";\n                address = new Uri(WsUrl);\n                ServiceHost webservice_host = new ServiceHost(typeof(WSInterface), address); //绑定处理的类\n                webservice_host.Description.Behaviors.Add(new ServiceMetadataBehavior() { HttpGetEnabled = true });\n\n                //=======设置最大连接数\n                ServiceThrottlingBehavior behavior = new ServiceThrottlingBehavior();\n                behavior.MaxConcurrentCalls = 2147483647;\n                behavior.MaxConcurrentInstances = 2147483647;\n                behavior.MaxConcurrentSessions = 2147483647;\n                webservice_host.Description.Behaviors.Add(behavior);\n                Console.WriteLine(\"Webservice请求URL--->\" + WsUrl);\n                webservice_host.Open(); \n                #endregion \n\n                Console.WriteLine(\"WCF服务启动成功!\");\n\n                while (true)\n                {\n                    Console.ReadKey(false);\n                }\n\n            }\n            catch (Exception qq)\n            {\n                Console.WriteLine(qq.Message);\n                Console.WriteLine(\"WCF服务启动失败!\");\n                Console.Read();\n            }\n        }\n    }\n```\n\n","source":"_posts/Wcf创建http和Webservice接口.md","raw":"---\ntitle: Wcf创建Http和Webservice接口\ndate: 2018-03-09 23:37:05\ncategories: .Net\ntags: \n - WCF\n - .Net\n---\n不需要部署在iis上，直接打开exe程序即可开启接口。\n同时支持创建一个支持http请求和Webservice接口的wcf服务\n<!--more-->\n\n##### Http请求\n设置了兼容性，不用继承接口，在一个类里可以完成url和参数的设置\n###### HttpInterface.cs\n```cs\n    /// <summary>\n    /// http://127.0.0.1:8880\n    /// </summary>\n    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]\n    [ServiceContract]\n    public class HttpInterface\n    { \n        /// <summary>\n        /// 测试接口\n        /// 调用示例 http://127.0.0.1:8880/wcfapp/TestHttp?test1=测试\n        /// </summary>\n        /// <param name=\"idCardNo\"></param>\n        /// <returns></returns>\n        [OperationContract]\n        [WebInvoke(Method = \"*\",\n        UriTemplate = \"wcfapp/testhttp?test1={test1}\",\n        RequestFormat = WebMessageFormat.Json,\n        ResponseFormat = WebMessageFormat.Xml,\n        BodyStyle = WebMessageBodyStyle.Bare)]\n        public string TestHttp (string test1)\n        {\n            return string.Format(\"HTTP返回测试内容 = {0}\",test1);\n        } \n    }\n```\n\n##### WebService\n调用接口时注意，方法名= 类名\n###### WSInterface.cs\n```cs\n    /// <summary>\n    /// http://127.0.0.1:8881/wstest?wsdl\n    /// </summary>\n    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]\n    [ServiceContract]\n    public class WSInterface\n    { \n\n        [OperationContract]\n        public string TestWS(string test1)\n        {\n            return string.Format(\"Webservice返回测试内容 = {0}\", test1);\n        }\n    }\n```\n\n##### 使用\n###### Program.cs\n```cs\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                Console.Title = \"同时支持http和Webservice交互的服务\";  \n\n                //可以突出重点输出内容\n                Console.ForegroundColor = ConsoleColor.Yellow;\n                Console.WriteLine(\"WCF服务正在初始化.....\");\n                Console.ForegroundColor = ConsoleColor.Gray;\n       \n\n                #region 支持Post和Get\n                Console.WriteLine(\"======================================\");\n                String HttpUrl = \"http://127.0.0.1:8880\";\n                Uri address = new Uri(HttpUrl);\n                WebServiceHost http_host = new WebServiceHost(typeof(HttpInterface), address);  //绑定处理的类\n                http_host.Description.Behaviors.Add(new ServiceMetadataBehavior() { HttpGetEnabled = true });\n                http_host.Open();\n                Console.WriteLine(\"Http请求URL--->\" + HttpUrl);\n                #endregion\n\n                #region 支持Webservice\n                String WsUrl = \"http://127.0.0.1:8881/wstest\";\n                address = new Uri(WsUrl);\n                ServiceHost webservice_host = new ServiceHost(typeof(WSInterface), address); //绑定处理的类\n                webservice_host.Description.Behaviors.Add(new ServiceMetadataBehavior() { HttpGetEnabled = true });\n\n                //=======设置最大连接数\n                ServiceThrottlingBehavior behavior = new ServiceThrottlingBehavior();\n                behavior.MaxConcurrentCalls = 2147483647;\n                behavior.MaxConcurrentInstances = 2147483647;\n                behavior.MaxConcurrentSessions = 2147483647;\n                webservice_host.Description.Behaviors.Add(behavior);\n                Console.WriteLine(\"Webservice请求URL--->\" + WsUrl);\n                webservice_host.Open(); \n                #endregion \n\n                Console.WriteLine(\"WCF服务启动成功!\");\n\n                while (true)\n                {\n                    Console.ReadKey(false);\n                }\n\n            }\n            catch (Exception qq)\n            {\n                Console.WriteLine(qq.Message);\n                Console.WriteLine(\"WCF服务启动失败!\");\n                Console.Read();\n            }\n        }\n    }\n```\n\n","slug":"Wcf创建http和Webservice接口","published":1,"updated":"2018-03-09T17:27:56.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23y004ztkuil49a6wkt","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>不需要部署在iis上，直接打开exe程序即可开启接口。<br>同时支持创建一个支持http请求和Webservice接口的wcf服务<br><a id=\"more\"></a></p><h5 id=\"Http请求\"><a href=\"#Http请求\" class=\"headerlink\" title=\"Http请求\"></a>Http请求</h5><p>设置了兼容性，不用继承接口，在一个类里可以完成url和参数的设置</p><h6 id=\"HttpInterface-cs\"><a href=\"#HttpInterface-cs\" class=\"headerlink\" title=\"HttpInterface.cs\"></a>HttpInterface.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> http://127.0.0.1:8880</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ServiceContract</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpInterface</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 测试接口</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 调用示例 http://127.0.0.1:8880/wcfapp/TestHttp?test1=测试</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"idCardNo\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">OperationContract</span>]</span><br><span class=\"line\">    [<span class=\"meta\">WebInvoke(Method = <span class=\"meta-string\">\"*\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">    UriTemplate = <span class=\"meta-string\">\"wcfapp/testhttp?test1=&#123;test1&#125;\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">    RequestFormat = WebMessageFormat.Json,</span></span><br><span class=\"line\"><span class=\"meta\">    ResponseFormat = WebMessageFormat.Xml,</span></span><br><span class=\"line\"><span class=\"meta\">    BodyStyle = WebMessageBodyStyle.Bare)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">TestHttp</span> (<span class=\"params\"><span class=\"keyword\">string</span> test1</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"HTTP返回测试内容 = &#123;0&#125;\"</span>,test1);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"WebService\"><a href=\"#WebService\" class=\"headerlink\" title=\"WebService\"></a>WebService</h5><p>调用接口时注意，方法名= 类名</p><h6 id=\"WSInterface-cs\"><a href=\"#WSInterface-cs\" class=\"headerlink\" title=\"WSInterface.cs\"></a>WSInterface.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> http://127.0.0.1:8881/wstest?wsdl</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ServiceContract</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WSInterface</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">OperationContract</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">TestWS</span>(<span class=\"params\"><span class=\"keyword\">string</span> test1</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"Webservice返回测试内容 = &#123;0&#125;\"</span>, test1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.Title = <span class=\"string\">\"同时支持http和Webservice交互的服务\"</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//可以突出重点输出内容</span></span><br><span class=\"line\">                Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"WCF服务正在初始化.....\"</span>);</span><br><span class=\"line\">                Console.ForegroundColor = ConsoleColor.Gray;</span><br><span class=\"line\">       </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 支持Post和Get</span></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"======================================\"</span>);</span><br><span class=\"line\">                String HttpUrl = <span class=\"string\">\"http://127.0.0.1:8880\"</span>;</span><br><span class=\"line\">                Uri address = <span class=\"keyword\">new</span> Uri(HttpUrl);</span><br><span class=\"line\">                WebServiceHost http_host = <span class=\"keyword\">new</span> WebServiceHost(<span class=\"keyword\">typeof</span>(HttpInterface), address);  <span class=\"comment\">//绑定处理的类</span></span><br><span class=\"line\">                http_host.Description.Behaviors.Add(<span class=\"keyword\">new</span> ServiceMetadataBehavior() &#123; HttpGetEnabled = <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">                http_host.Open();</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"Http请求URL---&gt;\"</span> + HttpUrl);</span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 支持Webservice</span></span><br><span class=\"line\">                String WsUrl = <span class=\"string\">\"http://127.0.0.1:8881/wstest\"</span>;</span><br><span class=\"line\">                address = <span class=\"keyword\">new</span> Uri(WsUrl);</span><br><span class=\"line\">                ServiceHost webservice_host = <span class=\"keyword\">new</span> ServiceHost(<span class=\"keyword\">typeof</span>(WSInterface), address); <span class=\"comment\">//绑定处理的类</span></span><br><span class=\"line\">                webservice_host.Description.Behaviors.Add(<span class=\"keyword\">new</span> ServiceMetadataBehavior() &#123; HttpGetEnabled = <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//=======设置最大连接数</span></span><br><span class=\"line\">                ServiceThrottlingBehavior behavior = <span class=\"keyword\">new</span> ServiceThrottlingBehavior();</span><br><span class=\"line\">                behavior.MaxConcurrentCalls = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                behavior.MaxConcurrentInstances = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                behavior.MaxConcurrentSessions = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                webservice_host.Description.Behaviors.Add(behavior);</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"Webservice请求URL---&gt;\"</span> + WsUrl);</span><br><span class=\"line\">                webservice_host.Open(); </span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"WCF服务启动成功!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.ReadKey(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception qq)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(qq.Message);</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"WCF服务启动失败!\"</span>);</span><br><span class=\"line\">                Console.Read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>不需要部署在iis上，直接打开exe程序即可开启接口。<br>同时支持创建一个支持http请求和Webservice接口的wcf服务<br>","more":"</p><h5 id=\"Http请求\"><a href=\"#Http请求\" class=\"headerlink\" title=\"Http请求\"></a>Http请求</h5><p>设置了兼容性，不用继承接口，在一个类里可以完成url和参数的设置</p><h6 id=\"HttpInterface-cs\"><a href=\"#HttpInterface-cs\" class=\"headerlink\" title=\"HttpInterface.cs\"></a>HttpInterface.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> http://127.0.0.1:8880</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ServiceContract</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpInterface</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 测试接口</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 调用示例 http://127.0.0.1:8880/wcfapp/TestHttp?test1=测试</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"idCardNo\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">OperationContract</span>]</span><br><span class=\"line\">    [<span class=\"meta\">WebInvoke(Method = <span class=\"meta-string\">\"*\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">    UriTemplate = <span class=\"meta-string\">\"wcfapp/testhttp?test1=&#123;test1&#125;\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">    RequestFormat = WebMessageFormat.Json,</span></span><br><span class=\"line\"><span class=\"meta\">    ResponseFormat = WebMessageFormat.Xml,</span></span><br><span class=\"line\"><span class=\"meta\">    BodyStyle = WebMessageBodyStyle.Bare)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">TestHttp</span> (<span class=\"params\"><span class=\"keyword\">string</span> test1</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"HTTP返回测试内容 = &#123;0&#125;\"</span>,test1);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"WebService\"><a href=\"#WebService\" class=\"headerlink\" title=\"WebService\"></a>WebService</h5><p>调用接口时注意，方法名= 类名</p><h6 id=\"WSInterface-cs\"><a href=\"#WSInterface-cs\" class=\"headerlink\" title=\"WSInterface.cs\"></a>WSInterface.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> http://127.0.0.1:8881/wstest?wsdl</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ServiceContract</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WSInterface</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">OperationContract</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">TestWS</span>(<span class=\"params\"><span class=\"keyword\">string</span> test1</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"Webservice返回测试内容 = &#123;0&#125;\"</span>, test1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><h6 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h6><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.Title = <span class=\"string\">\"同时支持http和Webservice交互的服务\"</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//可以突出重点输出内容</span></span><br><span class=\"line\">                Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"WCF服务正在初始化.....\"</span>);</span><br><span class=\"line\">                Console.ForegroundColor = ConsoleColor.Gray;</span><br><span class=\"line\">       </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 支持Post和Get</span></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"======================================\"</span>);</span><br><span class=\"line\">                String HttpUrl = <span class=\"string\">\"http://127.0.0.1:8880\"</span>;</span><br><span class=\"line\">                Uri address = <span class=\"keyword\">new</span> Uri(HttpUrl);</span><br><span class=\"line\">                WebServiceHost http_host = <span class=\"keyword\">new</span> WebServiceHost(<span class=\"keyword\">typeof</span>(HttpInterface), address);  <span class=\"comment\">//绑定处理的类</span></span><br><span class=\"line\">                http_host.Description.Behaviors.Add(<span class=\"keyword\">new</span> ServiceMetadataBehavior() &#123; HttpGetEnabled = <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">                http_host.Open();</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"Http请求URL---&gt;\"</span> + HttpUrl);</span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 支持Webservice</span></span><br><span class=\"line\">                String WsUrl = <span class=\"string\">\"http://127.0.0.1:8881/wstest\"</span>;</span><br><span class=\"line\">                address = <span class=\"keyword\">new</span> Uri(WsUrl);</span><br><span class=\"line\">                ServiceHost webservice_host = <span class=\"keyword\">new</span> ServiceHost(<span class=\"keyword\">typeof</span>(WSInterface), address); <span class=\"comment\">//绑定处理的类</span></span><br><span class=\"line\">                webservice_host.Description.Behaviors.Add(<span class=\"keyword\">new</span> ServiceMetadataBehavior() &#123; HttpGetEnabled = <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//=======设置最大连接数</span></span><br><span class=\"line\">                ServiceThrottlingBehavior behavior = <span class=\"keyword\">new</span> ServiceThrottlingBehavior();</span><br><span class=\"line\">                behavior.MaxConcurrentCalls = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                behavior.MaxConcurrentInstances = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                behavior.MaxConcurrentSessions = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">                webservice_host.Description.Behaviors.Add(behavior);</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"Webservice请求URL---&gt;\"</span> + WsUrl);</span><br><span class=\"line\">                webservice_host.Open(); </span><br><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"WCF服务启动成功!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.ReadKey(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception qq)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(qq.Message);</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"WCF服务启动失败!\"</span>);</span><br><span class=\"line\">                Console.Read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":".Net MVC 三层架构框架","date":"2018-03-09T17:23:10.000Z","_content":"asp.net+ef mvc三层框架搭建过程如下\n\n##### 先创建Model层\n略\n<!--more-->\n\n##### 创建数据访问接口层IUserInfoDal\n在该接口中定义了常见的方法CRUD以及分页方法\n```cs\npublic interface IUserInfoDal\n{\n    IQueryable<UserInfo> LoadEntities(System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda);\n    IQueryable<UserInfo> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda, System.Linq.Expressions.Expression<Func<UserInfo, s>> orderbyLambda, bool isAsc);\n    bool DeleteEntity(UserInfo entity);\n    bool EditEntity(UserInfo entity);\n    UserInfo AddEntity(UserInfo entity);\n}\n```\n\n##### 每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal\n```cs\npublic interface IBaseDal<T>where T:class,new()//注意该泛型的使用\n{\n    IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n    IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n    bool DeleteEntity(T entity);\n    bool EditEntity(T entity);\n    T AddEntity(T entity);\n}\n```\n\n##### 让IUserInfoDal继承IBaseDal\n```cs\npublic interface IUserInfoDal:IBaseDal<UserInfo>\n{\n    //定义自己特有的方法。\n}\n```\n\n##### 让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\n```cs\npublic class UserInfoDal :IUserInfoDal\n{\n    OAEntities Db = new OAEntities();\n    /// <summary>\n    /// 查询过滤\n    /// </summary>\n    /// <param name=\"whereLambda\"></param>\n    /// <returns></returns>\n    public IQueryable<UserInfo> LoadEntities(System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda)\n    {\n        return Db.UserInfo.Where<UserInfo>(whereLambda);//\n    }\n    /// <summary>\n    /// 分页\n    /// </summary>\n    /// <typeparam name=\"s\"></typeparam>\n    /// <param name=\"pageIndex\"></param>\n    /// <param name=\"pageSize\"></param>\n    /// <param name=\"totalCount\"></param>\n    /// <param name=\"whereLambda\"></param>\n    /// <param name=\"orderbyLambda\"></param>\n    /// <param name=\"isAsc\"></param>\n    /// <returns></returns>\n    public IQueryable<UserInfo> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda, System.Linq.Expressions.Expression<Func<UserInfo, s>> orderbyLambda, bool isAsc)\n    {\n        var temp = Db.UserInfo.Where<UserInfo>(whereLambda);\n        totalCount = temp.Count();\n        if (isAsc)//升序\n        {\n            temp = temp.OrderBy<UserInfo, s>(orderbyLambda).Skip<UserInfo>((pageIndex - 1) * pageSize).Take<UserInfo>(pageSize);\n        }\n        else\n        {\n            temp = temp.OrderByDescending<UserInfo, s>(orderbyLambda).Skip<UserInfo>((pageIndex - 1) * pageSize).Take<UserInfo>(pageSize);\n        }\n        return temp;\n    }\n\n    /// <summary>\n    /// 删除\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool DeleteEntity(UserInfo entity)\n    {\n        Db.Entry<UserInfo>(entity).State = System.Data.EntityState.Deleted;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 更新\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool EditEntity(UserInfo entity)\n    {\n        Db.Entry<UserInfo>(entity).State = System.Data.EntityState.Modified;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 添加数据\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public UserInfo AddEntity(UserInfo entity)\n    {\n        Db.Set <UserInfo>().Add(entity);\n        Db.SaveChanges();\n        return entity;\n    }\n}\n```  \n\n##### 由于每个数据操作类都要实现自己的接口（每一个接口都继承了IBaseDal）,所以每个数据操作类中都要重复实现CURD以及分页的方法，所以把具体的实现封装到了BaseDal中。\n```cs\npublic class BaseDal<T>where T:class,new()\n{\n    OAEntities Db = new OAEntities();\n    /// <summary>\n    /// 查询过滤\n    /// </summary>\n    /// <param name=\"whereLambda\"></param>\n    /// <returns></returns>\n    public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n    {\n        return Db.Set <T>().Where<T>(whereLambda);//\n    }\n        \n    /// <summary>\n    /// 分页\n    /// </summary>\n    /// <typeparam name=\"s\"></typeparam>\n    /// <param name=\"pageIndex\"></param>\n    /// <param name=\"pageSize\"></param>\n    /// <param name=\"totalCount\"></param>\n    /// <param name=\"whereLambda\"></param>\n    /// <param name=\"orderbyLambda\"></param>\n    /// <param name=\"isAsc\"></param>\n    /// <returns></returns>\n    public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n    {\n        var temp = Db.Set<T>().Where<T>(whereLambda);\n        totalCount = temp.Count();\n        if (isAsc)//升序\n        {\n            temp = temp.OrderBy<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n        }\n        else\n        {\n            temp = temp.OrderByDescending<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n        }\n        return temp;\n    }\n\n    /// <summary>\n    /// 删除\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool DeleteEntity(T entity)\n    {\n        Db.Entry<T>(entity).State = System.Data.EntityState.Deleted;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 更新\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool EditEntity(T entity)\n    {\n        Db.Entry<T>(entity).State = System.Data.EntityState.Modified;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 添加数据\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public T AddEntity(T entity)\n    {\n        Db.Set <T>().Add(entity);\n        Db.SaveChanges();\n        return entity;\n    }\n}\n```\n\n##### 让UserInfoDal继承BaseDal.\n```cs\npublic class UserInfoDal : BaseDal<UserInfo>,IUserInfoDal\n{\n    //对应的独特方法\n} \n```\n\n##### 创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)\n```cs\nprivate IUserInfoDal _UserInfoDal;\npublic IUserInfoDal UserInfoDal\n{\n    get\n    {\n        if (_UserInfoDal == null)\n         {\n            _UserInfoDal = new UserInfoDal();\n        }\n        return _UserInfoDal;\n    }\n    set\n    {\n        _UserInfoDal = value;\n    }\n}\n```\n\n##### 在数据会话层中提供一个方法：完成所有数据的保存\n```cs\n/// <summary>\n/// 一个业务中经常涉及到对多张操作，我们希望连接一次数据库，完成对张表数据的操作。提高性能。 工作单元模式。\n/// </summary>\n/// <returns></returns>\npublic bool SaveChanges()\n{\n    return Db.SaveChanges() > 0;\n}\n```\n\n##### 将数据层中的所有的保存数据的SaveChanges注释掉\n略\n\n##### 在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\n```cs\n/// <summary>\n/// 负责创建EF数据操作上下文实例，必须保证线程内唯一.\n/// </summary>\npublic class DBContextFactory\n{\n    public static DbContext CreateDbContext()\n    {\n        DbContext dbContext = (DbContext)CallContext.GetData(\"dbContext\");\n        if (dbContext == null)\n        {\n            dbContext = new OAEntities();\n            CallContext.SetData(\"dbContext\", dbContext);\n        }\n        return dbContext;\n    }\n}\n```\n\n##### 在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\n```cs\n// DBSession获取EF实例\npublic DbContext Db\n{\n    get\n    {\n        return DBContextFactory.CreateDbContext(); \n    }\n}\n\t   \n// BaseDal中获取EF的实例\nDbContext Db = DAL.DBContextFactory.CreateDbContext();\n```\n\n##### 抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\n```cs\n/// <summary>\n/// 通过反射的形式创建类的实例\n/// </summary>\npublic class AbstractFactory\n{\n    private static readonly string AssemblyPath = ConfigurationManager.AppSettings[\"AssemblyPath\"];\n    private static readonly string NameSpace = ConfigurationManager.AppSettings[\"NameSpace\"];\n    public static IUserInfoDal CreateUserInfoDal()\n    {\n        string fullClassName = NameSpace + \".UserInfoDal\";\n        return CreateInstance(fullClassName) as IUserInfoDal;\n    }\n    private static object CreateInstance(string className)\n    {\n        var assembly= Assembly.Load(AssemblyPath);\n        return assembly.CreateInstance(className);\n    }\n}\n```\t\n\n##### 然后修改DBSession\n```cs\nprivate IUserInfoDal _UserInfoDal;\npublic IUserInfoDal UserInfoDal\n{\n    get \n    {\n        if (_UserInfoDal == null)\n        {\n            //_UserInfoDal = new UserInfoDal();\n            _UserInfoDal = AbstractFactory.CreateUserInfoDal();//通过抽象工厂封装了类的实例的创建\n        }\n        return _UserInfoDal;\n    }\n    set\n    {\n        _UserInfoDal = value;\n    }\n}\n```\n\n##### 定义DBSession的接口\n```cs\n/// <summary>\n/// 业务层调用的是数据会话层的接口。\n/// </summary>\npublic interface IDBSession\n{\n    DbContext Db { get; }\n    IUserInfoDal UserInfoDal { get; set; }\n    bool SaveChanges();\n}\n```\n\n##### 然后让DBSession实现该接口\n略\n\n##### 定义具体的业务基类\n```cs\n//在业务基类中完成DBSession的调用，然后将业务层中公共的方法定义在基类中，但是这些方法不知道通过DBSession来获取哪个数据操作类的实例。所以将该业务基类定义成抽象类，加上一个抽象方法，加上一个IBaseDal属性，并且让基类的构造方法调用抽象方法目的是在表现层new具体的业务子类，父类的构造方法被调用，这些执行抽象方法，但是执行的的是子类中具体的实现。业务子类知道通过DBSession获取哪个数据操作类的实例。\npublic abstract class BaseService<T> where T:class,new()\n{\n    public IDBSession CurrentDBSession\n    {\n        get\n        {\n            return new DBSession();//暂时\n        }\n    }\n    public IDAL.IBaseDal<T> CurrentDal { get; set; }\n    public abstract void SetCurrentDal();\n    public BaseService()\n    {\n        SetCurrentDal();//子类一定要实现抽象方法。\n    }\n    public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n    {\n        return CurrentDal.LoadEntities(whereLambda);\n    }\n}\n```\n\n##### 定义业务层的接口\n略\n\n##### 将数据库链接字符串拷贝到web.config文件中\n略","source":"_posts/Net-MVC-三层架构框架.md","raw":"---\ntitle: .Net MVC 三层架构框架\ndate: 2018-03-10 01:23:10\ncategories: .Net\ntags:\n - .Net\n - MVC\n---\nasp.net+ef mvc三层框架搭建过程如下\n\n##### 先创建Model层\n略\n<!--more-->\n\n##### 创建数据访问接口层IUserInfoDal\n在该接口中定义了常见的方法CRUD以及分页方法\n```cs\npublic interface IUserInfoDal\n{\n    IQueryable<UserInfo> LoadEntities(System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda);\n    IQueryable<UserInfo> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda, System.Linq.Expressions.Expression<Func<UserInfo, s>> orderbyLambda, bool isAsc);\n    bool DeleteEntity(UserInfo entity);\n    bool EditEntity(UserInfo entity);\n    UserInfo AddEntity(UserInfo entity);\n}\n```\n\n##### 每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal\n```cs\npublic interface IBaseDal<T>where T:class,new()//注意该泛型的使用\n{\n    IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda);\n    IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc);\n    bool DeleteEntity(T entity);\n    bool EditEntity(T entity);\n    T AddEntity(T entity);\n}\n```\n\n##### 让IUserInfoDal继承IBaseDal\n```cs\npublic interface IUserInfoDal:IBaseDal<UserInfo>\n{\n    //定义自己特有的方法。\n}\n```\n\n##### 让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\n```cs\npublic class UserInfoDal :IUserInfoDal\n{\n    OAEntities Db = new OAEntities();\n    /// <summary>\n    /// 查询过滤\n    /// </summary>\n    /// <param name=\"whereLambda\"></param>\n    /// <returns></returns>\n    public IQueryable<UserInfo> LoadEntities(System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda)\n    {\n        return Db.UserInfo.Where<UserInfo>(whereLambda);//\n    }\n    /// <summary>\n    /// 分页\n    /// </summary>\n    /// <typeparam name=\"s\"></typeparam>\n    /// <param name=\"pageIndex\"></param>\n    /// <param name=\"pageSize\"></param>\n    /// <param name=\"totalCount\"></param>\n    /// <param name=\"whereLambda\"></param>\n    /// <param name=\"orderbyLambda\"></param>\n    /// <param name=\"isAsc\"></param>\n    /// <returns></returns>\n    public IQueryable<UserInfo> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<UserInfo, bool>> whereLambda, System.Linq.Expressions.Expression<Func<UserInfo, s>> orderbyLambda, bool isAsc)\n    {\n        var temp = Db.UserInfo.Where<UserInfo>(whereLambda);\n        totalCount = temp.Count();\n        if (isAsc)//升序\n        {\n            temp = temp.OrderBy<UserInfo, s>(orderbyLambda).Skip<UserInfo>((pageIndex - 1) * pageSize).Take<UserInfo>(pageSize);\n        }\n        else\n        {\n            temp = temp.OrderByDescending<UserInfo, s>(orderbyLambda).Skip<UserInfo>((pageIndex - 1) * pageSize).Take<UserInfo>(pageSize);\n        }\n        return temp;\n    }\n\n    /// <summary>\n    /// 删除\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool DeleteEntity(UserInfo entity)\n    {\n        Db.Entry<UserInfo>(entity).State = System.Data.EntityState.Deleted;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 更新\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool EditEntity(UserInfo entity)\n    {\n        Db.Entry<UserInfo>(entity).State = System.Data.EntityState.Modified;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 添加数据\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public UserInfo AddEntity(UserInfo entity)\n    {\n        Db.Set <UserInfo>().Add(entity);\n        Db.SaveChanges();\n        return entity;\n    }\n}\n```  \n\n##### 由于每个数据操作类都要实现自己的接口（每一个接口都继承了IBaseDal）,所以每个数据操作类中都要重复实现CURD以及分页的方法，所以把具体的实现封装到了BaseDal中。\n```cs\npublic class BaseDal<T>where T:class,new()\n{\n    OAEntities Db = new OAEntities();\n    /// <summary>\n    /// 查询过滤\n    /// </summary>\n    /// <param name=\"whereLambda\"></param>\n    /// <returns></returns>\n    public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n    {\n        return Db.Set <T>().Where<T>(whereLambda);//\n    }\n        \n    /// <summary>\n    /// 分页\n    /// </summary>\n    /// <typeparam name=\"s\"></typeparam>\n    /// <param name=\"pageIndex\"></param>\n    /// <param name=\"pageSize\"></param>\n    /// <param name=\"totalCount\"></param>\n    /// <param name=\"whereLambda\"></param>\n    /// <param name=\"orderbyLambda\"></param>\n    /// <param name=\"isAsc\"></param>\n    /// <returns></returns>\n    public IQueryable<T> LoadPageEntities<s>(int pageIndex, int pageSize, out int totalCount, System.Linq.Expressions.Expression<Func<T, bool>> whereLambda, System.Linq.Expressions.Expression<Func<T, s>> orderbyLambda, bool isAsc)\n    {\n        var temp = Db.Set<T>().Where<T>(whereLambda);\n        totalCount = temp.Count();\n        if (isAsc)//升序\n        {\n            temp = temp.OrderBy<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n        }\n        else\n        {\n            temp = temp.OrderByDescending<T, s>(orderbyLambda).Skip<T>((pageIndex - 1) * pageSize).Take<T>(pageSize);\n        }\n        return temp;\n    }\n\n    /// <summary>\n    /// 删除\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool DeleteEntity(T entity)\n    {\n        Db.Entry<T>(entity).State = System.Data.EntityState.Deleted;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 更新\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public bool EditEntity(T entity)\n    {\n        Db.Entry<T>(entity).State = System.Data.EntityState.Modified;\n        return Db.SaveChanges() > 0;\n    }\n\n    /// <summary>\n    /// 添加数据\n    /// </summary>\n    /// <param name=\"entity\"></param>\n    /// <returns></returns>\n    public T AddEntity(T entity)\n    {\n        Db.Set <T>().Add(entity);\n        Db.SaveChanges();\n        return entity;\n    }\n}\n```\n\n##### 让UserInfoDal继承BaseDal.\n```cs\npublic class UserInfoDal : BaseDal<UserInfo>,IUserInfoDal\n{\n    //对应的独特方法\n} \n```\n\n##### 创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)\n```cs\nprivate IUserInfoDal _UserInfoDal;\npublic IUserInfoDal UserInfoDal\n{\n    get\n    {\n        if (_UserInfoDal == null)\n         {\n            _UserInfoDal = new UserInfoDal();\n        }\n        return _UserInfoDal;\n    }\n    set\n    {\n        _UserInfoDal = value;\n    }\n}\n```\n\n##### 在数据会话层中提供一个方法：完成所有数据的保存\n```cs\n/// <summary>\n/// 一个业务中经常涉及到对多张操作，我们希望连接一次数据库，完成对张表数据的操作。提高性能。 工作单元模式。\n/// </summary>\n/// <returns></returns>\npublic bool SaveChanges()\n{\n    return Db.SaveChanges() > 0;\n}\n```\n\n##### 将数据层中的所有的保存数据的SaveChanges注释掉\n略\n\n##### 在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\n```cs\n/// <summary>\n/// 负责创建EF数据操作上下文实例，必须保证线程内唯一.\n/// </summary>\npublic class DBContextFactory\n{\n    public static DbContext CreateDbContext()\n    {\n        DbContext dbContext = (DbContext)CallContext.GetData(\"dbContext\");\n        if (dbContext == null)\n        {\n            dbContext = new OAEntities();\n            CallContext.SetData(\"dbContext\", dbContext);\n        }\n        return dbContext;\n    }\n}\n```\n\n##### 在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\n```cs\n// DBSession获取EF实例\npublic DbContext Db\n{\n    get\n    {\n        return DBContextFactory.CreateDbContext(); \n    }\n}\n\t   \n// BaseDal中获取EF的实例\nDbContext Db = DAL.DBContextFactory.CreateDbContext();\n```\n\n##### 抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\n```cs\n/// <summary>\n/// 通过反射的形式创建类的实例\n/// </summary>\npublic class AbstractFactory\n{\n    private static readonly string AssemblyPath = ConfigurationManager.AppSettings[\"AssemblyPath\"];\n    private static readonly string NameSpace = ConfigurationManager.AppSettings[\"NameSpace\"];\n    public static IUserInfoDal CreateUserInfoDal()\n    {\n        string fullClassName = NameSpace + \".UserInfoDal\";\n        return CreateInstance(fullClassName) as IUserInfoDal;\n    }\n    private static object CreateInstance(string className)\n    {\n        var assembly= Assembly.Load(AssemblyPath);\n        return assembly.CreateInstance(className);\n    }\n}\n```\t\n\n##### 然后修改DBSession\n```cs\nprivate IUserInfoDal _UserInfoDal;\npublic IUserInfoDal UserInfoDal\n{\n    get \n    {\n        if (_UserInfoDal == null)\n        {\n            //_UserInfoDal = new UserInfoDal();\n            _UserInfoDal = AbstractFactory.CreateUserInfoDal();//通过抽象工厂封装了类的实例的创建\n        }\n        return _UserInfoDal;\n    }\n    set\n    {\n        _UserInfoDal = value;\n    }\n}\n```\n\n##### 定义DBSession的接口\n```cs\n/// <summary>\n/// 业务层调用的是数据会话层的接口。\n/// </summary>\npublic interface IDBSession\n{\n    DbContext Db { get; }\n    IUserInfoDal UserInfoDal { get; set; }\n    bool SaveChanges();\n}\n```\n\n##### 然后让DBSession实现该接口\n略\n\n##### 定义具体的业务基类\n```cs\n//在业务基类中完成DBSession的调用，然后将业务层中公共的方法定义在基类中，但是这些方法不知道通过DBSession来获取哪个数据操作类的实例。所以将该业务基类定义成抽象类，加上一个抽象方法，加上一个IBaseDal属性，并且让基类的构造方法调用抽象方法目的是在表现层new具体的业务子类，父类的构造方法被调用，这些执行抽象方法，但是执行的的是子类中具体的实现。业务子类知道通过DBSession获取哪个数据操作类的实例。\npublic abstract class BaseService<T> where T:class,new()\n{\n    public IDBSession CurrentDBSession\n    {\n        get\n        {\n            return new DBSession();//暂时\n        }\n    }\n    public IDAL.IBaseDal<T> CurrentDal { get; set; }\n    public abstract void SetCurrentDal();\n    public BaseService()\n    {\n        SetCurrentDal();//子类一定要实现抽象方法。\n    }\n    public IQueryable<T> LoadEntities(System.Linq.Expressions.Expression<Func<T, bool>> whereLambda)\n    {\n        return CurrentDal.LoadEntities(whereLambda);\n    }\n}\n```\n\n##### 定义业务层的接口\n略\n\n##### 将数据库链接字符串拷贝到web.config文件中\n略","slug":"Net-MVC-三层架构框架","published":1,"updated":"2018-03-11T14:19:25.316Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej23z0052tkui9h79u4sh","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>asp.net+ef mvc三层框架搭建过程如下</p><h5 id=\"先创建Model层\"><a href=\"#先创建Model层\" class=\"headerlink\" title=\"先创建Model层\"></a>先创建Model层</h5><p>略<br><a id=\"more\"></a></p><h5 id=\"创建数据访问接口层IUserInfoDal\"><a href=\"#创建数据访问接口层IUserInfoDal\" class=\"headerlink\" title=\"创建数据访问接口层IUserInfoDal\"></a>创建数据访问接口层IUserInfoDal</h5><p>在该接口中定义了常见的方法CRUD以及分页方法<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUserInfoDal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IQueryable&lt;UserInfo&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">    IQueryable&lt;UserInfo&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">UserInfo <span class=\"title\">AddEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"每个接口中都需要CURD以及分页方法的定义-而且这些方法的定义基本上是一致的-所以封装-封装到IBaseDal\"><a href=\"#每个接口中都需要CURD以及分页方法的定义-而且这些方法的定义基本上是一致的-所以封装-封装到IBaseDal\" class=\"headerlink\" title=\"每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal\"></a>每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IBaseDal&lt;T&gt;where T:class,new()//注意该泛型的使用</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">    IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"让IUserInfoDal继承IBaseDal\"><a href=\"#让IUserInfoDal继承IBaseDal\" class=\"headerlink\" title=\"让IUserInfoDal继承IBaseDal\"></a>让IUserInfoDal继承IBaseDal</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IUserInfoDal:IBaseDal&lt;UserInfo&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义自己特有的方法。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\"><a href=\"#让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\" class=\"headerlink\" title=\"让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\"></a>让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserInfoDal</span> :<span class=\"title\">IUserInfoDal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OAEntities Db = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;UserInfo&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.UserInfo.Where&lt;UserInfo&gt;(whereLambda);<span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"s\"&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IQueryable&lt;UserInfo&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = Db.UserInfo.Where&lt;UserInfo&gt;(whereLambda);</span><br><span class=\"line\">        totalCount = temp.Count();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAsc)<span class=\"comment\">//升序</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderBy&lt;UserInfo, s&gt;(orderbyLambda).Skip&lt;UserInfo&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;UserInfo&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderByDescending&lt;UserInfo, s&gt;(orderbyLambda).Skip&lt;UserInfo&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;UserInfo&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Entry&lt;UserInfo&gt;(entity).State = System.Data.EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Entry&lt;UserInfo&gt;(entity).State = System.Data.EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserInfo <span class=\"title\">AddEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Set &lt;UserInfo&gt;().Add(entity);</span><br><span class=\"line\">        Db.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">##### 由于每个数据操作类都要实现自己的接口（每一个接口都继承了IBaseDal）,所以每个数据操作类中都要重复实现CURD以及分页的方法，所以把具体的实现封装到了BaseDal中。</span></span><br><span class=\"line\">```cs</span><br><span class=\"line\">public class BaseDal&lt;T&gt;where T:class,new()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OAEntities Db = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.Set &lt;T&gt;().Where&lt;T&gt;(whereLambda);<span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"s\"&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">        totalCount = temp.Count();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAsc)<span class=\"comment\">//升序</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderBy&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderByDescending&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Entry&lt;T&gt;(entity).State = System.Data.EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Entry&lt;T&gt;(entity).State = System.Data.EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Set &lt;T&gt;().Add(entity);</span><br><span class=\"line\">        Db.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"让UserInfoDal继承BaseDal\"><a href=\"#让UserInfoDal继承BaseDal\" class=\"headerlink\" title=\"让UserInfoDal继承BaseDal.\"></a>让UserInfoDal继承BaseDal.</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class UserInfoDal : BaseDal&lt;UserInfo&gt;,IUserInfoDal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对应的独特方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"创建DBSession-数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例-所以数据会话层将业务层与数据层解耦-在数据会话层中提供一个方法：完成所有数据的保存\"><a href=\"#创建DBSession-数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例-所以数据会话层将业务层与数据层解耦-在数据会话层中提供一个方法：完成所有数据的保存\" class=\"headerlink\" title=\"创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)\"></a>创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> IUserInfoDal _UserInfoDal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> IUserInfoDal UserInfoDal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_UserInfoDal == <span class=\"literal\">null</span>)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            _UserInfoDal = <span class=\"keyword\">new</span> UserInfoDal();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _UserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _UserInfoDal = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"在数据会话层中提供一个方法：完成所有数据的保存\"><a href=\"#在数据会话层中提供一个方法：完成所有数据的保存\" class=\"headerlink\" title=\"在数据会话层中提供一个方法：完成所有数据的保存\"></a>在数据会话层中提供一个方法：完成所有数据的保存</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 一个业务中经常涉及到对多张操作，我们希望连接一次数据库，完成对张表数据的操作。提高性能。 工作单元模式。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"将数据层中的所有的保存数据的SaveChanges注释掉\"><a href=\"#将数据层中的所有的保存数据的SaveChanges注释掉\" class=\"headerlink\" title=\"将数据层中的所有的保存数据的SaveChanges注释掉\"></a>将数据层中的所有的保存数据的SaveChanges注释掉</h5><p>略</p><h5 id=\"在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\"><a href=\"#在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\" class=\"headerlink\" title=\"在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\"></a>在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 负责创建EF数据操作上下文实例，必须保证线程内唯一.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DBContextFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DbContext <span class=\"title\">CreateDbContext</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        DbContext dbContext = (DbContext)CallContext.GetData(<span class=\"string\">\"dbContext\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dbContext == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dbContext = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">            CallContext.SetData(<span class=\"string\">\"dbContext\"</span>, dbContext);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dbContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\"><a href=\"#在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\" class=\"headerlink\" title=\"在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\"></a>在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DBSession获取EF实例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DbContext Db</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DBContextFactory.CreateDbContext(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t   </span><br><span class=\"line\"><span class=\"comment\">// BaseDal中获取EF的实例</span></span><br><span class=\"line\">DbContext Db = DAL.DBContextFactory.CreateDbContext();</span><br></pre></td></tr></table></figure><h5 id=\"抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\"><a href=\"#抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\" class=\"headerlink\" title=\"抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\"></a>抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 通过反射的形式创建类的实例</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> AssemblyPath = ConfigurationManager.AppSettings[<span class=\"string\">\"AssemblyPath\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> NameSpace = ConfigurationManager.AppSettings[<span class=\"string\">\"NameSpace\"</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IUserInfoDal <span class=\"title\">CreateUserInfoDal</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> fullClassName = NameSpace + <span class=\"string\">\".UserInfoDal\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CreateInstance(fullClassName) <span class=\"keyword\">as</span> IUserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">CreateInstance</span>(<span class=\"params\"><span class=\"keyword\">string</span> className</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> assembly= Assembly.Load(AssemblyPath);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> assembly.CreateInstance(className);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">##### 然后修改DBSession</span></span><br><span class=\"line\">```cs</span><br><span class=\"line\"><span class=\"keyword\">private</span> IUserInfoDal _UserInfoDal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> IUserInfoDal UserInfoDal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_UserInfoDal == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//_UserInfoDal = new UserInfoDal();</span></span><br><span class=\"line\">            _UserInfoDal = AbstractFactory.CreateUserInfoDal();<span class=\"comment\">//通过抽象工厂封装了类的实例的创建</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _UserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _UserInfoDal = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"定义DBSession的接口\"><a href=\"#定义DBSession的接口\" class=\"headerlink\" title=\"定义DBSession的接口\"></a>定义DBSession的接口</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 业务层调用的是数据会话层的接口。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDBSession</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DbContext Db &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    IUserInfoDal UserInfoDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"然后让DBSession实现该接口\"><a href=\"#然后让DBSession实现该接口\" class=\"headerlink\" title=\"然后让DBSession实现该接口\"></a>然后让DBSession实现该接口</h5><p>略</p><h5 id=\"定义具体的业务基类\"><a href=\"#定义具体的业务基类\" class=\"headerlink\" title=\"定义具体的业务基类\"></a>定义具体的业务基类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在业务基类中完成DBSession的调用，然后将业务层中公共的方法定义在基类中，但是这些方法不知道通过DBSession来获取哪个数据操作类的实例。所以将该业务基类定义成抽象类，加上一个抽象方法，加上一个IBaseDal属性，并且让基类的构造方法调用抽象方法目的是在表现层new具体的业务子类，父类的构造方法被调用，这些执行抽象方法，但是执行的的是子类中具体的实现。业务子类知道通过DBSession获取哪个数据操作类的实例。</span></span><br><span class=\"line\">public abstract class BaseService&lt;T&gt; where T:class,new()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IDBSession CurrentDBSession</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DBSession();<span class=\"comment\">//暂时</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IDAL.IBaseDal&lt;T&gt; CurrentDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        SetCurrentDal();<span class=\"comment\">//子类一定要实现抽象方法。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CurrentDal.LoadEntities(whereLambda);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"定义业务层的接口\"><a href=\"#定义业务层的接口\" class=\"headerlink\" title=\"定义业务层的接口\"></a>定义业务层的接口</h5><p>略</p><h5 id=\"将数据库链接字符串拷贝到web-config文件中\"><a href=\"#将数据库链接字符串拷贝到web-config文件中\" class=\"headerlink\" title=\"将数据库链接字符串拷贝到web.config文件中\"></a>将数据库链接字符串拷贝到web.config文件中</h5><p>略</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>asp.net+ef mvc三层框架搭建过程如下</p><h5 id=\"先创建Model层\"><a href=\"#先创建Model层\" class=\"headerlink\" title=\"先创建Model层\"></a>先创建Model层</h5><p>略<br>","more":"</p><h5 id=\"创建数据访问接口层IUserInfoDal\"><a href=\"#创建数据访问接口层IUserInfoDal\" class=\"headerlink\" title=\"创建数据访问接口层IUserInfoDal\"></a>创建数据访问接口层IUserInfoDal</h5><p>在该接口中定义了常见的方法CRUD以及分页方法<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUserInfoDal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IQueryable&lt;UserInfo&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">    IQueryable&lt;UserInfo&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">UserInfo <span class=\"title\">AddEntity</span>(<span class=\"params\">UserInfo entity</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"每个接口中都需要CURD以及分页方法的定义-而且这些方法的定义基本上是一致的-所以封装-封装到IBaseDal\"><a href=\"#每个接口中都需要CURD以及分页方法的定义-而且这些方法的定义基本上是一致的-所以封装-封装到IBaseDal\" class=\"headerlink\" title=\"每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal\"></a>每个接口中都需要CURD以及分页方法的定义,而且这些方法的定义基本上是一致的,所以封装.封装到IBaseDal</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IBaseDal&lt;T&gt;where T:class,new()//注意该泛型的使用</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class=\"line\">    IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"让IUserInfoDal继承IBaseDal\"><a href=\"#让IUserInfoDal继承IBaseDal\" class=\"headerlink\" title=\"让IUserInfoDal继承IBaseDal\"></a>让IUserInfoDal继承IBaseDal</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IUserInfoDal:IBaseDal&lt;UserInfo&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义自己特有的方法。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\"><a href=\"#让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\" class=\"headerlink\" title=\"让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法\"></a>让具体的数据操作类UserInfoDal去实现IUserInfoDal接口中的方法</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UserInfoDal</span> :<span class=\"title\">IUserInfoDal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OAEntities Db = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;UserInfo&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.UserInfo.Where&lt;UserInfo&gt;(whereLambda);<span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"s\"&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IQueryable&lt;UserInfo&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserInfo, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = Db.UserInfo.Where&lt;UserInfo&gt;(whereLambda);</span><br><span class=\"line\">        totalCount = temp.Count();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAsc)<span class=\"comment\">//升序</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderBy&lt;UserInfo, s&gt;(orderbyLambda).Skip&lt;UserInfo&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;UserInfo&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderByDescending&lt;UserInfo, s&gt;(orderbyLambda).Skip&lt;UserInfo&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;UserInfo&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Entry&lt;UserInfo&gt;(entity).State = System.Data.EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Entry&lt;UserInfo&gt;(entity).State = System.Data.EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserInfo <span class=\"title\">AddEntity</span>(<span class=\"params\">UserInfo entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Set &lt;UserInfo&gt;().Add(entity);</span><br><span class=\"line\">        Db.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">##### 由于每个数据操作类都要实现自己的接口（每一个接口都继承了IBaseDal）,所以每个数据操作类中都要重复实现CURD以及分页的方法，所以把具体的实现封装到了BaseDal中。</span></span><br><span class=\"line\">```cs</span><br><span class=\"line\">public class BaseDal&lt;T&gt;where T:class,new()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OAEntities Db = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询过滤</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.Set &lt;T&gt;().Where&lt;T&gt;(whereLambda);<span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"s\"&gt;</span><span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"whereLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"orderbyLambda\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isAsc\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class=\"keyword\">bool</span> isAsc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = Db.Set&lt;T&gt;().Where&lt;T&gt;(whereLambda);</span><br><span class=\"line\">        totalCount = temp.Count();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAsc)<span class=\"comment\">//升序</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderBy&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp = temp.OrderByDescending&lt;T, s&gt;(orderbyLambda).Skip&lt;T&gt;((pageIndex - <span class=\"number\">1</span>) * pageSize).Take&lt;T&gt;(pageSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Entry&lt;T&gt;(entity).State = System.Data.EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 更新</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">EditEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Entry&lt;T&gt;(entity).State = System.Data.EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">AddEntity</span>(<span class=\"params\">T entity</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Db.Set &lt;T&gt;().Add(entity);</span><br><span class=\"line\">        Db.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"让UserInfoDal继承BaseDal\"><a href=\"#让UserInfoDal继承BaseDal\" class=\"headerlink\" title=\"让UserInfoDal继承BaseDal.\"></a>让UserInfoDal继承BaseDal.</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class UserInfoDal : BaseDal&lt;UserInfo&gt;,IUserInfoDal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对应的独特方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"创建DBSession-数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例-所以数据会话层将业务层与数据层解耦-在数据会话层中提供一个方法：完成所有数据的保存\"><a href=\"#创建DBSession-数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例-所以数据会话层将业务层与数据层解耦-在数据会话层中提供一个方法：完成所有数据的保存\" class=\"headerlink\" title=\"创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)\"></a>创建DBSession(数据会话层：就是一个工厂类，负责完成所有数据操作类实例的创建，然后业务层通过数据会话层来获取要操作数据类的实例.所以数据会话层将业务层与数据层解耦. 在数据会话层中提供一个方法：完成所有数据的保存.)</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> IUserInfoDal _UserInfoDal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> IUserInfoDal UserInfoDal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_UserInfoDal == <span class=\"literal\">null</span>)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            _UserInfoDal = <span class=\"keyword\">new</span> UserInfoDal();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _UserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _UserInfoDal = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"在数据会话层中提供一个方法：完成所有数据的保存\"><a href=\"#在数据会话层中提供一个方法：完成所有数据的保存\" class=\"headerlink\" title=\"在数据会话层中提供一个方法：完成所有数据的保存\"></a>在数据会话层中提供一个方法：完成所有数据的保存</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 一个业务中经常涉及到对多张操作，我们希望连接一次数据库，完成对张表数据的操作。提高性能。 工作单元模式。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Db.SaveChanges() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"将数据层中的所有的保存数据的SaveChanges注释掉\"><a href=\"#将数据层中的所有的保存数据的SaveChanges注释掉\" class=\"headerlink\" title=\"将数据层中的所有的保存数据的SaveChanges注释掉\"></a>将数据层中的所有的保存数据的SaveChanges注释掉</h5><p>略</p><h5 id=\"在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\"><a href=\"#在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\" class=\"headerlink\" title=\"在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）\"></a>在数据层中用到了EF的实例，数据会话层中也用到了，所以在一个请求中只能创建一个EF实例（线程内唯一对象）</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 负责创建EF数据操作上下文实例，必须保证线程内唯一.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DBContextFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DbContext <span class=\"title\">CreateDbContext</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        DbContext dbContext = (DbContext)CallContext.GetData(<span class=\"string\">\"dbContext\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dbContext == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dbContext = <span class=\"keyword\">new</span> OAEntities();</span><br><span class=\"line\">            CallContext.SetData(<span class=\"string\">\"dbContext\"</span>, dbContext);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dbContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\"><a href=\"#在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\" class=\"headerlink\" title=\"在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建\"></a>在DBSession和BaseDal中调用上面的方法（CreateDbContext）完成EF实例的创建</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DBSession获取EF实例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DbContext Db</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DBContextFactory.CreateDbContext(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t   </span><br><span class=\"line\"><span class=\"comment\">// BaseDal中获取EF的实例</span></span><br><span class=\"line\">DbContext Db = DAL.DBContextFactory.CreateDbContext();</span><br></pre></td></tr></table></figure><h5 id=\"抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\"><a href=\"#抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\" class=\"headerlink\" title=\"抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂\"></a>抽象工厂封装数据操作类实例创建，然后DBSession调用抽象工厂</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 通过反射的形式创建类的实例</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> AssemblyPath = ConfigurationManager.AppSettings[<span class=\"string\">\"AssemblyPath\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> NameSpace = ConfigurationManager.AppSettings[<span class=\"string\">\"NameSpace\"</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IUserInfoDal <span class=\"title\">CreateUserInfoDal</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> fullClassName = NameSpace + <span class=\"string\">\".UserInfoDal\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CreateInstance(fullClassName) <span class=\"keyword\">as</span> IUserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">CreateInstance</span>(<span class=\"params\"><span class=\"keyword\">string</span> className</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> assembly= Assembly.Load(AssemblyPath);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> assembly.CreateInstance(className);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">##### 然后修改DBSession</span></span><br><span class=\"line\">```cs</span><br><span class=\"line\"><span class=\"keyword\">private</span> IUserInfoDal _UserInfoDal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> IUserInfoDal UserInfoDal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_UserInfoDal == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//_UserInfoDal = new UserInfoDal();</span></span><br><span class=\"line\">            _UserInfoDal = AbstractFactory.CreateUserInfoDal();<span class=\"comment\">//通过抽象工厂封装了类的实例的创建</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _UserInfoDal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _UserInfoDal = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"定义DBSession的接口\"><a href=\"#定义DBSession的接口\" class=\"headerlink\" title=\"定义DBSession的接口\"></a>定义DBSession的接口</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 业务层调用的是数据会话层的接口。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDBSession</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DbContext Db &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    IUserInfoDal UserInfoDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SaveChanges</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"然后让DBSession实现该接口\"><a href=\"#然后让DBSession实现该接口\" class=\"headerlink\" title=\"然后让DBSession实现该接口\"></a>然后让DBSession实现该接口</h5><p>略</p><h5 id=\"定义具体的业务基类\"><a href=\"#定义具体的业务基类\" class=\"headerlink\" title=\"定义具体的业务基类\"></a>定义具体的业务基类</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在业务基类中完成DBSession的调用，然后将业务层中公共的方法定义在基类中，但是这些方法不知道通过DBSession来获取哪个数据操作类的实例。所以将该业务基类定义成抽象类，加上一个抽象方法，加上一个IBaseDal属性，并且让基类的构造方法调用抽象方法目的是在表现层new具体的业务子类，父类的构造方法被调用，这些执行抽象方法，但是执行的的是子类中具体的实现。业务子类知道通过DBSession获取哪个数据操作类的实例。</span></span><br><span class=\"line\">public abstract class BaseService&lt;T&gt; where T:class,new()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IDBSession CurrentDBSession</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DBSession();<span class=\"comment\">//暂时</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IDAL.IBaseDal&lt;T&gt; CurrentDal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCurrentDal</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        SetCurrentDal();<span class=\"comment\">//子类一定要实现抽象方法。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IQueryable&lt;T&gt; <span class=\"title\">LoadEntities</span>(<span class=\"params\">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CurrentDal.LoadEntities(whereLambda);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"定义业务层的接口\"><a href=\"#定义业务层的接口\" class=\"headerlink\" title=\"定义业务层的接口\"></a>定义业务层的接口</h5><p>略</p><h5 id=\"将数据库链接字符串拷贝到web-config文件中\"><a href=\"#将数据库链接字符串拷贝到web-config文件中\" class=\"headerlink\" title=\"将数据库链接字符串拷贝到web.config文件中\"></a>将数据库链接字符串拷贝到web.config文件中</h5><p>略</p><!-- rebuild by neat -->"},{"title":".Net 爬虫封装","date":"2018-03-06T15:17:26.000Z","_content":"“爬虫”就是一段用来自动化采集网站数据的程序。\n<!--more-->\n#### ICrawler.cs\n```cs\nusing Caty.Spider.Crawler.Events;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Spider.Crawler\n{\n    public interface ICrawler\n    {\n        event EventHandler<OnStartEventArgs> OnStart;//爬虫启动事件\n\n        event EventHandler<OnCompletedEventArgs> OnCompleted;//爬虫完成事件\n\n        event EventHandler<OnErrorEventArgs> OnError;//爬虫出错事件\n\n        Task<string> Start(Uri uri, string proxy); //异步爬虫\n    }\n}\n```\n\n#### SimpleCrawler.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.IO.Compression;\nusing Caty.Spider.Crawler.Events;\n\nnamespace Caty.Spider.Crawler\n{\n    public class SimpleCrawler : ICrawler\n    {\n        public event EventHandler<OnStartEventArgs> OnStart;//爬虫启动事件\n\n        public event EventHandler<OnCompletedEventArgs> OnCompleted;//爬虫完成事件\n\n        public event EventHandler<OnErrorEventArgs> OnError; //爬虫出错事件\n\n        public CookieContainer CookiesContainer { get; set; } //定义Cookie容器\n\n        public SimpleCrawler() { }\n\n        /// <summary>\n        /// 异步创建爬虫\n        /// </summary>\n        /// <param name=\"uri\">爬虫URL地址</param>\n        /// <param name=\"proxy\">代理服务器</param>\n        /// <returns>网页源代码</returns>\n        public async Task<string> Start(Uri uri, string proxy = null)\n        {\n            return await Task.Run(() =>\n            {\n                var pageSource = string.Empty;\n                try\n                {\n                    if (this.OnStart != null) this.OnStart(this, new OnStartEventArgs(uri));\n                    var watch = new Stopwatch();\n                    watch.Start();\n                    var request = (HttpWebRequest)WebRequest.Create(uri);\n                    request.Accept = \"*/*\";\n                    request.ContentType = \"application/x-www-form-urlencoede\";//定义文档类型及编码\n                    request.AllowAutoRedirect = false;//禁止自动跳转\n                                                      //设置User-Agent，伪装成Google Chrome浏览器\n                    request.UserAgent = \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\";\n                    request.Timeout = 5000;//定义请求超时时间为5秒\n                    request.KeepAlive = true;//启用长连接\n                    request.Method = \"GET\";//定义请求方式为GET     \n                    if (proxy != null) request.Proxy = new WebProxy(proxy);//设置代理服务器IP，伪装请求地址\n                    request.CookieContainer = this.CookiesContainer;//附加Cookie容器\n                    request.ServicePoint.ConnectionLimit = int.MaxValue;//定义最大连接数\n\n                    using (var response = (HttpWebResponse)request.GetResponse())\n                    {//获取请求响应\n\n                        foreach (Cookie cookie in response.Cookies) this.CookiesContainer.Add(cookie);//将Cookie加入容器，保存登录状态\n\n                        if (response.ContentEncoding.ToLower().Contains(\"gzip\"))//解压\n                        {\n                            using (GZipStream stream = new GZipStream(response.GetResponseStream(), CompressionMode.Decompress))\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n                                    pageSource = reader.ReadToEnd();\n                                }\n                            }\n                        }\n                        else if (response.ContentEncoding.ToLower().Contains(\"deflate\"))//解压\n                        {\n                            using (DeflateStream stream = new DeflateStream(response.GetResponseStream(), CompressionMode.Decompress))\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n                                    pageSource = reader.ReadToEnd();\n                                }\n\n                            }\n                        }\n                        else\n                        {\n                            using (Stream stream = response.GetResponseStream())//原始\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n\n                                    pageSource = reader.ReadToEnd();\n                                }\n                            }\n                        }\n                    }\n                    request.Abort();\n                    watch.Stop();\n                    var threadId = System.Threading.Thread.CurrentThread.ManagedThreadId;//获取当前任务线程ID\n                    var milliseconds = watch.ElapsedMilliseconds;//获取请求执行时间\n                    if (this.OnCompleted != null) this.OnCompleted(this, new OnCompletedEventArgs(uri, threadId, milliseconds, pageSource));\n                }\n                catch (Exception ex)\n                {\n                    if (this.OnError != null) this.OnError(this, new OnErrorEventArgs(uri, ex));\n                }\n                return pageSource;\n            });\n        }\n    }\n}\n```\n\n#### OnCompletedEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫完成事件\n    /// </summary>\n    public class OnCompletedEventArgs\n    {\n        public Uri Uri { get; private set; }// 爬虫URL地址\n        public int ThreadId { get; private set; }// 任务线程ID\n        public string PageSource { get; private set; }// 页面源代码\n        public long Milliseconds { get; private set; }// 爬虫请求执行事件\n        public OnCompletedEventArgs(Uri uri, int threadId, long milliseconds, string pageSource)\n        {\n            this.Uri = uri;\n            this.ThreadId = threadId;\n            this.Milliseconds = milliseconds;\n            this.PageSource = pageSource;\n        }\n    }\n}\n```\n\n#### OnErrorEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫错误事件\n    /// </summary>\n    public class OnErrorEventArgs\n    {\n        public Uri Uri { get; set; }\n\n        public Exception Exception { get; set; }\n\n        public OnErrorEventArgs(Uri uri, Exception exception)\n        {\n            this.Uri = uri;\n            this.Exception = exception;\n        }\n    }\n}\n```\n\n#### OnStartEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫启动事件\n    /// </summary>\n    public class OnStartEventArgs\n    {\n        public Uri Uri { get; set; }// 爬虫URL地址\n\n        public OnStartEventArgs(Uri uri)\n        {\n            this.Uri = uri;\n        }\n    }\n}\n```\n\n#### 如何使用\n```cs\nvar Url = \"http://mebook.cc/\";\nvar kindleCrawler = new SimpleCrawler();\nkindleCrawler.OnStart += (s, e) =>\n{\n    //启动时执行的代码\n};\nkindleCrawler.OnError += (s, e) =>\n{\n    //出错时执行的代码\n};\nkindleCrawler.OnCompleted += (s, e) =>\n{\n    //完成时执行的代码\n}\n```\n","source":"_posts/Net-爬虫封装.md","raw":"---\ntitle: .Net 爬虫封装\ndate: 2018-03-06 23:17:26\ncategories: .Net\ntags: \n - .Net\n - Spider\n---\n“爬虫”就是一段用来自动化采集网站数据的程序。\n<!--more-->\n#### ICrawler.cs\n```cs\nusing Caty.Spider.Crawler.Events;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Caty.Spider.Crawler\n{\n    public interface ICrawler\n    {\n        event EventHandler<OnStartEventArgs> OnStart;//爬虫启动事件\n\n        event EventHandler<OnCompletedEventArgs> OnCompleted;//爬虫完成事件\n\n        event EventHandler<OnErrorEventArgs> OnError;//爬虫出错事件\n\n        Task<string> Start(Uri uri, string proxy); //异步爬虫\n    }\n}\n```\n\n#### SimpleCrawler.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.IO.Compression;\nusing Caty.Spider.Crawler.Events;\n\nnamespace Caty.Spider.Crawler\n{\n    public class SimpleCrawler : ICrawler\n    {\n        public event EventHandler<OnStartEventArgs> OnStart;//爬虫启动事件\n\n        public event EventHandler<OnCompletedEventArgs> OnCompleted;//爬虫完成事件\n\n        public event EventHandler<OnErrorEventArgs> OnError; //爬虫出错事件\n\n        public CookieContainer CookiesContainer { get; set; } //定义Cookie容器\n\n        public SimpleCrawler() { }\n\n        /// <summary>\n        /// 异步创建爬虫\n        /// </summary>\n        /// <param name=\"uri\">爬虫URL地址</param>\n        /// <param name=\"proxy\">代理服务器</param>\n        /// <returns>网页源代码</returns>\n        public async Task<string> Start(Uri uri, string proxy = null)\n        {\n            return await Task.Run(() =>\n            {\n                var pageSource = string.Empty;\n                try\n                {\n                    if (this.OnStart != null) this.OnStart(this, new OnStartEventArgs(uri));\n                    var watch = new Stopwatch();\n                    watch.Start();\n                    var request = (HttpWebRequest)WebRequest.Create(uri);\n                    request.Accept = \"*/*\";\n                    request.ContentType = \"application/x-www-form-urlencoede\";//定义文档类型及编码\n                    request.AllowAutoRedirect = false;//禁止自动跳转\n                                                      //设置User-Agent，伪装成Google Chrome浏览器\n                    request.UserAgent = \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\";\n                    request.Timeout = 5000;//定义请求超时时间为5秒\n                    request.KeepAlive = true;//启用长连接\n                    request.Method = \"GET\";//定义请求方式为GET     \n                    if (proxy != null) request.Proxy = new WebProxy(proxy);//设置代理服务器IP，伪装请求地址\n                    request.CookieContainer = this.CookiesContainer;//附加Cookie容器\n                    request.ServicePoint.ConnectionLimit = int.MaxValue;//定义最大连接数\n\n                    using (var response = (HttpWebResponse)request.GetResponse())\n                    {//获取请求响应\n\n                        foreach (Cookie cookie in response.Cookies) this.CookiesContainer.Add(cookie);//将Cookie加入容器，保存登录状态\n\n                        if (response.ContentEncoding.ToLower().Contains(\"gzip\"))//解压\n                        {\n                            using (GZipStream stream = new GZipStream(response.GetResponseStream(), CompressionMode.Decompress))\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n                                    pageSource = reader.ReadToEnd();\n                                }\n                            }\n                        }\n                        else if (response.ContentEncoding.ToLower().Contains(\"deflate\"))//解压\n                        {\n                            using (DeflateStream stream = new DeflateStream(response.GetResponseStream(), CompressionMode.Decompress))\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n                                    pageSource = reader.ReadToEnd();\n                                }\n\n                            }\n                        }\n                        else\n                        {\n                            using (Stream stream = response.GetResponseStream())//原始\n                            {\n                                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))\n                                {\n\n                                    pageSource = reader.ReadToEnd();\n                                }\n                            }\n                        }\n                    }\n                    request.Abort();\n                    watch.Stop();\n                    var threadId = System.Threading.Thread.CurrentThread.ManagedThreadId;//获取当前任务线程ID\n                    var milliseconds = watch.ElapsedMilliseconds;//获取请求执行时间\n                    if (this.OnCompleted != null) this.OnCompleted(this, new OnCompletedEventArgs(uri, threadId, milliseconds, pageSource));\n                }\n                catch (Exception ex)\n                {\n                    if (this.OnError != null) this.OnError(this, new OnErrorEventArgs(uri, ex));\n                }\n                return pageSource;\n            });\n        }\n    }\n}\n```\n\n#### OnCompletedEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫完成事件\n    /// </summary>\n    public class OnCompletedEventArgs\n    {\n        public Uri Uri { get; private set; }// 爬虫URL地址\n        public int ThreadId { get; private set; }// 任务线程ID\n        public string PageSource { get; private set; }// 页面源代码\n        public long Milliseconds { get; private set; }// 爬虫请求执行事件\n        public OnCompletedEventArgs(Uri uri, int threadId, long milliseconds, string pageSource)\n        {\n            this.Uri = uri;\n            this.ThreadId = threadId;\n            this.Milliseconds = milliseconds;\n            this.PageSource = pageSource;\n        }\n    }\n}\n```\n\n#### OnErrorEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫错误事件\n    /// </summary>\n    public class OnErrorEventArgs\n    {\n        public Uri Uri { get; set; }\n\n        public Exception Exception { get; set; }\n\n        public OnErrorEventArgs(Uri uri, Exception exception)\n        {\n            this.Uri = uri;\n            this.Exception = exception;\n        }\n    }\n}\n```\n\n#### OnStartEventArgs.cs\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Caty.Spider.Crawler.Events\n{\n    /// <summary>\n    /// 爬虫启动事件\n    /// </summary>\n    public class OnStartEventArgs\n    {\n        public Uri Uri { get; set; }// 爬虫URL地址\n\n        public OnStartEventArgs(Uri uri)\n        {\n            this.Uri = uri;\n        }\n    }\n}\n```\n\n#### 如何使用\n```cs\nvar Url = \"http://mebook.cc/\";\nvar kindleCrawler = new SimpleCrawler();\nkindleCrawler.OnStart += (s, e) =>\n{\n    //启动时执行的代码\n};\nkindleCrawler.OnError += (s, e) =>\n{\n    //出错时执行的代码\n};\nkindleCrawler.OnCompleted += (s, e) =>\n{\n    //完成时执行的代码\n}\n```\n","slug":"Net-爬虫封装","published":1,"updated":"2018-03-08T15:21:03.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej2410055tkui0a2tqoj7","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>“爬虫”就是一段用来自动化采集网站数据的程序。<br><a id=\"more\"></a></p><h4 id=\"ICrawler-cs\"><a href=\"#ICrawler-cs\" class=\"headerlink\" title=\"ICrawler.cs\"></a>ICrawler.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Spider.Crawler.Events;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICrawler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnStartEventArgs&gt; OnStart;<span class=\"comment\">//爬虫启动事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnCompletedEventArgs&gt; OnCompleted;<span class=\"comment\">//爬虫完成事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnErrorEventArgs&gt; OnError;<span class=\"comment\">//爬虫出错事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Start</span>(<span class=\"params\">Uri uri, <span class=\"keyword\">string</span> proxy</span>)</span>; <span class=\"comment\">//异步爬虫</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"SimpleCrawler-cs\"><a href=\"#SimpleCrawler-cs\" class=\"headerlink\" title=\"SimpleCrawler.cs\"></a>SimpleCrawler.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO.Compression;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Spider.Crawler.Events;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimpleCrawler</span> : <span class=\"title\">ICrawler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnStartEventArgs&gt; OnStart;<span class=\"comment\">//爬虫启动事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnCompletedEventArgs&gt; OnCompleted;<span class=\"comment\">//爬虫完成事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnErrorEventArgs&gt; OnError; <span class=\"comment\">//爬虫出错事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> CookieContainer CookiesContainer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; <span class=\"comment\">//定义Cookie容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleCrawler</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 异步创建爬虫</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"uri\"&gt;</span>爬虫URL地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"proxy\"&gt;</span>代理服务器<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>网页源代码<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Start</span>(<span class=\"params\">Uri uri, <span class=\"keyword\">string</span> proxy = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> Task.Run(() =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> pageSource = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnStart != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnStart(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnStartEventArgs(uri));</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> watch = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">                    watch.Start();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> request = (HttpWebRequest)WebRequest.Create(uri);</span><br><span class=\"line\">                    request.Accept = <span class=\"string\">\"*/*\"</span>;</span><br><span class=\"line\">                    request.ContentType = <span class=\"string\">\"application/x-www-form-urlencoede\"</span>;<span class=\"comment\">//定义文档类型及编码</span></span><br><span class=\"line\">                    request.AllowAutoRedirect = <span class=\"literal\">false</span>;<span class=\"comment\">//禁止自动跳转</span></span><br><span class=\"line\">                                                      <span class=\"comment\">//设置User-Agent，伪装成Google Chrome浏览器</span></span><br><span class=\"line\">                    request.UserAgent = <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\"</span>;</span><br><span class=\"line\">                    request.Timeout = <span class=\"number\">5000</span>;<span class=\"comment\">//定义请求超时时间为5秒</span></span><br><span class=\"line\">                    request.KeepAlive = <span class=\"literal\">true</span>;<span class=\"comment\">//启用长连接</span></span><br><span class=\"line\">                    request.Method = <span class=\"string\">\"GET\"</span>;<span class=\"comment\">//定义请求方式为GET     </span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (proxy != <span class=\"literal\">null</span>) request.Proxy = <span class=\"keyword\">new</span> WebProxy(proxy);<span class=\"comment\">//设置代理服务器IP，伪装请求地址</span></span><br><span class=\"line\">                    request.CookieContainer = <span class=\"keyword\">this</span>.CookiesContainer;<span class=\"comment\">//附加Cookie容器</span></span><br><span class=\"line\">                    request.ServicePoint.ConnectionLimit = <span class=\"keyword\">int</span>.MaxValue;<span class=\"comment\">//定义最大连接数</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> response = (HttpWebResponse)request.GetResponse())</span><br><span class=\"line\">                    &#123;<span class=\"comment\">//获取请求响应</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">foreach</span> (Cookie cookie <span class=\"keyword\">in</span> response.Cookies) <span class=\"keyword\">this</span>.CookiesContainer.Add(cookie);<span class=\"comment\">//将Cookie加入容器，保存登录状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (response.ContentEncoding.ToLower().Contains(<span class=\"string\">\"gzip\"</span>))<span class=\"comment\">//解压</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (GZipStream stream = <span class=\"keyword\">new</span> GZipStream(response.GetResponseStream(), CompressionMode.Decompress))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (response.ContentEncoding.ToLower().Contains(<span class=\"string\">\"deflate\"</span>))<span class=\"comment\">//解压</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (DeflateStream stream = <span class=\"keyword\">new</span> DeflateStream(response.GetResponseStream(), CompressionMode.Decompress))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (Stream stream = response.GetResponseStream())<span class=\"comment\">//原始</span></span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    request.Abort();</span><br><span class=\"line\">                    watch.Stop();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> threadId = System.Threading.Thread.CurrentThread.ManagedThreadId;<span class=\"comment\">//获取当前任务线程ID</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> milliseconds = watch.ElapsedMilliseconds;<span class=\"comment\">//获取请求执行时间</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnCompleted != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnCompleted(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnCompletedEventArgs(uri, threadId, milliseconds, pageSource));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnError != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnError(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnErrorEventArgs(uri, ex));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> pageSource;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"OnCompletedEventArgs-cs\"><a href=\"#OnCompletedEventArgs-cs\" class=\"headerlink\" title=\"OnCompletedEventArgs.cs\"></a>OnCompletedEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫完成事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnCompletedEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫URL地址</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ThreadId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 任务线程ID</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> PageSource &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 页面源代码</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> Milliseconds &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫请求执行事件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnCompletedEventArgs</span>(<span class=\"params\">Uri uri, <span class=\"keyword\">int</span> threadId, <span class=\"keyword\">long</span> milliseconds, <span class=\"keyword\">string</span> pageSource</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ThreadId = threadId;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Milliseconds = milliseconds;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.PageSource = pageSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"OnErrorEventArgs-cs\"><a href=\"#OnErrorEventArgs-cs\" class=\"headerlink\" title=\"OnErrorEventArgs.cs\"></a>OnErrorEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫错误事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnErrorEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Exception Exception &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnErrorEventArgs</span>(<span class=\"params\">Uri uri, Exception exception</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Exception = exception;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"OnStartEventArgs-cs\"><a href=\"#OnStartEventArgs-cs\" class=\"headerlink\" title=\"OnStartEventArgs.cs\"></a>OnStartEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫启动事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnStartEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫URL地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnStartEventArgs</span>(<span class=\"params\">Uri uri</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Url = <span class=\"string\">\"http://mebook.cc/\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> kindleCrawler = <span class=\"keyword\">new</span> SimpleCrawler();</span><br><span class=\"line\">kindleCrawler.OnStart += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//启动时执行的代码</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">kindleCrawler.OnError += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//出错时执行的代码</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">kindleCrawler.OnCompleted += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//完成时执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>“爬虫”就是一段用来自动化采集网站数据的程序。<br>","more":"</p><h4 id=\"ICrawler-cs\"><a href=\"#ICrawler-cs\" class=\"headerlink\" title=\"ICrawler.cs\"></a>ICrawler.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Caty.Spider.Crawler.Events;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICrawler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnStartEventArgs&gt; OnStart;<span class=\"comment\">//爬虫启动事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnCompletedEventArgs&gt; OnCompleted;<span class=\"comment\">//爬虫完成事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">event</span> EventHandler&lt;OnErrorEventArgs&gt; OnError;<span class=\"comment\">//爬虫出错事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Start</span>(<span class=\"params\">Uri uri, <span class=\"keyword\">string</span> proxy</span>)</span>; <span class=\"comment\">//异步爬虫</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"SimpleCrawler-cs\"><a href=\"#SimpleCrawler-cs\" class=\"headerlink\" title=\"SimpleCrawler.cs\"></a>SimpleCrawler.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO.Compression;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Caty.Spider.Crawler.Events;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SimpleCrawler</span> : <span class=\"title\">ICrawler</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnStartEventArgs&gt; OnStart;<span class=\"comment\">//爬虫启动事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnCompletedEventArgs&gt; OnCompleted;<span class=\"comment\">//爬虫完成事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler&lt;OnErrorEventArgs&gt; OnError; <span class=\"comment\">//爬虫出错事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> CookieContainer CookiesContainer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; <span class=\"comment\">//定义Cookie容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleCrawler</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 异步创建爬虫</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"uri\"&gt;</span>爬虫URL地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"proxy\"&gt;</span>代理服务器<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>网页源代码<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Start</span>(<span class=\"params\">Uri uri, <span class=\"keyword\">string</span> proxy = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> Task.Run(() =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> pageSource = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnStart != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnStart(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnStartEventArgs(uri));</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> watch = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">                    watch.Start();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> request = (HttpWebRequest)WebRequest.Create(uri);</span><br><span class=\"line\">                    request.Accept = <span class=\"string\">\"*/*\"</span>;</span><br><span class=\"line\">                    request.ContentType = <span class=\"string\">\"application/x-www-form-urlencoede\"</span>;<span class=\"comment\">//定义文档类型及编码</span></span><br><span class=\"line\">                    request.AllowAutoRedirect = <span class=\"literal\">false</span>;<span class=\"comment\">//禁止自动跳转</span></span><br><span class=\"line\">                                                      <span class=\"comment\">//设置User-Agent，伪装成Google Chrome浏览器</span></span><br><span class=\"line\">                    request.UserAgent = <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\"</span>;</span><br><span class=\"line\">                    request.Timeout = <span class=\"number\">5000</span>;<span class=\"comment\">//定义请求超时时间为5秒</span></span><br><span class=\"line\">                    request.KeepAlive = <span class=\"literal\">true</span>;<span class=\"comment\">//启用长连接</span></span><br><span class=\"line\">                    request.Method = <span class=\"string\">\"GET\"</span>;<span class=\"comment\">//定义请求方式为GET     </span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (proxy != <span class=\"literal\">null</span>) request.Proxy = <span class=\"keyword\">new</span> WebProxy(proxy);<span class=\"comment\">//设置代理服务器IP，伪装请求地址</span></span><br><span class=\"line\">                    request.CookieContainer = <span class=\"keyword\">this</span>.CookiesContainer;<span class=\"comment\">//附加Cookie容器</span></span><br><span class=\"line\">                    request.ServicePoint.ConnectionLimit = <span class=\"keyword\">int</span>.MaxValue;<span class=\"comment\">//定义最大连接数</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> response = (HttpWebResponse)request.GetResponse())</span><br><span class=\"line\">                    &#123;<span class=\"comment\">//获取请求响应</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">foreach</span> (Cookie cookie <span class=\"keyword\">in</span> response.Cookies) <span class=\"keyword\">this</span>.CookiesContainer.Add(cookie);<span class=\"comment\">//将Cookie加入容器，保存登录状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (response.ContentEncoding.ToLower().Contains(<span class=\"string\">\"gzip\"</span>))<span class=\"comment\">//解压</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (GZipStream stream = <span class=\"keyword\">new</span> GZipStream(response.GetResponseStream(), CompressionMode.Decompress))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (response.ContentEncoding.ToLower().Contains(<span class=\"string\">\"deflate\"</span>))<span class=\"comment\">//解压</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (DeflateStream stream = <span class=\"keyword\">new</span> DeflateStream(response.GetResponseStream(), CompressionMode.Decompress))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (Stream stream = response.GetResponseStream())<span class=\"comment\">//原始</span></span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">using</span> (StreamReader reader = <span class=\"keyword\">new</span> StreamReader(stream, Encoding.UTF8))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                                    pageSource = reader.ReadToEnd();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    request.Abort();</span><br><span class=\"line\">                    watch.Stop();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> threadId = System.Threading.Thread.CurrentThread.ManagedThreadId;<span class=\"comment\">//获取当前任务线程ID</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> milliseconds = watch.ElapsedMilliseconds;<span class=\"comment\">//获取请求执行时间</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnCompleted != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnCompleted(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnCompletedEventArgs(uri, threadId, milliseconds, pageSource));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.OnError != <span class=\"literal\">null</span>) <span class=\"keyword\">this</span>.OnError(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> OnErrorEventArgs(uri, ex));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> pageSource;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"OnCompletedEventArgs-cs\"><a href=\"#OnCompletedEventArgs-cs\" class=\"headerlink\" title=\"OnCompletedEventArgs.cs\"></a>OnCompletedEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫完成事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnCompletedEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫URL地址</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ThreadId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 任务线程ID</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> PageSource &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 页面源代码</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> Milliseconds &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫请求执行事件</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnCompletedEventArgs</span>(<span class=\"params\">Uri uri, <span class=\"keyword\">int</span> threadId, <span class=\"keyword\">long</span> milliseconds, <span class=\"keyword\">string</span> pageSource</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ThreadId = threadId;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Milliseconds = milliseconds;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.PageSource = pageSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"OnErrorEventArgs-cs\"><a href=\"#OnErrorEventArgs-cs\" class=\"headerlink\" title=\"OnErrorEventArgs.cs\"></a>OnErrorEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫错误事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnErrorEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Exception Exception &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnErrorEventArgs</span>(<span class=\"params\">Uri uri, Exception exception</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Exception = exception;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"OnStartEventArgs-cs\"><a href=\"#OnStartEventArgs-cs\" class=\"headerlink\" title=\"OnStartEventArgs.cs\"></a>OnStartEventArgs.cs</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Caty.Spider.Crawler.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 爬虫启动事件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnStartEventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Uri Uri &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;<span class=\"comment\">// 爬虫URL地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnStartEventArgs</span>(<span class=\"params\">Uri uri</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Uri = uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Url = <span class=\"string\">\"http://mebook.cc/\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> kindleCrawler = <span class=\"keyword\">new</span> SimpleCrawler();</span><br><span class=\"line\">kindleCrawler.OnStart += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//启动时执行的代码</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">kindleCrawler.OnError += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//出错时执行的代码</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">kindleCrawler.OnCompleted += (s, e) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//完成时执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"值类型与引用类型","date":"2019-03-28T15:33:57.000Z","_content":"### 引用类型\n* 内存必须从托管堆分配\n* 堆上分配的每个对象都有一些额外成员,这些成员必须初始化\n* 对象中的其他字节总是设为零\n* 从托管堆分配对象时,可能强制执行一次垃圾回收\n<!--more-->\n### 值类型\n* 类型具有基元类型的行为\n* 类型不需要从其他任何类型继承\n* 类型也不派生出其他类型\n* 类型的实例较小(小于等于16字节)\n* 类型的实例较大(大于16字节),但不作为方法实参传递,也不从方法返回.\n* 不作为对象在托管堆上分配\n\n### 值类型和引用类型的一些区别\n* 值类型对象有两种表示形式:未装箱和已装箱,引用类型总是处于已装箱形式\n* 值类型从System.ValueType派生,System.ValueType重写了Equals方法和GetHashCode方法,所以定义自己的值类型时,应重写Equals方法和GetHashCode方法,并提供它们的显示实现.\n* 由于不能将值类型作为基类型来定义新的值类型和引用类型,所以不应再值类型中引入任何新的虚方法.所有方法都不能是抽象的,都隐式密封.\n* 引用类型的变量包含堆中对象的地址,创建时默认初始化为null,表示当前不指向有效对象,试图使用null的引用类型变量会抛出NullReferenceException异常;值类型的变量总是包含其基础类型的一个值,初始化为0,一般不会抛出NullReferenceException异常.\n* 值类型变量赋值到另一个值类型变量,会逐字段复制,引用类型赋值只复制内存地址\n* 两个或多个引用类型变量能引用堆中同一个对象,对一个变量执行的操作可能对影响另一个变量引用的对象,值类型之间不会互相影响.\n* 由于未装箱的值类型不在堆上分配,一旦定义了该类型的一个实例方法不再活动,为它们分配的存储就会被释放,而不是等着进行垃圾回收","source":"_posts/值类型与引用类型.md","raw":"---\ntitle: 值类型与引用类型\ndate: 2019-03-28 23:33:57\ncategories: C# \ntags: \n - 基础\n - C#\n---\n### 引用类型\n* 内存必须从托管堆分配\n* 堆上分配的每个对象都有一些额外成员,这些成员必须初始化\n* 对象中的其他字节总是设为零\n* 从托管堆分配对象时,可能强制执行一次垃圾回收\n<!--more-->\n### 值类型\n* 类型具有基元类型的行为\n* 类型不需要从其他任何类型继承\n* 类型也不派生出其他类型\n* 类型的实例较小(小于等于16字节)\n* 类型的实例较大(大于16字节),但不作为方法实参传递,也不从方法返回.\n* 不作为对象在托管堆上分配\n\n### 值类型和引用类型的一些区别\n* 值类型对象有两种表示形式:未装箱和已装箱,引用类型总是处于已装箱形式\n* 值类型从System.ValueType派生,System.ValueType重写了Equals方法和GetHashCode方法,所以定义自己的值类型时,应重写Equals方法和GetHashCode方法,并提供它们的显示实现.\n* 由于不能将值类型作为基类型来定义新的值类型和引用类型,所以不应再值类型中引入任何新的虚方法.所有方法都不能是抽象的,都隐式密封.\n* 引用类型的变量包含堆中对象的地址,创建时默认初始化为null,表示当前不指向有效对象,试图使用null的引用类型变量会抛出NullReferenceException异常;值类型的变量总是包含其基础类型的一个值,初始化为0,一般不会抛出NullReferenceException异常.\n* 值类型变量赋值到另一个值类型变量,会逐字段复制,引用类型赋值只复制内存地址\n* 两个或多个引用类型变量能引用堆中同一个对象,对一个变量执行的操作可能对影响另一个变量引用的对象,值类型之间不会互相影响.\n* 由于未装箱的值类型不在堆上分配,一旦定义了该类型的一个实例方法不再活动,为它们分配的存储就会被释放,而不是等着进行垃圾回收","slug":"值类型与引用类型","published":1,"updated":"2019-03-28T16:02:35.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej2420058tkuivrpgs4jl","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><ul><li>内存必须从托管堆分配</li><li>堆上分配的每个对象都有一些额外成员,这些成员必须初始化</li><li>对象中的其他字节总是设为零</li><li>从托管堆分配对象时,可能强制执行一次垃圾回收<a id=\"more\"></a><h3 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h3></li><li>类型具有基元类型的行为</li><li>类型不需要从其他任何类型继承</li><li>类型也不派生出其他类型</li><li>类型的实例较小(小于等于16字节)</li><li>类型的实例较大(大于16字节),但不作为方法实参传递,也不从方法返回.</li><li>不作为对象在托管堆上分配</li></ul><h3 id=\"值类型和引用类型的一些区别\"><a href=\"#值类型和引用类型的一些区别\" class=\"headerlink\" title=\"值类型和引用类型的一些区别\"></a>值类型和引用类型的一些区别</h3><ul><li>值类型对象有两种表示形式:未装箱和已装箱,引用类型总是处于已装箱形式</li><li>值类型从System.ValueType派生,System.ValueType重写了Equals方法和GetHashCode方法,所以定义自己的值类型时,应重写Equals方法和GetHashCode方法,并提供它们的显示实现.</li><li>由于不能将值类型作为基类型来定义新的值类型和引用类型,所以不应再值类型中引入任何新的虚方法.所有方法都不能是抽象的,都隐式密封.</li><li>引用类型的变量包含堆中对象的地址,创建时默认初始化为null,表示当前不指向有效对象,试图使用null的引用类型变量会抛出NullReferenceException异常;值类型的变量总是包含其基础类型的一个值,初始化为0,一般不会抛出NullReferenceException异常.</li><li>值类型变量赋值到另一个值类型变量,会逐字段复制,引用类型赋值只复制内存地址</li><li>两个或多个引用类型变量能引用堆中同一个对象,对一个变量执行的操作可能对影响另一个变量引用的对象,值类型之间不会互相影响.</li><li>由于未装箱的值类型不在堆上分配,一旦定义了该类型的一个实例方法不再活动,为它们分配的存储就会被释放,而不是等着进行垃圾回收</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><ul><li>内存必须从托管堆分配</li><li>堆上分配的每个对象都有一些额外成员,这些成员必须初始化</li><li>对象中的其他字节总是设为零</li><li>从托管堆分配对象时,可能强制执行一次垃圾回收","more":"<h3 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h3></li><li>类型具有基元类型的行为</li><li>类型不需要从其他任何类型继承</li><li>类型也不派生出其他类型</li><li>类型的实例较小(小于等于16字节)</li><li>类型的实例较大(大于16字节),但不作为方法实参传递,也不从方法返回.</li><li>不作为对象在托管堆上分配</li></ul><h3 id=\"值类型和引用类型的一些区别\"><a href=\"#值类型和引用类型的一些区别\" class=\"headerlink\" title=\"值类型和引用类型的一些区别\"></a>值类型和引用类型的一些区别</h3><ul><li>值类型对象有两种表示形式:未装箱和已装箱,引用类型总是处于已装箱形式</li><li>值类型从System.ValueType派生,System.ValueType重写了Equals方法和GetHashCode方法,所以定义自己的值类型时,应重写Equals方法和GetHashCode方法,并提供它们的显示实现.</li><li>由于不能将值类型作为基类型来定义新的值类型和引用类型,所以不应再值类型中引入任何新的虚方法.所有方法都不能是抽象的,都隐式密封.</li><li>引用类型的变量包含堆中对象的地址,创建时默认初始化为null,表示当前不指向有效对象,试图使用null的引用类型变量会抛出NullReferenceException异常;值类型的变量总是包含其基础类型的一个值,初始化为0,一般不会抛出NullReferenceException异常.</li><li>值类型变量赋值到另一个值类型变量,会逐字段复制,引用类型赋值只复制内存地址</li><li>两个或多个引用类型变量能引用堆中同一个对象,对一个变量执行的操作可能对影响另一个变量引用的对象,值类型之间不会互相影响.</li><li>由于未装箱的值类型不在堆上分配,一旦定义了该类型的一个实例方法不再活动,为它们分配的存储就会被释放,而不是等着进行垃圾回收</li></ul><!-- rebuild by neat -->"},{"title":"使用WebApiClient请求和管理Restful Api","date":"2018-03-10T14:06:47.000Z","_content":"WebApiClient的出现,大幅度减轻了接口调用者的工作量,而且在调用Http接口上还非常容易维护和更新,还可以轻松应付设计不太友好的一些Http接口\n\n使用WebApiClient,编程人员不再需要手动实现路径拼接,参数拼接,请求体组装和响应映射为模型这些繁琐的过程.\n<!--more-->\n\n以下为WebApiClient应用到项目中的一般流程\n##### 声明http接口的Interface\n```cs\n[JsonReturn]\npublic interface IlotRemotePush : IDisposable\n{\n    /// <summary>\n    /// 创建远程推送账号\n    /// </summmary>\n    /// <param name=\"auth\">授权</param>\n    /// <returns></returns>\n    [HttpPost(\"/CreateAccount\")]\n    ITask<ApiResult<PushAccount>> CreateAccountAsync(lotBasicAuth auth);\n\n     /// <summary>\n    /// 获取推送服务信息\n    /// </summmary>\n    /// <param name=\"id\">pushId</param>\n    /// <returns></returns>\n    [HttpGet(\"/GetSevice?id={id}\")]\n    ITask<ApiResult<MqttService>> GetPushServiceAsync(string id);\n}\n\n/// <summary>\n/// Api结果接口\n/// </summmary>\npublic interface IApiResult\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    ErrorCode Code { get; set; }\n\n    /// <summary>\n    /// 相关提示信息\n    /// </summmary>\n    string Msg { get; set; }\n}\n\n/// <summary>\n/// 表示Api结果\n/// </summmary>\npublic class ApiResult<T> : IApiReult\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    public ErrorCode Code { get; set; }\n\n    /// <summary>\n    /// 相关提示信息\n    /// </summmary>\n    public string Msg { get; set; }\n\n    /// <summary>\n    /// 业务数据\n    /// </summmary>\n    public T Data { get; set; }\n}\n```\n\n##### 调用http接口\nWebApiClient不需要开发者实现接口,使用HttpApiClient.Create方法可以动态创建接口的实现类的实例,调用实例的方法,就完成一个Api的请求\n```cs\nusing (var iotApi = HttpApiClient.Create<IlotRemotePush>())\n{\n    var auth = new lotBasicAuth(config.AppId, config.AppToken);\n    var createResult = await iotApi.CreateAccountAsync(auth);\n\n    if(createResult.Code != ErrorCode.NoError)\n    {\n        return null;\n    }\n\n    config.PushId = createResult.Data.Id;\n    config.PushToken = createResult.Data.Token;\n    await db.SaveChangesAsync();\n\n    return config;\n}\n```\n\n##### 异常定义与异常处理\n在以上接口中,接口返回的都是ApiResult\n```cs\n/// <summary>\n/// 表示lot异常\n/// </summmary>\npublic class lotException : Exception\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    public ErrorCode ErrorCode{ get; private set; }\n\n    /// <summary>\n    /// lot异常\n    /// </summmary>\n    /// <param name=\"apiResult\">api结果值</param>\n    public lotException(IApiResult apiResult) : base(apiResult.Msg)\n    {\n        this.ErrorCode = apiResult.Code;\n    }\n}\n```\n\n还应该在Interface上扩展JsonResult,用于将ApiResult的ErrorCode转换为lotExcetion,并抛出\n```cs\n/// <summary>\n/// 表示lotJson结果\n/// </summmary>\npublic class lotJsonResultAttribute : JsonReturnAttribute\n{\n    protected override async Task<object> GetTaskResult(ApiActionContext context)\n    {\n        var apiResult = await base.GetTaskResult(context) as IApiResult;\n        if(apiResult != null && apiResult.Code != ErrorCode.NoError)\n        {\n            throw new lotException(apiResult);\n        }\n        return apiResult;\n    }\n}\n```\n\n然后将新的lotJsonResultAttribute在Interface上替换JsonReturnAttribute\n```cs\n[lotJsonResult]public interface IlotRemotePush : IDisposable\n{\n    ...\n}\n```\n\n最后,调用http接口的时候,可以使用Handle()扩展方法处理异常\n```cs\nusing(var iotApi = HttpApiClient.Create<IlotRemotePush>())\n{\n    var auth = new lotBasicAuth(config.AppId, config.AppToken);\n    var createResult = await iotApi.CreateAccountAsync(auth).Handle()\n    .WhenCatch<lotException>(ex => {\n        // process exception\n        return default(ApiResult<PushAccount>);\n    })\n    .WhenCatch<lotException>(ex =>\n    {\n        // process exception\n        return default(ApiResult<PushAccount>);\n    });\n\n    if(createResult == null)\n    {\n        return null;\n    }\n\n    config.PushId = createResult.Data.Id;\n    config.PushToken = createResult.Data.Token;\n    await db.SaveChangesAsync();\n\n    return config;\n}\n```\n","source":"_posts/使用WebApiClient请求和管理Restful-Api.md","raw":"---\ntitle: 使用WebApiClient请求和管理Restful Api\ndate: 2018-03-10 22:06:47\ncategories: .Net\ntags:\n - .Net\n - Web Api\n---\nWebApiClient的出现,大幅度减轻了接口调用者的工作量,而且在调用Http接口上还非常容易维护和更新,还可以轻松应付设计不太友好的一些Http接口\n\n使用WebApiClient,编程人员不再需要手动实现路径拼接,参数拼接,请求体组装和响应映射为模型这些繁琐的过程.\n<!--more-->\n\n以下为WebApiClient应用到项目中的一般流程\n##### 声明http接口的Interface\n```cs\n[JsonReturn]\npublic interface IlotRemotePush : IDisposable\n{\n    /// <summary>\n    /// 创建远程推送账号\n    /// </summmary>\n    /// <param name=\"auth\">授权</param>\n    /// <returns></returns>\n    [HttpPost(\"/CreateAccount\")]\n    ITask<ApiResult<PushAccount>> CreateAccountAsync(lotBasicAuth auth);\n\n     /// <summary>\n    /// 获取推送服务信息\n    /// </summmary>\n    /// <param name=\"id\">pushId</param>\n    /// <returns></returns>\n    [HttpGet(\"/GetSevice?id={id}\")]\n    ITask<ApiResult<MqttService>> GetPushServiceAsync(string id);\n}\n\n/// <summary>\n/// Api结果接口\n/// </summmary>\npublic interface IApiResult\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    ErrorCode Code { get; set; }\n\n    /// <summary>\n    /// 相关提示信息\n    /// </summmary>\n    string Msg { get; set; }\n}\n\n/// <summary>\n/// 表示Api结果\n/// </summmary>\npublic class ApiResult<T> : IApiReult\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    public ErrorCode Code { get; set; }\n\n    /// <summary>\n    /// 相关提示信息\n    /// </summmary>\n    public string Msg { get; set; }\n\n    /// <summary>\n    /// 业务数据\n    /// </summmary>\n    public T Data { get; set; }\n}\n```\n\n##### 调用http接口\nWebApiClient不需要开发者实现接口,使用HttpApiClient.Create方法可以动态创建接口的实现类的实例,调用实例的方法,就完成一个Api的请求\n```cs\nusing (var iotApi = HttpApiClient.Create<IlotRemotePush>())\n{\n    var auth = new lotBasicAuth(config.AppId, config.AppToken);\n    var createResult = await iotApi.CreateAccountAsync(auth);\n\n    if(createResult.Code != ErrorCode.NoError)\n    {\n        return null;\n    }\n\n    config.PushId = createResult.Data.Id;\n    config.PushToken = createResult.Data.Token;\n    await db.SaveChangesAsync();\n\n    return config;\n}\n```\n\n##### 异常定义与异常处理\n在以上接口中,接口返回的都是ApiResult\n```cs\n/// <summary>\n/// 表示lot异常\n/// </summmary>\npublic class lotException : Exception\n{\n    /// <summary>\n    /// 错误码\n    /// </summmary>\n    public ErrorCode ErrorCode{ get; private set; }\n\n    /// <summary>\n    /// lot异常\n    /// </summmary>\n    /// <param name=\"apiResult\">api结果值</param>\n    public lotException(IApiResult apiResult) : base(apiResult.Msg)\n    {\n        this.ErrorCode = apiResult.Code;\n    }\n}\n```\n\n还应该在Interface上扩展JsonResult,用于将ApiResult的ErrorCode转换为lotExcetion,并抛出\n```cs\n/// <summary>\n/// 表示lotJson结果\n/// </summmary>\npublic class lotJsonResultAttribute : JsonReturnAttribute\n{\n    protected override async Task<object> GetTaskResult(ApiActionContext context)\n    {\n        var apiResult = await base.GetTaskResult(context) as IApiResult;\n        if(apiResult != null && apiResult.Code != ErrorCode.NoError)\n        {\n            throw new lotException(apiResult);\n        }\n        return apiResult;\n    }\n}\n```\n\n然后将新的lotJsonResultAttribute在Interface上替换JsonReturnAttribute\n```cs\n[lotJsonResult]public interface IlotRemotePush : IDisposable\n{\n    ...\n}\n```\n\n最后,调用http接口的时候,可以使用Handle()扩展方法处理异常\n```cs\nusing(var iotApi = HttpApiClient.Create<IlotRemotePush>())\n{\n    var auth = new lotBasicAuth(config.AppId, config.AppToken);\n    var createResult = await iotApi.CreateAccountAsync(auth).Handle()\n    .WhenCatch<lotException>(ex => {\n        // process exception\n        return default(ApiResult<PushAccount>);\n    })\n    .WhenCatch<lotException>(ex =>\n    {\n        // process exception\n        return default(ApiResult<PushAccount>);\n    });\n\n    if(createResult == null)\n    {\n        return null;\n    }\n\n    config.PushId = createResult.Data.Id;\n    config.PushToken = createResult.Data.Token;\n    await db.SaveChangesAsync();\n\n    return config;\n}\n```\n","slug":"使用WebApiClient请求和管理Restful-Api","published":1,"updated":"2018-03-10T15:13:08.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej244005btkui8784t9v5","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>WebApiClient的出现,大幅度减轻了接口调用者的工作量,而且在调用Http接口上还非常容易维护和更新,还可以轻松应付设计不太友好的一些Http接口</p><p>使用WebApiClient,编程人员不再需要手动实现路径拼接,参数拼接,请求体组装和响应映射为模型这些繁琐的过程.<br><a id=\"more\"></a></p><p>以下为WebApiClient应用到项目中的一般流程</p><h5 id=\"声明http接口的Interface\"><a href=\"#声明http接口的Interface\" class=\"headerlink\" title=\"声明http接口的Interface\"></a>声明http接口的Interface</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">JsonReturn</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IlotRemotePush</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 创建远程推送账号</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"auth\"&gt;</span>授权<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost(<span class=\"meta-string\">\"/CreateAccount\"</span>)</span>]</span><br><span class=\"line\">    ITask&lt;ApiResult&lt;PushAccount&gt;&gt; CreateAccountAsync(lotBasicAuth auth);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取推送服务信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span>pushId<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"/GetSevice?id=&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">    ITask&lt;ApiResult&lt;MqttService&gt;&gt; GetPushServiceAsync(<span class=\"keyword\">string</span> id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Api结果接口</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IApiResult</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    ErrorCode Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 相关提示信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> Msg &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示Api结果</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">public class ApiResult&lt;T&gt; : IApiReult</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ErrorCode Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 相关提示信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Msg &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 业务数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T Data &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"调用http接口\"><a href=\"#调用http接口\" class=\"headerlink\" title=\"调用http接口\"></a>调用http接口</h5><p>WebApiClient不需要开发者实现接口,使用HttpApiClient.Create方法可以动态创建接口的实现类的实例,调用实例的方法,就完成一个Api的请求<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> iotApi = HttpApiClient.Create&lt;IlotRemotePush&gt;())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> auth = <span class=\"keyword\">new</span> lotBasicAuth(config.AppId, config.AppToken);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> createResult = <span class=\"keyword\">await</span> iotApi.CreateAccountAsync(auth);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(createResult.Code != ErrorCode.NoError)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.PushId = createResult.Data.Id;</span><br><span class=\"line\">    config.PushToken = createResult.Data.Token;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.SaveChangesAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"异常定义与异常处理\"><a href=\"#异常定义与异常处理\" class=\"headerlink\" title=\"异常定义与异常处理\"></a>异常定义与异常处理</h5><p>在以上接口中,接口返回的都是ApiResult<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示lot异常</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">lotException</span> : <span class=\"title\">Exception</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ErrorCode ErrorCode&#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> lot异常</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"apiResult\"&gt;</span>api结果值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">lotException</span>(<span class=\"params\">IApiResult apiResult</span>) : <span class=\"title\">base</span>(<span class=\"params\">apiResult.Msg</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ErrorCode = apiResult.Code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>还应该在Interface上扩展JsonResult,用于将ApiResult的ErrorCode转换为lotExcetion,并抛出<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示lotJson结果</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">lotJsonResultAttribute</span> : <span class=\"title\">JsonReturnAttribute</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">object</span>&gt; <span class=\"title\">GetTaskResult</span>(<span class=\"params\">ApiActionContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> apiResult = <span class=\"keyword\">await</span> <span class=\"keyword\">base</span>.GetTaskResult(context) <span class=\"keyword\">as</span> IApiResult;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(apiResult != <span class=\"literal\">null</span> &amp;&amp; apiResult.Code != ErrorCode.NoError)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> lotException(apiResult);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apiResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后将新的lotJsonResultAttribute在Interface上替换JsonReturnAttribute<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">lotJsonResult</span>]<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IlotRemotePush</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后,调用http接口的时候,可以使用Handle()扩展方法处理异常<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span>(<span class=\"keyword\">var</span> iotApi = HttpApiClient.Create&lt;IlotRemotePush&gt;())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> auth = <span class=\"keyword\">new</span> lotBasicAuth(config.AppId, config.AppToken);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> createResult = <span class=\"keyword\">await</span> iotApi.CreateAccountAsync(auth).Handle()</span><br><span class=\"line\">    .WhenCatch&lt;lotException&gt;(ex =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process exception</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">default</span>(ApiResult&lt;PushAccount&gt;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .WhenCatch&lt;lotException&gt;(ex =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process exception</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">default</span>(ApiResult&lt;PushAccount&gt;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(createResult == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.PushId = createResult.Data.Id;</span><br><span class=\"line\">    config.PushToken = createResult.Data.Token;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.SaveChangesAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>WebApiClient的出现,大幅度减轻了接口调用者的工作量,而且在调用Http接口上还非常容易维护和更新,还可以轻松应付设计不太友好的一些Http接口</p><p>使用WebApiClient,编程人员不再需要手动实现路径拼接,参数拼接,请求体组装和响应映射为模型这些繁琐的过程.<br>","more":"</p><p>以下为WebApiClient应用到项目中的一般流程</p><h5 id=\"声明http接口的Interface\"><a href=\"#声明http接口的Interface\" class=\"headerlink\" title=\"声明http接口的Interface\"></a>声明http接口的Interface</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">JsonReturn</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IlotRemotePush</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 创建远程推送账号</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"auth\"&gt;</span>授权<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost(<span class=\"meta-string\">\"/CreateAccount\"</span>)</span>]</span><br><span class=\"line\">    ITask&lt;ApiResult&lt;PushAccount&gt;&gt; CreateAccountAsync(lotBasicAuth auth);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取推送服务信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"id\"&gt;</span>pushId<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"/GetSevice?id=&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\">    ITask&lt;ApiResult&lt;MqttService&gt;&gt; GetPushServiceAsync(<span class=\"keyword\">string</span> id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Api结果接口</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IApiResult</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    ErrorCode Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 相关提示信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> Msg &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示Api结果</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">public class ApiResult&lt;T&gt; : IApiReult</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ErrorCode Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 相关提示信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Msg &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 业务数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T Data &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"调用http接口\"><a href=\"#调用http接口\" class=\"headerlink\" title=\"调用http接口\"></a>调用http接口</h5><p>WebApiClient不需要开发者实现接口,使用HttpApiClient.Create方法可以动态创建接口的实现类的实例,调用实例的方法,就完成一个Api的请求<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> iotApi = HttpApiClient.Create&lt;IlotRemotePush&gt;())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> auth = <span class=\"keyword\">new</span> lotBasicAuth(config.AppId, config.AppToken);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> createResult = <span class=\"keyword\">await</span> iotApi.CreateAccountAsync(auth);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(createResult.Code != ErrorCode.NoError)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.PushId = createResult.Data.Id;</span><br><span class=\"line\">    config.PushToken = createResult.Data.Token;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.SaveChangesAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"异常定义与异常处理\"><a href=\"#异常定义与异常处理\" class=\"headerlink\" title=\"异常定义与异常处理\"></a>异常定义与异常处理</h5><p>在以上接口中,接口返回的都是ApiResult<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示lot异常</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">lotException</span> : <span class=\"title\">Exception</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 错误码</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ErrorCode ErrorCode&#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> lot异常</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"apiResult\"&gt;</span>api结果值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">lotException</span>(<span class=\"params\">IApiResult apiResult</span>) : <span class=\"title\">base</span>(<span class=\"params\">apiResult.Msg</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ErrorCode = apiResult.Code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>还应该在Interface上扩展JsonResult,用于将ApiResult的ErrorCode转换为lotExcetion,并抛出<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 表示lotJson结果</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summmary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">lotJsonResultAttribute</span> : <span class=\"title\">JsonReturnAttribute</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">object</span>&gt; <span class=\"title\">GetTaskResult</span>(<span class=\"params\">ApiActionContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> apiResult = <span class=\"keyword\">await</span> <span class=\"keyword\">base</span>.GetTaskResult(context) <span class=\"keyword\">as</span> IApiResult;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(apiResult != <span class=\"literal\">null</span> &amp;&amp; apiResult.Code != ErrorCode.NoError)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> lotException(apiResult);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apiResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后将新的lotJsonResultAttribute在Interface上替换JsonReturnAttribute<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">lotJsonResult</span>]<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IlotRemotePush</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后,调用http接口的时候,可以使用Handle()扩展方法处理异常<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span>(<span class=\"keyword\">var</span> iotApi = HttpApiClient.Create&lt;IlotRemotePush&gt;())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> auth = <span class=\"keyword\">new</span> lotBasicAuth(config.AppId, config.AppToken);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> createResult = <span class=\"keyword\">await</span> iotApi.CreateAccountAsync(auth).Handle()</span><br><span class=\"line\">    .WhenCatch&lt;lotException&gt;(ex =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process exception</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">default</span>(ApiResult&lt;PushAccount&gt;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .WhenCatch&lt;lotException&gt;(ex =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// process exception</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">default</span>(ApiResult&lt;PushAccount&gt;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(createResult == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.PushId = createResult.Data.Id;</span><br><span class=\"line\">    config.PushToken = createResult.Data.Token;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> db.SaveChangesAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->"},{"title":"夏洛特烦恼观影随想","date":"2019-11-10T15:13:06.000Z","_content":"#### 缘由\n\n今夜无事,就又看了一次夏洛特烦恼,可能是心境遭遇不一样了,想法也有点不同了.\n\n#### 想法\n\n1. 不合适在一起的人就算勉强在一起也不会有什么好结果的\n\n2. 适合在一起的不去珍惜,最后也将不再属于你\n","source":"_posts/夏洛特烦恼观影随想.md","raw":"---\ntitle: 夏洛特烦恼观影随想\ndate: 2019-11-10 23:13:06\ncategories: 随笔\ntags:\n - 随笔\n---\n#### 缘由\n\n今夜无事,就又看了一次夏洛特烦恼,可能是心境遭遇不一样了,想法也有点不同了.\n\n#### 想法\n\n1. 不合适在一起的人就算勉强在一起也不会有什么好结果的\n\n2. 适合在一起的不去珍惜,最后也将不再属于你\n","slug":"夏洛特烦恼观影随想","published":1,"updated":"2019-11-10T15:21:57.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej246005etkuie4io8u3h","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h4><p>今夜无事,就又看了一次夏洛特烦恼,可能是心境遭遇不一样了,想法也有点不同了.</p><h4 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h4><ol><li><p>不合适在一起的人就算勉强在一起也不会有什么好结果的</p></li><li><p>适合在一起的不去珍惜,最后也将不再属于你</p></li></ol><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h4><p>今夜无事,就又看了一次夏洛特烦恼,可能是心境遭遇不一样了,想法也有点不同了.</p><h4 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h4><ol><li><p>不合适在一起的人就算勉强在一起也不会有什么好结果的</p></li><li><p>适合在一起的不去珍惜,最后也将不再属于你</p></li></ol><!-- rebuild by neat -->"},{"title":"关于毕业设计的整理","date":"2018-06-05T15:38:39.000Z","_content":"#### 关于毕业设计的想法\n在毕业设计的题目,我是比较纠结的,有想过利用.Net Core和Google Optimization Tools去做一个智能调度排班系统的,但后来经过深入的了解,发现智能调度排班系统并没有那么容易实现.回忆大学生涯,学生网管这个工作其实还在给我带来了不少的回忆.于是就决定开发一个网络故障报修系统.\n<!--more-->\n\n#### 采用的架构\n一直有开发一个前后端分离的系统的想法,刚好借这个机会去尝试一下,就决定采用前后端分离的开发模式.服务端采用Asp.Net Core WebApi,前端采用Vue+Router+Element ui+axios.\n\n#### 关于跨域\n##### 问题原因\n既然使用了前后端分离的架构,不可避免的就是跨域访问的问题.前后端可能不在同个server上,即便是在同个server上,由于前后端分离,前后端对应的端口号也可能是不一样的,所以跨域访问是必须的.\n##### 解决方案\n服务端是基于Asp.Net Core开发的WebApi,支持cors非常方便,只需要引入Microsoft.AspNetCore.Cors,问题就很轻易的解决了.\n在Startup.cs中ConfigureServices方法中添加Cors服务,在Configure方法中使用Cors服务\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options => options.AddPolicy(\"Domain\", builder => builder.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin().AllowCredentials()));\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseCors(\"Domain\");\n}\n```\n\n#### 关于用户权限\n##### 问题原因\n在系统中涉及到不同的角色,它们之间的权限不一样,对应的菜单也就存在着差异.关于权限的部分,有着几种不同的解决方案,一种是在前端预设写死页面的权限设置,前端通过后台返回的角色信息,生成对应的菜单,另一种则是在后台动态配置权限,当用户登录时,根据角色信息,后端返回一个对应的权限表,前端通过权限表生成对应的菜单.\n##### 解决方案\n在本系统中,采用的是后一种解决方案,前端中存在完整的路由表,用户在登录后,获得相应的路由信息,根据路由信息去比对完整的路由表,生成当前用户可访问的页面,通过router.addRoutes动态挂载到router上.\n\n#### 关于前端\n系统的前端是基于[vueAdmin-template](https://github.com/PanJiaChen/vueAdmin-template)进行二次开发,修改了其关于用户权限的设置\n\n#### 关于服务端\n系统的后端采用的是Asp.Net Core WebApi,MVC模式,架构分为BLL(业务层)-Dal(数据访问层),数据库访问是通过EF Core实现.使用EF Core Code Frist 创建数据库,使用Migrations完成对数据库的迁移.[.Net Core MVC三层架构框架](https://chcaty.github.io/2018/03/06/Net-Core-MVC-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/)里面架构进行了详细介绍.\n\n#### Token\n系统中,登录成功后，服务端会返回一个 token（该token的是一个能唯一标示用户身份的一个key），之后我们将token存储在本地cookie之中，这样下次打开页面或者刷新页面的时候能记住用户的登录状态，不用再去登录页面重新登录了。\n##### 实现方案\nLoginControllers.cs\n```cs\nusing Microsoft.IdentityModel.Tokens;\nusing System.Security.Claims;\nusing Microsoft.Extensions.Configuration;\n\npublic class LoginController : Controller\n{\n    private readonly IConfiguration _configuration;\n    public LoginController(IConfiguration configuration)\n    {\n         _configuration = configuration;\n    }\n    \n    public string RequestToken([FromBody] TokenRequest request, string token, int expires_in)\n    {\n        var claims = new[]\n        {\n             new Claim(ClaimTypes.Name, request.Username)\n        };\n        \n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[\"SecurityKey\"]));\n        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        /**\n            * Claims (Payload)\n            Claims 部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，下面节选一些字段:\n            iss: The issuer of the token，token 是给谁的\n            sub: The subject of the token，token 主题\n            exp: Expiration Time。 token 过期时间，Unix 时间戳格式\n            iat: Issued At。 token 创建时间， Unix 时间戳格式\n            jti: JWT ID。针对当前 token 的唯一标识\n            除了规定的字段外，可以包含其他任何 JSON 兼容的字段。\n         * */\n        var tokens = new JwtSecurityToken(\n            issuer: \"yourdomain.com\",\n            audience: \"yourdomain.com\",\n            claims: claims,\n            expires: DateTime.Now.AddMinutes(10),\n            signingCredentials: creds);\n\n        return token = new JwtSecurityTokenHandler().WriteToken(tokens);\n    }\n\n\n    public class TokenRequest\n    {\n        public string Username { get; set; }\n        public string Password { get; set; }\n    }\n}\n```\nappsettings.json\n```cs\n{\n    \"SecurityKey\": \"dd%88*377f6d&f£$$£$FdddFF33fssDG^!3\"\n}\n```\n#### GitHub地址\n[网络故障报修管理系统](https://github.com/chcaty/IRS)\n","source":"_posts/关于毕业设计的整理.md","raw":"---\ntitle: 关于毕业设计的整理\ndate: 2018-06-05 23:38:39\ncategories: .Net Core\ntags:\n - .Net Core\n - Vue.js\n---\n#### 关于毕业设计的想法\n在毕业设计的题目,我是比较纠结的,有想过利用.Net Core和Google Optimization Tools去做一个智能调度排班系统的,但后来经过深入的了解,发现智能调度排班系统并没有那么容易实现.回忆大学生涯,学生网管这个工作其实还在给我带来了不少的回忆.于是就决定开发一个网络故障报修系统.\n<!--more-->\n\n#### 采用的架构\n一直有开发一个前后端分离的系统的想法,刚好借这个机会去尝试一下,就决定采用前后端分离的开发模式.服务端采用Asp.Net Core WebApi,前端采用Vue+Router+Element ui+axios.\n\n#### 关于跨域\n##### 问题原因\n既然使用了前后端分离的架构,不可避免的就是跨域访问的问题.前后端可能不在同个server上,即便是在同个server上,由于前后端分离,前后端对应的端口号也可能是不一样的,所以跨域访问是必须的.\n##### 解决方案\n服务端是基于Asp.Net Core开发的WebApi,支持cors非常方便,只需要引入Microsoft.AspNetCore.Cors,问题就很轻易的解决了.\n在Startup.cs中ConfigureServices方法中添加Cors服务,在Configure方法中使用Cors服务\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options => options.AddPolicy(\"Domain\", builder => builder.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin().AllowCredentials()));\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseCors(\"Domain\");\n}\n```\n\n#### 关于用户权限\n##### 问题原因\n在系统中涉及到不同的角色,它们之间的权限不一样,对应的菜单也就存在着差异.关于权限的部分,有着几种不同的解决方案,一种是在前端预设写死页面的权限设置,前端通过后台返回的角色信息,生成对应的菜单,另一种则是在后台动态配置权限,当用户登录时,根据角色信息,后端返回一个对应的权限表,前端通过权限表生成对应的菜单.\n##### 解决方案\n在本系统中,采用的是后一种解决方案,前端中存在完整的路由表,用户在登录后,获得相应的路由信息,根据路由信息去比对完整的路由表,生成当前用户可访问的页面,通过router.addRoutes动态挂载到router上.\n\n#### 关于前端\n系统的前端是基于[vueAdmin-template](https://github.com/PanJiaChen/vueAdmin-template)进行二次开发,修改了其关于用户权限的设置\n\n#### 关于服务端\n系统的后端采用的是Asp.Net Core WebApi,MVC模式,架构分为BLL(业务层)-Dal(数据访问层),数据库访问是通过EF Core实现.使用EF Core Code Frist 创建数据库,使用Migrations完成对数据库的迁移.[.Net Core MVC三层架构框架](https://chcaty.github.io/2018/03/06/Net-Core-MVC-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/)里面架构进行了详细介绍.\n\n#### Token\n系统中,登录成功后，服务端会返回一个 token（该token的是一个能唯一标示用户身份的一个key），之后我们将token存储在本地cookie之中，这样下次打开页面或者刷新页面的时候能记住用户的登录状态，不用再去登录页面重新登录了。\n##### 实现方案\nLoginControllers.cs\n```cs\nusing Microsoft.IdentityModel.Tokens;\nusing System.Security.Claims;\nusing Microsoft.Extensions.Configuration;\n\npublic class LoginController : Controller\n{\n    private readonly IConfiguration _configuration;\n    public LoginController(IConfiguration configuration)\n    {\n         _configuration = configuration;\n    }\n    \n    public string RequestToken([FromBody] TokenRequest request, string token, int expires_in)\n    {\n        var claims = new[]\n        {\n             new Claim(ClaimTypes.Name, request.Username)\n        };\n        \n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[\"SecurityKey\"]));\n        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        /**\n            * Claims (Payload)\n            Claims 部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，下面节选一些字段:\n            iss: The issuer of the token，token 是给谁的\n            sub: The subject of the token，token 主题\n            exp: Expiration Time。 token 过期时间，Unix 时间戳格式\n            iat: Issued At。 token 创建时间， Unix 时间戳格式\n            jti: JWT ID。针对当前 token 的唯一标识\n            除了规定的字段外，可以包含其他任何 JSON 兼容的字段。\n         * */\n        var tokens = new JwtSecurityToken(\n            issuer: \"yourdomain.com\",\n            audience: \"yourdomain.com\",\n            claims: claims,\n            expires: DateTime.Now.AddMinutes(10),\n            signingCredentials: creds);\n\n        return token = new JwtSecurityTokenHandler().WriteToken(tokens);\n    }\n\n\n    public class TokenRequest\n    {\n        public string Username { get; set; }\n        public string Password { get; set; }\n    }\n}\n```\nappsettings.json\n```cs\n{\n    \"SecurityKey\": \"dd%88*377f6d&f£$$£$FdddFF33fssDG^!3\"\n}\n```\n#### GitHub地址\n[网络故障报修管理系统](https://github.com/chcaty/IRS)\n","slug":"关于毕业设计的整理","published":1,"updated":"2018-06-08T06:56:57.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej247005htkuijk196kn0","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"关于毕业设计的想法\"><a href=\"#关于毕业设计的想法\" class=\"headerlink\" title=\"关于毕业设计的想法\"></a>关于毕业设计的想法</h4><p>在毕业设计的题目,我是比较纠结的,有想过利用.Net Core和Google Optimization Tools去做一个智能调度排班系统的,但后来经过深入的了解,发现智能调度排班系统并没有那么容易实现.回忆大学生涯,学生网管这个工作其实还在给我带来了不少的回忆.于是就决定开发一个网络故障报修系统.<br><a id=\"more\"></a></p><h4 id=\"采用的架构\"><a href=\"#采用的架构\" class=\"headerlink\" title=\"采用的架构\"></a>采用的架构</h4><p>一直有开发一个前后端分离的系统的想法,刚好借这个机会去尝试一下,就决定采用前后端分离的开发模式.服务端采用Asp.Net Core WebApi,前端采用Vue+Router+Element ui+axios.</p><h4 id=\"关于跨域\"><a href=\"#关于跨域\" class=\"headerlink\" title=\"关于跨域\"></a>关于跨域</h4><h5 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h5><p>既然使用了前后端分离的架构,不可避免的就是跨域访问的问题.前后端可能不在同个server上,即便是在同个server上,由于前后端分离,前后端对应的端口号也可能是不一样的,所以跨域访问是必须的.</p><h5 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><p>服务端是基于Asp.Net Core开发的WebApi,支持cors非常方便,只需要引入Microsoft.AspNetCore.Cors,问题就很轻易的解决了.<br>在Startup.cs中ConfigureServices方法中添加Cors服务,在Configure方法中使用Cors服务<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddCors(options =&gt; options.AddPolicy(<span class=\"string\">\"Domain\"</span>, builder =&gt; builder.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin().AllowCredentials()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    app.UseCors(<span class=\"string\">\"Domain\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"关于用户权限\"><a href=\"#关于用户权限\" class=\"headerlink\" title=\"关于用户权限\"></a>关于用户权限</h4><h5 id=\"问题原因-1\"><a href=\"#问题原因-1\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h5><p>在系统中涉及到不同的角色,它们之间的权限不一样,对应的菜单也就存在着差异.关于权限的部分,有着几种不同的解决方案,一种是在前端预设写死页面的权限设置,前端通过后台返回的角色信息,生成对应的菜单,另一种则是在后台动态配置权限,当用户登录时,根据角色信息,后端返回一个对应的权限表,前端通过权限表生成对应的菜单.</p><h5 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><p>在本系统中,采用的是后一种解决方案,前端中存在完整的路由表,用户在登录后,获得相应的路由信息,根据路由信息去比对完整的路由表,生成当前用户可访问的页面,通过router.addRoutes动态挂载到router上.</p><h4 id=\"关于前端\"><a href=\"#关于前端\" class=\"headerlink\" title=\"关于前端\"></a>关于前端</h4><p>系统的前端是基于<a href=\"https://github.com/PanJiaChen/vueAdmin-template\" target=\"_blank\" rel=\"noopener\">vueAdmin-template</a>进行二次开发,修改了其关于用户权限的设置</p><h4 id=\"关于服务端\"><a href=\"#关于服务端\" class=\"headerlink\" title=\"关于服务端\"></a>关于服务端</h4><p>系统的后端采用的是Asp.Net Core WebApi,MVC模式,架构分为BLL(业务层)-Dal(数据访问层),数据库访问是通过EF Core实现.使用EF Core Code Frist 创建数据库,使用Migrations完成对数据库的迁移.<a href=\"https://chcaty.github.io/2018/03/06/Net-Core-MVC-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/\" target=\"_blank\" rel=\"noopener\">.Net Core MVC三层架构框架</a>里面架构进行了详细介绍.</p><h4 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h4><p>系统中,登录成功后，服务端会返回一个 token（该token的是一个能唯一标示用户身份的一个key），之后我们将token存储在本地cookie之中，这样下次打开页面或者刷新页面的时候能记住用户的登录状态，不用再去登录页面重新登录了。</p><h5 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h5><p>LoginControllers.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.IdentityModel.Tokens;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Claims;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IConfiguration _configuration;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginController</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">         _configuration = configuration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">RequestToken</span>(<span class=\"params\">[FromBody] TokenRequest request, <span class=\"keyword\">string</span> token, <span class=\"keyword\">int</span> expires_in</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> claims = <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">             <span class=\"keyword\">new</span> Claim(ClaimTypes.Name, request.Username)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[<span class=\"string\">\"SecurityKey\"</span>]));</span><br><span class=\"line\">        <span class=\"keyword\">var</span> creds = <span class=\"keyword\">new</span> SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">            * Claims (Payload)</span></span><br><span class=\"line\"><span class=\"comment\">            Claims 部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，下面节选一些字段:</span></span><br><span class=\"line\"><span class=\"comment\">            iss: The issuer of the token，token 是给谁的</span></span><br><span class=\"line\"><span class=\"comment\">            sub: The subject of the token，token 主题</span></span><br><span class=\"line\"><span class=\"comment\">            exp: Expiration Time。 token 过期时间，Unix 时间戳格式</span></span><br><span class=\"line\"><span class=\"comment\">            iat: Issued At。 token 创建时间， Unix 时间戳格式</span></span><br><span class=\"line\"><span class=\"comment\">            jti: JWT ID。针对当前 token 的唯一标识</span></span><br><span class=\"line\"><span class=\"comment\">            除了规定的字段外，可以包含其他任何 JSON 兼容的字段。</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tokens = <span class=\"keyword\">new</span> JwtSecurityToken(</span><br><span class=\"line\">            issuer: <span class=\"string\">\"yourdomain.com\"</span>,</span><br><span class=\"line\">            audience: <span class=\"string\">\"yourdomain.com\"</span>,</span><br><span class=\"line\">            claims: claims,</span><br><span class=\"line\">            expires: DateTime.Now.AddMinutes(<span class=\"number\">10</span>),</span><br><span class=\"line\">            signingCredentials: creds);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> token = <span class=\"keyword\">new</span> JwtSecurityTokenHandler().WriteToken(tokens);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TokenRequest</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Username &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Password &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>appsettings.json<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"SecurityKey\"</span>: <span class=\"string\">\"dd%88*377f6d&amp;f£$$£$FdddFF33fssDG^!3\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GitHub地址\"><a href=\"#GitHub地址\" class=\"headerlink\" title=\"GitHub地址\"></a>GitHub地址</h4><p><a href=\"https://github.com/chcaty/IRS\" target=\"_blank\" rel=\"noopener\">网络故障报修管理系统</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"关于毕业设计的想法\"><a href=\"#关于毕业设计的想法\" class=\"headerlink\" title=\"关于毕业设计的想法\"></a>关于毕业设计的想法</h4><p>在毕业设计的题目,我是比较纠结的,有想过利用.Net Core和Google Optimization Tools去做一个智能调度排班系统的,但后来经过深入的了解,发现智能调度排班系统并没有那么容易实现.回忆大学生涯,学生网管这个工作其实还在给我带来了不少的回忆.于是就决定开发一个网络故障报修系统.<br>","more":"</p><h4 id=\"采用的架构\"><a href=\"#采用的架构\" class=\"headerlink\" title=\"采用的架构\"></a>采用的架构</h4><p>一直有开发一个前后端分离的系统的想法,刚好借这个机会去尝试一下,就决定采用前后端分离的开发模式.服务端采用Asp.Net Core WebApi,前端采用Vue+Router+Element ui+axios.</p><h4 id=\"关于跨域\"><a href=\"#关于跨域\" class=\"headerlink\" title=\"关于跨域\"></a>关于跨域</h4><h5 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h5><p>既然使用了前后端分离的架构,不可避免的就是跨域访问的问题.前后端可能不在同个server上,即便是在同个server上,由于前后端分离,前后端对应的端口号也可能是不一样的,所以跨域访问是必须的.</p><h5 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><p>服务端是基于Asp.Net Core开发的WebApi,支持cors非常方便,只需要引入Microsoft.AspNetCore.Cors,问题就很轻易的解决了.<br>在Startup.cs中ConfigureServices方法中添加Cors服务,在Configure方法中使用Cors服务<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddCors(options =&gt; options.AddPolicy(<span class=\"string\">\"Domain\"</span>, builder =&gt; builder.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin().AllowCredentials()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    app.UseCors(<span class=\"string\">\"Domain\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"关于用户权限\"><a href=\"#关于用户权限\" class=\"headerlink\" title=\"关于用户权限\"></a>关于用户权限</h4><h5 id=\"问题原因-1\"><a href=\"#问题原因-1\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h5><p>在系统中涉及到不同的角色,它们之间的权限不一样,对应的菜单也就存在着差异.关于权限的部分,有着几种不同的解决方案,一种是在前端预设写死页面的权限设置,前端通过后台返回的角色信息,生成对应的菜单,另一种则是在后台动态配置权限,当用户登录时,根据角色信息,后端返回一个对应的权限表,前端通过权限表生成对应的菜单.</p><h5 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><p>在本系统中,采用的是后一种解决方案,前端中存在完整的路由表,用户在登录后,获得相应的路由信息,根据路由信息去比对完整的路由表,生成当前用户可访问的页面,通过router.addRoutes动态挂载到router上.</p><h4 id=\"关于前端\"><a href=\"#关于前端\" class=\"headerlink\" title=\"关于前端\"></a>关于前端</h4><p>系统的前端是基于<a href=\"https://github.com/PanJiaChen/vueAdmin-template\" target=\"_blank\" rel=\"noopener\">vueAdmin-template</a>进行二次开发,修改了其关于用户权限的设置</p><h4 id=\"关于服务端\"><a href=\"#关于服务端\" class=\"headerlink\" title=\"关于服务端\"></a>关于服务端</h4><p>系统的后端采用的是Asp.Net Core WebApi,MVC模式,架构分为BLL(业务层)-Dal(数据访问层),数据库访问是通过EF Core实现.使用EF Core Code Frist 创建数据库,使用Migrations完成对数据库的迁移.<a href=\"https://chcaty.github.io/2018/03/06/Net-Core-MVC-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6/\" target=\"_blank\" rel=\"noopener\">.Net Core MVC三层架构框架</a>里面架构进行了详细介绍.</p><h4 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h4><p>系统中,登录成功后，服务端会返回一个 token（该token的是一个能唯一标示用户身份的一个key），之后我们将token存储在本地cookie之中，这样下次打开页面或者刷新页面的时候能记住用户的登录状态，不用再去登录页面重新登录了。</p><h5 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h5><p>LoginControllers.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.IdentityModel.Tokens;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Security.Claims;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IConfiguration _configuration;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginController</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">         _configuration = configuration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">RequestToken</span>(<span class=\"params\">[FromBody] TokenRequest request, <span class=\"keyword\">string</span> token, <span class=\"keyword\">int</span> expires_in</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> claims = <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">             <span class=\"keyword\">new</span> Claim(ClaimTypes.Name, request.Username)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration[<span class=\"string\">\"SecurityKey\"</span>]));</span><br><span class=\"line\">        <span class=\"keyword\">var</span> creds = <span class=\"keyword\">new</span> SigningCredentials(key, SecurityAlgorithms.HmacSha256);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">            * Claims (Payload)</span></span><br><span class=\"line\"><span class=\"comment\">            Claims 部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，下面节选一些字段:</span></span><br><span class=\"line\"><span class=\"comment\">            iss: The issuer of the token，token 是给谁的</span></span><br><span class=\"line\"><span class=\"comment\">            sub: The subject of the token，token 主题</span></span><br><span class=\"line\"><span class=\"comment\">            exp: Expiration Time。 token 过期时间，Unix 时间戳格式</span></span><br><span class=\"line\"><span class=\"comment\">            iat: Issued At。 token 创建时间， Unix 时间戳格式</span></span><br><span class=\"line\"><span class=\"comment\">            jti: JWT ID。针对当前 token 的唯一标识</span></span><br><span class=\"line\"><span class=\"comment\">            除了规定的字段外，可以包含其他任何 JSON 兼容的字段。</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tokens = <span class=\"keyword\">new</span> JwtSecurityToken(</span><br><span class=\"line\">            issuer: <span class=\"string\">\"yourdomain.com\"</span>,</span><br><span class=\"line\">            audience: <span class=\"string\">\"yourdomain.com\"</span>,</span><br><span class=\"line\">            claims: claims,</span><br><span class=\"line\">            expires: DateTime.Now.AddMinutes(<span class=\"number\">10</span>),</span><br><span class=\"line\">            signingCredentials: creds);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> token = <span class=\"keyword\">new</span> JwtSecurityTokenHandler().WriteToken(tokens);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TokenRequest</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Username &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Password &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>appsettings.json<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"SecurityKey\"</span>: <span class=\"string\">\"dd%88*377f6d&amp;f£$$£$FdddFF33fssDG^!3\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"GitHub地址\"><a href=\"#GitHub地址\" class=\"headerlink\" title=\"GitHub地址\"></a>GitHub地址</h4><p><a href=\"https://github.com/chcaty/IRS\" target=\"_blank\" rel=\"noopener\">网络故障报修管理系统</a></p><!-- rebuild by neat -->"},{"title":"去当你想当的任何人吧 : 寻找自我的魔法","date":"2020-03-10T02:44:59.000Z","_content":"\n#### 第一部分 我们都需要勇气\n\n一个人要是没有勇气,就永远无法意识到自己的能力到底有多大.一个人要是没有勇气,就永远无法挖掘出这渴望被认识的世界的丰富多彩.一个人要是没有勇气,他的人生就注定是渺小的--或许要比他所期望的还要渺小很多.\n\n虽然不同的人可能会走出截然不同的创意生活之路,并得到相去甚远的结果,但我能向大家保证:创意生活意味着拥有一种放大的人生,这是一种更广博、更欢愉、更有跨度且更有乐趣的人生.坚持不懈、持续不断地将体内埋藏着的宝藏挖掘出来,这样的生活方式本身就是一门艺术.\n\n亲爱的恐惧:我要和创意一起开启公路旅行了,我知道你会与我们同行,因为这是你的一贯作风.你认为,你在我的生命中担负着重要的职责,而且你对自己的职责一丝不苟.这些我都知道,显然,你的职责就是在我即将着手有趣的任务时给我带来巨大的恐惧,容我说一句,\"你可真是尽职尽责呀\".所以,如果你必须尽责的话,那就尽管继续做你的工作吧.但在公路旅行的途中,我也会做好我的工作,那就是全力以赴、专心致志.而且,创意也会做好它的本职工作,那就是给我提供源源不断的刺激和灵感.汽车里的空间足够容纳我们仨的,所以,请不要拘谨,同时也请你理解,在旅途中,只有我和创意才能够做决策.你是这个家庭中的一员,我明白这一点,也会尊重这个事实.因此,我绝不会把你排除在我们的任何活动之外,即便如此,我们也绝不会听取你的意见.你有你的一席之地,你也可以发表你的见解,但你没有投票表决的权力.你不能碰公路地图,不能建议我们绕路,也不能调节车内的温度.老兄,你甚至连收音机都不能碰.我亲爱且熟悉的老兄啊,最重要的是,你是绝对不能开车的.\n\n如果你不学会与恐惧并肩旅行,那么你就永远无法到达任何有趣的地方或尝试任何有趣的事情.\n\n#### 第二部分 创意大魔法\n\n创意会通过你的生理和情绪放射出常见的灵感信号(比如.双臂的凉意、后颈的毛发立起的感觉、胃部翻腾、大脑嗡嗡作响,以及坠入爱河或痴迷的感觉),它还会在路上布下种种巧合和征兆,好让你保持强烈的兴趣.你会意识到,各种各样的标志都将你引向这个创意.这个创意会让你在半夜醒来,也会让你在日常生活中为此分心.\n\n你既不是灵感的奴隶也不是它的主人,而是扮演着\"合作伙伴\"这个更有趣的角色.你用该与灵感携手共事,实现既令人兴奋又有意义的目标;你可以一辈子都去做特别酷的事情,以此度过漫长的一生;凭借你的梦想不一定能谋生,但你将认识到谋生并不是梦想的意义所在,待人生走到尽头的时候,你可以感谢创意保佑你度过了神奇、有趣、激情满满的一生.\n\n你看,无论有没有得到神助,我都会将工作进行到底.如果你想拥有完整的创意生活,那么这就是你的必经之路.我持之以恒地工作着,并且永远不忘记对这个过程表达我的感恩.无论我有没有受到神力的眷顾,能有幸接触到创意,我已心存感恩.\n\n#### 第三部分 我的人生我做主\n\n想要拥有创意生活,你不需要经过任何人的准许.\n\n我和其他人一样,都是上帝之子.我是宇宙的一个组成部分,我拥有信任我、与我一起并肩努力的隐形灵魂导师.我存在于世上,这就是我有权生活在世上的铁证.我有权拥有自己的声音和观点,我有权与创意合作.我肩负着表达艺术的使命,所以,别再束缚我了.\n\n追求独创性往往让人感觉是刻意的行为,但真实性所带来的静默却有着震撼人心的效果,每次都能让我心潮澎湃.所以,尽情地说出你的心声吧,全心全意地表达吧.将你想要分享的东西与大家分享吧.相信我,如果你表达的内容足够真实,就一定会让人感到新颖别致.\n\n抓住你的不安和恐惧,倒提着它们的脚脖子,把那种\"只有在具备某些条件(并且花费了一定钱财)后才能进行创作\"的陈旧想法甩掉吧.我要告诉你,只要你活在这个世界上,你就已经具备了创作的资质.\n\n\"一切都要靠自己\"--你越早接受这个理念,你就会越早受益.\n\n若要拥有更富创意的生活,你就必须停止抱怨,理由如下:\n\n    1. 抱怨找人厌烦\n    2. 创作有难度是理所应当的.如果创作压根没有困难、人人都能做的话,也就谈不上什么独特和趣味了\n    3. 没有谁会真心听取他人的抱怨,因为每个人都陷在自己的烦恼之中\n    4. 也是最重要的一点:你的抱怨会把灵感吓跑.\n\n#### 第四部分 坚毅,再坚毅\n\n只要坚持练习,就能在你从事的领域内获得进步,这是生活中一条简单又慷慨的定律.比如说:如果我在20多岁时每天都练习打篮球、制作生面团或是学习汽车维修,那么现在的我估计已经成为投球、制作面点或是修车的行家里手了.\n\n如果你能在任何领域孜孜不倦地耕耘10年,你便足以成为一名专家.\n\n\"任何事情都偶有糟糕的一面.\"而你必须选择解除哪种阴暗面.因此,我们的问题并不是\"你对什么感兴趣\",而是\"你的兴趣是否足以支撑你忍受其中最令人讨厌的部分\".\n\n我们必须明白,对完美主义的追求只是一种对时间的靡费,因为完美是不存在的.无论你花了多少时间试着将事情做到完美,总有人能从中挑出毛病.总有一天,你要完成你的作品,然后不假思索地把作品推给大众,就算是为了让自己用愉悦且坚定的心态继续完成任务,也是值得的.\n\n无论结果是成是败,你都要将心中的想法表达出来.无论最终的产物(也就是你的纪念品)是垃圾还是珍宝,无论评论家对你是否认可,无论人们是否理解你的作品,你都要把心里的想法表达出来.你所表达的内容不必无懈可击,你不必成为柏拉图那样的大师.你表达的创意只是一种直觉、一次尝试、一个无解之谜而已.\n\n大多数人都在为自己的事情做打算,他们没有时间去考虑你在做什么或是你做得怎样,因为它们都忙着自己的事情呢.你或许会在短时间内吸引他人的注意(比如当你的人生大放异彩、一败涂地或是经历大起大落的时候).但是,这种关注没过多久就会重新回到老地方,也就是人们仍会关注自己的事以及他们自身.\n\n由于正确的时机是无法预测的,因此我们必须把机遇最大化.要好好把握机会,不懈地为自己加油鼓劲,一次次地让自己不断往前冲......\n","source":"_posts/去当你想当的任何人吧-寻找自我的魔法.md","raw":"---\ntitle: '去当你想当的任何人吧 : 寻找自我的魔法'\ndate: 2020-03-10 10:44:59\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 自我\n---\n\n#### 第一部分 我们都需要勇气\n\n一个人要是没有勇气,就永远无法意识到自己的能力到底有多大.一个人要是没有勇气,就永远无法挖掘出这渴望被认识的世界的丰富多彩.一个人要是没有勇气,他的人生就注定是渺小的--或许要比他所期望的还要渺小很多.\n\n虽然不同的人可能会走出截然不同的创意生活之路,并得到相去甚远的结果,但我能向大家保证:创意生活意味着拥有一种放大的人生,这是一种更广博、更欢愉、更有跨度且更有乐趣的人生.坚持不懈、持续不断地将体内埋藏着的宝藏挖掘出来,这样的生活方式本身就是一门艺术.\n\n亲爱的恐惧:我要和创意一起开启公路旅行了,我知道你会与我们同行,因为这是你的一贯作风.你认为,你在我的生命中担负着重要的职责,而且你对自己的职责一丝不苟.这些我都知道,显然,你的职责就是在我即将着手有趣的任务时给我带来巨大的恐惧,容我说一句,\"你可真是尽职尽责呀\".所以,如果你必须尽责的话,那就尽管继续做你的工作吧.但在公路旅行的途中,我也会做好我的工作,那就是全力以赴、专心致志.而且,创意也会做好它的本职工作,那就是给我提供源源不断的刺激和灵感.汽车里的空间足够容纳我们仨的,所以,请不要拘谨,同时也请你理解,在旅途中,只有我和创意才能够做决策.你是这个家庭中的一员,我明白这一点,也会尊重这个事实.因此,我绝不会把你排除在我们的任何活动之外,即便如此,我们也绝不会听取你的意见.你有你的一席之地,你也可以发表你的见解,但你没有投票表决的权力.你不能碰公路地图,不能建议我们绕路,也不能调节车内的温度.老兄,你甚至连收音机都不能碰.我亲爱且熟悉的老兄啊,最重要的是,你是绝对不能开车的.\n\n如果你不学会与恐惧并肩旅行,那么你就永远无法到达任何有趣的地方或尝试任何有趣的事情.\n\n#### 第二部分 创意大魔法\n\n创意会通过你的生理和情绪放射出常见的灵感信号(比如.双臂的凉意、后颈的毛发立起的感觉、胃部翻腾、大脑嗡嗡作响,以及坠入爱河或痴迷的感觉),它还会在路上布下种种巧合和征兆,好让你保持强烈的兴趣.你会意识到,各种各样的标志都将你引向这个创意.这个创意会让你在半夜醒来,也会让你在日常生活中为此分心.\n\n你既不是灵感的奴隶也不是它的主人,而是扮演着\"合作伙伴\"这个更有趣的角色.你用该与灵感携手共事,实现既令人兴奋又有意义的目标;你可以一辈子都去做特别酷的事情,以此度过漫长的一生;凭借你的梦想不一定能谋生,但你将认识到谋生并不是梦想的意义所在,待人生走到尽头的时候,你可以感谢创意保佑你度过了神奇、有趣、激情满满的一生.\n\n你看,无论有没有得到神助,我都会将工作进行到底.如果你想拥有完整的创意生活,那么这就是你的必经之路.我持之以恒地工作着,并且永远不忘记对这个过程表达我的感恩.无论我有没有受到神力的眷顾,能有幸接触到创意,我已心存感恩.\n\n#### 第三部分 我的人生我做主\n\n想要拥有创意生活,你不需要经过任何人的准许.\n\n我和其他人一样,都是上帝之子.我是宇宙的一个组成部分,我拥有信任我、与我一起并肩努力的隐形灵魂导师.我存在于世上,这就是我有权生活在世上的铁证.我有权拥有自己的声音和观点,我有权与创意合作.我肩负着表达艺术的使命,所以,别再束缚我了.\n\n追求独创性往往让人感觉是刻意的行为,但真实性所带来的静默却有着震撼人心的效果,每次都能让我心潮澎湃.所以,尽情地说出你的心声吧,全心全意地表达吧.将你想要分享的东西与大家分享吧.相信我,如果你表达的内容足够真实,就一定会让人感到新颖别致.\n\n抓住你的不安和恐惧,倒提着它们的脚脖子,把那种\"只有在具备某些条件(并且花费了一定钱财)后才能进行创作\"的陈旧想法甩掉吧.我要告诉你,只要你活在这个世界上,你就已经具备了创作的资质.\n\n\"一切都要靠自己\"--你越早接受这个理念,你就会越早受益.\n\n若要拥有更富创意的生活,你就必须停止抱怨,理由如下:\n\n    1. 抱怨找人厌烦\n    2. 创作有难度是理所应当的.如果创作压根没有困难、人人都能做的话,也就谈不上什么独特和趣味了\n    3. 没有谁会真心听取他人的抱怨,因为每个人都陷在自己的烦恼之中\n    4. 也是最重要的一点:你的抱怨会把灵感吓跑.\n\n#### 第四部分 坚毅,再坚毅\n\n只要坚持练习,就能在你从事的领域内获得进步,这是生活中一条简单又慷慨的定律.比如说:如果我在20多岁时每天都练习打篮球、制作生面团或是学习汽车维修,那么现在的我估计已经成为投球、制作面点或是修车的行家里手了.\n\n如果你能在任何领域孜孜不倦地耕耘10年,你便足以成为一名专家.\n\n\"任何事情都偶有糟糕的一面.\"而你必须选择解除哪种阴暗面.因此,我们的问题并不是\"你对什么感兴趣\",而是\"你的兴趣是否足以支撑你忍受其中最令人讨厌的部分\".\n\n我们必须明白,对完美主义的追求只是一种对时间的靡费,因为完美是不存在的.无论你花了多少时间试着将事情做到完美,总有人能从中挑出毛病.总有一天,你要完成你的作品,然后不假思索地把作品推给大众,就算是为了让自己用愉悦且坚定的心态继续完成任务,也是值得的.\n\n无论结果是成是败,你都要将心中的想法表达出来.无论最终的产物(也就是你的纪念品)是垃圾还是珍宝,无论评论家对你是否认可,无论人们是否理解你的作品,你都要把心里的想法表达出来.你所表达的内容不必无懈可击,你不必成为柏拉图那样的大师.你表达的创意只是一种直觉、一次尝试、一个无解之谜而已.\n\n大多数人都在为自己的事情做打算,他们没有时间去考虑你在做什么或是你做得怎样,因为它们都忙着自己的事情呢.你或许会在短时间内吸引他人的注意(比如当你的人生大放异彩、一败涂地或是经历大起大落的时候).但是,这种关注没过多久就会重新回到老地方,也就是人们仍会关注自己的事以及他们自身.\n\n由于正确的时机是无法预测的,因此我们必须把机遇最大化.要好好把握机会,不懈地为自己加油鼓劲,一次次地让自己不断往前冲......\n","slug":"去当你想当的任何人吧-寻找自我的魔法","published":1,"updated":"2020-03-11T13:20:49.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej248005ktkuirx6si21a","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"第一部分-我们都需要勇气\"><a href=\"#第一部分-我们都需要勇气\" class=\"headerlink\" title=\"第一部分 我们都需要勇气\"></a>第一部分 我们都需要勇气</h4><p>一个人要是没有勇气,就永远无法意识到自己的能力到底有多大.一个人要是没有勇气,就永远无法挖掘出这渴望被认识的世界的丰富多彩.一个人要是没有勇气,他的人生就注定是渺小的–或许要比他所期望的还要渺小很多.</p><p>虽然不同的人可能会走出截然不同的创意生活之路,并得到相去甚远的结果,但我能向大家保证:创意生活意味着拥有一种放大的人生,这是一种更广博、更欢愉、更有跨度且更有乐趣的人生.坚持不懈、持续不断地将体内埋藏着的宝藏挖掘出来,这样的生活方式本身就是一门艺术.</p><p>亲爱的恐惧:我要和创意一起开启公路旅行了,我知道你会与我们同行,因为这是你的一贯作风.你认为,你在我的生命中担负着重要的职责,而且你对自己的职责一丝不苟.这些我都知道,显然,你的职责就是在我即将着手有趣的任务时给我带来巨大的恐惧,容我说一句,”你可真是尽职尽责呀”.所以,如果你必须尽责的话,那就尽管继续做你的工作吧.但在公路旅行的途中,我也会做好我的工作,那就是全力以赴、专心致志.而且,创意也会做好它的本职工作,那就是给我提供源源不断的刺激和灵感.汽车里的空间足够容纳我们仨的,所以,请不要拘谨,同时也请你理解,在旅途中,只有我和创意才能够做决策.你是这个家庭中的一员,我明白这一点,也会尊重这个事实.因此,我绝不会把你排除在我们的任何活动之外,即便如此,我们也绝不会听取你的意见.你有你的一席之地,你也可以发表你的见解,但你没有投票表决的权力.你不能碰公路地图,不能建议我们绕路,也不能调节车内的温度.老兄,你甚至连收音机都不能碰.我亲爱且熟悉的老兄啊,最重要的是,你是绝对不能开车的.</p><p>如果你不学会与恐惧并肩旅行,那么你就永远无法到达任何有趣的地方或尝试任何有趣的事情.</p><h4 id=\"第二部分-创意大魔法\"><a href=\"#第二部分-创意大魔法\" class=\"headerlink\" title=\"第二部分 创意大魔法\"></a>第二部分 创意大魔法</h4><p>创意会通过你的生理和情绪放射出常见的灵感信号(比如.双臂的凉意、后颈的毛发立起的感觉、胃部翻腾、大脑嗡嗡作响,以及坠入爱河或痴迷的感觉),它还会在路上布下种种巧合和征兆,好让你保持强烈的兴趣.你会意识到,各种各样的标志都将你引向这个创意.这个创意会让你在半夜醒来,也会让你在日常生活中为此分心.</p><p>你既不是灵感的奴隶也不是它的主人,而是扮演着”合作伙伴”这个更有趣的角色.你用该与灵感携手共事,实现既令人兴奋又有意义的目标;你可以一辈子都去做特别酷的事情,以此度过漫长的一生;凭借你的梦想不一定能谋生,但你将认识到谋生并不是梦想的意义所在,待人生走到尽头的时候,你可以感谢创意保佑你度过了神奇、有趣、激情满满的一生.</p><p>你看,无论有没有得到神助,我都会将工作进行到底.如果你想拥有完整的创意生活,那么这就是你的必经之路.我持之以恒地工作着,并且永远不忘记对这个过程表达我的感恩.无论我有没有受到神力的眷顾,能有幸接触到创意,我已心存感恩.</p><h4 id=\"第三部分-我的人生我做主\"><a href=\"#第三部分-我的人生我做主\" class=\"headerlink\" title=\"第三部分 我的人生我做主\"></a>第三部分 我的人生我做主</h4><p>想要拥有创意生活,你不需要经过任何人的准许.</p><p>我和其他人一样,都是上帝之子.我是宇宙的一个组成部分,我拥有信任我、与我一起并肩努力的隐形灵魂导师.我存在于世上,这就是我有权生活在世上的铁证.我有权拥有自己的声音和观点,我有权与创意合作.我肩负着表达艺术的使命,所以,别再束缚我了.</p><p>追求独创性往往让人感觉是刻意的行为,但真实性所带来的静默却有着震撼人心的效果,每次都能让我心潮澎湃.所以,尽情地说出你的心声吧,全心全意地表达吧.将你想要分享的东西与大家分享吧.相信我,如果你表达的内容足够真实,就一定会让人感到新颖别致.</p><p>抓住你的不安和恐惧,倒提着它们的脚脖子,把那种”只有在具备某些条件(并且花费了一定钱财)后才能进行创作”的陈旧想法甩掉吧.我要告诉你,只要你活在这个世界上,你就已经具备了创作的资质.</p><p>“一切都要靠自己”–你越早接受这个理念,你就会越早受益.</p><p>若要拥有更富创意的生活,你就必须停止抱怨,理由如下:</p><pre><code>1. 抱怨找人厌烦\n2. 创作有难度是理所应当的.如果创作压根没有困难、人人都能做的话,也就谈不上什么独特和趣味了\n3. 没有谁会真心听取他人的抱怨,因为每个人都陷在自己的烦恼之中\n4. 也是最重要的一点:你的抱怨会把灵感吓跑.\n</code></pre><h4 id=\"第四部分-坚毅-再坚毅\"><a href=\"#第四部分-坚毅-再坚毅\" class=\"headerlink\" title=\"第四部分 坚毅,再坚毅\"></a>第四部分 坚毅,再坚毅</h4><p>只要坚持练习,就能在你从事的领域内获得进步,这是生活中一条简单又慷慨的定律.比如说:如果我在20多岁时每天都练习打篮球、制作生面团或是学习汽车维修,那么现在的我估计已经成为投球、制作面点或是修车的行家里手了.</p><p>如果你能在任何领域孜孜不倦地耕耘10年,你便足以成为一名专家.</p><p>“任何事情都偶有糟糕的一面.”而你必须选择解除哪种阴暗面.因此,我们的问题并不是”你对什么感兴趣”,而是”你的兴趣是否足以支撑你忍受其中最令人讨厌的部分”.</p><p>我们必须明白,对完美主义的追求只是一种对时间的靡费,因为完美是不存在的.无论你花了多少时间试着将事情做到完美,总有人能从中挑出毛病.总有一天,你要完成你的作品,然后不假思索地把作品推给大众,就算是为了让自己用愉悦且坚定的心态继续完成任务,也是值得的.</p><p>无论结果是成是败,你都要将心中的想法表达出来.无论最终的产物(也就是你的纪念品)是垃圾还是珍宝,无论评论家对你是否认可,无论人们是否理解你的作品,你都要把心里的想法表达出来.你所表达的内容不必无懈可击,你不必成为柏拉图那样的大师.你表达的创意只是一种直觉、一次尝试、一个无解之谜而已.</p><p>大多数人都在为自己的事情做打算,他们没有时间去考虑你在做什么或是你做得怎样,因为它们都忙着自己的事情呢.你或许会在短时间内吸引他人的注意(比如当你的人生大放异彩、一败涂地或是经历大起大落的时候).但是,这种关注没过多久就会重新回到老地方,也就是人们仍会关注自己的事以及他们自身.</p><p>由于正确的时机是无法预测的,因此我们必须把机遇最大化.要好好把握机会,不懈地为自己加油鼓劲,一次次地让自己不断往前冲……</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"第一部分-我们都需要勇气\"><a href=\"#第一部分-我们都需要勇气\" class=\"headerlink\" title=\"第一部分 我们都需要勇气\"></a>第一部分 我们都需要勇气</h4><p>一个人要是没有勇气,就永远无法意识到自己的能力到底有多大.一个人要是没有勇气,就永远无法挖掘出这渴望被认识的世界的丰富多彩.一个人要是没有勇气,他的人生就注定是渺小的–或许要比他所期望的还要渺小很多.</p><p>虽然不同的人可能会走出截然不同的创意生活之路,并得到相去甚远的结果,但我能向大家保证:创意生活意味着拥有一种放大的人生,这是一种更广博、更欢愉、更有跨度且更有乐趣的人生.坚持不懈、持续不断地将体内埋藏着的宝藏挖掘出来,这样的生活方式本身就是一门艺术.</p><p>亲爱的恐惧:我要和创意一起开启公路旅行了,我知道你会与我们同行,因为这是你的一贯作风.你认为,你在我的生命中担负着重要的职责,而且你对自己的职责一丝不苟.这些我都知道,显然,你的职责就是在我即将着手有趣的任务时给我带来巨大的恐惧,容我说一句,”你可真是尽职尽责呀”.所以,如果你必须尽责的话,那就尽管继续做你的工作吧.但在公路旅行的途中,我也会做好我的工作,那就是全力以赴、专心致志.而且,创意也会做好它的本职工作,那就是给我提供源源不断的刺激和灵感.汽车里的空间足够容纳我们仨的,所以,请不要拘谨,同时也请你理解,在旅途中,只有我和创意才能够做决策.你是这个家庭中的一员,我明白这一点,也会尊重这个事实.因此,我绝不会把你排除在我们的任何活动之外,即便如此,我们也绝不会听取你的意见.你有你的一席之地,你也可以发表你的见解,但你没有投票表决的权力.你不能碰公路地图,不能建议我们绕路,也不能调节车内的温度.老兄,你甚至连收音机都不能碰.我亲爱且熟悉的老兄啊,最重要的是,你是绝对不能开车的.</p><p>如果你不学会与恐惧并肩旅行,那么你就永远无法到达任何有趣的地方或尝试任何有趣的事情.</p><h4 id=\"第二部分-创意大魔法\"><a href=\"#第二部分-创意大魔法\" class=\"headerlink\" title=\"第二部分 创意大魔法\"></a>第二部分 创意大魔法</h4><p>创意会通过你的生理和情绪放射出常见的灵感信号(比如.双臂的凉意、后颈的毛发立起的感觉、胃部翻腾、大脑嗡嗡作响,以及坠入爱河或痴迷的感觉),它还会在路上布下种种巧合和征兆,好让你保持强烈的兴趣.你会意识到,各种各样的标志都将你引向这个创意.这个创意会让你在半夜醒来,也会让你在日常生活中为此分心.</p><p>你既不是灵感的奴隶也不是它的主人,而是扮演着”合作伙伴”这个更有趣的角色.你用该与灵感携手共事,实现既令人兴奋又有意义的目标;你可以一辈子都去做特别酷的事情,以此度过漫长的一生;凭借你的梦想不一定能谋生,但你将认识到谋生并不是梦想的意义所在,待人生走到尽头的时候,你可以感谢创意保佑你度过了神奇、有趣、激情满满的一生.</p><p>你看,无论有没有得到神助,我都会将工作进行到底.如果你想拥有完整的创意生活,那么这就是你的必经之路.我持之以恒地工作着,并且永远不忘记对这个过程表达我的感恩.无论我有没有受到神力的眷顾,能有幸接触到创意,我已心存感恩.</p><h4 id=\"第三部分-我的人生我做主\"><a href=\"#第三部分-我的人生我做主\" class=\"headerlink\" title=\"第三部分 我的人生我做主\"></a>第三部分 我的人生我做主</h4><p>想要拥有创意生活,你不需要经过任何人的准许.</p><p>我和其他人一样,都是上帝之子.我是宇宙的一个组成部分,我拥有信任我、与我一起并肩努力的隐形灵魂导师.我存在于世上,这就是我有权生活在世上的铁证.我有权拥有自己的声音和观点,我有权与创意合作.我肩负着表达艺术的使命,所以,别再束缚我了.</p><p>追求独创性往往让人感觉是刻意的行为,但真实性所带来的静默却有着震撼人心的效果,每次都能让我心潮澎湃.所以,尽情地说出你的心声吧,全心全意地表达吧.将你想要分享的东西与大家分享吧.相信我,如果你表达的内容足够真实,就一定会让人感到新颖别致.</p><p>抓住你的不安和恐惧,倒提着它们的脚脖子,把那种”只有在具备某些条件(并且花费了一定钱财)后才能进行创作”的陈旧想法甩掉吧.我要告诉你,只要你活在这个世界上,你就已经具备了创作的资质.</p><p>“一切都要靠自己”–你越早接受这个理念,你就会越早受益.</p><p>若要拥有更富创意的生活,你就必须停止抱怨,理由如下:</p><pre><code>1. 抱怨找人厌烦\n2. 创作有难度是理所应当的.如果创作压根没有困难、人人都能做的话,也就谈不上什么独特和趣味了\n3. 没有谁会真心听取他人的抱怨,因为每个人都陷在自己的烦恼之中\n4. 也是最重要的一点:你的抱怨会把灵感吓跑.\n</code></pre><h4 id=\"第四部分-坚毅-再坚毅\"><a href=\"#第四部分-坚毅-再坚毅\" class=\"headerlink\" title=\"第四部分 坚毅,再坚毅\"></a>第四部分 坚毅,再坚毅</h4><p>只要坚持练习,就能在你从事的领域内获得进步,这是生活中一条简单又慷慨的定律.比如说:如果我在20多岁时每天都练习打篮球、制作生面团或是学习汽车维修,那么现在的我估计已经成为投球、制作面点或是修车的行家里手了.</p><p>如果你能在任何领域孜孜不倦地耕耘10年,你便足以成为一名专家.</p><p>“任何事情都偶有糟糕的一面.”而你必须选择解除哪种阴暗面.因此,我们的问题并不是”你对什么感兴趣”,而是”你的兴趣是否足以支撑你忍受其中最令人讨厌的部分”.</p><p>我们必须明白,对完美主义的追求只是一种对时间的靡费,因为完美是不存在的.无论你花了多少时间试着将事情做到完美,总有人能从中挑出毛病.总有一天,你要完成你的作品,然后不假思索地把作品推给大众,就算是为了让自己用愉悦且坚定的心态继续完成任务,也是值得的.</p><p>无论结果是成是败,你都要将心中的想法表达出来.无论最终的产物(也就是你的纪念品)是垃圾还是珍宝,无论评论家对你是否认可,无论人们是否理解你的作品,你都要把心里的想法表达出来.你所表达的内容不必无懈可击,你不必成为柏拉图那样的大师.你表达的创意只是一种直觉、一次尝试、一个无解之谜而已.</p><p>大多数人都在为自己的事情做打算,他们没有时间去考虑你在做什么或是你做得怎样,因为它们都忙着自己的事情呢.你或许会在短时间内吸引他人的注意(比如当你的人生大放异彩、一败涂地或是经历大起大落的时候).但是,这种关注没过多久就会重新回到老地方,也就是人们仍会关注自己的事以及他们自身.</p><p>由于正确的时机是无法预测的,因此我们必须把机遇最大化.要好好把握机会,不懈地为自己加油鼓劲,一次次地让自己不断往前冲……</p><!-- rebuild by neat -->"},{"title":"关于选择聚会地点的软件","date":"2019-03-17T13:59:59.000Z","_content":"#### 关于设计选择聚会地点软件的想法\n前几天,偶然听小伙伴提出这个想法,感觉很有意思就打算研究一下.也可以顺便练习一下.\n<!--more-->\n\n#### 第一版百度地图API+经纬度计算出中心点周边的地铁站\n* 先申请百度地图 API的KEY\n* 思路,获取输入的地铁站的经纬度,然后计算出多个地铁站的中心点的经纬度,获取附近最近的地铁站\n* 代码如下\nindex.html\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\" />\n    <style type=\"text/css\">\n        body, html{width: 100%;height: 100%;margin:0;font-family:\"微软雅黑\";font-size:14px;}\n        #l-map{height:400px;width:100%;}\n        #r-result{width:100%;}\n    </style>\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=你的ak\"></script>\n    <title>关键字输入</title>\n</head>\n<body>\n    <div id=\"l-map\"></div>\n    <div id=\"r-result\">请输入:<input type=\"text\" id=\"suggestId\" size=\"20\" value=\"\" style=\"width:150px;\" /></div>\n    <div id=\"searchResultPanel\" style=\"border:1px solid #C0C0C0;width:150px;height:auto; display:none;\"></div>\n    <button type=\"button\" id=\"calc\">计算中间点</button>\n    <table id=\"tblGrid\" style=\"table-layout:fixed\">\n        <tr>\n         <td width=\"250px\">地址</td>\n         <td width=\"150px\">经度</td>\n         <td width=\"150px\">纬度</td>\n        </tr>\n    </table>\n</body>\n</html>\n<script type=\"text/javascript\">\n    // 百度地图API功能\n    function G(id) {\n        return document.getElementById(id);\n    }\n \n    var map = new BMap.Map(\"l-map\"); \n    // 百度坐标系坐标(地图中需要使用这个)\n    var bPoints = new Array();\n    map.centerAndZoom(\"广州\",12);                   // 初始化地图,设置城市和地图级别。\n    map.enableScrollWheelZoom(true);\n \n    var ac = new BMap.Autocomplete(    //建立一个自动完成的对象\n        {\"input\" : \"suggestId\"\n        ,\"location\" : map\n    });\n \n    ac.addEventListener(\"onhighlight\", function(e) {  //鼠标放在下拉列表上的事件\n    var str = \"\";\n        var _value = e.fromitem.value;\n        var value = \"\";\n        if (e.fromitem.index > -1) {\n            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        }    \n        str = \"FromItem<br />index = \" + e.fromitem.index + \"<br />value = \" + value;\n        \n        value = \"\";\n        if (e.toitem.index > -1) {\n            _value = e.toitem.value;\n            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        }    \n        str += \"<br />ToItem<br />index = \" + e.toitem.index + \"<br />value = \" + value;\n        //alert(\"onhighlight\");\n        G(\"searchResultPanel\").innerHTML = str;\n    });\n \n    var myValue;\n    ac.addEventListener(\"onconfirm\", function(e) {    //鼠标点击下拉列表后的事件\n        var _value = e.item.value;\n        myValue = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        G(\"searchResultPanel\").innerHTML =\"onconfirm<br />index = \" + e.item.index + \"<br />myValue = \" + myValue;  \n        //alert(\"onconfirm\");      \n        setPlace();\n    });\n \n    function setPlace(){\n        //map.clearOverlays();    //清除地图上所有覆盖物\n        function showInfo(e) {\n            alert(e.point.lng+\",\"+e.point.lat);\n        }\n        function myFun(){\n            if(confirm('确认要将该地点纳入路线图吗？')) {\n                var current = local.getResults().getPoi(0);\n                console.log(current);\n                var point = {};\n                if (typeof(current) == \"object\" && current.title !=\"\") {\n                    // point.name = current.title;\n                    point.name = myValue;\n                } \n                var pp = current.point;    //获取第一个智能搜索的结果\n                console.log(pp);\n                point.lng = pp.lng;\n                point.lat = pp.lat;\n                console.log(point);\n                bPoints.push(point); // 添加到百度坐标数组 用于自动调整缩放级别\n \n                //如果选中了，可以考虑将此地址以及坐标保存起来。\n                var newRow = document.all(\"tblGrid\").insertRow();\n                //得到表的对象并插入一行，下面是插入了行以后，填充相应的列节点，如下面所示\n                var oCell = newRow.insertCell();//插入列的节点\n                oCell.innerHTML = point.name;//列里面填充的值，innerHtml值列内的所有元素    \n                oCell = newRow.insertCell();\n                oCell.innerHTML = point.lng; \n                oCell = newRow.insertCell();\n                oCell.innerHTML = point.lat;\n\n                map.centerAndZoom(pp, 18);\n                map.addOverlay(new BMap.Marker(pp));    //添加标注\n                //添加文本标注\n                var opts = {position:pp,offset:new BMap.Size(10,-30)};\n                var label = new BMap.Label(current.title, opts);\n                label.setStyle({\n                    color:\"red\",\n                    fontSize:\"12px\",\n                    height:\"20px\",\n                    lineheight:\"20px\",\n                    fontFamily:\"微软雅黑\"\n                });\n                map.addOverlay(label);\n                // map.addEventListener('click',showInfo);\n            }\n        }\n        var local = new BMap.LocalSearch(map, { //智能搜索\n          onSearchComplete: myFun\n        });\n        local.search(myValue);\n    }\n\n    // 根据点的数组自动调整缩放级别\n    function setZoom(bPoints) {\n        var view = map.getViewport(eval(bPoints));\n        var mapZoom = view.zoom;\n        var centerPoint = view.center;\n        map.centerAndZoom(centerPoint, mapZoom);\n    }\n\n    document.getElementById('calc').onclick = function () {  \n        var tab=document.getElementById(\"tblGrid\");\n        var rows=tab.rows;\n        var totallng =0,totallat=0;\n        for(var i=1;i<rows.length;i++)//遍历表格的行\n        { \n            var a =rows[i].cells[1].innerHTML;\n            totallng = Number(totallng) + Number(rows[i].cells[1].innerHTML);\n            totallat = Number(totallat) + Number(rows[i].cells[2].innerHTML);\n        }\n        var point = new BMap.Point(Number(totallng) / Number(Number(rows.length)-1),Number(totallat) / Number(Number(rows.length)-1));\n        var marker = new BMap.Marker(point);  // 创建标注\n\t\tmap.addOverlay(marker);              // 将标注添加到地图中\n\t\tmap.panTo(point);\n        var local = new BMap.LocalSearch(map, {\n            renderOptions:{map: map}\n        });\n        local.search(\"地铁站\");\n    }  \n\n    setTimeout(function () {\n        setZoom(bPoints);\n    }, 1000)\n</script>\n```\n\n#### 第二版 广州地铁API\n* 通过调用API接口获得全部站点数据\n 1. 接口\n```\nhttps://app.gzmtr.cn:7400//line/qryStages?callback=&_=\n```\n 2. 数据格式如下\n```json\n{\n    \"stateId\": 0,\n    \"data\": [\n        {\n            \"number\": 1,\n            \"lineRelateId\": \"001\",\n            \"lineNo\": \"1\",\n            \"lineCn\": \"一号线\",\n            \"lineEn\": \"Line 1\",\n            \"color\": \"edcf3dff\",\n            \"averageIntervalTime\": 450,\n            \"lastModifyTime\": 1482485159,\n            \"version\": 22646,\n            \"status\": 1,\n            \"lineOrder\": 1,\n            \"stations\": [\n                {\n                    \"lineNo\": \"1\",\n                    \"stationId\": 1,\n                    \"stationRelateId\": \"00101\",\n                    \"stageseq\": \"01\",\n                    \"nameCn\": \"西塱\",\n                    \"nameEn\": \"Xilang\"\n                },\n                {\n                    \"lineNo\": \"1\",\n                    \"stationId\": 3,\n                    \"stationRelateId\": \"00102\",\n                    \"stageseq\": \"02\",\n                    \"nameCn\": \"坑口\",\n                    \"nameEn\": \"Kengkou\"\n                }\n            ]\n        }\n    ]\n}\n```\n* 通过调用接口获得两个站点之间的通勤时间,费用\n 1. 接口地址\n```\nhttp://cs.gzmtr.com/base/doSearchPathLine.do?callback=&startStation=%25E4%25BD%2593%25E8%2582%25B2%25E4%25B8%25AD%25E5%25BF%2583&endStation=%25E9%25A6%2599%25E9%259B%25AA&startId=&endId=&_=\n// startStation为起始站点的两次uri编码\n// endStation为终点站点的两次uri编码\n```\n  2. 数据类型如下\n```json\n{\n    \"count\": 15,\n    \"spendTime\": \"52\",\n    \"lines\": [\n        {\n            \"lineName\": \"一号线\",\n            \"stationName\": \"体育中心\",\n            \"stationCode\": \"115\"\n        },\n        {\n            \"lineName\": \"三北线\",\n            \"stationName\": \"广州东站\",\n            \"stationCode\": \"318\"\n        },\n        {\n            \"lineName\": \"六号线\",\n            \"stationName\": \"燕塘\",\n            \"stationCode\": \"620\"\n        },\n        {\n            \"stationName\": \"香雪\",\n            \"stationCode\": \"632\"\n        }\n    ],\n    \"price\": 7,\n    \"stations\": [\n        {\n            \"endtime\": \"23:22\",\n            \"linecode\": \"1\",\n            \"starttime\": \"6:22\",\n            \"endstage\": \"广州东站\",\n            \"lineid\": \"1\",\n            \"startstage\": \"体育中心\",\n            \"sgk\": \"101\"\n        },\n        {\n            \"endtime\": \"23:32\",\n            \"linecode\": \"1\",\n            \"starttime\": \"6:12\",\n            \"endstage\": \"西朗\",\n            \"lineid\": \"1\",\n            \"startstage\": \"体育中心\",\n            \"sgk\": \"101\"\n        }\n    ]\n}\n```\n* 通过穷举输入站点与其他站点的计算,获取多个站点到某一站点的时间相近或是费用最近的","source":"_posts/关于选择聚会地点的软件.md","raw":"---\ntitle: 关于选择聚会地点的软件\ndate: 2019-03-17 21:59:59\ncategories: API\ntags:\n - API\n---\n#### 关于设计选择聚会地点软件的想法\n前几天,偶然听小伙伴提出这个想法,感觉很有意思就打算研究一下.也可以顺便练习一下.\n<!--more-->\n\n#### 第一版百度地图API+经纬度计算出中心点周边的地铁站\n* 先申请百度地图 API的KEY\n* 思路,获取输入的地铁站的经纬度,然后计算出多个地铁站的中心点的经纬度,获取附近最近的地铁站\n* 代码如下\nindex.html\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\" />\n    <style type=\"text/css\">\n        body, html{width: 100%;height: 100%;margin:0;font-family:\"微软雅黑\";font-size:14px;}\n        #l-map{height:400px;width:100%;}\n        #r-result{width:100%;}\n    </style>\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=你的ak\"></script>\n    <title>关键字输入</title>\n</head>\n<body>\n    <div id=\"l-map\"></div>\n    <div id=\"r-result\">请输入:<input type=\"text\" id=\"suggestId\" size=\"20\" value=\"\" style=\"width:150px;\" /></div>\n    <div id=\"searchResultPanel\" style=\"border:1px solid #C0C0C0;width:150px;height:auto; display:none;\"></div>\n    <button type=\"button\" id=\"calc\">计算中间点</button>\n    <table id=\"tblGrid\" style=\"table-layout:fixed\">\n        <tr>\n         <td width=\"250px\">地址</td>\n         <td width=\"150px\">经度</td>\n         <td width=\"150px\">纬度</td>\n        </tr>\n    </table>\n</body>\n</html>\n<script type=\"text/javascript\">\n    // 百度地图API功能\n    function G(id) {\n        return document.getElementById(id);\n    }\n \n    var map = new BMap.Map(\"l-map\"); \n    // 百度坐标系坐标(地图中需要使用这个)\n    var bPoints = new Array();\n    map.centerAndZoom(\"广州\",12);                   // 初始化地图,设置城市和地图级别。\n    map.enableScrollWheelZoom(true);\n \n    var ac = new BMap.Autocomplete(    //建立一个自动完成的对象\n        {\"input\" : \"suggestId\"\n        ,\"location\" : map\n    });\n \n    ac.addEventListener(\"onhighlight\", function(e) {  //鼠标放在下拉列表上的事件\n    var str = \"\";\n        var _value = e.fromitem.value;\n        var value = \"\";\n        if (e.fromitem.index > -1) {\n            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        }    \n        str = \"FromItem<br />index = \" + e.fromitem.index + \"<br />value = \" + value;\n        \n        value = \"\";\n        if (e.toitem.index > -1) {\n            _value = e.toitem.value;\n            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        }    \n        str += \"<br />ToItem<br />index = \" + e.toitem.index + \"<br />value = \" + value;\n        //alert(\"onhighlight\");\n        G(\"searchResultPanel\").innerHTML = str;\n    });\n \n    var myValue;\n    ac.addEventListener(\"onconfirm\", function(e) {    //鼠标点击下拉列表后的事件\n        var _value = e.item.value;\n        myValue = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;\n        G(\"searchResultPanel\").innerHTML =\"onconfirm<br />index = \" + e.item.index + \"<br />myValue = \" + myValue;  \n        //alert(\"onconfirm\");      \n        setPlace();\n    });\n \n    function setPlace(){\n        //map.clearOverlays();    //清除地图上所有覆盖物\n        function showInfo(e) {\n            alert(e.point.lng+\",\"+e.point.lat);\n        }\n        function myFun(){\n            if(confirm('确认要将该地点纳入路线图吗？')) {\n                var current = local.getResults().getPoi(0);\n                console.log(current);\n                var point = {};\n                if (typeof(current) == \"object\" && current.title !=\"\") {\n                    // point.name = current.title;\n                    point.name = myValue;\n                } \n                var pp = current.point;    //获取第一个智能搜索的结果\n                console.log(pp);\n                point.lng = pp.lng;\n                point.lat = pp.lat;\n                console.log(point);\n                bPoints.push(point); // 添加到百度坐标数组 用于自动调整缩放级别\n \n                //如果选中了，可以考虑将此地址以及坐标保存起来。\n                var newRow = document.all(\"tblGrid\").insertRow();\n                //得到表的对象并插入一行，下面是插入了行以后，填充相应的列节点，如下面所示\n                var oCell = newRow.insertCell();//插入列的节点\n                oCell.innerHTML = point.name;//列里面填充的值，innerHtml值列内的所有元素    \n                oCell = newRow.insertCell();\n                oCell.innerHTML = point.lng; \n                oCell = newRow.insertCell();\n                oCell.innerHTML = point.lat;\n\n                map.centerAndZoom(pp, 18);\n                map.addOverlay(new BMap.Marker(pp));    //添加标注\n                //添加文本标注\n                var opts = {position:pp,offset:new BMap.Size(10,-30)};\n                var label = new BMap.Label(current.title, opts);\n                label.setStyle({\n                    color:\"red\",\n                    fontSize:\"12px\",\n                    height:\"20px\",\n                    lineheight:\"20px\",\n                    fontFamily:\"微软雅黑\"\n                });\n                map.addOverlay(label);\n                // map.addEventListener('click',showInfo);\n            }\n        }\n        var local = new BMap.LocalSearch(map, { //智能搜索\n          onSearchComplete: myFun\n        });\n        local.search(myValue);\n    }\n\n    // 根据点的数组自动调整缩放级别\n    function setZoom(bPoints) {\n        var view = map.getViewport(eval(bPoints));\n        var mapZoom = view.zoom;\n        var centerPoint = view.center;\n        map.centerAndZoom(centerPoint, mapZoom);\n    }\n\n    document.getElementById('calc').onclick = function () {  \n        var tab=document.getElementById(\"tblGrid\");\n        var rows=tab.rows;\n        var totallng =0,totallat=0;\n        for(var i=1;i<rows.length;i++)//遍历表格的行\n        { \n            var a =rows[i].cells[1].innerHTML;\n            totallng = Number(totallng) + Number(rows[i].cells[1].innerHTML);\n            totallat = Number(totallat) + Number(rows[i].cells[2].innerHTML);\n        }\n        var point = new BMap.Point(Number(totallng) / Number(Number(rows.length)-1),Number(totallat) / Number(Number(rows.length)-1));\n        var marker = new BMap.Marker(point);  // 创建标注\n\t\tmap.addOverlay(marker);              // 将标注添加到地图中\n\t\tmap.panTo(point);\n        var local = new BMap.LocalSearch(map, {\n            renderOptions:{map: map}\n        });\n        local.search(\"地铁站\");\n    }  \n\n    setTimeout(function () {\n        setZoom(bPoints);\n    }, 1000)\n</script>\n```\n\n#### 第二版 广州地铁API\n* 通过调用API接口获得全部站点数据\n 1. 接口\n```\nhttps://app.gzmtr.cn:7400//line/qryStages?callback=&_=\n```\n 2. 数据格式如下\n```json\n{\n    \"stateId\": 0,\n    \"data\": [\n        {\n            \"number\": 1,\n            \"lineRelateId\": \"001\",\n            \"lineNo\": \"1\",\n            \"lineCn\": \"一号线\",\n            \"lineEn\": \"Line 1\",\n            \"color\": \"edcf3dff\",\n            \"averageIntervalTime\": 450,\n            \"lastModifyTime\": 1482485159,\n            \"version\": 22646,\n            \"status\": 1,\n            \"lineOrder\": 1,\n            \"stations\": [\n                {\n                    \"lineNo\": \"1\",\n                    \"stationId\": 1,\n                    \"stationRelateId\": \"00101\",\n                    \"stageseq\": \"01\",\n                    \"nameCn\": \"西塱\",\n                    \"nameEn\": \"Xilang\"\n                },\n                {\n                    \"lineNo\": \"1\",\n                    \"stationId\": 3,\n                    \"stationRelateId\": \"00102\",\n                    \"stageseq\": \"02\",\n                    \"nameCn\": \"坑口\",\n                    \"nameEn\": \"Kengkou\"\n                }\n            ]\n        }\n    ]\n}\n```\n* 通过调用接口获得两个站点之间的通勤时间,费用\n 1. 接口地址\n```\nhttp://cs.gzmtr.com/base/doSearchPathLine.do?callback=&startStation=%25E4%25BD%2593%25E8%2582%25B2%25E4%25B8%25AD%25E5%25BF%2583&endStation=%25E9%25A6%2599%25E9%259B%25AA&startId=&endId=&_=\n// startStation为起始站点的两次uri编码\n// endStation为终点站点的两次uri编码\n```\n  2. 数据类型如下\n```json\n{\n    \"count\": 15,\n    \"spendTime\": \"52\",\n    \"lines\": [\n        {\n            \"lineName\": \"一号线\",\n            \"stationName\": \"体育中心\",\n            \"stationCode\": \"115\"\n        },\n        {\n            \"lineName\": \"三北线\",\n            \"stationName\": \"广州东站\",\n            \"stationCode\": \"318\"\n        },\n        {\n            \"lineName\": \"六号线\",\n            \"stationName\": \"燕塘\",\n            \"stationCode\": \"620\"\n        },\n        {\n            \"stationName\": \"香雪\",\n            \"stationCode\": \"632\"\n        }\n    ],\n    \"price\": 7,\n    \"stations\": [\n        {\n            \"endtime\": \"23:22\",\n            \"linecode\": \"1\",\n            \"starttime\": \"6:22\",\n            \"endstage\": \"广州东站\",\n            \"lineid\": \"1\",\n            \"startstage\": \"体育中心\",\n            \"sgk\": \"101\"\n        },\n        {\n            \"endtime\": \"23:32\",\n            \"linecode\": \"1\",\n            \"starttime\": \"6:12\",\n            \"endstage\": \"西朗\",\n            \"lineid\": \"1\",\n            \"startstage\": \"体育中心\",\n            \"sgk\": \"101\"\n        }\n    ]\n}\n```\n* 通过穷举输入站点与其他站点的计算,获取多个站点到某一站点的时间相近或是费用最近的","slug":"关于选择聚会地点的软件","published":1,"updated":"2019-03-17T15:26:49.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24a005ntkui0jcs8v8n","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"关于设计选择聚会地点软件的想法\"><a href=\"#关于设计选择聚会地点软件的想法\" class=\"headerlink\" title=\"关于设计选择聚会地点软件的想法\"></a>关于设计选择聚会地点软件的想法</h4><p>前几天,偶然听小伙伴提出这个想法,感觉很有意思就打算研究一下.也可以顺便练习一下.<br><a id=\"more\"></a></p><h4 id=\"第一版百度地图API-经纬度计算出中心点周边的地铁站\"><a href=\"#第一版百度地图API-经纬度计算出中心点周边的地铁站\" class=\"headerlink\" title=\"第一版百度地图API+经纬度计算出中心点周边的地铁站\"></a>第一版百度地图API+经纬度计算出中心点周边的地铁站</h4><ul><li>先申请百度地图 API的KEY</li><li>思路,获取输入的地铁站的经纬度,然后计算出多个地铁站的中心点的经纬度,获取附近最近的地铁站</li><li>代码如下<br>index.html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1.0, user-scalable=no\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        body, html&#123;width: 100%;height: 100%;margin:0;font-family:\"微软雅黑\";font-size:14px;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        #l-map&#123;height:400px;width:100%;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        #r-result&#123;width:100%;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://api.map.baidu.com/api?v=2.0&amp;ak=你的ak\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>关键字输入<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"l-map\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"r-result\"</span>&gt;</span>请输入:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"suggestId\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:150px;\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"searchResultPanel\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:1px solid #C0C0C0;width:150px;height:auto; display:none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"calc\"</span>&gt;</span>计算中间点<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tblGrid\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"table-layout:fixed\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">\"250px\"</span>&gt;</span>地址<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">\"150px\"</span>&gt;</span>经度<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">\"150px\"</span>&gt;</span>纬度<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    // 百度地图API功能</span></span><br><span class=\"line\"><span class=\"undefined\">    function G(id) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        return document.getElementById(id);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">    var map = new BMap.Map(\"l-map\"); </span></span><br><span class=\"line\"><span class=\"undefined\">    // 百度坐标系坐标(地图中需要使用这个)</span></span><br><span class=\"line\"><span class=\"undefined\">    var bPoints = new Array();</span></span><br><span class=\"line\"><span class=\"undefined\">    map.centerAndZoom(\"广州\",12);                   // 初始化地图,设置城市和地图级别。</span></span><br><span class=\"line\"><span class=\"undefined\">    map.enableScrollWheelZoom(true);</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">    var ac = new BMap.Autocomplete(    //建立一个自动完成的对象</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;\"input\" : \"suggestId\"</span></span><br><span class=\"line\"><span class=\"undefined\">        ,\"location\" : map</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">    ac.addEventListener(\"onhighlight\", function(e) &#123;  //鼠标放在下拉列表上的事件</span></span><br><span class=\"line\"><span class=\"undefined\">    var str = \"\";</span></span><br><span class=\"line\"><span class=\"undefined\">        var _value = e.fromitem.value;</span></span><br><span class=\"line\"><span class=\"undefined\">        var value = \"\";</span></span><br><span class=\"line\"><span class=\"undefined\">        if (e.fromitem.index &gt; -1) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;    </span></span><br><span class=\"line\"><span class=\"xml\">        str = \"FromItem<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>index = \" + e.fromitem.index + \"<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>value = \" + value;</span></span><br><span class=\"line\"><span class=\"undefined\">        </span></span><br><span class=\"line\"><span class=\"undefined\">        value = \"\";</span></span><br><span class=\"line\"><span class=\"undefined\">        if (e.toitem.index &gt; -1) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            _value = e.toitem.value;</span></span><br><span class=\"line\"><span class=\"undefined\">            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;    </span></span><br><span class=\"line\"><span class=\"xml\">        str += \"<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>ToItem<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>index = \" + e.toitem.index + \"<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>value = \" + value;</span></span><br><span class=\"line\"><span class=\"undefined\">        //alert(\"onhighlight\");</span></span><br><span class=\"line\"><span class=\"undefined\">        G(\"searchResultPanel\").innerHTML = str;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">    var myValue;</span></span><br><span class=\"line\"><span class=\"undefined\">    ac.addEventListener(\"onconfirm\", function(e) &#123;    //鼠标点击下拉列表后的事件</span></span><br><span class=\"line\"><span class=\"undefined\">        var _value = e.item.value;</span></span><br><span class=\"line\"><span class=\"undefined\">        myValue = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span></span><br><span class=\"line\"><span class=\"xml\">        G(\"searchResultPanel\").innerHTML =\"onconfirm<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>index = \" + e.item.index + \"<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>myValue = \" + myValue;  </span></span><br><span class=\"line\"><span class=\"undefined\">        //alert(\"onconfirm\");      </span></span><br><span class=\"line\"><span class=\"undefined\">        setPlace();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">    function setPlace()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        //map.clearOverlays();    //清除地图上所有覆盖物</span></span><br><span class=\"line\"><span class=\"undefined\">        function showInfo(e) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            alert(e.point.lng+\",\"+e.point.lat);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        function myFun()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if(confirm('确认要将该地点纳入路线图吗？')) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                var current = local.getResults().getPoi(0);</span></span><br><span class=\"line\"><span class=\"undefined\">                console.log(current);</span></span><br><span class=\"line\"><span class=\"undefined\">                var point = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">                if (typeof(current) == \"object\" &amp;&amp; current.title !=\"\") &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    // point.name = current.title;</span></span><br><span class=\"line\"><span class=\"undefined\">                    point.name = myValue;</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125; </span></span><br><span class=\"line\"><span class=\"undefined\">                var pp = current.point;    //获取第一个智能搜索的结果</span></span><br><span class=\"line\"><span class=\"undefined\">                console.log(pp);</span></span><br><span class=\"line\"><span class=\"undefined\">                point.lng = pp.lng;</span></span><br><span class=\"line\"><span class=\"undefined\">                point.lat = pp.lat;</span></span><br><span class=\"line\"><span class=\"undefined\">                console.log(point);</span></span><br><span class=\"line\"><span class=\"undefined\">                bPoints.push(point); // 添加到百度坐标数组 用于自动调整缩放级别</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">                //如果选中了，可以考虑将此地址以及坐标保存起来。</span></span><br><span class=\"line\"><span class=\"undefined\">                var newRow = document.all(\"tblGrid\").insertRow();</span></span><br><span class=\"line\"><span class=\"undefined\">                //得到表的对象并插入一行，下面是插入了行以后，填充相应的列节点，如下面所示</span></span><br><span class=\"line\"><span class=\"undefined\">                var oCell = newRow.insertCell();//插入列的节点</span></span><br><span class=\"line\"><span class=\"undefined\">                oCell.innerHTML = point.name;//列里面填充的值，innerHtml值列内的所有元素    </span></span><br><span class=\"line\"><span class=\"undefined\">                oCell = newRow.insertCell();</span></span><br><span class=\"line\"><span class=\"undefined\">                oCell.innerHTML = point.lng; </span></span><br><span class=\"line\"><span class=\"undefined\">                oCell = newRow.insertCell();</span></span><br><span class=\"line\"><span class=\"undefined\">                oCell.innerHTML = point.lat;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">                map.centerAndZoom(pp, 18);</span></span><br><span class=\"line\"><span class=\"undefined\">                map.addOverlay(new BMap.Marker(pp));    //添加标注</span></span><br><span class=\"line\"><span class=\"undefined\">                //添加文本标注</span></span><br><span class=\"line\"><span class=\"undefined\">                var opts = &#123;position:pp,offset:new BMap.Size(10,-30)&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">                var label = new BMap.Label(current.title, opts);</span></span><br><span class=\"line\"><span class=\"undefined\">                label.setStyle(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    color:\"red\",</span></span><br><span class=\"line\"><span class=\"undefined\">                    fontSize:\"12px\",</span></span><br><span class=\"line\"><span class=\"undefined\">                    height:\"20px\",</span></span><br><span class=\"line\"><span class=\"undefined\">                    lineheight:\"20px\",</span></span><br><span class=\"line\"><span class=\"undefined\">                    fontFamily:\"微软雅黑\"</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">                map.addOverlay(label);</span></span><br><span class=\"line\"><span class=\"undefined\">                // map.addEventListener('click',showInfo);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        var local = new BMap.LocalSearch(map, &#123; //智能搜索</span></span><br><span class=\"line\"><span class=\"undefined\">          onSearchComplete: myFun</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        local.search(myValue);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    // 根据点的数组自动调整缩放级别</span></span><br><span class=\"line\"><span class=\"undefined\">    function setZoom(bPoints) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        var view = map.getViewport(eval(bPoints));</span></span><br><span class=\"line\"><span class=\"undefined\">        var mapZoom = view.zoom;</span></span><br><span class=\"line\"><span class=\"undefined\">        var centerPoint = view.center;</span></span><br><span class=\"line\"><span class=\"undefined\">        map.centerAndZoom(centerPoint, mapZoom);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    document.getElementById('calc').onclick = function () &#123;  </span></span><br><span class=\"line\"><span class=\"undefined\">        var tab=document.getElementById(\"tblGrid\");</span></span><br><span class=\"line\"><span class=\"undefined\">        var rows=tab.rows;</span></span><br><span class=\"line\"><span class=\"undefined\">        var totallng =0,totallat=0;</span></span><br><span class=\"line\"><span class=\"undefined\">        for(var i=1;i&lt;rows.length;i++)//遍历表格的行</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123; </span></span><br><span class=\"line\"><span class=\"undefined\">            var a =rows[i].cells[1].innerHTML;</span></span><br><span class=\"line\"><span class=\"undefined\">            totallng = Number(totallng) + Number(rows[i].cells[1].innerHTML);</span></span><br><span class=\"line\"><span class=\"undefined\">            totallat = Number(totallat) + Number(rows[i].cells[2].innerHTML);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        var point = new BMap.Point(Number(totallng) / Number(Number(rows.length)-1),Number(totallat) / Number(Number(rows.length)-1));</span></span><br><span class=\"line\"><span class=\"undefined\">        var marker = new BMap.Marker(point);  // 创建标注</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmap.addOverlay(marker);              // 将标注添加到地图中</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmap.panTo(point);</span></span><br><span class=\"line\"><span class=\"undefined\">        var local = new BMap.LocalSearch(map, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            renderOptions:&#123;map: map&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        local.search(\"地铁站\");</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;  </span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    setTimeout(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        setZoom(bPoints);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;, 1000)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id=\"第二版-广州地铁API\"><a href=\"#第二版-广州地铁API\" class=\"headerlink\" title=\"第二版 广州地铁API\"></a>第二版 广州地铁API</h4><ul><li><p>通过调用API接口获得全部站点数据</p><ol><li><p>接口</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://app.gzmtr.cn:7400//line/qryStages?callback=&amp;_=</span><br></pre></td></tr></table></figure></li><li><p>数据格式如下</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"stateId\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"number\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineRelateId\"</span>: <span class=\"string\">\"001\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineNo\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineCn\"</span>: <span class=\"string\">\"一号线\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineEn\"</span>: <span class=\"string\">\"Line 1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"color\"</span>: <span class=\"string\">\"edcf3dff\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"averageIntervalTime\"</span>: <span class=\"number\">450</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lastModifyTime\"</span>: <span class=\"number\">1482485159</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"version\"</span>: <span class=\"number\">22646</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"status\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineOrder\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stations\"</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"lineNo\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stationId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stationRelateId\"</span>: <span class=\"string\">\"00101\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stageseq\"</span>: <span class=\"string\">\"01\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"nameCn\"</span>: <span class=\"string\">\"西塱\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"nameEn\"</span>: <span class=\"string\">\"Xilang\"</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"lineNo\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stationId\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stationRelateId\"</span>: <span class=\"string\">\"00102\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stageseq\"</span>: <span class=\"string\">\"02\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"nameCn\"</span>: <span class=\"string\">\"坑口\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"nameEn\"</span>: <span class=\"string\">\"Kengkou\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>通过调用接口获得两个站点之间的通勤时间,费用</p><ol><li><p>接口地址</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://cs.gzmtr.com/base/doSearchPathLine.do?callback=&amp;startStation=%25E4%25BD%2593%25E8%2582%25B2%25E4%25B8%25AD%25E5%25BF%2583&amp;endStation=%25E9%25A6%2599%25E9%259B%25AA&amp;startId=&amp;endId=&amp;_=</span><br><span class=\"line\">// startStation为起始站点的两次uri编码</span><br><span class=\"line\">// endStation为终点站点的两次uri编码</span><br></pre></td></tr></table></figure></li><li><p>数据类型如下</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"count\"</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"spendTime\"</span>: <span class=\"string\">\"52\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lines\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"lineName\"</span>: <span class=\"string\">\"一号线\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationName\"</span>: <span class=\"string\">\"体育中心\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationCode\"</span>: <span class=\"string\">\"115\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"lineName\"</span>: <span class=\"string\">\"三北线\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationName\"</span>: <span class=\"string\">\"广州东站\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationCode\"</span>: <span class=\"string\">\"318\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"lineName\"</span>: <span class=\"string\">\"六号线\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationName\"</span>: <span class=\"string\">\"燕塘\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationCode\"</span>: <span class=\"string\">\"620\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"stationName\"</span>: <span class=\"string\">\"香雪\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationCode\"</span>: <span class=\"string\">\"632\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"price\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stations\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"endtime\"</span>: <span class=\"string\">\"23:22\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"linecode\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"starttime\"</span>: <span class=\"string\">\"6:22\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"endstage\"</span>: <span class=\"string\">\"广州东站\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineid\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"startstage\"</span>: <span class=\"string\">\"体育中心\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"sgk\"</span>: <span class=\"string\">\"101\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"endtime\"</span>: <span class=\"string\">\"23:32\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"linecode\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"starttime\"</span>: <span class=\"string\">\"6:12\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"endstage\"</span>: <span class=\"string\">\"西朗\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineid\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"startstage\"</span>: <span class=\"string\">\"体育中心\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"sgk\"</span>: <span class=\"string\">\"101\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>通过穷举输入站点与其他站点的计算,获取多个站点到某一站点的时间相近或是费用最近的</p></li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"关于设计选择聚会地点软件的想法\"><a href=\"#关于设计选择聚会地点软件的想法\" class=\"headerlink\" title=\"关于设计选择聚会地点软件的想法\"></a>关于设计选择聚会地点软件的想法</h4><p>前几天,偶然听小伙伴提出这个想法,感觉很有意思就打算研究一下.也可以顺便练习一下.<br>","more":"</p><h4 id=\"第一版百度地图API-经纬度计算出中心点周边的地铁站\"><a href=\"#第一版百度地图API-经纬度计算出中心点周边的地铁站\" class=\"headerlink\" title=\"第一版百度地图API+经纬度计算出中心点周边的地铁站\"></a>第一版百度地图API+经纬度计算出中心点周边的地铁站</h4><ul><li>先申请百度地图 API的KEY</li><li>思路,获取输入的地铁站的经纬度,然后计算出多个地铁站的中心点的经纬度,获取附近最近的地铁站</li><li>代码如下<br>index.html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1.0, user-scalable=no\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        body, html&#123;width: 100%;height: 100%;margin:0;font-family:\"微软雅黑\";font-size:14px;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        #l-map&#123;height:400px;width:100%;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        #r-result&#123;width:100%;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://api.map.baidu.com/api?v=2.0&amp;ak=你的ak\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>关键字输入<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"l-map\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"r-result\"</span>&gt;</span>请输入:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"suggestId\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:150px;\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"searchResultPanel\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:1px solid #C0C0C0;width:150px;height:auto; display:none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"calc\"</span>&gt;</span>计算中间点<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tblGrid\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"table-layout:fixed\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">\"250px\"</span>&gt;</span>地址<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">\"150px\"</span>&gt;</span>经度<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">\"150px\"</span>&gt;</span>纬度<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    // 百度地图API功能</span></span><br><span class=\"line\"><span class=\"undefined\">    function G(id) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        return document.getElementById(id);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">    var map = new BMap.Map(\"l-map\"); </span></span><br><span class=\"line\"><span class=\"undefined\">    // 百度坐标系坐标(地图中需要使用这个)</span></span><br><span class=\"line\"><span class=\"undefined\">    var bPoints = new Array();</span></span><br><span class=\"line\"><span class=\"undefined\">    map.centerAndZoom(\"广州\",12);                   // 初始化地图,设置城市和地图级别。</span></span><br><span class=\"line\"><span class=\"undefined\">    map.enableScrollWheelZoom(true);</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">    var ac = new BMap.Autocomplete(    //建立一个自动完成的对象</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;\"input\" : \"suggestId\"</span></span><br><span class=\"line\"><span class=\"undefined\">        ,\"location\" : map</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">    ac.addEventListener(\"onhighlight\", function(e) &#123;  //鼠标放在下拉列表上的事件</span></span><br><span class=\"line\"><span class=\"undefined\">    var str = \"\";</span></span><br><span class=\"line\"><span class=\"undefined\">        var _value = e.fromitem.value;</span></span><br><span class=\"line\"><span class=\"undefined\">        var value = \"\";</span></span><br><span class=\"line\"><span class=\"undefined\">        if (e.fromitem.index &gt; -1) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;    </span></span><br><span class=\"line\"><span class=\"xml\">        str = \"FromItem<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>index = \" + e.fromitem.index + \"<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>value = \" + value;</span></span><br><span class=\"line\"><span class=\"undefined\">        </span></span><br><span class=\"line\"><span class=\"undefined\">        value = \"\";</span></span><br><span class=\"line\"><span class=\"undefined\">        if (e.toitem.index &gt; -1) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            _value = e.toitem.value;</span></span><br><span class=\"line\"><span class=\"undefined\">            value = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;    </span></span><br><span class=\"line\"><span class=\"xml\">        str += \"<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>ToItem<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>index = \" + e.toitem.index + \"<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>value = \" + value;</span></span><br><span class=\"line\"><span class=\"undefined\">        //alert(\"onhighlight\");</span></span><br><span class=\"line\"><span class=\"undefined\">        G(\"searchResultPanel\").innerHTML = str;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">    var myValue;</span></span><br><span class=\"line\"><span class=\"undefined\">    ac.addEventListener(\"onconfirm\", function(e) &#123;    //鼠标点击下拉列表后的事件</span></span><br><span class=\"line\"><span class=\"undefined\">        var _value = e.item.value;</span></span><br><span class=\"line\"><span class=\"undefined\">        myValue = _value.province +  _value.city +  _value.district +  _value.street +  _value.business;</span></span><br><span class=\"line\"><span class=\"xml\">        G(\"searchResultPanel\").innerHTML =\"onconfirm<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>index = \" + e.item.index + \"<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>myValue = \" + myValue;  </span></span><br><span class=\"line\"><span class=\"undefined\">        //alert(\"onconfirm\");      </span></span><br><span class=\"line\"><span class=\"undefined\">        setPlace();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">    function setPlace()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        //map.clearOverlays();    //清除地图上所有覆盖物</span></span><br><span class=\"line\"><span class=\"undefined\">        function showInfo(e) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            alert(e.point.lng+\",\"+e.point.lat);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        function myFun()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if(confirm('确认要将该地点纳入路线图吗？')) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                var current = local.getResults().getPoi(0);</span></span><br><span class=\"line\"><span class=\"undefined\">                console.log(current);</span></span><br><span class=\"line\"><span class=\"undefined\">                var point = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">                if (typeof(current) == \"object\" &amp;&amp; current.title !=\"\") &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    // point.name = current.title;</span></span><br><span class=\"line\"><span class=\"undefined\">                    point.name = myValue;</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125; </span></span><br><span class=\"line\"><span class=\"undefined\">                var pp = current.point;    //获取第一个智能搜索的结果</span></span><br><span class=\"line\"><span class=\"undefined\">                console.log(pp);</span></span><br><span class=\"line\"><span class=\"undefined\">                point.lng = pp.lng;</span></span><br><span class=\"line\"><span class=\"undefined\">                point.lat = pp.lat;</span></span><br><span class=\"line\"><span class=\"undefined\">                console.log(point);</span></span><br><span class=\"line\"><span class=\"undefined\">                bPoints.push(point); // 添加到百度坐标数组 用于自动调整缩放级别</span></span><br><span class=\"line\"><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">                //如果选中了，可以考虑将此地址以及坐标保存起来。</span></span><br><span class=\"line\"><span class=\"undefined\">                var newRow = document.all(\"tblGrid\").insertRow();</span></span><br><span class=\"line\"><span class=\"undefined\">                //得到表的对象并插入一行，下面是插入了行以后，填充相应的列节点，如下面所示</span></span><br><span class=\"line\"><span class=\"undefined\">                var oCell = newRow.insertCell();//插入列的节点</span></span><br><span class=\"line\"><span class=\"undefined\">                oCell.innerHTML = point.name;//列里面填充的值，innerHtml值列内的所有元素    </span></span><br><span class=\"line\"><span class=\"undefined\">                oCell = newRow.insertCell();</span></span><br><span class=\"line\"><span class=\"undefined\">                oCell.innerHTML = point.lng; </span></span><br><span class=\"line\"><span class=\"undefined\">                oCell = newRow.insertCell();</span></span><br><span class=\"line\"><span class=\"undefined\">                oCell.innerHTML = point.lat;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">                map.centerAndZoom(pp, 18);</span></span><br><span class=\"line\"><span class=\"undefined\">                map.addOverlay(new BMap.Marker(pp));    //添加标注</span></span><br><span class=\"line\"><span class=\"undefined\">                //添加文本标注</span></span><br><span class=\"line\"><span class=\"undefined\">                var opts = &#123;position:pp,offset:new BMap.Size(10,-30)&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">                var label = new BMap.Label(current.title, opts);</span></span><br><span class=\"line\"><span class=\"undefined\">                label.setStyle(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    color:\"red\",</span></span><br><span class=\"line\"><span class=\"undefined\">                    fontSize:\"12px\",</span></span><br><span class=\"line\"><span class=\"undefined\">                    height:\"20px\",</span></span><br><span class=\"line\"><span class=\"undefined\">                    lineheight:\"20px\",</span></span><br><span class=\"line\"><span class=\"undefined\">                    fontFamily:\"微软雅黑\"</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">                map.addOverlay(label);</span></span><br><span class=\"line\"><span class=\"undefined\">                // map.addEventListener('click',showInfo);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        var local = new BMap.LocalSearch(map, &#123; //智能搜索</span></span><br><span class=\"line\"><span class=\"undefined\">          onSearchComplete: myFun</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        local.search(myValue);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    // 根据点的数组自动调整缩放级别</span></span><br><span class=\"line\"><span class=\"undefined\">    function setZoom(bPoints) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        var view = map.getViewport(eval(bPoints));</span></span><br><span class=\"line\"><span class=\"undefined\">        var mapZoom = view.zoom;</span></span><br><span class=\"line\"><span class=\"undefined\">        var centerPoint = view.center;</span></span><br><span class=\"line\"><span class=\"undefined\">        map.centerAndZoom(centerPoint, mapZoom);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    document.getElementById('calc').onclick = function () &#123;  </span></span><br><span class=\"line\"><span class=\"undefined\">        var tab=document.getElementById(\"tblGrid\");</span></span><br><span class=\"line\"><span class=\"undefined\">        var rows=tab.rows;</span></span><br><span class=\"line\"><span class=\"undefined\">        var totallng =0,totallat=0;</span></span><br><span class=\"line\"><span class=\"undefined\">        for(var i=1;i&lt;rows.length;i++)//遍历表格的行</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123; </span></span><br><span class=\"line\"><span class=\"undefined\">            var a =rows[i].cells[1].innerHTML;</span></span><br><span class=\"line\"><span class=\"undefined\">            totallng = Number(totallng) + Number(rows[i].cells[1].innerHTML);</span></span><br><span class=\"line\"><span class=\"undefined\">            totallat = Number(totallat) + Number(rows[i].cells[2].innerHTML);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        var point = new BMap.Point(Number(totallng) / Number(Number(rows.length)-1),Number(totallat) / Number(Number(rows.length)-1));</span></span><br><span class=\"line\"><span class=\"undefined\">        var marker = new BMap.Marker(point);  // 创建标注</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmap.addOverlay(marker);              // 将标注添加到地图中</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmap.panTo(point);</span></span><br><span class=\"line\"><span class=\"undefined\">        var local = new BMap.LocalSearch(map, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            renderOptions:&#123;map: map&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        local.search(\"地铁站\");</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;  </span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    setTimeout(function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        setZoom(bPoints);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;, 1000)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id=\"第二版-广州地铁API\"><a href=\"#第二版-广州地铁API\" class=\"headerlink\" title=\"第二版 广州地铁API\"></a>第二版 广州地铁API</h4><ul><li><p>通过调用API接口获得全部站点数据</p><ol><li><p>接口</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://app.gzmtr.cn:7400//line/qryStages?callback=&amp;_=</span><br></pre></td></tr></table></figure></li><li><p>数据格式如下</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"stateId\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"number\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineRelateId\"</span>: <span class=\"string\">\"001\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineNo\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineCn\"</span>: <span class=\"string\">\"一号线\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineEn\"</span>: <span class=\"string\">\"Line 1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"color\"</span>: <span class=\"string\">\"edcf3dff\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"averageIntervalTime\"</span>: <span class=\"number\">450</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lastModifyTime\"</span>: <span class=\"number\">1482485159</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"version\"</span>: <span class=\"number\">22646</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"status\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineOrder\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stations\"</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"lineNo\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stationId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stationRelateId\"</span>: <span class=\"string\">\"00101\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stageseq\"</span>: <span class=\"string\">\"01\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"nameCn\"</span>: <span class=\"string\">\"西塱\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"nameEn\"</span>: <span class=\"string\">\"Xilang\"</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"lineNo\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stationId\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stationRelateId\"</span>: <span class=\"string\">\"00102\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"stageseq\"</span>: <span class=\"string\">\"02\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"nameCn\"</span>: <span class=\"string\">\"坑口\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"nameEn\"</span>: <span class=\"string\">\"Kengkou\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>通过调用接口获得两个站点之间的通勤时间,费用</p><ol><li><p>接口地址</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://cs.gzmtr.com/base/doSearchPathLine.do?callback=&amp;startStation=%25E4%25BD%2593%25E8%2582%25B2%25E4%25B8%25AD%25E5%25BF%2583&amp;endStation=%25E9%25A6%2599%25E9%259B%25AA&amp;startId=&amp;endId=&amp;_=</span><br><span class=\"line\">// startStation为起始站点的两次uri编码</span><br><span class=\"line\">// endStation为终点站点的两次uri编码</span><br></pre></td></tr></table></figure></li><li><p>数据类型如下</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"count\"</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"spendTime\"</span>: <span class=\"string\">\"52\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lines\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"lineName\"</span>: <span class=\"string\">\"一号线\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationName\"</span>: <span class=\"string\">\"体育中心\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationCode\"</span>: <span class=\"string\">\"115\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"lineName\"</span>: <span class=\"string\">\"三北线\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationName\"</span>: <span class=\"string\">\"广州东站\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationCode\"</span>: <span class=\"string\">\"318\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"lineName\"</span>: <span class=\"string\">\"六号线\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationName\"</span>: <span class=\"string\">\"燕塘\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationCode\"</span>: <span class=\"string\">\"620\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"stationName\"</span>: <span class=\"string\">\"香雪\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"stationCode\"</span>: <span class=\"string\">\"632\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"price\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stations\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"endtime\"</span>: <span class=\"string\">\"23:22\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"linecode\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"starttime\"</span>: <span class=\"string\">\"6:22\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"endstage\"</span>: <span class=\"string\">\"广州东站\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineid\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"startstage\"</span>: <span class=\"string\">\"体育中心\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"sgk\"</span>: <span class=\"string\">\"101\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"endtime\"</span>: <span class=\"string\">\"23:32\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"linecode\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"starttime\"</span>: <span class=\"string\">\"6:12\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"endstage\"</span>: <span class=\"string\">\"西朗\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lineid\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"startstage\"</span>: <span class=\"string\">\"体育中心\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"sgk\"</span>: <span class=\"string\">\"101\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>通过穷举输入站点与其他站点的计算,获取多个站点到某一站点的时间相近或是费用最近的</p></li></ul><!-- rebuild by neat -->"},{"title":"关于Winform窗体的快速复制","date":"2019-03-21T14:55:57.000Z","_content":"## 起因\n最近接手了一个新项目的开发,里面有很多窗体都是直接从其他项目上复制过来的,或者创建一个以后,可以复制成用于不用的需求,这时候就会涉及到winform窗体的复制了,下面分享自己的经验\n<!--more-->\n## 项目中不存在同名窗体\n直接复制窗体对应的cs、designer.cs、resx的三个文件到对应的目录,在VS中直接添加现有项目,选择cs文件,将窗体添加到项目中,然后修改命名空间就可以了.\n\n## 项目中已存在同名窗体\n* 重命名cs、designer.cs、resx三个文件\n* 打开窗体代码，修改public partial class XXXX : Form中的XXXX为新窗体类名YYYY。\n* 重要：窗体初始化模块中的XXXX也相应修改为YYYY\n    ``` cs\n    public XXXX()\n    {\n        InitializeComponent();\n    }\n    ```\n* 异常重要：\n    打开窗体设计器代码YYYY.Designer.cs，修改partial class XXXX : Form 中的XXXX为新窗体类名YYYY。\n* 更重要而不易找到的问题： \n    修改private void InitializeComponent() 中System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(XXXX))一行中的XXXX为YYYY；","source":"_posts/关于Winform窗体的快速复制.md","raw":"---\ntitle: 关于Winform窗体的快速复制\ndate: 2019-03-21 22:55:57\ncategories: C# \ntags: \n - 复制\n - C#\n---\n## 起因\n最近接手了一个新项目的开发,里面有很多窗体都是直接从其他项目上复制过来的,或者创建一个以后,可以复制成用于不用的需求,这时候就会涉及到winform窗体的复制了,下面分享自己的经验\n<!--more-->\n## 项目中不存在同名窗体\n直接复制窗体对应的cs、designer.cs、resx的三个文件到对应的目录,在VS中直接添加现有项目,选择cs文件,将窗体添加到项目中,然后修改命名空间就可以了.\n\n## 项目中已存在同名窗体\n* 重命名cs、designer.cs、resx三个文件\n* 打开窗体代码，修改public partial class XXXX : Form中的XXXX为新窗体类名YYYY。\n* 重要：窗体初始化模块中的XXXX也相应修改为YYYY\n    ``` cs\n    public XXXX()\n    {\n        InitializeComponent();\n    }\n    ```\n* 异常重要：\n    打开窗体设计器代码YYYY.Designer.cs，修改partial class XXXX : Form 中的XXXX为新窗体类名YYYY。\n* 更重要而不易找到的问题： \n    修改private void InitializeComponent() 中System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(XXXX))一行中的XXXX为YYYY；","slug":"关于Winform窗体的快速复制","published":1,"updated":"2019-03-24T15:16:05.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24b005qtkuit7izrzjf","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近接手了一个新项目的开发,里面有很多窗体都是直接从其他项目上复制过来的,或者创建一个以后,可以复制成用于不用的需求,这时候就会涉及到winform窗体的复制了,下面分享自己的经验<br><a id=\"more\"></a></p><h2 id=\"项目中不存在同名窗体\"><a href=\"#项目中不存在同名窗体\" class=\"headerlink\" title=\"项目中不存在同名窗体\"></a>项目中不存在同名窗体</h2><p>直接复制窗体对应的cs、designer.cs、resx的三个文件到对应的目录,在VS中直接添加现有项目,选择cs文件,将窗体添加到项目中,然后修改命名空间就可以了.</p><h2 id=\"项目中已存在同名窗体\"><a href=\"#项目中已存在同名窗体\" class=\"headerlink\" title=\"项目中已存在同名窗体\"></a>项目中已存在同名窗体</h2><ul><li>重命名cs、designer.cs、resx三个文件</li><li>打开窗体代码，修改public partial class XXXX : Form中的XXXX为新窗体类名YYYY。</li><li><p>重要：窗体初始化模块中的XXXX也相应修改为YYYY</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XXXX</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    InitializeComponent();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异常重要：<br>打开窗体设计器代码YYYY.Designer.cs，修改partial class XXXX : Form 中的XXXX为新窗体类名YYYY。</p></li><li>更重要而不易找到的问题：<br>修改private void InitializeComponent() 中System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(XXXX))一行中的XXXX为YYYY；</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近接手了一个新项目的开发,里面有很多窗体都是直接从其他项目上复制过来的,或者创建一个以后,可以复制成用于不用的需求,这时候就会涉及到winform窗体的复制了,下面分享自己的经验<br>","more":"</p><h2 id=\"项目中不存在同名窗体\"><a href=\"#项目中不存在同名窗体\" class=\"headerlink\" title=\"项目中不存在同名窗体\"></a>项目中不存在同名窗体</h2><p>直接复制窗体对应的cs、designer.cs、resx的三个文件到对应的目录,在VS中直接添加现有项目,选择cs文件,将窗体添加到项目中,然后修改命名空间就可以了.</p><h2 id=\"项目中已存在同名窗体\"><a href=\"#项目中已存在同名窗体\" class=\"headerlink\" title=\"项目中已存在同名窗体\"></a>项目中已存在同名窗体</h2><ul><li>重命名cs、designer.cs、resx三个文件</li><li>打开窗体代码，修改public partial class XXXX : Form中的XXXX为新窗体类名YYYY。</li><li><p>重要：窗体初始化模块中的XXXX也相应修改为YYYY</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XXXX</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    InitializeComponent();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异常重要：<br>打开窗体设计器代码YYYY.Designer.cs，修改partial class XXXX : Form 中的XXXX为新窗体类名YYYY。</p></li><li>更重要而不易找到的问题：<br>修改private void InitializeComponent() 中System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(XXXX))一行中的XXXX为YYYY；</li></ul><!-- rebuild by neat -->"},{"title":"多种仓储模式","date":"2019-03-04T13:41:49.000Z","_content":"### 多种仓储模式\n#### IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)\n* IRepository接口包含了基本的CRUD操作，如果业务中还需要扩展其他操作，只需在IRepository接口中添加。\n* Repository实现了IRepository接口。其中ISqlHelp接口包含获取数据库链接字符串的功能，_context为EF或EF Core类库。\n* 优点是简单、快速，缺点是扩展性差且违反开放-关闭原则（Open-Close Principle）\n<!--more-->\n##### IBaseRepository.cs\n```cs\npublic interface IBaseRepository<T> where T : class, new()\n{     \n    T Create(T model);\n    T Update(T model);\n    T Query(Guid guid);\n    T Query(Espression<Func<T, bool>> expression);\n    int Delete(Guid guid);\n    int BatchDelete(IList<Guid> guids);\n    List<T> GetAll();\n    List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total);\n}\n```\n##### BaseRepository.cs\n```cs\npublic class BaseRepository<T> : IBaseRepository<T> where T : class, new() \n{\n    //数据上下文\n    internal DbContext _context;\n\n    public BaseRepository(DbContext context) \n    {\n        _context = context\n    }\n\n    public T Create(T model) \n    {\n        _context.Entry(model).State = EntityState.Added;\n        var createRowCount = _context.SaveChanges();\n        return createRowCount > 0 ? model : null;\n    }\n\n    public T Update(T model)\n    {\n        _context.Entry(model).State = EntityState.Modified;\n        var updateRowAcount = _context.SaveChanges();\n        return updateRowAcount > 0 ? model : null;\n    }\n\n    public T Query(Guid guid)\n    {\n        return _context.Set<T>().Find(guid);\n    }\n\n    public T Query(Expression<Func<T, bool>> expression)\n    {\n        return _context.Set<T>().FirstOrDefault(expression);\n    }\n\n    public int Delete(Guid guid)\n    {\n        var model = _context.Set<T>().Find(guid);\n        if (model == null) \n        {\n            throw new ArgumentOutOfRangeException(nameof(guid));\n        }\n        _context.Entry(model).State = EntityState.Deleted;\n        return _context.SaveChanges();\n    }\n\n    public int BatchDelete(IList<Guid> guids)\n    {\n        foreach (var item in guids)\n        {\n            var model = _context.Set<T>().Find(item);\n            _context.Entry(model).State = EntityState.Deleted;\n        }\n        return _context.SaveChanges();\n    }\n\n    public List<T> GetAll()\n    {\n        return _context.Set<T>().Where(q => true).ToList();\n    }\n\n    public List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total)\n    {\n        total = _context.Set<T>().Where(expression).Count();\n        switch (sortOrder)\n        {\n            case SortOrder.Ascending:\n                return _context.Set<T>().Where(expression).OrderBy(sortPredicate).Skip(skip).Take(take).ToList();\n                    \n            case SortOrder.Descending:\n                return _context.Set<T>().Where(expression).OrderByDescending(sortPredicate).Skip(skip).Take(take).ToList();\n        }\n        throw new InvalidOperationException(\"分页查询必须指定排序字段和排序顺序。\");\n    }\n}\n```\n##### AdminServer.cs\n```cs\npublic sealed class AdminServer\n{\n    private readonly IBaseRepository<User> _adminRepository;\n\n    public AdminServer(IBaseRepository<User> adminRepository)\n    {\n        _adminRepository = adminRepository;\n    }\n\n    public void CreateUser()\n    {\n        var admin = new User();\n        _adminRepository.Create(admin);\n    }\n}\n```\n#### IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)\n* 将BaseRepository.cs的实现方法上加上virtual关键字,使方法可以重载,每添加一个实体，需要添加对应的接口和实现\n##### BaseRepository.cs\n```cs\npublic class BaseRepository<T> : IBaseRepository<T> where T : class, new() \n{\n    //数据上下文    \n    internal DbContext _context;\n    \n    public BaseRepository(DbContext context) \n    {\n        _context = context\n    }\n    \n\n    public virtual T Create(T model) \n    {\n        //略\n    }\n\n    public virtual T Update(T model)\n    {\n        //略\n    }\n\n    public virtual T Query(Guid guid)\n    {\n        //略\n    }\n\n    public virtual T Query(Expression<Func<T, bool>> expression)\n    {\n        //略\n    }\n\n    public virtual int Delete(Guid guid)\n    {\n        //略\n    }\n\n    public virtual int BatchDelete(IList<Guid> guids)\n    {\n        //略\n    }\n\n    public virtual List<T> GetAll()\n    {\n        //略\n    }\n\n    public virtual List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total)\n    {\n        //略\n    }\n}\n```\n##### IRepository.cs\n```cs\npublic partial interface IAdminRepository : IBaseRepository<Admin>\n{\n    bool IsExist(Admin admin);\n}\npublic partial interface IUserRepository : IBaseRepository<User>\n{\n\n}\n```\n##### Repository.cs\n```cs\npublic partial class AdminRepository : BaseRepository<Admin>,IAdminRepository\n{\n    public AdminRepository(ISqlHelp sqlHelp) : base(sqlHelp)\n    {\n\n    }\n    public bool IsExist(Admin admin)\n    {\n        //略\n    }\n}\npublic partial class UserRepository : BaseRepository<User>,IUserRepository\n{\n    public UserRepository(ISqlHelp sqlHelp) : base(sqlHelp)\n    {\n\n    }\n}\n```\n##### AdminServer.cs\n```cs\npublic sealed class AdminServer\n{\n    private readonly IAdminRepository _adminRepository;\n\n    public AdminServer(IAdminRepository adminRepository)\n    {\n        _adminRepository = adminRepository;\n    }\n\n    public void CreateUser()\n    {\n        var admin = new User();\n        _adminRepository.Create(admin);\n    }\n\n    public bool IsExist(Admin admin)\n    {\n        return _adminRepository.IsExist(admin);\n    }\n}\n```\n#### 仓储模式+工作单元模式(扩展性高，有并发处理需求)\n* 使用工作单元的原因是可以提高数据库写操作负载，并且在仓储模式中可以根据不同的数据库链接字符串读不同的库。\n##### IUnitOfWork.cs\n```cs\npublic interface IUnitOfWork : IDisposable\n    {\n        _context _context { get; set; }\n\n        /// <summary>\n        /// 提交所有更改\n        /// </summary>\n        Task CommitAsync();\n        \n        #region Methods\n        /// <summary>\n        /// 将指定的聚合根标注为“新建”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterNew<T>(T obj)\n            where T : class, IEntity;\n        /// <summary>\n        /// 将指定的聚合根标注为“更改”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterModified<T>(T obj)\n            where T : class;\n        /// <summary>\n        /// 将指定的聚合根标注为“删除”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterDeleted<T>(T obj)\n            where T : class;\n        #endregion\n    }\n```\n##### UnitOfWork.cs\n```cs\npublic class UnitOfWork : IUnitOfWork\n{\n    public _context _context { get; set; }\n    public UnitOfWork(IContextHelper contextHelp)\n    {\n        _context = contextHelp._context;\n    }\n    private AdminRepository _adminRepository;\n\n    public AdminRepository AdminRepository\n    {\n        get\n        {\n            return _adminRepository ?? new AdminRepository(_context);\n        }\n    }\n\n    public virtual async Task CommitAsync()\n    {\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateConcurrencyException ex)\n        {\n            ex.Entries.Single().Reload();\n        }\n    }\n    \n    public virtual void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n    \n    private void Dispose(bool disposing)\n    {\n        if (!disposing) \n        {\n            return;\n        }\n        if (_context == null) \n        {\n            return;\n        }\n        _context.Dispose();\n        _context = null;\n    }\n\n    public virtual void RegisterNew<TEntity>(TEntity obj) where TEntity : class, IEntity\n    {\n        _context.Set<TEntity>().Add(obj);\n    }\n\n    public virtual void RegisterModified<TEntity>(TEntity obj) where TEntity : class\n    {\n        _context.Entry(obj).State = EntityState.Modified;\n    }\n\n    public virtual void RegisterDeleted<TEntity>(TEntity obj) where TEntity : class\n    {\n        _context.Entry(obj).State = EntityState.Deleted;\n    }\n\n}\n```\n##### AdminServer.cs\n```cs\npublic class AdminServer\n{\n    private UnitOfWork unit;\n\n    public AdminServer(UnitOfWork unitOfWork)\n    {\n        unit = unitOfWork;\n    }\n\n    public IEnumerable Get()\n    {\n        return unit.AdminRepository.GetAll();\n    }\n```","source":"_posts/多种仓储模式.md","raw":"---\ntitle: 多种仓储模式\ndate: 2019-03-04 21:41:49\ncategories: .Net\ntags:\n - .Net\n - 架构\n---\n### 多种仓储模式\n#### IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)\n* IRepository接口包含了基本的CRUD操作，如果业务中还需要扩展其他操作，只需在IRepository接口中添加。\n* Repository实现了IRepository接口。其中ISqlHelp接口包含获取数据库链接字符串的功能，_context为EF或EF Core类库。\n* 优点是简单、快速，缺点是扩展性差且违反开放-关闭原则（Open-Close Principle）\n<!--more-->\n##### IBaseRepository.cs\n```cs\npublic interface IBaseRepository<T> where T : class, new()\n{     \n    T Create(T model);\n    T Update(T model);\n    T Query(Guid guid);\n    T Query(Espression<Func<T, bool>> expression);\n    int Delete(Guid guid);\n    int BatchDelete(IList<Guid> guids);\n    List<T> GetAll();\n    List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total);\n}\n```\n##### BaseRepository.cs\n```cs\npublic class BaseRepository<T> : IBaseRepository<T> where T : class, new() \n{\n    //数据上下文\n    internal DbContext _context;\n\n    public BaseRepository(DbContext context) \n    {\n        _context = context\n    }\n\n    public T Create(T model) \n    {\n        _context.Entry(model).State = EntityState.Added;\n        var createRowCount = _context.SaveChanges();\n        return createRowCount > 0 ? model : null;\n    }\n\n    public T Update(T model)\n    {\n        _context.Entry(model).State = EntityState.Modified;\n        var updateRowAcount = _context.SaveChanges();\n        return updateRowAcount > 0 ? model : null;\n    }\n\n    public T Query(Guid guid)\n    {\n        return _context.Set<T>().Find(guid);\n    }\n\n    public T Query(Expression<Func<T, bool>> expression)\n    {\n        return _context.Set<T>().FirstOrDefault(expression);\n    }\n\n    public int Delete(Guid guid)\n    {\n        var model = _context.Set<T>().Find(guid);\n        if (model == null) \n        {\n            throw new ArgumentOutOfRangeException(nameof(guid));\n        }\n        _context.Entry(model).State = EntityState.Deleted;\n        return _context.SaveChanges();\n    }\n\n    public int BatchDelete(IList<Guid> guids)\n    {\n        foreach (var item in guids)\n        {\n            var model = _context.Set<T>().Find(item);\n            _context.Entry(model).State = EntityState.Deleted;\n        }\n        return _context.SaveChanges();\n    }\n\n    public List<T> GetAll()\n    {\n        return _context.Set<T>().Where(q => true).ToList();\n    }\n\n    public List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total)\n    {\n        total = _context.Set<T>().Where(expression).Count();\n        switch (sortOrder)\n        {\n            case SortOrder.Ascending:\n                return _context.Set<T>().Where(expression).OrderBy(sortPredicate).Skip(skip).Take(take).ToList();\n                    \n            case SortOrder.Descending:\n                return _context.Set<T>().Where(expression).OrderByDescending(sortPredicate).Skip(skip).Take(take).ToList();\n        }\n        throw new InvalidOperationException(\"分页查询必须指定排序字段和排序顺序。\");\n    }\n}\n```\n##### AdminServer.cs\n```cs\npublic sealed class AdminServer\n{\n    private readonly IBaseRepository<User> _adminRepository;\n\n    public AdminServer(IBaseRepository<User> adminRepository)\n    {\n        _adminRepository = adminRepository;\n    }\n\n    public void CreateUser()\n    {\n        var admin = new User();\n        _adminRepository.Create(admin);\n    }\n}\n```\n#### IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)\n* 将BaseRepository.cs的实现方法上加上virtual关键字,使方法可以重载,每添加一个实体，需要添加对应的接口和实现\n##### BaseRepository.cs\n```cs\npublic class BaseRepository<T> : IBaseRepository<T> where T : class, new() \n{\n    //数据上下文    \n    internal DbContext _context;\n    \n    public BaseRepository(DbContext context) \n    {\n        _context = context\n    }\n    \n\n    public virtual T Create(T model) \n    {\n        //略\n    }\n\n    public virtual T Update(T model)\n    {\n        //略\n    }\n\n    public virtual T Query(Guid guid)\n    {\n        //略\n    }\n\n    public virtual T Query(Expression<Func<T, bool>> expression)\n    {\n        //略\n    }\n\n    public virtual int Delete(Guid guid)\n    {\n        //略\n    }\n\n    public virtual int BatchDelete(IList<Guid> guids)\n    {\n        //略\n    }\n\n    public virtual List<T> GetAll()\n    {\n        //略\n    }\n\n    public virtual List<T> GetAll(Expression<Func<T, bool>> expression, Expression<Func<T, dynamic>> sortPredicate, SortOrder sortOrder, int skip, int take, out int total)\n    {\n        //略\n    }\n}\n```\n##### IRepository.cs\n```cs\npublic partial interface IAdminRepository : IBaseRepository<Admin>\n{\n    bool IsExist(Admin admin);\n}\npublic partial interface IUserRepository : IBaseRepository<User>\n{\n\n}\n```\n##### Repository.cs\n```cs\npublic partial class AdminRepository : BaseRepository<Admin>,IAdminRepository\n{\n    public AdminRepository(ISqlHelp sqlHelp) : base(sqlHelp)\n    {\n\n    }\n    public bool IsExist(Admin admin)\n    {\n        //略\n    }\n}\npublic partial class UserRepository : BaseRepository<User>,IUserRepository\n{\n    public UserRepository(ISqlHelp sqlHelp) : base(sqlHelp)\n    {\n\n    }\n}\n```\n##### AdminServer.cs\n```cs\npublic sealed class AdminServer\n{\n    private readonly IAdminRepository _adminRepository;\n\n    public AdminServer(IAdminRepository adminRepository)\n    {\n        _adminRepository = adminRepository;\n    }\n\n    public void CreateUser()\n    {\n        var admin = new User();\n        _adminRepository.Create(admin);\n    }\n\n    public bool IsExist(Admin admin)\n    {\n        return _adminRepository.IsExist(admin);\n    }\n}\n```\n#### 仓储模式+工作单元模式(扩展性高，有并发处理需求)\n* 使用工作单元的原因是可以提高数据库写操作负载，并且在仓储模式中可以根据不同的数据库链接字符串读不同的库。\n##### IUnitOfWork.cs\n```cs\npublic interface IUnitOfWork : IDisposable\n    {\n        _context _context { get; set; }\n\n        /// <summary>\n        /// 提交所有更改\n        /// </summary>\n        Task CommitAsync();\n        \n        #region Methods\n        /// <summary>\n        /// 将指定的聚合根标注为“新建”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterNew<T>(T obj)\n            where T : class, IEntity;\n        /// <summary>\n        /// 将指定的聚合根标注为“更改”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterModified<T>(T obj)\n            where T : class;\n        /// <summary>\n        /// 将指定的聚合根标注为“删除”状态。\n        /// </summary>\n        /// <typeparam name=\"T\">需要标注状态的聚合根类型。</typeparam>\n        /// <param name=\"obj\">需要标注状态的聚合根。</param>\n        void RegisterDeleted<T>(T obj)\n            where T : class;\n        #endregion\n    }\n```\n##### UnitOfWork.cs\n```cs\npublic class UnitOfWork : IUnitOfWork\n{\n    public _context _context { get; set; }\n    public UnitOfWork(IContextHelper contextHelp)\n    {\n        _context = contextHelp._context;\n    }\n    private AdminRepository _adminRepository;\n\n    public AdminRepository AdminRepository\n    {\n        get\n        {\n            return _adminRepository ?? new AdminRepository(_context);\n        }\n    }\n\n    public virtual async Task CommitAsync()\n    {\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateConcurrencyException ex)\n        {\n            ex.Entries.Single().Reload();\n        }\n    }\n    \n    public virtual void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n    \n    private void Dispose(bool disposing)\n    {\n        if (!disposing) \n        {\n            return;\n        }\n        if (_context == null) \n        {\n            return;\n        }\n        _context.Dispose();\n        _context = null;\n    }\n\n    public virtual void RegisterNew<TEntity>(TEntity obj) where TEntity : class, IEntity\n    {\n        _context.Set<TEntity>().Add(obj);\n    }\n\n    public virtual void RegisterModified<TEntity>(TEntity obj) where TEntity : class\n    {\n        _context.Entry(obj).State = EntityState.Modified;\n    }\n\n    public virtual void RegisterDeleted<TEntity>(TEntity obj) where TEntity : class\n    {\n        _context.Entry(obj).State = EntityState.Deleted;\n    }\n\n}\n```\n##### AdminServer.cs\n```cs\npublic class AdminServer\n{\n    private UnitOfWork unit;\n\n    public AdminServer(UnitOfWork unitOfWork)\n    {\n        unit = unitOfWork;\n    }\n\n    public IEnumerable Get()\n    {\n        return unit.AdminRepository.GetAll();\n    }\n```","slug":"多种仓储模式","published":1,"updated":"2019-03-04T13:37:50.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24c005ttkuinryc33r1","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"多种仓储模式\"><a href=\"#多种仓储模式\" class=\"headerlink\" title=\"多种仓储模式\"></a>多种仓储模式</h3><h4 id=\"IBaseRepository-BaseRepository-模式-适用于小项目-扩展性差\"><a href=\"#IBaseRepository-BaseRepository-模式-适用于小项目-扩展性差\" class=\"headerlink\" title=\"IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)\"></a>IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)</h4><ul><li>IRepository接口包含了基本的CRUD操作，如果业务中还需要扩展其他操作，只需在IRepository接口中添加。</li><li>Repository实现了IRepository接口。其中ISqlHelp接口包含获取数据库链接字符串的功能，_context为EF或EF Core类库。</li><li>优点是简单、快速，缺点是扩展性差且违反开放-关闭原则（Open-Close Principle）<a id=\"more\"></a><h5 id=\"IBaseRepository-cs\"><a href=\"#IBaseRepository-cs\" class=\"headerlink\" title=\"IBaseRepository.cs\"></a>IBaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IBaseRepository&lt;T&gt; where T : class, new()</span><br><span class=\"line\">&#123;     </span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Query</span>(<span class=\"params\">Espression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"keyword\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"keyword\">int</span> skip, <span class=\"keyword\">int</span> take, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> total</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id=\"BaseRepository-cs\"><a href=\"#BaseRepository-cs\" class=\"headerlink\" title=\"BaseRepository.cs\"></a>BaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseRepository&lt;T&gt; : IBaseRepository&lt;T&gt; where T : class, new() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> DbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseRepository</span>(<span class=\"params\">DbContext context</span>) </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context = context</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>) </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Added;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> createRowCount = _context.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> createRowCount &gt; <span class=\"number\">0</span> ? model : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> updateRowAcount = _context.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateRowAcount &gt; <span class=\"number\">0</span> ? model : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Find(guid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Query</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().FirstOrDefault(expression);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> model = _context.Set&lt;T&gt;().Find(guid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (model == <span class=\"literal\">null</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(guid));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.SaveChanges();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> guids)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> model = _context.Set&lt;T&gt;().Find(item);</span><br><span class=\"line\">            _context.Entry(model).State = EntityState.Deleted;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.SaveChanges();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(q =&gt; <span class=\"literal\">true</span>).ToList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"keyword\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"keyword\">int</span> skip, <span class=\"keyword\">int</span> take, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> total</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        total = _context.Set&lt;T&gt;().Where(expression).Count();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (sortOrder)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SortOrder.Ascending:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(expression).OrderBy(sortPredicate).Skip(skip).Take(take).ToList();</span><br><span class=\"line\">                    </span><br><span class=\"line\">            <span class=\"keyword\">case</span> SortOrder.Descending:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(expression).OrderByDescending(sortPredicate).Skip(skip).Take(take).ToList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">\"分页查询必须指定排序字段和排序顺序。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"AdminServer-cs\"><a href=\"#AdminServer-cs\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IBaseRepository&lt;User&gt; _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">IBaseRepository&lt;User&gt; adminRepository</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _adminRepository = adminRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateUser</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> admin = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        _adminRepository.Create(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"IBaseRepository-BaseRepository-IRepository-Repository-可扩展性好-未处理并发\"><a href=\"#IBaseRepository-BaseRepository-IRepository-Repository-可扩展性好-未处理并发\" class=\"headerlink\" title=\"IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)\"></a>IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)</h4><ul><li>将BaseRepository.cs的实现方法上加上virtual关键字,使方法可以重载,每添加一个实体，需要添加对应的接口和实现<h5 id=\"BaseRepository-cs-1\"><a href=\"#BaseRepository-cs-1\" class=\"headerlink\" title=\"BaseRepository.cs\"></a>BaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseRepository&lt;T&gt; : IBaseRepository&lt;T&gt; where T : class, new() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据上下文    </span></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> DbContext _context;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseRepository</span>(<span class=\"params\">DbContext context</span>) </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context = context</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>) </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Query</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"keyword\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"keyword\">int</span> skip, <span class=\"keyword\">int</span> take, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> total</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id=\"IRepository-cs\"><a href=\"#IRepository-cs\" class=\"headerlink\" title=\"IRepository.cs\"></a>IRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public partial interface IAdminRepository : IBaseRepository&lt;Admin&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public partial interface IUserRepository : IBaseRepository&lt;User&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Repository-cs\"><a href=\"#Repository-cs\" class=\"headerlink\" title=\"Repository.cs\"></a>Repository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public partial class AdminRepository : BaseRepository&lt;Admin&gt;,IAdminRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminRepository</span>(<span class=\"params\">ISqlHelp sqlHelp</span>) : <span class=\"title\">base</span>(<span class=\"params\">sqlHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public partial class UserRepository : BaseRepository&lt;User&gt;,IUserRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserRepository</span>(<span class=\"params\">ISqlHelp sqlHelp</span>) : <span class=\"title\">base</span>(<span class=\"params\">sqlHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"AdminServer-cs-1\"><a href=\"#AdminServer-cs-1\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IAdminRepository _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">IAdminRepository adminRepository</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _adminRepository = adminRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateUser</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> admin = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        _adminRepository.Create(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _adminRepository.IsExist(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"仓储模式-工作单元模式-扩展性高，有并发处理需求\"><a href=\"#仓储模式-工作单元模式-扩展性高，有并发处理需求\" class=\"headerlink\" title=\"仓储模式+工作单元模式(扩展性高，有并发处理需求)\"></a>仓储模式+工作单元模式(扩展性高，有并发处理需求)</h4><ul><li>使用工作单元的原因是可以提高数据库写操作负载，并且在仓储模式中可以根据不同的数据库链接字符串读不同的库。<h5 id=\"IUnitOfWork-cs\"><a href=\"#IUnitOfWork-cs\" class=\"headerlink\" title=\"IUnitOfWork.cs\"></a>IUnitOfWork.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUnitOfWork</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context _context &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 提交所有更改</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">Task <span class=\"title\">CommitAsync</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Methods</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“新建”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> RegisterNew&lt;T&gt;(T obj)</span><br><span class=\"line\">            where T : class, IEntity;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“更改”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> RegisterModified&lt;T&gt;(T obj)</span><br><span class=\"line\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“删除”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> RegisterDeleted&lt;T&gt;(T obj)</span><br><span class=\"line\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span>;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id=\"UnitOfWork-cs\"><a href=\"#UnitOfWork-cs\" class=\"headerlink\" title=\"UnitOfWork.cs\"></a>UnitOfWork.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UnitOfWork</span> : <span class=\"title\">IUnitOfWork</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> _context _context &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnitOfWork</span>(<span class=\"params\">IContextHelper contextHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context = contextHelp._context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AdminRepository _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AdminRepository AdminRepository</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _adminRepository ?? <span class=\"keyword\">new</span> AdminRepository(_context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">async</span> Task <span class=\"title\">CommitAsync</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _context.SaveChangesAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (DbUpdateConcurrencyException ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ex.Entries.Single().Reload();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"keyword\">bool</span> disposing</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!disposing) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_context == <span class=\"literal\">null</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _context.Dispose();</span><br><span class=\"line\">        _context = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public virtual void RegisterNew&lt;TEntity&gt;(TEntity obj) where TEntity : class, IEntity</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context.Set&lt;TEntity&gt;().Add(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> RegisterModified&lt;TEntity&gt;(TEntity obj) <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context.Entry(obj).State = EntityState.Modified;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> RegisterDeleted&lt;TEntity&gt;(TEntity obj) <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context.Entry(obj).State = EntityState.Deleted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"AdminServer-cs-2\"><a href=\"#AdminServer-cs-2\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UnitOfWork unit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">UnitOfWork unitOfWork</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        unit = unitOfWork;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unit.AdminRepository.GetAll();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"多种仓储模式\"><a href=\"#多种仓储模式\" class=\"headerlink\" title=\"多种仓储模式\"></a>多种仓储模式</h3><h4 id=\"IBaseRepository-BaseRepository-模式-适用于小项目-扩展性差\"><a href=\"#IBaseRepository-BaseRepository-模式-适用于小项目-扩展性差\" class=\"headerlink\" title=\"IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)\"></a>IBaseRepository + BaseRepository 模式(适用于小项目,扩展性差)</h4><ul><li>IRepository接口包含了基本的CRUD操作，如果业务中还需要扩展其他操作，只需在IRepository接口中添加。</li><li>Repository实现了IRepository接口。其中ISqlHelp接口包含获取数据库链接字符串的功能，_context为EF或EF Core类库。</li><li>优点是简单、快速，缺点是扩展性差且违反开放-关闭原则（Open-Close Principle）","more":"<h5 id=\"IBaseRepository-cs\"><a href=\"#IBaseRepository-cs\" class=\"headerlink\" title=\"IBaseRepository.cs\"></a>IBaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IBaseRepository&lt;T&gt; where T : class, new()</span><br><span class=\"line\">&#123;     </span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">Query</span>(<span class=\"params\">Espression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"keyword\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"keyword\">int</span> skip, <span class=\"keyword\">int</span> take, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> total</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id=\"BaseRepository-cs\"><a href=\"#BaseRepository-cs\" class=\"headerlink\" title=\"BaseRepository.cs\"></a>BaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseRepository&lt;T&gt; : IBaseRepository&lt;T&gt; where T : class, new() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> DbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseRepository</span>(<span class=\"params\">DbContext context</span>) </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context = context</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>) </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Added;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> createRowCount = _context.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> createRowCount &gt; <span class=\"number\">0</span> ? model : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Modified;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> updateRowAcount = _context.SaveChanges();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateRowAcount &gt; <span class=\"number\">0</span> ? model : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Find(guid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">Query</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().FirstOrDefault(expression);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> model = _context.Set&lt;T&gt;().Find(guid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (model == <span class=\"literal\">null</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(guid));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _context.Entry(model).State = EntityState.Deleted;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.SaveChanges();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> guids)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> model = _context.Set&lt;T&gt;().Find(item);</span><br><span class=\"line\">            _context.Entry(model).State = EntityState.Deleted;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.SaveChanges();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(q =&gt; <span class=\"literal\">true</span>).ToList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"keyword\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"keyword\">int</span> skip, <span class=\"keyword\">int</span> take, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> total</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        total = _context.Set&lt;T&gt;().Where(expression).Count();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (sortOrder)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SortOrder.Ascending:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(expression).OrderBy(sortPredicate).Skip(skip).Take(take).ToList();</span><br><span class=\"line\">                    </span><br><span class=\"line\">            <span class=\"keyword\">case</span> SortOrder.Descending:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _context.Set&lt;T&gt;().Where(expression).OrderByDescending(sortPredicate).Skip(skip).Take(take).ToList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">\"分页查询必须指定排序字段和排序顺序。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"AdminServer-cs\"><a href=\"#AdminServer-cs\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IBaseRepository&lt;User&gt; _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">IBaseRepository&lt;User&gt; adminRepository</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _adminRepository = adminRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateUser</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> admin = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        _adminRepository.Create(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"IBaseRepository-BaseRepository-IRepository-Repository-可扩展性好-未处理并发\"><a href=\"#IBaseRepository-BaseRepository-IRepository-Repository-可扩展性好-未处理并发\" class=\"headerlink\" title=\"IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)\"></a>IBaseRepository+BaseRepository+IRepository+Repository(可扩展性好,未处理并发)</h4><ul><li>将BaseRepository.cs的实现方法上加上virtual关键字,使方法可以重载,每添加一个实体，需要添加对应的接口和实现<h5 id=\"BaseRepository-cs-1\"><a href=\"#BaseRepository-cs-1\" class=\"headerlink\" title=\"BaseRepository.cs\"></a>BaseRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseRepository&lt;T&gt; : IBaseRepository&lt;T&gt; where T : class, new() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数据上下文    </span></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> DbContext _context;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseRepository</span>(<span class=\"params\">DbContext context</span>) </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context = context</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Create</span>(<span class=\"params\">T model</span>) </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Update</span>(<span class=\"params\">T model</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Query</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> T <span class=\"title\">Query</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Delete</span>(<span class=\"params\">Guid guid</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">BatchDelete</span>(<span class=\"params\">IList&lt;Guid&gt; guids</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> List&lt;T&gt; <span class=\"title\">GetAll</span>(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"keyword\">bool</span>&gt;&gt; expression, Expression&lt;Func&lt;T, <span class=\"keyword\">dynamic</span>&gt;&gt; sortPredicate, SortOrder sortOrder, <span class=\"keyword\">int</span> skip, <span class=\"keyword\">int</span> take, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> total</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id=\"IRepository-cs\"><a href=\"#IRepository-cs\" class=\"headerlink\" title=\"IRepository.cs\"></a>IRepository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public partial interface IAdminRepository : IBaseRepository&lt;Admin&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public partial interface IUserRepository : IBaseRepository&lt;User&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Repository-cs\"><a href=\"#Repository-cs\" class=\"headerlink\" title=\"Repository.cs\"></a>Repository.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public partial class AdminRepository : BaseRepository&lt;Admin&gt;,IAdminRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminRepository</span>(<span class=\"params\">ISqlHelp sqlHelp</span>) : <span class=\"title\">base</span>(<span class=\"params\">sqlHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public partial class UserRepository : BaseRepository&lt;User&gt;,IUserRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserRepository</span>(<span class=\"params\">ISqlHelp sqlHelp</span>) : <span class=\"title\">base</span>(<span class=\"params\">sqlHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"AdminServer-cs-1\"><a href=\"#AdminServer-cs-1\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IAdminRepository _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">IAdminRepository adminRepository</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _adminRepository = adminRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateUser</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> admin = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        _adminRepository.Create(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsExist</span>(<span class=\"params\">Admin admin</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _adminRepository.IsExist(admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"仓储模式-工作单元模式-扩展性高，有并发处理需求\"><a href=\"#仓储模式-工作单元模式-扩展性高，有并发处理需求\" class=\"headerlink\" title=\"仓储模式+工作单元模式(扩展性高，有并发处理需求)\"></a>仓储模式+工作单元模式(扩展性高，有并发处理需求)</h4><ul><li>使用工作单元的原因是可以提高数据库写操作负载，并且在仓储模式中可以根据不同的数据库链接字符串读不同的库。<h5 id=\"IUnitOfWork-cs\"><a href=\"#IUnitOfWork-cs\" class=\"headerlink\" title=\"IUnitOfWork.cs\"></a>IUnitOfWork.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IUnitOfWork</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context _context &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 提交所有更改</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\">Task <span class=\"title\">CommitAsync</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Methods</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“新建”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> RegisterNew&lt;T&gt;(T obj)</span><br><span class=\"line\">            where T : class, IEntity;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“更改”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> RegisterModified&lt;T&gt;(T obj)</span><br><span class=\"line\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 将指定的聚合根标注为“删除”状态。</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>需要标注状态的聚合根类型。<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span>需要标注状态的聚合根。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> RegisterDeleted&lt;T&gt;(T obj)</span><br><span class=\"line\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span>;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id=\"UnitOfWork-cs\"><a href=\"#UnitOfWork-cs\" class=\"headerlink\" title=\"UnitOfWork.cs\"></a>UnitOfWork.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UnitOfWork</span> : <span class=\"title\">IUnitOfWork</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> _context _context &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnitOfWork</span>(<span class=\"params\">IContextHelper contextHelp</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _context = contextHelp._context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AdminRepository _adminRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AdminRepository AdminRepository</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _adminRepository ?? <span class=\"keyword\">new</span> AdminRepository(_context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">async</span> Task <span class=\"title\">CommitAsync</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _context.SaveChangesAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (DbUpdateConcurrencyException ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ex.Entries.Single().Reload();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"keyword\">bool</span> disposing</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!disposing) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_context == <span class=\"literal\">null</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _context.Dispose();</span><br><span class=\"line\">        _context = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public virtual void RegisterNew&lt;TEntity&gt;(TEntity obj) where TEntity : class, IEntity</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context.Set&lt;TEntity&gt;().Add(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> RegisterModified&lt;TEntity&gt;(TEntity obj) <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context.Entry(obj).State = EntityState.Modified;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> RegisterDeleted&lt;TEntity&gt;(TEntity obj) <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context.Entry(obj).State = EntityState.Deleted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"AdminServer-cs-2\"><a href=\"#AdminServer-cs-2\" class=\"headerlink\" title=\"AdminServer.cs\"></a>AdminServer.cs</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UnitOfWork unit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdminServer</span>(<span class=\"params\">UnitOfWork unitOfWork</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        unit = unitOfWork;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unit.AdminRepository.GetAll();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->"},{"title":"微服务-Consul学习(二)","date":"2019-03-11T15:43:58.000Z","_content":"上一次学习到了在命令行如何去启动和注册服务.今天学习如何通过Consul Api 接口注册服务.\n<!--more-->\n#### 创建一个.Net Core WebApi项目\n模板选择Api.\n#### 创建HealthController,用于Consul的健康检查\nHealthController.cs\n``` cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace ConsulApiTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class HealthController : ControllerBase\n    {\n        [HttpGet]\n        public IActionResult Get() => Ok(\"ok\");\n    }\n}\n```\n#### 创建ConsulBuilderExtensions,用于注册服务\nConsulBuilderExtensions.cs\n```cs\nusing Consul;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing System;\n\nnamespace ConsulApiTest\n{\n    public static class  ConsulBuilderExtensions\n    {\n        public static IApplicationBuilder RegisterConsul(this IApplicationBuilder app, IApplicationLifetime lifetime, ServiceEntity serviceEntity)\n        {\n            var consulClient = new ConsulClient(x => x.Address = new Uri($\"http://{serviceEntity.ConsulIP}:{serviceEntity.ConsulPort}\"));//请求注册的 Consul 地址\n            var httpCheck = new AgentServiceCheck()\n            {\n                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(5),//服务启动多久后注册\n                Interval = TimeSpan.FromSeconds(10),//健康检查时间间隔，或者称为心跳间隔\n                HTTP = $\"https://{serviceEntity.IP}:{serviceEntity.Port}/api/health\",//健康检查地址 (如果项目没有勾选https的话,把https换成http)\n                Timeout = TimeSpan.FromSeconds(5)\n            };\n\n            // Register service with consul\n            var registration = new AgentServiceRegistration()\n            {\n                Checks = new[] { httpCheck },\n                ID = serviceEntity.ServiceName + \"_\" + serviceEntity.Port,\n                Name = serviceEntity.ServiceName,\n                Address = serviceEntity.IP,\n                Port = serviceEntity.Port,\n                Tags = new[] { $\"urlprefix-/{serviceEntity.ServiceName}\" }//添加 urlprefix-/servicename 格式的 tag 标签，以便 Fabio 识别\n            };\n            consulClient.Agent.ServiceRegister(registration).Wait();//服务启动时注册，内部实现其实就是使用 Consul API 进行注册（HttpClient发起）\n            lifetime.ApplicationStopping.Register(() =>\n            {\n                consulClient.Agent.ServiceDeregister(registration.ID).Wait();//服务停止时取消注册\n            });\n            return app;\n        }\n    }\n}\n```\n##### 注意:\n1. 需引入Consul包\n2. ServiceEntity类,定义如下\nServiceEntity.cs\n```cs\nnamespace ConsulApiTest\n{\n    public class ServiceEntity\n    {\n        public string IP { get; set; }\n        public int Port { get; set; }\n        public string ServiceName { get; set; }\n        public string ConsulIP { get; set; }\n        public int ConsulPort { get; set; }\n    }\n}\n```\n3. appSettings.json配置文件 定义如下\nappSettings.json\n```cs\n{\n  \"Service\": {\n    \"Name\": \"DMSWebAPITest\",\n    \"IP\": \"localhost\",\n    \"Port\": \"44330\"//这里需换成项目运行所使用的端口\n  },\n  \"Consul\": {\n    \"IP\": \"localhost\",\n    \"Port\": \"8500\"\n  }\n}\n```\n#### 在Startup.cs中,调用ConsulBuilderExtensions拓展方法\nStartup.cs\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\n\nnamespace ConsulApiTest\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n        }\n\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseHsts();\n            }\n\n            app.UseHttpsRedirection();\n            app.UseMvc();\n            // 服务注册\n            ServiceEntity serviceEntity = new ServiceEntity\n            {\n                IP = Configuration[\"Service:IP\"],\n                Port = Convert.ToInt32(Configuration[\"Service:Port\"]),  \n                ServiceName = Configuration[\"Service:Name\"],\n                ConsulIP = Configuration[\"Consul:IP\"],\n                ConsulPort = Convert.ToInt32(Configuration[\"Consul:Port\"])\n            };\n            app.RegisterConsul(lifetime, serviceEntity);\n        }\n    }\n}\n\n```\n#### 小结\n* 在学习过程还是遇到一些问题,不过最终还是处理好了,有时候可能需要细心一点\n* 以上实现了通过配置文件注册，API接口注册到Consul实例，后续加入Ocelot构建API网关，到时会结合Consul进行进一步的集成，另外，还会尝试Polly进行熔断降级。","source":"_posts/微服务-Consul学习(二).md","raw":"---\ntitle: 微服务-Consul学习(二)\ndate: 2019-03-11 23:43:58\ncategories: 微服务\ntags: \n - .Net Core\n - 微服务\n---\n上一次学习到了在命令行如何去启动和注册服务.今天学习如何通过Consul Api 接口注册服务.\n<!--more-->\n#### 创建一个.Net Core WebApi项目\n模板选择Api.\n#### 创建HealthController,用于Consul的健康检查\nHealthController.cs\n``` cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace ConsulApiTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class HealthController : ControllerBase\n    {\n        [HttpGet]\n        public IActionResult Get() => Ok(\"ok\");\n    }\n}\n```\n#### 创建ConsulBuilderExtensions,用于注册服务\nConsulBuilderExtensions.cs\n```cs\nusing Consul;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing System;\n\nnamespace ConsulApiTest\n{\n    public static class  ConsulBuilderExtensions\n    {\n        public static IApplicationBuilder RegisterConsul(this IApplicationBuilder app, IApplicationLifetime lifetime, ServiceEntity serviceEntity)\n        {\n            var consulClient = new ConsulClient(x => x.Address = new Uri($\"http://{serviceEntity.ConsulIP}:{serviceEntity.ConsulPort}\"));//请求注册的 Consul 地址\n            var httpCheck = new AgentServiceCheck()\n            {\n                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(5),//服务启动多久后注册\n                Interval = TimeSpan.FromSeconds(10),//健康检查时间间隔，或者称为心跳间隔\n                HTTP = $\"https://{serviceEntity.IP}:{serviceEntity.Port}/api/health\",//健康检查地址 (如果项目没有勾选https的话,把https换成http)\n                Timeout = TimeSpan.FromSeconds(5)\n            };\n\n            // Register service with consul\n            var registration = new AgentServiceRegistration()\n            {\n                Checks = new[] { httpCheck },\n                ID = serviceEntity.ServiceName + \"_\" + serviceEntity.Port,\n                Name = serviceEntity.ServiceName,\n                Address = serviceEntity.IP,\n                Port = serviceEntity.Port,\n                Tags = new[] { $\"urlprefix-/{serviceEntity.ServiceName}\" }//添加 urlprefix-/servicename 格式的 tag 标签，以便 Fabio 识别\n            };\n            consulClient.Agent.ServiceRegister(registration).Wait();//服务启动时注册，内部实现其实就是使用 Consul API 进行注册（HttpClient发起）\n            lifetime.ApplicationStopping.Register(() =>\n            {\n                consulClient.Agent.ServiceDeregister(registration.ID).Wait();//服务停止时取消注册\n            });\n            return app;\n        }\n    }\n}\n```\n##### 注意:\n1. 需引入Consul包\n2. ServiceEntity类,定义如下\nServiceEntity.cs\n```cs\nnamespace ConsulApiTest\n{\n    public class ServiceEntity\n    {\n        public string IP { get; set; }\n        public int Port { get; set; }\n        public string ServiceName { get; set; }\n        public string ConsulIP { get; set; }\n        public int ConsulPort { get; set; }\n    }\n}\n```\n3. appSettings.json配置文件 定义如下\nappSettings.json\n```cs\n{\n  \"Service\": {\n    \"Name\": \"DMSWebAPITest\",\n    \"IP\": \"localhost\",\n    \"Port\": \"44330\"//这里需换成项目运行所使用的端口\n  },\n  \"Consul\": {\n    \"IP\": \"localhost\",\n    \"Port\": \"8500\"\n  }\n}\n```\n#### 在Startup.cs中,调用ConsulBuilderExtensions拓展方法\nStartup.cs\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\n\nnamespace ConsulApiTest\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n        }\n\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseHsts();\n            }\n\n            app.UseHttpsRedirection();\n            app.UseMvc();\n            // 服务注册\n            ServiceEntity serviceEntity = new ServiceEntity\n            {\n                IP = Configuration[\"Service:IP\"],\n                Port = Convert.ToInt32(Configuration[\"Service:Port\"]),  \n                ServiceName = Configuration[\"Service:Name\"],\n                ConsulIP = Configuration[\"Consul:IP\"],\n                ConsulPort = Convert.ToInt32(Configuration[\"Consul:Port\"])\n            };\n            app.RegisterConsul(lifetime, serviceEntity);\n        }\n    }\n}\n\n```\n#### 小结\n* 在学习过程还是遇到一些问题,不过最终还是处理好了,有时候可能需要细心一点\n* 以上实现了通过配置文件注册，API接口注册到Consul实例，后续加入Ocelot构建API网关，到时会结合Consul进行进一步的集成，另外，还会尝试Polly进行熔断降级。","slug":"微服务-Consul学习(二)","published":1,"updated":"2019-03-11T16:08:32.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24d005wtkui4h84i0rg","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>上一次学习到了在命令行如何去启动和注册服务.今天学习如何通过Consul Api 接口注册服务.<br><a id=\"more\"></a></p><h4 id=\"创建一个-Net-Core-WebApi项目\"><a href=\"#创建一个-Net-Core-WebApi项目\" class=\"headerlink\" title=\"创建一个.Net Core WebApi项目\"></a>创建一个.Net Core WebApi项目</h4><p>模板选择Api.</p><h4 id=\"创建HealthController-用于Consul的健康检查\"><a href=\"#创建HealthController-用于Consul的健康检查\" class=\"headerlink\" title=\"创建HealthController,用于Consul的健康检查\"></a>创建HealthController,用于Consul的健康检查</h4><p>HealthController.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HealthController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Get</span>(<span class=\"params\"></span>) </span>=&gt; Ok(<span class=\"string\">\"ok\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"创建ConsulBuilderExtensions-用于注册服务\"><a href=\"#创建ConsulBuilderExtensions-用于注册服务\" class=\"headerlink\" title=\"创建ConsulBuilderExtensions,用于注册服务\"></a>创建ConsulBuilderExtensions,用于注册服务</h4><p>ConsulBuilderExtensions.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Consul;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span>  <span class=\"title\">ConsulBuilderExtensions</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">RegisterConsul</span>(<span class=\"params\"><span class=\"keyword\">this</span> IApplicationBuilder app, IApplicationLifetime lifetime, ServiceEntity serviceEntity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> consulClient = <span class=\"keyword\">new</span> ConsulClient(x =&gt; x.Address = <span class=\"keyword\">new</span> Uri(<span class=\"string\">$\"http://<span class=\"subst\">&#123;serviceEntity.ConsulIP&#125;</span>:<span class=\"subst\">&#123;serviceEntity.ConsulPort&#125;</span>\"</span>));<span class=\"comment\">//请求注册的 Consul 地址</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> httpCheck = <span class=\"keyword\">new</span> AgentServiceCheck()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(<span class=\"number\">5</span>),<span class=\"comment\">//服务启动多久后注册</span></span><br><span class=\"line\">                Interval = TimeSpan.FromSeconds(<span class=\"number\">10</span>),<span class=\"comment\">//健康检查时间间隔，或者称为心跳间隔</span></span><br><span class=\"line\">                HTTP = <span class=\"string\">$\"https://<span class=\"subst\">&#123;serviceEntity.IP&#125;</span>:<span class=\"subst\">&#123;serviceEntity.Port&#125;</span>/api/health\"</span>,<span class=\"comment\">//健康检查地址 (如果项目没有勾选https的话,把https换成http)</span></span><br><span class=\"line\">                Timeout = TimeSpan.FromSeconds(<span class=\"number\">5</span>)</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Register service with consul</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> registration = <span class=\"keyword\">new</span> AgentServiceRegistration()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Checks = <span class=\"keyword\">new</span>[] &#123; httpCheck &#125;,</span><br><span class=\"line\">                ID = serviceEntity.ServiceName + <span class=\"string\">\"_\"</span> + serviceEntity.Port,</span><br><span class=\"line\">                Name = serviceEntity.ServiceName,</span><br><span class=\"line\">                Address = serviceEntity.IP,</span><br><span class=\"line\">                Port = serviceEntity.Port,</span><br><span class=\"line\">                Tags = <span class=\"keyword\">new</span>[] &#123; <span class=\"string\">$\"urlprefix-/<span class=\"subst\">&#123;serviceEntity.ServiceName&#125;</span>\"</span> &#125;<span class=\"comment\">//添加 urlprefix-/servicename 格式的 tag 标签，以便 Fabio 识别</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            consulClient.Agent.ServiceRegister(registration).Wait();<span class=\"comment\">//服务启动时注册，内部实现其实就是使用 Consul API 进行注册（HttpClient发起）</span></span><br><span class=\"line\">            lifetime.ApplicationStopping.Register(() =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                consulClient.Agent.ServiceDeregister(registration.ID).Wait();<span class=\"comment\">//服务停止时取消注册</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> app;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h5><ol><li>需引入Consul包</li><li><p>ServiceEntity类,定义如下<br>ServiceEntity.cs</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ServiceEntity</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> IP &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Port &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ServiceName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ConsulIP &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ConsulPort &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>appSettings.json配置文件 定义如下<br>appSettings.json</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"Service\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"DMSWebAPITest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"IP\"</span>: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Port\"</span>: <span class=\"string\">\"44330\"</span><span class=\"comment\">//这里需换成项目运行所使用的端口</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"Consul\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"IP\"</span>: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Port\"</span>: <span class=\"string\">\"8500\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"在Startup-cs中-调用ConsulBuilderExtensions拓展方法\"><a href=\"#在Startup-cs中-调用ConsulBuilderExtensions拓展方法\" class=\"headerlink\" title=\"在Startup.cs中,调用ConsulBuilderExtensions拓展方法\"></a>在Startup.cs中,调用ConsulBuilderExtensions拓展方法</h4><p>Startup.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Configuration = configuration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseDeveloperExceptionPage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseHsts();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            app.UseHttpsRedirection();</span><br><span class=\"line\">            app.UseMvc();</span><br><span class=\"line\">            <span class=\"comment\">// 服务注册</span></span><br><span class=\"line\">            ServiceEntity serviceEntity = <span class=\"keyword\">new</span> ServiceEntity</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                IP = Configuration[<span class=\"string\">\"Service:IP\"</span>],</span><br><span class=\"line\">                Port = Convert.ToInt32(Configuration[<span class=\"string\">\"Service:Port\"</span>]),  </span><br><span class=\"line\">                ServiceName = Configuration[<span class=\"string\">\"Service:Name\"</span>],</span><br><span class=\"line\">                ConsulIP = Configuration[<span class=\"string\">\"Consul:IP\"</span>],</span><br><span class=\"line\">                ConsulPort = Convert.ToInt32(Configuration[<span class=\"string\">\"Consul:Port\"</span>])</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            app.RegisterConsul(lifetime, serviceEntity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul><li>在学习过程还是遇到一些问题,不过最终还是处理好了,有时候可能需要细心一点</li><li>以上实现了通过配置文件注册，API接口注册到Consul实例，后续加入Ocelot构建API网关，到时会结合Consul进行进一步的集成，另外，还会尝试Polly进行熔断降级。</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>上一次学习到了在命令行如何去启动和注册服务.今天学习如何通过Consul Api 接口注册服务.<br>","more":"</p><h4 id=\"创建一个-Net-Core-WebApi项目\"><a href=\"#创建一个-Net-Core-WebApi项目\" class=\"headerlink\" title=\"创建一个.Net Core WebApi项目\"></a>创建一个.Net Core WebApi项目</h4><p>模板选择Api.</p><h4 id=\"创建HealthController-用于Consul的健康检查\"><a href=\"#创建HealthController-用于Consul的健康检查\" class=\"headerlink\" title=\"创建HealthController,用于Consul的健康检查\"></a>创建HealthController,用于Consul的健康检查</h4><p>HealthController.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HealthController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Get</span>(<span class=\"params\"></span>) </span>=&gt; Ok(<span class=\"string\">\"ok\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"创建ConsulBuilderExtensions-用于注册服务\"><a href=\"#创建ConsulBuilderExtensions-用于注册服务\" class=\"headerlink\" title=\"创建ConsulBuilderExtensions,用于注册服务\"></a>创建ConsulBuilderExtensions,用于注册服务</h4><p>ConsulBuilderExtensions.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Consul;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span>  <span class=\"title\">ConsulBuilderExtensions</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">RegisterConsul</span>(<span class=\"params\"><span class=\"keyword\">this</span> IApplicationBuilder app, IApplicationLifetime lifetime, ServiceEntity serviceEntity</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> consulClient = <span class=\"keyword\">new</span> ConsulClient(x =&gt; x.Address = <span class=\"keyword\">new</span> Uri(<span class=\"string\">$\"http://<span class=\"subst\">&#123;serviceEntity.ConsulIP&#125;</span>:<span class=\"subst\">&#123;serviceEntity.ConsulPort&#125;</span>\"</span>));<span class=\"comment\">//请求注册的 Consul 地址</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> httpCheck = <span class=\"keyword\">new</span> AgentServiceCheck()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(<span class=\"number\">5</span>),<span class=\"comment\">//服务启动多久后注册</span></span><br><span class=\"line\">                Interval = TimeSpan.FromSeconds(<span class=\"number\">10</span>),<span class=\"comment\">//健康检查时间间隔，或者称为心跳间隔</span></span><br><span class=\"line\">                HTTP = <span class=\"string\">$\"https://<span class=\"subst\">&#123;serviceEntity.IP&#125;</span>:<span class=\"subst\">&#123;serviceEntity.Port&#125;</span>/api/health\"</span>,<span class=\"comment\">//健康检查地址 (如果项目没有勾选https的话,把https换成http)</span></span><br><span class=\"line\">                Timeout = TimeSpan.FromSeconds(<span class=\"number\">5</span>)</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Register service with consul</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> registration = <span class=\"keyword\">new</span> AgentServiceRegistration()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Checks = <span class=\"keyword\">new</span>[] &#123; httpCheck &#125;,</span><br><span class=\"line\">                ID = serviceEntity.ServiceName + <span class=\"string\">\"_\"</span> + serviceEntity.Port,</span><br><span class=\"line\">                Name = serviceEntity.ServiceName,</span><br><span class=\"line\">                Address = serviceEntity.IP,</span><br><span class=\"line\">                Port = serviceEntity.Port,</span><br><span class=\"line\">                Tags = <span class=\"keyword\">new</span>[] &#123; <span class=\"string\">$\"urlprefix-/<span class=\"subst\">&#123;serviceEntity.ServiceName&#125;</span>\"</span> &#125;<span class=\"comment\">//添加 urlprefix-/servicename 格式的 tag 标签，以便 Fabio 识别</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            consulClient.Agent.ServiceRegister(registration).Wait();<span class=\"comment\">//服务启动时注册，内部实现其实就是使用 Consul API 进行注册（HttpClient发起）</span></span><br><span class=\"line\">            lifetime.ApplicationStopping.Register(() =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                consulClient.Agent.ServiceDeregister(registration.ID).Wait();<span class=\"comment\">//服务停止时取消注册</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> app;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h5><ol><li>需引入Consul包</li><li><p>ServiceEntity类,定义如下<br>ServiceEntity.cs</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ServiceEntity</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> IP &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Port &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ServiceName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ConsulIP &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ConsulPort &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>appSettings.json配置文件 定义如下<br>appSettings.json</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"Service\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"DMSWebAPITest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"IP\"</span>: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Port\"</span>: <span class=\"string\">\"44330\"</span><span class=\"comment\">//这里需换成项目运行所使用的端口</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"Consul\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"IP\"</span>: <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Port\"</span>: <span class=\"string\">\"8500\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"在Startup-cs中-调用ConsulBuilderExtensions拓展方法\"><a href=\"#在Startup-cs中-调用ConsulBuilderExtensions拓展方法\" class=\"headerlink\" title=\"在Startup.cs中,调用ConsulBuilderExtensions拓展方法\"></a>在Startup.cs中,调用ConsulBuilderExtensions拓展方法</h4><p>Startup.cs<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsulApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Configuration = configuration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseDeveloperExceptionPage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseHsts();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            app.UseHttpsRedirection();</span><br><span class=\"line\">            app.UseMvc();</span><br><span class=\"line\">            <span class=\"comment\">// 服务注册</span></span><br><span class=\"line\">            ServiceEntity serviceEntity = <span class=\"keyword\">new</span> ServiceEntity</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                IP = Configuration[<span class=\"string\">\"Service:IP\"</span>],</span><br><span class=\"line\">                Port = Convert.ToInt32(Configuration[<span class=\"string\">\"Service:Port\"</span>]),  </span><br><span class=\"line\">                ServiceName = Configuration[<span class=\"string\">\"Service:Name\"</span>],</span><br><span class=\"line\">                ConsulIP = Configuration[<span class=\"string\">\"Consul:IP\"</span>],</span><br><span class=\"line\">                ConsulPort = Convert.ToInt32(Configuration[<span class=\"string\">\"Consul:Port\"</span>])</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            app.RegisterConsul(lifetime, serviceEntity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul><li>在学习过程还是遇到一些问题,不过最终还是处理好了,有时候可能需要细心一点</li><li>以上实现了通过配置文件注册，API接口注册到Consul实例，后续加入Ocelot构建API网关，到时会结合Consul进行进一步的集成，另外，还会尝试Polly进行熔断降级。</li></ul><!-- rebuild by neat -->"},{"title":"小猫的胡言乱语","date":"2019-07-13T13:41:15.000Z","_content":"#### 阴霾\n最近公司的事情不是很多,于是有时间开始胡思乱想了.\n<!--more-->\n在现在公司也快一年了,一开始进来的时候,说是满一年会有调薪,但是今年开年后,公司的许多制度都在调整改变,那么加薪制度自然也是难逃魔爪.私下和同事的了解,发现有些比我早几个月进公司的人也还没有加薪,这样心中难免会有一丝阴霾.毕竟当初进来有一部分也是冲着那允诺不低的加薪政策.\n\n另一方面也是感觉现在的公司更重视的业务而非技术,并不需要你的技术能力有多强,因为大部分的系统界面和功能都是可以直接从其他系统复制粘贴,再修改细节和逻辑就好了.感觉这并不算是我想要的生活\n\n#### 阳光\n感到了迷茫,感觉自己的努力不知道有什么用.此时身边的小伙伴说了句,改变不是说一定会给你带来什么，但是一定不会是现在这样,最不济也是和现在一样.听到这句话,想起了自己最喜欢的一本网游小说的一段话\n> 努力，只不过是获得一次机会。\n若是将出身看成是人生的第一次掷骰子，掷到平凡，你别无选择，那么努力，并非是让你马上掷到富贵、成名与成功，而是从老天那里获得再掷一次的机会。\n这个再掷一次的结果，有可能还是平凡，也有可能就是获得你想要的。\n\n就是这样的,你只管往前走，天自己会亮！\n\n#### 布里丹毛驴效应\n选择之前不犹豫,选择之后不后悔.\n\n现在我还没有打算选择,可能在加薪政策出来以后就会有一次选择了吧,那时的我应该不会再犹豫了,因为最差不过就是打回原形吧.","source":"_posts/小猫的胡言乱语.md","raw":"---\ntitle: 小猫的胡言乱语\ndate: 2019-07-13 21:41:15\ncategories: 随笔\ntags:\n - 随笔\n---\n#### 阴霾\n最近公司的事情不是很多,于是有时间开始胡思乱想了.\n<!--more-->\n在现在公司也快一年了,一开始进来的时候,说是满一年会有调薪,但是今年开年后,公司的许多制度都在调整改变,那么加薪制度自然也是难逃魔爪.私下和同事的了解,发现有些比我早几个月进公司的人也还没有加薪,这样心中难免会有一丝阴霾.毕竟当初进来有一部分也是冲着那允诺不低的加薪政策.\n\n另一方面也是感觉现在的公司更重视的业务而非技术,并不需要你的技术能力有多强,因为大部分的系统界面和功能都是可以直接从其他系统复制粘贴,再修改细节和逻辑就好了.感觉这并不算是我想要的生活\n\n#### 阳光\n感到了迷茫,感觉自己的努力不知道有什么用.此时身边的小伙伴说了句,改变不是说一定会给你带来什么，但是一定不会是现在这样,最不济也是和现在一样.听到这句话,想起了自己最喜欢的一本网游小说的一段话\n> 努力，只不过是获得一次机会。\n若是将出身看成是人生的第一次掷骰子，掷到平凡，你别无选择，那么努力，并非是让你马上掷到富贵、成名与成功，而是从老天那里获得再掷一次的机会。\n这个再掷一次的结果，有可能还是平凡，也有可能就是获得你想要的。\n\n就是这样的,你只管往前走，天自己会亮！\n\n#### 布里丹毛驴效应\n选择之前不犹豫,选择之后不后悔.\n\n现在我还没有打算选择,可能在加薪政策出来以后就会有一次选择了吧,那时的我应该不会再犹豫了,因为最差不过就是打回原形吧.","slug":"小猫的胡言乱语","published":1,"updated":"2019-07-13T14:37:33.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24f005ztkuij7jg8qkc","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"阴霾\"><a href=\"#阴霾\" class=\"headerlink\" title=\"阴霾\"></a>阴霾</h4><p>最近公司的事情不是很多,于是有时间开始胡思乱想了.<br><a id=\"more\"></a><br>在现在公司也快一年了,一开始进来的时候,说是满一年会有调薪,但是今年开年后,公司的许多制度都在调整改变,那么加薪制度自然也是难逃魔爪.私下和同事的了解,发现有些比我早几个月进公司的人也还没有加薪,这样心中难免会有一丝阴霾.毕竟当初进来有一部分也是冲着那允诺不低的加薪政策.</p><p>另一方面也是感觉现在的公司更重视的业务而非技术,并不需要你的技术能力有多强,因为大部分的系统界面和功能都是可以直接从其他系统复制粘贴,再修改细节和逻辑就好了.感觉这并不算是我想要的生活</p><h4 id=\"阳光\"><a href=\"#阳光\" class=\"headerlink\" title=\"阳光\"></a>阳光</h4><p>感到了迷茫,感觉自己的努力不知道有什么用.此时身边的小伙伴说了句,改变不是说一定会给你带来什么，但是一定不会是现在这样,最不济也是和现在一样.听到这句话,想起了自己最喜欢的一本网游小说的一段话</p><blockquote><p>努力，只不过是获得一次机会。<br>若是将出身看成是人生的第一次掷骰子，掷到平凡，你别无选择，那么努力，并非是让你马上掷到富贵、成名与成功，而是从老天那里获得再掷一次的机会。<br>这个再掷一次的结果，有可能还是平凡，也有可能就是获得你想要的。</p></blockquote><p>就是这样的,你只管往前走，天自己会亮！</p><h4 id=\"布里丹毛驴效应\"><a href=\"#布里丹毛驴效应\" class=\"headerlink\" title=\"布里丹毛驴效应\"></a>布里丹毛驴效应</h4><p>选择之前不犹豫,选择之后不后悔.</p><p>现在我还没有打算选择,可能在加薪政策出来以后就会有一次选择了吧,那时的我应该不会再犹豫了,因为最差不过就是打回原形吧.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"阴霾\"><a href=\"#阴霾\" class=\"headerlink\" title=\"阴霾\"></a>阴霾</h4><p>最近公司的事情不是很多,于是有时间开始胡思乱想了.<br>","more":"<br>在现在公司也快一年了,一开始进来的时候,说是满一年会有调薪,但是今年开年后,公司的许多制度都在调整改变,那么加薪制度自然也是难逃魔爪.私下和同事的了解,发现有些比我早几个月进公司的人也还没有加薪,这样心中难免会有一丝阴霾.毕竟当初进来有一部分也是冲着那允诺不低的加薪政策.</p><p>另一方面也是感觉现在的公司更重视的业务而非技术,并不需要你的技术能力有多强,因为大部分的系统界面和功能都是可以直接从其他系统复制粘贴,再修改细节和逻辑就好了.感觉这并不算是我想要的生活</p><h4 id=\"阳光\"><a href=\"#阳光\" class=\"headerlink\" title=\"阳光\"></a>阳光</h4><p>感到了迷茫,感觉自己的努力不知道有什么用.此时身边的小伙伴说了句,改变不是说一定会给你带来什么，但是一定不会是现在这样,最不济也是和现在一样.听到这句话,想起了自己最喜欢的一本网游小说的一段话</p><blockquote><p>努力，只不过是获得一次机会。<br>若是将出身看成是人生的第一次掷骰子，掷到平凡，你别无选择，那么努力，并非是让你马上掷到富贵、成名与成功，而是从老天那里获得再掷一次的机会。<br>这个再掷一次的结果，有可能还是平凡，也有可能就是获得你想要的。</p></blockquote><p>就是这样的,你只管往前走，天自己会亮！</p><h4 id=\"布里丹毛驴效应\"><a href=\"#布里丹毛驴效应\" class=\"headerlink\" title=\"布里丹毛驴效应\"></a>布里丹毛驴效应</h4><p>选择之前不犹豫,选择之后不后悔.</p><p>现在我还没有打算选择,可能在加薪政策出来以后就会有一次选择了吧,那时的我应该不会再犹豫了,因为最差不过就是打回原形吧.</p><!-- rebuild by neat -->"},{"title":"微服务-Consul学习","date":"2019-03-05T15:18:12.000Z","_content":"#### Consul介绍：\n> Consul 是由 HashiCorp 公司推出的开源软件，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。Consul使用Go语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与Docker等轻量级容器可无缝配合 。\n<!--more-->\n#### Consul安装\n从consul官网 https://www.consul.io/downloads.html 进行下载就好（选择好OS和位数）\n1. 解压下载好的压缩文件\n2. Windows需配置环境变量path.\n3. 查看是否安装成功\n直接在家目录下执行consul命令即可。出现usage: consul [--version] [--help] <command> [<args>]等字样，表示安装成功。\n#### Consul启动\n1. 运行命令\n```\nconsul agent -dev //-dev表示开发模式运行，-server表示服务模式运行\n```\n2. 查看consul cluster中的每一个consul节点的信息\n```\nconsul members //信息说明 Address：节点地址 Status：alive表示节点健康 Type：server运行状态是server状态 DC：dc1表示该节点属于DataCenter1 \n```\n3. 访问Consul\nhttp://127.0.0.1:8500/ui/\n4. 停止服务\nCTRL+C\n#### 常用命令\n\n| 命令 | 说明 | 示例 |\n| :------: | :------: | :------: |\n| agent | 运行一个consul agent | consul agent -dev |\n| join | 将agent加入到consul集群 | consul join IP |\n| agent | 列出consul cluster集群中的节点 | consul members |\n| agent | 将节点移除所在集群 | consul leave |\n#### consul agent 命令常用选项\n* -data-dir 指定agent储存状态的数据目录(必须)\n* -config-dir 指定service的配置文件和检查定义所在的位置\n* -config-file 指定一个要装载的配置文件\n* -dev 创建开发环境的server节点\n* -bootstrap-expect 预加入的server节点个数,在指定数量节点加入后启动\n* -node 指定节点在集群的名称\n* -bind 指定节点IP地址\n* -server 指定节点为server\n* -client 指定节点为client(后面接IP 可指定允许客户端使用什么IP去访问)\n* -join 将节点加入集群\n* -datecenter 指点节点加入哪个数据中心\n","source":"_posts/微服务-Consul学习.md","raw":"---\ntitle: 微服务-Consul学习\ndate: 2019-03-05 23:18:12\ncategories: 微服务\ntags: \n - .Net Core\n - 微服务\n---\n#### Consul介绍：\n> Consul 是由 HashiCorp 公司推出的开源软件，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。Consul使用Go语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与Docker等轻量级容器可无缝配合 。\n<!--more-->\n#### Consul安装\n从consul官网 https://www.consul.io/downloads.html 进行下载就好（选择好OS和位数）\n1. 解压下载好的压缩文件\n2. Windows需配置环境变量path.\n3. 查看是否安装成功\n直接在家目录下执行consul命令即可。出现usage: consul [--version] [--help] <command> [<args>]等字样，表示安装成功。\n#### Consul启动\n1. 运行命令\n```\nconsul agent -dev //-dev表示开发模式运行，-server表示服务模式运行\n```\n2. 查看consul cluster中的每一个consul节点的信息\n```\nconsul members //信息说明 Address：节点地址 Status：alive表示节点健康 Type：server运行状态是server状态 DC：dc1表示该节点属于DataCenter1 \n```\n3. 访问Consul\nhttp://127.0.0.1:8500/ui/\n4. 停止服务\nCTRL+C\n#### 常用命令\n\n| 命令 | 说明 | 示例 |\n| :------: | :------: | :------: |\n| agent | 运行一个consul agent | consul agent -dev |\n| join | 将agent加入到consul集群 | consul join IP |\n| agent | 列出consul cluster集群中的节点 | consul members |\n| agent | 将节点移除所在集群 | consul leave |\n#### consul agent 命令常用选项\n* -data-dir 指定agent储存状态的数据目录(必须)\n* -config-dir 指定service的配置文件和检查定义所在的位置\n* -config-file 指定一个要装载的配置文件\n* -dev 创建开发环境的server节点\n* -bootstrap-expect 预加入的server节点个数,在指定数量节点加入后启动\n* -node 指定节点在集群的名称\n* -bind 指定节点IP地址\n* -server 指定节点为server\n* -client 指定节点为client(后面接IP 可指定允许客户端使用什么IP去访问)\n* -join 将节点加入集群\n* -datecenter 指点节点加入哪个数据中心\n","slug":"微服务-Consul学习","published":1,"updated":"2019-03-08T15:31:17.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24g0062tkuin1f7pjfp","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"Consul介绍：\"><a href=\"#Consul介绍：\" class=\"headerlink\" title=\"Consul介绍：\"></a>Consul介绍：</h4><blockquote><p>Consul 是由 HashiCorp 公司推出的开源软件，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。Consul使用Go语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与Docker等轻量级容器可无缝配合 。<br><a id=\"more\"></a></p></blockquote><h4 id=\"Consul安装\"><a href=\"#Consul安装\" class=\"headerlink\" title=\"Consul安装\"></a>Consul安装</h4><p>从consul官网 <a href=\"https://www.consul.io/downloads.html\" target=\"_blank\" rel=\"noopener\">https://www.consul.io/downloads.html</a> 进行下载就好（选择好OS和位数）</p><ol><li>解压下载好的压缩文件</li><li>Windows需配置环境变量path.</li><li>查看是否安装成功<br>直接在家目录下执行consul命令即可。出现usage: consul [–version] [–help]<command>[<args>]等字样，表示安装成功。<h4 id=\"Consul启动\"><a href=\"#Consul启动\" class=\"headerlink\" title=\"Consul启动\"></a>Consul启动</h4></args></li><li><p>运行命令</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent -dev //-dev表示开发模式运行，-server表示服务模式运行</span><br></pre></td></tr></table></figure></li><li><p>查看consul cluster中的每一个consul节点的信息</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul members //信息说明 Address：节点地址 Status：alive表示节点健康 Type：server运行状态是server状态 DC：dc1表示该节点属于DataCenter1</span><br></pre></td></tr></table></figure></li><li><p>访问Consul<br><a href=\"http://127.0.0.1:8500/ui/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8500/ui/</a></p></li><li>停止服务<br>CTRL+C<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4></li></ol><table><thead><tr><th style=\"text-align:center\">命令</th><th style=\"text-align:center\">说明</th><th style=\"text-align:center\">示例</th></tr></thead><tbody><tr><td style=\"text-align:center\">agent</td><td style=\"text-align:center\">运行一个consul agent</td><td style=\"text-align:center\">consul agent -dev</td></tr><tr><td style=\"text-align:center\">join</td><td style=\"text-align:center\">将agent加入到consul集群</td><td style=\"text-align:center\">consul join IP</td></tr><tr><td style=\"text-align:center\">agent</td><td style=\"text-align:center\">列出consul cluster集群中的节点</td><td style=\"text-align:center\">consul members</td></tr><tr><td style=\"text-align:center\">agent</td><td style=\"text-align:center\">将节点移除所在集群</td><td style=\"text-align:center\">consul leave</td></tr></tbody></table><h4 id=\"consul-agent-命令常用选项\"><a href=\"#consul-agent-命令常用选项\" class=\"headerlink\" title=\"consul agent 命令常用选项\"></a>consul agent 命令常用选项</h4><ul><li>-data-dir 指定agent储存状态的数据目录(必须)</li><li>-config-dir 指定service的配置文件和检查定义所在的位置</li><li>-config-file 指定一个要装载的配置文件</li><li>-dev 创建开发环境的server节点</li><li>-bootstrap-expect 预加入的server节点个数,在指定数量节点加入后启动</li><li>-node 指定节点在集群的名称</li><li>-bind 指定节点IP地址</li><li>-server 指定节点为server</li><li>-client 指定节点为client(后面接IP 可指定允许客户端使用什么IP去访问)</li><li>-join 将节点加入集群</li><li>-datecenter 指点节点加入哪个数据中心</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"Consul介绍：\"><a href=\"#Consul介绍：\" class=\"headerlink\" title=\"Consul介绍：\"></a>Consul介绍：</h4><blockquote><p>Consul 是由 HashiCorp 公司推出的开源软件，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。Consul使用Go语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与Docker等轻量级容器可无缝配合 。<br>","more":"</p></blockquote><h4 id=\"Consul安装\"><a href=\"#Consul安装\" class=\"headerlink\" title=\"Consul安装\"></a>Consul安装</h4><p>从consul官网 <a href=\"https://www.consul.io/downloads.html\" target=\"_blank\" rel=\"noopener\">https://www.consul.io/downloads.html</a> 进行下载就好（选择好OS和位数）</p><ol><li>解压下载好的压缩文件</li><li>Windows需配置环境变量path.</li><li>查看是否安装成功<br>直接在家目录下执行consul命令即可。出现usage: consul [–version] [–help]<command>[<args>]等字样，表示安装成功。<h4 id=\"Consul启动\"><a href=\"#Consul启动\" class=\"headerlink\" title=\"Consul启动\"></a>Consul启动</h4></args></li><li><p>运行命令</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent -dev //-dev表示开发模式运行，-server表示服务模式运行</span><br></pre></td></tr></table></figure></li><li><p>查看consul cluster中的每一个consul节点的信息</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul members //信息说明 Address：节点地址 Status：alive表示节点健康 Type：server运行状态是server状态 DC：dc1表示该节点属于DataCenter1</span><br></pre></td></tr></table></figure></li><li><p>访问Consul<br><a href=\"http://127.0.0.1:8500/ui/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8500/ui/</a></p></li><li>停止服务<br>CTRL+C<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4></li></ol><table><thead><tr><th style=\"text-align:center\">命令</th><th style=\"text-align:center\">说明</th><th style=\"text-align:center\">示例</th></tr></thead><tbody><tr><td style=\"text-align:center\">agent</td><td style=\"text-align:center\">运行一个consul agent</td><td style=\"text-align:center\">consul agent -dev</td></tr><tr><td style=\"text-align:center\">join</td><td style=\"text-align:center\">将agent加入到consul集群</td><td style=\"text-align:center\">consul join IP</td></tr><tr><td style=\"text-align:center\">agent</td><td style=\"text-align:center\">列出consul cluster集群中的节点</td><td style=\"text-align:center\">consul members</td></tr><tr><td style=\"text-align:center\">agent</td><td style=\"text-align:center\">将节点移除所在集群</td><td style=\"text-align:center\">consul leave</td></tr></tbody></table><h4 id=\"consul-agent-命令常用选项\"><a href=\"#consul-agent-命令常用选项\" class=\"headerlink\" title=\"consul agent 命令常用选项\"></a>consul agent 命令常用选项</h4><ul><li>-data-dir 指定agent储存状态的数据目录(必须)</li><li>-config-dir 指定service的配置文件和检查定义所在的位置</li><li>-config-file 指定一个要装载的配置文件</li><li>-dev 创建开发环境的server节点</li><li>-bootstrap-expect 预加入的server节点个数,在指定数量节点加入后启动</li><li>-node 指定节点在集群的名称</li><li>-bind 指定节点IP地址</li><li>-server 指定节点为server</li><li>-client 指定节点为client(后面接IP 可指定允许客户端使用什么IP去访问)</li><li>-join 将节点加入集群</li><li>-datecenter 指点节点加入哪个数据中心</li></ul><!-- rebuild by neat -->"},{"title":"直觉泵-关于意义和内容思考工具(三)","date":"2020-01-08T15:02:50.000Z","_content":"\n今天要介绍剩下的关于意义和内容思考工具(近似算子、神奇组织、身陷机器人控制室).\n\n<!--more-->\n\n#### 近似算子  达尔文渐进主义的启示\n\n因为一旦要对各层级的功能运作做出分析或综合评价,我们就需要针对那个层级,追问着两个问题:它是什么?它都做些什么?\"它是什么\"是指其组成部分的结构组织,前提是这些组成部分都能如我们假设的那样发挥它们的功能.\"它能做些什么\"是指,它可以将一些近似认知的功能实现得很好,让我们能否在一个更高的水平上安心工作,因为我们相信脚下踩着的这块基石一定可以很好地发挥自己的功能、被很好地利用.\n\n在认知科学中,我们会将近似算子看作是达尔文进化论中渐进主义的一种平行理论.有细菌之前会先有近似细菌,有哺乳动物之前会先有近似哺乳动物,有狗之前也会先有近似狗的动物出现,如此等等.\n\n构成猿猴和苹果的基础成分都大同小异,不同的是这些成分的构造方式,还有各个层级的功能对它们的开发利用.\n\n我们从意向立场出发,开始追溯每一层级上近似理性行动者的信念和欲望,或者近似信念和近似欲望,从最简单的细菌到动物,从海星到天文学家,追溯组成大脑的识别、标记、比较和记忆回路,但即使追溯到人类这一层级,我们也没能明确地找到真正形成\"理解\"的那个点.\n\n#### 神奇组织  不要为逃避难题而求助于\"魔法\"\n\n神奇组织:神经组织中的动态属性可以利用某种科学无法解释的潜在力量,做出一些让你觉得神奇的事情.\n\n计算机在清楚解释食物方面扮演着非常重要的角色,不管是飓风、房地产泡沫、艾滋病病毒,还是人类意识,在理解事物时,我们有充足的理由要首先去开发它们的计算机模型.\n\n神奇组织这一概念作为一件思考工具,它的功能类似于警察的警棍:你拿警棍惩罚别人,警示他们不要使用不正当的理论.当然就像你可能滥用警棍一样,你也可能滥用这个概念.\n\n反对神奇组织的主要理由是:它提供给我们的事一种逃避问题的方法,而不是解决问题的方法,因为神奇组织预设了这是一个根本无法解决的神秘问题\n\n#### 身陷机器人控制室  初长成的大脑不是一块\"白板\"\n\n对于大脑来说,输入的信息是与输出相连接的,大脑本身就拥有一些能力,知道要去认识什么,知道怎样才能使各种连接变得更加合理.这项任务是提前完成了的.这也是以另外一种形式证实了那个广为人知的说法,初长成的大脑不是\"白板\"一块,它已然经历了自然选择的雕琢,自身体现着各式的偏好、预设和衔联,而且,有些合适的连接是提前内置的,无需标注.\n\n在理解产生之前,先要有一些不需要理解的能力出现,这是自然选择.自然选择的车轮滚滚向前,一路上造就出了无数精巧能干的事物,这个过程也不包含任何理解.\n\n我们成年人具有的那种理解能力是进化史近期才出现的一种景象,它是由一些结构组合生成,而这些结构所具有的能力也是由鱼或者蠕虫所有的那种类似理解力发展而来的.大部分时间里,这些解构发挥着应有的作用,但它们并不需要知道自己为什么会那样发挥作用.\n","source":"_posts/直觉泵-关于意义和内容思考工具(三).md","raw":"---\ntitle: 直觉泵-关于意义和内容思考工具(三)\ndate: 2020-01-08 23:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n\n今天要介绍剩下的关于意义和内容思考工具(近似算子、神奇组织、身陷机器人控制室).\n\n<!--more-->\n\n#### 近似算子  达尔文渐进主义的启示\n\n因为一旦要对各层级的功能运作做出分析或综合评价,我们就需要针对那个层级,追问着两个问题:它是什么?它都做些什么?\"它是什么\"是指其组成部分的结构组织,前提是这些组成部分都能如我们假设的那样发挥它们的功能.\"它能做些什么\"是指,它可以将一些近似认知的功能实现得很好,让我们能否在一个更高的水平上安心工作,因为我们相信脚下踩着的这块基石一定可以很好地发挥自己的功能、被很好地利用.\n\n在认知科学中,我们会将近似算子看作是达尔文进化论中渐进主义的一种平行理论.有细菌之前会先有近似细菌,有哺乳动物之前会先有近似哺乳动物,有狗之前也会先有近似狗的动物出现,如此等等.\n\n构成猿猴和苹果的基础成分都大同小异,不同的是这些成分的构造方式,还有各个层级的功能对它们的开发利用.\n\n我们从意向立场出发,开始追溯每一层级上近似理性行动者的信念和欲望,或者近似信念和近似欲望,从最简单的细菌到动物,从海星到天文学家,追溯组成大脑的识别、标记、比较和记忆回路,但即使追溯到人类这一层级,我们也没能明确地找到真正形成\"理解\"的那个点.\n\n#### 神奇组织  不要为逃避难题而求助于\"魔法\"\n\n神奇组织:神经组织中的动态属性可以利用某种科学无法解释的潜在力量,做出一些让你觉得神奇的事情.\n\n计算机在清楚解释食物方面扮演着非常重要的角色,不管是飓风、房地产泡沫、艾滋病病毒,还是人类意识,在理解事物时,我们有充足的理由要首先去开发它们的计算机模型.\n\n神奇组织这一概念作为一件思考工具,它的功能类似于警察的警棍:你拿警棍惩罚别人,警示他们不要使用不正当的理论.当然就像你可能滥用警棍一样,你也可能滥用这个概念.\n\n反对神奇组织的主要理由是:它提供给我们的事一种逃避问题的方法,而不是解决问题的方法,因为神奇组织预设了这是一个根本无法解决的神秘问题\n\n#### 身陷机器人控制室  初长成的大脑不是一块\"白板\"\n\n对于大脑来说,输入的信息是与输出相连接的,大脑本身就拥有一些能力,知道要去认识什么,知道怎样才能使各种连接变得更加合理.这项任务是提前完成了的.这也是以另外一种形式证实了那个广为人知的说法,初长成的大脑不是\"白板\"一块,它已然经历了自然选择的雕琢,自身体现着各式的偏好、预设和衔联,而且,有些合适的连接是提前内置的,无需标注.\n\n在理解产生之前,先要有一些不需要理解的能力出现,这是自然选择.自然选择的车轮滚滚向前,一路上造就出了无数精巧能干的事物,这个过程也不包含任何理解.\n\n我们成年人具有的那种理解能力是进化史近期才出现的一种景象,它是由一些结构组合生成,而这些结构所具有的能力也是由鱼或者蠕虫所有的那种类似理解力发展而来的.大部分时间里,这些解构发挥着应有的作用,但它们并不需要知道自己为什么会那样发挥作用.\n","slug":"直觉泵-关于意义和内容思考工具(三)","published":1,"updated":"2020-01-08T15:36:44.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24h0065tkuigrieldif","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>今天要介绍剩下的关于意义和内容思考工具(近似算子、神奇组织、身陷机器人控制室).</p><a id=\"more\"></a><h4 id=\"近似算子-达尔文渐进主义的启示\"><a href=\"#近似算子-达尔文渐进主义的启示\" class=\"headerlink\" title=\"近似算子  达尔文渐进主义的启示\"></a>近似算子 达尔文渐进主义的启示</h4><p>因为一旦要对各层级的功能运作做出分析或综合评价,我们就需要针对那个层级,追问着两个问题:它是什么?它都做些什么?”它是什么”是指其组成部分的结构组织,前提是这些组成部分都能如我们假设的那样发挥它们的功能.”它能做些什么”是指,它可以将一些近似认知的功能实现得很好,让我们能否在一个更高的水平上安心工作,因为我们相信脚下踩着的这块基石一定可以很好地发挥自己的功能、被很好地利用.</p><p>在认知科学中,我们会将近似算子看作是达尔文进化论中渐进主义的一种平行理论.有细菌之前会先有近似细菌,有哺乳动物之前会先有近似哺乳动物,有狗之前也会先有近似狗的动物出现,如此等等.</p><p>构成猿猴和苹果的基础成分都大同小异,不同的是这些成分的构造方式,还有各个层级的功能对它们的开发利用.</p><p>我们从意向立场出发,开始追溯每一层级上近似理性行动者的信念和欲望,或者近似信念和近似欲望,从最简单的细菌到动物,从海星到天文学家,追溯组成大脑的识别、标记、比较和记忆回路,但即使追溯到人类这一层级,我们也没能明确地找到真正形成”理解”的那个点.</p><h4 id=\"神奇组织-不要为逃避难题而求助于”魔法”\"><a href=\"#神奇组织-不要为逃避难题而求助于”魔法”\" class=\"headerlink\" title=\"神奇组织  不要为逃避难题而求助于”魔法”\"></a>神奇组织 不要为逃避难题而求助于”魔法”</h4><p>神奇组织:神经组织中的动态属性可以利用某种科学无法解释的潜在力量,做出一些让你觉得神奇的事情.</p><p>计算机在清楚解释食物方面扮演着非常重要的角色,不管是飓风、房地产泡沫、艾滋病病毒,还是人类意识,在理解事物时,我们有充足的理由要首先去开发它们的计算机模型.</p><p>神奇组织这一概念作为一件思考工具,它的功能类似于警察的警棍:你拿警棍惩罚别人,警示他们不要使用不正当的理论.当然就像你可能滥用警棍一样,你也可能滥用这个概念.</p><p>反对神奇组织的主要理由是:它提供给我们的事一种逃避问题的方法,而不是解决问题的方法,因为神奇组织预设了这是一个根本无法解决的神秘问题</p><h4 id=\"身陷机器人控制室-初长成的大脑不是一块”白板”\"><a href=\"#身陷机器人控制室-初长成的大脑不是一块”白板”\" class=\"headerlink\" title=\"身陷机器人控制室  初长成的大脑不是一块”白板”\"></a>身陷机器人控制室 初长成的大脑不是一块”白板”</h4><p>对于大脑来说,输入的信息是与输出相连接的,大脑本身就拥有一些能力,知道要去认识什么,知道怎样才能使各种连接变得更加合理.这项任务是提前完成了的.这也是以另外一种形式证实了那个广为人知的说法,初长成的大脑不是”白板”一块,它已然经历了自然选择的雕琢,自身体现着各式的偏好、预设和衔联,而且,有些合适的连接是提前内置的,无需标注.</p><p>在理解产生之前,先要有一些不需要理解的能力出现,这是自然选择.自然选择的车轮滚滚向前,一路上造就出了无数精巧能干的事物,这个过程也不包含任何理解.</p><p>我们成年人具有的那种理解能力是进化史近期才出现的一种景象,它是由一些结构组合生成,而这些结构所具有的能力也是由鱼或者蠕虫所有的那种类似理解力发展而来的.大部分时间里,这些解构发挥着应有的作用,但它们并不需要知道自己为什么会那样发挥作用.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>今天要介绍剩下的关于意义和内容思考工具(近似算子、神奇组织、身陷机器人控制室).</p>","more":"<h4 id=\"近似算子-达尔文渐进主义的启示\"><a href=\"#近似算子-达尔文渐进主义的启示\" class=\"headerlink\" title=\"近似算子  达尔文渐进主义的启示\"></a>近似算子 达尔文渐进主义的启示</h4><p>因为一旦要对各层级的功能运作做出分析或综合评价,我们就需要针对那个层级,追问着两个问题:它是什么?它都做些什么?”它是什么”是指其组成部分的结构组织,前提是这些组成部分都能如我们假设的那样发挥它们的功能.”它能做些什么”是指,它可以将一些近似认知的功能实现得很好,让我们能否在一个更高的水平上安心工作,因为我们相信脚下踩着的这块基石一定可以很好地发挥自己的功能、被很好地利用.</p><p>在认知科学中,我们会将近似算子看作是达尔文进化论中渐进主义的一种平行理论.有细菌之前会先有近似细菌,有哺乳动物之前会先有近似哺乳动物,有狗之前也会先有近似狗的动物出现,如此等等.</p><p>构成猿猴和苹果的基础成分都大同小异,不同的是这些成分的构造方式,还有各个层级的功能对它们的开发利用.</p><p>我们从意向立场出发,开始追溯每一层级上近似理性行动者的信念和欲望,或者近似信念和近似欲望,从最简单的细菌到动物,从海星到天文学家,追溯组成大脑的识别、标记、比较和记忆回路,但即使追溯到人类这一层级,我们也没能明确地找到真正形成”理解”的那个点.</p><h4 id=\"神奇组织-不要为逃避难题而求助于”魔法”\"><a href=\"#神奇组织-不要为逃避难题而求助于”魔法”\" class=\"headerlink\" title=\"神奇组织  不要为逃避难题而求助于”魔法”\"></a>神奇组织 不要为逃避难题而求助于”魔法”</h4><p>神奇组织:神经组织中的动态属性可以利用某种科学无法解释的潜在力量,做出一些让你觉得神奇的事情.</p><p>计算机在清楚解释食物方面扮演着非常重要的角色,不管是飓风、房地产泡沫、艾滋病病毒,还是人类意识,在理解事物时,我们有充足的理由要首先去开发它们的计算机模型.</p><p>神奇组织这一概念作为一件思考工具,它的功能类似于警察的警棍:你拿警棍惩罚别人,警示他们不要使用不正当的理论.当然就像你可能滥用警棍一样,你也可能滥用这个概念.</p><p>反对神奇组织的主要理由是:它提供给我们的事一种逃避问题的方法,而不是解决问题的方法,因为神奇组织预设了这是一个根本无法解决的神秘问题</p><h4 id=\"身陷机器人控制室-初长成的大脑不是一块”白板”\"><a href=\"#身陷机器人控制室-初长成的大脑不是一块”白板”\" class=\"headerlink\" title=\"身陷机器人控制室  初长成的大脑不是一块”白板”\"></a>身陷机器人控制室 初长成的大脑不是一块”白板”</h4><p>对于大脑来说,输入的信息是与输出相连接的,大脑本身就拥有一些能力,知道要去认识什么,知道怎样才能使各种连接变得更加合理.这项任务是提前完成了的.这也是以另外一种形式证实了那个广为人知的说法,初长成的大脑不是”白板”一块,它已然经历了自然选择的雕琢,自身体现着各式的偏好、预设和衔联,而且,有些合适的连接是提前内置的,无需标注.</p><p>在理解产生之前,先要有一些不需要理解的能力出现,这是自然选择.自然选择的车轮滚滚向前,一路上造就出了无数精巧能干的事物,这个过程也不包含任何理解.</p><p>我们成年人具有的那种理解能力是进化史近期才出现的一种景象,它是由一些结构组合生成,而这些结构所具有的能力也是由鱼或者蠕虫所有的那种类似理解力发展而来的.大部分时间里,这些解构发挥着应有的作用,但它们并不需要知道自己为什么会那样发挥作用.</p><!-- rebuild by neat -->"},{"title":"直觉泵-关于意义和内容思考工具(一)","date":"2020-01-06T15:02:50.000Z","_content":"### 关于意义和内容思考工具\n\n为什么要从意义开始说起呢?因为它是所有难题的核心,原因很简单:每当我们开始与自己或者别人谈论它们时,那些难题就会出现.獾不用关心自由意志,海豚也不用烦心意识的问题,因为它们没有提出问题的能力.好奇会害死猫,却能吸引人类去反思自己的种种困惑.\n\n要进行有效的探索,尽一切所能去弄清出发点和自身装备是我们首先要做的事.词语有自身的意义.那么词语的意义是怎样产生的呢?作为词语的使用者,我们通过说某一事物来指示它,而这又是怎么实现的?我们如何理解彼此的话语?\n\n<!--more-->\n\n#### 特拉法尔加广场上的谋杀案  意义和内容都是我们大脑的\"意向性\"产物\n\n\"I'm hungry\"和\"J'ai faim\"这两句话使用了不同的单词,大声朗读时发音也不同,各属两类不同的语言,语法结构也有差异,但它们有一个共性:都意味着或者关乎着同一件事——说话者饿了.这一共有的性质,即两句话在各自语言中的意义(语句的意义)或者句子所表达的那些看法(语句的内容)是哲学和认知科学的一个中心论题.这种句子、图画、信念,毫无疑问还有大脑状态所展示的关涉性((aboutness),哲学里称为意向性(intentionality).\n\n人们普遍认为意义和内容之间有着密切的联系,它们之间相互依赖,更有甚者还会说,这两者压根儿就是一回事,都是意向性.但对于内容和意义是什么以及怎样准确地捕捉到它们这样的问题,人们却很难达成一致.\n\n从科学角度来看,意向性现象对我们来说既非常熟悉,就像食物、家具和衣服一般在日常生活中显现,又让你全然难以捉摸.我们毫不费力就能将生日祝福、死亡诅咒和承诺区分开来,但这不代表我们同样可以轻松完成一个工程:做出一个有效的\"死亡威胁侦测\".\n\n#### 生活在克利夫兰的一位兄长  一种观念只能够生长在一堆观念之上\n\n如果一个观念不能根据不同的语境无限扩充自身的使用方法,那么,在任何意义上它都不能算作是一个观念.\n\n一个\"命题\"不可能孤立地存在于我们的大脑中,即使是一个妄想出的观念,它也只有在一堆非妄想的观念上才能生长,它得承接住那些不断传递过来的意义.\n\n人们不可能只持有一个观念.你知道狗有四条腿,就一定知道腿就是狗的四肢,四一定比三大,等等.每个观念都会牵涉到其他一些东西.\n\n#### \"爸爸是名医生\"  理解是随着时间推移而逐渐清晰的\n\n对于成为一名医生意味着什么,作为爸爸又意味着什么,小孩子的理解会随着时间的推移逐渐深化,所以,对于自己的这句\"我的爸爸是一名医生\",她的理解也会有所变化.我们是否能非常审慎地详细列举出,要\"彻底地\"理解这一命题,她到底要知道多少东西.\n\n因为理解是一点一点形成的,那么基于理解的观念也应该是一点一点形成的,即使是对于这种通俗的命题来说也是如此.她\"近似\"知道她的爸爸是一名医生,这并不是说它对此有所保留或者怀疑,只是她的理解还不够全面,还不能作为一个重要的前提引出其他有用的观念.\n\n#### 常识映像和科学映像  反映世界的两个不同视角\n\n不管是细菌还是我们现代人中的医院,每个生物体在这个世界中都有一套对自己至关重要的东西,对于这些东西他们必须竭尽全力去辨识和抢占.哲学家们将支撑起存在的这一系列东西叫做\"本体论\".所以,每一种生物都有自己的本体论.动物的环世界首先是由一些基础情景构成的,包括食物、配偶,它们要学会躲避,知道从哪里钻进钻出,从哪里观测外界的动静,要有一个容身之所,还要有一席立足之地,等等.\n\n从某种意义上看,一个生物的环世界其实是一种内部环境,是一种\"主观\"甚至\"自恋\"的本体论,构成这种本体论的都是生物认为对自身最有用的那些东西,但这种\"内在\"和\"主观\"并非是从\"可意识到\"这个层面来说的.环世界其实是一个工程学概念:一部由电脑操控的升降机的本体论,是指在完成这项工作时需要它逐个完成的那一整套动作.\n\n与雏菊的本体论或者环世界不一样,我们的常识映像是明显的,也的的确确是主观的.世界是我们所在的世界,世界取决于我们.与雏菊的本体论相同,我们的常识映像也是在经年累月的自然选择中成形的,并最终沉淀成了我们基因的一部分.\n\n我们的大多数常识映像并不能随基因遗传,它们基本上是我们在童年时代经过反复灌输保留下来的.词语对我们来说非常重要,有它们作为媒介,我们大量的常识映像才能够传达.但是,我们用词语区分世界中不同事物的本能、我们对说话的冲动,这些多少还是跟基因遗传有些关系的,就像鸟儿能定位飞在空中的一只只小虫,黄蜂终是要筑起蜂巢一样.\n\n#### 常识心理  人们无需正规教育就拥有的一种能力\n\n常识心理是指\"每个人都知道的\"那些我们自己及别人心中都有的想法:人们能够感觉到并分辨出疼、饿、渴这些不同的感觉,能够记住过去发生的很多事件,也能预见到一些事情,睁开眼睛能够看见眼前的事物,在听力所及的范围内能听到别人在说什么,他们骗人也被人骗,知道自己在哪儿,能认出别人......我们不知道其他人、其他动物的脑子里在想什么,就以惊人的自信做出了这些推测.这些本是理所应当地发挥,以至于能注意到它们都是件让人觉得很费劲的事儿.\n\n艺术家和哲学家们一致认为:\"将熟悉的变陌生\"是他们必须主动完成的一项任务.创作天才们的一些奇思妙想威力无穷,能让我们冲破过度熟悉造成的坚壳,跳出系统,转换到一种新的观察视角,用全新的眼光再去看那些平凡无奇、显而易见的食物.\n\n#### 意向立场  解释实体行为的一种策略\n\n意向立场是一种解释包括人、动物、人工制品等实体的行为的策略,它将这些实体的行为解释成一个理性的主体在\"考量\"了自己的\"信念\"和\"欲望\"之后所做出的的\"行为\"\"选择\".\n\n物理立场就是物理科学的一种标准的运算模式,它要求我们在思考问题时用物理定律和事物的物理法则来得出预测.\n从设计立场出发的预想没有从物理立场出发的预想那么可靠,原因是我们还需要考虑如下的这些额外的设定：1．这个实体是按照我们的想法设计出来的.2．它会按照设计要求运行,中间不会出现失误.设计出的物品偶尔会出现设计上的失误,有时它会突然失灵.\n\n在我们把人类都处理为意向系统时,我们会巧妙地将对方脑壳中那颗大脑以及我们自己大脑中的运作细节忽略掉,因为我们都在无限制地依赖“人是有理性的”这一事实,浑然而不自知.所以,就算突然闯入了一个新异的情景,我们通常也能自然地事实上是不由自主地寻求到其中的意义,凭借的正是我们天生的本领:领会别人应有的信念(摆在他们眼前的事实)和欲望(什么对他们有好处).\n","source":"_posts/直觉泵-关于意义和内容思考工具.md","raw":"---\ntitle: 直觉泵-关于意义和内容思考工具(一)\ndate: 2020-01-06 23:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n### 关于意义和内容思考工具\n\n为什么要从意义开始说起呢?因为它是所有难题的核心,原因很简单:每当我们开始与自己或者别人谈论它们时,那些难题就会出现.獾不用关心自由意志,海豚也不用烦心意识的问题,因为它们没有提出问题的能力.好奇会害死猫,却能吸引人类去反思自己的种种困惑.\n\n要进行有效的探索,尽一切所能去弄清出发点和自身装备是我们首先要做的事.词语有自身的意义.那么词语的意义是怎样产生的呢?作为词语的使用者,我们通过说某一事物来指示它,而这又是怎么实现的?我们如何理解彼此的话语?\n\n<!--more-->\n\n#### 特拉法尔加广场上的谋杀案  意义和内容都是我们大脑的\"意向性\"产物\n\n\"I'm hungry\"和\"J'ai faim\"这两句话使用了不同的单词,大声朗读时发音也不同,各属两类不同的语言,语法结构也有差异,但它们有一个共性:都意味着或者关乎着同一件事——说话者饿了.这一共有的性质,即两句话在各自语言中的意义(语句的意义)或者句子所表达的那些看法(语句的内容)是哲学和认知科学的一个中心论题.这种句子、图画、信念,毫无疑问还有大脑状态所展示的关涉性((aboutness),哲学里称为意向性(intentionality).\n\n人们普遍认为意义和内容之间有着密切的联系,它们之间相互依赖,更有甚者还会说,这两者压根儿就是一回事,都是意向性.但对于内容和意义是什么以及怎样准确地捕捉到它们这样的问题,人们却很难达成一致.\n\n从科学角度来看,意向性现象对我们来说既非常熟悉,就像食物、家具和衣服一般在日常生活中显现,又让你全然难以捉摸.我们毫不费力就能将生日祝福、死亡诅咒和承诺区分开来,但这不代表我们同样可以轻松完成一个工程:做出一个有效的\"死亡威胁侦测\".\n\n#### 生活在克利夫兰的一位兄长  一种观念只能够生长在一堆观念之上\n\n如果一个观念不能根据不同的语境无限扩充自身的使用方法,那么,在任何意义上它都不能算作是一个观念.\n\n一个\"命题\"不可能孤立地存在于我们的大脑中,即使是一个妄想出的观念,它也只有在一堆非妄想的观念上才能生长,它得承接住那些不断传递过来的意义.\n\n人们不可能只持有一个观念.你知道狗有四条腿,就一定知道腿就是狗的四肢,四一定比三大,等等.每个观念都会牵涉到其他一些东西.\n\n#### \"爸爸是名医生\"  理解是随着时间推移而逐渐清晰的\n\n对于成为一名医生意味着什么,作为爸爸又意味着什么,小孩子的理解会随着时间的推移逐渐深化,所以,对于自己的这句\"我的爸爸是一名医生\",她的理解也会有所变化.我们是否能非常审慎地详细列举出,要\"彻底地\"理解这一命题,她到底要知道多少东西.\n\n因为理解是一点一点形成的,那么基于理解的观念也应该是一点一点形成的,即使是对于这种通俗的命题来说也是如此.她\"近似\"知道她的爸爸是一名医生,这并不是说它对此有所保留或者怀疑,只是她的理解还不够全面,还不能作为一个重要的前提引出其他有用的观念.\n\n#### 常识映像和科学映像  反映世界的两个不同视角\n\n不管是细菌还是我们现代人中的医院,每个生物体在这个世界中都有一套对自己至关重要的东西,对于这些东西他们必须竭尽全力去辨识和抢占.哲学家们将支撑起存在的这一系列东西叫做\"本体论\".所以,每一种生物都有自己的本体论.动物的环世界首先是由一些基础情景构成的,包括食物、配偶,它们要学会躲避,知道从哪里钻进钻出,从哪里观测外界的动静,要有一个容身之所,还要有一席立足之地,等等.\n\n从某种意义上看,一个生物的环世界其实是一种内部环境,是一种\"主观\"甚至\"自恋\"的本体论,构成这种本体论的都是生物认为对自身最有用的那些东西,但这种\"内在\"和\"主观\"并非是从\"可意识到\"这个层面来说的.环世界其实是一个工程学概念:一部由电脑操控的升降机的本体论,是指在完成这项工作时需要它逐个完成的那一整套动作.\n\n与雏菊的本体论或者环世界不一样,我们的常识映像是明显的,也的的确确是主观的.世界是我们所在的世界,世界取决于我们.与雏菊的本体论相同,我们的常识映像也是在经年累月的自然选择中成形的,并最终沉淀成了我们基因的一部分.\n\n我们的大多数常识映像并不能随基因遗传,它们基本上是我们在童年时代经过反复灌输保留下来的.词语对我们来说非常重要,有它们作为媒介,我们大量的常识映像才能够传达.但是,我们用词语区分世界中不同事物的本能、我们对说话的冲动,这些多少还是跟基因遗传有些关系的,就像鸟儿能定位飞在空中的一只只小虫,黄蜂终是要筑起蜂巢一样.\n\n#### 常识心理  人们无需正规教育就拥有的一种能力\n\n常识心理是指\"每个人都知道的\"那些我们自己及别人心中都有的想法:人们能够感觉到并分辨出疼、饿、渴这些不同的感觉,能够记住过去发生的很多事件,也能预见到一些事情,睁开眼睛能够看见眼前的事物,在听力所及的范围内能听到别人在说什么,他们骗人也被人骗,知道自己在哪儿,能认出别人......我们不知道其他人、其他动物的脑子里在想什么,就以惊人的自信做出了这些推测.这些本是理所应当地发挥,以至于能注意到它们都是件让人觉得很费劲的事儿.\n\n艺术家和哲学家们一致认为:\"将熟悉的变陌生\"是他们必须主动完成的一项任务.创作天才们的一些奇思妙想威力无穷,能让我们冲破过度熟悉造成的坚壳,跳出系统,转换到一种新的观察视角,用全新的眼光再去看那些平凡无奇、显而易见的食物.\n\n#### 意向立场  解释实体行为的一种策略\n\n意向立场是一种解释包括人、动物、人工制品等实体的行为的策略,它将这些实体的行为解释成一个理性的主体在\"考量\"了自己的\"信念\"和\"欲望\"之后所做出的的\"行为\"\"选择\".\n\n物理立场就是物理科学的一种标准的运算模式,它要求我们在思考问题时用物理定律和事物的物理法则来得出预测.\n从设计立场出发的预想没有从物理立场出发的预想那么可靠,原因是我们还需要考虑如下的这些额外的设定：1．这个实体是按照我们的想法设计出来的.2．它会按照设计要求运行,中间不会出现失误.设计出的物品偶尔会出现设计上的失误,有时它会突然失灵.\n\n在我们把人类都处理为意向系统时,我们会巧妙地将对方脑壳中那颗大脑以及我们自己大脑中的运作细节忽略掉,因为我们都在无限制地依赖“人是有理性的”这一事实,浑然而不自知.所以,就算突然闯入了一个新异的情景,我们通常也能自然地事实上是不由自主地寻求到其中的意义,凭借的正是我们天生的本领:领会别人应有的信念(摆在他们眼前的事实)和欲望(什么对他们有好处).\n","slug":"直觉泵-关于意义和内容思考工具","published":1,"updated":"2020-01-07T15:30:40.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24j0068tkui47k32aue","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"关于意义和内容思考工具\"><a href=\"#关于意义和内容思考工具\" class=\"headerlink\" title=\"关于意义和内容思考工具\"></a>关于意义和内容思考工具</h3><p>为什么要从意义开始说起呢?因为它是所有难题的核心,原因很简单:每当我们开始与自己或者别人谈论它们时,那些难题就会出现.獾不用关心自由意志,海豚也不用烦心意识的问题,因为它们没有提出问题的能力.好奇会害死猫,却能吸引人类去反思自己的种种困惑.</p><p>要进行有效的探索,尽一切所能去弄清出发点和自身装备是我们首先要做的事.词语有自身的意义.那么词语的意义是怎样产生的呢?作为词语的使用者,我们通过说某一事物来指示它,而这又是怎么实现的?我们如何理解彼此的话语?</p><a id=\"more\"></a><h4 id=\"特拉法尔加广场上的谋杀案-意义和内容都是我们大脑的”意向性”产物\"><a href=\"#特拉法尔加广场上的谋杀案-意义和内容都是我们大脑的”意向性”产物\" class=\"headerlink\" title=\"特拉法尔加广场上的谋杀案  意义和内容都是我们大脑的”意向性”产物\"></a>特拉法尔加广场上的谋杀案 意义和内容都是我们大脑的”意向性”产物</h4><p>“I’m hungry”和”J’ai faim”这两句话使用了不同的单词,大声朗读时发音也不同,各属两类不同的语言,语法结构也有差异,但它们有一个共性:都意味着或者关乎着同一件事——说话者饿了.这一共有的性质,即两句话在各自语言中的意义(语句的意义)或者句子所表达的那些看法(语句的内容)是哲学和认知科学的一个中心论题.这种句子、图画、信念,毫无疑问还有大脑状态所展示的关涉性((aboutness),哲学里称为意向性(intentionality).</p><p>人们普遍认为意义和内容之间有着密切的联系,它们之间相互依赖,更有甚者还会说,这两者压根儿就是一回事,都是意向性.但对于内容和意义是什么以及怎样准确地捕捉到它们这样的问题,人们却很难达成一致.</p><p>从科学角度来看,意向性现象对我们来说既非常熟悉,就像食物、家具和衣服一般在日常生活中显现,又让你全然难以捉摸.我们毫不费力就能将生日祝福、死亡诅咒和承诺区分开来,但这不代表我们同样可以轻松完成一个工程:做出一个有效的”死亡威胁侦测”.</p><h4 id=\"生活在克利夫兰的一位兄长-一种观念只能够生长在一堆观念之上\"><a href=\"#生活在克利夫兰的一位兄长-一种观念只能够生长在一堆观念之上\" class=\"headerlink\" title=\"生活在克利夫兰的一位兄长  一种观念只能够生长在一堆观念之上\"></a>生活在克利夫兰的一位兄长 一种观念只能够生长在一堆观念之上</h4><p>如果一个观念不能根据不同的语境无限扩充自身的使用方法,那么,在任何意义上它都不能算作是一个观念.</p><p>一个”命题”不可能孤立地存在于我们的大脑中,即使是一个妄想出的观念,它也只有在一堆非妄想的观念上才能生长,它得承接住那些不断传递过来的意义.</p><p>人们不可能只持有一个观念.你知道狗有四条腿,就一定知道腿就是狗的四肢,四一定比三大,等等.每个观念都会牵涉到其他一些东西.</p><h4 id=\"“爸爸是名医生”-理解是随着时间推移而逐渐清晰的\"><a href=\"#“爸爸是名医生”-理解是随着时间推移而逐渐清晰的\" class=\"headerlink\" title=\"“爸爸是名医生”  理解是随着时间推移而逐渐清晰的\"></a>“爸爸是名医生” 理解是随着时间推移而逐渐清晰的</h4><p>对于成为一名医生意味着什么,作为爸爸又意味着什么,小孩子的理解会随着时间的推移逐渐深化,所以,对于自己的这句”我的爸爸是一名医生”,她的理解也会有所变化.我们是否能非常审慎地详细列举出,要”彻底地”理解这一命题,她到底要知道多少东西.</p><p>因为理解是一点一点形成的,那么基于理解的观念也应该是一点一点形成的,即使是对于这种通俗的命题来说也是如此.她”近似”知道她的爸爸是一名医生,这并不是说它对此有所保留或者怀疑,只是她的理解还不够全面,还不能作为一个重要的前提引出其他有用的观念.</p><h4 id=\"常识映像和科学映像-反映世界的两个不同视角\"><a href=\"#常识映像和科学映像-反映世界的两个不同视角\" class=\"headerlink\" title=\"常识映像和科学映像  反映世界的两个不同视角\"></a>常识映像和科学映像 反映世界的两个不同视角</h4><p>不管是细菌还是我们现代人中的医院,每个生物体在这个世界中都有一套对自己至关重要的东西,对于这些东西他们必须竭尽全力去辨识和抢占.哲学家们将支撑起存在的这一系列东西叫做”本体论”.所以,每一种生物都有自己的本体论.动物的环世界首先是由一些基础情景构成的,包括食物、配偶,它们要学会躲避,知道从哪里钻进钻出,从哪里观测外界的动静,要有一个容身之所,还要有一席立足之地,等等.</p><p>从某种意义上看,一个生物的环世界其实是一种内部环境,是一种”主观”甚至”自恋”的本体论,构成这种本体论的都是生物认为对自身最有用的那些东西,但这种”内在”和”主观”并非是从”可意识到”这个层面来说的.环世界其实是一个工程学概念:一部由电脑操控的升降机的本体论,是指在完成这项工作时需要它逐个完成的那一整套动作.</p><p>与雏菊的本体论或者环世界不一样,我们的常识映像是明显的,也的的确确是主观的.世界是我们所在的世界,世界取决于我们.与雏菊的本体论相同,我们的常识映像也是在经年累月的自然选择中成形的,并最终沉淀成了我们基因的一部分.</p><p>我们的大多数常识映像并不能随基因遗传,它们基本上是我们在童年时代经过反复灌输保留下来的.词语对我们来说非常重要,有它们作为媒介,我们大量的常识映像才能够传达.但是,我们用词语区分世界中不同事物的本能、我们对说话的冲动,这些多少还是跟基因遗传有些关系的,就像鸟儿能定位飞在空中的一只只小虫,黄蜂终是要筑起蜂巢一样.</p><h4 id=\"常识心理-人们无需正规教育就拥有的一种能力\"><a href=\"#常识心理-人们无需正规教育就拥有的一种能力\" class=\"headerlink\" title=\"常识心理  人们无需正规教育就拥有的一种能力\"></a>常识心理 人们无需正规教育就拥有的一种能力</h4><p>常识心理是指”每个人都知道的”那些我们自己及别人心中都有的想法:人们能够感觉到并分辨出疼、饿、渴这些不同的感觉,能够记住过去发生的很多事件,也能预见到一些事情,睁开眼睛能够看见眼前的事物,在听力所及的范围内能听到别人在说什么,他们骗人也被人骗,知道自己在哪儿,能认出别人……我们不知道其他人、其他动物的脑子里在想什么,就以惊人的自信做出了这些推测.这些本是理所应当地发挥,以至于能注意到它们都是件让人觉得很费劲的事儿.</p><p>艺术家和哲学家们一致认为:”将熟悉的变陌生”是他们必须主动完成的一项任务.创作天才们的一些奇思妙想威力无穷,能让我们冲破过度熟悉造成的坚壳,跳出系统,转换到一种新的观察视角,用全新的眼光再去看那些平凡无奇、显而易见的食物.</p><h4 id=\"意向立场-解释实体行为的一种策略\"><a href=\"#意向立场-解释实体行为的一种策略\" class=\"headerlink\" title=\"意向立场  解释实体行为的一种策略\"></a>意向立场 解释实体行为的一种策略</h4><p>意向立场是一种解释包括人、动物、人工制品等实体的行为的策略,它将这些实体的行为解释成一个理性的主体在”考量”了自己的”信念”和”欲望”之后所做出的的”行为””选择”.</p><p>物理立场就是物理科学的一种标准的运算模式,它要求我们在思考问题时用物理定律和事物的物理法则来得出预测.<br>从设计立场出发的预想没有从物理立场出发的预想那么可靠,原因是我们还需要考虑如下的这些额外的设定：1．这个实体是按照我们的想法设计出来的.2．它会按照设计要求运行,中间不会出现失误.设计出的物品偶尔会出现设计上的失误,有时它会突然失灵.</p><p>在我们把人类都处理为意向系统时,我们会巧妙地将对方脑壳中那颗大脑以及我们自己大脑中的运作细节忽略掉,因为我们都在无限制地依赖“人是有理性的”这一事实,浑然而不自知.所以,就算突然闯入了一个新异的情景,我们通常也能自然地事实上是不由自主地寻求到其中的意义,凭借的正是我们天生的本领:领会别人应有的信念(摆在他们眼前的事实)和欲望(什么对他们有好处).</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"关于意义和内容思考工具\"><a href=\"#关于意义和内容思考工具\" class=\"headerlink\" title=\"关于意义和内容思考工具\"></a>关于意义和内容思考工具</h3><p>为什么要从意义开始说起呢?因为它是所有难题的核心,原因很简单:每当我们开始与自己或者别人谈论它们时,那些难题就会出现.獾不用关心自由意志,海豚也不用烦心意识的问题,因为它们没有提出问题的能力.好奇会害死猫,却能吸引人类去反思自己的种种困惑.</p><p>要进行有效的探索,尽一切所能去弄清出发点和自身装备是我们首先要做的事.词语有自身的意义.那么词语的意义是怎样产生的呢?作为词语的使用者,我们通过说某一事物来指示它,而这又是怎么实现的?我们如何理解彼此的话语?</p>","more":"<h4 id=\"特拉法尔加广场上的谋杀案-意义和内容都是我们大脑的”意向性”产物\"><a href=\"#特拉法尔加广场上的谋杀案-意义和内容都是我们大脑的”意向性”产物\" class=\"headerlink\" title=\"特拉法尔加广场上的谋杀案  意义和内容都是我们大脑的”意向性”产物\"></a>特拉法尔加广场上的谋杀案 意义和内容都是我们大脑的”意向性”产物</h4><p>“I’m hungry”和”J’ai faim”这两句话使用了不同的单词,大声朗读时发音也不同,各属两类不同的语言,语法结构也有差异,但它们有一个共性:都意味着或者关乎着同一件事——说话者饿了.这一共有的性质,即两句话在各自语言中的意义(语句的意义)或者句子所表达的那些看法(语句的内容)是哲学和认知科学的一个中心论题.这种句子、图画、信念,毫无疑问还有大脑状态所展示的关涉性((aboutness),哲学里称为意向性(intentionality).</p><p>人们普遍认为意义和内容之间有着密切的联系,它们之间相互依赖,更有甚者还会说,这两者压根儿就是一回事,都是意向性.但对于内容和意义是什么以及怎样准确地捕捉到它们这样的问题,人们却很难达成一致.</p><p>从科学角度来看,意向性现象对我们来说既非常熟悉,就像食物、家具和衣服一般在日常生活中显现,又让你全然难以捉摸.我们毫不费力就能将生日祝福、死亡诅咒和承诺区分开来,但这不代表我们同样可以轻松完成一个工程:做出一个有效的”死亡威胁侦测”.</p><h4 id=\"生活在克利夫兰的一位兄长-一种观念只能够生长在一堆观念之上\"><a href=\"#生活在克利夫兰的一位兄长-一种观念只能够生长在一堆观念之上\" class=\"headerlink\" title=\"生活在克利夫兰的一位兄长  一种观念只能够生长在一堆观念之上\"></a>生活在克利夫兰的一位兄长 一种观念只能够生长在一堆观念之上</h4><p>如果一个观念不能根据不同的语境无限扩充自身的使用方法,那么,在任何意义上它都不能算作是一个观念.</p><p>一个”命题”不可能孤立地存在于我们的大脑中,即使是一个妄想出的观念,它也只有在一堆非妄想的观念上才能生长,它得承接住那些不断传递过来的意义.</p><p>人们不可能只持有一个观念.你知道狗有四条腿,就一定知道腿就是狗的四肢,四一定比三大,等等.每个观念都会牵涉到其他一些东西.</p><h4 id=\"“爸爸是名医生”-理解是随着时间推移而逐渐清晰的\"><a href=\"#“爸爸是名医生”-理解是随着时间推移而逐渐清晰的\" class=\"headerlink\" title=\"“爸爸是名医生”  理解是随着时间推移而逐渐清晰的\"></a>“爸爸是名医生” 理解是随着时间推移而逐渐清晰的</h4><p>对于成为一名医生意味着什么,作为爸爸又意味着什么,小孩子的理解会随着时间的推移逐渐深化,所以,对于自己的这句”我的爸爸是一名医生”,她的理解也会有所变化.我们是否能非常审慎地详细列举出,要”彻底地”理解这一命题,她到底要知道多少东西.</p><p>因为理解是一点一点形成的,那么基于理解的观念也应该是一点一点形成的,即使是对于这种通俗的命题来说也是如此.她”近似”知道她的爸爸是一名医生,这并不是说它对此有所保留或者怀疑,只是她的理解还不够全面,还不能作为一个重要的前提引出其他有用的观念.</p><h4 id=\"常识映像和科学映像-反映世界的两个不同视角\"><a href=\"#常识映像和科学映像-反映世界的两个不同视角\" class=\"headerlink\" title=\"常识映像和科学映像  反映世界的两个不同视角\"></a>常识映像和科学映像 反映世界的两个不同视角</h4><p>不管是细菌还是我们现代人中的医院,每个生物体在这个世界中都有一套对自己至关重要的东西,对于这些东西他们必须竭尽全力去辨识和抢占.哲学家们将支撑起存在的这一系列东西叫做”本体论”.所以,每一种生物都有自己的本体论.动物的环世界首先是由一些基础情景构成的,包括食物、配偶,它们要学会躲避,知道从哪里钻进钻出,从哪里观测外界的动静,要有一个容身之所,还要有一席立足之地,等等.</p><p>从某种意义上看,一个生物的环世界其实是一种内部环境,是一种”主观”甚至”自恋”的本体论,构成这种本体论的都是生物认为对自身最有用的那些东西,但这种”内在”和”主观”并非是从”可意识到”这个层面来说的.环世界其实是一个工程学概念:一部由电脑操控的升降机的本体论,是指在完成这项工作时需要它逐个完成的那一整套动作.</p><p>与雏菊的本体论或者环世界不一样,我们的常识映像是明显的,也的的确确是主观的.世界是我们所在的世界,世界取决于我们.与雏菊的本体论相同,我们的常识映像也是在经年累月的自然选择中成形的,并最终沉淀成了我们基因的一部分.</p><p>我们的大多数常识映像并不能随基因遗传,它们基本上是我们在童年时代经过反复灌输保留下来的.词语对我们来说非常重要,有它们作为媒介,我们大量的常识映像才能够传达.但是,我们用词语区分世界中不同事物的本能、我们对说话的冲动,这些多少还是跟基因遗传有些关系的,就像鸟儿能定位飞在空中的一只只小虫,黄蜂终是要筑起蜂巢一样.</p><h4 id=\"常识心理-人们无需正规教育就拥有的一种能力\"><a href=\"#常识心理-人们无需正规教育就拥有的一种能力\" class=\"headerlink\" title=\"常识心理  人们无需正规教育就拥有的一种能力\"></a>常识心理 人们无需正规教育就拥有的一种能力</h4><p>常识心理是指”每个人都知道的”那些我们自己及别人心中都有的想法:人们能够感觉到并分辨出疼、饿、渴这些不同的感觉,能够记住过去发生的很多事件,也能预见到一些事情,睁开眼睛能够看见眼前的事物,在听力所及的范围内能听到别人在说什么,他们骗人也被人骗,知道自己在哪儿,能认出别人……我们不知道其他人、其他动物的脑子里在想什么,就以惊人的自信做出了这些推测.这些本是理所应当地发挥,以至于能注意到它们都是件让人觉得很费劲的事儿.</p><p>艺术家和哲学家们一致认为:”将熟悉的变陌生”是他们必须主动完成的一项任务.创作天才们的一些奇思妙想威力无穷,能让我们冲破过度熟悉造成的坚壳,跳出系统,转换到一种新的观察视角,用全新的眼光再去看那些平凡无奇、显而易见的食物.</p><h4 id=\"意向立场-解释实体行为的一种策略\"><a href=\"#意向立场-解释实体行为的一种策略\" class=\"headerlink\" title=\"意向立场  解释实体行为的一种策略\"></a>意向立场 解释实体行为的一种策略</h4><p>意向立场是一种解释包括人、动物、人工制品等实体的行为的策略,它将这些实体的行为解释成一个理性的主体在”考量”了自己的”信念”和”欲望”之后所做出的的”行为””选择”.</p><p>物理立场就是物理科学的一种标准的运算模式,它要求我们在思考问题时用物理定律和事物的物理法则来得出预测.<br>从设计立场出发的预想没有从物理立场出发的预想那么可靠,原因是我们还需要考虑如下的这些额外的设定：1．这个实体是按照我们的想法设计出来的.2．它会按照设计要求运行,中间不会出现失误.设计出的物品偶尔会出现设计上的失误,有时它会突然失灵.</p><p>在我们把人类都处理为意向系统时,我们会巧妙地将对方脑壳中那颗大脑以及我们自己大脑中的运作细节忽略掉,因为我们都在无限制地依赖“人是有理性的”这一事实,浑然而不自知.所以,就算突然闯入了一个新异的情景,我们通常也能自然地事实上是不由自主地寻求到其中的意义,凭借的正是我们天生的本领:领会别人应有的信念(摆在他们眼前的事实)和欲望(什么对他们有好处).</p><!-- rebuild by neat -->"},{"title":"掌握习惯--原子习惯:细微改变带来巨大成就的实证法则","date":"2020-03-09T07:26:04.000Z","_content":"这本书是一个B站up主 ElenaLin_青青 在一期视频中推荐,趁着最近还没有复工就来看看了.\n<!--more-->\n\n### 基本原理 点滴变化何以意义重大\n\n#### 第1章 微习惯的惊人力量\n\n* 习惯是自我提高的复利.从长远来看,每天进步1%的效果不容小觑.\n\n* 习惯是把双刃剑.它们可能对你有利,也可能对你不利,这就是为什么理解细节至关重要.\n\n* 在你越过临界点之前,细微的变化似乎没起任何作用.这是个日积月累、潜移默化的过程,最终的重大突破迟迟不到,考验着你的耐心.\n\n* 微习惯是个小习惯,是更大系统的一部分.正如原子是分子的组成部分一样,微习惯也是重大成效的组成部分.\n\n* 如果你想要的更好的结果,那就别再设定目标,转而全力关注你的体系.\n\n* 不求拔高你的目标,但求落实你的体系.\n\n#### 第2章 你的习惯如何塑造你的身份(反之亦然)\n\n* 变化有三个层次:结果变化、过程变成和身份变化.\n\n* 改变习惯的最有效方法不是关注你想要达到的目标,而是你想要成为谁.\n\n* 你的身份来自你的习惯.每个行动都是你在投票给你想成为的人.\n\n* 要想使自己做到最好,你需要持续编辑你的信念,升级和扩展你的身份.\n\n* 习惯至关重要的真正原因不是因为它们能带给你更好的结果(尽管他们能做到这一点),而是因为它们能改变你对自己抱有的信念.\n\n#### 第3章 培养良好习惯的四步法\n\n* 习惯是一种行为,因为重复的次数已经足够多,便可以自然而然地出现.\n\n* 习惯的最终目的是用尽可能少的精力和努力来解决生活中的问题.\n\n* 任何习惯都可以分解成一个反馈循环,它包括四个步骤:提示、渴求、反应和奖励.\n\n* 行为转变的四大定律是一套我们可以用来培养好习惯的简单规则.它们是:\n    1. 让它显而易见;\n    2. 让它有吸引力;\n    3. 让它简便易行;\n    4. 让它令人愉悦.\n\n### 第一定律 让它显而易见\n\n#### 第4章 看着不对劲儿的那个人\n\n* 有了足够的练习,你的大脑会不假思索地拾取预测特定结果的提示.\n\n* 一旦习惯成自然,我们就不再关注自己在做什么.\n\n* 行为转变的过程总是始于自觉.在你想改变习惯之前,你需要首先了解它.\n\n* 通过说出你的行动,指差确认将你的意识程度从下意识的习惯状态提升到警觉的水平.\n\n* 习惯积分卡是个简单的练习,你可以用它来深入了解你的行为.\n\n#### 第5章 培养新习惯的最佳方式\n\n* 行为转变的第一定律是让它显而易见.\n\n* 两个最常见的提示是时间和地点.\n\n* 创建执行意图是一种策略,你可以用它将新习惯与特定的时间和地点整合.\n\n* 执行意图的公式是:我将于[时间]在[地点][行为].\n\n* 习惯叠加是一种策略,你可以用它来将新习惯与当前习惯整合.\n\n* 习惯叠加的公式是:继[当前习惯]之后,我将[新习惯].\n\n#### 第6章 原动力被高估,环境往往更重要\n\n* 随着时间的推移,情境中的微小变化会导致行为的巨大变化.\n\n* 每一个习惯都是由提示引发的.我们更容易注意到鲜明的提示.\n\n* 让良好习惯的提示在你的环境中显而易见.\n\n* 渐渐地,你的习惯不再与单一的触发因素相关联,而是与这种行为周围的整个环境相关联.情境变成了提示.\n\n* 在新的环境中培养新的习惯更容易,因为你不会收到与旧习惯相关联的提示的干扰.\n\n#### 第7章 自我控制的秘密\n\n* 行为转变的第一定律的反面是让它脱离视线.\n\n* 习惯一旦养成,就不太可能被忘记.\n\n* 自控能力强的人尽量远离充满诱惑的环境.逃避诱惑比抗拒诱惑容易.\n\n* 戒除坏习惯最实用的方法之一是减少接触导致坏习惯的提示.\n\n* 自我控制只是权宜之计,而非长久之计.\n\n### 第二定律 让它有吸引力\n\n#### 第8章 怎样使习惯不可抗拒\n\n* 行为转变的第二定律是让它具有吸引力.\n\n* 机会越有吸引力,养成习惯的可能性就越大.\n\n* 习惯是多巴胺驱动的反馈回路.当多巴胺浓度上升时,我们采取行动的动机也会变得更强烈.\n\n* 正是对奖励的期待,而不是奖励本身,促使我们采取行动.预期越高,多巴胺峰值越大.\n\n* 喜好绑定是让习惯更具吸引力的一种方式.具体做法就是将你喜好的高频动作与你需要做的低频动作搭配在一起.\n\n* 习惯叠加+绑定喜好公式的表述如下\n    1. 继[当前习惯]之后,我将[我需要的习惯].\n    2. 继[我需要的习惯]之后,我将[我想要的习惯].\n\n#### 第9章 在习惯形成中亲友所起的作用\n\n* 我们生活的文化环境决定着哪些行为对我们有.利\n\n* 我们倾向于培养被我们的文化推崇的习惯,因为我们强烈地渴望融入并属于这个部落.\n\n* 为了培养更好的习惯,你能做得最有效的事情之一是加入一种文化,在这种文化中\n    1. 你想要的行为是正常的行为,\n    2. 你已经和这个群体有一些共同之处.\n\n* 部落的正常行为往往压倒个人期望的行为.大多数时候,我们宁愿跟众人一起犯错,也不愿特立独行坚持真理.\n\n* 如果一个行为能为我们赢得认可、尊重和赞扬,我们就会认为它很有吸引力.\n\n#### 第10章 如何找到并消除你坏习惯的根源\n\n* 行为转变的第二定律的反用是让它缺乏吸引力.\n\n* 每种行为都有表层的渴求和更深层的动机.\n\n* 你的习惯是解决古老欲望的现代方法.\n\n* 你习惯的原因实际上是它们之前的预测.这种预测会产生一种感觉.\n\n* 强调避免坏习惯所换来的好处,让坏习惯不再有吸引力.\n\n* 当我们将习惯与积极的感受相关联,习惯就有了吸引力;反之,则没有吸引力.在开始培养难度较大的习惯之前,先做些你喜欢的事情来创造一种激励仪式.\n\n### 第三定律 让它简便易行\n\n#### 第11章 慢步前行,但绝不后退\n\n* 行为转变的第三定律是让它简便易行.\n\n* 最有效的学习形式是付诸实践,而不是纸上谈兵.\n\n* 专注于采取行动,而不只是酝酿行动.\n\n* 习惯的形成是一个行为通过重复逐渐变得更加自动化的过程.\n\n* 习惯的培养不在于时间长短,而在于重复的次数.\n\n#### 第12章 最省力法则\n\n* 人类行为遵循最省力法则.我们天然地倾向于付出最少工作量的选择.\n\n* 创造一个环境,尽可能让人们便于做正确的事.\n\n* 降低与良好行为相关的阻力.阻力小,习惯就容易养成.\n\n* 增加与不良行为相关的阻力.阻力大,习惯就难以养成.\n\n* 预备好你的环境,使未来的行动更容易.\n\n#### 第13章 怎么利用两分钟规则停止拖延\n\n* 习惯可以在几秒钟内完成,但会持续影响你在接下来的几分钟或几个小时的行为.\n\n* 许多习惯发生在决定性的时刻,每时每刻的选择就像岔路口,你的选择最终会导致卓有成效,或者一事无成的一天.\n\n* 两分钟规则规定:\"当你开始培养一种新习惯时,它所用时间不应超过2分钟.\"\n\n* 一种程序的开始阶段越是仪式化,你就越有可能进入做大事所需的注意力高度集中的状态.\n\n* 习惯优化前先要实现标准化.你不能改善一个不存在的习惯.\n\n#### 第14章 怎样让好习惯不可避免,坏习惯难以养成\n\n* 行为转变第三定律的反面就是让它难以施行.\n\n* 承诺机制是你当前做出的一个选择,它锁定了未来更好的行为.\n\n* 锁定未来行为的终极途径是自动化你的习惯.\n\n* 一次性选择,比如买张好床垫或加入自动储蓄计划,是一种单次行动,可以让你的未来习惯自动化,并随着时间的推移带来越来越多的回报.\n\n* 使用技术自动化你的习惯是保证正确行为的最可靠和有效的途径.\n","source":"_posts/掌握习惯-原子习惯-细微改变带来巨大成就的实证法则.md","raw":"---\ntitle: 掌握习惯--原子习惯:细微改变带来巨大成就的实证法则\ndate: 2020-03-09 15:26:04\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 习惯\n---\n这本书是一个B站up主 ElenaLin_青青 在一期视频中推荐,趁着最近还没有复工就来看看了.\n<!--more-->\n\n### 基本原理 点滴变化何以意义重大\n\n#### 第1章 微习惯的惊人力量\n\n* 习惯是自我提高的复利.从长远来看,每天进步1%的效果不容小觑.\n\n* 习惯是把双刃剑.它们可能对你有利,也可能对你不利,这就是为什么理解细节至关重要.\n\n* 在你越过临界点之前,细微的变化似乎没起任何作用.这是个日积月累、潜移默化的过程,最终的重大突破迟迟不到,考验着你的耐心.\n\n* 微习惯是个小习惯,是更大系统的一部分.正如原子是分子的组成部分一样,微习惯也是重大成效的组成部分.\n\n* 如果你想要的更好的结果,那就别再设定目标,转而全力关注你的体系.\n\n* 不求拔高你的目标,但求落实你的体系.\n\n#### 第2章 你的习惯如何塑造你的身份(反之亦然)\n\n* 变化有三个层次:结果变化、过程变成和身份变化.\n\n* 改变习惯的最有效方法不是关注你想要达到的目标,而是你想要成为谁.\n\n* 你的身份来自你的习惯.每个行动都是你在投票给你想成为的人.\n\n* 要想使自己做到最好,你需要持续编辑你的信念,升级和扩展你的身份.\n\n* 习惯至关重要的真正原因不是因为它们能带给你更好的结果(尽管他们能做到这一点),而是因为它们能改变你对自己抱有的信念.\n\n#### 第3章 培养良好习惯的四步法\n\n* 习惯是一种行为,因为重复的次数已经足够多,便可以自然而然地出现.\n\n* 习惯的最终目的是用尽可能少的精力和努力来解决生活中的问题.\n\n* 任何习惯都可以分解成一个反馈循环,它包括四个步骤:提示、渴求、反应和奖励.\n\n* 行为转变的四大定律是一套我们可以用来培养好习惯的简单规则.它们是:\n    1. 让它显而易见;\n    2. 让它有吸引力;\n    3. 让它简便易行;\n    4. 让它令人愉悦.\n\n### 第一定律 让它显而易见\n\n#### 第4章 看着不对劲儿的那个人\n\n* 有了足够的练习,你的大脑会不假思索地拾取预测特定结果的提示.\n\n* 一旦习惯成自然,我们就不再关注自己在做什么.\n\n* 行为转变的过程总是始于自觉.在你想改变习惯之前,你需要首先了解它.\n\n* 通过说出你的行动,指差确认将你的意识程度从下意识的习惯状态提升到警觉的水平.\n\n* 习惯积分卡是个简单的练习,你可以用它来深入了解你的行为.\n\n#### 第5章 培养新习惯的最佳方式\n\n* 行为转变的第一定律是让它显而易见.\n\n* 两个最常见的提示是时间和地点.\n\n* 创建执行意图是一种策略,你可以用它将新习惯与特定的时间和地点整合.\n\n* 执行意图的公式是:我将于[时间]在[地点][行为].\n\n* 习惯叠加是一种策略,你可以用它来将新习惯与当前习惯整合.\n\n* 习惯叠加的公式是:继[当前习惯]之后,我将[新习惯].\n\n#### 第6章 原动力被高估,环境往往更重要\n\n* 随着时间的推移,情境中的微小变化会导致行为的巨大变化.\n\n* 每一个习惯都是由提示引发的.我们更容易注意到鲜明的提示.\n\n* 让良好习惯的提示在你的环境中显而易见.\n\n* 渐渐地,你的习惯不再与单一的触发因素相关联,而是与这种行为周围的整个环境相关联.情境变成了提示.\n\n* 在新的环境中培养新的习惯更容易,因为你不会收到与旧习惯相关联的提示的干扰.\n\n#### 第7章 自我控制的秘密\n\n* 行为转变的第一定律的反面是让它脱离视线.\n\n* 习惯一旦养成,就不太可能被忘记.\n\n* 自控能力强的人尽量远离充满诱惑的环境.逃避诱惑比抗拒诱惑容易.\n\n* 戒除坏习惯最实用的方法之一是减少接触导致坏习惯的提示.\n\n* 自我控制只是权宜之计,而非长久之计.\n\n### 第二定律 让它有吸引力\n\n#### 第8章 怎样使习惯不可抗拒\n\n* 行为转变的第二定律是让它具有吸引力.\n\n* 机会越有吸引力,养成习惯的可能性就越大.\n\n* 习惯是多巴胺驱动的反馈回路.当多巴胺浓度上升时,我们采取行动的动机也会变得更强烈.\n\n* 正是对奖励的期待,而不是奖励本身,促使我们采取行动.预期越高,多巴胺峰值越大.\n\n* 喜好绑定是让习惯更具吸引力的一种方式.具体做法就是将你喜好的高频动作与你需要做的低频动作搭配在一起.\n\n* 习惯叠加+绑定喜好公式的表述如下\n    1. 继[当前习惯]之后,我将[我需要的习惯].\n    2. 继[我需要的习惯]之后,我将[我想要的习惯].\n\n#### 第9章 在习惯形成中亲友所起的作用\n\n* 我们生活的文化环境决定着哪些行为对我们有.利\n\n* 我们倾向于培养被我们的文化推崇的习惯,因为我们强烈地渴望融入并属于这个部落.\n\n* 为了培养更好的习惯,你能做得最有效的事情之一是加入一种文化,在这种文化中\n    1. 你想要的行为是正常的行为,\n    2. 你已经和这个群体有一些共同之处.\n\n* 部落的正常行为往往压倒个人期望的行为.大多数时候,我们宁愿跟众人一起犯错,也不愿特立独行坚持真理.\n\n* 如果一个行为能为我们赢得认可、尊重和赞扬,我们就会认为它很有吸引力.\n\n#### 第10章 如何找到并消除你坏习惯的根源\n\n* 行为转变的第二定律的反用是让它缺乏吸引力.\n\n* 每种行为都有表层的渴求和更深层的动机.\n\n* 你的习惯是解决古老欲望的现代方法.\n\n* 你习惯的原因实际上是它们之前的预测.这种预测会产生一种感觉.\n\n* 强调避免坏习惯所换来的好处,让坏习惯不再有吸引力.\n\n* 当我们将习惯与积极的感受相关联,习惯就有了吸引力;反之,则没有吸引力.在开始培养难度较大的习惯之前,先做些你喜欢的事情来创造一种激励仪式.\n\n### 第三定律 让它简便易行\n\n#### 第11章 慢步前行,但绝不后退\n\n* 行为转变的第三定律是让它简便易行.\n\n* 最有效的学习形式是付诸实践,而不是纸上谈兵.\n\n* 专注于采取行动,而不只是酝酿行动.\n\n* 习惯的形成是一个行为通过重复逐渐变得更加自动化的过程.\n\n* 习惯的培养不在于时间长短,而在于重复的次数.\n\n#### 第12章 最省力法则\n\n* 人类行为遵循最省力法则.我们天然地倾向于付出最少工作量的选择.\n\n* 创造一个环境,尽可能让人们便于做正确的事.\n\n* 降低与良好行为相关的阻力.阻力小,习惯就容易养成.\n\n* 增加与不良行为相关的阻力.阻力大,习惯就难以养成.\n\n* 预备好你的环境,使未来的行动更容易.\n\n#### 第13章 怎么利用两分钟规则停止拖延\n\n* 习惯可以在几秒钟内完成,但会持续影响你在接下来的几分钟或几个小时的行为.\n\n* 许多习惯发生在决定性的时刻,每时每刻的选择就像岔路口,你的选择最终会导致卓有成效,或者一事无成的一天.\n\n* 两分钟规则规定:\"当你开始培养一种新习惯时,它所用时间不应超过2分钟.\"\n\n* 一种程序的开始阶段越是仪式化,你就越有可能进入做大事所需的注意力高度集中的状态.\n\n* 习惯优化前先要实现标准化.你不能改善一个不存在的习惯.\n\n#### 第14章 怎样让好习惯不可避免,坏习惯难以养成\n\n* 行为转变第三定律的反面就是让它难以施行.\n\n* 承诺机制是你当前做出的一个选择,它锁定了未来更好的行为.\n\n* 锁定未来行为的终极途径是自动化你的习惯.\n\n* 一次性选择,比如买张好床垫或加入自动储蓄计划,是一种单次行动,可以让你的未来习惯自动化,并随着时间的推移带来越来越多的回报.\n\n* 使用技术自动化你的习惯是保证正确行为的最可靠和有效的途径.\n","slug":"掌握习惯-原子习惯-细微改变带来巨大成就的实证法则","published":1,"updated":"2020-03-09T14:00:47.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24k006btkui4by8t2tv","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>这本书是一个B站up主 ElenaLin_青青 在一期视频中推荐,趁着最近还没有复工就来看看了.<br><a id=\"more\"></a></p><h3 id=\"基本原理-点滴变化何以意义重大\"><a href=\"#基本原理-点滴变化何以意义重大\" class=\"headerlink\" title=\"基本原理 点滴变化何以意义重大\"></a>基本原理 点滴变化何以意义重大</h3><h4 id=\"第1章-微习惯的惊人力量\"><a href=\"#第1章-微习惯的惊人力量\" class=\"headerlink\" title=\"第1章 微习惯的惊人力量\"></a>第1章 微习惯的惊人力量</h4><ul><li><p>习惯是自我提高的复利.从长远来看,每天进步1%的效果不容小觑.</p></li><li><p>习惯是把双刃剑.它们可能对你有利,也可能对你不利,这就是为什么理解细节至关重要.</p></li><li><p>在你越过临界点之前,细微的变化似乎没起任何作用.这是个日积月累、潜移默化的过程,最终的重大突破迟迟不到,考验着你的耐心.</p></li><li><p>微习惯是个小习惯,是更大系统的一部分.正如原子是分子的组成部分一样,微习惯也是重大成效的组成部分.</p></li><li><p>如果你想要的更好的结果,那就别再设定目标,转而全力关注你的体系.</p></li><li><p>不求拔高你的目标,但求落实你的体系.</p></li></ul><h4 id=\"第2章-你的习惯如何塑造你的身份-反之亦然\"><a href=\"#第2章-你的习惯如何塑造你的身份-反之亦然\" class=\"headerlink\" title=\"第2章 你的习惯如何塑造你的身份(反之亦然)\"></a>第2章 你的习惯如何塑造你的身份(反之亦然)</h4><ul><li><p>变化有三个层次:结果变化、过程变成和身份变化.</p></li><li><p>改变习惯的最有效方法不是关注你想要达到的目标,而是你想要成为谁.</p></li><li><p>你的身份来自你的习惯.每个行动都是你在投票给你想成为的人.</p></li><li><p>要想使自己做到最好,你需要持续编辑你的信念,升级和扩展你的身份.</p></li><li><p>习惯至关重要的真正原因不是因为它们能带给你更好的结果(尽管他们能做到这一点),而是因为它们能改变你对自己抱有的信念.</p></li></ul><h4 id=\"第3章-培养良好习惯的四步法\"><a href=\"#第3章-培养良好习惯的四步法\" class=\"headerlink\" title=\"第3章 培养良好习惯的四步法\"></a>第3章 培养良好习惯的四步法</h4><ul><li><p>习惯是一种行为,因为重复的次数已经足够多,便可以自然而然地出现.</p></li><li><p>习惯的最终目的是用尽可能少的精力和努力来解决生活中的问题.</p></li><li><p>任何习惯都可以分解成一个反馈循环,它包括四个步骤:提示、渴求、反应和奖励.</p></li><li><p>行为转变的四大定律是一套我们可以用来培养好习惯的简单规则.它们是:</p><ol><li>让它显而易见;</li><li>让它有吸引力;</li><li>让它简便易行;</li><li>让它令人愉悦.</li></ol></li></ul><h3 id=\"第一定律-让它显而易见\"><a href=\"#第一定律-让它显而易见\" class=\"headerlink\" title=\"第一定律 让它显而易见\"></a>第一定律 让它显而易见</h3><h4 id=\"第4章-看着不对劲儿的那个人\"><a href=\"#第4章-看着不对劲儿的那个人\" class=\"headerlink\" title=\"第4章 看着不对劲儿的那个人\"></a>第4章 看着不对劲儿的那个人</h4><ul><li><p>有了足够的练习,你的大脑会不假思索地拾取预测特定结果的提示.</p></li><li><p>一旦习惯成自然,我们就不再关注自己在做什么.</p></li><li><p>行为转变的过程总是始于自觉.在你想改变习惯之前,你需要首先了解它.</p></li><li><p>通过说出你的行动,指差确认将你的意识程度从下意识的习惯状态提升到警觉的水平.</p></li><li><p>习惯积分卡是个简单的练习,你可以用它来深入了解你的行为.</p></li></ul><h4 id=\"第5章-培养新习惯的最佳方式\"><a href=\"#第5章-培养新习惯的最佳方式\" class=\"headerlink\" title=\"第5章 培养新习惯的最佳方式\"></a>第5章 培养新习惯的最佳方式</h4><ul><li><p>行为转变的第一定律是让它显而易见.</p></li><li><p>两个最常见的提示是时间和地点.</p></li><li><p>创建执行意图是一种策略,你可以用它将新习惯与特定的时间和地点整合.</p></li><li><p>执行意图的公式是:我将于[时间]在[地点][行为].</p></li><li><p>习惯叠加是一种策略,你可以用它来将新习惯与当前习惯整合.</p></li><li><p>习惯叠加的公式是:继[当前习惯]之后,我将[新习惯].</p></li></ul><h4 id=\"第6章-原动力被高估-环境往往更重要\"><a href=\"#第6章-原动力被高估-环境往往更重要\" class=\"headerlink\" title=\"第6章 原动力被高估,环境往往更重要\"></a>第6章 原动力被高估,环境往往更重要</h4><ul><li><p>随着时间的推移,情境中的微小变化会导致行为的巨大变化.</p></li><li><p>每一个习惯都是由提示引发的.我们更容易注意到鲜明的提示.</p></li><li><p>让良好习惯的提示在你的环境中显而易见.</p></li><li><p>渐渐地,你的习惯不再与单一的触发因素相关联,而是与这种行为周围的整个环境相关联.情境变成了提示.</p></li><li><p>在新的环境中培养新的习惯更容易,因为你不会收到与旧习惯相关联的提示的干扰.</p></li></ul><h4 id=\"第7章-自我控制的秘密\"><a href=\"#第7章-自我控制的秘密\" class=\"headerlink\" title=\"第7章 自我控制的秘密\"></a>第7章 自我控制的秘密</h4><ul><li><p>行为转变的第一定律的反面是让它脱离视线.</p></li><li><p>习惯一旦养成,就不太可能被忘记.</p></li><li><p>自控能力强的人尽量远离充满诱惑的环境.逃避诱惑比抗拒诱惑容易.</p></li><li><p>戒除坏习惯最实用的方法之一是减少接触导致坏习惯的提示.</p></li><li><p>自我控制只是权宜之计,而非长久之计.</p></li></ul><h3 id=\"第二定律-让它有吸引力\"><a href=\"#第二定律-让它有吸引力\" class=\"headerlink\" title=\"第二定律 让它有吸引力\"></a>第二定律 让它有吸引力</h3><h4 id=\"第8章-怎样使习惯不可抗拒\"><a href=\"#第8章-怎样使习惯不可抗拒\" class=\"headerlink\" title=\"第8章 怎样使习惯不可抗拒\"></a>第8章 怎样使习惯不可抗拒</h4><ul><li><p>行为转变的第二定律是让它具有吸引力.</p></li><li><p>机会越有吸引力,养成习惯的可能性就越大.</p></li><li><p>习惯是多巴胺驱动的反馈回路.当多巴胺浓度上升时,我们采取行动的动机也会变得更强烈.</p></li><li><p>正是对奖励的期待,而不是奖励本身,促使我们采取行动.预期越高,多巴胺峰值越大.</p></li><li><p>喜好绑定是让习惯更具吸引力的一种方式.具体做法就是将你喜好的高频动作与你需要做的低频动作搭配在一起.</p></li><li><p>习惯叠加+绑定喜好公式的表述如下</p><ol><li>继[当前习惯]之后,我将[我需要的习惯].</li><li>继[我需要的习惯]之后,我将[我想要的习惯].</li></ol></li></ul><h4 id=\"第9章-在习惯形成中亲友所起的作用\"><a href=\"#第9章-在习惯形成中亲友所起的作用\" class=\"headerlink\" title=\"第9章 在习惯形成中亲友所起的作用\"></a>第9章 在习惯形成中亲友所起的作用</h4><ul><li><p>我们生活的文化环境决定着哪些行为对我们有.利</p></li><li><p>我们倾向于培养被我们的文化推崇的习惯,因为我们强烈地渴望融入并属于这个部落.</p></li><li><p>为了培养更好的习惯,你能做得最有效的事情之一是加入一种文化,在这种文化中</p><ol><li>你想要的行为是正常的行为,</li><li>你已经和这个群体有一些共同之处.</li></ol></li><li><p>部落的正常行为往往压倒个人期望的行为.大多数时候,我们宁愿跟众人一起犯错,也不愿特立独行坚持真理.</p></li><li><p>如果一个行为能为我们赢得认可、尊重和赞扬,我们就会认为它很有吸引力.</p></li></ul><h4 id=\"第10章-如何找到并消除你坏习惯的根源\"><a href=\"#第10章-如何找到并消除你坏习惯的根源\" class=\"headerlink\" title=\"第10章 如何找到并消除你坏习惯的根源\"></a>第10章 如何找到并消除你坏习惯的根源</h4><ul><li><p>行为转变的第二定律的反用是让它缺乏吸引力.</p></li><li><p>每种行为都有表层的渴求和更深层的动机.</p></li><li><p>你的习惯是解决古老欲望的现代方法.</p></li><li><p>你习惯的原因实际上是它们之前的预测.这种预测会产生一种感觉.</p></li><li><p>强调避免坏习惯所换来的好处,让坏习惯不再有吸引力.</p></li><li><p>当我们将习惯与积极的感受相关联,习惯就有了吸引力;反之,则没有吸引力.在开始培养难度较大的习惯之前,先做些你喜欢的事情来创造一种激励仪式.</p></li></ul><h3 id=\"第三定律-让它简便易行\"><a href=\"#第三定律-让它简便易行\" class=\"headerlink\" title=\"第三定律 让它简便易行\"></a>第三定律 让它简便易行</h3><h4 id=\"第11章-慢步前行-但绝不后退\"><a href=\"#第11章-慢步前行-但绝不后退\" class=\"headerlink\" title=\"第11章 慢步前行,但绝不后退\"></a>第11章 慢步前行,但绝不后退</h4><ul><li><p>行为转变的第三定律是让它简便易行.</p></li><li><p>最有效的学习形式是付诸实践,而不是纸上谈兵.</p></li><li><p>专注于采取行动,而不只是酝酿行动.</p></li><li><p>习惯的形成是一个行为通过重复逐渐变得更加自动化的过程.</p></li><li><p>习惯的培养不在于时间长短,而在于重复的次数.</p></li></ul><h4 id=\"第12章-最省力法则\"><a href=\"#第12章-最省力法则\" class=\"headerlink\" title=\"第12章 最省力法则\"></a>第12章 最省力法则</h4><ul><li><p>人类行为遵循最省力法则.我们天然地倾向于付出最少工作量的选择.</p></li><li><p>创造一个环境,尽可能让人们便于做正确的事.</p></li><li><p>降低与良好行为相关的阻力.阻力小,习惯就容易养成.</p></li><li><p>增加与不良行为相关的阻力.阻力大,习惯就难以养成.</p></li><li><p>预备好你的环境,使未来的行动更容易.</p></li></ul><h4 id=\"第13章-怎么利用两分钟规则停止拖延\"><a href=\"#第13章-怎么利用两分钟规则停止拖延\" class=\"headerlink\" title=\"第13章 怎么利用两分钟规则停止拖延\"></a>第13章 怎么利用两分钟规则停止拖延</h4><ul><li><p>习惯可以在几秒钟内完成,但会持续影响你在接下来的几分钟或几个小时的行为.</p></li><li><p>许多习惯发生在决定性的时刻,每时每刻的选择就像岔路口,你的选择最终会导致卓有成效,或者一事无成的一天.</p></li><li><p>两分钟规则规定:”当你开始培养一种新习惯时,它所用时间不应超过2分钟.”</p></li><li><p>一种程序的开始阶段越是仪式化,你就越有可能进入做大事所需的注意力高度集中的状态.</p></li><li><p>习惯优化前先要实现标准化.你不能改善一个不存在的习惯.</p></li></ul><h4 id=\"第14章-怎样让好习惯不可避免-坏习惯难以养成\"><a href=\"#第14章-怎样让好习惯不可避免-坏习惯难以养成\" class=\"headerlink\" title=\"第14章 怎样让好习惯不可避免,坏习惯难以养成\"></a>第14章 怎样让好习惯不可避免,坏习惯难以养成</h4><ul><li><p>行为转变第三定律的反面就是让它难以施行.</p></li><li><p>承诺机制是你当前做出的一个选择,它锁定了未来更好的行为.</p></li><li><p>锁定未来行为的终极途径是自动化你的习惯.</p></li><li><p>一次性选择,比如买张好床垫或加入自动储蓄计划,是一种单次行动,可以让你的未来习惯自动化,并随着时间的推移带来越来越多的回报.</p></li><li><p>使用技术自动化你的习惯是保证正确行为的最可靠和有效的途径.</p></li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>这本书是一个B站up主 ElenaLin_青青 在一期视频中推荐,趁着最近还没有复工就来看看了.<br>","more":"</p><h3 id=\"基本原理-点滴变化何以意义重大\"><a href=\"#基本原理-点滴变化何以意义重大\" class=\"headerlink\" title=\"基本原理 点滴变化何以意义重大\"></a>基本原理 点滴变化何以意义重大</h3><h4 id=\"第1章-微习惯的惊人力量\"><a href=\"#第1章-微习惯的惊人力量\" class=\"headerlink\" title=\"第1章 微习惯的惊人力量\"></a>第1章 微习惯的惊人力量</h4><ul><li><p>习惯是自我提高的复利.从长远来看,每天进步1%的效果不容小觑.</p></li><li><p>习惯是把双刃剑.它们可能对你有利,也可能对你不利,这就是为什么理解细节至关重要.</p></li><li><p>在你越过临界点之前,细微的变化似乎没起任何作用.这是个日积月累、潜移默化的过程,最终的重大突破迟迟不到,考验着你的耐心.</p></li><li><p>微习惯是个小习惯,是更大系统的一部分.正如原子是分子的组成部分一样,微习惯也是重大成效的组成部分.</p></li><li><p>如果你想要的更好的结果,那就别再设定目标,转而全力关注你的体系.</p></li><li><p>不求拔高你的目标,但求落实你的体系.</p></li></ul><h4 id=\"第2章-你的习惯如何塑造你的身份-反之亦然\"><a href=\"#第2章-你的习惯如何塑造你的身份-反之亦然\" class=\"headerlink\" title=\"第2章 你的习惯如何塑造你的身份(反之亦然)\"></a>第2章 你的习惯如何塑造你的身份(反之亦然)</h4><ul><li><p>变化有三个层次:结果变化、过程变成和身份变化.</p></li><li><p>改变习惯的最有效方法不是关注你想要达到的目标,而是你想要成为谁.</p></li><li><p>你的身份来自你的习惯.每个行动都是你在投票给你想成为的人.</p></li><li><p>要想使自己做到最好,你需要持续编辑你的信念,升级和扩展你的身份.</p></li><li><p>习惯至关重要的真正原因不是因为它们能带给你更好的结果(尽管他们能做到这一点),而是因为它们能改变你对自己抱有的信念.</p></li></ul><h4 id=\"第3章-培养良好习惯的四步法\"><a href=\"#第3章-培养良好习惯的四步法\" class=\"headerlink\" title=\"第3章 培养良好习惯的四步法\"></a>第3章 培养良好习惯的四步法</h4><ul><li><p>习惯是一种行为,因为重复的次数已经足够多,便可以自然而然地出现.</p></li><li><p>习惯的最终目的是用尽可能少的精力和努力来解决生活中的问题.</p></li><li><p>任何习惯都可以分解成一个反馈循环,它包括四个步骤:提示、渴求、反应和奖励.</p></li><li><p>行为转变的四大定律是一套我们可以用来培养好习惯的简单规则.它们是:</p><ol><li>让它显而易见;</li><li>让它有吸引力;</li><li>让它简便易行;</li><li>让它令人愉悦.</li></ol></li></ul><h3 id=\"第一定律-让它显而易见\"><a href=\"#第一定律-让它显而易见\" class=\"headerlink\" title=\"第一定律 让它显而易见\"></a>第一定律 让它显而易见</h3><h4 id=\"第4章-看着不对劲儿的那个人\"><a href=\"#第4章-看着不对劲儿的那个人\" class=\"headerlink\" title=\"第4章 看着不对劲儿的那个人\"></a>第4章 看着不对劲儿的那个人</h4><ul><li><p>有了足够的练习,你的大脑会不假思索地拾取预测特定结果的提示.</p></li><li><p>一旦习惯成自然,我们就不再关注自己在做什么.</p></li><li><p>行为转变的过程总是始于自觉.在你想改变习惯之前,你需要首先了解它.</p></li><li><p>通过说出你的行动,指差确认将你的意识程度从下意识的习惯状态提升到警觉的水平.</p></li><li><p>习惯积分卡是个简单的练习,你可以用它来深入了解你的行为.</p></li></ul><h4 id=\"第5章-培养新习惯的最佳方式\"><a href=\"#第5章-培养新习惯的最佳方式\" class=\"headerlink\" title=\"第5章 培养新习惯的最佳方式\"></a>第5章 培养新习惯的最佳方式</h4><ul><li><p>行为转变的第一定律是让它显而易见.</p></li><li><p>两个最常见的提示是时间和地点.</p></li><li><p>创建执行意图是一种策略,你可以用它将新习惯与特定的时间和地点整合.</p></li><li><p>执行意图的公式是:我将于[时间]在[地点][行为].</p></li><li><p>习惯叠加是一种策略,你可以用它来将新习惯与当前习惯整合.</p></li><li><p>习惯叠加的公式是:继[当前习惯]之后,我将[新习惯].</p></li></ul><h4 id=\"第6章-原动力被高估-环境往往更重要\"><a href=\"#第6章-原动力被高估-环境往往更重要\" class=\"headerlink\" title=\"第6章 原动力被高估,环境往往更重要\"></a>第6章 原动力被高估,环境往往更重要</h4><ul><li><p>随着时间的推移,情境中的微小变化会导致行为的巨大变化.</p></li><li><p>每一个习惯都是由提示引发的.我们更容易注意到鲜明的提示.</p></li><li><p>让良好习惯的提示在你的环境中显而易见.</p></li><li><p>渐渐地,你的习惯不再与单一的触发因素相关联,而是与这种行为周围的整个环境相关联.情境变成了提示.</p></li><li><p>在新的环境中培养新的习惯更容易,因为你不会收到与旧习惯相关联的提示的干扰.</p></li></ul><h4 id=\"第7章-自我控制的秘密\"><a href=\"#第7章-自我控制的秘密\" class=\"headerlink\" title=\"第7章 自我控制的秘密\"></a>第7章 自我控制的秘密</h4><ul><li><p>行为转变的第一定律的反面是让它脱离视线.</p></li><li><p>习惯一旦养成,就不太可能被忘记.</p></li><li><p>自控能力强的人尽量远离充满诱惑的环境.逃避诱惑比抗拒诱惑容易.</p></li><li><p>戒除坏习惯最实用的方法之一是减少接触导致坏习惯的提示.</p></li><li><p>自我控制只是权宜之计,而非长久之计.</p></li></ul><h3 id=\"第二定律-让它有吸引力\"><a href=\"#第二定律-让它有吸引力\" class=\"headerlink\" title=\"第二定律 让它有吸引力\"></a>第二定律 让它有吸引力</h3><h4 id=\"第8章-怎样使习惯不可抗拒\"><a href=\"#第8章-怎样使习惯不可抗拒\" class=\"headerlink\" title=\"第8章 怎样使习惯不可抗拒\"></a>第8章 怎样使习惯不可抗拒</h4><ul><li><p>行为转变的第二定律是让它具有吸引力.</p></li><li><p>机会越有吸引力,养成习惯的可能性就越大.</p></li><li><p>习惯是多巴胺驱动的反馈回路.当多巴胺浓度上升时,我们采取行动的动机也会变得更强烈.</p></li><li><p>正是对奖励的期待,而不是奖励本身,促使我们采取行动.预期越高,多巴胺峰值越大.</p></li><li><p>喜好绑定是让习惯更具吸引力的一种方式.具体做法就是将你喜好的高频动作与你需要做的低频动作搭配在一起.</p></li><li><p>习惯叠加+绑定喜好公式的表述如下</p><ol><li>继[当前习惯]之后,我将[我需要的习惯].</li><li>继[我需要的习惯]之后,我将[我想要的习惯].</li></ol></li></ul><h4 id=\"第9章-在习惯形成中亲友所起的作用\"><a href=\"#第9章-在习惯形成中亲友所起的作用\" class=\"headerlink\" title=\"第9章 在习惯形成中亲友所起的作用\"></a>第9章 在习惯形成中亲友所起的作用</h4><ul><li><p>我们生活的文化环境决定着哪些行为对我们有.利</p></li><li><p>我们倾向于培养被我们的文化推崇的习惯,因为我们强烈地渴望融入并属于这个部落.</p></li><li><p>为了培养更好的习惯,你能做得最有效的事情之一是加入一种文化,在这种文化中</p><ol><li>你想要的行为是正常的行为,</li><li>你已经和这个群体有一些共同之处.</li></ol></li><li><p>部落的正常行为往往压倒个人期望的行为.大多数时候,我们宁愿跟众人一起犯错,也不愿特立独行坚持真理.</p></li><li><p>如果一个行为能为我们赢得认可、尊重和赞扬,我们就会认为它很有吸引力.</p></li></ul><h4 id=\"第10章-如何找到并消除你坏习惯的根源\"><a href=\"#第10章-如何找到并消除你坏习惯的根源\" class=\"headerlink\" title=\"第10章 如何找到并消除你坏习惯的根源\"></a>第10章 如何找到并消除你坏习惯的根源</h4><ul><li><p>行为转变的第二定律的反用是让它缺乏吸引力.</p></li><li><p>每种行为都有表层的渴求和更深层的动机.</p></li><li><p>你的习惯是解决古老欲望的现代方法.</p></li><li><p>你习惯的原因实际上是它们之前的预测.这种预测会产生一种感觉.</p></li><li><p>强调避免坏习惯所换来的好处,让坏习惯不再有吸引力.</p></li><li><p>当我们将习惯与积极的感受相关联,习惯就有了吸引力;反之,则没有吸引力.在开始培养难度较大的习惯之前,先做些你喜欢的事情来创造一种激励仪式.</p></li></ul><h3 id=\"第三定律-让它简便易行\"><a href=\"#第三定律-让它简便易行\" class=\"headerlink\" title=\"第三定律 让它简便易行\"></a>第三定律 让它简便易行</h3><h4 id=\"第11章-慢步前行-但绝不后退\"><a href=\"#第11章-慢步前行-但绝不后退\" class=\"headerlink\" title=\"第11章 慢步前行,但绝不后退\"></a>第11章 慢步前行,但绝不后退</h4><ul><li><p>行为转变的第三定律是让它简便易行.</p></li><li><p>最有效的学习形式是付诸实践,而不是纸上谈兵.</p></li><li><p>专注于采取行动,而不只是酝酿行动.</p></li><li><p>习惯的形成是一个行为通过重复逐渐变得更加自动化的过程.</p></li><li><p>习惯的培养不在于时间长短,而在于重复的次数.</p></li></ul><h4 id=\"第12章-最省力法则\"><a href=\"#第12章-最省力法则\" class=\"headerlink\" title=\"第12章 最省力法则\"></a>第12章 最省力法则</h4><ul><li><p>人类行为遵循最省力法则.我们天然地倾向于付出最少工作量的选择.</p></li><li><p>创造一个环境,尽可能让人们便于做正确的事.</p></li><li><p>降低与良好行为相关的阻力.阻力小,习惯就容易养成.</p></li><li><p>增加与不良行为相关的阻力.阻力大,习惯就难以养成.</p></li><li><p>预备好你的环境,使未来的行动更容易.</p></li></ul><h4 id=\"第13章-怎么利用两分钟规则停止拖延\"><a href=\"#第13章-怎么利用两分钟规则停止拖延\" class=\"headerlink\" title=\"第13章 怎么利用两分钟规则停止拖延\"></a>第13章 怎么利用两分钟规则停止拖延</h4><ul><li><p>习惯可以在几秒钟内完成,但会持续影响你在接下来的几分钟或几个小时的行为.</p></li><li><p>许多习惯发生在决定性的时刻,每时每刻的选择就像岔路口,你的选择最终会导致卓有成效,或者一事无成的一天.</p></li><li><p>两分钟规则规定:”当你开始培养一种新习惯时,它所用时间不应超过2分钟.”</p></li><li><p>一种程序的开始阶段越是仪式化,你就越有可能进入做大事所需的注意力高度集中的状态.</p></li><li><p>习惯优化前先要实现标准化.你不能改善一个不存在的习惯.</p></li></ul><h4 id=\"第14章-怎样让好习惯不可避免-坏习惯难以养成\"><a href=\"#第14章-怎样让好习惯不可避免-坏习惯难以养成\" class=\"headerlink\" title=\"第14章 怎样让好习惯不可避免,坏习惯难以养成\"></a>第14章 怎样让好习惯不可避免,坏习惯难以养成</h4><ul><li><p>行为转变第三定律的反面就是让它难以施行.</p></li><li><p>承诺机制是你当前做出的一个选择,它锁定了未来更好的行为.</p></li><li><p>锁定未来行为的终极途径是自动化你的习惯.</p></li><li><p>一次性选择,比如买张好床垫或加入自动储蓄计划,是一种单次行动,可以让你的未来习惯自动化,并随着时间的推移带来越来越多的回报.</p></li><li><p>使用技术自动化你的习惯是保证正确行为的最可靠和有效的途径.</p></li></ul><!-- rebuild by neat -->"},{"title":"杂事随想","date":"2019-03-27T14:08:42.000Z","_content":"最近想了很多东西,有的关于工作,有的与生活相关,为什么会去想这些东西呢,原因很多吧,说一下最触动我的几个原因吧.\n<!--more-->\n#### 缘起\n* 看到同事可以很随意的买下他所喜欢的东西,周五才说自己的平衡车旧了,周一就换了新的了.而自己呢,不管是换手机还是换电脑都要犹豫再三.这种感觉真的很不好.\n* 租的房子到期了,房租涨了,但工资的涨幅却不可期,让我心里多了一丝阴霾\n* 工作的大量重复,让我感觉到了厌烦\n#### 想何\n* 关于买东西 \n仔细想了想,自己换东西,之所以会犹豫再三,有自身性格的原因,但更多是因为自己的可支配收入真的太少了,每个月除掉日常开销和房租水电,剩下的就不多了,正因为这样,我换东西的时候才会犹豫再三,想清楚自己是不是真的需要,有没有那么迫切.\n* 关于涨薪\n当初进现在的公司就是冲着工资的涨幅的,但年初时,公司调整了涨薪策略,使得涨薪的幅度扑朔迷离,而房租的增长却不曾止步,而较低的起薪在当前的房租真的不算什么了,如果涨薪没有到一定程度,可能下一次的到期,就是我离职的时候了\n* 关于工作\n最近接手了一个新项目,新项目的大部分界面都是直接从其他项目里面复制的,然后改逻辑,布局等等.让我感觉到根本学不到什么有用的东西,甚至于有一丝厌烦的情绪.但是公司的主营业务就是这样的,或许我是时候好好考虑一下了.之前选择这公司,一方面是涨薪的幅度,另一方面是工作时间短,自己支配时间长,现在看来,是我考虑少了,较低的起薪使我大量时间浪费在通勤上,而涨薪的幅度也随着公司政策的调整变得不可期.同时因为住的比较僻远,让自己某种程度上变得有点宅,因为附近根本没有什么娱乐的地方.\n#### 何处\n* 开始有计划性学习VUE,.NET CORE和英语,并且把自己比较薄弱的基础补足.\n* 周末开始四处走走,不要变得太宅,多点去尝试认识新的人\n* 租房的时候,先续租半年,半年后,离职就可以考虑新的住处了\n","source":"_posts/杂事随想.md","raw":"---\ntitle: 杂事随想\ndate: 2019-03-27 22:08:42\ncategories: 随笔\ntags:\n - 随笔\n---\n最近想了很多东西,有的关于工作,有的与生活相关,为什么会去想这些东西呢,原因很多吧,说一下最触动我的几个原因吧.\n<!--more-->\n#### 缘起\n* 看到同事可以很随意的买下他所喜欢的东西,周五才说自己的平衡车旧了,周一就换了新的了.而自己呢,不管是换手机还是换电脑都要犹豫再三.这种感觉真的很不好.\n* 租的房子到期了,房租涨了,但工资的涨幅却不可期,让我心里多了一丝阴霾\n* 工作的大量重复,让我感觉到了厌烦\n#### 想何\n* 关于买东西 \n仔细想了想,自己换东西,之所以会犹豫再三,有自身性格的原因,但更多是因为自己的可支配收入真的太少了,每个月除掉日常开销和房租水电,剩下的就不多了,正因为这样,我换东西的时候才会犹豫再三,想清楚自己是不是真的需要,有没有那么迫切.\n* 关于涨薪\n当初进现在的公司就是冲着工资的涨幅的,但年初时,公司调整了涨薪策略,使得涨薪的幅度扑朔迷离,而房租的增长却不曾止步,而较低的起薪在当前的房租真的不算什么了,如果涨薪没有到一定程度,可能下一次的到期,就是我离职的时候了\n* 关于工作\n最近接手了一个新项目,新项目的大部分界面都是直接从其他项目里面复制的,然后改逻辑,布局等等.让我感觉到根本学不到什么有用的东西,甚至于有一丝厌烦的情绪.但是公司的主营业务就是这样的,或许我是时候好好考虑一下了.之前选择这公司,一方面是涨薪的幅度,另一方面是工作时间短,自己支配时间长,现在看来,是我考虑少了,较低的起薪使我大量时间浪费在通勤上,而涨薪的幅度也随着公司政策的调整变得不可期.同时因为住的比较僻远,让自己某种程度上变得有点宅,因为附近根本没有什么娱乐的地方.\n#### 何处\n* 开始有计划性学习VUE,.NET CORE和英语,并且把自己比较薄弱的基础补足.\n* 周末开始四处走走,不要变得太宅,多点去尝试认识新的人\n* 租房的时候,先续租半年,半年后,离职就可以考虑新的住处了\n","slug":"杂事随想","published":1,"updated":"2019-03-27T16:06:38.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24l006etkuirwwqg924","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>最近想了很多东西,有的关于工作,有的与生活相关,为什么会去想这些东西呢,原因很多吧,说一下最触动我的几个原因吧.<br><a id=\"more\"></a></p><h4 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h4><ul><li>看到同事可以很随意的买下他所喜欢的东西,周五才说自己的平衡车旧了,周一就换了新的了.而自己呢,不管是换手机还是换电脑都要犹豫再三.这种感觉真的很不好.</li><li>租的房子到期了,房租涨了,但工资的涨幅却不可期,让我心里多了一丝阴霾</li><li>工作的大量重复,让我感觉到了厌烦<h4 id=\"想何\"><a href=\"#想何\" class=\"headerlink\" title=\"想何\"></a>想何</h4></li><li>关于买东西<br>仔细想了想,自己换东西,之所以会犹豫再三,有自身性格的原因,但更多是因为自己的可支配收入真的太少了,每个月除掉日常开销和房租水电,剩下的就不多了,正因为这样,我换东西的时候才会犹豫再三,想清楚自己是不是真的需要,有没有那么迫切.</li><li>关于涨薪<br>当初进现在的公司就是冲着工资的涨幅的,但年初时,公司调整了涨薪策略,使得涨薪的幅度扑朔迷离,而房租的增长却不曾止步,而较低的起薪在当前的房租真的不算什么了,如果涨薪没有到一定程度,可能下一次的到期,就是我离职的时候了</li><li>关于工作<br>最近接手了一个新项目,新项目的大部分界面都是直接从其他项目里面复制的,然后改逻辑,布局等等.让我感觉到根本学不到什么有用的东西,甚至于有一丝厌烦的情绪.但是公司的主营业务就是这样的,或许我是时候好好考虑一下了.之前选择这公司,一方面是涨薪的幅度,另一方面是工作时间短,自己支配时间长,现在看来,是我考虑少了,较低的起薪使我大量时间浪费在通勤上,而涨薪的幅度也随着公司政策的调整变得不可期.同时因为住的比较僻远,让自己某种程度上变得有点宅,因为附近根本没有什么娱乐的地方.<h4 id=\"何处\"><a href=\"#何处\" class=\"headerlink\" title=\"何处\"></a>何处</h4></li><li>开始有计划性学习VUE,.NET CORE和英语,并且把自己比较薄弱的基础补足.</li><li>周末开始四处走走,不要变得太宅,多点去尝试认识新的人</li><li>租房的时候,先续租半年,半年后,离职就可以考虑新的住处了</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>最近想了很多东西,有的关于工作,有的与生活相关,为什么会去想这些东西呢,原因很多吧,说一下最触动我的几个原因吧.<br>","more":"</p><h4 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h4><ul><li>看到同事可以很随意的买下他所喜欢的东西,周五才说自己的平衡车旧了,周一就换了新的了.而自己呢,不管是换手机还是换电脑都要犹豫再三.这种感觉真的很不好.</li><li>租的房子到期了,房租涨了,但工资的涨幅却不可期,让我心里多了一丝阴霾</li><li>工作的大量重复,让我感觉到了厌烦<h4 id=\"想何\"><a href=\"#想何\" class=\"headerlink\" title=\"想何\"></a>想何</h4></li><li>关于买东西<br>仔细想了想,自己换东西,之所以会犹豫再三,有自身性格的原因,但更多是因为自己的可支配收入真的太少了,每个月除掉日常开销和房租水电,剩下的就不多了,正因为这样,我换东西的时候才会犹豫再三,想清楚自己是不是真的需要,有没有那么迫切.</li><li>关于涨薪<br>当初进现在的公司就是冲着工资的涨幅的,但年初时,公司调整了涨薪策略,使得涨薪的幅度扑朔迷离,而房租的增长却不曾止步,而较低的起薪在当前的房租真的不算什么了,如果涨薪没有到一定程度,可能下一次的到期,就是我离职的时候了</li><li>关于工作<br>最近接手了一个新项目,新项目的大部分界面都是直接从其他项目里面复制的,然后改逻辑,布局等等.让我感觉到根本学不到什么有用的东西,甚至于有一丝厌烦的情绪.但是公司的主营业务就是这样的,或许我是时候好好考虑一下了.之前选择这公司,一方面是涨薪的幅度,另一方面是工作时间短,自己支配时间长,现在看来,是我考虑少了,较低的起薪使我大量时间浪费在通勤上,而涨薪的幅度也随着公司政策的调整变得不可期.同时因为住的比较僻远,让自己某种程度上变得有点宅,因为附近根本没有什么娱乐的地方.<h4 id=\"何处\"><a href=\"#何处\" class=\"headerlink\" title=\"何处\"></a>何处</h4></li><li>开始有计划性学习VUE,.NET CORE和英语,并且把自己比较薄弱的基础补足.</li><li>周末开始四处走走,不要变得太宅,多点去尝试认识新的人</li><li>租房的时候,先续租半年,半年后,离职就可以考虑新的住处了</li></ul><!-- rebuild by neat -->"},{"title":"掌握习惯--原子习惯:细微改变带来巨大成就的实证法则(二)","date":"2020-03-09T23:04:09.000Z","_content":"\n昨天学习完前面的三大定律,今天继续第四定律的阅读和高级战术.\n<!---more-->\n\n### 第四定律 让它令人愉悦\n\n#### 第15章 行为转变的基本准则\n\n* 行为转变的第四条定律是让它令人愉悦.\n\n* 当体验令人愉悦时,我们更有可能重复一种行为.\n\n* 人脑进化为优先考虑即时奖励而不是延迟奖励.\n\n* 行为转变的基本准则:重复有即时回报的行为;避免受即时惩罚的动作.\n\n* 要保持一个习惯,你需要有即时成就感,即使它体现在细微之处.\n\n* 行为转变的前三条定律--让它显而易见,让它有吸引力,让它简便易行--提高了这种行为当即发生的概率.行为转变的第四定律--让它令人愉悦--提高了这种行为得以重复的可能性.\n\n#### 第16章 怎样天天保持好习惯\n\n* 最令人满意的感觉之一是进步的感觉.\n\n* 习惯追踪法是衡量你是否养成了习惯的简单方法,比如在日历上打叉.\n\n* 习惯追踪法和其他视觉度量形式可以清晰无误地证明你取得的进步,从而让你对自己培养习惯的进程感到满意.\n\n* 不要中断培养习惯的进程,要坚持不懈.\n\n* 习惯叠加+习惯追踪公式是:在[当前习惯]之后,我将[追踪我的习惯].\n\n* 绝不错过两次.如果你错过了一天,试着尽快恢复固有的做事节奏.\n\n* 仅仅因为你能测量一些东西并不意味着它们最重要.\n\n#### 第17章 问责伙伴何以能改变一切\n\n* 行为转变第四定律倒过来用就是让它令人厌恶.\n\n* 如果不良习惯附加着令人痛苦或不愉快的感受,我们就不太可能重复它.\n\n* 问责伙伴可以对无所事事带来及时成本.我们非常在意别人对我们的看法,极不情愿感受别人的鄙视.\n\n* 习惯契约可被用来增加任何行为的社会成本,它使得违背承诺的代价公开而痛苦.\n\n* 知道别人在看着你,可以成为一种强大的动力.\n\n#### 汇总\n\n怎么养成好习惯\n| 定律  | 描述 |\n|:-----:|:-----|\n| 第一定律 | 让它显而易见 |\n| 1.1 | 填写\"习惯积分卡\":记下你当前的习惯并留意它们 |\n| 1.2 | 应用执行意图:\"我将于[时间]在[地点][行为].\" |\n| 1.3 | 应用习惯叠加:\"继[当前习惯]之后,我将会[新习惯].\" |\n| 1.4 | 设计你的环境,让好习惯的提示清晰明了\" |\n| 第二定律 | 让它有吸引力 |\n| 2.1 | 利用喜好绑定.用你喜好的行为强化你需要的动作 |\n| 2.2 | 加入把你喜好的行为视为正常行为的文化群体 |\n| 2.3 | 创设一种激励仪式.在实施低频行动之前先做一件你特别喜好的事 |\n| 第三定律 | 让它简便易行 |\n| 3.1 | 减少阻力.减少培养好习惯的步骤 |\n| 3.2 | 备好环境.创造一种有利于未来行为的环境 |\n| 3.3 | 把握好决定性时刻.优化可以产生重大影响的小选择 |\n| 3.4 | 利用两分钟准则.缩短你的习惯所占用的时间,争取只需要两分钟甚至更少 |\n| 3.5 | 自动化你的习惯.在能够锁定你未来行为和技术和物品上有所投入 |\n| 第四定律 | 让它令人预约 |\n| 4.1 | 利用增强法.完成一套习惯动作后立即奖励自己 |\n| 4.2 | 让\"无所事事\"变得愉快.当避免坏习惯时,设计一种让由此带来的好处显而易见的方式 |\n| 4.3 | 利用习惯追踪法.记录习惯倾向,不要中断 |\n| 4.4 | 绝不连续错过两次.如果你忘了做,一定要尽快补救 |\n\n怎么戒除坏习惯\n| 定律  | 描述 |\n|:-----:|:-----|\n| 第一定律反用 | 让它脱离视线 |\n| 1.5 | 降低出现频率.把坏习惯的提示清除出你所在的环境 |\n| 第二定律反用 | 让它缺乏吸引力 |\n| 2.4 | 重新梳理你的思路.罗列出戒除坏习惯所带来的益处 |\n| 第三定律反用 | 让它难以施行 |\n| 3.6 | 增大阻力.增加实行坏习惯的步骤 |\n| 3.7 | 利用承诺机制.锁定未来会有利于你的选择项 |\n| 第四定律反用 | 让它令人厌恶 |\n| 4.5 | 找一个问责伙伴.请人监督你的行为 |\n| 4.6 | 创立习惯契约.让坏习惯的恶果公开化并令人难以忍受 |\n\n### 高级战术 怎么从单纯的好转向真正的伟大\n\n#### 第18章 揭秘天才(当基因重要和无关紧要时)\n\n* 最大限度地提高成功概率的秘诀是选对你参与竞争的领域.\n\n* 习惯选择正确,进步易如反掌.习惯选择错误,生活就步步维艰.\n\n* 基因难以改变,这意味着环境有利时,它们让你享有强大的优势;环境不利时,它们带给你明显的劣势.\n\n* 当你的习惯与天赋相匹配时,你就容易养成并维持那种习惯.选择最适合你的习惯,\n\n* 选择能发扬你的长处的游戏.如果你找不到,就自创一个.\n\n* 基因并不能排除艰苦努力的需要.它们只会帮着甄别,告诉我们该努力做什么事.\n\n#### 第19章 金发女孩准则:如何在生活和工作中保持充沛动力\n\n* 金发女孩准则提出,人们在处理其能力可及的事务时积极性最高.\n\n* 成功的最大威胁不是失败,而是倦怠.\n\n* 随着习惯称为常规,它们变得不那么有趣,也不那么令人满意.我们开始感到无聊.\n\n* 每个人受到激励时都能努力工作.但当工作不那么令人兴奋时,仍能继续奋进的则是人中佼佼者.\n\n* 专业人员依照既定计划行事,毫不动摇;业余爱好者则随波逐流,任性而为.\n\n#### 第20章 培养好习惯的负面影响\n\n* 习惯的好处是我们可以不假思索地行事,缺点是我们不再关注小错误.\n\n* 习惯动作+刻意练习=精通\n\n* 反思和回顾是一个过程,使你能够时刻关注自己的表现\n\n* 我们越是执着于一个身份,就越难超越它.避免让你身份的任何单一属性主导你的为人处事.\n\n#### 结论 获得持久成果的秘诀\n\n一个小小的改变能改变你的人生吗?你不太可能说是的.但是如果你又做了一个呢?又做了另一个呢?接着又做了另一个呢?在某个时刻.你会不得不承认你的人生被一个小小的变化改变了?习惯转变的\"圣杯\"不是单个1%的改进,而是成千个.他是无数微习惯堆积起来的结果,其中每个微习惯都是构成整个系统的基本单元.\n\n有时候一个习惯很难记住,你需要让它显而易见.其他时候,你不想开始培养习惯,你需要让它有吸引力.在许多情况下,你可能会发现太难养成习惯,你需要让它简便易行.有时候,你不想坚持下去,你需要让它令人愉悦.\n\n每当你想要自我提高时,你都可以围绕行为转变四定律循序渐进地发展,知道你发现下一个瓶颈.让它显而易见.让它有吸引力.让它简便易行,让它令人愉悦.一圈又一圈地循环发展.不停地寻求用来获得1%的进步的新方法.\n\n获得持久成果的秘诀是不断进步,永不停歇.只要你一刻不停,坚持下去,你难以想象自己能去的多么伟大的成就.小习惯不会简单相加,它们会复合.\n","source":"_posts/掌握习惯-原子习惯-细微改变带来巨大成就的实证法则-二.md","raw":"---\ntitle: '掌握习惯--原子习惯:细微改变带来巨大成就的实证法则(二)'\ndate: 2020-03-10 07:04:09\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 习惯\n---\n\n昨天学习完前面的三大定律,今天继续第四定律的阅读和高级战术.\n<!---more-->\n\n### 第四定律 让它令人愉悦\n\n#### 第15章 行为转变的基本准则\n\n* 行为转变的第四条定律是让它令人愉悦.\n\n* 当体验令人愉悦时,我们更有可能重复一种行为.\n\n* 人脑进化为优先考虑即时奖励而不是延迟奖励.\n\n* 行为转变的基本准则:重复有即时回报的行为;避免受即时惩罚的动作.\n\n* 要保持一个习惯,你需要有即时成就感,即使它体现在细微之处.\n\n* 行为转变的前三条定律--让它显而易见,让它有吸引力,让它简便易行--提高了这种行为当即发生的概率.行为转变的第四定律--让它令人愉悦--提高了这种行为得以重复的可能性.\n\n#### 第16章 怎样天天保持好习惯\n\n* 最令人满意的感觉之一是进步的感觉.\n\n* 习惯追踪法是衡量你是否养成了习惯的简单方法,比如在日历上打叉.\n\n* 习惯追踪法和其他视觉度量形式可以清晰无误地证明你取得的进步,从而让你对自己培养习惯的进程感到满意.\n\n* 不要中断培养习惯的进程,要坚持不懈.\n\n* 习惯叠加+习惯追踪公式是:在[当前习惯]之后,我将[追踪我的习惯].\n\n* 绝不错过两次.如果你错过了一天,试着尽快恢复固有的做事节奏.\n\n* 仅仅因为你能测量一些东西并不意味着它们最重要.\n\n#### 第17章 问责伙伴何以能改变一切\n\n* 行为转变第四定律倒过来用就是让它令人厌恶.\n\n* 如果不良习惯附加着令人痛苦或不愉快的感受,我们就不太可能重复它.\n\n* 问责伙伴可以对无所事事带来及时成本.我们非常在意别人对我们的看法,极不情愿感受别人的鄙视.\n\n* 习惯契约可被用来增加任何行为的社会成本,它使得违背承诺的代价公开而痛苦.\n\n* 知道别人在看着你,可以成为一种强大的动力.\n\n#### 汇总\n\n怎么养成好习惯\n| 定律  | 描述 |\n|:-----:|:-----|\n| 第一定律 | 让它显而易见 |\n| 1.1 | 填写\"习惯积分卡\":记下你当前的习惯并留意它们 |\n| 1.2 | 应用执行意图:\"我将于[时间]在[地点][行为].\" |\n| 1.3 | 应用习惯叠加:\"继[当前习惯]之后,我将会[新习惯].\" |\n| 1.4 | 设计你的环境,让好习惯的提示清晰明了\" |\n| 第二定律 | 让它有吸引力 |\n| 2.1 | 利用喜好绑定.用你喜好的行为强化你需要的动作 |\n| 2.2 | 加入把你喜好的行为视为正常行为的文化群体 |\n| 2.3 | 创设一种激励仪式.在实施低频行动之前先做一件你特别喜好的事 |\n| 第三定律 | 让它简便易行 |\n| 3.1 | 减少阻力.减少培养好习惯的步骤 |\n| 3.2 | 备好环境.创造一种有利于未来行为的环境 |\n| 3.3 | 把握好决定性时刻.优化可以产生重大影响的小选择 |\n| 3.4 | 利用两分钟准则.缩短你的习惯所占用的时间,争取只需要两分钟甚至更少 |\n| 3.5 | 自动化你的习惯.在能够锁定你未来行为和技术和物品上有所投入 |\n| 第四定律 | 让它令人预约 |\n| 4.1 | 利用增强法.完成一套习惯动作后立即奖励自己 |\n| 4.2 | 让\"无所事事\"变得愉快.当避免坏习惯时,设计一种让由此带来的好处显而易见的方式 |\n| 4.3 | 利用习惯追踪法.记录习惯倾向,不要中断 |\n| 4.4 | 绝不连续错过两次.如果你忘了做,一定要尽快补救 |\n\n怎么戒除坏习惯\n| 定律  | 描述 |\n|:-----:|:-----|\n| 第一定律反用 | 让它脱离视线 |\n| 1.5 | 降低出现频率.把坏习惯的提示清除出你所在的环境 |\n| 第二定律反用 | 让它缺乏吸引力 |\n| 2.4 | 重新梳理你的思路.罗列出戒除坏习惯所带来的益处 |\n| 第三定律反用 | 让它难以施行 |\n| 3.6 | 增大阻力.增加实行坏习惯的步骤 |\n| 3.7 | 利用承诺机制.锁定未来会有利于你的选择项 |\n| 第四定律反用 | 让它令人厌恶 |\n| 4.5 | 找一个问责伙伴.请人监督你的行为 |\n| 4.6 | 创立习惯契约.让坏习惯的恶果公开化并令人难以忍受 |\n\n### 高级战术 怎么从单纯的好转向真正的伟大\n\n#### 第18章 揭秘天才(当基因重要和无关紧要时)\n\n* 最大限度地提高成功概率的秘诀是选对你参与竞争的领域.\n\n* 习惯选择正确,进步易如反掌.习惯选择错误,生活就步步维艰.\n\n* 基因难以改变,这意味着环境有利时,它们让你享有强大的优势;环境不利时,它们带给你明显的劣势.\n\n* 当你的习惯与天赋相匹配时,你就容易养成并维持那种习惯.选择最适合你的习惯,\n\n* 选择能发扬你的长处的游戏.如果你找不到,就自创一个.\n\n* 基因并不能排除艰苦努力的需要.它们只会帮着甄别,告诉我们该努力做什么事.\n\n#### 第19章 金发女孩准则:如何在生活和工作中保持充沛动力\n\n* 金发女孩准则提出,人们在处理其能力可及的事务时积极性最高.\n\n* 成功的最大威胁不是失败,而是倦怠.\n\n* 随着习惯称为常规,它们变得不那么有趣,也不那么令人满意.我们开始感到无聊.\n\n* 每个人受到激励时都能努力工作.但当工作不那么令人兴奋时,仍能继续奋进的则是人中佼佼者.\n\n* 专业人员依照既定计划行事,毫不动摇;业余爱好者则随波逐流,任性而为.\n\n#### 第20章 培养好习惯的负面影响\n\n* 习惯的好处是我们可以不假思索地行事,缺点是我们不再关注小错误.\n\n* 习惯动作+刻意练习=精通\n\n* 反思和回顾是一个过程,使你能够时刻关注自己的表现\n\n* 我们越是执着于一个身份,就越难超越它.避免让你身份的任何单一属性主导你的为人处事.\n\n#### 结论 获得持久成果的秘诀\n\n一个小小的改变能改变你的人生吗?你不太可能说是的.但是如果你又做了一个呢?又做了另一个呢?接着又做了另一个呢?在某个时刻.你会不得不承认你的人生被一个小小的变化改变了?习惯转变的\"圣杯\"不是单个1%的改进,而是成千个.他是无数微习惯堆积起来的结果,其中每个微习惯都是构成整个系统的基本单元.\n\n有时候一个习惯很难记住,你需要让它显而易见.其他时候,你不想开始培养习惯,你需要让它有吸引力.在许多情况下,你可能会发现太难养成习惯,你需要让它简便易行.有时候,你不想坚持下去,你需要让它令人愉悦.\n\n每当你想要自我提高时,你都可以围绕行为转变四定律循序渐进地发展,知道你发现下一个瓶颈.让它显而易见.让它有吸引力.让它简便易行,让它令人愉悦.一圈又一圈地循环发展.不停地寻求用来获得1%的进步的新方法.\n\n获得持久成果的秘诀是不断进步,永不停歇.只要你一刻不停,坚持下去,你难以想象自己能去的多么伟大的成就.小习惯不会简单相加,它们会复合.\n","slug":"掌握习惯-原子习惯-细微改变带来巨大成就的实证法则-二","published":1,"updated":"2020-03-10T02:28:20.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24n006htkuijrm5lih1","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>昨天学习完前面的三大定律,今天继续第四定律的阅读和高级战术.<br></p><h3 id=\"第四定律-让它令人愉悦\"><a href=\"#第四定律-让它令人愉悦\" class=\"headerlink\" title=\"第四定律 让它令人愉悦\"></a>第四定律 让它令人愉悦</h3><h4 id=\"第15章-行为转变的基本准则\"><a href=\"#第15章-行为转变的基本准则\" class=\"headerlink\" title=\"第15章 行为转变的基本准则\"></a>第15章 行为转变的基本准则</h4><ul><li><p>行为转变的第四条定律是让它令人愉悦.</p></li><li><p>当体验令人愉悦时,我们更有可能重复一种行为.</p></li><li><p>人脑进化为优先考虑即时奖励而不是延迟奖励.</p></li><li><p>行为转变的基本准则:重复有即时回报的行为;避免受即时惩罚的动作.</p></li><li><p>要保持一个习惯,你需要有即时成就感,即使它体现在细微之处.</p></li><li><p>行为转变的前三条定律–让它显而易见,让它有吸引力,让它简便易行–提高了这种行为当即发生的概率.行为转变的第四定律–让它令人愉悦–提高了这种行为得以重复的可能性.</p></li></ul><h4 id=\"第16章-怎样天天保持好习惯\"><a href=\"#第16章-怎样天天保持好习惯\" class=\"headerlink\" title=\"第16章 怎样天天保持好习惯\"></a>第16章 怎样天天保持好习惯</h4><ul><li><p>最令人满意的感觉之一是进步的感觉.</p></li><li><p>习惯追踪法是衡量你是否养成了习惯的简单方法,比如在日历上打叉.</p></li><li><p>习惯追踪法和其他视觉度量形式可以清晰无误地证明你取得的进步,从而让你对自己培养习惯的进程感到满意.</p></li><li><p>不要中断培养习惯的进程,要坚持不懈.</p></li><li><p>习惯叠加+习惯追踪公式是:在[当前习惯]之后,我将[追踪我的习惯].</p></li><li><p>绝不错过两次.如果你错过了一天,试着尽快恢复固有的做事节奏.</p></li><li><p>仅仅因为你能测量一些东西并不意味着它们最重要.</p></li></ul><h4 id=\"第17章-问责伙伴何以能改变一切\"><a href=\"#第17章-问责伙伴何以能改变一切\" class=\"headerlink\" title=\"第17章 问责伙伴何以能改变一切\"></a>第17章 问责伙伴何以能改变一切</h4><ul><li><p>行为转变第四定律倒过来用就是让它令人厌恶.</p></li><li><p>如果不良习惯附加着令人痛苦或不愉快的感受,我们就不太可能重复它.</p></li><li><p>问责伙伴可以对无所事事带来及时成本.我们非常在意别人对我们的看法,极不情愿感受别人的鄙视.</p></li><li><p>习惯契约可被用来增加任何行为的社会成本,它使得违背承诺的代价公开而痛苦.</p></li><li><p>知道别人在看着你,可以成为一种强大的动力.</p></li></ul><h4 id=\"汇总\"><a href=\"#汇总\" class=\"headerlink\" title=\"汇总\"></a>汇总</h4><p>怎么养成好习惯<br>| 定律 | 描述 |<br>|:—–:|:—–|<br>| 第一定律 | 让它显而易见 |<br>| 1.1 | 填写”习惯积分卡”:记下你当前的习惯并留意它们 |<br>| 1.2 | 应用执行意图:”我将于[时间]在[地点][行为].” |<br>| 1.3 | 应用习惯叠加:”继[当前习惯]之后,我将会[新习惯].” |<br>| 1.4 | 设计你的环境,让好习惯的提示清晰明了” |<br>| 第二定律 | 让它有吸引力 |<br>| 2.1 | 利用喜好绑定.用你喜好的行为强化你需要的动作 |<br>| 2.2 | 加入把你喜好的行为视为正常行为的文化群体 |<br>| 2.3 | 创设一种激励仪式.在实施低频行动之前先做一件你特别喜好的事 |<br>| 第三定律 | 让它简便易行 |<br>| 3.1 | 减少阻力.减少培养好习惯的步骤 |<br>| 3.2 | 备好环境.创造一种有利于未来行为的环境 |<br>| 3.3 | 把握好决定性时刻.优化可以产生重大影响的小选择 |<br>| 3.4 | 利用两分钟准则.缩短你的习惯所占用的时间,争取只需要两分钟甚至更少 |<br>| 3.5 | 自动化你的习惯.在能够锁定你未来行为和技术和物品上有所投入 |<br>| 第四定律 | 让它令人预约 |<br>| 4.1 | 利用增强法.完成一套习惯动作后立即奖励自己 |<br>| 4.2 | 让”无所事事”变得愉快.当避免坏习惯时,设计一种让由此带来的好处显而易见的方式 |<br>| 4.3 | 利用习惯追踪法.记录习惯倾向,不要中断 |<br>| 4.4 | 绝不连续错过两次.如果你忘了做,一定要尽快补救 |</p><p>怎么戒除坏习惯<br>| 定律 | 描述 |<br>|:—–:|:—–|<br>| 第一定律反用 | 让它脱离视线 |<br>| 1.5 | 降低出现频率.把坏习惯的提示清除出你所在的环境 |<br>| 第二定律反用 | 让它缺乏吸引力 |<br>| 2.4 | 重新梳理你的思路.罗列出戒除坏习惯所带来的益处 |<br>| 第三定律反用 | 让它难以施行 |<br>| 3.6 | 增大阻力.增加实行坏习惯的步骤 |<br>| 3.7 | 利用承诺机制.锁定未来会有利于你的选择项 |<br>| 第四定律反用 | 让它令人厌恶 |<br>| 4.5 | 找一个问责伙伴.请人监督你的行为 |<br>| 4.6 | 创立习惯契约.让坏习惯的恶果公开化并令人难以忍受 |</p><h3 id=\"高级战术-怎么从单纯的好转向真正的伟大\"><a href=\"#高级战术-怎么从单纯的好转向真正的伟大\" class=\"headerlink\" title=\"高级战术 怎么从单纯的好转向真正的伟大\"></a>高级战术 怎么从单纯的好转向真正的伟大</h3><h4 id=\"第18章-揭秘天才-当基因重要和无关紧要时\"><a href=\"#第18章-揭秘天才-当基因重要和无关紧要时\" class=\"headerlink\" title=\"第18章 揭秘天才(当基因重要和无关紧要时)\"></a>第18章 揭秘天才(当基因重要和无关紧要时)</h4><ul><li><p>最大限度地提高成功概率的秘诀是选对你参与竞争的领域.</p></li><li><p>习惯选择正确,进步易如反掌.习惯选择错误,生活就步步维艰.</p></li><li><p>基因难以改变,这意味着环境有利时,它们让你享有强大的优势;环境不利时,它们带给你明显的劣势.</p></li><li><p>当你的习惯与天赋相匹配时,你就容易养成并维持那种习惯.选择最适合你的习惯,</p></li><li><p>选择能发扬你的长处的游戏.如果你找不到,就自创一个.</p></li><li><p>基因并不能排除艰苦努力的需要.它们只会帮着甄别,告诉我们该努力做什么事.</p></li></ul><h4 id=\"第19章-金发女孩准则-如何在生活和工作中保持充沛动力\"><a href=\"#第19章-金发女孩准则-如何在生活和工作中保持充沛动力\" class=\"headerlink\" title=\"第19章 金发女孩准则:如何在生活和工作中保持充沛动力\"></a>第19章 金发女孩准则:如何在生活和工作中保持充沛动力</h4><ul><li><p>金发女孩准则提出,人们在处理其能力可及的事务时积极性最高.</p></li><li><p>成功的最大威胁不是失败,而是倦怠.</p></li><li><p>随着习惯称为常规,它们变得不那么有趣,也不那么令人满意.我们开始感到无聊.</p></li><li><p>每个人受到激励时都能努力工作.但当工作不那么令人兴奋时,仍能继续奋进的则是人中佼佼者.</p></li><li><p>专业人员依照既定计划行事,毫不动摇;业余爱好者则随波逐流,任性而为.</p></li></ul><h4 id=\"第20章-培养好习惯的负面影响\"><a href=\"#第20章-培养好习惯的负面影响\" class=\"headerlink\" title=\"第20章 培养好习惯的负面影响\"></a>第20章 培养好习惯的负面影响</h4><ul><li><p>习惯的好处是我们可以不假思索地行事,缺点是我们不再关注小错误.</p></li><li><p>习惯动作+刻意练习=精通</p></li><li><p>反思和回顾是一个过程,使你能够时刻关注自己的表现</p></li><li><p>我们越是执着于一个身份,就越难超越它.避免让你身份的任何单一属性主导你的为人处事.</p></li></ul><h4 id=\"结论-获得持久成果的秘诀\"><a href=\"#结论-获得持久成果的秘诀\" class=\"headerlink\" title=\"结论 获得持久成果的秘诀\"></a>结论 获得持久成果的秘诀</h4><p>一个小小的改变能改变你的人生吗?你不太可能说是的.但是如果你又做了一个呢?又做了另一个呢?接着又做了另一个呢?在某个时刻.你会不得不承认你的人生被一个小小的变化改变了?习惯转变的”圣杯”不是单个1%的改进,而是成千个.他是无数微习惯堆积起来的结果,其中每个微习惯都是构成整个系统的基本单元.</p><p>有时候一个习惯很难记住,你需要让它显而易见.其他时候,你不想开始培养习惯,你需要让它有吸引力.在许多情况下,你可能会发现太难养成习惯,你需要让它简便易行.有时候,你不想坚持下去,你需要让它令人愉悦.</p><p>每当你想要自我提高时,你都可以围绕行为转变四定律循序渐进地发展,知道你发现下一个瓶颈.让它显而易见.让它有吸引力.让它简便易行,让它令人愉悦.一圈又一圈地循环发展.不停地寻求用来获得1%的进步的新方法.</p><p>获得持久成果的秘诀是不断进步,永不停歇.只要你一刻不停,坚持下去,你难以想象自己能去的多么伟大的成就.小习惯不会简单相加,它们会复合.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>昨天学习完前面的三大定律,今天继续第四定律的阅读和高级战术.<br></p><h3 id=\"第四定律-让它令人愉悦\"><a href=\"#第四定律-让它令人愉悦\" class=\"headerlink\" title=\"第四定律 让它令人愉悦\"></a>第四定律 让它令人愉悦</h3><h4 id=\"第15章-行为转变的基本准则\"><a href=\"#第15章-行为转变的基本准则\" class=\"headerlink\" title=\"第15章 行为转变的基本准则\"></a>第15章 行为转变的基本准则</h4><ul><li><p>行为转变的第四条定律是让它令人愉悦.</p></li><li><p>当体验令人愉悦时,我们更有可能重复一种行为.</p></li><li><p>人脑进化为优先考虑即时奖励而不是延迟奖励.</p></li><li><p>行为转变的基本准则:重复有即时回报的行为;避免受即时惩罚的动作.</p></li><li><p>要保持一个习惯,你需要有即时成就感,即使它体现在细微之处.</p></li><li><p>行为转变的前三条定律–让它显而易见,让它有吸引力,让它简便易行–提高了这种行为当即发生的概率.行为转变的第四定律–让它令人愉悦–提高了这种行为得以重复的可能性.</p></li></ul><h4 id=\"第16章-怎样天天保持好习惯\"><a href=\"#第16章-怎样天天保持好习惯\" class=\"headerlink\" title=\"第16章 怎样天天保持好习惯\"></a>第16章 怎样天天保持好习惯</h4><ul><li><p>最令人满意的感觉之一是进步的感觉.</p></li><li><p>习惯追踪法是衡量你是否养成了习惯的简单方法,比如在日历上打叉.</p></li><li><p>习惯追踪法和其他视觉度量形式可以清晰无误地证明你取得的进步,从而让你对自己培养习惯的进程感到满意.</p></li><li><p>不要中断培养习惯的进程,要坚持不懈.</p></li><li><p>习惯叠加+习惯追踪公式是:在[当前习惯]之后,我将[追踪我的习惯].</p></li><li><p>绝不错过两次.如果你错过了一天,试着尽快恢复固有的做事节奏.</p></li><li><p>仅仅因为你能测量一些东西并不意味着它们最重要.</p></li></ul><h4 id=\"第17章-问责伙伴何以能改变一切\"><a href=\"#第17章-问责伙伴何以能改变一切\" class=\"headerlink\" title=\"第17章 问责伙伴何以能改变一切\"></a>第17章 问责伙伴何以能改变一切</h4><ul><li><p>行为转变第四定律倒过来用就是让它令人厌恶.</p></li><li><p>如果不良习惯附加着令人痛苦或不愉快的感受,我们就不太可能重复它.</p></li><li><p>问责伙伴可以对无所事事带来及时成本.我们非常在意别人对我们的看法,极不情愿感受别人的鄙视.</p></li><li><p>习惯契约可被用来增加任何行为的社会成本,它使得违背承诺的代价公开而痛苦.</p></li><li><p>知道别人在看着你,可以成为一种强大的动力.</p></li></ul><h4 id=\"汇总\"><a href=\"#汇总\" class=\"headerlink\" title=\"汇总\"></a>汇总</h4><p>怎么养成好习惯<br>| 定律 | 描述 |<br>|:—–:|:—–|<br>| 第一定律 | 让它显而易见 |<br>| 1.1 | 填写”习惯积分卡”:记下你当前的习惯并留意它们 |<br>| 1.2 | 应用执行意图:”我将于[时间]在[地点][行为].” |<br>| 1.3 | 应用习惯叠加:”继[当前习惯]之后,我将会[新习惯].” |<br>| 1.4 | 设计你的环境,让好习惯的提示清晰明了” |<br>| 第二定律 | 让它有吸引力 |<br>| 2.1 | 利用喜好绑定.用你喜好的行为强化你需要的动作 |<br>| 2.2 | 加入把你喜好的行为视为正常行为的文化群体 |<br>| 2.3 | 创设一种激励仪式.在实施低频行动之前先做一件你特别喜好的事 |<br>| 第三定律 | 让它简便易行 |<br>| 3.1 | 减少阻力.减少培养好习惯的步骤 |<br>| 3.2 | 备好环境.创造一种有利于未来行为的环境 |<br>| 3.3 | 把握好决定性时刻.优化可以产生重大影响的小选择 |<br>| 3.4 | 利用两分钟准则.缩短你的习惯所占用的时间,争取只需要两分钟甚至更少 |<br>| 3.5 | 自动化你的习惯.在能够锁定你未来行为和技术和物品上有所投入 |<br>| 第四定律 | 让它令人预约 |<br>| 4.1 | 利用增强法.完成一套习惯动作后立即奖励自己 |<br>| 4.2 | 让”无所事事”变得愉快.当避免坏习惯时,设计一种让由此带来的好处显而易见的方式 |<br>| 4.3 | 利用习惯追踪法.记录习惯倾向,不要中断 |<br>| 4.4 | 绝不连续错过两次.如果你忘了做,一定要尽快补救 |</p><p>怎么戒除坏习惯<br>| 定律 | 描述 |<br>|:—–:|:—–|<br>| 第一定律反用 | 让它脱离视线 |<br>| 1.5 | 降低出现频率.把坏习惯的提示清除出你所在的环境 |<br>| 第二定律反用 | 让它缺乏吸引力 |<br>| 2.4 | 重新梳理你的思路.罗列出戒除坏习惯所带来的益处 |<br>| 第三定律反用 | 让它难以施行 |<br>| 3.6 | 增大阻力.增加实行坏习惯的步骤 |<br>| 3.7 | 利用承诺机制.锁定未来会有利于你的选择项 |<br>| 第四定律反用 | 让它令人厌恶 |<br>| 4.5 | 找一个问责伙伴.请人监督你的行为 |<br>| 4.6 | 创立习惯契约.让坏习惯的恶果公开化并令人难以忍受 |</p><h3 id=\"高级战术-怎么从单纯的好转向真正的伟大\"><a href=\"#高级战术-怎么从单纯的好转向真正的伟大\" class=\"headerlink\" title=\"高级战术 怎么从单纯的好转向真正的伟大\"></a>高级战术 怎么从单纯的好转向真正的伟大</h3><h4 id=\"第18章-揭秘天才-当基因重要和无关紧要时\"><a href=\"#第18章-揭秘天才-当基因重要和无关紧要时\" class=\"headerlink\" title=\"第18章 揭秘天才(当基因重要和无关紧要时)\"></a>第18章 揭秘天才(当基因重要和无关紧要时)</h4><ul><li><p>最大限度地提高成功概率的秘诀是选对你参与竞争的领域.</p></li><li><p>习惯选择正确,进步易如反掌.习惯选择错误,生活就步步维艰.</p></li><li><p>基因难以改变,这意味着环境有利时,它们让你享有强大的优势;环境不利时,它们带给你明显的劣势.</p></li><li><p>当你的习惯与天赋相匹配时,你就容易养成并维持那种习惯.选择最适合你的习惯,</p></li><li><p>选择能发扬你的长处的游戏.如果你找不到,就自创一个.</p></li><li><p>基因并不能排除艰苦努力的需要.它们只会帮着甄别,告诉我们该努力做什么事.</p></li></ul><h4 id=\"第19章-金发女孩准则-如何在生活和工作中保持充沛动力\"><a href=\"#第19章-金发女孩准则-如何在生活和工作中保持充沛动力\" class=\"headerlink\" title=\"第19章 金发女孩准则:如何在生活和工作中保持充沛动力\"></a>第19章 金发女孩准则:如何在生活和工作中保持充沛动力</h4><ul><li><p>金发女孩准则提出,人们在处理其能力可及的事务时积极性最高.</p></li><li><p>成功的最大威胁不是失败,而是倦怠.</p></li><li><p>随着习惯称为常规,它们变得不那么有趣,也不那么令人满意.我们开始感到无聊.</p></li><li><p>每个人受到激励时都能努力工作.但当工作不那么令人兴奋时,仍能继续奋进的则是人中佼佼者.</p></li><li><p>专业人员依照既定计划行事,毫不动摇;业余爱好者则随波逐流,任性而为.</p></li></ul><h4 id=\"第20章-培养好习惯的负面影响\"><a href=\"#第20章-培养好习惯的负面影响\" class=\"headerlink\" title=\"第20章 培养好习惯的负面影响\"></a>第20章 培养好习惯的负面影响</h4><ul><li><p>习惯的好处是我们可以不假思索地行事,缺点是我们不再关注小错误.</p></li><li><p>习惯动作+刻意练习=精通</p></li><li><p>反思和回顾是一个过程,使你能够时刻关注自己的表现</p></li><li><p>我们越是执着于一个身份,就越难超越它.避免让你身份的任何单一属性主导你的为人处事.</p></li></ul><h4 id=\"结论-获得持久成果的秘诀\"><a href=\"#结论-获得持久成果的秘诀\" class=\"headerlink\" title=\"结论 获得持久成果的秘诀\"></a>结论 获得持久成果的秘诀</h4><p>一个小小的改变能改变你的人生吗?你不太可能说是的.但是如果你又做了一个呢?又做了另一个呢?接着又做了另一个呢?在某个时刻.你会不得不承认你的人生被一个小小的变化改变了?习惯转变的”圣杯”不是单个1%的改进,而是成千个.他是无数微习惯堆积起来的结果,其中每个微习惯都是构成整个系统的基本单元.</p><p>有时候一个习惯很难记住,你需要让它显而易见.其他时候,你不想开始培养习惯,你需要让它有吸引力.在许多情况下,你可能会发现太难养成习惯,你需要让它简便易行.有时候,你不想坚持下去,你需要让它令人愉悦.</p><p>每当你想要自我提高时,你都可以围绕行为转变四定律循序渐进地发展,知道你发现下一个瓶颈.让它显而易见.让它有吸引力.让它简便易行,让它令人愉悦.一圈又一圈地循环发展.不停地寻求用来获得1%的进步的新方法.</p><p>获得持久成果的秘诀是不断进步,永不停歇.只要你一刻不停,坚持下去,你难以想象自己能去的多么伟大的成就.小习惯不会简单相加,它们会复合.</p><!-- rebuild by neat -->"},{"title":"类型基础","date":"2019-03-26T13:26:08.000Z","_content":"### 所有类型都从System.Object 派生\n#### System.Object 公共实例方法\n| 公共方法 | 说明 |\n| :------: | :------: |\n| Equals | 判断两个对象是否具有相同的值 |\n| GetHashCode | 返回对象的值的哈希码 |\n| ToString | 默认返回类型的完整名称,常被重写用于返回对象状态表示的String对象 |\n| ToString | 返回调用对象的确切类型 |\n<!--more-->\n#### 所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存\n```cs\nBlog b = new Blog();\n```\nnew操作所做的事情\n* 计算类型及所有基类型中定义的所有实例字段需要的字节数\n* 从托管堆中分配类型要求的字节数,从而分配对象的内存,分配的所有字节都设为0\n* 初始化对象的\"类型对象指针\"和\"同步块索引\"成员\n* 调用类型的实例构造器(构造函数)\n\n## 类型转换\n### 基类与派生类之间的转换\n* 将对象转换为它的任何基类型都不要求任何特殊语法\n* 将对象转换为它的某个派生类型时,需要进行显示转换\n```cs\nObject o = new Blog();\nBlog b = (Blog) o;\n```\n### is和as操作符来转型\n#### is操作符\n* is操作符检查对象是否兼容于指定类型,返回true或false(永不抛出异常)\n* 如果对象引用null,is操作符总是返回false\n* 使用如下\n    ```cs\n    if(o is Blog)\n    {\n        Blog b = (Blog) o;\n    }\n    ```\n* PS：使用is操作符,实际上会检查两次对象类型,先核实是否兼容于Blog类型,if内部转型时,会再次核实o是否引用一个Blog类型\n#### as操作符\n* as操作符用于核实对象是否兼容于指定类型,返回对同一对象的非null引用和null(永不抛出异常)\n* 使用如下\n    ```cs\n    Blog b = o as Blog;\n    if(e != null)\n    {\n        //\n    }\n    ```\n* PS：使用as操作符,只校验一次对象类型\n\n### 调用静态方法,实例方法和虚方法的区别\n#### 调用静态方法\n调用静态方式时,CLR会定位与定义静态方法的类型对应的类型对象,然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n#### 调用实例方法\n调用实例方法时,JIT编译器会找到与\"发出调用的那个变量的类型\"对应的类型对象.如果对应的类型对象没有定义正在调用的那个方法,JIT编译器会回溯类层次结构(一直回溯到Object),并在沿途的每个类型中查找该方法.然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n#### 调用虚方法\n调用虚方法时,JIT编译器要在方法中生成一些额外的代码;方法每次调用都会执行这些代码.这些代码首先会检查发出调用的变量,并跟随地址来到发出调用的对象.然后代码检查对象内部的\"类型对象指针\"成员,该成员指向对象的实际类型.然后,代码在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n\n","source":"_posts/类型基础.md","raw":"---\ntitle: 类型基础\ndate: 2019-03-26 21:26:08\ncategories: C# \ntags: \n - 基础\n - C#\n---\n### 所有类型都从System.Object 派生\n#### System.Object 公共实例方法\n| 公共方法 | 说明 |\n| :------: | :------: |\n| Equals | 判断两个对象是否具有相同的值 |\n| GetHashCode | 返回对象的值的哈希码 |\n| ToString | 默认返回类型的完整名称,常被重写用于返回对象状态表示的String对象 |\n| ToString | 返回调用对象的确切类型 |\n<!--more-->\n#### 所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存\n```cs\nBlog b = new Blog();\n```\nnew操作所做的事情\n* 计算类型及所有基类型中定义的所有实例字段需要的字节数\n* 从托管堆中分配类型要求的字节数,从而分配对象的内存,分配的所有字节都设为0\n* 初始化对象的\"类型对象指针\"和\"同步块索引\"成员\n* 调用类型的实例构造器(构造函数)\n\n## 类型转换\n### 基类与派生类之间的转换\n* 将对象转换为它的任何基类型都不要求任何特殊语法\n* 将对象转换为它的某个派生类型时,需要进行显示转换\n```cs\nObject o = new Blog();\nBlog b = (Blog) o;\n```\n### is和as操作符来转型\n#### is操作符\n* is操作符检查对象是否兼容于指定类型,返回true或false(永不抛出异常)\n* 如果对象引用null,is操作符总是返回false\n* 使用如下\n    ```cs\n    if(o is Blog)\n    {\n        Blog b = (Blog) o;\n    }\n    ```\n* PS：使用is操作符,实际上会检查两次对象类型,先核实是否兼容于Blog类型,if内部转型时,会再次核实o是否引用一个Blog类型\n#### as操作符\n* as操作符用于核实对象是否兼容于指定类型,返回对同一对象的非null引用和null(永不抛出异常)\n* 使用如下\n    ```cs\n    Blog b = o as Blog;\n    if(e != null)\n    {\n        //\n    }\n    ```\n* PS：使用as操作符,只校验一次对象类型\n\n### 调用静态方法,实例方法和虚方法的区别\n#### 调用静态方法\n调用静态方式时,CLR会定位与定义静态方法的类型对应的类型对象,然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n#### 调用实例方法\n调用实例方法时,JIT编译器会找到与\"发出调用的那个变量的类型\"对应的类型对象.如果对应的类型对象没有定义正在调用的那个方法,JIT编译器会回溯类层次结构(一直回溯到Object),并在沿途的每个类型中查找该方法.然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n#### 调用虚方法\n调用虚方法时,JIT编译器要在方法中生成一些额外的代码;方法每次调用都会执行这些代码.这些代码首先会检查发出调用的变量,并跟随地址来到发出调用的对象.然后代码检查对象内部的\"类型对象指针\"成员,该成员指向对象的实际类型.然后,代码在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.\n\n","slug":"类型基础","published":1,"updated":"2019-03-26T15:13:16.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24o006ktkuivm39hycg","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"所有类型都从System-Object-派生\"><a href=\"#所有类型都从System-Object-派生\" class=\"headerlink\" title=\"所有类型都从System.Object 派生\"></a>所有类型都从System.Object 派生</h3><h4 id=\"System-Object-公共实例方法\"><a href=\"#System-Object-公共实例方法\" class=\"headerlink\" title=\"System.Object 公共实例方法\"></a>System.Object 公共实例方法</h4><table><thead><tr><th style=\"text-align:center\">公共方法</th><th style=\"text-align:center\">说明</th></tr></thead><tbody><tr><td style=\"text-align:center\">Equals</td><td style=\"text-align:center\">判断两个对象是否具有相同的值</td></tr><tr><td style=\"text-align:center\">GetHashCode</td><td style=\"text-align:center\">返回对象的值的哈希码</td></tr><tr><td style=\"text-align:center\">ToString</td><td style=\"text-align:center\">默认返回类型的完整名称,常被重写用于返回对象状态表示的String对象</td></tr><tr><td style=\"text-align:center\">ToString</td><td style=\"text-align:center\">返回调用对象的确切类型</td></tr></tbody></table><a id=\"more\"></a><h4 id=\"所有对象都用new操作符创建-delete操作符显式释放为对象分配的内存\"><a href=\"#所有对象都用new操作符创建-delete操作符显式释放为对象分配的内存\" class=\"headerlink\" title=\"所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存\"></a>所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog b = <span class=\"keyword\">new</span> Blog();</span><br></pre></td></tr></table></figure><p>new操作所做的事情</p><ul><li>计算类型及所有基类型中定义的所有实例字段需要的字节数</li><li>从托管堆中分配类型要求的字节数,从而分配对象的内存,分配的所有字节都设为0</li><li>初始化对象的”类型对象指针”和”同步块索引”成员</li><li>调用类型的实例构造器(构造函数)</li></ul><h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"基类与派生类之间的转换\"><a href=\"#基类与派生类之间的转换\" class=\"headerlink\" title=\"基类与派生类之间的转换\"></a>基类与派生类之间的转换</h3><ul><li>将对象转换为它的任何基类型都不要求任何特殊语法</li><li>将对象转换为它的某个派生类型时,需要进行显示转换<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object o = <span class=\"keyword\">new</span> Blog();</span><br><span class=\"line\">Blog b = (Blog) o;</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"is和as操作符来转型\"><a href=\"#is和as操作符来转型\" class=\"headerlink\" title=\"is和as操作符来转型\"></a>is和as操作符来转型</h3><h4 id=\"is操作符\"><a href=\"#is操作符\" class=\"headerlink\" title=\"is操作符\"></a>is操作符</h4><ul><li>is操作符检查对象是否兼容于指定类型,返回true或false(永不抛出异常)</li><li>如果对象引用null,is操作符总是返回false</li><li><p>使用如下</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(o <span class=\"keyword\">is</span> Blog)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Blog b = (Blog) o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PS：使用is操作符,实际上会检查两次对象类型,先核实是否兼容于Blog类型,if内部转型时,会再次核实o是否引用一个Blog类型</p><h4 id=\"as操作符\"><a href=\"#as操作符\" class=\"headerlink\" title=\"as操作符\"></a>as操作符</h4></li><li>as操作符用于核实对象是否兼容于指定类型,返回对同一对象的非null引用和null(永不抛出异常)</li><li><p>使用如下</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog b = o <span class=\"keyword\">as</span> Blog;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(e != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PS：使用as操作符,只校验一次对象类型</p></li></ul><h3 id=\"调用静态方法-实例方法和虚方法的区别\"><a href=\"#调用静态方法-实例方法和虚方法的区别\" class=\"headerlink\" title=\"调用静态方法,实例方法和虚方法的区别\"></a>调用静态方法,实例方法和虚方法的区别</h3><h4 id=\"调用静态方法\"><a href=\"#调用静态方法\" class=\"headerlink\" title=\"调用静态方法\"></a>调用静态方法</h4><p>调用静态方式时,CLR会定位与定义静态方法的类型对应的类型对象,然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p><h4 id=\"调用实例方法\"><a href=\"#调用实例方法\" class=\"headerlink\" title=\"调用实例方法\"></a>调用实例方法</h4><p>调用实例方法时,JIT编译器会找到与”发出调用的那个变量的类型”对应的类型对象.如果对应的类型对象没有定义正在调用的那个方法,JIT编译器会回溯类层次结构(一直回溯到Object),并在沿途的每个类型中查找该方法.然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p><h4 id=\"调用虚方法\"><a href=\"#调用虚方法\" class=\"headerlink\" title=\"调用虚方法\"></a>调用虚方法</h4><p>调用虚方法时,JIT编译器要在方法中生成一些额外的代码;方法每次调用都会执行这些代码.这些代码首先会检查发出调用的变量,并跟随地址来到发出调用的对象.然后代码检查对象内部的”类型对象指针”成员,该成员指向对象的实际类型.然后,代码在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h3 id=\"所有类型都从System-Object-派生\"><a href=\"#所有类型都从System-Object-派生\" class=\"headerlink\" title=\"所有类型都从System.Object 派生\"></a>所有类型都从System.Object 派生</h3><h4 id=\"System-Object-公共实例方法\"><a href=\"#System-Object-公共实例方法\" class=\"headerlink\" title=\"System.Object 公共实例方法\"></a>System.Object 公共实例方法</h4><table><thead><tr><th style=\"text-align:center\">公共方法</th><th style=\"text-align:center\">说明</th></tr></thead><tbody><tr><td style=\"text-align:center\">Equals</td><td style=\"text-align:center\">判断两个对象是否具有相同的值</td></tr><tr><td style=\"text-align:center\">GetHashCode</td><td style=\"text-align:center\">返回对象的值的哈希码</td></tr><tr><td style=\"text-align:center\">ToString</td><td style=\"text-align:center\">默认返回类型的完整名称,常被重写用于返回对象状态表示的String对象</td></tr><tr><td style=\"text-align:center\">ToString</td><td style=\"text-align:center\">返回调用对象的确切类型</td></tr></tbody></table>","more":"<h4 id=\"所有对象都用new操作符创建-delete操作符显式释放为对象分配的内存\"><a href=\"#所有对象都用new操作符创建-delete操作符显式释放为对象分配的内存\" class=\"headerlink\" title=\"所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存\"></a>所有对象都用new操作符创建,delete操作符显式释放为对象分配的内存</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog b = <span class=\"keyword\">new</span> Blog();</span><br></pre></td></tr></table></figure><p>new操作所做的事情</p><ul><li>计算类型及所有基类型中定义的所有实例字段需要的字节数</li><li>从托管堆中分配类型要求的字节数,从而分配对象的内存,分配的所有字节都设为0</li><li>初始化对象的”类型对象指针”和”同步块索引”成员</li><li>调用类型的实例构造器(构造函数)</li></ul><h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"基类与派生类之间的转换\"><a href=\"#基类与派生类之间的转换\" class=\"headerlink\" title=\"基类与派生类之间的转换\"></a>基类与派生类之间的转换</h3><ul><li>将对象转换为它的任何基类型都不要求任何特殊语法</li><li>将对象转换为它的某个派生类型时,需要进行显示转换<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object o = <span class=\"keyword\">new</span> Blog();</span><br><span class=\"line\">Blog b = (Blog) o;</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"is和as操作符来转型\"><a href=\"#is和as操作符来转型\" class=\"headerlink\" title=\"is和as操作符来转型\"></a>is和as操作符来转型</h3><h4 id=\"is操作符\"><a href=\"#is操作符\" class=\"headerlink\" title=\"is操作符\"></a>is操作符</h4><ul><li>is操作符检查对象是否兼容于指定类型,返回true或false(永不抛出异常)</li><li>如果对象引用null,is操作符总是返回false</li><li><p>使用如下</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(o <span class=\"keyword\">is</span> Blog)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Blog b = (Blog) o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PS：使用is操作符,实际上会检查两次对象类型,先核实是否兼容于Blog类型,if内部转型时,会再次核实o是否引用一个Blog类型</p><h4 id=\"as操作符\"><a href=\"#as操作符\" class=\"headerlink\" title=\"as操作符\"></a>as操作符</h4></li><li>as操作符用于核实对象是否兼容于指定类型,返回对同一对象的非null引用和null(永不抛出异常)</li><li><p>使用如下</p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blog b = o <span class=\"keyword\">as</span> Blog;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(e != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PS：使用as操作符,只校验一次对象类型</p></li></ul><h3 id=\"调用静态方法-实例方法和虚方法的区别\"><a href=\"#调用静态方法-实例方法和虚方法的区别\" class=\"headerlink\" title=\"调用静态方法,实例方法和虚方法的区别\"></a>调用静态方法,实例方法和虚方法的区别</h3><h4 id=\"调用静态方法\"><a href=\"#调用静态方法\" class=\"headerlink\" title=\"调用静态方法\"></a>调用静态方法</h4><p>调用静态方式时,CLR会定位与定义静态方法的类型对应的类型对象,然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p><h4 id=\"调用实例方法\"><a href=\"#调用实例方法\" class=\"headerlink\" title=\"调用实例方法\"></a>调用实例方法</h4><p>调用实例方法时,JIT编译器会找到与”发出调用的那个变量的类型”对应的类型对象.如果对应的类型对象没有定义正在调用的那个方法,JIT编译器会回溯类层次结构(一直回溯到Object),并在沿途的每个类型中查找该方法.然后JIT编译器在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p><h4 id=\"调用虚方法\"><a href=\"#调用虚方法\" class=\"headerlink\" title=\"调用虚方法\"></a>调用虚方法</h4><p>调用虚方法时,JIT编译器要在方法中生成一些额外的代码;方法每次调用都会执行这些代码.这些代码首先会检查发出调用的变量,并跟随地址来到发出调用的对象.然后代码检查对象内部的”类型对象指针”成员,该成员指向对象的实际类型.然后,代码在类型对象的方法表中查找与被调用方法对应的记录项,对方法进行JIT编译,再调用JIT编译好的代码.</p><!-- rebuild by neat -->"},{"title":"直觉泵-通用思考工具(一)","date":"2020-01-03T16:02:50.000Z","_content":"最近在听玮仔推荐的第三季精英日课,其中有一集,万老师提到了<<直觉泵和其他思考工具>>这本书,出于对哲学的好奇,就开始阅读这本书.\n\n### 通用思考工具\n\n这些构想、这些思维训练已经在种种情境中证明过自己的价值.\n<!--more-->\n\n#### 犯错儿  犯\"好\"错儿才有价值\n\n如果能获得一些具体、清楚、确定的东西,犯点错儿也无妨.犯错儿是取得进步的关键.\n\n人们总说:\"先理论,后实践.\",但犯错儿不只是学习的机会;从某种意义上讲,它还是人们学习或者做出真正创新的唯一机会.\n\n犯错儿的要诀在于不去隐藏它们,尤其不能自我欺骗.与其在我们犯错儿后扭脸否认,不如成为自己错误的鉴赏家,打心眼儿里把它们视作一种艺术品,其实在某种意义上它们就是艺术品.\n\n当反思时,我们会直接面对每一个犯错者都必须解决的问题:到底错在哪儿了?究竟我刚才做了什么,使自己陷入了这个窘境?关键在于利用错误当中那些特殊的细节,这样你才能在下次尝试时对错误有所察觉,以免重蹈覆辙.\n\n所以当你犯了错儿时,应该学会深吸一口气,咬紧牙关,然后尽你所能地冷静、毫不留情地检查你记住的错误.\n\n或多或少熟练地做出猜测,算出可能的结果,利用结果为下一步工作做出修正,这样的一般方法已经得到了广泛的应用.这个方法的关键在于,所犯的错误要足够清楚、精确,使得出的结果足够确定.\n\n#### 归谬法  发现错误命题的妙招\n\n你把一个推论中的一些命题或假设拿过来,看看有没有前后矛盾,或者是否隐含着荒谬之处.要是有,必须丢掉出问题的命题,或者重新推论.\n\n有一个可以对付归谬法的招数,那就是迎难而上、死不松口.\n\n\"归谬\"的尝试却有可能帮助我们认识到,这种想法为什么应该被我们认真对待.\n\n#### 拉波波特法则  批评他人的正确方式\n\n ① 你应该非常清楚、生动、不偏不倚地重述对手的想法,使得你的对手说:\"谢谢你,我刚才要是像你这么表述就好了.\"\n ② 你应该把对方观点中你所同意的部分都列出来,尤其是那种并非被人们广泛接受了的观点.\n ③ 你应该提到那些从你对手那里学到的东西.\n ④ 只有完成了以上三点,你才能说一句反驳或批评的话.\n\n你应该时刻提醒自己:对于一位作者来说,如果你勇敢地为他的观点寻找根据,但什么也没找到的话,可能会比气呼呼地批评他的刮泥单来得更有杀伤力.\n\n#### 史特金定律  不要把时间浪费在无意义的事情上\n\n任何事物当中的百分之九十都是垃圾.\n\n当你准备批评某一领域、某一流派、某一学科或者某一艺术形式的时候,请别在嘲笑垃圾上浪费自己和我们大家的时间!要么就追着优秀的东西批,要么就别干这活儿.\n\n#### 奥卡姆剃刀  如无必要,勿增实体\n\n如果你能找到一个更简单的理论,包含更少的因素、更少的实体,而它也一样可以很好地解释现象,就不要再构造一个大而无当的复杂理论了.\n\n奥卡姆剃刀只是一种经验法则、一条有益的建议.\n\n#### 奥卡姆扫把  有意隐瞒对自己不利的证据\n\n某些理论的辩护者本着智性上最大的不诚实把对自己不利的事实往地毯下面扫.\n\n即使是一位严肃的科学工作者有时也难以抵抗对某些数据的\"忽视\",尤其是当那些数据会伤害到他们心爱的理论时.但无论如何,这都是一个需要抵御的诱惑.\n","source":"_posts/直觉泵-通用思考工具.md","raw":"---\ntitle: 直觉泵-通用思考工具(一)\ndate: 2020-01-04 00:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n最近在听玮仔推荐的第三季精英日课,其中有一集,万老师提到了<<直觉泵和其他思考工具>>这本书,出于对哲学的好奇,就开始阅读这本书.\n\n### 通用思考工具\n\n这些构想、这些思维训练已经在种种情境中证明过自己的价值.\n<!--more-->\n\n#### 犯错儿  犯\"好\"错儿才有价值\n\n如果能获得一些具体、清楚、确定的东西,犯点错儿也无妨.犯错儿是取得进步的关键.\n\n人们总说:\"先理论,后实践.\",但犯错儿不只是学习的机会;从某种意义上讲,它还是人们学习或者做出真正创新的唯一机会.\n\n犯错儿的要诀在于不去隐藏它们,尤其不能自我欺骗.与其在我们犯错儿后扭脸否认,不如成为自己错误的鉴赏家,打心眼儿里把它们视作一种艺术品,其实在某种意义上它们就是艺术品.\n\n当反思时,我们会直接面对每一个犯错者都必须解决的问题:到底错在哪儿了?究竟我刚才做了什么,使自己陷入了这个窘境?关键在于利用错误当中那些特殊的细节,这样你才能在下次尝试时对错误有所察觉,以免重蹈覆辙.\n\n所以当你犯了错儿时,应该学会深吸一口气,咬紧牙关,然后尽你所能地冷静、毫不留情地检查你记住的错误.\n\n或多或少熟练地做出猜测,算出可能的结果,利用结果为下一步工作做出修正,这样的一般方法已经得到了广泛的应用.这个方法的关键在于,所犯的错误要足够清楚、精确,使得出的结果足够确定.\n\n#### 归谬法  发现错误命题的妙招\n\n你把一个推论中的一些命题或假设拿过来,看看有没有前后矛盾,或者是否隐含着荒谬之处.要是有,必须丢掉出问题的命题,或者重新推论.\n\n有一个可以对付归谬法的招数,那就是迎难而上、死不松口.\n\n\"归谬\"的尝试却有可能帮助我们认识到,这种想法为什么应该被我们认真对待.\n\n#### 拉波波特法则  批评他人的正确方式\n\n ① 你应该非常清楚、生动、不偏不倚地重述对手的想法,使得你的对手说:\"谢谢你,我刚才要是像你这么表述就好了.\"\n ② 你应该把对方观点中你所同意的部分都列出来,尤其是那种并非被人们广泛接受了的观点.\n ③ 你应该提到那些从你对手那里学到的东西.\n ④ 只有完成了以上三点,你才能说一句反驳或批评的话.\n\n你应该时刻提醒自己:对于一位作者来说,如果你勇敢地为他的观点寻找根据,但什么也没找到的话,可能会比气呼呼地批评他的刮泥单来得更有杀伤力.\n\n#### 史特金定律  不要把时间浪费在无意义的事情上\n\n任何事物当中的百分之九十都是垃圾.\n\n当你准备批评某一领域、某一流派、某一学科或者某一艺术形式的时候,请别在嘲笑垃圾上浪费自己和我们大家的时间!要么就追着优秀的东西批,要么就别干这活儿.\n\n#### 奥卡姆剃刀  如无必要,勿增实体\n\n如果你能找到一个更简单的理论,包含更少的因素、更少的实体,而它也一样可以很好地解释现象,就不要再构造一个大而无当的复杂理论了.\n\n奥卡姆剃刀只是一种经验法则、一条有益的建议.\n\n#### 奥卡姆扫把  有意隐瞒对自己不利的证据\n\n某些理论的辩护者本着智性上最大的不诚实把对自己不利的事实往地毯下面扫.\n\n即使是一位严肃的科学工作者有时也难以抵抗对某些数据的\"忽视\",尤其是当那些数据会伤害到他们心爱的理论时.但无论如何,这都是一个需要抵御的诱惑.\n","slug":"直觉泵-通用思考工具","published":1,"updated":"2020-01-06T12:30:40.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24p006ntkui7t9ejh1j","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>最近在听玮仔推荐的第三季精英日课,其中有一集,万老师提到了&lt;&lt;直觉泵和其他思考工具&gt;&gt;这本书,出于对哲学的好奇,就开始阅读这本书.</p><h3 id=\"通用思考工具\"><a href=\"#通用思考工具\" class=\"headerlink\" title=\"通用思考工具\"></a>通用思考工具</h3><p>这些构想、这些思维训练已经在种种情境中证明过自己的价值.<br><a id=\"more\"></a></p><h4 id=\"犯错儿-犯”好”错儿才有价值\"><a href=\"#犯错儿-犯”好”错儿才有价值\" class=\"headerlink\" title=\"犯错儿  犯”好”错儿才有价值\"></a>犯错儿 犯”好”错儿才有价值</h4><p>如果能获得一些具体、清楚、确定的东西,犯点错儿也无妨.犯错儿是取得进步的关键.</p><p>人们总说:”先理论,后实践.”,但犯错儿不只是学习的机会;从某种意义上讲,它还是人们学习或者做出真正创新的唯一机会.</p><p>犯错儿的要诀在于不去隐藏它们,尤其不能自我欺骗.与其在我们犯错儿后扭脸否认,不如成为自己错误的鉴赏家,打心眼儿里把它们视作一种艺术品,其实在某种意义上它们就是艺术品.</p><p>当反思时,我们会直接面对每一个犯错者都必须解决的问题:到底错在哪儿了?究竟我刚才做了什么,使自己陷入了这个窘境?关键在于利用错误当中那些特殊的细节,这样你才能在下次尝试时对错误有所察觉,以免重蹈覆辙.</p><p>所以当你犯了错儿时,应该学会深吸一口气,咬紧牙关,然后尽你所能地冷静、毫不留情地检查你记住的错误.</p><p>或多或少熟练地做出猜测,算出可能的结果,利用结果为下一步工作做出修正,这样的一般方法已经得到了广泛的应用.这个方法的关键在于,所犯的错误要足够清楚、精确,使得出的结果足够确定.</p><h4 id=\"归谬法-发现错误命题的妙招\"><a href=\"#归谬法-发现错误命题的妙招\" class=\"headerlink\" title=\"归谬法  发现错误命题的妙招\"></a>归谬法 发现错误命题的妙招</h4><p>你把一个推论中的一些命题或假设拿过来,看看有没有前后矛盾,或者是否隐含着荒谬之处.要是有,必须丢掉出问题的命题,或者重新推论.</p><p>有一个可以对付归谬法的招数,那就是迎难而上、死不松口.</p><p>“归谬”的尝试却有可能帮助我们认识到,这种想法为什么应该被我们认真对待.</p><h4 id=\"拉波波特法则-批评他人的正确方式\"><a href=\"#拉波波特法则-批评他人的正确方式\" class=\"headerlink\" title=\"拉波波特法则  批评他人的正确方式\"></a>拉波波特法则 批评他人的正确方式</h4><p>① 你应该非常清楚、生动、不偏不倚地重述对手的想法,使得你的对手说:”谢谢你,我刚才要是像你这么表述就好了.”<br>② 你应该把对方观点中你所同意的部分都列出来,尤其是那种并非被人们广泛接受了的观点.<br>③ 你应该提到那些从你对手那里学到的东西.<br>④ 只有完成了以上三点,你才能说一句反驳或批评的话.</p><p>你应该时刻提醒自己:对于一位作者来说,如果你勇敢地为他的观点寻找根据,但什么也没找到的话,可能会比气呼呼地批评他的刮泥单来得更有杀伤力.</p><h4 id=\"史特金定律-不要把时间浪费在无意义的事情上\"><a href=\"#史特金定律-不要把时间浪费在无意义的事情上\" class=\"headerlink\" title=\"史特金定律  不要把时间浪费在无意义的事情上\"></a>史特金定律 不要把时间浪费在无意义的事情上</h4><p>任何事物当中的百分之九十都是垃圾.</p><p>当你准备批评某一领域、某一流派、某一学科或者某一艺术形式的时候,请别在嘲笑垃圾上浪费自己和我们大家的时间!要么就追着优秀的东西批,要么就别干这活儿.</p><h4 id=\"奥卡姆剃刀-如无必要-勿增实体\"><a href=\"#奥卡姆剃刀-如无必要-勿增实体\" class=\"headerlink\" title=\"奥卡姆剃刀  如无必要,勿增实体\"></a>奥卡姆剃刀 如无必要,勿增实体</h4><p>如果你能找到一个更简单的理论,包含更少的因素、更少的实体,而它也一样可以很好地解释现象,就不要再构造一个大而无当的复杂理论了.</p><p>奥卡姆剃刀只是一种经验法则、一条有益的建议.</p><h4 id=\"奥卡姆扫把-有意隐瞒对自己不利的证据\"><a href=\"#奥卡姆扫把-有意隐瞒对自己不利的证据\" class=\"headerlink\" title=\"奥卡姆扫把  有意隐瞒对自己不利的证据\"></a>奥卡姆扫把 有意隐瞒对自己不利的证据</h4><p>某些理论的辩护者本着智性上最大的不诚实把对自己不利的事实往地毯下面扫.</p><p>即使是一位严肃的科学工作者有时也难以抵抗对某些数据的”忽视”,尤其是当那些数据会伤害到他们心爱的理论时.但无论如何,这都是一个需要抵御的诱惑.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>最近在听玮仔推荐的第三季精英日课,其中有一集,万老师提到了&lt;&lt;直觉泵和其他思考工具&gt;&gt;这本书,出于对哲学的好奇,就开始阅读这本书.</p><h3 id=\"通用思考工具\"><a href=\"#通用思考工具\" class=\"headerlink\" title=\"通用思考工具\"></a>通用思考工具</h3><p>这些构想、这些思维训练已经在种种情境中证明过自己的价值.<br>","more":"</p><h4 id=\"犯错儿-犯”好”错儿才有价值\"><a href=\"#犯错儿-犯”好”错儿才有价值\" class=\"headerlink\" title=\"犯错儿  犯”好”错儿才有价值\"></a>犯错儿 犯”好”错儿才有价值</h4><p>如果能获得一些具体、清楚、确定的东西,犯点错儿也无妨.犯错儿是取得进步的关键.</p><p>人们总说:”先理论,后实践.”,但犯错儿不只是学习的机会;从某种意义上讲,它还是人们学习或者做出真正创新的唯一机会.</p><p>犯错儿的要诀在于不去隐藏它们,尤其不能自我欺骗.与其在我们犯错儿后扭脸否认,不如成为自己错误的鉴赏家,打心眼儿里把它们视作一种艺术品,其实在某种意义上它们就是艺术品.</p><p>当反思时,我们会直接面对每一个犯错者都必须解决的问题:到底错在哪儿了?究竟我刚才做了什么,使自己陷入了这个窘境?关键在于利用错误当中那些特殊的细节,这样你才能在下次尝试时对错误有所察觉,以免重蹈覆辙.</p><p>所以当你犯了错儿时,应该学会深吸一口气,咬紧牙关,然后尽你所能地冷静、毫不留情地检查你记住的错误.</p><p>或多或少熟练地做出猜测,算出可能的结果,利用结果为下一步工作做出修正,这样的一般方法已经得到了广泛的应用.这个方法的关键在于,所犯的错误要足够清楚、精确,使得出的结果足够确定.</p><h4 id=\"归谬法-发现错误命题的妙招\"><a href=\"#归谬法-发现错误命题的妙招\" class=\"headerlink\" title=\"归谬法  发现错误命题的妙招\"></a>归谬法 发现错误命题的妙招</h4><p>你把一个推论中的一些命题或假设拿过来,看看有没有前后矛盾,或者是否隐含着荒谬之处.要是有,必须丢掉出问题的命题,或者重新推论.</p><p>有一个可以对付归谬法的招数,那就是迎难而上、死不松口.</p><p>“归谬”的尝试却有可能帮助我们认识到,这种想法为什么应该被我们认真对待.</p><h4 id=\"拉波波特法则-批评他人的正确方式\"><a href=\"#拉波波特法则-批评他人的正确方式\" class=\"headerlink\" title=\"拉波波特法则  批评他人的正确方式\"></a>拉波波特法则 批评他人的正确方式</h4><p>① 你应该非常清楚、生动、不偏不倚地重述对手的想法,使得你的对手说:”谢谢你,我刚才要是像你这么表述就好了.”<br>② 你应该把对方观点中你所同意的部分都列出来,尤其是那种并非被人们广泛接受了的观点.<br>③ 你应该提到那些从你对手那里学到的东西.<br>④ 只有完成了以上三点,你才能说一句反驳或批评的话.</p><p>你应该时刻提醒自己:对于一位作者来说,如果你勇敢地为他的观点寻找根据,但什么也没找到的话,可能会比气呼呼地批评他的刮泥单来得更有杀伤力.</p><h4 id=\"史特金定律-不要把时间浪费在无意义的事情上\"><a href=\"#史特金定律-不要把时间浪费在无意义的事情上\" class=\"headerlink\" title=\"史特金定律  不要把时间浪费在无意义的事情上\"></a>史特金定律 不要把时间浪费在无意义的事情上</h4><p>任何事物当中的百分之九十都是垃圾.</p><p>当你准备批评某一领域、某一流派、某一学科或者某一艺术形式的时候,请别在嘲笑垃圾上浪费自己和我们大家的时间!要么就追着优秀的东西批,要么就别干这活儿.</p><h4 id=\"奥卡姆剃刀-如无必要-勿增实体\"><a href=\"#奥卡姆剃刀-如无必要-勿增实体\" class=\"headerlink\" title=\"奥卡姆剃刀  如无必要,勿增实体\"></a>奥卡姆剃刀 如无必要,勿增实体</h4><p>如果你能找到一个更简单的理论,包含更少的因素、更少的实体,而它也一样可以很好地解释现象,就不要再构造一个大而无当的复杂理论了.</p><p>奥卡姆剃刀只是一种经验法则、一条有益的建议.</p><h4 id=\"奥卡姆扫把-有意隐瞒对自己不利的证据\"><a href=\"#奥卡姆扫把-有意隐瞒对自己不利的证据\" class=\"headerlink\" title=\"奥卡姆扫把  有意隐瞒对自己不利的证据\"></a>奥卡姆扫把 有意隐瞒对自己不利的证据</h4><p>某些理论的辩护者本着智性上最大的不诚实把对自己不利的事实往地毯下面扫.</p><p>即使是一位严肃的科学工作者有时也难以抵抗对某些数据的”忽视”,尤其是当那些数据会伤害到他们心爱的理论时.但无论如何,这都是一个需要抵御的诱惑.</p><!-- rebuild by neat -->"},{"title":"直觉泵-通用思考工具(二)","date":"2020-01-05T16:02:50.000Z","_content":"上一篇介绍了犯错儿、归谬法、拉波波特法则、史特金定律、奥卡姆剃刀以及奥卡姆扫把这些通用思考工具,今天把剩下的通用思考工具(外行做媒、跳出系统、古尔德的3种思考工具、小心\"当然\"这个词、反问、什么是\"深马\")都进行介绍.\n<!--more-->\n\n#### 外行做媒  既不\"过少解释\",又不\"惹恼行家\"\n\n\"过少解释\"即指观众对专家所说的内容不是非常了解,专家们常常自说自话.\n\"惹恼行家\"是说跟一位专家过度解释某件事是一种严重的侮辱,就好比对他说:\"用不用我教你怎么拼写啊?\"\n\n让专家们对一群充满好奇心的业余听众表达他们的观点,同时让另外一些专家旁听.参与这个活动的每一个人都应该知道:这一实验的目的就是让参与者能够安心地用\"大家\"都能理解的术语说话.\n\n#### 跳出系统  打破惯性思维的好方法\n\n跳出系统是一个重要的策略,不仅在科学和哲学领域,在艺术领域也是.创造力是一种让人梦寐以求却只有少数人才能够拥有的才具,它往往会以一种前所未有的、让人意想不到的方式打破孕育它的系统所设定的规则,也许是古典音乐的和谐体系,也许是十四行诗甚至打油诗中的格律和韵律,也许是某种艺术的审美\"教规\"、良好形式.又或者,它打破的是某些理论或研究领域中的假设和原则.\n\n有创造性不只意味着追求新奇的东西--因为新奇的东西谁都能得到,只要把材料随机排列一番就行了--难的是跳出一个既定的体系,并且跳得有道理.\n\n如果你想颠覆传统,最好先去了解它.所以外行或新手很少能够想出真正有创造性的东西.\n\n当你面对一个科学或哲学问题时,需要跳出的系统常常根深蒂固,以至于它像你所呼吸的空气一样令人不易察觉.\n\n如果一个长期存在的争论似乎无法取得进展,双方都顽固地坚持自己的正确性,往往是因为他们都同意的某个东西其实是错误的.两方都认为这是明摆着的事,是不言而喻的.\n\n很多跳出系统的伟大时刻都与抛弃某些备受好评的东西有关,后来我们才发现这些东西其实是不存在的.\n\n有时候,一个理论中的问题可能是很久以前埋下的,那是可能有人说:\"为了便于论证,让我们假设......\"然后人们纷纷同意:\"为了便于论证,我们就这样假设吧.\"后来人们你来我往地讨论下去,却没有人记得最初的假设了!\n\n#### 古尔德的3种思考工具  \"不如说\" \"故意堆积\"和\"古尔德二步\"\n\n 1. \"不如说\"  \n    \"不如说\"能够轻快地令你滑入\"虚假二分\".它一般是这样用的:\"情况与其说如何如何(你所相信的主流观点);不如说是如此如此(彻底不同于前者).\"\n\n    \"不如说\"这一短语暗示了:由它衔接的前后两种主张之间有一种重要的不相容性,而这一点无需论证.\n\n 2. \"故意堆积\"  \n    它指的是前面说一堆观点，然后从某个方面论证他们是不对的，比如说“没有比这更荒唐的了”，来完成致命一击。而实际上，我们要论证的观点根本不是这个角度。\n\n    这两个容易引起误导的说法都是提醒我们在否定一个观点时要慎之又慎，不能因为某个方面错误就全盘否定。\n\n 3. 古尔德两步  \n    第一步 制造一个靶子,然后驳倒它.\n\n    第二步 主动把注意力转移到第一步驳论所用的证据上,这些证据本可以证明你的对手并未持有被你反驳的那种观点,而你则把他们诠释为对手面对你的攻击勉强让步了.\n\n#### 小心\"当然\"这个词  一种让你无需思考就认同花招\n\n\"当然\"一词通常像盏信号灯一样可以定位出论证当中的弱点所在,它是一个警告标识,提醒人们那里可能有一个吊杆托架.为什么呢?因为它恰好标示出了那种作者确实相信并且期待读者也会相信的东西.\n\n而恰恰在这种地方,我们会发现一些未经检验的\"自明之理\"并不是不言自明的.\n\n\"这就是无意识手法发挥作用的地方.轻轻一推,眼睛一眨,错误的前提就被晃过去了\"\n\n#### 反问  让你不好意思说\"不\"\n\n反问句的句尾是个问号,但却不意味着它需要我们去回答.也就是说,作者根本懒得等你给答案,因为答案这么明显,你好意思说\"不\"吗?换句话说,大部分反问句都是压缩版的归谬法,明显到不用再说了.\n\n#### 什么是\"深马\" 爱就一个字\n\n\"深马\",就是一个\"看上去\"重要、正确、深刻的命题,但它之所以看上去有这种效果是由于它的模棱两可.\n\n你从一个角度读这句话,会发现它明显是错误的,但如果他是真的,会显得特别惊天动地;而从另一个角度读这句话,你又会发现它是真的,但是特别无聊.\n","source":"_posts/直觉泵-通用思考工具(二).md","raw":"---\ntitle: 直觉泵-通用思考工具(二)\ndate: 2020-01-06 00:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n上一篇介绍了犯错儿、归谬法、拉波波特法则、史特金定律、奥卡姆剃刀以及奥卡姆扫把这些通用思考工具,今天把剩下的通用思考工具(外行做媒、跳出系统、古尔德的3种思考工具、小心\"当然\"这个词、反问、什么是\"深马\")都进行介绍.\n<!--more-->\n\n#### 外行做媒  既不\"过少解释\",又不\"惹恼行家\"\n\n\"过少解释\"即指观众对专家所说的内容不是非常了解,专家们常常自说自话.\n\"惹恼行家\"是说跟一位专家过度解释某件事是一种严重的侮辱,就好比对他说:\"用不用我教你怎么拼写啊?\"\n\n让专家们对一群充满好奇心的业余听众表达他们的观点,同时让另外一些专家旁听.参与这个活动的每一个人都应该知道:这一实验的目的就是让参与者能够安心地用\"大家\"都能理解的术语说话.\n\n#### 跳出系统  打破惯性思维的好方法\n\n跳出系统是一个重要的策略,不仅在科学和哲学领域,在艺术领域也是.创造力是一种让人梦寐以求却只有少数人才能够拥有的才具,它往往会以一种前所未有的、让人意想不到的方式打破孕育它的系统所设定的规则,也许是古典音乐的和谐体系,也许是十四行诗甚至打油诗中的格律和韵律,也许是某种艺术的审美\"教规\"、良好形式.又或者,它打破的是某些理论或研究领域中的假设和原则.\n\n有创造性不只意味着追求新奇的东西--因为新奇的东西谁都能得到,只要把材料随机排列一番就行了--难的是跳出一个既定的体系,并且跳得有道理.\n\n如果你想颠覆传统,最好先去了解它.所以外行或新手很少能够想出真正有创造性的东西.\n\n当你面对一个科学或哲学问题时,需要跳出的系统常常根深蒂固,以至于它像你所呼吸的空气一样令人不易察觉.\n\n如果一个长期存在的争论似乎无法取得进展,双方都顽固地坚持自己的正确性,往往是因为他们都同意的某个东西其实是错误的.两方都认为这是明摆着的事,是不言而喻的.\n\n很多跳出系统的伟大时刻都与抛弃某些备受好评的东西有关,后来我们才发现这些东西其实是不存在的.\n\n有时候,一个理论中的问题可能是很久以前埋下的,那是可能有人说:\"为了便于论证,让我们假设......\"然后人们纷纷同意:\"为了便于论证,我们就这样假设吧.\"后来人们你来我往地讨论下去,却没有人记得最初的假设了!\n\n#### 古尔德的3种思考工具  \"不如说\" \"故意堆积\"和\"古尔德二步\"\n\n 1. \"不如说\"  \n    \"不如说\"能够轻快地令你滑入\"虚假二分\".它一般是这样用的:\"情况与其说如何如何(你所相信的主流观点);不如说是如此如此(彻底不同于前者).\"\n\n    \"不如说\"这一短语暗示了:由它衔接的前后两种主张之间有一种重要的不相容性,而这一点无需论证.\n\n 2. \"故意堆积\"  \n    它指的是前面说一堆观点，然后从某个方面论证他们是不对的，比如说“没有比这更荒唐的了”，来完成致命一击。而实际上，我们要论证的观点根本不是这个角度。\n\n    这两个容易引起误导的说法都是提醒我们在否定一个观点时要慎之又慎，不能因为某个方面错误就全盘否定。\n\n 3. 古尔德两步  \n    第一步 制造一个靶子,然后驳倒它.\n\n    第二步 主动把注意力转移到第一步驳论所用的证据上,这些证据本可以证明你的对手并未持有被你反驳的那种观点,而你则把他们诠释为对手面对你的攻击勉强让步了.\n\n#### 小心\"当然\"这个词  一种让你无需思考就认同花招\n\n\"当然\"一词通常像盏信号灯一样可以定位出论证当中的弱点所在,它是一个警告标识,提醒人们那里可能有一个吊杆托架.为什么呢?因为它恰好标示出了那种作者确实相信并且期待读者也会相信的东西.\n\n而恰恰在这种地方,我们会发现一些未经检验的\"自明之理\"并不是不言自明的.\n\n\"这就是无意识手法发挥作用的地方.轻轻一推,眼睛一眨,错误的前提就被晃过去了\"\n\n#### 反问  让你不好意思说\"不\"\n\n反问句的句尾是个问号,但却不意味着它需要我们去回答.也就是说,作者根本懒得等你给答案,因为答案这么明显,你好意思说\"不\"吗?换句话说,大部分反问句都是压缩版的归谬法,明显到不用再说了.\n\n#### 什么是\"深马\" 爱就一个字\n\n\"深马\",就是一个\"看上去\"重要、正确、深刻的命题,但它之所以看上去有这种效果是由于它的模棱两可.\n\n你从一个角度读这句话,会发现它明显是错误的,但如果他是真的,会显得特别惊天动地;而从另一个角度读这句话,你又会发现它是真的,但是特别无聊.\n","slug":"直觉泵-通用思考工具(二)","published":1,"updated":"2020-01-06T12:30:56.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24r006qtkuizzdf02sk","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>上一篇介绍了犯错儿、归谬法、拉波波特法则、史特金定律、奥卡姆剃刀以及奥卡姆扫把这些通用思考工具,今天把剩下的通用思考工具(外行做媒、跳出系统、古尔德的3种思考工具、小心”当然”这个词、反问、什么是”深马”)都进行介绍.<br><a id=\"more\"></a></p><h4 id=\"外行做媒-既不”过少解释”-又不”惹恼行家”\"><a href=\"#外行做媒-既不”过少解释”-又不”惹恼行家”\" class=\"headerlink\" title=\"外行做媒  既不”过少解释”,又不”惹恼行家”\"></a>外行做媒 既不”过少解释”,又不”惹恼行家”</h4><p>“过少解释”即指观众对专家所说的内容不是非常了解,专家们常常自说自话.<br>“惹恼行家”是说跟一位专家过度解释某件事是一种严重的侮辱,就好比对他说:”用不用我教你怎么拼写啊?”</p><p>让专家们对一群充满好奇心的业余听众表达他们的观点,同时让另外一些专家旁听.参与这个活动的每一个人都应该知道:这一实验的目的就是让参与者能够安心地用”大家”都能理解的术语说话.</p><h4 id=\"跳出系统-打破惯性思维的好方法\"><a href=\"#跳出系统-打破惯性思维的好方法\" class=\"headerlink\" title=\"跳出系统  打破惯性思维的好方法\"></a>跳出系统 打破惯性思维的好方法</h4><p>跳出系统是一个重要的策略,不仅在科学和哲学领域,在艺术领域也是.创造力是一种让人梦寐以求却只有少数人才能够拥有的才具,它往往会以一种前所未有的、让人意想不到的方式打破孕育它的系统所设定的规则,也许是古典音乐的和谐体系,也许是十四行诗甚至打油诗中的格律和韵律,也许是某种艺术的审美”教规”、良好形式.又或者,它打破的是某些理论或研究领域中的假设和原则.</p><p>有创造性不只意味着追求新奇的东西–因为新奇的东西谁都能得到,只要把材料随机排列一番就行了–难的是跳出一个既定的体系,并且跳得有道理.</p><p>如果你想颠覆传统,最好先去了解它.所以外行或新手很少能够想出真正有创造性的东西.</p><p>当你面对一个科学或哲学问题时,需要跳出的系统常常根深蒂固,以至于它像你所呼吸的空气一样令人不易察觉.</p><p>如果一个长期存在的争论似乎无法取得进展,双方都顽固地坚持自己的正确性,往往是因为他们都同意的某个东西其实是错误的.两方都认为这是明摆着的事,是不言而喻的.</p><p>很多跳出系统的伟大时刻都与抛弃某些备受好评的东西有关,后来我们才发现这些东西其实是不存在的.</p><p>有时候,一个理论中的问题可能是很久以前埋下的,那是可能有人说:”为了便于论证,让我们假设……”然后人们纷纷同意:”为了便于论证,我们就这样假设吧.”后来人们你来我往地讨论下去,却没有人记得最初的假设了!</p><h4 id=\"古尔德的3种思考工具-“不如说”-“故意堆积”和”古尔德二步”\"><a href=\"#古尔德的3种思考工具-“不如说”-“故意堆积”和”古尔德二步”\" class=\"headerlink\" title=\"古尔德的3种思考工具  “不如说” “故意堆积”和”古尔德二步”\"></a>古尔德的3种思考工具 “不如说” “故意堆积”和”古尔德二步”</h4><ol><li><p>“不如说”<br>“不如说”能够轻快地令你滑入”虚假二分”.它一般是这样用的:”情况与其说如何如何(你所相信的主流观点);不如说是如此如此(彻底不同于前者).”</p><p>“不如说”这一短语暗示了:由它衔接的前后两种主张之间有一种重要的不相容性,而这一点无需论证.</p></li><li><p>“故意堆积”<br>它指的是前面说一堆观点，然后从某个方面论证他们是不对的，比如说“没有比这更荒唐的了”，来完成致命一击。而实际上，我们要论证的观点根本不是这个角度。</p><p>这两个容易引起误导的说法都是提醒我们在否定一个观点时要慎之又慎，不能因为某个方面错误就全盘否定。</p></li><li><p>古尔德两步<br>第一步 制造一个靶子,然后驳倒它.</p><p>第二步 主动把注意力转移到第一步驳论所用的证据上,这些证据本可以证明你的对手并未持有被你反驳的那种观点,而你则把他们诠释为对手面对你的攻击勉强让步了.</p></li></ol><h4 id=\"小心”当然”这个词-一种让你无需思考就认同花招\"><a href=\"#小心”当然”这个词-一种让你无需思考就认同花招\" class=\"headerlink\" title=\"小心”当然”这个词  一种让你无需思考就认同花招\"></a>小心”当然”这个词 一种让你无需思考就认同花招</h4><p>“当然”一词通常像盏信号灯一样可以定位出论证当中的弱点所在,它是一个警告标识,提醒人们那里可能有一个吊杆托架.为什么呢?因为它恰好标示出了那种作者确实相信并且期待读者也会相信的东西.</p><p>而恰恰在这种地方,我们会发现一些未经检验的”自明之理”并不是不言自明的.</p><p>“这就是无意识手法发挥作用的地方.轻轻一推,眼睛一眨,错误的前提就被晃过去了”</p><h4 id=\"反问-让你不好意思说”不”\"><a href=\"#反问-让你不好意思说”不”\" class=\"headerlink\" title=\"反问  让你不好意思说”不”\"></a>反问 让你不好意思说”不”</h4><p>反问句的句尾是个问号,但却不意味着它需要我们去回答.也就是说,作者根本懒得等你给答案,因为答案这么明显,你好意思说”不”吗?换句话说,大部分反问句都是压缩版的归谬法,明显到不用再说了.</p><h4 id=\"什么是”深马”-爱就一个字\"><a href=\"#什么是”深马”-爱就一个字\" class=\"headerlink\" title=\"什么是”深马” 爱就一个字\"></a>什么是”深马” 爱就一个字</h4><p>“深马”,就是一个”看上去”重要、正确、深刻的命题,但它之所以看上去有这种效果是由于它的模棱两可.</p><p>你从一个角度读这句话,会发现它明显是错误的,但如果他是真的,会显得特别惊天动地;而从另一个角度读这句话,你又会发现它是真的,但是特别无聊.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>上一篇介绍了犯错儿、归谬法、拉波波特法则、史特金定律、奥卡姆剃刀以及奥卡姆扫把这些通用思考工具,今天把剩下的通用思考工具(外行做媒、跳出系统、古尔德的3种思考工具、小心”当然”这个词、反问、什么是”深马”)都进行介绍.<br>","more":"</p><h4 id=\"外行做媒-既不”过少解释”-又不”惹恼行家”\"><a href=\"#外行做媒-既不”过少解释”-又不”惹恼行家”\" class=\"headerlink\" title=\"外行做媒  既不”过少解释”,又不”惹恼行家”\"></a>外行做媒 既不”过少解释”,又不”惹恼行家”</h4><p>“过少解释”即指观众对专家所说的内容不是非常了解,专家们常常自说自话.<br>“惹恼行家”是说跟一位专家过度解释某件事是一种严重的侮辱,就好比对他说:”用不用我教你怎么拼写啊?”</p><p>让专家们对一群充满好奇心的业余听众表达他们的观点,同时让另外一些专家旁听.参与这个活动的每一个人都应该知道:这一实验的目的就是让参与者能够安心地用”大家”都能理解的术语说话.</p><h4 id=\"跳出系统-打破惯性思维的好方法\"><a href=\"#跳出系统-打破惯性思维的好方法\" class=\"headerlink\" title=\"跳出系统  打破惯性思维的好方法\"></a>跳出系统 打破惯性思维的好方法</h4><p>跳出系统是一个重要的策略,不仅在科学和哲学领域,在艺术领域也是.创造力是一种让人梦寐以求却只有少数人才能够拥有的才具,它往往会以一种前所未有的、让人意想不到的方式打破孕育它的系统所设定的规则,也许是古典音乐的和谐体系,也许是十四行诗甚至打油诗中的格律和韵律,也许是某种艺术的审美”教规”、良好形式.又或者,它打破的是某些理论或研究领域中的假设和原则.</p><p>有创造性不只意味着追求新奇的东西–因为新奇的东西谁都能得到,只要把材料随机排列一番就行了–难的是跳出一个既定的体系,并且跳得有道理.</p><p>如果你想颠覆传统,最好先去了解它.所以外行或新手很少能够想出真正有创造性的东西.</p><p>当你面对一个科学或哲学问题时,需要跳出的系统常常根深蒂固,以至于它像你所呼吸的空气一样令人不易察觉.</p><p>如果一个长期存在的争论似乎无法取得进展,双方都顽固地坚持自己的正确性,往往是因为他们都同意的某个东西其实是错误的.两方都认为这是明摆着的事,是不言而喻的.</p><p>很多跳出系统的伟大时刻都与抛弃某些备受好评的东西有关,后来我们才发现这些东西其实是不存在的.</p><p>有时候,一个理论中的问题可能是很久以前埋下的,那是可能有人说:”为了便于论证,让我们假设……”然后人们纷纷同意:”为了便于论证,我们就这样假设吧.”后来人们你来我往地讨论下去,却没有人记得最初的假设了!</p><h4 id=\"古尔德的3种思考工具-“不如说”-“故意堆积”和”古尔德二步”\"><a href=\"#古尔德的3种思考工具-“不如说”-“故意堆积”和”古尔德二步”\" class=\"headerlink\" title=\"古尔德的3种思考工具  “不如说” “故意堆积”和”古尔德二步”\"></a>古尔德的3种思考工具 “不如说” “故意堆积”和”古尔德二步”</h4><ol><li><p>“不如说”<br>“不如说”能够轻快地令你滑入”虚假二分”.它一般是这样用的:”情况与其说如何如何(你所相信的主流观点);不如说是如此如此(彻底不同于前者).”</p><p>“不如说”这一短语暗示了:由它衔接的前后两种主张之间有一种重要的不相容性,而这一点无需论证.</p></li><li><p>“故意堆积”<br>它指的是前面说一堆观点，然后从某个方面论证他们是不对的，比如说“没有比这更荒唐的了”，来完成致命一击。而实际上，我们要论证的观点根本不是这个角度。</p><p>这两个容易引起误导的说法都是提醒我们在否定一个观点时要慎之又慎，不能因为某个方面错误就全盘否定。</p></li><li><p>古尔德两步<br>第一步 制造一个靶子,然后驳倒它.</p><p>第二步 主动把注意力转移到第一步驳论所用的证据上,这些证据本可以证明你的对手并未持有被你反驳的那种观点,而你则把他们诠释为对手面对你的攻击勉强让步了.</p></li></ol><h4 id=\"小心”当然”这个词-一种让你无需思考就认同花招\"><a href=\"#小心”当然”这个词-一种让你无需思考就认同花招\" class=\"headerlink\" title=\"小心”当然”这个词  一种让你无需思考就认同花招\"></a>小心”当然”这个词 一种让你无需思考就认同花招</h4><p>“当然”一词通常像盏信号灯一样可以定位出论证当中的弱点所在,它是一个警告标识,提醒人们那里可能有一个吊杆托架.为什么呢?因为它恰好标示出了那种作者确实相信并且期待读者也会相信的东西.</p><p>而恰恰在这种地方,我们会发现一些未经检验的”自明之理”并不是不言自明的.</p><p>“这就是无意识手法发挥作用的地方.轻轻一推,眼睛一眨,错误的前提就被晃过去了”</p><h4 id=\"反问-让你不好意思说”不”\"><a href=\"#反问-让你不好意思说”不”\" class=\"headerlink\" title=\"反问  让你不好意思说”不”\"></a>反问 让你不好意思说”不”</h4><p>反问句的句尾是个问号,但却不意味着它需要我们去回答.也就是说,作者根本懒得等你给答案,因为答案这么明显,你好意思说”不”吗?换句话说,大部分反问句都是压缩版的归谬法,明显到不用再说了.</p><h4 id=\"什么是”深马”-爱就一个字\"><a href=\"#什么是”深马”-爱就一个字\" class=\"headerlink\" title=\"什么是”深马” 爱就一个字\"></a>什么是”深马” 爱就一个字</h4><p>“深马”,就是一个”看上去”重要、正确、深刻的命题,但它之所以看上去有这种效果是由于它的模棱两可.</p><p>你从一个角度读这句话,会发现它明显是错误的,但如果他是真的,会显得特别惊天动地;而从另一个角度读这句话,你又会发现它是真的,但是特别无聊.</p><!-- rebuild by neat -->"},{"title":"聚会随想","date":"2019-02-24T12:00:27.000Z","_content":"#### 前言\n过完年没多久,我便和关系比较好进行了2019年春节后的第一次聚会,地点还是在广州,时间定在了元宵节那周的周六(02.24).这次聚会既有好奇某个脱单的小伙伴是怎么脱单的,也有因为有小伙伴要跳槽,还有是有小伙伴计划买电脑的,想去实体店看看,再顺路交流一下今年各自的打算和计划.\n<!--more-->\n#### 关于跳槽\n我是周五下班就直接过去广州的,住的地方就是那个有计划跳槽的小伙伴那边.到那边的时候,就和他聊了会,他那天是有去面试一家,感觉还是可以的,但他出于对薪酬的考虑,陷入了纠结的场面.在周六喝早茶的时候,我们几个也稍微聊了一下关于这方面的事.基于这两次的交流,考虑自己将来也会有跳槽的情况出现.整理出一些关于在跳槽的时候需要注意或者思考的方向\n1. 在众多招聘公司中,筛选出适合自己的和有利于自己发展的公司.\n2. 了解跳槽前后的薪酬差距,如果是那种空闲时间增加了,而薪酬没有增长甚至于下降的情况,自己是否可以接受,因为工作80%以上都是为了钱,如果不能接受,那么将有可能再次跳槽,那样就会变得麻烦了\n3. 骑驴找马or裸辞?这个就要看具体情况去分析了,毕竟裸辞要承受的压力还是不小的,找工作的压力,只出不入的压力,还不能断交的五险一金等等.而骑驴找马呢,如果不能一击即中的话,频繁请假也是不小的麻烦.\n4. 你选择的公司是否可以成为你以后跳槽的一个跳板,也是至关重要的,毕竟有过在大公司就职的还是会比较吃香的\n#### 关于情感\n羽梦应该是我们几个里面目前确定是有女朋友的了,其他的人,一个虽然有人介绍,但被介绍的人却有男朋友,而他也对那人没什么感觉;一个毫无想法,或者说是懒得想,还有一个就是属于那种差一步的感觉,也不知道这一步什么时候才会走出去,或者无疾而终.我自己的话,当我在4月份打完那个电话就决定放弃了,把跟她相关的大部分东西都静静的删了,毕竟那时候我就有感觉她身边已经有人了.毕业时曾经说过,你身边没人,我会追下去,如果有人,那我们就相忘于江湖吧.后面我就没怎么去联系了,在KTV时,突然听见那首她喜欢的红豆,回忆涌现,细想起来,自4月份起,很多她喜欢的东西,我都下意识的去回避了,如她喜欢的歌手,歌曲和唱吧.一切随缘吧.或许某天出现一个如我梦中一样的女孩吧.\n#### 关于聚会\n回忆起前几次聚会,发现其实每一次的聚会都没有任何的计划和安排,这样实在是太无聊了,或许可以考虑一下把每一次的聚会地点放到广州比较出名的地方,就像这次聚会在体育西,那下一次就在海珠广场,下下次就放到北京路这样子,在去之前稍微做一下了解和攻略,在去到以后可能会有比较不错的体验,而不会每次都很无聊的四处瞎逛.\n","source":"_posts/聚会随想.md","raw":"---\ntitle: 聚会随想\ndate: 2019-02-24 20:00:27\ncategories: 随笔\ntags:\n - 随笔\n---\n#### 前言\n过完年没多久,我便和关系比较好进行了2019年春节后的第一次聚会,地点还是在广州,时间定在了元宵节那周的周六(02.24).这次聚会既有好奇某个脱单的小伙伴是怎么脱单的,也有因为有小伙伴要跳槽,还有是有小伙伴计划买电脑的,想去实体店看看,再顺路交流一下今年各自的打算和计划.\n<!--more-->\n#### 关于跳槽\n我是周五下班就直接过去广州的,住的地方就是那个有计划跳槽的小伙伴那边.到那边的时候,就和他聊了会,他那天是有去面试一家,感觉还是可以的,但他出于对薪酬的考虑,陷入了纠结的场面.在周六喝早茶的时候,我们几个也稍微聊了一下关于这方面的事.基于这两次的交流,考虑自己将来也会有跳槽的情况出现.整理出一些关于在跳槽的时候需要注意或者思考的方向\n1. 在众多招聘公司中,筛选出适合自己的和有利于自己发展的公司.\n2. 了解跳槽前后的薪酬差距,如果是那种空闲时间增加了,而薪酬没有增长甚至于下降的情况,自己是否可以接受,因为工作80%以上都是为了钱,如果不能接受,那么将有可能再次跳槽,那样就会变得麻烦了\n3. 骑驴找马or裸辞?这个就要看具体情况去分析了,毕竟裸辞要承受的压力还是不小的,找工作的压力,只出不入的压力,还不能断交的五险一金等等.而骑驴找马呢,如果不能一击即中的话,频繁请假也是不小的麻烦.\n4. 你选择的公司是否可以成为你以后跳槽的一个跳板,也是至关重要的,毕竟有过在大公司就职的还是会比较吃香的\n#### 关于情感\n羽梦应该是我们几个里面目前确定是有女朋友的了,其他的人,一个虽然有人介绍,但被介绍的人却有男朋友,而他也对那人没什么感觉;一个毫无想法,或者说是懒得想,还有一个就是属于那种差一步的感觉,也不知道这一步什么时候才会走出去,或者无疾而终.我自己的话,当我在4月份打完那个电话就决定放弃了,把跟她相关的大部分东西都静静的删了,毕竟那时候我就有感觉她身边已经有人了.毕业时曾经说过,你身边没人,我会追下去,如果有人,那我们就相忘于江湖吧.后面我就没怎么去联系了,在KTV时,突然听见那首她喜欢的红豆,回忆涌现,细想起来,自4月份起,很多她喜欢的东西,我都下意识的去回避了,如她喜欢的歌手,歌曲和唱吧.一切随缘吧.或许某天出现一个如我梦中一样的女孩吧.\n#### 关于聚会\n回忆起前几次聚会,发现其实每一次的聚会都没有任何的计划和安排,这样实在是太无聊了,或许可以考虑一下把每一次的聚会地点放到广州比较出名的地方,就像这次聚会在体育西,那下一次就在海珠广场,下下次就放到北京路这样子,在去之前稍微做一下了解和攻略,在去到以后可能会有比较不错的体验,而不会每次都很无聊的四处瞎逛.\n","slug":"聚会随想","published":1,"updated":"2019-03-27T16:05:17.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24s006stkui9ayf8r03","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>过完年没多久,我便和关系比较好进行了2019年春节后的第一次聚会,地点还是在广州,时间定在了元宵节那周的周六(02.24).这次聚会既有好奇某个脱单的小伙伴是怎么脱单的,也有因为有小伙伴要跳槽,还有是有小伙伴计划买电脑的,想去实体店看看,再顺路交流一下今年各自的打算和计划.<br><a id=\"more\"></a></p><h4 id=\"关于跳槽\"><a href=\"#关于跳槽\" class=\"headerlink\" title=\"关于跳槽\"></a>关于跳槽</h4><p>我是周五下班就直接过去广州的,住的地方就是那个有计划跳槽的小伙伴那边.到那边的时候,就和他聊了会,他那天是有去面试一家,感觉还是可以的,但他出于对薪酬的考虑,陷入了纠结的场面.在周六喝早茶的时候,我们几个也稍微聊了一下关于这方面的事.基于这两次的交流,考虑自己将来也会有跳槽的情况出现.整理出一些关于在跳槽的时候需要注意或者思考的方向</p><ol><li>在众多招聘公司中,筛选出适合自己的和有利于自己发展的公司.</li><li>了解跳槽前后的薪酬差距,如果是那种空闲时间增加了,而薪酬没有增长甚至于下降的情况,自己是否可以接受,因为工作80%以上都是为了钱,如果不能接受,那么将有可能再次跳槽,那样就会变得麻烦了</li><li>骑驴找马or裸辞?这个就要看具体情况去分析了,毕竟裸辞要承受的压力还是不小的,找工作的压力,只出不入的压力,还不能断交的五险一金等等.而骑驴找马呢,如果不能一击即中的话,频繁请假也是不小的麻烦.</li><li>你选择的公司是否可以成为你以后跳槽的一个跳板,也是至关重要的,毕竟有过在大公司就职的还是会比较吃香的<h4 id=\"关于情感\"><a href=\"#关于情感\" class=\"headerlink\" title=\"关于情感\"></a>关于情感</h4>羽梦应该是我们几个里面目前确定是有女朋友的了,其他的人,一个虽然有人介绍,但被介绍的人却有男朋友,而他也对那人没什么感觉;一个毫无想法,或者说是懒得想,还有一个就是属于那种差一步的感觉,也不知道这一步什么时候才会走出去,或者无疾而终.我自己的话,当我在4月份打完那个电话就决定放弃了,把跟她相关的大部分东西都静静的删了,毕竟那时候我就有感觉她身边已经有人了.毕业时曾经说过,你身边没人,我会追下去,如果有人,那我们就相忘于江湖吧.后面我就没怎么去联系了,在KTV时,突然听见那首她喜欢的红豆,回忆涌现,细想起来,自4月份起,很多她喜欢的东西,我都下意识的去回避了,如她喜欢的歌手,歌曲和唱吧.一切随缘吧.或许某天出现一个如我梦中一样的女孩吧.<h4 id=\"关于聚会\"><a href=\"#关于聚会\" class=\"headerlink\" title=\"关于聚会\"></a>关于聚会</h4>回忆起前几次聚会,发现其实每一次的聚会都没有任何的计划和安排,这样实在是太无聊了,或许可以考虑一下把每一次的聚会地点放到广州比较出名的地方,就像这次聚会在体育西,那下一次就在海珠广场,下下次就放到北京路这样子,在去之前稍微做一下了解和攻略,在去到以后可能会有比较不错的体验,而不会每次都很无聊的四处瞎逛.</li></ol><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>过完年没多久,我便和关系比较好进行了2019年春节后的第一次聚会,地点还是在广州,时间定在了元宵节那周的周六(02.24).这次聚会既有好奇某个脱单的小伙伴是怎么脱单的,也有因为有小伙伴要跳槽,还有是有小伙伴计划买电脑的,想去实体店看看,再顺路交流一下今年各自的打算和计划.<br>","more":"</p><h4 id=\"关于跳槽\"><a href=\"#关于跳槽\" class=\"headerlink\" title=\"关于跳槽\"></a>关于跳槽</h4><p>我是周五下班就直接过去广州的,住的地方就是那个有计划跳槽的小伙伴那边.到那边的时候,就和他聊了会,他那天是有去面试一家,感觉还是可以的,但他出于对薪酬的考虑,陷入了纠结的场面.在周六喝早茶的时候,我们几个也稍微聊了一下关于这方面的事.基于这两次的交流,考虑自己将来也会有跳槽的情况出现.整理出一些关于在跳槽的时候需要注意或者思考的方向</p><ol><li>在众多招聘公司中,筛选出适合自己的和有利于自己发展的公司.</li><li>了解跳槽前后的薪酬差距,如果是那种空闲时间增加了,而薪酬没有增长甚至于下降的情况,自己是否可以接受,因为工作80%以上都是为了钱,如果不能接受,那么将有可能再次跳槽,那样就会变得麻烦了</li><li>骑驴找马or裸辞?这个就要看具体情况去分析了,毕竟裸辞要承受的压力还是不小的,找工作的压力,只出不入的压力,还不能断交的五险一金等等.而骑驴找马呢,如果不能一击即中的话,频繁请假也是不小的麻烦.</li><li>你选择的公司是否可以成为你以后跳槽的一个跳板,也是至关重要的,毕竟有过在大公司就职的还是会比较吃香的<h4 id=\"关于情感\"><a href=\"#关于情感\" class=\"headerlink\" title=\"关于情感\"></a>关于情感</h4>羽梦应该是我们几个里面目前确定是有女朋友的了,其他的人,一个虽然有人介绍,但被介绍的人却有男朋友,而他也对那人没什么感觉;一个毫无想法,或者说是懒得想,还有一个就是属于那种差一步的感觉,也不知道这一步什么时候才会走出去,或者无疾而终.我自己的话,当我在4月份打完那个电话就决定放弃了,把跟她相关的大部分东西都静静的删了,毕竟那时候我就有感觉她身边已经有人了.毕业时曾经说过,你身边没人,我会追下去,如果有人,那我们就相忘于江湖吧.后面我就没怎么去联系了,在KTV时,突然听见那首她喜欢的红豆,回忆涌现,细想起来,自4月份起,很多她喜欢的东西,我都下意识的去回避了,如她喜欢的歌手,歌曲和唱吧.一切随缘吧.或许某天出现一个如我梦中一样的女孩吧.<h4 id=\"关于聚会\"><a href=\"#关于聚会\" class=\"headerlink\" title=\"关于聚会\"></a>关于聚会</h4>回忆起前几次聚会,发现其实每一次的聚会都没有任何的计划和安排,这样实在是太无聊了,或许可以考虑一下把每一次的聚会地点放到广州比较出名的地方,就像这次聚会在体育西,那下一次就在海珠广场,下下次就放到北京路这样子,在去之前稍微做一下了解和攻略,在去到以后可能会有比较不错的体验,而不会每次都很无聊的四处瞎逛.</li></ol><!-- rebuild by neat -->"},{"title":"贫血模型和充血模型","date":"2018-03-07T15:16:24.000Z","_content":"##### 贫血模型\n贫血模型,是指Model中,仅包含状态(属性),不包含行为(方法),采用这种设计时,需要分离出DB层,专门用于数据库操作.\n\n##### 充血模型\n充血模型,是指Model中既包括状态,又包括行为,是最符合面向对象的设计方式\n\n<!--more-->\n##### 举例说明\n对于员工Employee来说,每个员工的属性有id,Name,Sex,BirthDay,Parent(上级),行为有查找,保存,删除,职位调整(更换上级)等\n\n###### 采用贫血模型实现\nModel层\n```cs\npublic class Employee\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Sex { get; set; }\n    public DateTime? BirthDay { get; set; }\n    /// <summary>\n    /// 直属上级的Id\n    /// </summary>\n    public string ParentId { get; set; }\n}\n```\nDB层\n```cs\n//实现方法略    \npublic class EmpDAO\n{\n    public static bool AddEmployee(Employee emp);\n    public static bool UpdateEmployee(Employee emp);\n    public static bool DeleteEmployee(Employee emp);\n    public static Employee GetEmployeeById(string Id);\n}\n```\nBLL层\n```cs\npublic class EmpBLL\n{\n    public void Test()\n    {\n        Employee emp1 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"张三\", Sex = \"男\" };\n        Employee emp2 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"李四\", Sex = \"男\", ParentId = emp1.Id };\n        //插入员工\n        EmpDAO.AddEmployee(emp1);\n        EmpDAO.AddEmployee(emp2);\n\n        //取员工的上级\n        var emp2Parent = EmpDAO.GetEmployeeById(emp2.ParentId);\n        var emp2Parent_Parent = EmpDAO.GetEmployeeById(emp2Parent.ParentId);\n\n        //删除员工\n        EmpDAO.DeleteEmployee(emp1);\n        EmpDAO.DeleteEmployee(emp2);\n    }\n}\n```\n\n###### 采用充血模型实现\nModel层\n```cs\npublic class Employee\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Sex { get; set; }\n    public DateTime? BirthDay { get; set; }\n    /// <summary>\n    /// 直属上级的Id\n    /// </summary>\n    public string ParentId { get; set; }\n    private Employee _parent;\n\n    public static Employee query(string id)\n    {\n        Employee emp = new Employee();\n        //实现略,仅需填充emp的熟悉即可\n        return emp;\n    }\n    /// <summary>\n    /// 保存对象,实现略\n    /// </summary>\n    /// <returns></returns>\n    public bool Save()\n    {\n        return true;\n    }\n    /// <summary>\n    /// 删除对象,实现略\n    /// </summary>\n    /// <returns></returns>\n    public bool Drop()\n    {\n        return true;\n    }\n    /// <summary>\n    /// 上级领导，此处直接获得了Employee对象\n    /// </summary>\n    public Employee Parent\n    {\n        get\n        {\n            if (_parent != null)\n            {\n                return _parent;\n            }\n            else\n            {\n                _parent = query(this.ParentId);\n                return _parent;\n            }\n        }\n        set\n        {\n            _parent = value;\n            this.ParentId = _parent.Id;\n            Save();\n        }\n    }\n}\n```\nService层\n```cs\npublic class EmpService\n{\n    public void Test()\n    {\n        Employee emp1 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"张三\", Sex = \"男\" };\n        Employee emp2 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"李四\", Sex = \"男\", ParentId = emp1.Id };\n        //插入员工\n        emp1.Save();\n        emp2.Save();\n\n        //取员工的上级\n        var emp2Parent = emp2.Parent;\n        var emp2Parent_Parent = emp2Parent.Parent;\n\n        //删除员工\n        emp2.Drop();\n        emp1.Drop();\n    }\n}\n```\n\n##### 总结\n总结：从两者Service层和BLL　层的代码区分来看，两者都是实现了业务功能和延迟加载。\n\n贫血模型优点是系统的层次结构清楚，各层之间单向依赖。缺点是不够面向对象。\n\n充血模型优点是面向对象，Business Logic符合单一职责，不像在贫血模型里面那样包含所有的业务逻辑太过沉重。缺点是比较复杂，对技术要求更高。","source":"_posts/贫血模型和充血模型.md","raw":"---\ntitle: 贫血模型和充血模型\ndate: 2018-03-07 23:16:24\ncategories: 架构\ntags: 架构\n---\n##### 贫血模型\n贫血模型,是指Model中,仅包含状态(属性),不包含行为(方法),采用这种设计时,需要分离出DB层,专门用于数据库操作.\n\n##### 充血模型\n充血模型,是指Model中既包括状态,又包括行为,是最符合面向对象的设计方式\n\n<!--more-->\n##### 举例说明\n对于员工Employee来说,每个员工的属性有id,Name,Sex,BirthDay,Parent(上级),行为有查找,保存,删除,职位调整(更换上级)等\n\n###### 采用贫血模型实现\nModel层\n```cs\npublic class Employee\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Sex { get; set; }\n    public DateTime? BirthDay { get; set; }\n    /// <summary>\n    /// 直属上级的Id\n    /// </summary>\n    public string ParentId { get; set; }\n}\n```\nDB层\n```cs\n//实现方法略    \npublic class EmpDAO\n{\n    public static bool AddEmployee(Employee emp);\n    public static bool UpdateEmployee(Employee emp);\n    public static bool DeleteEmployee(Employee emp);\n    public static Employee GetEmployeeById(string Id);\n}\n```\nBLL层\n```cs\npublic class EmpBLL\n{\n    public void Test()\n    {\n        Employee emp1 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"张三\", Sex = \"男\" };\n        Employee emp2 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"李四\", Sex = \"男\", ParentId = emp1.Id };\n        //插入员工\n        EmpDAO.AddEmployee(emp1);\n        EmpDAO.AddEmployee(emp2);\n\n        //取员工的上级\n        var emp2Parent = EmpDAO.GetEmployeeById(emp2.ParentId);\n        var emp2Parent_Parent = EmpDAO.GetEmployeeById(emp2Parent.ParentId);\n\n        //删除员工\n        EmpDAO.DeleteEmployee(emp1);\n        EmpDAO.DeleteEmployee(emp2);\n    }\n}\n```\n\n###### 采用充血模型实现\nModel层\n```cs\npublic class Employee\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public string Sex { get; set; }\n    public DateTime? BirthDay { get; set; }\n    /// <summary>\n    /// 直属上级的Id\n    /// </summary>\n    public string ParentId { get; set; }\n    private Employee _parent;\n\n    public static Employee query(string id)\n    {\n        Employee emp = new Employee();\n        //实现略,仅需填充emp的熟悉即可\n        return emp;\n    }\n    /// <summary>\n    /// 保存对象,实现略\n    /// </summary>\n    /// <returns></returns>\n    public bool Save()\n    {\n        return true;\n    }\n    /// <summary>\n    /// 删除对象,实现略\n    /// </summary>\n    /// <returns></returns>\n    public bool Drop()\n    {\n        return true;\n    }\n    /// <summary>\n    /// 上级领导，此处直接获得了Employee对象\n    /// </summary>\n    public Employee Parent\n    {\n        get\n        {\n            if (_parent != null)\n            {\n                return _parent;\n            }\n            else\n            {\n                _parent = query(this.ParentId);\n                return _parent;\n            }\n        }\n        set\n        {\n            _parent = value;\n            this.ParentId = _parent.Id;\n            Save();\n        }\n    }\n}\n```\nService层\n```cs\npublic class EmpService\n{\n    public void Test()\n    {\n        Employee emp1 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"张三\", Sex = \"男\" };\n        Employee emp2 = new Employee() { Id = System.Guid.NewGuid().ToString(), Name = \"李四\", Sex = \"男\", ParentId = emp1.Id };\n        //插入员工\n        emp1.Save();\n        emp2.Save();\n\n        //取员工的上级\n        var emp2Parent = emp2.Parent;\n        var emp2Parent_Parent = emp2Parent.Parent;\n\n        //删除员工\n        emp2.Drop();\n        emp1.Drop();\n    }\n}\n```\n\n##### 总结\n总结：从两者Service层和BLL　层的代码区分来看，两者都是实现了业务功能和延迟加载。\n\n贫血模型优点是系统的层次结构清楚，各层之间单向依赖。缺点是不够面向对象。\n\n充血模型优点是面向对象，Business Logic符合单一职责，不像在贫血模型里面那样包含所有的业务逻辑太过沉重。缺点是比较复杂，对技术要求更高。","slug":"贫血模型和充血模型","published":1,"updated":"2018-03-08T15:21:21.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24t006utkuix6c4t24y","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"贫血模型\"><a href=\"#贫血模型\" class=\"headerlink\" title=\"贫血模型\"></a>贫血模型</h5><p>贫血模型,是指Model中,仅包含状态(属性),不包含行为(方法),采用这种设计时,需要分离出DB层,专门用于数据库操作.</p><h5 id=\"充血模型\"><a href=\"#充血模型\" class=\"headerlink\" title=\"充血模型\"></a>充血模型</h5><p>充血模型,是指Model中既包括状态,又包括行为,是最符合面向对象的设计方式</p><a id=\"more\"></a><h5 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h5><p>对于员工Employee来说,每个员工的属性有id,Name,Sex,BirthDay,Parent(上级),行为有查找,保存,删除,职位调整(更换上级)等</p><h6 id=\"采用贫血模型实现\"><a href=\"#采用贫血模型实现\" class=\"headerlink\" title=\"采用贫血模型实现\"></a>采用贫血模型实现</h6><p>Model层<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Sex &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime? BirthDay &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 直属上级的Id</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ParentId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>DB层<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现方法略    </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpDAO</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">AddEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">UpdateEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Employee <span class=\"title\">GetEmployeeById</span>(<span class=\"params\"><span class=\"keyword\">string</span> Id</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>BLL层<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpBLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Employee emp1 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">\"张三\"</span>, Sex = <span class=\"string\">\"男\"</span> &#125;;</span><br><span class=\"line\">        Employee emp2 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">\"李四\"</span>, Sex = <span class=\"string\">\"男\"</span>, ParentId = emp1.Id &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//插入员工</span></span><br><span class=\"line\">        EmpDAO.AddEmployee(emp1);</span><br><span class=\"line\">        EmpDAO.AddEmployee(emp2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//取员工的上级</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent = EmpDAO.GetEmployeeById(emp2.ParentId);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent_Parent = EmpDAO.GetEmployeeById(emp2Parent.ParentId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//删除员工</span></span><br><span class=\"line\">        EmpDAO.DeleteEmployee(emp1);</span><br><span class=\"line\">        EmpDAO.DeleteEmployee(emp2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h6 id=\"采用充血模型实现\"><a href=\"#采用充血模型实现\" class=\"headerlink\" title=\"采用充血模型实现\"></a>采用充血模型实现</h6><p>Model层<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Sex &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime? BirthDay &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 直属上级的Id</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ParentId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Employee _parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Employee <span class=\"title\">query</span>(<span class=\"params\"><span class=\"keyword\">string</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Employee emp = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">        <span class=\"comment\">//实现略,仅需填充emp的熟悉即可</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> emp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 保存对象,实现略</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Save</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除对象,实现略</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Drop</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 上级领导，此处直接获得了Employee对象</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Employee Parent</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_parent != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _parent;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _parent = query(<span class=\"keyword\">this</span>.ParentId);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _parent;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _parent = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ParentId = _parent.Id;</span><br><span class=\"line\">            Save();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Service层<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Employee emp1 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">\"张三\"</span>, Sex = <span class=\"string\">\"男\"</span> &#125;;</span><br><span class=\"line\">        Employee emp2 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">\"李四\"</span>, Sex = <span class=\"string\">\"男\"</span>, ParentId = emp1.Id &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//插入员工</span></span><br><span class=\"line\">        emp1.Save();</span><br><span class=\"line\">        emp2.Save();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//取员工的上级</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent = emp2.Parent;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent_Parent = emp2Parent.Parent;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//删除员工</span></span><br><span class=\"line\">        emp2.Drop();</span><br><span class=\"line\">        emp1.Drop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>总结：从两者Service层和BLL　层的代码区分来看，两者都是实现了业务功能和延迟加载。</p><p>贫血模型优点是系统的层次结构清楚，各层之间单向依赖。缺点是不够面向对象。</p><p>充血模型优点是面向对象，Business Logic符合单一职责，不像在贫血模型里面那样包含所有的业务逻辑太过沉重。缺点是比较复杂，对技术要求更高。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><h5 id=\"贫血模型\"><a href=\"#贫血模型\" class=\"headerlink\" title=\"贫血模型\"></a>贫血模型</h5><p>贫血模型,是指Model中,仅包含状态(属性),不包含行为(方法),采用这种设计时,需要分离出DB层,专门用于数据库操作.</p><h5 id=\"充血模型\"><a href=\"#充血模型\" class=\"headerlink\" title=\"充血模型\"></a>充血模型</h5><p>充血模型,是指Model中既包括状态,又包括行为,是最符合面向对象的设计方式</p>","more":"<h5 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h5><p>对于员工Employee来说,每个员工的属性有id,Name,Sex,BirthDay,Parent(上级),行为有查找,保存,删除,职位调整(更换上级)等</p><h6 id=\"采用贫血模型实现\"><a href=\"#采用贫血模型实现\" class=\"headerlink\" title=\"采用贫血模型实现\"></a>采用贫血模型实现</h6><p>Model层<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Sex &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime? BirthDay &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 直属上级的Id</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ParentId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>DB层<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现方法略    </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpDAO</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">AddEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">UpdateEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">DeleteEmployee</span>(<span class=\"params\">Employee emp</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Employee <span class=\"title\">GetEmployeeById</span>(<span class=\"params\"><span class=\"keyword\">string</span> Id</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>BLL层<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpBLL</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Employee emp1 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">\"张三\"</span>, Sex = <span class=\"string\">\"男\"</span> &#125;;</span><br><span class=\"line\">        Employee emp2 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">\"李四\"</span>, Sex = <span class=\"string\">\"男\"</span>, ParentId = emp1.Id &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//插入员工</span></span><br><span class=\"line\">        EmpDAO.AddEmployee(emp1);</span><br><span class=\"line\">        EmpDAO.AddEmployee(emp2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//取员工的上级</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent = EmpDAO.GetEmployeeById(emp2.ParentId);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent_Parent = EmpDAO.GetEmployeeById(emp2Parent.ParentId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//删除员工</span></span><br><span class=\"line\">        EmpDAO.DeleteEmployee(emp1);</span><br><span class=\"line\">        EmpDAO.DeleteEmployee(emp2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h6 id=\"采用充血模型实现\"><a href=\"#采用充血模型实现\" class=\"headerlink\" title=\"采用充血模型实现\"></a>采用充血模型实现</h6><p>Model层<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Sex &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime? BirthDay &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 直属上级的Id</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ParentId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Employee _parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Employee <span class=\"title\">query</span>(<span class=\"params\"><span class=\"keyword\">string</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Employee emp = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">        <span class=\"comment\">//实现略,仅需填充emp的熟悉即可</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> emp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 保存对象,实现略</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Save</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 删除对象,实现略</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Drop</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 上级领导，此处直接获得了Employee对象</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Employee Parent</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_parent != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _parent;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _parent = query(<span class=\"keyword\">this</span>.ParentId);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _parent;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _parent = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ParentId = _parent.Id;</span><br><span class=\"line\">            Save();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Service层<br></p><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmpService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Employee emp1 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">\"张三\"</span>, Sex = <span class=\"string\">\"男\"</span> &#125;;</span><br><span class=\"line\">        Employee emp2 = <span class=\"keyword\">new</span> Employee() &#123; Id = System.Guid.NewGuid().ToString(), Name = <span class=\"string\">\"李四\"</span>, Sex = <span class=\"string\">\"男\"</span>, ParentId = emp1.Id &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//插入员工</span></span><br><span class=\"line\">        emp1.Save();</span><br><span class=\"line\">        emp2.Save();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//取员工的上级</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent = emp2.Parent;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> emp2Parent_Parent = emp2Parent.Parent;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//删除员工</span></span><br><span class=\"line\">        emp2.Drop();</span><br><span class=\"line\">        emp1.Drop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>总结：从两者Service层和BLL　层的代码区分来看，两者都是实现了业务功能和延迟加载。</p><p>贫血模型优点是系统的层次结构清楚，各层之间单向依赖。缺点是不够面向对象。</p><p>充血模型优点是面向对象，Business Logic符合单一职责，不像在贫血模型里面那样包含所有的业务逻辑太过沉重。缺点是比较复杂，对技术要求更高。</p><!-- rebuild by neat -->"},{"title":"直觉泵-关于意义和内容思考工具(二)","date":"2020-01-07T15:02:50.000Z","_content":"\n上一篇介绍了特拉法尔加广场上的谋杀案、生活在克里法兰的一位兄长、\"爸爸是名医生\"、常识映像和科学映像、常识心理以及意向立场这些关于意义和内容思考工具,今天要介绍的关于意义和内容思考工具(人与\"次人\"的区别、大脑中的小人儿委员会).\n\n<!--more-->\n\n#### 人与\"次人\"的区别  自上而下的认知能力分解\n\n大脑的无数多种能力是纠结在一起、相互影响的,根本不存在一个将大脑所有的能力都集结于一处从而产生意识的中心.让你成为你之所是的那些能力、性情、偏好和怪癖,都依赖于连通你的身体和大脑的通路才得以形成.\n\n\"你无法把我从我的身子上撕下来,只干净利索地留下一个轮廓\"\n\n尽管大自然没有赋予我们如互联网那般紧罗密布的分散结构,但不能否认,构成我们的各个部分也并非功能单一,它们的组织方式也是去中心化的.科学们证明,我们的大脑组织是非常具有可塑性的,它能变换成各种新的配置,即使割舍掉了身体上的一些重要部分,只要不是那些致命的身体部分,你就还是可以做自己,追求梦想、惑乱敌人、权衡策略、重新尝试取得新的成功.\n\n真正打碎整体思维,指引人们进入次思维研究的是计算机的发明和人工智能研究的诞生.人工智能研究从一开始就确立了自己的目标--要把人类整体的认知能力转变成一个由次人类专业处理装置组成的巨大网络,包括目标发生装置、记忆搜索装置、计划评估装置、感知分析器和语句分析程序等.\n\n#### 大脑中的小人儿委员会  认知科学的好理念\n\n小人儿式机械主义:因为人工智能程序员们是从一个带有意向色彩的起点入手的,所以他们当然会将计算机拟人化.比如说,一旦计算机顺利解决了问题,程序员就会说他们设计的计算机能够理解那些用英语写出的问题.程序设计的首要的,也是最高级的要求是要把计算机拆分成数个子系统,每个子系统都要执行一些带有意向色彩的任务,程序员列出一张流程表,上面贯穿着计算机评估、记忆器、鉴别器、监督器等部分,其中的每一个都算得上是小人儿......每个小人儿进而又可以被分解为更小的小人儿,值得一提的是,它们的智能性也会渐次降低.分解到最后,小人儿们都变成了一些加法器或者减法器,它们的智力仅能让她们从两个数字中挑出较大的那个.分解到这个程度,这些小人儿就可以由一台机器替代了.\n\n这一策略的独特价值在于它釜底抽薪地反驳了无限倒退论.小人儿式机械主义绕过了险恶的无限倒退论,用有限的倒退取代了它.\n\n受神经科学的启发,作为大脑运作的一种模式,那种自下而上的小人儿式机械主义真是让人越看越觉得合理,因为从生物学的视角看,它生成的更加错综复杂也更有竞争性的“计算体系”是更合理的:我们可以看到它整个的发展历程,从胚胎直到成人,在这个过程中不断建构和修改.我们也可以看到,这种复杂的体系结构是如何从简单的神经系统发展而来,由那些未成熟的小人儿组合而成,那些小人儿有着“近似”于感知、标记和记忆的能力.\n","source":"_posts/直觉泵-关于意义和内容思考工具(二).md","raw":"---\ntitle: 直觉泵-关于意义和内容思考工具(二)\ndate: 2020-01-07 23:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n\n上一篇介绍了特拉法尔加广场上的谋杀案、生活在克里法兰的一位兄长、\"爸爸是名医生\"、常识映像和科学映像、常识心理以及意向立场这些关于意义和内容思考工具,今天要介绍的关于意义和内容思考工具(人与\"次人\"的区别、大脑中的小人儿委员会).\n\n<!--more-->\n\n#### 人与\"次人\"的区别  自上而下的认知能力分解\n\n大脑的无数多种能力是纠结在一起、相互影响的,根本不存在一个将大脑所有的能力都集结于一处从而产生意识的中心.让你成为你之所是的那些能力、性情、偏好和怪癖,都依赖于连通你的身体和大脑的通路才得以形成.\n\n\"你无法把我从我的身子上撕下来,只干净利索地留下一个轮廓\"\n\n尽管大自然没有赋予我们如互联网那般紧罗密布的分散结构,但不能否认,构成我们的各个部分也并非功能单一,它们的组织方式也是去中心化的.科学们证明,我们的大脑组织是非常具有可塑性的,它能变换成各种新的配置,即使割舍掉了身体上的一些重要部分,只要不是那些致命的身体部分,你就还是可以做自己,追求梦想、惑乱敌人、权衡策略、重新尝试取得新的成功.\n\n真正打碎整体思维,指引人们进入次思维研究的是计算机的发明和人工智能研究的诞生.人工智能研究从一开始就确立了自己的目标--要把人类整体的认知能力转变成一个由次人类专业处理装置组成的巨大网络,包括目标发生装置、记忆搜索装置、计划评估装置、感知分析器和语句分析程序等.\n\n#### 大脑中的小人儿委员会  认知科学的好理念\n\n小人儿式机械主义:因为人工智能程序员们是从一个带有意向色彩的起点入手的,所以他们当然会将计算机拟人化.比如说,一旦计算机顺利解决了问题,程序员就会说他们设计的计算机能够理解那些用英语写出的问题.程序设计的首要的,也是最高级的要求是要把计算机拆分成数个子系统,每个子系统都要执行一些带有意向色彩的任务,程序员列出一张流程表,上面贯穿着计算机评估、记忆器、鉴别器、监督器等部分,其中的每一个都算得上是小人儿......每个小人儿进而又可以被分解为更小的小人儿,值得一提的是,它们的智能性也会渐次降低.分解到最后,小人儿们都变成了一些加法器或者减法器,它们的智力仅能让她们从两个数字中挑出较大的那个.分解到这个程度,这些小人儿就可以由一台机器替代了.\n\n这一策略的独特价值在于它釜底抽薪地反驳了无限倒退论.小人儿式机械主义绕过了险恶的无限倒退论,用有限的倒退取代了它.\n\n受神经科学的启发,作为大脑运作的一种模式,那种自下而上的小人儿式机械主义真是让人越看越觉得合理,因为从生物学的视角看,它生成的更加错综复杂也更有竞争性的“计算体系”是更合理的:我们可以看到它整个的发展历程,从胚胎直到成人,在这个过程中不断建构和修改.我们也可以看到,这种复杂的体系结构是如何从简单的神经系统发展而来,由那些未成熟的小人儿组合而成,那些小人儿有着“近似”于感知、标记和记忆的能力.\n","slug":"直觉泵-关于意义和内容思考工具(二)","published":1,"updated":"2020-01-07T15:29:08.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24u006wtkuigd30j8ej","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>上一篇介绍了特拉法尔加广场上的谋杀案、生活在克里法兰的一位兄长、”爸爸是名医生”、常识映像和科学映像、常识心理以及意向立场这些关于意义和内容思考工具,今天要介绍的关于意义和内容思考工具(人与”次人”的区别、大脑中的小人儿委员会).</p><a id=\"more\"></a><h4 id=\"人与”次人”的区别-自上而下的认知能力分解\"><a href=\"#人与”次人”的区别-自上而下的认知能力分解\" class=\"headerlink\" title=\"人与”次人”的区别  自上而下的认知能力分解\"></a>人与”次人”的区别 自上而下的认知能力分解</h4><p>大脑的无数多种能力是纠结在一起、相互影响的,根本不存在一个将大脑所有的能力都集结于一处从而产生意识的中心.让你成为你之所是的那些能力、性情、偏好和怪癖,都依赖于连通你的身体和大脑的通路才得以形成.</p><p>“你无法把我从我的身子上撕下来,只干净利索地留下一个轮廓”</p><p>尽管大自然没有赋予我们如互联网那般紧罗密布的分散结构,但不能否认,构成我们的各个部分也并非功能单一,它们的组织方式也是去中心化的.科学们证明,我们的大脑组织是非常具有可塑性的,它能变换成各种新的配置,即使割舍掉了身体上的一些重要部分,只要不是那些致命的身体部分,你就还是可以做自己,追求梦想、惑乱敌人、权衡策略、重新尝试取得新的成功.</p><p>真正打碎整体思维,指引人们进入次思维研究的是计算机的发明和人工智能研究的诞生.人工智能研究从一开始就确立了自己的目标–要把人类整体的认知能力转变成一个由次人类专业处理装置组成的巨大网络,包括目标发生装置、记忆搜索装置、计划评估装置、感知分析器和语句分析程序等.</p><h4 id=\"大脑中的小人儿委员会-认知科学的好理念\"><a href=\"#大脑中的小人儿委员会-认知科学的好理念\" class=\"headerlink\" title=\"大脑中的小人儿委员会  认知科学的好理念\"></a>大脑中的小人儿委员会 认知科学的好理念</h4><p>小人儿式机械主义:因为人工智能程序员们是从一个带有意向色彩的起点入手的,所以他们当然会将计算机拟人化.比如说,一旦计算机顺利解决了问题,程序员就会说他们设计的计算机能够理解那些用英语写出的问题.程序设计的首要的,也是最高级的要求是要把计算机拆分成数个子系统,每个子系统都要执行一些带有意向色彩的任务,程序员列出一张流程表,上面贯穿着计算机评估、记忆器、鉴别器、监督器等部分,其中的每一个都算得上是小人儿……每个小人儿进而又可以被分解为更小的小人儿,值得一提的是,它们的智能性也会渐次降低.分解到最后,小人儿们都变成了一些加法器或者减法器,它们的智力仅能让她们从两个数字中挑出较大的那个.分解到这个程度,这些小人儿就可以由一台机器替代了.</p><p>这一策略的独特价值在于它釜底抽薪地反驳了无限倒退论.小人儿式机械主义绕过了险恶的无限倒退论,用有限的倒退取代了它.</p><p>受神经科学的启发,作为大脑运作的一种模式,那种自下而上的小人儿式机械主义真是让人越看越觉得合理,因为从生物学的视角看,它生成的更加错综复杂也更有竞争性的“计算体系”是更合理的:我们可以看到它整个的发展历程,从胚胎直到成人,在这个过程中不断建构和修改.我们也可以看到,这种复杂的体系结构是如何从简单的神经系统发展而来,由那些未成熟的小人儿组合而成,那些小人儿有着“近似”于感知、标记和记忆的能力.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>上一篇介绍了特拉法尔加广场上的谋杀案、生活在克里法兰的一位兄长、”爸爸是名医生”、常识映像和科学映像、常识心理以及意向立场这些关于意义和内容思考工具,今天要介绍的关于意义和内容思考工具(人与”次人”的区别、大脑中的小人儿委员会).</p>","more":"<h4 id=\"人与”次人”的区别-自上而下的认知能力分解\"><a href=\"#人与”次人”的区别-自上而下的认知能力分解\" class=\"headerlink\" title=\"人与”次人”的区别  自上而下的认知能力分解\"></a>人与”次人”的区别 自上而下的认知能力分解</h4><p>大脑的无数多种能力是纠结在一起、相互影响的,根本不存在一个将大脑所有的能力都集结于一处从而产生意识的中心.让你成为你之所是的那些能力、性情、偏好和怪癖,都依赖于连通你的身体和大脑的通路才得以形成.</p><p>“你无法把我从我的身子上撕下来,只干净利索地留下一个轮廓”</p><p>尽管大自然没有赋予我们如互联网那般紧罗密布的分散结构,但不能否认,构成我们的各个部分也并非功能单一,它们的组织方式也是去中心化的.科学们证明,我们的大脑组织是非常具有可塑性的,它能变换成各种新的配置,即使割舍掉了身体上的一些重要部分,只要不是那些致命的身体部分,你就还是可以做自己,追求梦想、惑乱敌人、权衡策略、重新尝试取得新的成功.</p><p>真正打碎整体思维,指引人们进入次思维研究的是计算机的发明和人工智能研究的诞生.人工智能研究从一开始就确立了自己的目标–要把人类整体的认知能力转变成一个由次人类专业处理装置组成的巨大网络,包括目标发生装置、记忆搜索装置、计划评估装置、感知分析器和语句分析程序等.</p><h4 id=\"大脑中的小人儿委员会-认知科学的好理念\"><a href=\"#大脑中的小人儿委员会-认知科学的好理念\" class=\"headerlink\" title=\"大脑中的小人儿委员会  认知科学的好理念\"></a>大脑中的小人儿委员会 认知科学的好理念</h4><p>小人儿式机械主义:因为人工智能程序员们是从一个带有意向色彩的起点入手的,所以他们当然会将计算机拟人化.比如说,一旦计算机顺利解决了问题,程序员就会说他们设计的计算机能够理解那些用英语写出的问题.程序设计的首要的,也是最高级的要求是要把计算机拆分成数个子系统,每个子系统都要执行一些带有意向色彩的任务,程序员列出一张流程表,上面贯穿着计算机评估、记忆器、鉴别器、监督器等部分,其中的每一个都算得上是小人儿……每个小人儿进而又可以被分解为更小的小人儿,值得一提的是,它们的智能性也会渐次降低.分解到最后,小人儿们都变成了一些加法器或者减法器,它们的智力仅能让她们从两个数字中挑出较大的那个.分解到这个程度,这些小人儿就可以由一台机器替代了.</p><p>这一策略的独特价值在于它釜底抽薪地反驳了无限倒退论.小人儿式机械主义绕过了险恶的无限倒退论,用有限的倒退取代了它.</p><p>受神经科学的启发,作为大脑运作的一种模式,那种自下而上的小人儿式机械主义真是让人越看越觉得合理,因为从生物学的视角看,它生成的更加错综复杂也更有竞争性的“计算体系”是更合理的:我们可以看到它整个的发展历程,从胚胎直到成人,在这个过程中不断建构和修改.我们也可以看到,这种复杂的体系结构是如何从简单的神经系统发展而来,由那些未成熟的小人儿组合而成,那些小人儿有着“近似”于感知、标记和记忆的能力.</p><!-- rebuild by neat -->"},{"title":"直觉泵-关于计算机的思考工具","date":"2020-01-10T15:02:50.000Z","_content":"今天,计算机无疑已经成为了我们最有力的思考工具,这不是因为它们承担起了单调繁重的苦差事,解放了智力劳动,而且,计算机科学家们发明出的许多概念也凭借着自身的实力成为了极好的思考工具.\n\n<!--more-->\n\n#### 计算机施展魔法的7个秘密  部分之和大于总体的最好实例\n\n秘密1 发挥能力,无需理解力:有些东西-=如一台寄存器机--它能完成精密的运算,但无需理解自己在做什么.\n\n秘密2 寄存器中的数字会代表什么取决于我们所编写的是什么样的程序.\n\n秘密3 寄存器中的数字可以表示任何事物,这说明,寄存器原则是可以处理任何事物,它们可以\"识别\"所有用数字(包括用一个数字或是一系列数字)表示的图案或特征.\n\n秘密4 既然一个数字可以表示任何事物,那么它就一定能表示一条指令或是一个地址.\n\n秘密5 所有可行的程序都能由一个单独的数字只带,都可以被看作是一串指令,等待通用万能机去执行.\n\n秘密6 自图灵的假想纸带机之后,计算机所有方面的改善,提高的都只是运算速度.\n\n秘密7 没有再多的秘密了!\n\n也许计算机最美妙的地方就是,它由各部分(操作)简单地组合而成,而各部分本身也很简单地组合,简单到没有什么地方是无法给出解释的.这里没有仙气,没有\"形态共振\",没有无形的力场,没有未知的物理定律,也没有那些神奇的组织.要知道,即使你用计算机成功地模拟出一些情景,完成这一切的也只是一些算术运算而已.\n\n#### 虚拟机  模拟硬件运行的计算机程序\n\n\"虚拟机\"是计算机科学家杰拉尔德·波佩克（Gerald Popek）和罗伯特·戈德堡(Robert Goldberg)在1974年引入的一个概念,它最初表示的是\"实体机的一种独立有效的复制品\",即各种指令的一种复制品.实体机是实在的硬件,由硅芯片和电线之类的东西组成,我们称它为A.而虚拟机是运行在另一台实体机B上的计算机程序,它能完美地模拟硬件A:速度可能会慢点,毕竟它要首先保障自己硬件上的基本操作有效运行,才能组织起硬件A上的那些操作,但的确都是同样的程序.如果你写了一个在硬件A上运行的程序,那么硬件B在运行模拟硬件A的虚拟机时,该程序应该能在硬件B上畅通无阻地运行.\n\nJava虚拟机(Java Virtual Machine，即JVM)已成为当今最流行的一种虚拟机,这是我们扩展虚拟机概念的又一个原因.Java虚拟机不是对任何一种实体硬件机器的模仿,它只作为软件机而存在,比较像一个操作系统.\n\n只要有一个大块头的硬件,在里面安装无数可塑可调的\"记忆\"盒子或者寄存器,把需要的指令放进这些记忆盒子里,让它们运行,这样你就把这个大块头的硬件变成了你想要的任何一种计算机.\n\n在面对\"说法语的人的大脑之间的相似性\"这个问题时,排除解剖学上那些显著的差异,也许利用虚拟机的例子能为我们展示出一种最好的解释:所有说法语的人都具备某种版本的法语虚拟机,它藏身于他们大脑数以亿计的寄存器中,是一套由细微的习性和连锁装置构成的系统.\n\n至少我们找到了一种方法,它能够清楚地道出\"具有数万亿活动部件的计算机,它的那种高等能力到底是什么\",而无需动用神奇组织.\n\n#### 算法   有效解决问题的策略机制\n\n算法是一种特定类型的形式步骤,只要可以\"运行\"或者开始具现化,它就能合乎逻辑地产生特定类型的结果.\n\n算法的概念有这样三个至关重要的特征,其中每一个总结起来都有些难度\n\n1. 底层中立:不管你用的是哪种符号体系,也不管你用的是铅笔还是钢笔,纸张或是羊皮卷,霓虹灯或者空中文字,它们都不会影响到你运算长除法的过程.运算程序依据的是逻辑结构,各种物质材料的因果力量也是能为运算保驾护航,但它们不直接参与运算.\n\n2. 潜在无头脑:过程的整体设计可以非常华丽,结果也可以十分耀眼,但算法的各个既成步骤,包括步骤之间的过渡却出奇地简单.有多简单?一个听话的白痴或者是一个简单的机械装置就能执行.\n\n3. 结果又保障:不管什么样的算法,只要不出意外,它就能每次都按照同样的步骤运作.一种算法就是一份简单的、不易有出入的食谱.\n\n显而易见,计算机就是靠这些特点成就的.每一种计算机程序都是一套算法:根本的组成元素是一些简单的步骤,它们的运行过程惊人地可靠,而运行机制却十分简单.\n\n#### 让电梯实现自动控制   机器取代人类的逻辑\n\n机器既不像人类那样,能够逐字逐句地把规则保存在大脑中,然后随时查阅那些规则从而指导自己行动;也不同于那些行星,总是能不紧不慢地\"按照\"设定好的轨道运行.有时,通过不断训练一些显性规则就会内化或者变成一种惯例,我们甚至都忘记了它们,不自觉地就把它们丢弃了.\n\n植入到源代码中的那些注释可以帮助程序员们去理解软件中相互啮合的各个部分的意图,但是,在我们为了方便描绘人类大脑所创作出的哪些硬件、固件和软件中,它们却并不出现.自然选择在我们的大脑中安装的那些功能结构就像是一些没有注释的代码,这些功能是有目的的,但由于代码并没有对结构的目的有所注释，大脑也就无从理解这些意图了.\n","source":"_posts/直觉泵-关于计算机的思考工具.md","raw":"---\ntitle: 直觉泵-关于计算机的思考工具\ndate: 2020-01-10 23:02:50\ncategories: 读书笔记\ntags:\n - 读书笔记\n - 哲学\n - 直觉泵\n---\n今天,计算机无疑已经成为了我们最有力的思考工具,这不是因为它们承担起了单调繁重的苦差事,解放了智力劳动,而且,计算机科学家们发明出的许多概念也凭借着自身的实力成为了极好的思考工具.\n\n<!--more-->\n\n#### 计算机施展魔法的7个秘密  部分之和大于总体的最好实例\n\n秘密1 发挥能力,无需理解力:有些东西-=如一台寄存器机--它能完成精密的运算,但无需理解自己在做什么.\n\n秘密2 寄存器中的数字会代表什么取决于我们所编写的是什么样的程序.\n\n秘密3 寄存器中的数字可以表示任何事物,这说明,寄存器原则是可以处理任何事物,它们可以\"识别\"所有用数字(包括用一个数字或是一系列数字)表示的图案或特征.\n\n秘密4 既然一个数字可以表示任何事物,那么它就一定能表示一条指令或是一个地址.\n\n秘密5 所有可行的程序都能由一个单独的数字只带,都可以被看作是一串指令,等待通用万能机去执行.\n\n秘密6 自图灵的假想纸带机之后,计算机所有方面的改善,提高的都只是运算速度.\n\n秘密7 没有再多的秘密了!\n\n也许计算机最美妙的地方就是,它由各部分(操作)简单地组合而成,而各部分本身也很简单地组合,简单到没有什么地方是无法给出解释的.这里没有仙气,没有\"形态共振\",没有无形的力场,没有未知的物理定律,也没有那些神奇的组织.要知道,即使你用计算机成功地模拟出一些情景,完成这一切的也只是一些算术运算而已.\n\n#### 虚拟机  模拟硬件运行的计算机程序\n\n\"虚拟机\"是计算机科学家杰拉尔德·波佩克（Gerald Popek）和罗伯特·戈德堡(Robert Goldberg)在1974年引入的一个概念,它最初表示的是\"实体机的一种独立有效的复制品\",即各种指令的一种复制品.实体机是实在的硬件,由硅芯片和电线之类的东西组成,我们称它为A.而虚拟机是运行在另一台实体机B上的计算机程序,它能完美地模拟硬件A:速度可能会慢点,毕竟它要首先保障自己硬件上的基本操作有效运行,才能组织起硬件A上的那些操作,但的确都是同样的程序.如果你写了一个在硬件A上运行的程序,那么硬件B在运行模拟硬件A的虚拟机时,该程序应该能在硬件B上畅通无阻地运行.\n\nJava虚拟机(Java Virtual Machine，即JVM)已成为当今最流行的一种虚拟机,这是我们扩展虚拟机概念的又一个原因.Java虚拟机不是对任何一种实体硬件机器的模仿,它只作为软件机而存在,比较像一个操作系统.\n\n只要有一个大块头的硬件,在里面安装无数可塑可调的\"记忆\"盒子或者寄存器,把需要的指令放进这些记忆盒子里,让它们运行,这样你就把这个大块头的硬件变成了你想要的任何一种计算机.\n\n在面对\"说法语的人的大脑之间的相似性\"这个问题时,排除解剖学上那些显著的差异,也许利用虚拟机的例子能为我们展示出一种最好的解释:所有说法语的人都具备某种版本的法语虚拟机,它藏身于他们大脑数以亿计的寄存器中,是一套由细微的习性和连锁装置构成的系统.\n\n至少我们找到了一种方法,它能够清楚地道出\"具有数万亿活动部件的计算机,它的那种高等能力到底是什么\",而无需动用神奇组织.\n\n#### 算法   有效解决问题的策略机制\n\n算法是一种特定类型的形式步骤,只要可以\"运行\"或者开始具现化,它就能合乎逻辑地产生特定类型的结果.\n\n算法的概念有这样三个至关重要的特征,其中每一个总结起来都有些难度\n\n1. 底层中立:不管你用的是哪种符号体系,也不管你用的是铅笔还是钢笔,纸张或是羊皮卷,霓虹灯或者空中文字,它们都不会影响到你运算长除法的过程.运算程序依据的是逻辑结构,各种物质材料的因果力量也是能为运算保驾护航,但它们不直接参与运算.\n\n2. 潜在无头脑:过程的整体设计可以非常华丽,结果也可以十分耀眼,但算法的各个既成步骤,包括步骤之间的过渡却出奇地简单.有多简单?一个听话的白痴或者是一个简单的机械装置就能执行.\n\n3. 结果又保障:不管什么样的算法,只要不出意外,它就能每次都按照同样的步骤运作.一种算法就是一份简单的、不易有出入的食谱.\n\n显而易见,计算机就是靠这些特点成就的.每一种计算机程序都是一套算法:根本的组成元素是一些简单的步骤,它们的运行过程惊人地可靠,而运行机制却十分简单.\n\n#### 让电梯实现自动控制   机器取代人类的逻辑\n\n机器既不像人类那样,能够逐字逐句地把规则保存在大脑中,然后随时查阅那些规则从而指导自己行动;也不同于那些行星,总是能不紧不慢地\"按照\"设定好的轨道运行.有时,通过不断训练一些显性规则就会内化或者变成一种惯例,我们甚至都忘记了它们,不自觉地就把它们丢弃了.\n\n植入到源代码中的那些注释可以帮助程序员们去理解软件中相互啮合的各个部分的意图,但是,在我们为了方便描绘人类大脑所创作出的哪些硬件、固件和软件中,它们却并不出现.自然选择在我们的大脑中安装的那些功能结构就像是一些没有注释的代码,这些功能是有目的的,但由于代码并没有对结构的目的有所注释，大脑也就无从理解这些意图了.\n","slug":"直觉泵-关于计算机的思考工具","published":1,"updated":"2020-03-09T03:41:41.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24w006ytkuiqi8uymdv","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>今天,计算机无疑已经成为了我们最有力的思考工具,这不是因为它们承担起了单调繁重的苦差事,解放了智力劳动,而且,计算机科学家们发明出的许多概念也凭借着自身的实力成为了极好的思考工具.</p><a id=\"more\"></a><h4 id=\"计算机施展魔法的7个秘密-部分之和大于总体的最好实例\"><a href=\"#计算机施展魔法的7个秘密-部分之和大于总体的最好实例\" class=\"headerlink\" title=\"计算机施展魔法的7个秘密  部分之和大于总体的最好实例\"></a>计算机施展魔法的7个秘密 部分之和大于总体的最好实例</h4><p>秘密1 发挥能力,无需理解力:有些东西-=如一台寄存器机–它能完成精密的运算,但无需理解自己在做什么.</p><p>秘密2 寄存器中的数字会代表什么取决于我们所编写的是什么样的程序.</p><p>秘密3 寄存器中的数字可以表示任何事物,这说明,寄存器原则是可以处理任何事物,它们可以”识别”所有用数字(包括用一个数字或是一系列数字)表示的图案或特征.</p><p>秘密4 既然一个数字可以表示任何事物,那么它就一定能表示一条指令或是一个地址.</p><p>秘密5 所有可行的程序都能由一个单独的数字只带,都可以被看作是一串指令,等待通用万能机去执行.</p><p>秘密6 自图灵的假想纸带机之后,计算机所有方面的改善,提高的都只是运算速度.</p><p>秘密7 没有再多的秘密了!</p><p>也许计算机最美妙的地方就是,它由各部分(操作)简单地组合而成,而各部分本身也很简单地组合,简单到没有什么地方是无法给出解释的.这里没有仙气,没有”形态共振”,没有无形的力场,没有未知的物理定律,也没有那些神奇的组织.要知道,即使你用计算机成功地模拟出一些情景,完成这一切的也只是一些算术运算而已.</p><h4 id=\"虚拟机-模拟硬件运行的计算机程序\"><a href=\"#虚拟机-模拟硬件运行的计算机程序\" class=\"headerlink\" title=\"虚拟机  模拟硬件运行的计算机程序\"></a>虚拟机 模拟硬件运行的计算机程序</h4><p>“虚拟机”是计算机科学家杰拉尔德·波佩克（Gerald Popek）和罗伯特·戈德堡(Robert Goldberg)在1974年引入的一个概念,它最初表示的是”实体机的一种独立有效的复制品”,即各种指令的一种复制品.实体机是实在的硬件,由硅芯片和电线之类的东西组成,我们称它为A.而虚拟机是运行在另一台实体机B上的计算机程序,它能完美地模拟硬件A:速度可能会慢点,毕竟它要首先保障自己硬件上的基本操作有效运行,才能组织起硬件A上的那些操作,但的确都是同样的程序.如果你写了一个在硬件A上运行的程序,那么硬件B在运行模拟硬件A的虚拟机时,该程序应该能在硬件B上畅通无阻地运行.</p><p>Java虚拟机(Java Virtual Machine，即JVM)已成为当今最流行的一种虚拟机,这是我们扩展虚拟机概念的又一个原因.Java虚拟机不是对任何一种实体硬件机器的模仿,它只作为软件机而存在,比较像一个操作系统.</p><p>只要有一个大块头的硬件,在里面安装无数可塑可调的”记忆”盒子或者寄存器,把需要的指令放进这些记忆盒子里,让它们运行,这样你就把这个大块头的硬件变成了你想要的任何一种计算机.</p><p>在面对”说法语的人的大脑之间的相似性”这个问题时,排除解剖学上那些显著的差异,也许利用虚拟机的例子能为我们展示出一种最好的解释:所有说法语的人都具备某种版本的法语虚拟机,它藏身于他们大脑数以亿计的寄存器中,是一套由细微的习性和连锁装置构成的系统.</p><p>至少我们找到了一种方法,它能够清楚地道出”具有数万亿活动部件的计算机,它的那种高等能力到底是什么”,而无需动用神奇组织.</p><h4 id=\"算法-有效解决问题的策略机制\"><a href=\"#算法-有效解决问题的策略机制\" class=\"headerlink\" title=\"算法   有效解决问题的策略机制\"></a>算法 有效解决问题的策略机制</h4><p>算法是一种特定类型的形式步骤,只要可以”运行”或者开始具现化,它就能合乎逻辑地产生特定类型的结果.</p><p>算法的概念有这样三个至关重要的特征,其中每一个总结起来都有些难度</p><ol><li><p>底层中立:不管你用的是哪种符号体系,也不管你用的是铅笔还是钢笔,纸张或是羊皮卷,霓虹灯或者空中文字,它们都不会影响到你运算长除法的过程.运算程序依据的是逻辑结构,各种物质材料的因果力量也是能为运算保驾护航,但它们不直接参与运算.</p></li><li><p>潜在无头脑:过程的整体设计可以非常华丽,结果也可以十分耀眼,但算法的各个既成步骤,包括步骤之间的过渡却出奇地简单.有多简单?一个听话的白痴或者是一个简单的机械装置就能执行.</p></li><li><p>结果又保障:不管什么样的算法,只要不出意外,它就能每次都按照同样的步骤运作.一种算法就是一份简单的、不易有出入的食谱.</p></li></ol><p>显而易见,计算机就是靠这些特点成就的.每一种计算机程序都是一套算法:根本的组成元素是一些简单的步骤,它们的运行过程惊人地可靠,而运行机制却十分简单.</p><h4 id=\"让电梯实现自动控制-机器取代人类的逻辑\"><a href=\"#让电梯实现自动控制-机器取代人类的逻辑\" class=\"headerlink\" title=\"让电梯实现自动控制   机器取代人类的逻辑\"></a>让电梯实现自动控制 机器取代人类的逻辑</h4><p>机器既不像人类那样,能够逐字逐句地把规则保存在大脑中,然后随时查阅那些规则从而指导自己行动;也不同于那些行星,总是能不紧不慢地”按照”设定好的轨道运行.有时,通过不断训练一些显性规则就会内化或者变成一种惯例,我们甚至都忘记了它们,不自觉地就把它们丢弃了.</p><p>植入到源代码中的那些注释可以帮助程序员们去理解软件中相互啮合的各个部分的意图,但是,在我们为了方便描绘人类大脑所创作出的哪些硬件、固件和软件中,它们却并不出现.自然选择在我们的大脑中安装的那些功能结构就像是一些没有注释的代码,这些功能是有目的的,但由于代码并没有对结构的目的有所注释，大脑也就无从理解这些意图了.</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>今天,计算机无疑已经成为了我们最有力的思考工具,这不是因为它们承担起了单调繁重的苦差事,解放了智力劳动,而且,计算机科学家们发明出的许多概念也凭借着自身的实力成为了极好的思考工具.</p>","more":"<h4 id=\"计算机施展魔法的7个秘密-部分之和大于总体的最好实例\"><a href=\"#计算机施展魔法的7个秘密-部分之和大于总体的最好实例\" class=\"headerlink\" title=\"计算机施展魔法的7个秘密  部分之和大于总体的最好实例\"></a>计算机施展魔法的7个秘密 部分之和大于总体的最好实例</h4><p>秘密1 发挥能力,无需理解力:有些东西-=如一台寄存器机–它能完成精密的运算,但无需理解自己在做什么.</p><p>秘密2 寄存器中的数字会代表什么取决于我们所编写的是什么样的程序.</p><p>秘密3 寄存器中的数字可以表示任何事物,这说明,寄存器原则是可以处理任何事物,它们可以”识别”所有用数字(包括用一个数字或是一系列数字)表示的图案或特征.</p><p>秘密4 既然一个数字可以表示任何事物,那么它就一定能表示一条指令或是一个地址.</p><p>秘密5 所有可行的程序都能由一个单独的数字只带,都可以被看作是一串指令,等待通用万能机去执行.</p><p>秘密6 自图灵的假想纸带机之后,计算机所有方面的改善,提高的都只是运算速度.</p><p>秘密7 没有再多的秘密了!</p><p>也许计算机最美妙的地方就是,它由各部分(操作)简单地组合而成,而各部分本身也很简单地组合,简单到没有什么地方是无法给出解释的.这里没有仙气,没有”形态共振”,没有无形的力场,没有未知的物理定律,也没有那些神奇的组织.要知道,即使你用计算机成功地模拟出一些情景,完成这一切的也只是一些算术运算而已.</p><h4 id=\"虚拟机-模拟硬件运行的计算机程序\"><a href=\"#虚拟机-模拟硬件运行的计算机程序\" class=\"headerlink\" title=\"虚拟机  模拟硬件运行的计算机程序\"></a>虚拟机 模拟硬件运行的计算机程序</h4><p>“虚拟机”是计算机科学家杰拉尔德·波佩克（Gerald Popek）和罗伯特·戈德堡(Robert Goldberg)在1974年引入的一个概念,它最初表示的是”实体机的一种独立有效的复制品”,即各种指令的一种复制品.实体机是实在的硬件,由硅芯片和电线之类的东西组成,我们称它为A.而虚拟机是运行在另一台实体机B上的计算机程序,它能完美地模拟硬件A:速度可能会慢点,毕竟它要首先保障自己硬件上的基本操作有效运行,才能组织起硬件A上的那些操作,但的确都是同样的程序.如果你写了一个在硬件A上运行的程序,那么硬件B在运行模拟硬件A的虚拟机时,该程序应该能在硬件B上畅通无阻地运行.</p><p>Java虚拟机(Java Virtual Machine，即JVM)已成为当今最流行的一种虚拟机,这是我们扩展虚拟机概念的又一个原因.Java虚拟机不是对任何一种实体硬件机器的模仿,它只作为软件机而存在,比较像一个操作系统.</p><p>只要有一个大块头的硬件,在里面安装无数可塑可调的”记忆”盒子或者寄存器,把需要的指令放进这些记忆盒子里,让它们运行,这样你就把这个大块头的硬件变成了你想要的任何一种计算机.</p><p>在面对”说法语的人的大脑之间的相似性”这个问题时,排除解剖学上那些显著的差异,也许利用虚拟机的例子能为我们展示出一种最好的解释:所有说法语的人都具备某种版本的法语虚拟机,它藏身于他们大脑数以亿计的寄存器中,是一套由细微的习性和连锁装置构成的系统.</p><p>至少我们找到了一种方法,它能够清楚地道出”具有数万亿活动部件的计算机,它的那种高等能力到底是什么”,而无需动用神奇组织.</p><h4 id=\"算法-有效解决问题的策略机制\"><a href=\"#算法-有效解决问题的策略机制\" class=\"headerlink\" title=\"算法   有效解决问题的策略机制\"></a>算法 有效解决问题的策略机制</h4><p>算法是一种特定类型的形式步骤,只要可以”运行”或者开始具现化,它就能合乎逻辑地产生特定类型的结果.</p><p>算法的概念有这样三个至关重要的特征,其中每一个总结起来都有些难度</p><ol><li><p>底层中立:不管你用的是哪种符号体系,也不管你用的是铅笔还是钢笔,纸张或是羊皮卷,霓虹灯或者空中文字,它们都不会影响到你运算长除法的过程.运算程序依据的是逻辑结构,各种物质材料的因果力量也是能为运算保驾护航,但它们不直接参与运算.</p></li><li><p>潜在无头脑:过程的整体设计可以非常华丽,结果也可以十分耀眼,但算法的各个既成步骤,包括步骤之间的过渡却出奇地简单.有多简单?一个听话的白痴或者是一个简单的机械装置就能执行.</p></li><li><p>结果又保障:不管什么样的算法,只要不出意外,它就能每次都按照同样的步骤运作.一种算法就是一份简单的、不易有出入的食谱.</p></li></ol><p>显而易见,计算机就是靠这些特点成就的.每一种计算机程序都是一套算法:根本的组成元素是一些简单的步骤,它们的运行过程惊人地可靠,而运行机制却十分简单.</p><h4 id=\"让电梯实现自动控制-机器取代人类的逻辑\"><a href=\"#让电梯实现自动控制-机器取代人类的逻辑\" class=\"headerlink\" title=\"让电梯实现自动控制   机器取代人类的逻辑\"></a>让电梯实现自动控制 机器取代人类的逻辑</h4><p>机器既不像人类那样,能够逐字逐句地把规则保存在大脑中,然后随时查阅那些规则从而指导自己行动;也不同于那些行星,总是能不紧不慢地”按照”设定好的轨道运行.有时,通过不断训练一些显性规则就会内化或者变成一种惯例,我们甚至都忘记了它们,不自觉地就把它们丢弃了.</p><p>植入到源代码中的那些注释可以帮助程序员们去理解软件中相互啮合的各个部分的意图,但是,在我们为了方便描绘人类大脑所创作出的哪些硬件、固件和软件中,它们却并不出现.自然选择在我们的大脑中安装的那些功能结构就像是一些没有注释的代码,这些功能是有目的的,但由于代码并没有对结构的目的有所注释，大脑也就无从理解这些意图了.</p><!-- rebuild by neat -->"},{"title":"随笔-断舍离","date":"2019-04-08T16:02:50.000Z","_content":"今天无意中在一个公众号看到有推荐这本<<断舍离>>的,看了一下,发现自己还是有必要去阅读一下的\n<!--more-->\n### 何为断舍离\n\n通过收拾家里的破烂儿,也整理内心中的破烂儿,让人生变得开心的方法.\n\n#### 断\n\n断绝想要进入自己家的不需要的东西\n\n* 购物是三思而后行\n* 不需要的东西就不接受\n* 只添置必需的物品\n\n#### 舍\n\n舍弃家里到处泛滥的破烂儿\n\n* 收拾没用的破烂儿\n* 卖掉/赠送物品\n* 缩小喜好的范围\n\n#### 离\n\n通过不断的段和舍,将不需要,不合适,不舒服换成需要,合适舒服,选择和当下的自己相称的物品,从而到达,脱离对物品的执念,处于游刃有余的自在的空间\n\n#### 断舍离的机制\n\n一种以\"物品和自己的关系\"为核心,取舍选择物品的技术.思考方式不是\"这东西还能用,所以要留下来\",而是\"我要用,所以它很必要\",主语永远都是自己.而时间轴永远都是现在,现在自己不需要的东西就必须放手,只选择必要的物品.实现对自己的深刻,彻底的了解,并接纳最真实的自己\n\n#### 断舍离和整理收纳的区别\n\n| 比较点 | 断舍离 | 整理收纳 |\n|:-----:|:-----:|:----:|\n| 前提 | 代谢替换 | 保管维持 |\n| 主角 | 自己 | 物品 |\n| 焦点 | 关系性 | 物品或自己或赠送物品的对象 |\n| 核心轴 | 感性,适宜,需要,合适,舒服 | 物质,可惜能用或不能用 |\n| 时间轴 | 现在,当下 | 过去,未来,曾经,今后 |\n| 意识 | 选择,决断 | 回避 |\n| 手续 | 少 | 多 |\n| 技术 | 不需要 | 需要 |\n| 收纳物 | 不需要 | 需要 |\n\n#### 断舍离的精髓\n\n先诊断出物品从你身上掠去了到少能量,然后通过筛选物品的行动,实现自我完善,这就是断舍离的精髓.\n\n#### 断舍离的境界\n\n| 境界 | 气场 | 描述 |\n|:-----:|:-----:|:----:|\n| 断舍离前 | 腐败 | 对物品的数量与质量没有自觉 |\n| 初级 | 停滞 | 意识到物品的数量与质量,判断是否需要直面对丢弃的迷惘 |\n| 中级 | 新陈代谢 | 快速判断物品是否必需,不会拿可惜当借口,习惯了果断与下狠心 |\n| 大师级 | 上升 | 致力于精挑细选,物尽其用,物品能用完,物品的舍弃降到最小程度,享受清爽与满足感 |\n","source":"_posts/随笔-断舍离.md","raw":"---\ntitle: 随笔-断舍离\ndate: 2019-04-09 00:02:50\ncategories: 随笔\ntags:\n - 随笔\n---\n今天无意中在一个公众号看到有推荐这本<<断舍离>>的,看了一下,发现自己还是有必要去阅读一下的\n<!--more-->\n### 何为断舍离\n\n通过收拾家里的破烂儿,也整理内心中的破烂儿,让人生变得开心的方法.\n\n#### 断\n\n断绝想要进入自己家的不需要的东西\n\n* 购物是三思而后行\n* 不需要的东西就不接受\n* 只添置必需的物品\n\n#### 舍\n\n舍弃家里到处泛滥的破烂儿\n\n* 收拾没用的破烂儿\n* 卖掉/赠送物品\n* 缩小喜好的范围\n\n#### 离\n\n通过不断的段和舍,将不需要,不合适,不舒服换成需要,合适舒服,选择和当下的自己相称的物品,从而到达,脱离对物品的执念,处于游刃有余的自在的空间\n\n#### 断舍离的机制\n\n一种以\"物品和自己的关系\"为核心,取舍选择物品的技术.思考方式不是\"这东西还能用,所以要留下来\",而是\"我要用,所以它很必要\",主语永远都是自己.而时间轴永远都是现在,现在自己不需要的东西就必须放手,只选择必要的物品.实现对自己的深刻,彻底的了解,并接纳最真实的自己\n\n#### 断舍离和整理收纳的区别\n\n| 比较点 | 断舍离 | 整理收纳 |\n|:-----:|:-----:|:----:|\n| 前提 | 代谢替换 | 保管维持 |\n| 主角 | 自己 | 物品 |\n| 焦点 | 关系性 | 物品或自己或赠送物品的对象 |\n| 核心轴 | 感性,适宜,需要,合适,舒服 | 物质,可惜能用或不能用 |\n| 时间轴 | 现在,当下 | 过去,未来,曾经,今后 |\n| 意识 | 选择,决断 | 回避 |\n| 手续 | 少 | 多 |\n| 技术 | 不需要 | 需要 |\n| 收纳物 | 不需要 | 需要 |\n\n#### 断舍离的精髓\n\n先诊断出物品从你身上掠去了到少能量,然后通过筛选物品的行动,实现自我完善,这就是断舍离的精髓.\n\n#### 断舍离的境界\n\n| 境界 | 气场 | 描述 |\n|:-----:|:-----:|:----:|\n| 断舍离前 | 腐败 | 对物品的数量与质量没有自觉 |\n| 初级 | 停滞 | 意识到物品的数量与质量,判断是否需要直面对丢弃的迷惘 |\n| 中级 | 新陈代谢 | 快速判断物品是否必需,不会拿可惜当借口,习惯了果断与下狠心 |\n| 大师级 | 上升 | 致力于精挑细选,物尽其用,物品能用完,物品的舍弃降到最小程度,享受清爽与满足感 |\n","slug":"随笔-断舍离","published":1,"updated":"2020-03-09T23:43:11.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7nej24x0070tkui8pr9ylyy","content":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>今天无意中在一个公众号看到有推荐这本&lt;&lt;断舍离&gt;&gt;的,看了一下,发现自己还是有必要去阅读一下的<br><a id=\"more\"></a></p><h3 id=\"何为断舍离\"><a href=\"#何为断舍离\" class=\"headerlink\" title=\"何为断舍离\"></a>何为断舍离</h3><p>通过收拾家里的破烂儿,也整理内心中的破烂儿,让人生变得开心的方法.</p><h4 id=\"断\"><a href=\"#断\" class=\"headerlink\" title=\"断\"></a>断</h4><p>断绝想要进入自己家的不需要的东西</p><ul><li>购物是三思而后行</li><li>不需要的东西就不接受</li><li>只添置必需的物品</li></ul><h4 id=\"舍\"><a href=\"#舍\" class=\"headerlink\" title=\"舍\"></a>舍</h4><p>舍弃家里到处泛滥的破烂儿</p><ul><li>收拾没用的破烂儿</li><li>卖掉/赠送物品</li><li>缩小喜好的范围</li></ul><h4 id=\"离\"><a href=\"#离\" class=\"headerlink\" title=\"离\"></a>离</h4><p>通过不断的段和舍,将不需要,不合适,不舒服换成需要,合适舒服,选择和当下的自己相称的物品,从而到达,脱离对物品的执念,处于游刃有余的自在的空间</p><h4 id=\"断舍离的机制\"><a href=\"#断舍离的机制\" class=\"headerlink\" title=\"断舍离的机制\"></a>断舍离的机制</h4><p>一种以”物品和自己的关系”为核心,取舍选择物品的技术.思考方式不是”这东西还能用,所以要留下来”,而是”我要用,所以它很必要”,主语永远都是自己.而时间轴永远都是现在,现在自己不需要的东西就必须放手,只选择必要的物品.实现对自己的深刻,彻底的了解,并接纳最真实的自己</p><h4 id=\"断舍离和整理收纳的区别\"><a href=\"#断舍离和整理收纳的区别\" class=\"headerlink\" title=\"断舍离和整理收纳的区别\"></a>断舍离和整理收纳的区别</h4><table><thead><tr><th style=\"text-align:center\">比较点</th><th style=\"text-align:center\">断舍离</th><th style=\"text-align:center\">整理收纳</th></tr></thead><tbody><tr><td style=\"text-align:center\">前提</td><td style=\"text-align:center\">代谢替换</td><td style=\"text-align:center\">保管维持</td></tr><tr><td style=\"text-align:center\">主角</td><td style=\"text-align:center\">自己</td><td style=\"text-align:center\">物品</td></tr><tr><td style=\"text-align:center\">焦点</td><td style=\"text-align:center\">关系性</td><td style=\"text-align:center\">物品或自己或赠送物品的对象</td></tr><tr><td style=\"text-align:center\">核心轴</td><td style=\"text-align:center\">感性,适宜,需要,合适,舒服</td><td style=\"text-align:center\">物质,可惜能用或不能用</td></tr><tr><td style=\"text-align:center\">时间轴</td><td style=\"text-align:center\">现在,当下</td><td style=\"text-align:center\">过去,未来,曾经,今后</td></tr><tr><td style=\"text-align:center\">意识</td><td style=\"text-align:center\">选择,决断</td><td style=\"text-align:center\">回避</td></tr><tr><td style=\"text-align:center\">手续</td><td style=\"text-align:center\">少</td><td style=\"text-align:center\">多</td></tr><tr><td style=\"text-align:center\">技术</td><td style=\"text-align:center\">不需要</td><td style=\"text-align:center\">需要</td></tr><tr><td style=\"text-align:center\">收纳物</td><td style=\"text-align:center\">不需要</td><td style=\"text-align:center\">需要</td></tr></tbody></table><h4 id=\"断舍离的精髓\"><a href=\"#断舍离的精髓\" class=\"headerlink\" title=\"断舍离的精髓\"></a>断舍离的精髓</h4><p>先诊断出物品从你身上掠去了到少能量,然后通过筛选物品的行动,实现自我完善,这就是断舍离的精髓.</p><h4 id=\"断舍离的境界\"><a href=\"#断舍离的境界\" class=\"headerlink\" title=\"断舍离的境界\"></a>断舍离的境界</h4><table><thead><tr><th style=\"text-align:center\">境界</th><th style=\"text-align:center\">气场</th><th style=\"text-align:center\">描述</th></tr></thead><tbody><tr><td style=\"text-align:center\">断舍离前</td><td style=\"text-align:center\">腐败</td><td style=\"text-align:center\">对物品的数量与质量没有自觉</td></tr><tr><td style=\"text-align:center\">初级</td><td style=\"text-align:center\">停滞</td><td style=\"text-align:center\">意识到物品的数量与质量,判断是否需要直面对丢弃的迷惘</td></tr><tr><td style=\"text-align:center\">中级</td><td style=\"text-align:center\">新陈代谢</td><td style=\"text-align:center\">快速判断物品是否必需,不会拿可惜当借口,习惯了果断与下狠心</td></tr><tr><td style=\"text-align:center\">大师级</td><td style=\"text-align:center\">上升</td><td style=\"text-align:center\">致力于精挑细选,物尽其用,物品能用完,物品的舍弃降到最小程度,享受清爽与满足感</td></tr></tbody></table><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Wed Mar 11 2020 22:11:25 GMT+0800 (香港标准时间) --><p>今天无意中在一个公众号看到有推荐这本&lt;&lt;断舍离&gt;&gt;的,看了一下,发现自己还是有必要去阅读一下的<br>","more":"</p><h3 id=\"何为断舍离\"><a href=\"#何为断舍离\" class=\"headerlink\" title=\"何为断舍离\"></a>何为断舍离</h3><p>通过收拾家里的破烂儿,也整理内心中的破烂儿,让人生变得开心的方法.</p><h4 id=\"断\"><a href=\"#断\" class=\"headerlink\" title=\"断\"></a>断</h4><p>断绝想要进入自己家的不需要的东西</p><ul><li>购物是三思而后行</li><li>不需要的东西就不接受</li><li>只添置必需的物品</li></ul><h4 id=\"舍\"><a href=\"#舍\" class=\"headerlink\" title=\"舍\"></a>舍</h4><p>舍弃家里到处泛滥的破烂儿</p><ul><li>收拾没用的破烂儿</li><li>卖掉/赠送物品</li><li>缩小喜好的范围</li></ul><h4 id=\"离\"><a href=\"#离\" class=\"headerlink\" title=\"离\"></a>离</h4><p>通过不断的段和舍,将不需要,不合适,不舒服换成需要,合适舒服,选择和当下的自己相称的物品,从而到达,脱离对物品的执念,处于游刃有余的自在的空间</p><h4 id=\"断舍离的机制\"><a href=\"#断舍离的机制\" class=\"headerlink\" title=\"断舍离的机制\"></a>断舍离的机制</h4><p>一种以”物品和自己的关系”为核心,取舍选择物品的技术.思考方式不是”这东西还能用,所以要留下来”,而是”我要用,所以它很必要”,主语永远都是自己.而时间轴永远都是现在,现在自己不需要的东西就必须放手,只选择必要的物品.实现对自己的深刻,彻底的了解,并接纳最真实的自己</p><h4 id=\"断舍离和整理收纳的区别\"><a href=\"#断舍离和整理收纳的区别\" class=\"headerlink\" title=\"断舍离和整理收纳的区别\"></a>断舍离和整理收纳的区别</h4><table><thead><tr><th style=\"text-align:center\">比较点</th><th style=\"text-align:center\">断舍离</th><th style=\"text-align:center\">整理收纳</th></tr></thead><tbody><tr><td style=\"text-align:center\">前提</td><td style=\"text-align:center\">代谢替换</td><td style=\"text-align:center\">保管维持</td></tr><tr><td style=\"text-align:center\">主角</td><td style=\"text-align:center\">自己</td><td style=\"text-align:center\">物品</td></tr><tr><td style=\"text-align:center\">焦点</td><td style=\"text-align:center\">关系性</td><td style=\"text-align:center\">物品或自己或赠送物品的对象</td></tr><tr><td style=\"text-align:center\">核心轴</td><td style=\"text-align:center\">感性,适宜,需要,合适,舒服</td><td style=\"text-align:center\">物质,可惜能用或不能用</td></tr><tr><td style=\"text-align:center\">时间轴</td><td style=\"text-align:center\">现在,当下</td><td style=\"text-align:center\">过去,未来,曾经,今后</td></tr><tr><td style=\"text-align:center\">意识</td><td style=\"text-align:center\">选择,决断</td><td style=\"text-align:center\">回避</td></tr><tr><td style=\"text-align:center\">手续</td><td style=\"text-align:center\">少</td><td style=\"text-align:center\">多</td></tr><tr><td style=\"text-align:center\">技术</td><td style=\"text-align:center\">不需要</td><td style=\"text-align:center\">需要</td></tr><tr><td style=\"text-align:center\">收纳物</td><td style=\"text-align:center\">不需要</td><td style=\"text-align:center\">需要</td></tr></tbody></table><h4 id=\"断舍离的精髓\"><a href=\"#断舍离的精髓\" class=\"headerlink\" title=\"断舍离的精髓\"></a>断舍离的精髓</h4><p>先诊断出物品从你身上掠去了到少能量,然后通过筛选物品的行动,实现自我完善,这就是断舍离的精髓.</p><h4 id=\"断舍离的境界\"><a href=\"#断舍离的境界\" class=\"headerlink\" title=\"断舍离的境界\"></a>断舍离的境界</h4><table><thead><tr><th style=\"text-align:center\">境界</th><th style=\"text-align:center\">气场</th><th style=\"text-align:center\">描述</th></tr></thead><tbody><tr><td style=\"text-align:center\">断舍离前</td><td style=\"text-align:center\">腐败</td><td style=\"text-align:center\">对物品的数量与质量没有自觉</td></tr><tr><td style=\"text-align:center\">初级</td><td style=\"text-align:center\">停滞</td><td style=\"text-align:center\">意识到物品的数量与质量,判断是否需要直面对丢弃的迷惘</td></tr><tr><td style=\"text-align:center\">中级</td><td style=\"text-align:center\">新陈代谢</td><td style=\"text-align:center\">快速判断物品是否必需,不会拿可惜当借口,习惯了果断与下狠心</td></tr><tr><td style=\"text-align:center\">大师级</td><td style=\"text-align:center\">上升</td><td style=\"text-align:center\">致力于精挑细选,物尽其用,物品能用完,物品的舍弃降到最小程度,享受清爽与满足感</td></tr></tbody></table><!-- rebuild by neat -->"}],"PostAsset":[],"PostCategory":[{"post_id":"ck7nej1xv0000tkuispth4lbk","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23f003ztkui4vabztfz"},{"post_id":"ck7nej1xz0001tkuio4yqw893","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23h0043tkuia338alio"},{"post_id":"ck7nej1y00002tkuimai9w67u","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23j0047tkui2o3sqvdn"},{"post_id":"ck7nej1y20003tkui786lhrn7","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23k004atkuivyaowmvp"},{"post_id":"ck7nej1y20004tkuiy9kap0rp","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23l004dtkui73t7x0bm"},{"post_id":"ck7nej1y30005tkui7852ro16","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23n004gtkui795dg6ql"},{"post_id":"ck7nej1y40006tkui4ts8igjg","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23o004jtkuiwxbue8ta"},{"post_id":"ck7nej1y50007tkuivwblgglm","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23t004mtkuidy2z67y4"},{"post_id":"ck7nej1y60008tkui4jcritch","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23u004ptkui8eges7wa"},{"post_id":"ck7nej1y60009tkuiy3q3g7ok","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23v004stkuijon59kb2"},{"post_id":"ck7nej1y8000atkuitegndqma","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23w004vtkuing11kcqs"},{"post_id":"ck7nej1y9000btkuidqild4s4","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23x004ytkuilbrww44m"},{"post_id":"ck7nej1ya000ctkuiinu0t3fu","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej23y0051tkuiig7egyd2"},{"post_id":"ck7nej1yb000dtkuij6w5xu49","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej2400054tkuihen9znkj"},{"post_id":"ck7nej1yb000etkuik20fcr43","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej2410057tkuisyx3fu6i"},{"post_id":"ck7nej1yc000ftkuinkewywuo","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej243005atkuikpse78c2"},{"post_id":"ck7nej1yd000gtkuisej3h2gy","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej244005dtkui25jvlxy2"},{"post_id":"ck7nej1ye000htkuipbdglwbv","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej247005gtkui5uxj0pc6"},{"post_id":"ck7nej1yf000itkuiixg14ixs","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej248005jtkuig7l18ebx"},{"post_id":"ck7nej1yg000jtkui66u02qdf","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej249005mtkuiq54f443t"},{"post_id":"ck7nej1yg000ktkuiax33vzps","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej24a005ptkuifq8qjtm1"},{"post_id":"ck7nej1yh000ltkui6f15ubc4","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej24b005stkuials3o64f"},{"post_id":"ck7nej1yh000mtkui7cseu8t3","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej24d005vtkuie7e6inyg"},{"post_id":"ck7nej1yi000ntkuimos36u6z","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej24e005ytkuie81nhhlc"},{"post_id":"ck7nej1yj000otkuisezrsxoz","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej24g0061tkuizvvdeis1"},{"post_id":"ck7nej1yj000ptkuimakoysv8","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej24h0064tkuitlu7krct"},{"post_id":"ck7nej1yk000qtkuih808vlfv","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej24j0067tkuina3tutt6"},{"post_id":"ck7nej1yk000rtkui7qcsbphm","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej24k006atkui7d8zjc0q"},{"post_id":"ck7nej1yl000stkuirisr7nfr","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej24l006dtkuia1ouf13k"},{"post_id":"ck7nej1ym000ttkuin35lfewt","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej24n006gtkuissaf0sku"},{"post_id":"ck7nej1ym000utkuirj7uhcdo","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej24o006jtkui7y7p54cc"},{"post_id":"ck7nej1yn000vtkuiq5d5gp5f","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej24p006mtkuivnoqge9v"},{"post_id":"ck7nej1yo000wtkuigrkyah4v","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej24q006ptkui41vszpud"},{"post_id":"ck7nej23e003xtkui7y44tgpx","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej25p0084tkuipd16786z"},{"post_id":"ck7nej23g0041tkui2exglldk","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej25p0086tkui4pjq24pz"},{"post_id":"ck7nej23i0045tkuiwn921v2n","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej25q0088tkuip88xul22"},{"post_id":"ck7nej23j0048tkuisirz4aub","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej25r008ctkuih3x76vat"},{"post_id":"ck7nej23l004btkuihet5kl0i","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej25r008etkuiruwhcczp"},{"post_id":"ck7nej23m004etkuidq08skkm","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej25s008htkui70lnctgq"},{"post_id":"ck7nej23o004ktkuiokniaws1","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej25t008itkui7gsumzxd"},{"post_id":"ck7nej23u004ntkui23bnexgm","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej25t008ltkuit9yfhtlo"},{"post_id":"ck7nej2420058tkuivrpgs4jl","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej25u008mtkuirubwgid6"},{"post_id":"ck7nej247005htkuijk196kn0","category_id":"ck7nej1z8000xtkuirokyx8w5","_id":"ck7nej25v008ptkui1ywza80g"},{"post_id":"ck7nej24b005qtkuit7izrzjf","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej25v008qtkuinbxn9d51"},{"post_id":"ck7nej24o006ktkuivm39hycg","category_id":"ck7nej1zv001ntkuio9p43whh","_id":"ck7nej25w008ttkuigb7dysbx"},{"post_id":"ck7nej23n004htkuivmgzqdwf","category_id":"ck7nej25p0082tkuixzhmbsve","_id":"ck7nej27u00axtkuiung8sh0o"},{"post_id":"ck7nej23v004qtkui2sqdhqq3","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej27u00aztkuipaihyuzp"},{"post_id":"ck7nej23w004ttkuismtznm5c","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej27v00b1tkuirl9yfubt"},{"post_id":"ck7nej23x004wtkuis5incfzm","category_id":"ck7nej25p0082tkuixzhmbsve","_id":"ck7nej27v00b3tkui0x0cr05c"},{"post_id":"ck7nej23y004ztkuil49a6wkt","category_id":"ck7nej25p0082tkuixzhmbsve","_id":"ck7nej27w00b5tkuifevqh2vj"},{"post_id":"ck7nej23z0052tkui9h79u4sh","category_id":"ck7nej25p0082tkuixzhmbsve","_id":"ck7nej27w00b7tkui6kl6iitt"},{"post_id":"ck7nej2410055tkui0a2tqoj7","category_id":"ck7nej25p0082tkuixzhmbsve","_id":"ck7nej27w00b9tkuif71navne"},{"post_id":"ck7nej244005btkui8784t9v5","category_id":"ck7nej25p0082tkuixzhmbsve","_id":"ck7nej27x00bbtkuiw68yfk5b"},{"post_id":"ck7nej246005etkuie4io8u3h","category_id":"ck7nej25y008ytkui3nu6exj4","_id":"ck7nej27x00bdtkui9831cotx"},{"post_id":"ck7nej248005ktkuirx6si21a","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej27y00bftkui6j3fqfnj"},{"post_id":"ck7nej24a005ntkui0jcs8v8n","category_id":"ck7nej25z0092tkuim580edey","_id":"ck7nej27y00bhtkuidywqko11"},{"post_id":"ck7nej24c005ttkuinryc33r1","category_id":"ck7nej25p0082tkuixzhmbsve","_id":"ck7nej27y00bjtkuiaa0x8nqd"},{"post_id":"ck7nej24d005wtkui4h84i0rg","category_id":"ck7nej2610096tkuijc9p74ww","_id":"ck7nej27z00bltkuimv5cyyky"},{"post_id":"ck7nej24f005ztkuij7jg8qkc","category_id":"ck7nej25y008ytkui3nu6exj4","_id":"ck7nej27z00bntkuiquee5mfe"},{"post_id":"ck7nej24g0062tkuin1f7pjfp","category_id":"ck7nej2610096tkuijc9p74ww","_id":"ck7nej28000bptkui2ec187ly"},{"post_id":"ck7nej24h0065tkuigrieldif","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej28000brtkuil02t72j5"},{"post_id":"ck7nej24j0068tkui47k32aue","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej28000bttkuig4pcnt02"},{"post_id":"ck7nej24k006btkui4by8t2tv","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej28100bvtkuityc8v8se"},{"post_id":"ck7nej24l006etkuirwwqg924","category_id":"ck7nej25y008ytkui3nu6exj4","_id":"ck7nej28100bxtkui3k4zgsox"},{"post_id":"ck7nej24n006htkuijrm5lih1","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej28100bztkui263bkej7"},{"post_id":"ck7nej24p006ntkui7t9ejh1j","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej28200c1tkuie3hd1b5g"},{"post_id":"ck7nej24r006qtkuizzdf02sk","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej28200c3tkuielq64be8"},{"post_id":"ck7nej24s006stkui9ayf8r03","category_id":"ck7nej25y008ytkui3nu6exj4","_id":"ck7nej28200c5tkuic0aelpvd"},{"post_id":"ck7nej24t006utkuix6c4t24y","category_id":"ck7nej26a009stkuiurc5za4a","_id":"ck7nej28300c7tkuigi415lk1"},{"post_id":"ck7nej24u006wtkuigd30j8ej","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej28300c9tkui29kxwj5x"},{"post_id":"ck7nej24w006ytkuiqi8uymdv","category_id":"ck7nej25q008atkuil9nna7p0","_id":"ck7nej28400cbtkuifrfi1b3w"},{"post_id":"ck7nej24x0070tkui8pr9ylyy","category_id":"ck7nej25y008ytkui3nu6exj4","_id":"ck7nej28400cdtkuir79ijyri"}],"PostTag":[{"post_id":"ck7nej1xv0000tkuispth4lbk","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej23f003ytkuilk5m6ecy"},{"post_id":"ck7nej1xv0000tkuispth4lbk","tag_id":"ck7nej1zh0010tkuidf9h51d9","_id":"ck7nej23g0042tkui0qs9u5du"},{"post_id":"ck7nej1xv0000tkuispth4lbk","tag_id":"ck7nej1zm0012tkuizizy62bl","_id":"ck7nej23j0046tkui57037ggu"},{"post_id":"ck7nej1xz0001tkuio4yqw893","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej23k0049tkuiqm21y4lk"},{"post_id":"ck7nej1xz0001tkuio4yqw893","tag_id":"ck7nej1zo0016tkui8fiw5mpy","_id":"ck7nej23l004ctkui8wrwzitv"},{"post_id":"ck7nej1y00002tkuimai9w67u","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej23n004ftkuihzkjiai2"},{"post_id":"ck7nej1y00002tkuimai9w67u","tag_id":"ck7nej1zq001atkui6xw4xq8j","_id":"ck7nej23o004itkuib66rljxq"},{"post_id":"ck7nej1y20003tkui786lhrn7","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej23t004ltkuiupxtmdil"},{"post_id":"ck7nej1y20003tkui786lhrn7","tag_id":"ck7nej1zr001etkui4vnrweoz","_id":"ck7nej23u004otkuiusta3ahc"},{"post_id":"ck7nej1y20004tkuiy9kap0rp","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej23v004rtkuiqzkn51kg"},{"post_id":"ck7nej1y20004tkuiy9kap0rp","tag_id":"ck7nej1zt001itkuimrebf743","_id":"ck7nej23w004utkuikc8mnthb"},{"post_id":"ck7nej1y30005tkui7852ro16","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej23x004xtkuiqy6b90zr"},{"post_id":"ck7nej1y30005tkui7852ro16","tag_id":"ck7nej1zv001mtkuini04s14b","_id":"ck7nej23y0050tkuio7bh9mpv"},{"post_id":"ck7nej1y40006tkui4ts8igjg","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej2400053tkuibvnn7k0o"},{"post_id":"ck7nej1y40006tkui4ts8igjg","tag_id":"ck7nej1zw001qtkuiqo6g080z","_id":"ck7nej2410056tkui2elpw5gm"},{"post_id":"ck7nej1y50007tkuivwblgglm","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej2430059tkuiish913mg"},{"post_id":"ck7nej1y50007tkuivwblgglm","tag_id":"ck7nej1zy001utkuifxvmqbyx","_id":"ck7nej244005ctkuigc6hp1m2"},{"post_id":"ck7nej1y60008tkui4jcritch","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej246005ftkuiw28ljskv"},{"post_id":"ck7nej1y60008tkui4jcritch","tag_id":"ck7nej200001ztkuiu2vdxjym","_id":"ck7nej248005itkui178w5t7w"},{"post_id":"ck7nej1y60009tkuiy3q3g7ok","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej249005ltkui84ye82wl"},{"post_id":"ck7nej1y60009tkuiy3q3g7ok","tag_id":"ck7nej2020023tkuievr1e3kt","_id":"ck7nej24a005otkui9aeeh0ty"},{"post_id":"ck7nej1y8000atkuitegndqma","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej24b005rtkuivtlwsjex"},{"post_id":"ck7nej1y8000atkuitegndqma","tag_id":"ck7nej2040027tkuiqtdsf4gt","_id":"ck7nej24d005utkuijpthkb3i"},{"post_id":"ck7nej1y9000btkuidqild4s4","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej24e005xtkuiq55cshu4"},{"post_id":"ck7nej1y9000btkuidqild4s4","tag_id":"ck7nej1zm0012tkuizizy62bl","_id":"ck7nej24f0060tkui2940rb2a"},{"post_id":"ck7nej1ya000ctkuiinu0t3fu","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej24h0063tkui6w2j85uh"},{"post_id":"ck7nej1ya000ctkuiinu0t3fu","tag_id":"ck7nej208002ftkuigov0bisu","_id":"ck7nej24j0066tkui1emnf2f0"},{"post_id":"ck7nej1yb000dtkuij6w5xu49","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej24k0069tkuiijyyvoxp"},{"post_id":"ck7nej1yb000dtkuij6w5xu49","tag_id":"ck7nej209002jtkui8zshjxbn","_id":"ck7nej24l006ctkuif5486v54"},{"post_id":"ck7nej1yb000etkuik20fcr43","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej24n006ftkuiwyiodwvc"},{"post_id":"ck7nej1yb000etkuik20fcr43","tag_id":"ck7nej209002jtkui8zshjxbn","_id":"ck7nej24o006itkuixo2ahao7"},{"post_id":"ck7nej1yc000ftkuinkewywuo","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej24p006ltkuiqz3ro6jq"},{"post_id":"ck7nej1yc000ftkuinkewywuo","tag_id":"ck7nej209002jtkui8zshjxbn","_id":"ck7nej24q006otkuitvsm9926"},{"post_id":"ck7nej1yc000ftkuinkewywuo","tag_id":"ck7nej20d002rtkuir01xybf1","_id":"ck7nej24s006rtkuizcd4uz8e"},{"post_id":"ck7nej1yc000ftkuinkewywuo","tag_id":"ck7nej20d002stkuixt9eknxw","_id":"ck7nej24t006ttkuihuy1wwps"},{"post_id":"ck7nej1yd000gtkuisej3h2gy","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej24u006vtkuig3bjfw6s"},{"post_id":"ck7nej1yd000gtkuisej3h2gy","tag_id":"ck7nej209002jtkui8zshjxbn","_id":"ck7nej24w006xtkui92k7n4ab"},{"post_id":"ck7nej1ye000htkuipbdglwbv","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej24x006ztkuiomgoh0z9"},{"post_id":"ck7nej1ye000htkuipbdglwbv","tag_id":"ck7nej209002jtkui8zshjxbn","_id":"ck7nej24y0071tkuitli7e07v"},{"post_id":"ck7nej1ye000htkuipbdglwbv","tag_id":"ck7nej20h002xtkuiffsgskph","_id":"ck7nej24y0072tkui180p7a1e"},{"post_id":"ck7nej1ye000htkuipbdglwbv","tag_id":"ck7nej20i002ytkuipdxrbevg","_id":"ck7nej24y0073tkui7qml323p"},{"post_id":"ck7nej1yf000itkuiixg14ixs","tag_id":"ck7nej20i002ztkui7htyfejv","_id":"ck7nej24y0074tkuizevayb7e"},{"post_id":"ck7nej1yf000itkuiixg14ixs","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej24y0075tkuisctai1mh"},{"post_id":"ck7nej1yg000jtkui66u02qdf","tag_id":"ck7nej20j0031tkuiaw8mlhbx","_id":"ck7nej24z0076tkuic265sirf"},{"post_id":"ck7nej1yg000jtkui66u02qdf","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej24z0077tkui2iqhr036"},{"post_id":"ck7nej1yg000ktkuiax33vzps","tag_id":"ck7nej20j0033tkuivffragfy","_id":"ck7nej24z0078tkuieg93l8qn"},{"post_id":"ck7nej1yg000ktkuiax33vzps","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej24z0079tkuiiiddize7"},{"post_id":"ck7nej1yh000ltkui6f15ubc4","tag_id":"ck7nej20d002stkuixt9eknxw","_id":"ck7nej24z007atkui3qsmyub4"},{"post_id":"ck7nej1yh000ltkui6f15ubc4","tag_id":"ck7nej20l0036tkui5cblmyzq","_id":"ck7nej250007btkui95e1c9rv"},{"post_id":"ck7nej1yh000ltkui6f15ubc4","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej250007ctkuik8urpw6z"},{"post_id":"ck7nej1yh000mtkui7cseu8t3","tag_id":"ck7nej20l0038tkuitu4zldul","_id":"ck7nej250007dtkuidg4piguo"},{"post_id":"ck7nej1yh000mtkui7cseu8t3","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej250007etkuiexh1o30z"},{"post_id":"ck7nej1yi000ntkuimos36u6z","tag_id":"ck7nej20i002ztkui7htyfejv","_id":"ck7nej250007ftkuihf4yzfmw"},{"post_id":"ck7nej1yi000ntkuimos36u6z","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej250007gtkui56lwy93o"},{"post_id":"ck7nej1yj000otkuisezrsxoz","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej251007htkui50jcashd"},{"post_id":"ck7nej1yj000otkuisezrsxoz","tag_id":"ck7nej20i002ztkui7htyfejv","_id":"ck7nej251007itkuirlokg287"},{"post_id":"ck7nej1yj000ptkuimakoysv8","tag_id":"ck7nej20o003etkuion7a8dxg","_id":"ck7nej251007jtkui0wop2bm8"},{"post_id":"ck7nej1yj000ptkuimakoysv8","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej251007ktkuii5wix98c"},{"post_id":"ck7nej1yk000qtkuih808vlfv","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej251007ltkui3pa9m31c"},{"post_id":"ck7nej1yk000qtkuih808vlfv","tag_id":"ck7nej20p003htkuit8pq0hso","_id":"ck7nej251007mtkuivoscebod"},{"post_id":"ck7nej1yk000rtkui7qcsbphm","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej251007ntkuij02740ml"},{"post_id":"ck7nej1yk000rtkui7qcsbphm","tag_id":"ck7nej20q003jtkui0z0oomih","_id":"ck7nej252007otkuimb7ydg3j"},{"post_id":"ck7nej1yl000stkuirisr7nfr","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej252007ptkui77scec4b"},{"post_id":"ck7nej1yl000stkuirisr7nfr","tag_id":"ck7nej20r003ltkui4t22btyw","_id":"ck7nej252007qtkuitt5phy12"},{"post_id":"ck7nej1ym000ttkuin35lfewt","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej252007rtkuibn08ugk1"},{"post_id":"ck7nej1ym000ttkuin35lfewt","tag_id":"ck7nej20r003ntkuilfglg1du","_id":"ck7nej252007stkuiuy2j2jel"},{"post_id":"ck7nej1ym000utkuirj7uhcdo","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej252007ttkuiowru70y1"},{"post_id":"ck7nej1ym000utkuirj7uhcdo","tag_id":"ck7nej20s003ptkuipcnll3mb","_id":"ck7nej252007utkuitr8x8wk0"},{"post_id":"ck7nej1yn000vtkuiq5d5gp5f","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej253007vtkui1t4ky9xl"},{"post_id":"ck7nej1yn000vtkuiq5d5gp5f","tag_id":"ck7nej20t003rtkuiz4psr2yu","_id":"ck7nej253007wtkuic16w46pv"},{"post_id":"ck7nej1yo000wtkuigrkyah4v","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej253007xtkuik50cxo7l"},{"post_id":"ck7nej1yo000wtkuigrkyah4v","tag_id":"ck7nej20u003ttkuini1kdjtf","_id":"ck7nej253007ytkuilm8sy3k7"},{"post_id":"ck7nej1yo000wtkuigrkyah4v","tag_id":"ck7nej20u003utkuia8zv9gqj","_id":"ck7nej253007ztkui7cffy6th"},{"post_id":"ck7nej1yo000wtkuigrkyah4v","tag_id":"ck7nej20u003vtkui5wpju0k6","_id":"ck7nej2530080tkuigx390t0h"},{"post_id":"ck7nej23u004ntkui23bnexgm","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej25p0083tkuioyx100ba"},{"post_id":"ck7nej2420058tkuivrpgs4jl","tag_id":"ck7nej20i002ztkui7htyfejv","_id":"ck7nej25p0085tkuilttj71i2"},{"post_id":"ck7nej2420058tkuivrpgs4jl","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej25q0087tkui0eaz73ny"},{"post_id":"ck7nej24o006ktkuivm39hycg","tag_id":"ck7nej20i002ztkui7htyfejv","_id":"ck7nej25r008btkuiyukyt2gt"},{"post_id":"ck7nej24o006ktkuivm39hycg","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej25r008dtkuix9bd0l3w"},{"post_id":"ck7nej23e003xtkui7y44tgpx","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej27t00awtkuirygde8c0"},{"post_id":"ck7nej23e003xtkui7y44tgpx","tag_id":"ck7nej25o0081tkui5espdfc2","_id":"ck7nej27u00aytkuig6jpxd5q"},{"post_id":"ck7nej23g0041tkui2exglldk","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej27u00b0tkuiv29lkjey"},{"post_id":"ck7nej23g0041tkui2exglldk","tag_id":"ck7nej25q0089tkuifddgiu9e","_id":"ck7nej27v00b2tkuid08yoto1"},{"post_id":"ck7nej23i0045tkuiwn921v2n","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej27w00b4tkuiseisyylr"},{"post_id":"ck7nej23i0045tkuiwn921v2n","tag_id":"ck7nej25q0089tkuifddgiu9e","_id":"ck7nej27w00b6tkuib4wgb4bv"},{"post_id":"ck7nej23j0048tkuisirz4aub","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej27w00b8tkuid6odh5vv"},{"post_id":"ck7nej23j0048tkuisirz4aub","tag_id":"ck7nej25t008jtkuij1hl6zfs","_id":"ck7nej27x00batkuibbdv5am4"},{"post_id":"ck7nej23l004btkuihet5kl0i","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej27x00bctkuib7pc3pl9"},{"post_id":"ck7nej23l004btkuihet5kl0i","tag_id":"ck7nej25q0089tkuifddgiu9e","_id":"ck7nej27x00betkuiq4kmtpnr"},{"post_id":"ck7nej23m004etkuidq08skkm","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej27y00bgtkuidaqa7qtr"},{"post_id":"ck7nej23m004etkuidq08skkm","tag_id":"ck7nej25q0089tkuifddgiu9e","_id":"ck7nej27y00bitkui6l5bw54g"},{"post_id":"ck7nej23n004htkuivmgzqdwf","tag_id":"ck7nej25x008vtkuijove8yt3","_id":"ck7nej27y00bktkuiagzg4ibi"},{"post_id":"ck7nej23n004htkuivmgzqdwf","tag_id":"ck7nej25y008xtkuiasshbsb2","_id":"ck7nej27z00bmtkuiz3phavba"},{"post_id":"ck7nej23o004ktkuiokniaws1","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej27z00botkui0f0aml9a"},{"post_id":"ck7nej23o004ktkuiokniaws1","tag_id":"ck7nej25q0089tkuifddgiu9e","_id":"ck7nej28000bqtkuixpspykqw"},{"post_id":"ck7nej23v004qtkui2sqdhqq3","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28000bstkui8nzuav1l"},{"post_id":"ck7nej23v004qtkui2sqdhqq3","tag_id":"ck7nej2600093tkuiv9r6pyof","_id":"ck7nej28000butkui5di5gvht"},{"post_id":"ck7nej23w004ttkuismtznm5c","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28100bwtkui33utm0w6"},{"post_id":"ck7nej23w004ttkuismtznm5c","tag_id":"ck7nej2610097tkuioui7azp2","_id":"ck7nej28100bytkuimx89flrb"},{"post_id":"ck7nej23x004wtkuis5incfzm","tag_id":"ck7nej25x008vtkuijove8yt3","_id":"ck7nej28200c0tkuixp81yivx"},{"post_id":"ck7nej23x004wtkuis5incfzm","tag_id":"ck7nej263009btkuikjbd9jgq","_id":"ck7nej28200c2tkui1mkll1cd"},{"post_id":"ck7nej23y004ztkuil49a6wkt","tag_id":"ck7nej264009dtkuip4d16se3","_id":"ck7nej28200c4tkuimcoxtgqi"},{"post_id":"ck7nej23y004ztkuil49a6wkt","tag_id":"ck7nej25x008vtkuijove8yt3","_id":"ck7nej28300c6tkui98lzoxw9"},{"post_id":"ck7nej23z0052tkui9h79u4sh","tag_id":"ck7nej25x008vtkuijove8yt3","_id":"ck7nej28300c8tkuibfm9gxi8"},{"post_id":"ck7nej23z0052tkui9h79u4sh","tag_id":"ck7nej20q003jtkui0z0oomih","_id":"ck7nej28400catkui79pnve1f"},{"post_id":"ck7nej2410055tkui0a2tqoj7","tag_id":"ck7nej25x008vtkuijove8yt3","_id":"ck7nej28400cctkuiu8g752uz"},{"post_id":"ck7nej2410055tkui0a2tqoj7","tag_id":"ck7nej268009ltkui3zvzsvz9","_id":"ck7nej28400cetkuioixtmx7u"},{"post_id":"ck7nej244005btkui8784t9v5","tag_id":"ck7nej25x008vtkuijove8yt3","_id":"ck7nej28400cftkuilsygsm71"},{"post_id":"ck7nej244005btkui8784t9v5","tag_id":"ck7nej269009ptkuif6b89vd6","_id":"ck7nej28500cgtkui1iybdsip"},{"post_id":"ck7nej246005etkuie4io8u3h","tag_id":"ck7nej26a009rtkui0y13mubo","_id":"ck7nej28600chtkui9rhzal0i"},{"post_id":"ck7nej247005htkuijk196kn0","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej28600citkuictdl85h5"},{"post_id":"ck7nej247005htkuijk196kn0","tag_id":"ck7nej26b009ttkuivtyjadmc","_id":"ck7nej28600cjtkuizv0w8h2i"},{"post_id":"ck7nej248005ktkuirx6si21a","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28700cktkuidwt03gik"},{"post_id":"ck7nej248005ktkuirx6si21a","tag_id":"ck7nej26d009xtkuivsme5bd8","_id":"ck7nej28700cltkuivth9kqra"},{"post_id":"ck7nej24a005ntkui0jcs8v8n","tag_id":"ck7nej26e009ztkui4hjjor1v","_id":"ck7nej28700cmtkui01ifvtl7"},{"post_id":"ck7nej24b005qtkuit7izrzjf","tag_id":"ck7nej26e00a0tkuidx5p84vo","_id":"ck7nej28700cntkuiq3qbb58x"},{"post_id":"ck7nej24b005qtkuit7izrzjf","tag_id":"ck7nej209002htkui19z9tr4x","_id":"ck7nej28700cotkuirw8izw5a"},{"post_id":"ck7nej24c005ttkuinryc33r1","tag_id":"ck7nej25x008vtkuijove8yt3","_id":"ck7nej28800cptkuiyu3zhbbi"},{"post_id":"ck7nej24c005ttkuinryc33r1","tag_id":"ck7nej26f00a2tkui5lccb765","_id":"ck7nej28800cqtkui6y7dyo0j"},{"post_id":"ck7nej24d005wtkui4h84i0rg","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej28800crtkuiqoul4gqo"},{"post_id":"ck7nej24d005wtkui4h84i0rg","tag_id":"ck7nej26g00a3tkuipa07axe2","_id":"ck7nej28800cstkuiuikroiia"},{"post_id":"ck7nej24f005ztkuij7jg8qkc","tag_id":"ck7nej26a009rtkui0y13mubo","_id":"ck7nej28900cttkuinadvio4f"},{"post_id":"ck7nej24g0062tkuin1f7pjfp","tag_id":"ck7nej1zg000ytkuid68s6iw6","_id":"ck7nej28a00cutkuirm8r7rl2"},{"post_id":"ck7nej24g0062tkuin1f7pjfp","tag_id":"ck7nej26g00a3tkuipa07axe2","_id":"ck7nej28a00cvtkuiymwopjuj"},{"post_id":"ck7nej24h0065tkuigrieldif","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28a00cwtkuigylvp1vr"},{"post_id":"ck7nej24h0065tkuigrieldif","tag_id":"ck7nej26i00a7tkui32iinb77","_id":"ck7nej28b00cxtkuic0tmjmpm"},{"post_id":"ck7nej24h0065tkuigrieldif","tag_id":"ck7nej26j00a8tkui5ldqilqh","_id":"ck7nej28b00cytkui9131m3n7"},{"post_id":"ck7nej24j0068tkui47k32aue","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28b00cztkuivdwtc5zn"},{"post_id":"ck7nej24j0068tkui47k32aue","tag_id":"ck7nej26i00a7tkui32iinb77","_id":"ck7nej28b00d0tkuipgqbgvl2"},{"post_id":"ck7nej24j0068tkui47k32aue","tag_id":"ck7nej26j00a8tkui5ldqilqh","_id":"ck7nej28b00d1tkuiifpt9hof"},{"post_id":"ck7nej24k006btkui4by8t2tv","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28c00d2tkui3yjdzn0k"},{"post_id":"ck7nej24k006btkui4by8t2tv","tag_id":"ck7nej26l00adtkuilgbaa5qv","_id":"ck7nej28c00d3tkuigf3pagyn"},{"post_id":"ck7nej24l006etkuirwwqg924","tag_id":"ck7nej26a009rtkui0y13mubo","_id":"ck7nej28c00d4tkuianaj3vbv"},{"post_id":"ck7nej24n006htkuijrm5lih1","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28c00d5tkuifwdzrr1e"},{"post_id":"ck7nej24n006htkuijrm5lih1","tag_id":"ck7nej26l00adtkuilgbaa5qv","_id":"ck7nej28c00d6tkui40613k1h"},{"post_id":"ck7nej24p006ntkui7t9ejh1j","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28d00d7tkui20p6dvno"},{"post_id":"ck7nej24p006ntkui7t9ejh1j","tag_id":"ck7nej26i00a7tkui32iinb77","_id":"ck7nej28d00d8tkuigqq3h724"},{"post_id":"ck7nej24p006ntkui7t9ejh1j","tag_id":"ck7nej26j00a8tkui5ldqilqh","_id":"ck7nej28d00d9tkuionerv2c5"},{"post_id":"ck7nej24r006qtkuizzdf02sk","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28d00datkui1dkso5c4"},{"post_id":"ck7nej24r006qtkuizzdf02sk","tag_id":"ck7nej26i00a7tkui32iinb77","_id":"ck7nej28e00dbtkuicsigspff"},{"post_id":"ck7nej24r006qtkuizzdf02sk","tag_id":"ck7nej26j00a8tkui5ldqilqh","_id":"ck7nej28e00dctkuiwihns0om"},{"post_id":"ck7nej24s006stkui9ayf8r03","tag_id":"ck7nej26a009rtkui0y13mubo","_id":"ck7nej28e00ddtkui2kfm0joz"},{"post_id":"ck7nej24t006utkuix6c4t24y","tag_id":"ck7nej26f00a2tkui5lccb765","_id":"ck7nej28e00detkui6u9nrzwy"},{"post_id":"ck7nej24u006wtkuigd30j8ej","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28e00dftkuifft299re"},{"post_id":"ck7nej24u006wtkuigd30j8ej","tag_id":"ck7nej26i00a7tkui32iinb77","_id":"ck7nej28f00dgtkui4idu2q06"},{"post_id":"ck7nej24u006wtkuigd30j8ej","tag_id":"ck7nej26j00a8tkui5ldqilqh","_id":"ck7nej28f00dhtkui7ruribqp"},{"post_id":"ck7nej24w006ytkuiqi8uymdv","tag_id":"ck7nej25z0091tkuigaxljtru","_id":"ck7nej28f00ditkuisq8sqqt7"},{"post_id":"ck7nej24w006ytkuiqi8uymdv","tag_id":"ck7nej26i00a7tkui32iinb77","_id":"ck7nej28f00djtkuitab616pt"},{"post_id":"ck7nej24w006ytkuiqi8uymdv","tag_id":"ck7nej26j00a8tkui5ldqilqh","_id":"ck7nej28f00dktkuiihy9h02a"},{"post_id":"ck7nej24x0070tkui8pr9ylyy","tag_id":"ck7nej26a009rtkui0y13mubo","_id":"ck7nej28g00dltkui4amwdmud"}],"Tag":[{"name":".Net Core","_id":"ck7nej1zg000ytkuid68s6iw6"},{"name":"Cookies","_id":"ck7nej1zh0010tkuidf9h51d9"},{"name":"Session","_id":"ck7nej1zm0012tkuizizy62bl"},{"name":"REST API","_id":"ck7nej1zo0016tkui8fiw5mpy"},{"name":"SignalR","_id":"ck7nej1zq001atkui6xw4xq8j"},{"name":"Response","_id":"ck7nej1zr001etkui4vnrweoz"},{"name":"Web API","_id":"ck7nej1zt001itkuimrebf743"},{"name":"Url 重写","_id":"ck7nej1zv001mtkuini04s14b"},{"name":"Middleware","_id":"ck7nej1zw001qtkuiqo6g080z"},{"name":"Gzip","_id":"ck7nej1zy001utkuifxvmqbyx"},{"name":"WebSocket","_id":"ck7nej200001ztkuiu2vdxjym"},{"name":"Exception","_id":"ck7nej2020023tkuievr1e3kt"},{"name":"Model","_id":"ck7nej2040027tkuiqtdsf4gt"},{"name":"Filter","_id":"ck7nej208002ftkuigov0bisu"},{"name":"C#","_id":"ck7nej209002htkui19z9tr4x"},{"name":"摘录","_id":"ck7nej209002jtkui8zshjxbn"},{"name":"解构器","_id":"ck7nej20d002rtkuir01xybf1"},{"name":"委托","_id":"ck7nej20d002stkuixt9eknxw"},{"name":"异常类型","_id":"ck7nej20h002xtkuiffsgskph"},{"name":"重载运算符","_id":"ck7nej20i002ytkuipdxrbevg"},{"name":"基础","_id":"ck7nej20i002ztkui7htyfejv"},{"name":"加密","_id":"ck7nej20j0031tkuiaw8mlhbx"},{"name":"邮件","_id":"ck7nej20j0033tkuivffragfy"},{"name":"winform","_id":"ck7nej20l0036tkui5cblmyzq"},{"name":"Sqlite","_id":"ck7nej20l0038tkuitu4zldul"},{"name":"复制对象","_id":"ck7nej20o003etkuion7a8dxg"},{"name":"EF Core","_id":"ck7nej20p003htkuit8pq0hso"},{"name":"MVC","_id":"ck7nej20q003jtkui0z0oomih"},{"name":"IdentityServer4","_id":"ck7nej20r003ltkui4t22btyw"},{"name":"Ocelot","_id":"ck7nej20r003ntkuilfglg1du"},{"name":"WebApi","_id":"ck7nej20s003ptkuipcnll3mb"},{"name":"Autofac","_id":"ck7nej20t003rtkuiz4psr2yu"},{"name":"Swagger","_id":"ck7nej20u003ttkuini1kdjtf"},{"name":"框架","_id":"ck7nej20u003utkuia8zv9gqj"},{"name":"Dapper","_id":"ck7nej20u003vtkui5wpju0k6"},{"name":"NLog","_id":"ck7nej25o0081tkui5espdfc2"},{"name":"设计模式","_id":"ck7nej25q0089tkuifddgiu9e"},{"name":"RSA算法","_id":"ck7nej25t008jtkuij1hl6zfs"},{"name":".Net","_id":"ck7nej25x008vtkuijove8yt3"},{"name":"Log4net","_id":"ck7nej25y008xtkuiasshbsb2"},{"name":"读书笔记","_id":"ck7nej25z0091tkuigaxljtru"},{"name":"亲密关系","_id":"ck7nej2600093tkuiv9r6pyof"},{"name":"人际交往","_id":"ck7nej2610097tkuioui7azp2"},{"name":"Linq","_id":"ck7nej263009btkuikjbd9jgq"},{"name":"WCF","_id":"ck7nej264009dtkuip4d16se3"},{"name":"Spider","_id":"ck7nej268009ltkui3zvzsvz9"},{"name":"Web Api","_id":"ck7nej269009ptkuif6b89vd6"},{"name":"随笔","_id":"ck7nej26a009rtkui0y13mubo"},{"name":"Vue.js","_id":"ck7nej26b009ttkuivtyjadmc"},{"name":"自我","_id":"ck7nej26d009xtkuivsme5bd8"},{"name":"API","_id":"ck7nej26e009ztkui4hjjor1v"},{"name":"复制","_id":"ck7nej26e00a0tkuidx5p84vo"},{"name":"架构","_id":"ck7nej26f00a2tkui5lccb765"},{"name":"微服务","_id":"ck7nej26g00a3tkuipa07axe2"},{"name":"哲学","_id":"ck7nej26i00a7tkui32iinb77"},{"name":"直觉泵","_id":"ck7nej26j00a8tkui5ldqilqh"},{"name":"习惯","_id":"ck7nej26l00adtkuilgbaa5qv"}]}}